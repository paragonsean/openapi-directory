/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FailedOutgoingTransactionImage;
import org.openapitools.client.model.OutgoingTransactionImage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for transactionsTokenImagePost
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param sequencenumber the index of this image in the transaction (required)
     * @param totalimagecount the total number of images in this transaction (required)
     * @param dataset the dataset byte array (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image data received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenImagePostCall(String token, Long transactionid, Long sequencenumber, Long totalimagecount, Object dataset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = dataset;

        // create path and map variables
        String localVarPath = "/transactions/{token}/image"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionid", transactionid));
        }

        if (sequencenumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sequencenumber", sequencenumber));
        }

        if (totalimagecount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("totalimagecount", totalimagecount));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/octet-stream"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenImagePostValidateBeforeCall(String token, Long transactionid, Long sequencenumber, Long totalimagecount, Object dataset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenImagePost(Async)");
        }

        // verify the required parameter 'transactionid' is set
        if (transactionid == null) {
            throw new ApiException("Missing the required parameter 'transactionid' when calling transactionsTokenImagePost(Async)");
        }

        // verify the required parameter 'sequencenumber' is set
        if (sequencenumber == null) {
            throw new ApiException("Missing the required parameter 'sequencenumber' when calling transactionsTokenImagePost(Async)");
        }

        // verify the required parameter 'totalimagecount' is set
        if (totalimagecount == null) {
            throw new ApiException("Missing the required parameter 'totalimagecount' when calling transactionsTokenImagePost(Async)");
        }

        // verify the required parameter 'dataset' is set
        if (dataset == null) {
            throw new ApiException("Missing the required parameter 'dataset' when calling transactionsTokenImagePost(Async)");
        }

        return transactionsTokenImagePostCall(token, transactionid, sequencenumber, totalimagecount, dataset, _callback);

    }

    /**
     * 
     * add an image (dataset) as part of a transaction. This method is used when sending images using the push method to a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param sequencenumber the index of this image in the transaction (required)
     * @param totalimagecount the total number of images in this transaction (required)
     * @param dataset the dataset byte array (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image data received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsTokenImagePost(String token, Long transactionid, Long sequencenumber, Long totalimagecount, Object dataset) throws ApiException {
        transactionsTokenImagePostWithHttpInfo(token, transactionid, sequencenumber, totalimagecount, dataset);
    }

    /**
     * 
     * add an image (dataset) as part of a transaction. This method is used when sending images using the push method to a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param sequencenumber the index of this image in the transaction (required)
     * @param totalimagecount the total number of images in this transaction (required)
     * @param dataset the dataset byte array (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image data received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsTokenImagePostWithHttpInfo(String token, Long transactionid, Long sequencenumber, Long totalimagecount, Object dataset) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenImagePostValidateBeforeCall(token, transactionid, sequencenumber, totalimagecount, dataset, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * add an image (dataset) as part of a transaction. This method is used when sending images using the push method to a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param sequencenumber the index of this image in the transaction (required)
     * @param totalimagecount the total number of images in this transaction (required)
     * @param dataset the dataset byte array (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> image data received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenImagePostAsync(String token, Long transactionid, Long sequencenumber, Long totalimagecount, Object dataset, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenImagePostValidateBeforeCall(token, transactionid, sequencenumber, totalimagecount, dataset, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsTokenOutgoingDonePost
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingEntryAndImageInformationBlock outgoing transaction and image that has been successfully received (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> done message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingDonePostCall(String token, OutgoingTransactionImage outgoingEntryAndImageInformationBlock, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outgoingEntryAndImageInformationBlock;

        // create path and map variables
        String localVarPath = "/transactions/{token}/outgoing/done"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenOutgoingDonePostValidateBeforeCall(String token, OutgoingTransactionImage outgoingEntryAndImageInformationBlock, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenOutgoingDonePost(Async)");
        }

        // verify the required parameter 'outgoingEntryAndImageInformationBlock' is set
        if (outgoingEntryAndImageInformationBlock == null) {
            throw new ApiException("Missing the required parameter 'outgoingEntryAndImageInformationBlock' when calling transactionsTokenOutgoingDonePost(Async)");
        }

        return transactionsTokenOutgoingDonePostCall(token, outgoingEntryAndImageInformationBlock, _callback);

    }

    /**
     * 
     * signal that the supplied outgoing transaction and image was successfully received and can be marked as sent. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingEntryAndImageInformationBlock outgoing transaction and image that has been successfully received (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> done message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsTokenOutgoingDonePost(String token, OutgoingTransactionImage outgoingEntryAndImageInformationBlock) throws ApiException {
        transactionsTokenOutgoingDonePostWithHttpInfo(token, outgoingEntryAndImageInformationBlock);
    }

    /**
     * 
     * signal that the supplied outgoing transaction and image was successfully received and can be marked as sent. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingEntryAndImageInformationBlock outgoing transaction and image that has been successfully received (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> done message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsTokenOutgoingDonePostWithHttpInfo(String token, OutgoingTransactionImage outgoingEntryAndImageInformationBlock) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenOutgoingDonePostValidateBeforeCall(token, outgoingEntryAndImageInformationBlock, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * signal that the supplied outgoing transaction and image was successfully received and can be marked as sent. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingEntryAndImageInformationBlock outgoing transaction and image that has been successfully received (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> done message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingDonePostAsync(String token, OutgoingTransactionImage outgoingEntryAndImageInformationBlock, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenOutgoingDonePostValidateBeforeCall(token, outgoingEntryAndImageInformationBlock, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsTokenOutgoingFailedPost
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingTransactionAndImageCommaAndErrorMessage the outgoing transaction and image information block corresponding to the failed image transfer, along with the associated error message (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> failed message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingFailedPostCall(String token, FailedOutgoingTransactionImage outgoingTransactionAndImageCommaAndErrorMessage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = outgoingTransactionAndImageCommaAndErrorMessage;

        // create path and map variables
        String localVarPath = "/transactions/{token}/outgoing/failed"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenOutgoingFailedPostValidateBeforeCall(String token, FailedOutgoingTransactionImage outgoingTransactionAndImageCommaAndErrorMessage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenOutgoingFailedPost(Async)");
        }

        // verify the required parameter 'outgoingTransactionAndImageCommaAndErrorMessage' is set
        if (outgoingTransactionAndImageCommaAndErrorMessage == null) {
            throw new ApiException("Missing the required parameter 'outgoingTransactionAndImageCommaAndErrorMessage' when calling transactionsTokenOutgoingFailedPost(Async)");
        }

        return transactionsTokenOutgoingFailedPostCall(token, outgoingTransactionAndImageCommaAndErrorMessage, _callback);

    }

    /**
     * 
     * signal that the image corresponding to the supplied outgoing transaction and image could not be read or stored properly on the receiving side, and that the transaction should be marked as failed.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingTransactionAndImageCommaAndErrorMessage the outgoing transaction and image information block corresponding to the failed image transfer, along with the associated error message (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> failed message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsTokenOutgoingFailedPost(String token, FailedOutgoingTransactionImage outgoingTransactionAndImageCommaAndErrorMessage) throws ApiException {
        transactionsTokenOutgoingFailedPostWithHttpInfo(token, outgoingTransactionAndImageCommaAndErrorMessage);
    }

    /**
     * 
     * signal that the image corresponding to the supplied outgoing transaction and image could not be read or stored properly on the receiving side, and that the transaction should be marked as failed.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingTransactionAndImageCommaAndErrorMessage the outgoing transaction and image information block corresponding to the failed image transfer, along with the associated error message (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> failed message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsTokenOutgoingFailedPostWithHttpInfo(String token, FailedOutgoingTransactionImage outgoingTransactionAndImageCommaAndErrorMessage) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenOutgoingFailedPostValidateBeforeCall(token, outgoingTransactionAndImageCommaAndErrorMessage, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * signal that the image corresponding to the supplied outgoing transaction and image could not be read or stored properly on the receiving side, and that the transaction should be marked as failed.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param outgoingTransactionAndImageCommaAndErrorMessage the outgoing transaction and image information block corresponding to the failed image transfer, along with the associated error message (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> failed message received </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingFailedPostAsync(String token, FailedOutgoingTransactionImage outgoingTransactionAndImageCommaAndErrorMessage, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenOutgoingFailedPostValidateBeforeCall(token, outgoingTransactionAndImageCommaAndErrorMessage, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsTokenOutgoingGet
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the outgoing transaction (required)
     * @param imageid the ID of the outgoing transaction image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no outgoing trensaction and/or image found for the supplied transaction id and transaction image id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingGetCall(String token, Long transactionid, Long imageid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{token}/outgoing"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionid", transactionid));
        }

        if (imageid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("imageid", imageid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenOutgoingGetValidateBeforeCall(String token, Long transactionid, Long imageid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenOutgoingGet(Async)");
        }

        // verify the required parameter 'transactionid' is set
        if (transactionid == null) {
            throw new ApiException("Missing the required parameter 'transactionid' when calling transactionsTokenOutgoingGet(Async)");
        }

        // verify the required parameter 'imageid' is set
        if (imageid == null) {
            throw new ApiException("Missing the required parameter 'imageid' when calling transactionsTokenOutgoingGet(Async)");
        }

        return transactionsTokenOutgoingGetCall(token, transactionid, imageid, _callback);

    }

    /**
     * 
     * fetch an image from the connected box as part of a transaction. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the outgoing transaction (required)
     * @param imageid the ID of the outgoing transaction image (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no outgoing trensaction and/or image found for the supplied transaction id and transaction image id </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsTokenOutgoingGet(String token, Long transactionid, Long imageid) throws ApiException {
        transactionsTokenOutgoingGetWithHttpInfo(token, transactionid, imageid);
    }

    /**
     * 
     * fetch an image from the connected box as part of a transaction. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the outgoing transaction (required)
     * @param imageid the ID of the outgoing transaction image (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no outgoing trensaction and/or image found for the supplied transaction id and transaction image id </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsTokenOutgoingGetWithHttpInfo(String token, Long transactionid, Long imageid) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenOutgoingGetValidateBeforeCall(token, transactionid, imageid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * fetch an image from the connected box as part of a transaction. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the outgoing transaction (required)
     * @param imageid the ID of the outgoing transaction image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of dataset </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no outgoing trensaction and/or image found for the supplied transaction id and transaction image id </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingGetAsync(String token, Long transactionid, Long imageid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenOutgoingGetValidateBeforeCall(token, transactionid, imageid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsTokenOutgoingPollGet
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> next outgoing transaction and image information block </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there are currently no outgoing transactions to fetch for the box connection with the supplied token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingPollGetCall(String token, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{token}/outgoing/poll"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenOutgoingPollGetValidateBeforeCall(String token, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenOutgoingPollGet(Async)");
        }

        return transactionsTokenOutgoingPollGetCall(token, _callback);

    }

    /**
     * 
     * get next outgoing transaction and image (information on the next image that the connected box wishes to send to you), if any. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @return List&lt;OutgoingTransactionImage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> next outgoing transaction and image information block </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there are currently no outgoing transactions to fetch for the box connection with the supplied token </td><td>  -  </td></tr>
     </table>
     */
    public List<OutgoingTransactionImage> transactionsTokenOutgoingPollGet(String token) throws ApiException {
        ApiResponse<List<OutgoingTransactionImage>> localVarResp = transactionsTokenOutgoingPollGetWithHttpInfo(token);
        return localVarResp.getData();
    }

    /**
     * 
     * get next outgoing transaction and image (information on the next image that the connected box wishes to send to you), if any. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @return ApiResponse&lt;List&lt;OutgoingTransactionImage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> next outgoing transaction and image information block </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there are currently no outgoing transactions to fetch for the box connection with the supplied token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<OutgoingTransactionImage>> transactionsTokenOutgoingPollGetWithHttpInfo(String token) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenOutgoingPollGetValidateBeforeCall(token, null);
        Type localVarReturnType = new TypeToken<List<OutgoingTransactionImage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get next outgoing transaction and image (information on the next image that the connected box wishes to send to you), if any. This method is used when sending images using the poll method from a public slicebox.
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> next outgoing transaction and image information block </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> there are currently no outgoing transactions to fetch for the box connection with the supplied token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenOutgoingPollGetAsync(String token, final ApiCallback<List<OutgoingTransactionImage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenOutgoingPollGetValidateBeforeCall(token, _callback);
        Type localVarReturnType = new TypeToken<List<OutgoingTransactionImage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsTokenStatusGet
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> string representation of the transaction status (FINISHED, FAILED, WAITING or PROCESSING) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenStatusGetCall(String token, Long transactionid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/transactions/{token}/status"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionid", transactionid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenStatusGetValidateBeforeCall(String token, Long transactionid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenStatusGet(Async)");
        }

        // verify the required parameter 'transactionid' is set
        if (transactionid == null) {
            throw new ApiException("Missing the required parameter 'transactionid' when calling transactionsTokenStatusGet(Async)");
        }

        return transactionsTokenStatusGetCall(token, transactionid, _callback);

    }

    /**
     * 
     * get the status of the remote incoming transaction with the supplied transaction ID
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> string representation of the transaction status (FINISHED, FAILED, WAITING or PROCESSING) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsTokenStatusGet(String token, Long transactionid) throws ApiException {
        transactionsTokenStatusGetWithHttpInfo(token, transactionid);
    }

    /**
     * 
     * get the status of the remote incoming transaction with the supplied transaction ID
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> string representation of the transaction status (FINISHED, FAILED, WAITING or PROCESSING) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsTokenStatusGetWithHttpInfo(String token, Long transactionid) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenStatusGetValidateBeforeCall(token, transactionid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * get the status of the remote incoming transaction with the supplied transaction ID
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> string representation of the transaction status (FINISHED, FAILED, WAITING or PROCESSING) </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> unauthorized, invalid token </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenStatusGetAsync(String token, Long transactionid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenStatusGetValidateBeforeCall(token, transactionid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for transactionsTokenStatusPut
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param transactionStatus the updated status of the transaction (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> status update successfully applied to transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenStatusPutCall(String token, Long transactionid, String transactionStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = transactionStatus;

        // create path and map variables
        String localVarPath = "/transactions/{token}/status"
            .replace("{" + "token" + "}", localVarApiClient.escapeString(token.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (transactionid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transactionid", transactionid));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call transactionsTokenStatusPutValidateBeforeCall(String token, Long transactionid, String transactionStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'token' is set
        if (token == null) {
            throw new ApiException("Missing the required parameter 'token' when calling transactionsTokenStatusPut(Async)");
        }

        // verify the required parameter 'transactionid' is set
        if (transactionid == null) {
            throw new ApiException("Missing the required parameter 'transactionid' when calling transactionsTokenStatusPut(Async)");
        }

        // verify the required parameter 'transactionStatus' is set
        if (transactionStatus == null) {
            throw new ApiException("Missing the required parameter 'transactionStatus' when calling transactionsTokenStatusPut(Async)");
        }

        return transactionsTokenStatusPutCall(token, transactionid, transactionStatus, _callback);

    }

    /**
     * 
     * update the status of the transaction with the supplied ID
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param transactionStatus the updated status of the transaction (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> status update successfully applied to transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public void transactionsTokenStatusPut(String token, Long transactionid, String transactionStatus) throws ApiException {
        transactionsTokenStatusPutWithHttpInfo(token, transactionid, transactionStatus);
    }

    /**
     * 
     * update the status of the transaction with the supplied ID
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param transactionStatus the updated status of the transaction (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> status update successfully applied to transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> transactionsTokenStatusPutWithHttpInfo(String token, Long transactionid, String transactionStatus) throws ApiException {
        okhttp3.Call localVarCall = transactionsTokenStatusPutValidateBeforeCall(token, transactionid, transactionStatus, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * update the status of the transaction with the supplied ID
     * @param token authentication token identifying the current box-to-box connection (required)
     * @param transactionid the ID of the client&#39;s outgoing transaction (required)
     * @param transactionStatus the updated status of the transaction (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> status update successfully applied to transaction </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no transaction found for the supplied transaction ID and box token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call transactionsTokenStatusPutAsync(String token, Long transactionid, String transactionStatus, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = transactionsTokenStatusPutValidateBeforeCall(token, transactionid, transactionStatus, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
