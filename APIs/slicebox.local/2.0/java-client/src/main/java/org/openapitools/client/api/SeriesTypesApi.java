/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Seriestype;
import org.openapitools.client.model.Seriestyperule;
import org.openapitools.client.model.Seriestyperuleattribute;
import org.openapitools.client.model.Seriestypeupdatestatus;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SeriesTypesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SeriesTypesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SeriesTypesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for seriestypesGet
     * @param startindex start index of returned slice of series types (optional, default to 0)
     * @param count size of returned slice of series types (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesGetCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesGetValidateBeforeCall(Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        return seriestypesGetCall(startindex, count, _callback);

    }

    /**
     * 
     * get a list of all added series types. By filtering search results for certain series types, it is easier for applications to ensure that they read images of applicable types.
     * @param startindex start index of returned slice of series types (optional, default to 0)
     * @param count size of returned slice of series types (optional, default to 20)
     * @return List&lt;Seriestype&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
     </table>
     */
    public List<Seriestype> seriestypesGet(Long startindex, Long count) throws ApiException {
        ApiResponse<List<Seriestype>> localVarResp = seriestypesGetWithHttpInfo(startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * get a list of all added series types. By filtering search results for certain series types, it is easier for applications to ensure that they read images of applicable types.
     * @param startindex start index of returned slice of series types (optional, default to 0)
     * @param count size of returned slice of series types (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Seriestype&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Seriestype>> seriestypesGetWithHttpInfo(Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = seriestypesGetValidateBeforeCall(startindex, count, null);
        Type localVarReturnType = new TypeToken<List<Seriestype>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a list of all added series types. By filtering search results for certain series types, it is easier for applications to ensure that they read images of applicable types.
     * @param startindex start index of returned slice of series types (optional, default to 0)
     * @param count size of returned slice of series types (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesGetAsync(Long startindex, Long count, final ApiCallback<List<Seriestype>> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesGetValidateBeforeCall(startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<Seriestype>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesIdDelete
     * @param id id of series type to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriestypesIdDelete(Async)");
        }

        return seriestypesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * remove the series type corresponding to the supplied ID
     * @param id id of series type to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public void seriestypesIdDelete(Long id) throws ApiException {
        seriestypesIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * remove the series type corresponding to the supplied ID
     * @param id id of series type to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seriestypesIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = seriestypesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the series type corresponding to the supplied ID
     * @param id id of series type to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesIdPut
     * @param id id of series type to update series labels for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> update successfully added to queue of series type updates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesIdPutCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesIdPutValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriestypesIdPut(Async)");
        }

        return seriestypesIdPutCall(id, _callback);

    }

    /**
     * 
     * request an asynchronous update of all series, labelling appropriate series with the series type corresponding to the supplied ID.
     * @param id id of series type to update series labels for (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> update successfully added to queue of series type updates </td><td>  -  </td></tr>
     </table>
     */
    public void seriestypesIdPut(Long id) throws ApiException {
        seriestypesIdPutWithHttpInfo(id);
    }

    /**
     * 
     * request an asynchronous update of all series, labelling appropriate series with the series type corresponding to the supplied ID.
     * @param id id of series type to update series labels for (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> update successfully added to queue of series type updates </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seriestypesIdPutWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = seriestypesIdPutValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * request an asynchronous update of all series, labelling appropriate series with the series type corresponding to the supplied ID.
     * @param id id of series type to update series labels for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> update successfully added to queue of series type updates </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesIdPutAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesIdPutValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesPost
     * @param seriesType Series type information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesPostCall(Seriestype seriesType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = seriesType;

        // create path and map variables
        String localVarPath = "/seriestypes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesPostValidateBeforeCall(Seriestype seriesType, final ApiCallback _callback) throws ApiException {
        return seriestypesPostCall(seriesType, _callback);

    }

    /**
     * 
     * add a new series type
     * @param seriesType Series type information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return Seriestype
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type </td><td>  -  </td></tr>
     </table>
     */
    public Seriestype seriestypesPost(Seriestype seriesType) throws ApiException {
        ApiResponse<Seriestype> localVarResp = seriestypesPostWithHttpInfo(seriesType);
        return localVarResp.getData();
    }

    /**
     * 
     * add a new series type
     * @param seriesType Series type information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return ApiResponse&lt;Seriestype&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Seriestype> seriestypesPostWithHttpInfo(Seriestype seriesType) throws ApiException {
        okhttp3.Call localVarCall = seriestypesPostValidateBeforeCall(seriesType, null);
        Type localVarReturnType = new TypeToken<Seriestype>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a new series type
     * @param seriesType Series type information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesPostAsync(Seriestype seriesType, final ApiCallback<Seriestype> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesPostValidateBeforeCall(seriesType, _callback);
        Type localVarReturnType = new TypeToken<Seriestype>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesGet
     * @param seriestypeid ID of series type to list rules for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rules for the series type with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesGetCall(Long seriestypeid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (seriestypeid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypeid", seriestypeid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesGetValidateBeforeCall(Long seriestypeid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriestypeid' is set
        if (seriestypeid == null) {
            throw new ApiException("Missing the required parameter 'seriestypeid' when calling seriestypesRulesGet(Async)");
        }

        return seriestypesRulesGetCall(seriestypeid, _callback);

    }

    /**
     * 
     * get a list of rules for assigning series types to series. A rule connects to a series of attributes with values and a resulting series type. If a series has the required values of the listed attributes, it is assigned to the series type of the rule.
     * @param seriestypeid ID of series type to list rules for (required)
     * @return List&lt;Seriestyperule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rules for the series type with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Seriestyperule> seriestypesRulesGet(Long seriestypeid) throws ApiException {
        ApiResponse<List<Seriestyperule>> localVarResp = seriestypesRulesGetWithHttpInfo(seriestypeid);
        return localVarResp.getData();
    }

    /**
     * 
     * get a list of rules for assigning series types to series. A rule connects to a series of attributes with values and a resulting series type. If a series has the required values of the listed attributes, it is assigned to the series type of the rule.
     * @param seriestypeid ID of series type to list rules for (required)
     * @return ApiResponse&lt;List&lt;Seriestyperule&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rules for the series type with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Seriestyperule>> seriestypesRulesGetWithHttpInfo(Long seriestypeid) throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesGetValidateBeforeCall(seriestypeid, null);
        Type localVarReturnType = new TypeToken<List<Seriestyperule>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a list of rules for assigning series types to series. A rule connects to a series of attributes with values and a resulting series type. If a series has the required values of the listed attributes, it is assigned to the series type of the rule.
     * @param seriestypeid ID of series type to list rules for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rules for the series type with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesGetAsync(Long seriestypeid, final ApiCallback<List<Seriestyperule>> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesGetValidateBeforeCall(seriestypeid, _callback);
        Type localVarReturnType = new TypeToken<List<Seriestyperule>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesIdAttributesGet
     * @param id index of series type rule to list rule attributes for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rule attributes for the series type rule with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesIdAttributesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/rules/{id}/attributes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesIdAttributesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriestypesRulesIdAttributesGet(Async)");
        }

        return seriestypesRulesIdAttributesGetCall(id, _callback);

    }

    /**
     * 
     * get the list of attributes for the series type rule with the supplied ID.
     * @param id index of series type rule to list rule attributes for (required)
     * @return List&lt;Seriestyperuleattribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rule attributes for the series type rule with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public List<Seriestyperuleattribute> seriestypesRulesIdAttributesGet(Long id) throws ApiException {
        ApiResponse<List<Seriestyperuleattribute>> localVarResp = seriestypesRulesIdAttributesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the list of attributes for the series type rule with the supplied ID.
     * @param id index of series type rule to list rule attributes for (required)
     * @return ApiResponse&lt;List&lt;Seriestyperuleattribute&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rule attributes for the series type rule with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Seriestyperuleattribute>> seriestypesRulesIdAttributesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesIdAttributesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Seriestyperuleattribute>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the list of attributes for the series type rule with the supplied ID.
     * @param id index of series type rule to list rule attributes for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series type rule attributes for the series type rule with the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesIdAttributesGetAsync(Long id, final ApiCallback<List<Seriestyperuleattribute>> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesIdAttributesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Seriestyperuleattribute>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesIdAttributesPost
     * @param id ID of rule (required)
     * @param seriesTypeRuleAttribute Series type rule attribute information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesIdAttributesPostCall(Long id, Seriestyperuleattribute seriesTypeRuleAttribute, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = seriesTypeRuleAttribute;

        // create path and map variables
        String localVarPath = "/seriestypes/rules/{id}/attributes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesIdAttributesPostValidateBeforeCall(Long id, Seriestyperuleattribute seriesTypeRuleAttribute, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriestypesRulesIdAttributesPost(Async)");
        }

        return seriestypesRulesIdAttributesPostCall(id, seriesTypeRuleAttribute, _callback);

    }

    /**
     * 
     * add a new series type rule attribute
     * @param id ID of rule (required)
     * @param seriesTypeRuleAttribute Series type rule attribute information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return Seriestyperuleattribute
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule attribute </td><td>  -  </td></tr>
     </table>
     */
    public Seriestyperuleattribute seriestypesRulesIdAttributesPost(Long id, Seriestyperuleattribute seriesTypeRuleAttribute) throws ApiException {
        ApiResponse<Seriestyperuleattribute> localVarResp = seriestypesRulesIdAttributesPostWithHttpInfo(id, seriesTypeRuleAttribute);
        return localVarResp.getData();
    }

    /**
     * 
     * add a new series type rule attribute
     * @param id ID of rule (required)
     * @param seriesTypeRuleAttribute Series type rule attribute information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return ApiResponse&lt;Seriestyperuleattribute&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule attribute </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Seriestyperuleattribute> seriestypesRulesIdAttributesPostWithHttpInfo(Long id, Seriestyperuleattribute seriesTypeRuleAttribute) throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesIdAttributesPostValidateBeforeCall(id, seriesTypeRuleAttribute, null);
        Type localVarReturnType = new TypeToken<Seriestyperuleattribute>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a new series type rule attribute
     * @param id ID of rule (required)
     * @param seriesTypeRuleAttribute Series type rule attribute information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule attribute </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesIdAttributesPostAsync(Long id, Seriestyperuleattribute seriesTypeRuleAttribute, final ApiCallback<Seriestyperuleattribute> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesIdAttributesPostValidateBeforeCall(id, seriesTypeRuleAttribute, _callback);
        Type localVarReturnType = new TypeToken<Seriestyperuleattribute>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesIdDelete
     * @param id id of series type rule to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/rules/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling seriestypesRulesIdDelete(Async)");
        }

        return seriestypesRulesIdDeleteCall(id, _callback);

    }

    /**
     * 
     * remove the series type rule corresponding to the supplied ID
     * @param id id of series type rule to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule removed </td><td>  -  </td></tr>
     </table>
     */
    public void seriestypesRulesIdDelete(Long id) throws ApiException {
        seriestypesRulesIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * remove the series type rule corresponding to the supplied ID
     * @param id id of series type rule to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seriestypesRulesIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the series type rule corresponding to the supplied ID
     * @param id id of series type rule to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesPost
     * @param seriesTypeRule Series type rule information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesPostCall(Seriestyperule seriesTypeRule, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = seriesTypeRule;

        // create path and map variables
        String localVarPath = "/seriestypes/rules";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesPostValidateBeforeCall(Seriestyperule seriesTypeRule, final ApiCallback _callback) throws ApiException {
        return seriestypesRulesPostCall(seriesTypeRule, _callback);

    }

    /**
     * 
     * add a new series type rule
     * @param seriesTypeRule Series type rule information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return Seriestyperule
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule </td><td>  -  </td></tr>
     </table>
     */
    public Seriestyperule seriestypesRulesPost(Seriestyperule seriesTypeRule) throws ApiException {
        ApiResponse<Seriestyperule> localVarResp = seriestypesRulesPostWithHttpInfo(seriesTypeRule);
        return localVarResp.getData();
    }

    /**
     * 
     * add a new series type rule
     * @param seriesTypeRule Series type rule information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @return ApiResponse&lt;Seriestyperule&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Seriestyperule> seriestypesRulesPostWithHttpInfo(Seriestyperule seriesTypeRule) throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesPostValidateBeforeCall(seriesTypeRule, null);
        Type localVarReturnType = new TypeToken<Seriestyperule>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a new series type rule
     * @param seriesTypeRule Series type rule information. The ID property is irrelevant, the ID of the inserted record is present in the returned data. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> the created series type rule </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesPostAsync(Seriestyperule seriesTypeRule, final ApiCallback<Seriestyperule> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesPostValidateBeforeCall(seriesTypeRule, _callback);
        Type localVarReturnType = new TypeToken<Seriestyperule>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesRuleIdAttributesAttributeIdDelete
     * @param ruleId id of series type rule for which to remove an attribute (required)
     * @param attributeId id of attribute to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule attribute removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesRuleIdAttributesAttributeIdDeleteCall(Long ruleId, Long attributeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/rules/{ruleId}/attributes/{attributeId}"
            .replace("{" + "ruleId" + "}", localVarApiClient.escapeString(ruleId.toString()))
            .replace("{" + "attributeId" + "}", localVarApiClient.escapeString(attributeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesRuleIdAttributesAttributeIdDeleteValidateBeforeCall(Long ruleId, Long attributeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ruleId' is set
        if (ruleId == null) {
            throw new ApiException("Missing the required parameter 'ruleId' when calling seriestypesRulesRuleIdAttributesAttributeIdDelete(Async)");
        }

        // verify the required parameter 'attributeId' is set
        if (attributeId == null) {
            throw new ApiException("Missing the required parameter 'attributeId' when calling seriestypesRulesRuleIdAttributesAttributeIdDelete(Async)");
        }

        return seriestypesRulesRuleIdAttributesAttributeIdDeleteCall(ruleId, attributeId, _callback);

    }

    /**
     * 
     * remove the series type rule attribute corresponding to the supplied series type and attribute IDs
     * @param ruleId id of series type rule for which to remove an attribute (required)
     * @param attributeId id of attribute to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule attribute removed </td><td>  -  </td></tr>
     </table>
     */
    public void seriestypesRulesRuleIdAttributesAttributeIdDelete(Long ruleId, Long attributeId) throws ApiException {
        seriestypesRulesRuleIdAttributesAttributeIdDeleteWithHttpInfo(ruleId, attributeId);
    }

    /**
     * 
     * remove the series type rule attribute corresponding to the supplied series type and attribute IDs
     * @param ruleId id of series type rule for which to remove an attribute (required)
     * @param attributeId id of attribute to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule attribute removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> seriestypesRulesRuleIdAttributesAttributeIdDeleteWithHttpInfo(Long ruleId, Long attributeId) throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesRuleIdAttributesAttributeIdDeleteValidateBeforeCall(ruleId, attributeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * remove the series type rule attribute corresponding to the supplied series type and attribute IDs
     * @param ruleId id of series type rule for which to remove an attribute (required)
     * @param attributeId id of attribute to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type rule attribute removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesRuleIdAttributesAttributeIdDeleteAsync(Long ruleId, Long attributeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesRuleIdAttributesAttributeIdDeleteValidateBeforeCall(ruleId, attributeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesRulesUpdatestatusGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a status message, indicating if an update is running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesUpdatestatusGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/seriestypes/rules/updatestatus";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesRulesUpdatestatusGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return seriestypesRulesUpdatestatusGetCall(_callback);

    }

    /**
     * 
     * get the status of the internal process of updating series types for series following a change of series types, rules or attributes.
     * @return Seriestypeupdatestatus
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a status message, indicating if an update is running </td><td>  -  </td></tr>
     </table>
     */
    public Seriestypeupdatestatus seriestypesRulesUpdatestatusGet() throws ApiException {
        ApiResponse<Seriestypeupdatestatus> localVarResp = seriestypesRulesUpdatestatusGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * get the status of the internal process of updating series types for series following a change of series types, rules or attributes.
     * @return ApiResponse&lt;Seriestypeupdatestatus&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a status message, indicating if an update is running </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Seriestypeupdatestatus> seriestypesRulesUpdatestatusGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = seriestypesRulesUpdatestatusGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<Seriestypeupdatestatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the status of the internal process of updating series types for series following a change of series types, rules or attributes.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a status message, indicating if an update is running </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesRulesUpdatestatusGetAsync(final ApiCallback<Seriestypeupdatestatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesRulesUpdatestatusGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<Seriestypeupdatestatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
