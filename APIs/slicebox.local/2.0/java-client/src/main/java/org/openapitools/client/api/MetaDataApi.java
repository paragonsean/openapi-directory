/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.FlatSeries;
import org.openapitools.client.model.Idsquery;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.Patient;
import org.openapitools.client.model.Query;
import org.openapitools.client.model.Series;
import org.openapitools.client.model.Seriesidseriestypesresult;
import org.openapitools.client.model.Seriestag;
import org.openapitools.client.model.Seriestype;
import org.openapitools.client.model.Source;
import org.openapitools.client.model.Study;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MetaDataApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public MetaDataApi() {
        this(Configuration.getDefaultApiClient());
    }

    public MetaDataApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for metadataFlatseriesGet
     * @param startindex start index of returned slice of flat series (optional, default to 0)
     * @param count size of returned slice of flat series (optional, default to 20)
     * @param orderby flat series property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of flat series properties against this value (optional)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataFlatseriesGetCall(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/flatseries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (orderascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderascending", orderascending));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (seriestypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypes", seriestypes));
        }

        if (seriestags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestags", seriestags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataFlatseriesGetValidateBeforeCall(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        return metadataFlatseriesGetCall(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags, _callback);

    }

    /**
     * 
     * Returns a list of flattened metadata on the patient, study and series levels
     * @param startindex start index of returned slice of flat series (optional, default to 0)
     * @param count size of returned slice of flat series (optional, default to 20)
     * @param orderby flat series property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of flat series properties against this value (optional)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return List&lt;FlatSeries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public List<FlatSeries> metadataFlatseriesGet(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags) throws ApiException {
        ApiResponse<List<FlatSeries>> localVarResp = metadataFlatseriesGetWithHttpInfo(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of flattened metadata on the patient, study and series levels
     * @param startindex start index of returned slice of flat series (optional, default to 0)
     * @param count size of returned slice of flat series (optional, default to 20)
     * @param orderby flat series property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of flat series properties against this value (optional)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return ApiResponse&lt;List&lt;FlatSeries&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlatSeries>> metadataFlatseriesGetWithHttpInfo(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags) throws ApiException {
        okhttp3.Call localVarCall = metadataFlatseriesGetValidateBeforeCall(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags, null);
        Type localVarReturnType = new TypeToken<List<FlatSeries>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of flattened metadata on the patient, study and series levels
     * @param startindex start index of returned slice of flat series (optional, default to 0)
     * @param count size of returned slice of flat series (optional, default to 20)
     * @param orderby flat series property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of flat series properties against this value (optional)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataFlatseriesGetAsync(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags, final ApiCallback<List<FlatSeries>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataFlatseriesGetValidateBeforeCall(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags, _callback);
        Type localVarReturnType = new TypeToken<List<FlatSeries>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataFlatseriesIdGet
     * @param id ID of flat series (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> flat series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataFlatseriesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/flatseries/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataFlatseriesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataFlatseriesIdGet(Async)");
        }

        return metadataFlatseriesIdGetCall(id, _callback);

    }

    /**
     * 
     * Return the flat series with the supplied ID
     * @param id ID of flat series (required)
     * @return FlatSeries
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> flat series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public FlatSeries metadataFlatseriesIdGet(Long id) throws ApiException {
        ApiResponse<FlatSeries> localVarResp = metadataFlatseriesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the flat series with the supplied ID
     * @param id ID of flat series (required)
     * @return ApiResponse&lt;FlatSeries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> flat series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FlatSeries> metadataFlatseriesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataFlatseriesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FlatSeries>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the flat series with the supplied ID
     * @param id ID of flat series (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> flat series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataFlatseriesIdGetAsync(Long id, final ApiCallback<FlatSeries> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataFlatseriesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FlatSeries>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataFlatseriesQueryPost
     * @param query parameters of flat series query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataFlatseriesQueryPostCall(Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/metadata/flatseries/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataFlatseriesQueryPostValidateBeforeCall(Query query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling metadataFlatseriesQueryPost(Async)");
        }

        return metadataFlatseriesQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for flat series
     * @param query parameters of flat series query (required)
     * @return List&lt;FlatSeries&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public List<FlatSeries> metadataFlatseriesQueryPost(Query query) throws ApiException {
        ApiResponse<List<FlatSeries>> localVarResp = metadataFlatseriesQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for flat series
     * @param query parameters of flat series query (required)
     * @return ApiResponse&lt;List&lt;FlatSeries&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<FlatSeries>> metadataFlatseriesQueryPostWithHttpInfo(Query query) throws ApiException {
        okhttp3.Call localVarCall = metadataFlatseriesQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<FlatSeries>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for flat series
     * @param query parameters of flat series query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> flat series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataFlatseriesQueryPostAsync(Query query, final ApiCallback<List<FlatSeries>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataFlatseriesQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<FlatSeries>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataImagesGet
     * @param seriesid reference to series to list images for (required)
     * @param startindex start index of returned slice of images (optional, default to 0)
     * @param count size of returned slice of images (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataImagesGetCall(Long seriesid, Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (seriesid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriesid", seriesid));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataImagesGetValidateBeforeCall(Long seriesid, Long startindex, Long count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriesid' is set
        if (seriesid == null) {
            throw new ApiException("Missing the required parameter 'seriesid' when calling metadataImagesGet(Async)");
        }

        return metadataImagesGetCall(seriesid, startindex, count, _callback);

    }

    /**
     * 
     * Returns a list of metadata on the image level of the DICOM hierarchy
     * @param seriesid reference to series to list images for (required)
     * @param startindex start index of returned slice of images (optional, default to 0)
     * @param count size of returned slice of images (optional, default to 20)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> metadataImagesGet(Long seriesid, Long startindex, Long count) throws ApiException {
        ApiResponse<List<Image>> localVarResp = metadataImagesGetWithHttpInfo(seriesid, startindex, count);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metadata on the image level of the DICOM hierarchy
     * @param seriesid reference to series to list images for (required)
     * @param startindex start index of returned slice of images (optional, default to 0)
     * @param count size of returned slice of images (optional, default to 20)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> metadataImagesGetWithHttpInfo(Long seriesid, Long startindex, Long count) throws ApiException {
        okhttp3.Call localVarCall = metadataImagesGetValidateBeforeCall(seriesid, startindex, count, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metadata on the image level of the DICOM hierarchy
     * @param seriesid reference to series to list images for (required)
     * @param startindex start index of returned slice of images (optional, default to 0)
     * @param count size of returned slice of images (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataImagesGetAsync(Long seriesid, Long startindex, Long count, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataImagesGetValidateBeforeCall(seriesid, startindex, count, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataImagesIdGet
     * @param id ID of image (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataImagesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataImagesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataImagesIdGet(Async)");
        }

        return metadataImagesIdGetCall(id, _callback);

    }

    /**
     * 
     * Return the image with the supplied ID
     * @param id ID of image (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public Image metadataImagesIdGet(Long id) throws ApiException {
        ApiResponse<Image> localVarResp = metadataImagesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the image with the supplied ID
     * @param id ID of image (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> metadataImagesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataImagesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the image with the supplied ID
     * @param id ID of image (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> image response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataImagesIdGetAsync(Long id, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataImagesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataImagesQueryPost
     * @param query parameters of images query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataImagesQueryPostCall(Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/metadata/images/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataImagesQueryPostValidateBeforeCall(Query query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling metadataImagesQueryPost(Async)");
        }

        return metadataImagesQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for images
     * @param query parameters of images query (required)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> metadataImagesQueryPost(Query query) throws ApiException {
        ApiResponse<List<Image>> localVarResp = metadataImagesQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for images
     * @param query parameters of images query (required)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> metadataImagesQueryPostWithHttpInfo(Query query) throws ApiException {
        okhttp3.Call localVarCall = metadataImagesQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for images
     * @param query parameters of images query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataImagesQueryPostAsync(Query query, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataImagesQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataPatientsGet
     * @param startindex start index of returned slice of patients (optional, default to 0)
     * @param count size of returned slice of patients (optional, default to 20)
     * @param orderby patient property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of patient properties against this value (optional)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsGetCall(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/patients";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (orderascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderascending", orderascending));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (seriestypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypes", seriestypes));
        }

        if (seriestags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestags", seriestags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataPatientsGetValidateBeforeCall(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        return metadataPatientsGetCall(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags, _callback);

    }

    /**
     * 
     * Returns a list of metadata on the patient level of the DICOM hierarchy
     * @param startindex start index of returned slice of patients (optional, default to 0)
     * @param count size of returned slice of patients (optional, default to 20)
     * @param orderby patient property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of patient properties against this value (optional)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return List&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public List<Patient> metadataPatientsGet(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags) throws ApiException {
        ApiResponse<List<Patient>> localVarResp = metadataPatientsGetWithHttpInfo(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metadata on the patient level of the DICOM hierarchy
     * @param startindex start index of returned slice of patients (optional, default to 0)
     * @param count size of returned slice of patients (optional, default to 20)
     * @param orderby patient property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of patient properties against this value (optional)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return ApiResponse&lt;List&lt;Patient&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Patient>> metadataPatientsGetWithHttpInfo(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags) throws ApiException {
        okhttp3.Call localVarCall = metadataPatientsGetValidateBeforeCall(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags, null);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metadata on the patient level of the DICOM hierarchy
     * @param startindex start index of returned slice of patients (optional, default to 0)
     * @param count size of returned slice of patients (optional, default to 20)
     * @param orderby patient property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of patient properties against this value (optional)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsGetAsync(Long startindex, Long count, String orderby, Boolean orderascending, String filter, String sources, String seriestypes, String seriestags, final ApiCallback<List<Patient>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataPatientsGetValidateBeforeCall(startindex, count, orderby, orderascending, filter, sources, seriestypes, seriestags, _callback);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataPatientsIdGet
     * @param id ID of patient (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patient response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> patient not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/patients/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataPatientsIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataPatientsIdGet(Async)");
        }

        return metadataPatientsIdGetCall(id, _callback);

    }

    /**
     * 
     * Return the patient with the supplied ID
     * @param id ID of patient (required)
     * @return Patient
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patient response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> patient not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public Patient metadataPatientsIdGet(Long id) throws ApiException {
        ApiResponse<Patient> localVarResp = metadataPatientsIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the patient with the supplied ID
     * @param id ID of patient (required)
     * @return ApiResponse&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patient response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> patient not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Patient> metadataPatientsIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataPatientsIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the patient with the supplied ID
     * @param id ID of patient (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patient response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> patient not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsIdGetAsync(Long id, final ApiCallback<Patient> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataPatientsIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Patient>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataPatientsIdImagesGet
     * @param id ID of patient (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsIdImagesGetCall(Long id, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/patients/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (seriestypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypes", seriestypes));
        }

        if (seriestags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestags", seriestags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataPatientsIdImagesGetValidateBeforeCall(Long id, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataPatientsIdImagesGet(Async)");
        }

        return metadataPatientsIdImagesGetCall(id, sources, seriestypes, seriestags, _callback);

    }

    /**
     * 
     * Returns all images for the patient with the supplied patient ID
     * @param id ID of patient (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> metadataPatientsIdImagesGet(Long id, String sources, String seriestypes, String seriestags) throws ApiException {
        ApiResponse<List<Image>> localVarResp = metadataPatientsIdImagesGetWithHttpInfo(id, sources, seriestypes, seriestags);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all images for the patient with the supplied patient ID
     * @param id ID of patient (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> metadataPatientsIdImagesGetWithHttpInfo(Long id, String sources, String seriestypes, String seriestags) throws ApiException {
        okhttp3.Call localVarCall = metadataPatientsIdImagesGetValidateBeforeCall(id, sources, seriestypes, seriestags, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all images for the patient with the supplied patient ID
     * @param id ID of patient (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsIdImagesGetAsync(Long id, String sources, String seriestypes, String seriestags, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataPatientsIdImagesGetValidateBeforeCall(id, sources, seriestypes, seriestags, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataPatientsQueryPost
     * @param query parameters of patient query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsQueryPostCall(Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/metadata/patients/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataPatientsQueryPostValidateBeforeCall(Query query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling metadataPatientsQueryPost(Async)");
        }

        return metadataPatientsQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for patients
     * @param query parameters of patient query (required)
     * @return List&lt;Patient&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public List<Patient> metadataPatientsQueryPost(Query query) throws ApiException {
        ApiResponse<List<Patient>> localVarResp = metadataPatientsQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for patients
     * @param query parameters of patient query (required)
     * @return ApiResponse&lt;List&lt;Patient&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Patient>> metadataPatientsQueryPostWithHttpInfo(Query query) throws ApiException {
        okhttp3.Call localVarCall = metadataPatientsQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for patients
     * @param query parameters of patient query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> patients </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataPatientsQueryPostAsync(Query query, final ApiCallback<List<Patient>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataPatientsQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<Patient>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesGet
     * @param studyid reference to study to list series for (required)
     * @param startindex start index of returned slice of series (optional, default to 0)
     * @param count size of returned slice of series (optional, default to 20)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesGetCall(Long studyid, Long startindex, Long count, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (studyid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("studyid", studyid));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (seriestypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypes", seriestypes));
        }

        if (seriestags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestags", seriestags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesGetValidateBeforeCall(Long studyid, Long startindex, Long count, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'studyid' is set
        if (studyid == null) {
            throw new ApiException("Missing the required parameter 'studyid' when calling metadataSeriesGet(Async)");
        }

        return metadataSeriesGetCall(studyid, startindex, count, sources, seriestypes, seriestags, _callback);

    }

    /**
     * 
     * Returns a list of metadata on the series level of the DICOM hierarchy
     * @param studyid reference to study to list series for (required)
     * @param startindex start index of returned slice of series (optional, default to 0)
     * @param count size of returned slice of series (optional, default to 20)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return List&lt;Series&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public List<Series> metadataSeriesGet(Long studyid, Long startindex, Long count, String sources, String seriestypes, String seriestags) throws ApiException {
        ApiResponse<List<Series>> localVarResp = metadataSeriesGetWithHttpInfo(studyid, startindex, count, sources, seriestypes, seriestags);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metadata on the series level of the DICOM hierarchy
     * @param studyid reference to study to list series for (required)
     * @param startindex start index of returned slice of series (optional, default to 0)
     * @param count size of returned slice of series (optional, default to 20)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return ApiResponse&lt;List&lt;Series&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Series>> metadataSeriesGetWithHttpInfo(Long studyid, Long startindex, Long count, String sources, String seriestypes, String seriestags) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesGetValidateBeforeCall(studyid, startindex, count, sources, seriestypes, seriestags, null);
        Type localVarReturnType = new TypeToken<List<Series>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metadata on the series level of the DICOM hierarchy
     * @param studyid reference to study to list series for (required)
     * @param startindex start index of returned slice of series (optional, default to 0)
     * @param count size of returned slice of series (optional, default to 20)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesGetAsync(Long studyid, Long startindex, Long count, String sources, String seriestypes, String seriestags, final ApiCallback<List<Series>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesGetValidateBeforeCall(studyid, startindex, count, sources, seriestypes, seriestags, _callback);
        Type localVarReturnType = new TypeToken<List<Series>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesIdGet
     * @param id ID of series (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataSeriesIdGet(Async)");
        }

        return metadataSeriesIdGetCall(id, _callback);

    }

    /**
     * 
     * Return the series with the supplied ID
     * @param id ID of series (required)
     * @return Series
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public Series metadataSeriesIdGet(Long id) throws ApiException {
        ApiResponse<Series> localVarResp = metadataSeriesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the series with the supplied ID
     * @param id ID of series (required)
     * @return ApiResponse&lt;Series&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Series> metadataSeriesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Series>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the series with the supplied ID
     * @param id ID of series (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdGetAsync(Long id, final ApiCallback<Series> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Series>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesIdSeriestagsGet
     * @param id ID of series (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestagsGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{id}/seriestags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesIdSeriestagsGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataSeriesIdSeriestagsGet(Async)");
        }

        return metadataSeriesIdSeriestagsGetCall(id, _callback);

    }

    /**
     * 
     * get the list of series tags for the series with the supplied ID.
     * @param id ID of series (required)
     * @return List&lt;Seriestag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public List<Seriestag> metadataSeriesIdSeriestagsGet(Long id) throws ApiException {
        ApiResponse<List<Seriestag>> localVarResp = metadataSeriesIdSeriestagsGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the list of series tags for the series with the supplied ID.
     * @param id ID of series (required)
     * @return ApiResponse&lt;List&lt;Seriestag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Seriestag>> metadataSeriesIdSeriestagsGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesIdSeriestagsGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Seriestag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the list of series tags for the series with the supplied ID.
     * @param id ID of series (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series tags </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestagsGetAsync(Long id, final ApiCallback<List<Seriestag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesIdSeriestagsGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Seriestag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesIdSeriestagsPost
     * @param id ID of series (required)
     * @param query series tag to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added series tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no series with the supplied ID exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestagsPostCall(Long id, Seriestag query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/metadata/series/{id}/seriestags"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesIdSeriestagsPostValidateBeforeCall(Long id, Seriestag query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataSeriesIdSeriestagsPost(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling metadataSeriesIdSeriestagsPost(Async)");
        }

        return metadataSeriesIdSeriestagsPostCall(id, query, _callback);

    }

    /**
     * 
     * add a series tag to the series with the supplied ID
     * @param id ID of series (required)
     * @param query series tag to add (required)
     * @return Seriestag
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added series tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no series with the supplied ID exists </td><td>  -  </td></tr>
     </table>
     */
    public Seriestag metadataSeriesIdSeriestagsPost(Long id, Seriestag query) throws ApiException {
        ApiResponse<Seriestag> localVarResp = metadataSeriesIdSeriestagsPostWithHttpInfo(id, query);
        return localVarResp.getData();
    }

    /**
     * 
     * add a series tag to the series with the supplied ID
     * @param id ID of series (required)
     * @param query series tag to add (required)
     * @return ApiResponse&lt;Seriestag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added series tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no series with the supplied ID exists </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Seriestag> metadataSeriesIdSeriestagsPostWithHttpInfo(Long id, Seriestag query) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesIdSeriestagsPostValidateBeforeCall(id, query, null);
        Type localVarReturnType = new TypeToken<Seriestag>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * add a series tag to the series with the supplied ID
     * @param id ID of series (required)
     * @param query series tag to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> added series tag </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no series with the supplied ID exists </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestagsPostAsync(Long id, Seriestag query, final ApiCallback<Seriestag> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesIdSeriestagsPostValidateBeforeCall(id, query, _callback);
        Type localVarReturnType = new TypeToken<Seriestag>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesIdSeriestypesDelete
     * @param id ID of series (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series types deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestypesDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{id}/seriestypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesIdSeriestypesDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataSeriesIdSeriestypesDelete(Async)");
        }

        return metadataSeriesIdSeriestypesDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete all series types for the series with the supplied ID
     * @param id ID of series (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series types deleted </td><td>  -  </td></tr>
     </table>
     */
    public void metadataSeriesIdSeriestypesDelete(Long id) throws ApiException {
        metadataSeriesIdSeriestypesDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete all series types for the series with the supplied ID
     * @param id ID of series (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series types deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataSeriesIdSeriestypesDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesIdSeriestypesDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete all series types for the series with the supplied ID
     * @param id ID of series (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series types deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestypesDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesIdSeriestypesDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesIdSeriestypesGet
     * @param id ID of series (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestypesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{id}/seriestypes"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesIdSeriestypesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataSeriesIdSeriestypesGet(Async)");
        }

        return metadataSeriesIdSeriestypesGetCall(id, _callback);

    }

    /**
     * 
     * get the list of series types for the series with the supplied ID.
     * @param id ID of series (required)
     * @return List&lt;Seriestype&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public List<Seriestype> metadataSeriesIdSeriestypesGet(Long id) throws ApiException {
        ApiResponse<List<Seriestype>> localVarResp = metadataSeriesIdSeriestypesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the list of series types for the series with the supplied ID.
     * @param id ID of series (required)
     * @return ApiResponse&lt;List&lt;Seriestype&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Seriestype>> metadataSeriesIdSeriestypesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesIdSeriestypesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<Seriestype>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the list of series types for the series with the supplied ID.
     * @param id ID of series (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of series types </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSeriestypesGetAsync(Long id, final ApiCallback<List<Seriestype>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesIdSeriestypesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<Seriestype>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesIdSourceGet
     * @param id ID of series (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source for series </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSourceGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{id}/source"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesIdSourceGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataSeriesIdSourceGet(Async)");
        }

        return metadataSeriesIdSourceGetCall(id, _callback);

    }

    /**
     * 
     * Return the source of the series with the supplied ID
     * @param id ID of series (required)
     * @return Source
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source for series </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public Source metadataSeriesIdSourceGet(Long id) throws ApiException {
        ApiResponse<Source> localVarResp = metadataSeriesIdSourceGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the source of the series with the supplied ID
     * @param id ID of series (required)
     * @return ApiResponse&lt;Source&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source for series </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Source> metadataSeriesIdSourceGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesIdSourceGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the source of the series with the supplied ID
     * @param id ID of series (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> source for series </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> series not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesIdSourceGetAsync(Long id, final ApiCallback<Source> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesIdSourceGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Source>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesQueryPost
     * @param query parameters of series query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesQueryPostCall(Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/metadata/series/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesQueryPostValidateBeforeCall(Query query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling metadataSeriesQueryPost(Async)");
        }

        return metadataSeriesQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for series
     * @param query parameters of series query (required)
     * @return List&lt;Series&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public List<Series> metadataSeriesQueryPost(Query query) throws ApiException {
        ApiResponse<List<Series>> localVarResp = metadataSeriesQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for series
     * @param query parameters of series query (required)
     * @return ApiResponse&lt;List&lt;Series&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Series>> metadataSeriesQueryPostWithHttpInfo(Query query) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<Series>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for series
     * @param query parameters of series query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesQueryPostAsync(Query query, final ApiCallback<List<Series>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<Series>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete
     * @param seriesId ID of series (required)
     * @param seriesTagId ID of series tag to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series tag removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteCall(Long seriesId, Long seriesTagId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{seriesId}/seriestags/{seriesTagId}"
            .replace("{" + "seriesId" + "}", localVarApiClient.escapeString(seriesId.toString()))
            .replace("{" + "seriesTagId" + "}", localVarApiClient.escapeString(seriesTagId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteValidateBeforeCall(Long seriesId, Long seriesTagId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriesId' is set
        if (seriesId == null) {
            throw new ApiException("Missing the required parameter 'seriesId' when calling metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete(Async)");
        }

        // verify the required parameter 'seriesTagId' is set
        if (seriesTagId == null) {
            throw new ApiException("Missing the required parameter 'seriesTagId' when calling metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete(Async)");
        }

        return metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteCall(seriesId, seriesTagId, _callback);

    }

    /**
     * 
     * Delete the series tag with the supplied series tag ID from the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTagId ID of series tag to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series tag removed </td><td>  -  </td></tr>
     </table>
     */
    public void metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete(Long seriesId, Long seriesTagId) throws ApiException {
        metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteWithHttpInfo(seriesId, seriesTagId);
    }

    /**
     * 
     * Delete the series tag with the supplied series tag ID from the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTagId ID of series tag to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series tag removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteWithHttpInfo(Long seriesId, Long seriesTagId) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteValidateBeforeCall(seriesId, seriesTagId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the series tag with the supplied series tag ID from the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTagId ID of series tag to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series tag removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteAsync(Long seriesId, Long seriesTagId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteValidateBeforeCall(seriesId, seriesTagId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to remove (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteCall(Long seriesId, Long seriesTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{seriesId}/seriestypes/{seriesTypeId}"
            .replace("{" + "seriesId" + "}", localVarApiClient.escapeString(seriesId.toString()))
            .replace("{" + "seriesTypeId" + "}", localVarApiClient.escapeString(seriesTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteValidateBeforeCall(Long seriesId, Long seriesTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriesId' is set
        if (seriesId == null) {
            throw new ApiException("Missing the required parameter 'seriesId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete(Async)");
        }

        // verify the required parameter 'seriesTypeId' is set
        if (seriesTypeId == null) {
            throw new ApiException("Missing the required parameter 'seriesTypeId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete(Async)");
        }

        return metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteCall(seriesId, seriesTypeId, _callback);

    }

    /**
     * 
     * Delete the series type with the supplied series type ID from the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to remove (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete(Long seriesId, Long seriesTypeId) throws ApiException {
        metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteWithHttpInfo(seriesId, seriesTypeId);
    }

    /**
     * 
     * Delete the series type with the supplied series type ID from the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to remove (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteWithHttpInfo(Long seriesId, Long seriesTypeId) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteValidateBeforeCall(seriesId, seriesTypeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete the series type with the supplied series type ID from the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to remove (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type removed </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteAsync(Long seriesId, Long seriesTypeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteValidateBeforeCall(seriesId, seriesTypeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to add (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no series or series type found for the supplied ID(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutCall(Long seriesId, Long seriesTypeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/series/{seriesId}/seriestypes/{seriesTypeId}"
            .replace("{" + "seriesId" + "}", localVarApiClient.escapeString(seriesId.toString()))
            .replace("{" + "seriesTypeId" + "}", localVarApiClient.escapeString(seriesTypeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutValidateBeforeCall(Long seriesId, Long seriesTypeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'seriesId' is set
        if (seriesId == null) {
            throw new ApiException("Missing the required parameter 'seriesId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut(Async)");
        }

        // verify the required parameter 'seriesTypeId' is set
        if (seriesTypeId == null) {
            throw new ApiException("Missing the required parameter 'seriesTypeId' when calling metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut(Async)");
        }

        return metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutCall(seriesId, seriesTypeId, _callback);

    }

    /**
     * 
     * Add the series type with the supplied series type ID to the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to add (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no series or series type found for the supplied ID(s) </td><td>  -  </td></tr>
     </table>
     */
    public void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut(Long seriesId, Long seriesTypeId) throws ApiException {
        metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutWithHttpInfo(seriesId, seriesTypeId);
    }

    /**
     * 
     * Add the series type with the supplied series type ID to the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to add (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no series or series type found for the supplied ID(s) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutWithHttpInfo(Long seriesId, Long seriesTypeId) throws ApiException {
        okhttp3.Call localVarCall = metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutValidateBeforeCall(seriesId, seriesTypeId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add the series type with the supplied series type ID to the series with the supplied series ID
     * @param seriesId ID of series (required)
     * @param seriesTypeId ID of series type to add (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> series type added </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> no series or series type found for the supplied ID(s) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutAsync(Long seriesId, Long seriesTypeId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutValidateBeforeCall(seriesId, seriesTypeId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataSeriestagsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of unique series tags currently used to tag series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriestagsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/seriestags";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataSeriestagsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return metadataSeriestagsGetCall(_callback);

    }

    /**
     * 
     * Returns a list of series tags currently currently in use.
     * @return List&lt;Seriestag&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of unique series tags currently used to tag series </td><td>  -  </td></tr>
     </table>
     */
    public List<Seriestag> metadataSeriestagsGet() throws ApiException {
        ApiResponse<List<Seriestag>> localVarResp = metadataSeriestagsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of series tags currently currently in use.
     * @return ApiResponse&lt;List&lt;Seriestag&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of unique series tags currently used to tag series </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Seriestag>> metadataSeriestagsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = metadataSeriestagsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Seriestag>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of series tags currently currently in use.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> a list of unique series tags currently used to tag series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataSeriestagsGetAsync(final ApiCallback<List<Seriestag>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataSeriestagsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Seriestag>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataStudiesGet
     * @param patientid reference to patient to list studies for (required)
     * @param startindex start index of returned slice of studies (optional, default to 0)
     * @param count size of returned slice of studies (optional, default to 20)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesGetCall(Long patientid, Long startindex, Long count, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/studies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (patientid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("patientid", patientid));
        }

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (seriestypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypes", seriestypes));
        }

        if (seriestags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestags", seriestags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataStudiesGetValidateBeforeCall(Long patientid, Long startindex, Long count, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'patientid' is set
        if (patientid == null) {
            throw new ApiException("Missing the required parameter 'patientid' when calling metadataStudiesGet(Async)");
        }

        return metadataStudiesGetCall(patientid, startindex, count, sources, seriestypes, seriestags, _callback);

    }

    /**
     * 
     * Returns a list of metadata on the study level of the DICOM hierarchy
     * @param patientid reference to patient to list studies for (required)
     * @param startindex start index of returned slice of studies (optional, default to 0)
     * @param count size of returned slice of studies (optional, default to 20)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return List&lt;Study&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public List<Study> metadataStudiesGet(Long patientid, Long startindex, Long count, String sources, String seriestypes, String seriestags) throws ApiException {
        ApiResponse<List<Study>> localVarResp = metadataStudiesGetWithHttpInfo(patientid, startindex, count, sources, seriestypes, seriestags);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns a list of metadata on the study level of the DICOM hierarchy
     * @param patientid reference to patient to list studies for (required)
     * @param startindex start index of returned slice of studies (optional, default to 0)
     * @param count size of returned slice of studies (optional, default to 20)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return ApiResponse&lt;List&lt;Study&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Study>> metadataStudiesGetWithHttpInfo(Long patientid, Long startindex, Long count, String sources, String seriestypes, String seriestags) throws ApiException {
        okhttp3.Call localVarCall = metadataStudiesGetValidateBeforeCall(patientid, startindex, count, sources, seriestypes, seriestags, null);
        Type localVarReturnType = new TypeToken<List<Study>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns a list of metadata on the study level of the DICOM hierarchy
     * @param patientid reference to patient to list studies for (required)
     * @param startindex start index of returned slice of studies (optional, default to 0)
     * @param count size of returned slice of studies (optional, default to 20)
     * @param sources filter the results by matching on one or more underlying series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more underlying series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows results including series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more underlying series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows results including series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesGetAsync(Long patientid, Long startindex, Long count, String sources, String seriestypes, String seriestags, final ApiCallback<List<Study>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataStudiesGetValidateBeforeCall(patientid, startindex, count, sources, seriestypes, seriestags, _callback);
        Type localVarReturnType = new TypeToken<List<Study>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataStudiesIdGet
     * @param id ID of study (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> study response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/studies/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataStudiesIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataStudiesIdGet(Async)");
        }

        return metadataStudiesIdGetCall(id, _callback);

    }

    /**
     * 
     * Return the study with the supplied ID
     * @param id ID of study (required)
     * @return Study
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> study response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public Study metadataStudiesIdGet(Long id) throws ApiException {
        ApiResponse<Study> localVarResp = metadataStudiesIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Return the study with the supplied ID
     * @param id ID of study (required)
     * @return ApiResponse&lt;Study&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> study response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Study> metadataStudiesIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = metadataStudiesIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Study>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Return the study with the supplied ID
     * @param id ID of study (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> study response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesIdGetAsync(Long id, final ApiCallback<Study> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataStudiesIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Study>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataStudiesIdImagesGet
     * @param id ID of study (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesIdImagesGetCall(Long id, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/metadata/studies/{id}/images"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sources != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sources", sources));
        }

        if (seriestypes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestypes", seriestypes));
        }

        if (seriestags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("seriestags", seriestags));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataStudiesIdImagesGetValidateBeforeCall(Long id, String sources, String seriestypes, String seriestags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling metadataStudiesIdImagesGet(Async)");
        }

        return metadataStudiesIdImagesGetCall(id, sources, seriestypes, seriestags, _callback);

    }

    /**
     * 
     * Returns all images for the study with the supplied study ID
     * @param id ID of study (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> metadataStudiesIdImagesGet(Long id, String sources, String seriestypes, String seriestags) throws ApiException {
        ApiResponse<List<Image>> localVarResp = metadataStudiesIdImagesGetWithHttpInfo(id, sources, seriestypes, seriestags);
        return localVarResp.getData();
    }

    /**
     * 
     * Returns all images for the study with the supplied study ID
     * @param id ID of study (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> metadataStudiesIdImagesGetWithHttpInfo(Long id, String sources, String seriestypes, String seriestags) throws ApiException {
        okhttp3.Call localVarCall = metadataStudiesIdImagesGetValidateBeforeCall(id, sources, seriestypes, seriestags, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Returns all images for the study with the supplied study ID
     * @param id ID of study (required)
     * @param sources filter the results by matching on one or more series sources. Examples of sources are user, box, directory or scp. The list of sources to filter results by must have the form TYPE1:ID1,TYPE2:ID2,...,TYPEN:IDN. For instance, the argument sources&#x3D;box:1,user:5 shows results either sent from (slice)box with id 1 or uploaded by user with id 5. (optional)
     * @param seriestypes filter the results by matching on one or more series types. The supplied list of series types must be a comma separated list of series type ids. For instance, the argument seriestypes&#x3D;3,7,22 shows series assigned to either of the series types with ids 3, 7 and 22. (optional)
     * @param seriestags filter the results by matching on one or more series tags. The supplied list of series tags must be a comma separated list of series tag ids. For instance, the argument seriestags&#x3D;6,2,11 shows series with either of the series tags with ids 6, 2 and 11. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> list of images </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> study not found (invalid ID) </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesIdImagesGetAsync(Long id, String sources, String seriestypes, String seriestags, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataStudiesIdImagesGetValidateBeforeCall(id, sources, seriestypes, seriestags, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for metadataStudiesQueryPost
     * @param query parameters of study query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesQueryPostCall(Query query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/metadata/studies/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call metadataStudiesQueryPostValidateBeforeCall(Query query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling metadataStudiesQueryPost(Async)");
        }

        return metadataStudiesQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for studies
     * @param query parameters of study query (required)
     * @return List&lt;Study&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public List<Study> metadataStudiesQueryPost(Query query) throws ApiException {
        ApiResponse<List<Study>> localVarResp = metadataStudiesQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for studies
     * @param query parameters of study query (required)
     * @return ApiResponse&lt;List&lt;Study&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Study>> metadataStudiesQueryPostWithHttpInfo(Query query) throws ApiException {
        okhttp3.Call localVarCall = metadataStudiesQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<Study>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for studies
     * @param query parameters of study query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> studies </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call metadataStudiesQueryPostAsync(Query query, final ApiCallback<List<Study>> _callback) throws ApiException {

        okhttp3.Call localVarCall = metadataStudiesQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<Study>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for seriestypesSeriesQueryPost
     * @param query parameters of series query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesSeriesQueryPostCall(Idsquery query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/seriestypes/series/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call seriestypesSeriesQueryPostValidateBeforeCall(Idsquery query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling seriestypesSeriesQueryPost(Async)");
        }

        return seriestypesSeriesQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for seriestypes for a list of series
     * @param query parameters of series query (required)
     * @return Seriesidseriestypesresult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public Seriesidseriestypesresult seriestypesSeriesQueryPost(Idsquery query) throws ApiException {
        ApiResponse<Seriesidseriestypesresult> localVarResp = seriestypesSeriesQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for seriestypes for a list of series
     * @param query parameters of series query (required)
     * @return ApiResponse&lt;Seriesidseriestypesresult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Seriesidseriestypesresult> seriestypesSeriesQueryPostWithHttpInfo(Idsquery query) throws ApiException {
        okhttp3.Call localVarCall = seriestypesSeriesQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<Seriesidseriestypesresult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for seriestypes for a list of series
     * @param query parameters of series query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> series </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call seriestypesSeriesQueryPostAsync(Idsquery query, final ApiCallback<Seriesidseriestypesresult> _callback) throws ApiException {

        okhttp3.Call localVarCall = seriestypesSeriesQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<Seriesidseriestypesresult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
