/*
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AnonymizationData;
import org.openapitools.client.model.AnonymizationKey;
import org.openapitools.client.model.AnonymizationKeyQuery;
import org.openapitools.client.model.AnonymizationKeyValue;
import org.openapitools.client.model.ConfidentialityOption;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageTagValues;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AnonymizationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AnonymizationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AnonymizationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for anonymizationAnonymizePost
     * @param query parameters of anonymization key query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of newly created anonymous images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationAnonymizePostCall(List<ImageTagValues> query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/anonymization/anonymize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationAnonymizePostValidateBeforeCall(List<ImageTagValues> query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling anonymizationAnonymizePost(Async)");
        }

        return anonymizationAnonymizePostCall(query, _callback);

    }

    /**
     * 
     * anonymize the images corresponding to the supplied list of image IDs (each paired with a list of DICOM tag translation). This route corresponds to repeated use of the route /images/{id}/anonymize.
     * @param query parameters of anonymization key query (required)
     * @return List&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of newly created anonymous images </td><td>  -  </td></tr>
     </table>
     */
    public List<Image> anonymizationAnonymizePost(List<ImageTagValues> query) throws ApiException {
        ApiResponse<List<Image>> localVarResp = anonymizationAnonymizePostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * anonymize the images corresponding to the supplied list of image IDs (each paired with a list of DICOM tag translation). This route corresponds to repeated use of the route /images/{id}/anonymize.
     * @param query parameters of anonymization key query (required)
     * @return ApiResponse&lt;List&lt;Image&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of newly created anonymous images </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Image>> anonymizationAnonymizePostWithHttpInfo(List<ImageTagValues> query) throws ApiException {
        okhttp3.Call localVarCall = anonymizationAnonymizePostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * anonymize the images corresponding to the supplied list of image IDs (each paired with a list of DICOM tag translation). This route corresponds to repeated use of the route /images/{id}/anonymize.
     * @param query parameters of anonymization key query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the list of newly created anonymous images </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationAnonymizePostAsync(List<ImageTagValues> query, final ApiCallback<List<Image>> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationAnonymizePostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<Image>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationKeysExportCsvGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all anonymization keys as a csv file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysExportCsvGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anonymization/keys/export/csv";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationKeysExportCsvGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return anonymizationKeysExportCsvGetCall(_callback);

    }

    /**
     * 
     * export all anonymization keys as a csv file
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all anonymization keys as a csv file </td><td>  -  </td></tr>
     </table>
     */
    public String anonymizationKeysExportCsvGet() throws ApiException {
        ApiResponse<String> localVarResp = anonymizationKeysExportCsvGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * export all anonymization keys as a csv file
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all anonymization keys as a csv file </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> anonymizationKeysExportCsvGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = anonymizationKeysExportCsvGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * export all anonymization keys as a csv file
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> all anonymization keys as a csv file </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysExportCsvGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationKeysExportCsvGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationKeysGet
     * @param startindex start index of returned slice of anonymization keys (optional, default to 0)
     * @param count size of returned slice of anonymization keys (optional, default to 20)
     * @param orderby property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of properties against this value (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys, one per DICOM image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysGetCall(Long startindex, Long count, String orderby, Boolean orderascending, String filter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anonymization/keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startindex != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startindex", startindex));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (orderby != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderby", orderby));
        }

        if (orderascending != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orderascending", orderascending));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationKeysGetValidateBeforeCall(Long startindex, Long count, String orderby, Boolean orderascending, String filter, final ApiCallback _callback) throws ApiException {
        return anonymizationKeysGetCall(startindex, count, orderby, orderascending, filter, _callback);

    }

    /**
     * 
     * get a list of anonymization keys, each specifying how vital DICOM attributes have been anonymized for a particular image
     * @param startindex start index of returned slice of anonymization keys (optional, default to 0)
     * @param count size of returned slice of anonymization keys (optional, default to 20)
     * @param orderby property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of properties against this value (optional)
     * @return List&lt;AnonymizationKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys, one per DICOM image </td><td>  -  </td></tr>
     </table>
     */
    public List<AnonymizationKey> anonymizationKeysGet(Long startindex, Long count, String orderby, Boolean orderascending, String filter) throws ApiException {
        ApiResponse<List<AnonymizationKey>> localVarResp = anonymizationKeysGetWithHttpInfo(startindex, count, orderby, orderascending, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * get a list of anonymization keys, each specifying how vital DICOM attributes have been anonymized for a particular image
     * @param startindex start index of returned slice of anonymization keys (optional, default to 0)
     * @param count size of returned slice of anonymization keys (optional, default to 20)
     * @param orderby property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of properties against this value (optional)
     * @return ApiResponse&lt;List&lt;AnonymizationKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys, one per DICOM image </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnonymizationKey>> anonymizationKeysGetWithHttpInfo(Long startindex, Long count, String orderby, Boolean orderascending, String filter) throws ApiException {
        okhttp3.Call localVarCall = anonymizationKeysGetValidateBeforeCall(startindex, count, orderby, orderascending, filter, null);
        Type localVarReturnType = new TypeToken<List<AnonymizationKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get a list of anonymization keys, each specifying how vital DICOM attributes have been anonymized for a particular image
     * @param startindex start index of returned slice of anonymization keys (optional, default to 0)
     * @param count size of returned slice of anonymization keys (optional, default to 20)
     * @param orderby property to order results by (optional)
     * @param orderascending order result ascendingly if true, descendingly otherwise (optional, default to true)
     * @param filter filter the results by matching substrings of properties against this value (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys, one per DICOM image </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysGetAsync(Long startindex, Long count, String orderby, Boolean orderascending, String filter, final ApiCallback<List<AnonymizationKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationKeysGetValidateBeforeCall(startindex, count, orderby, orderascending, filter, _callback);
        Type localVarReturnType = new TypeToken<List<AnonymizationKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationKeysIdDelete
     * @param id ID of anonymization key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> anonymization key deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysIdDeleteCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anonymization/keys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationKeysIdDeleteValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling anonymizationKeysIdDelete(Async)");
        }

        return anonymizationKeysIdDeleteCall(id, _callback);

    }

    /**
     * 
     * delete an anonymization key that is no longer of interest
     * @param id ID of anonymization key (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> anonymization key deleted </td><td>  -  </td></tr>
     </table>
     */
    public void anonymizationKeysIdDelete(Long id) throws ApiException {
        anonymizationKeysIdDeleteWithHttpInfo(id);
    }

    /**
     * 
     * delete an anonymization key that is no longer of interest
     * @param id ID of anonymization key (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> anonymization key deleted </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> anonymizationKeysIdDeleteWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = anonymizationKeysIdDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * delete an anonymization key that is no longer of interest
     * @param id ID of anonymization key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> anonymization key deleted </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysIdDeleteAsync(Long id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationKeysIdDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationKeysIdGet
     * @param id ID of anonymization key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anonymization/keys/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationKeysIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling anonymizationKeysIdGet(Async)");
        }

        return anonymizationKeysIdGetCall(id, _callback);

    }

    /**
     * 
     * get the anonymization key with the supplied ID
     * @param id ID of anonymization key (required)
     * @return AnonymizationKey
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public AnonymizationKey anonymizationKeysIdGet(Long id) throws ApiException {
        ApiResponse<AnonymizationKey> localVarResp = anonymizationKeysIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get the anonymization key with the supplied ID
     * @param id ID of anonymization key (required)
     * @return ApiResponse&lt;AnonymizationKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AnonymizationKey> anonymizationKeysIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = anonymizationKeysIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AnonymizationKey>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get the anonymization key with the supplied ID
     * @param id ID of anonymization key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysIdGetAsync(Long id, final ApiCallback<AnonymizationKey> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationKeysIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AnonymizationKey>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationKeysIdKeyvaluesGet
     * @param id ID of anonymization key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an array of anonymization key-value pairs corresponding to the anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysIdKeyvaluesGetCall(Long id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anonymization/keys/{id}/keyvalues"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationKeysIdKeyvaluesGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling anonymizationKeysIdKeyvaluesGet(Async)");
        }

        return anonymizationKeysIdKeyvaluesGetCall(id, _callback);

    }

    /**
     * 
     * get pointers to the images corresponding to the anonymization key with the supplied ID
     * @param id ID of anonymization key (required)
     * @return List&lt;AnonymizationKeyValue&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an array of anonymization key-value pairs corresponding to the anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public List<AnonymizationKeyValue> anonymizationKeysIdKeyvaluesGet(Long id) throws ApiException {
        ApiResponse<List<AnonymizationKeyValue>> localVarResp = anonymizationKeysIdKeyvaluesGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * get pointers to the images corresponding to the anonymization key with the supplied ID
     * @param id ID of anonymization key (required)
     * @return ApiResponse&lt;List&lt;AnonymizationKeyValue&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an array of anonymization key-value pairs corresponding to the anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnonymizationKeyValue>> anonymizationKeysIdKeyvaluesGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = anonymizationKeysIdKeyvaluesGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<List<AnonymizationKeyValue>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * get pointers to the images corresponding to the anonymization key with the supplied ID
     * @param id ID of anonymization key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> an array of anonymization key-value pairs corresponding to the anonymization key for the supplied ID </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no anonymization key could be found for the supplied ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysIdKeyvaluesGetAsync(Long id, final ApiCallback<List<AnonymizationKeyValue>> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationKeysIdKeyvaluesGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<List<AnonymizationKeyValue>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationKeysQueryPost
     * @param query parameters of anonymization key query (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysQueryPostCall(AnonymizationKeyQuery query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = query;

        // create path and map variables
        String localVarPath = "/anonymization/keys/query";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationKeysQueryPostValidateBeforeCall(AnonymizationKeyQuery query, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling anonymizationKeysQueryPost(Async)");
        }

        return anonymizationKeysQueryPostCall(query, _callback);

    }

    /**
     * 
     * submit a query for anonymization keys
     * @param query parameters of anonymization key query (required)
     * @return List&lt;AnonymizationKey&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys </td><td>  -  </td></tr>
     </table>
     */
    public List<AnonymizationKey> anonymizationKeysQueryPost(AnonymizationKeyQuery query) throws ApiException {
        ApiResponse<List<AnonymizationKey>> localVarResp = anonymizationKeysQueryPostWithHttpInfo(query);
        return localVarResp.getData();
    }

    /**
     * 
     * submit a query for anonymization keys
     * @param query parameters of anonymization key query (required)
     * @return ApiResponse&lt;List&lt;AnonymizationKey&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<AnonymizationKey>> anonymizationKeysQueryPostWithHttpInfo(AnonymizationKeyQuery query) throws ApiException {
        okhttp3.Call localVarCall = anonymizationKeysQueryPostValidateBeforeCall(query, null);
        Type localVarReturnType = new TypeToken<List<AnonymizationKey>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * submit a query for anonymization keys
     * @param query parameters of anonymization key query (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> anonymization keys </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationKeysQueryPostAsync(AnonymizationKeyQuery query, final ApiCallback<List<AnonymizationKey>> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationKeysQueryPostValidateBeforeCall(query, _callback);
        Type localVarReturnType = new TypeToken<List<AnonymizationKey>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for anonymizationOptionsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> supported anonymization options </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationOptionsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/anonymization/options";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call anonymizationOptionsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return anonymizationOptionsGetCall(_callback);

    }

    /**
     * 
     * list all supported anonymization options defining an anonymization profile
     * @return List&lt;ConfidentialityOption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> supported anonymization options </td><td>  -  </td></tr>
     </table>
     */
    public List<ConfidentialityOption> anonymizationOptionsGet() throws ApiException {
        ApiResponse<List<ConfidentialityOption>> localVarResp = anonymizationOptionsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * list all supported anonymization options defining an anonymization profile
     * @return ApiResponse&lt;List&lt;ConfidentialityOption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> supported anonymization options </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ConfidentialityOption>> anonymizationOptionsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = anonymizationOptionsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<ConfidentialityOption>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * list all supported anonymization options defining an anonymization profile
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> supported anonymization options </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call anonymizationOptionsGetAsync(final ApiCallback<List<ConfidentialityOption>> _callback) throws ApiException {

        okhttp3.Call localVarCall = anonymizationOptionsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<ConfidentialityOption>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdAnonymizePut
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizePutCall(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagValues;

        // create path and map variables
        String localVarPath = "/images/{id}/anonymize"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/octet-stream"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdAnonymizePutValidateBeforeCall(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdAnonymizePut(Async)");
        }

        // verify the required parameter 'tagValues' is set
        if (tagValues == null) {
            throw new ApiException("Missing the required parameter 'tagValues' when calling imagesIdAnonymizePut(Async)");
        }

        return imagesIdAnonymizePutCall(id, tagValues, _callback);

    }

    /**
     * 
     * delete the selected image and replace it with an anonymized version
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public Image imagesIdAnonymizePut(Long id, AnonymizationData tagValues) throws ApiException {
        ApiResponse<Image> localVarResp = imagesIdAnonymizePutWithHttpInfo(id, tagValues);
        return localVarResp.getData();
    }

    /**
     * 
     * delete the selected image and replace it with an anonymized version
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> imagesIdAnonymizePutWithHttpInfo(Long id, AnonymizationData tagValues) throws ApiException {
        okhttp3.Call localVarCall = imagesIdAnonymizePutValidateBeforeCall(id, tagValues, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * delete the selected image and replace it with an anonymized version
     * @param id ID of image to anonymize (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> the newly created anonymous image </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> image or corresponding dataset not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizePutAsync(Long id, AnonymizationData tagValues, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdAnonymizePutValidateBeforeCall(id, tagValues, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for imagesIdAnonymizedPost
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizedPostCall(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = tagValues;

        // create path and map variables
        String localVarPath = "/images/{id}/anonymized"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/octet-stream",
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call imagesIdAnonymizedPostValidateBeforeCall(Long id, AnonymizationData tagValues, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling imagesIdAnonymizedPost(Async)");
        }

        // verify the required parameter 'tagValues' is set
        if (tagValues == null) {
            throw new ApiException("Missing the required parameter 'tagValues' when calling imagesIdAnonymizedPost(Async)");
        }

        return imagesIdAnonymizedPostCall(id, tagValues, _callback);

    }

    /**
     * 
     * get an anonymized version of the image with the supplied ID
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public void imagesIdAnonymizedPost(Long id, AnonymizationData tagValues) throws ApiException {
        imagesIdAnonymizedPostWithHttpInfo(id, tagValues);
    }

    /**
     * 
     * get an anonymized version of the image with the supplied ID
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> imagesIdAnonymizedPostWithHttpInfo(Long id, AnonymizationData tagValues) throws ApiException {
        okhttp3.Call localVarCall = imagesIdAnonymizedPostValidateBeforeCall(id, tagValues, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * get an anonymized version of the image with the supplied ID
     * @param id ID of image for which to get anonymized dataset (required)
     * @param tagValues specification of values for anonymous DICOM attributes (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> binary data of anonymized dataset </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> if no image was found for the supplied image ID </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call imagesIdAnonymizedPostAsync(Long id, AnonymizationData tagValues, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = imagesIdAnonymizedPostValidateBeforeCall(id, tagValues, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
