/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserPass.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserPass::OAIUserPass(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserPass::OAIUserPass() {
    this->initializeModel();
}

OAIUserPass::~OAIUserPass() {}

void OAIUserPass::initializeModel() {

    m_pass_isSet = false;
    m_pass_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIUserPass::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserPass::fromJsonObject(QJsonObject json) {

    m_pass_isValid = ::OpenAPI::fromJsonValue(m_pass, json[QString("pass")]);
    m_pass_isSet = !json[QString("pass")].isNull() && m_pass_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIUserPass::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserPass::asJsonObject() const {
    QJsonObject obj;
    if (m_pass_isSet) {
        obj.insert(QString("pass"), ::OpenAPI::toJsonValue(m_pass));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIUserPass::getPass() const {
    return m_pass;
}
void OAIUserPass::setPass(const QString &pass) {
    m_pass = pass;
    m_pass_isSet = true;
}

bool OAIUserPass::is_pass_Set() const{
    return m_pass_isSet;
}

bool OAIUserPass::is_pass_Valid() const{
    return m_pass_isValid;
}

QString OAIUserPass::getUser() const {
    return m_user;
}
void OAIUserPass::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIUserPass::is_user_Set() const{
    return m_user_isSet;
}

bool OAIUserPass::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIUserPass::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_pass_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserPass::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
