/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISourceRef.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISourceRef::OAISourceRef(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISourceRef::OAISourceRef() {
    this->initializeModel();
}

OAISourceRef::~OAISourceRef() {}

void OAISourceRef::initializeModel() {

    m_source_id_isSet = false;
    m_source_id_isValid = false;

    m_source_type_isSet = false;
    m_source_type_isValid = false;
}

void OAISourceRef::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISourceRef::fromJsonObject(QJsonObject json) {

    m_source_id_isValid = ::OpenAPI::fromJsonValue(m_source_id, json[QString("sourceId")]);
    m_source_id_isSet = !json[QString("sourceId")].isNull() && m_source_id_isValid;

    m_source_type_isValid = ::OpenAPI::fromJsonValue(m_source_type, json[QString("sourceType")]);
    m_source_type_isSet = !json[QString("sourceType")].isNull() && m_source_type_isValid;
}

QString OAISourceRef::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISourceRef::asJsonObject() const {
    QJsonObject obj;
    if (m_source_id_isSet) {
        obj.insert(QString("sourceId"), ::OpenAPI::toJsonValue(m_source_id));
    }
    if (m_source_type_isSet) {
        obj.insert(QString("sourceType"), ::OpenAPI::toJsonValue(m_source_type));
    }
    return obj;
}

qint64 OAISourceRef::getSourceId() const {
    return m_source_id;
}
void OAISourceRef::setSourceId(const qint64 &source_id) {
    m_source_id = source_id;
    m_source_id_isSet = true;
}

bool OAISourceRef::is_source_id_Set() const{
    return m_source_id_isSet;
}

bool OAISourceRef::is_source_id_Valid() const{
    return m_source_id_isValid;
}

QString OAISourceRef::getSourceType() const {
    return m_source_type;
}
void OAISourceRef::setSourceType(const QString &source_type) {
    m_source_type = source_type;
    m_source_type_isSet = true;
}

bool OAISourceRef::is_source_type_Set() const{
    return m_source_type_isSet;
}

bool OAISourceRef::is_source_type_Valid() const{
    return m_source_type_isValid;
}

bool OAISourceRef::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_source_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISourceRef::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
