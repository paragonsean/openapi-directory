/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIMetaDataApi_H
#define OAI_OAIMetaDataApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFlatSeries.h"
#include "OAIIdsquery.h"
#include "OAIImage.h"
#include "OAIPatient.h"
#include "OAIQuery.h"
#include "OAISeries.h"
#include "OAISeriesidseriestypesresult.h"
#include "OAISeriestag.h"
#include "OAISeriestype.h"
#include "OAISource.h"
#include "OAIStudy.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIMetaDataApi : public QObject {
    Q_OBJECT

public:
    OAIMetaDataApi(const int timeOut = 0);
    ~OAIMetaDataApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  orderascending bool [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sources QString [optional]
    * @param[in]  seriestypes QString [optional]
    * @param[in]  seriestags QString [optional]
    */
    virtual void metadataFlatseriesGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &orderascending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestypes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataFlatseriesIdGet(const qint64 &id);

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void metadataFlatseriesQueryPost(const OAIQuery &query);

    /**
    * @param[in]  seriesid qint64 [required]
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void metadataImagesGet(const qint64 &seriesid, const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataImagesIdGet(const qint64 &id);

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void metadataImagesQueryPost(const OAIQuery &query);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    * @param[in]  orderby QString [optional]
    * @param[in]  orderascending bool [optional]
    * @param[in]  filter QString [optional]
    * @param[in]  sources QString [optional]
    * @param[in]  seriestypes QString [optional]
    * @param[in]  seriestags QString [optional]
    */
    virtual void metadataPatientsGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &orderby = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &orderascending = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &filter = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestypes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataPatientsIdGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  sources QString [optional]
    * @param[in]  seriestypes QString [optional]
    * @param[in]  seriestags QString [optional]
    */
    virtual void metadataPatientsIdImagesGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestypes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void metadataPatientsQueryPost(const OAIQuery &query);

    /**
    * @param[in]  studyid qint64 [required]
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    * @param[in]  sources QString [optional]
    * @param[in]  seriestypes QString [optional]
    * @param[in]  seriestags QString [optional]
    */
    virtual void metadataSeriesGet(const qint64 &studyid, const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestypes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataSeriesIdGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataSeriesIdSeriestagsGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  query OAISeriestag [required]
    */
    virtual void metadataSeriesIdSeriestagsPost(const qint64 &id, const OAISeriestag &query);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataSeriesIdSeriestypesDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataSeriesIdSeriestypesGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataSeriesIdSourceGet(const qint64 &id);

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void metadataSeriesQueryPost(const OAIQuery &query);

    /**
    * @param[in]  series_id qint64 [required]
    * @param[in]  series_tag_id qint64 [required]
    */
    virtual void metadataSeriesSeriesIdSeriestagsSeriesTagIdDelete(const qint64 &series_id, const qint64 &series_tag_id);

    /**
    * @param[in]  series_id qint64 [required]
    * @param[in]  series_type_id qint64 [required]
    */
    virtual void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDelete(const qint64 &series_id, const qint64 &series_type_id);

    /**
    * @param[in]  series_id qint64 [required]
    * @param[in]  series_type_id qint64 [required]
    */
    virtual void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPut(const qint64 &series_id, const qint64 &series_type_id);


    virtual void metadataSeriestagsGet();

    /**
    * @param[in]  patientid qint64 [required]
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    * @param[in]  sources QString [optional]
    * @param[in]  seriestypes QString [optional]
    * @param[in]  seriestags QString [optional]
    */
    virtual void metadataStudiesGet(const qint64 &patientid, const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestypes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void metadataStudiesIdGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  sources QString [optional]
    * @param[in]  seriestypes QString [optional]
    * @param[in]  seriestags QString [optional]
    */
    virtual void metadataStudiesIdImagesGet(const qint64 &id, const ::OpenAPI::OptionalParam<QString> &sources = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestypes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &seriestags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query OAIQuery [required]
    */
    virtual void metadataStudiesQueryPost(const OAIQuery &query);

    /**
    * @param[in]  query OAIIdsquery [required]
    */
    virtual void seriestypesSeriesQueryPost(const OAIIdsquery &query);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void metadataFlatseriesGetCallback(OAIHttpRequestWorker *worker);
    void metadataFlatseriesIdGetCallback(OAIHttpRequestWorker *worker);
    void metadataFlatseriesQueryPostCallback(OAIHttpRequestWorker *worker);
    void metadataImagesGetCallback(OAIHttpRequestWorker *worker);
    void metadataImagesIdGetCallback(OAIHttpRequestWorker *worker);
    void metadataImagesQueryPostCallback(OAIHttpRequestWorker *worker);
    void metadataPatientsGetCallback(OAIHttpRequestWorker *worker);
    void metadataPatientsIdGetCallback(OAIHttpRequestWorker *worker);
    void metadataPatientsIdImagesGetCallback(OAIHttpRequestWorker *worker);
    void metadataPatientsQueryPostCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesGetCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesIdGetCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesIdSeriestagsGetCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesIdSeriestagsPostCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesIdSeriestypesDeleteCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesIdSeriestypesGetCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesIdSourceGetCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesQueryPostCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteCallback(OAIHttpRequestWorker *worker);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutCallback(OAIHttpRequestWorker *worker);
    void metadataSeriestagsGetCallback(OAIHttpRequestWorker *worker);
    void metadataStudiesGetCallback(OAIHttpRequestWorker *worker);
    void metadataStudiesIdGetCallback(OAIHttpRequestWorker *worker);
    void metadataStudiesIdImagesGetCallback(OAIHttpRequestWorker *worker);
    void metadataStudiesQueryPostCallback(OAIHttpRequestWorker *worker);
    void seriestypesSeriesQueryPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void metadataFlatseriesGetSignal(QList<OAIFlatSeries> summary);
    void metadataFlatseriesIdGetSignal(OAIFlatSeries summary);
    void metadataFlatseriesQueryPostSignal(QList<OAIFlatSeries> summary);
    void metadataImagesGetSignal(QList<OAIImage> summary);
    void metadataImagesIdGetSignal(OAIImage summary);
    void metadataImagesQueryPostSignal(QList<OAIImage> summary);
    void metadataPatientsGetSignal(QList<OAIPatient> summary);
    void metadataPatientsIdGetSignal(OAIPatient summary);
    void metadataPatientsIdImagesGetSignal(QList<OAIImage> summary);
    void metadataPatientsQueryPostSignal(QList<OAIPatient> summary);
    void metadataSeriesGetSignal(QList<OAISeries> summary);
    void metadataSeriesIdGetSignal(OAISeries summary);
    void metadataSeriesIdSeriestagsGetSignal(QList<OAISeriestag> summary);
    void metadataSeriesIdSeriestagsPostSignal(OAISeriestag summary);
    void metadataSeriesIdSeriestypesDeleteSignal();
    void metadataSeriesIdSeriestypesGetSignal(QList<OAISeriestype> summary);
    void metadataSeriesIdSourceGetSignal(OAISource summary);
    void metadataSeriesQueryPostSignal(QList<OAISeries> summary);
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignal();
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignal();
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignal();
    void metadataSeriestagsGetSignal(QList<OAISeriestag> summary);
    void metadataStudiesGetSignal(QList<OAIStudy> summary);
    void metadataStudiesIdGetSignal(OAIStudy summary);
    void metadataStudiesIdImagesGetSignal(QList<OAIImage> summary);
    void metadataStudiesQueryPostSignal(QList<OAIStudy> summary);
    void seriestypesSeriesQueryPostSignal(OAISeriesidseriestypesresult summary);


    void metadataFlatseriesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlatSeries> summary);
    void metadataFlatseriesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIFlatSeries summary);
    void metadataFlatseriesQueryPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIFlatSeries> summary);
    void metadataImagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void metadataImagesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void metadataImagesQueryPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void metadataPatientsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatient> summary);
    void metadataPatientsIdGetSignalFull(OAIHttpRequestWorker *worker, OAIPatient summary);
    void metadataPatientsIdImagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void metadataPatientsQueryPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIPatient> summary);
    void metadataSeriesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISeries> summary);
    void metadataSeriesIdGetSignalFull(OAIHttpRequestWorker *worker, OAISeries summary);
    void metadataSeriesIdSeriestagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISeriestag> summary);
    void metadataSeriesIdSeriestagsPostSignalFull(OAIHttpRequestWorker *worker, OAISeriestag summary);
    void metadataSeriesIdSeriestypesDeleteSignalFull(OAIHttpRequestWorker *worker);
    void metadataSeriesIdSeriestypesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISeriestype> summary);
    void metadataSeriesIdSourceGetSignalFull(OAIHttpRequestWorker *worker, OAISource summary);
    void metadataSeriesQueryPostSignalFull(OAIHttpRequestWorker *worker, QList<OAISeries> summary);
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalFull(OAIHttpRequestWorker *worker);
    void metadataSeriestagsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISeriestag> summary);
    void metadataStudiesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIStudy> summary);
    void metadataStudiesIdGetSignalFull(OAIHttpRequestWorker *worker, OAIStudy summary);
    void metadataStudiesIdImagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void metadataStudiesQueryPostSignalFull(OAIHttpRequestWorker *worker, QList<OAIStudy> summary);
    void seriestypesSeriesQueryPostSignalFull(OAIHttpRequestWorker *worker, OAISeriesidseriestypesresult summary);

    Q_DECL_DEPRECATED_X("Use metadataFlatseriesGetSignalError() instead")
    void metadataFlatseriesGetSignalE(QList<OAIFlatSeries> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataFlatseriesGetSignalError(QList<OAIFlatSeries> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataFlatseriesIdGetSignalError() instead")
    void metadataFlatseriesIdGetSignalE(OAIFlatSeries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataFlatseriesIdGetSignalError(OAIFlatSeries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataFlatseriesQueryPostSignalError() instead")
    void metadataFlatseriesQueryPostSignalE(QList<OAIFlatSeries> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataFlatseriesQueryPostSignalError(QList<OAIFlatSeries> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataImagesGetSignalError() instead")
    void metadataImagesGetSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataImagesGetSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataImagesIdGetSignalError() instead")
    void metadataImagesIdGetSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataImagesIdGetSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataImagesQueryPostSignalError() instead")
    void metadataImagesQueryPostSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataImagesQueryPostSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsGetSignalError() instead")
    void metadataPatientsGetSignalE(QList<OAIPatient> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsGetSignalError(QList<OAIPatient> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsIdGetSignalError() instead")
    void metadataPatientsIdGetSignalE(OAIPatient summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsIdGetSignalError(OAIPatient summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsIdImagesGetSignalError() instead")
    void metadataPatientsIdImagesGetSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsIdImagesGetSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsQueryPostSignalError() instead")
    void metadataPatientsQueryPostSignalE(QList<OAIPatient> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsQueryPostSignalError(QList<OAIPatient> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesGetSignalError() instead")
    void metadataSeriesGetSignalE(QList<OAISeries> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesGetSignalError(QList<OAISeries> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdGetSignalError() instead")
    void metadataSeriesIdGetSignalE(OAISeries summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdGetSignalError(OAISeries summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestagsGetSignalError() instead")
    void metadataSeriesIdSeriestagsGetSignalE(QList<OAISeriestag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestagsGetSignalError(QList<OAISeriestag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestagsPostSignalError() instead")
    void metadataSeriesIdSeriestagsPostSignalE(OAISeriestag summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestagsPostSignalError(OAISeriestag summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestypesDeleteSignalError() instead")
    void metadataSeriesIdSeriestypesDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestypesDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestypesGetSignalError() instead")
    void metadataSeriesIdSeriestypesGetSignalE(QList<OAISeriestype> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestypesGetSignalError(QList<OAISeriestype> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSourceGetSignalError() instead")
    void metadataSeriesIdSourceGetSignalE(OAISource summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSourceGetSignalError(OAISource summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesQueryPostSignalError() instead")
    void metadataSeriesQueryPostSignalE(QList<OAISeries> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesQueryPostSignalError(QList<OAISeries> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalError() instead")
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalError() instead")
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalError() instead")
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriestagsGetSignalError() instead")
    void metadataSeriestagsGetSignalE(QList<OAISeriestag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriestagsGetSignalError(QList<OAISeriestag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesGetSignalError() instead")
    void metadataStudiesGetSignalE(QList<OAIStudy> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesGetSignalError(QList<OAIStudy> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesIdGetSignalError() instead")
    void metadataStudiesIdGetSignalE(OAIStudy summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesIdGetSignalError(OAIStudy summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesIdImagesGetSignalError() instead")
    void metadataStudiesIdImagesGetSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesIdImagesGetSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesQueryPostSignalError() instead")
    void metadataStudiesQueryPostSignalE(QList<OAIStudy> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesQueryPostSignalError(QList<OAIStudy> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriestypesSeriesQueryPostSignalError() instead")
    void seriestypesSeriesQueryPostSignalE(OAISeriesidseriestypesresult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void seriestypesSeriesQueryPostSignalError(OAISeriesidseriestypesresult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use metadataFlatseriesGetSignalErrorFull() instead")
    void metadataFlatseriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataFlatseriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataFlatseriesIdGetSignalErrorFull() instead")
    void metadataFlatseriesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataFlatseriesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataFlatseriesQueryPostSignalErrorFull() instead")
    void metadataFlatseriesQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataFlatseriesQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataImagesGetSignalErrorFull() instead")
    void metadataImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataImagesIdGetSignalErrorFull() instead")
    void metadataImagesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataImagesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataImagesQueryPostSignalErrorFull() instead")
    void metadataImagesQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataImagesQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsGetSignalErrorFull() instead")
    void metadataPatientsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsIdGetSignalErrorFull() instead")
    void metadataPatientsIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsIdImagesGetSignalErrorFull() instead")
    void metadataPatientsIdImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsIdImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataPatientsQueryPostSignalErrorFull() instead")
    void metadataPatientsQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataPatientsQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesGetSignalErrorFull() instead")
    void metadataSeriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdGetSignalErrorFull() instead")
    void metadataSeriesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestagsGetSignalErrorFull() instead")
    void metadataSeriesIdSeriestagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestagsPostSignalErrorFull() instead")
    void metadataSeriesIdSeriestagsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestagsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestypesDeleteSignalErrorFull() instead")
    void metadataSeriesIdSeriestypesDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestypesDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSeriestypesGetSignalErrorFull() instead")
    void metadataSeriesIdSeriestypesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSeriestypesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesIdSourceGetSignalErrorFull() instead")
    void metadataSeriesIdSourceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesIdSourceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesQueryPostSignalErrorFull() instead")
    void metadataSeriesQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalErrorFull() instead")
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesSeriesIdSeriestagsSeriesTagIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalErrorFull() instead")
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalErrorFull() instead")
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriesSeriesIdSeriestypesSeriesTypeIdPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataSeriestagsGetSignalErrorFull() instead")
    void metadataSeriestagsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataSeriestagsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesGetSignalErrorFull() instead")
    void metadataStudiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesIdGetSignalErrorFull() instead")
    void metadataStudiesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesIdImagesGetSignalErrorFull() instead")
    void metadataStudiesIdImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesIdImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use metadataStudiesQueryPostSignalErrorFull() instead")
    void metadataStudiesQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void metadataStudiesQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use seriestypesSeriesQueryPostSignalErrorFull() instead")
    void seriestypesSeriesQueryPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void seriestypesSeriesQueryPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
