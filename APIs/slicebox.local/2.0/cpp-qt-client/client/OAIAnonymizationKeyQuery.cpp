/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAnonymizationKeyQuery.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAnonymizationKeyQuery::OAIAnonymizationKeyQuery(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAnonymizationKeyQuery::OAIAnonymizationKeyQuery() {
    this->initializeModel();
}

OAIAnonymizationKeyQuery::~OAIAnonymizationKeyQuery() {}

void OAIAnonymizationKeyQuery::initializeModel() {

    m_count_isSet = false;
    m_count_isValid = false;

    m_order_isSet = false;
    m_order_isValid = false;

    m_query_properties_isSet = false;
    m_query_properties_isValid = false;

    m_start_index_isSet = false;
    m_start_index_isValid = false;
}

void OAIAnonymizationKeyQuery::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAnonymizationKeyQuery::fromJsonObject(QJsonObject json) {

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_order_isValid = ::OpenAPI::fromJsonValue(m_order, json[QString("order")]);
    m_order_isSet = !json[QString("order")].isNull() && m_order_isValid;

    m_query_properties_isValid = ::OpenAPI::fromJsonValue(m_query_properties, json[QString("queryProperties")]);
    m_query_properties_isSet = !json[QString("queryProperties")].isNull() && m_query_properties_isValid;

    m_start_index_isValid = ::OpenAPI::fromJsonValue(m_start_index, json[QString("startIndex")]);
    m_start_index_isSet = !json[QString("startIndex")].isNull() && m_start_index_isValid;
}

QString OAIAnonymizationKeyQuery::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAnonymizationKeyQuery::asJsonObject() const {
    QJsonObject obj;
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_order.isSet()) {
        obj.insert(QString("order"), ::OpenAPI::toJsonValue(m_order));
    }
    if (m_query_properties.size() > 0) {
        obj.insert(QString("queryProperties"), ::OpenAPI::toJsonValue(m_query_properties));
    }
    if (m_start_index_isSet) {
        obj.insert(QString("startIndex"), ::OpenAPI::toJsonValue(m_start_index));
    }
    return obj;
}

qint64 OAIAnonymizationKeyQuery::getCount() const {
    return m_count;
}
void OAIAnonymizationKeyQuery::setCount(const qint64 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIAnonymizationKeyQuery::is_count_Set() const{
    return m_count_isSet;
}

bool OAIAnonymizationKeyQuery::is_count_Valid() const{
    return m_count_isValid;
}

OAIQueryOrder OAIAnonymizationKeyQuery::getOrder() const {
    return m_order;
}
void OAIAnonymizationKeyQuery::setOrder(const OAIQueryOrder &order) {
    m_order = order;
    m_order_isSet = true;
}

bool OAIAnonymizationKeyQuery::is_order_Set() const{
    return m_order_isSet;
}

bool OAIAnonymizationKeyQuery::is_order_Valid() const{
    return m_order_isValid;
}

QList<OAIQueryProperty> OAIAnonymizationKeyQuery::getQueryProperties() const {
    return m_query_properties;
}
void OAIAnonymizationKeyQuery::setQueryProperties(const QList<OAIQueryProperty> &query_properties) {
    m_query_properties = query_properties;
    m_query_properties_isSet = true;
}

bool OAIAnonymizationKeyQuery::is_query_properties_Set() const{
    return m_query_properties_isSet;
}

bool OAIAnonymizationKeyQuery::is_query_properties_Valid() const{
    return m_query_properties_isValid;
}

qint64 OAIAnonymizationKeyQuery::getStartIndex() const {
    return m_start_index;
}
void OAIAnonymizationKeyQuery::setStartIndex(const qint64 &start_index) {
    m_start_index = start_index;
    m_start_index_isSet = true;
}

bool OAIAnonymizationKeyQuery::is_start_index_Set() const{
    return m_start_index_isSet;
}

bool OAIAnonymizationKeyQuery::is_start_index_Valid() const{
    return m_start_index_isValid;
}

bool OAIAnonymizationKeyQuery::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_properties.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_index_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAnonymizationKeyQuery::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_count_isValid && m_query_properties_isValid && m_start_index_isValid && true;
}

} // namespace OpenAPI
