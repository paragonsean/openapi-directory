/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeries::OAISeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeries::OAISeries() {
    this->initializeModel();
}

OAISeries::~OAISeries() {}

void OAISeries::initializeModel() {

    m_body_part_examined_isSet = false;
    m_body_part_examined_isValid = false;

    m_frame_of_reference_uid_isSet = false;
    m_frame_of_reference_uid_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_manufacturer_isSet = false;
    m_manufacturer_isValid = false;

    m_modality_isSet = false;
    m_modality_isValid = false;

    m_protocol_name_isSet = false;
    m_protocol_name_isValid = false;

    m_series_date_isSet = false;
    m_series_date_isValid = false;

    m_series_description_isSet = false;
    m_series_description_isValid = false;

    m_series_instance_uid_isSet = false;
    m_series_instance_uid_isValid = false;

    m_station_name_isSet = false;
    m_station_name_isValid = false;

    m_study_id_isSet = false;
    m_study_id_isValid = false;
}

void OAISeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeries::fromJsonObject(QJsonObject json) {

    m_body_part_examined_isValid = ::OpenAPI::fromJsonValue(m_body_part_examined, json[QString("bodyPartExamined")]);
    m_body_part_examined_isSet = !json[QString("bodyPartExamined")].isNull() && m_body_part_examined_isValid;

    m_frame_of_reference_uid_isValid = ::OpenAPI::fromJsonValue(m_frame_of_reference_uid, json[QString("frameOfReferenceUID")]);
    m_frame_of_reference_uid_isSet = !json[QString("frameOfReferenceUID")].isNull() && m_frame_of_reference_uid_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_manufacturer_isValid = ::OpenAPI::fromJsonValue(m_manufacturer, json[QString("manufacturer")]);
    m_manufacturer_isSet = !json[QString("manufacturer")].isNull() && m_manufacturer_isValid;

    m_modality_isValid = ::OpenAPI::fromJsonValue(m_modality, json[QString("modality")]);
    m_modality_isSet = !json[QString("modality")].isNull() && m_modality_isValid;

    m_protocol_name_isValid = ::OpenAPI::fromJsonValue(m_protocol_name, json[QString("protocolName")]);
    m_protocol_name_isSet = !json[QString("protocolName")].isNull() && m_protocol_name_isValid;

    m_series_date_isValid = ::OpenAPI::fromJsonValue(m_series_date, json[QString("seriesDate")]);
    m_series_date_isSet = !json[QString("seriesDate")].isNull() && m_series_date_isValid;

    m_series_description_isValid = ::OpenAPI::fromJsonValue(m_series_description, json[QString("seriesDescription")]);
    m_series_description_isSet = !json[QString("seriesDescription")].isNull() && m_series_description_isValid;

    m_series_instance_uid_isValid = ::OpenAPI::fromJsonValue(m_series_instance_uid, json[QString("seriesInstanceUID")]);
    m_series_instance_uid_isSet = !json[QString("seriesInstanceUID")].isNull() && m_series_instance_uid_isValid;

    m_station_name_isValid = ::OpenAPI::fromJsonValue(m_station_name, json[QString("stationName")]);
    m_station_name_isSet = !json[QString("stationName")].isNull() && m_station_name_isValid;

    m_study_id_isValid = ::OpenAPI::fromJsonValue(m_study_id, json[QString("studyId")]);
    m_study_id_isSet = !json[QString("studyId")].isNull() && m_study_id_isValid;
}

QString OAISeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeries::asJsonObject() const {
    QJsonObject obj;
    if (m_body_part_examined.isSet()) {
        obj.insert(QString("bodyPartExamined"), ::OpenAPI::toJsonValue(m_body_part_examined));
    }
    if (m_frame_of_reference_uid.isSet()) {
        obj.insert(QString("frameOfReferenceUID"), ::OpenAPI::toJsonValue(m_frame_of_reference_uid));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_manufacturer.isSet()) {
        obj.insert(QString("manufacturer"), ::OpenAPI::toJsonValue(m_manufacturer));
    }
    if (m_modality.isSet()) {
        obj.insert(QString("modality"), ::OpenAPI::toJsonValue(m_modality));
    }
    if (m_protocol_name.isSet()) {
        obj.insert(QString("protocolName"), ::OpenAPI::toJsonValue(m_protocol_name));
    }
    if (m_series_date.isSet()) {
        obj.insert(QString("seriesDate"), ::OpenAPI::toJsonValue(m_series_date));
    }
    if (m_series_description.isSet()) {
        obj.insert(QString("seriesDescription"), ::OpenAPI::toJsonValue(m_series_description));
    }
    if (m_series_instance_uid.isSet()) {
        obj.insert(QString("seriesInstanceUID"), ::OpenAPI::toJsonValue(m_series_instance_uid));
    }
    if (m_station_name.isSet()) {
        obj.insert(QString("stationName"), ::OpenAPI::toJsonValue(m_station_name));
    }
    if (m_study_id_isSet) {
        obj.insert(QString("studyId"), ::OpenAPI::toJsonValue(m_study_id));
    }
    return obj;
}

OAIDicomPropertyValue OAISeries::getBodyPartExamined() const {
    return m_body_part_examined;
}
void OAISeries::setBodyPartExamined(const OAIDicomPropertyValue &body_part_examined) {
    m_body_part_examined = body_part_examined;
    m_body_part_examined_isSet = true;
}

bool OAISeries::is_body_part_examined_Set() const{
    return m_body_part_examined_isSet;
}

bool OAISeries::is_body_part_examined_Valid() const{
    return m_body_part_examined_isValid;
}

OAIDicomPropertyValue OAISeries::getFrameOfReferenceUid() const {
    return m_frame_of_reference_uid;
}
void OAISeries::setFrameOfReferenceUid(const OAIDicomPropertyValue &frame_of_reference_uid) {
    m_frame_of_reference_uid = frame_of_reference_uid;
    m_frame_of_reference_uid_isSet = true;
}

bool OAISeries::is_frame_of_reference_uid_Set() const{
    return m_frame_of_reference_uid_isSet;
}

bool OAISeries::is_frame_of_reference_uid_Valid() const{
    return m_frame_of_reference_uid_isValid;
}

qint64 OAISeries::getId() const {
    return m_id;
}
void OAISeries::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISeries::is_id_Set() const{
    return m_id_isSet;
}

bool OAISeries::is_id_Valid() const{
    return m_id_isValid;
}

OAIDicomPropertyValue OAISeries::getManufacturer() const {
    return m_manufacturer;
}
void OAISeries::setManufacturer(const OAIDicomPropertyValue &manufacturer) {
    m_manufacturer = manufacturer;
    m_manufacturer_isSet = true;
}

bool OAISeries::is_manufacturer_Set() const{
    return m_manufacturer_isSet;
}

bool OAISeries::is_manufacturer_Valid() const{
    return m_manufacturer_isValid;
}

OAIDicomPropertyValue OAISeries::getModality() const {
    return m_modality;
}
void OAISeries::setModality(const OAIDicomPropertyValue &modality) {
    m_modality = modality;
    m_modality_isSet = true;
}

bool OAISeries::is_modality_Set() const{
    return m_modality_isSet;
}

bool OAISeries::is_modality_Valid() const{
    return m_modality_isValid;
}

OAIDicomPropertyValue OAISeries::getProtocolName() const {
    return m_protocol_name;
}
void OAISeries::setProtocolName(const OAIDicomPropertyValue &protocol_name) {
    m_protocol_name = protocol_name;
    m_protocol_name_isSet = true;
}

bool OAISeries::is_protocol_name_Set() const{
    return m_protocol_name_isSet;
}

bool OAISeries::is_protocol_name_Valid() const{
    return m_protocol_name_isValid;
}

OAIDicomPropertyValue OAISeries::getSeriesDate() const {
    return m_series_date;
}
void OAISeries::setSeriesDate(const OAIDicomPropertyValue &series_date) {
    m_series_date = series_date;
    m_series_date_isSet = true;
}

bool OAISeries::is_series_date_Set() const{
    return m_series_date_isSet;
}

bool OAISeries::is_series_date_Valid() const{
    return m_series_date_isValid;
}

OAIDicomPropertyValue OAISeries::getSeriesDescription() const {
    return m_series_description;
}
void OAISeries::setSeriesDescription(const OAIDicomPropertyValue &series_description) {
    m_series_description = series_description;
    m_series_description_isSet = true;
}

bool OAISeries::is_series_description_Set() const{
    return m_series_description_isSet;
}

bool OAISeries::is_series_description_Valid() const{
    return m_series_description_isValid;
}

OAIDicomPropertyValue OAISeries::getSeriesInstanceUid() const {
    return m_series_instance_uid;
}
void OAISeries::setSeriesInstanceUid(const OAIDicomPropertyValue &series_instance_uid) {
    m_series_instance_uid = series_instance_uid;
    m_series_instance_uid_isSet = true;
}

bool OAISeries::is_series_instance_uid_Set() const{
    return m_series_instance_uid_isSet;
}

bool OAISeries::is_series_instance_uid_Valid() const{
    return m_series_instance_uid_isValid;
}

OAIDicomPropertyValue OAISeries::getStationName() const {
    return m_station_name;
}
void OAISeries::setStationName(const OAIDicomPropertyValue &station_name) {
    m_station_name = station_name;
    m_station_name_isSet = true;
}

bool OAISeries::is_station_name_Set() const{
    return m_station_name_isSet;
}

bool OAISeries::is_station_name_Valid() const{
    return m_station_name_isValid;
}

qint64 OAISeries::getStudyId() const {
    return m_study_id;
}
void OAISeries::setStudyId(const qint64 &study_id) {
    m_study_id = study_id;
    m_study_id_isSet = true;
}

bool OAISeries::is_study_id_Set() const{
    return m_study_id_isSet;
}

bool OAISeries::is_study_id_Valid() const{
    return m_study_id_isValid;
}

bool OAISeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_body_part_examined.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_frame_of_reference_uid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_manufacturer.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_modality.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_protocol_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_description.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_instance_uid.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_station_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_study_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
