/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPatient.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPatient::OAIPatient(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPatient::OAIPatient() {
    this->initializeModel();
}

OAIPatient::~OAIPatient() {}

void OAIPatient::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_patient_birth_date_isSet = false;
    m_patient_birth_date_isValid = false;

    m_patient_id_isSet = false;
    m_patient_id_isValid = false;

    m_patient_name_isSet = false;
    m_patient_name_isValid = false;

    m_patient_sex_isSet = false;
    m_patient_sex_isValid = false;
}

void OAIPatient::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPatient::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_patient_birth_date_isValid = ::OpenAPI::fromJsonValue(m_patient_birth_date, json[QString("patientBirthDate")]);
    m_patient_birth_date_isSet = !json[QString("patientBirthDate")].isNull() && m_patient_birth_date_isValid;

    m_patient_id_isValid = ::OpenAPI::fromJsonValue(m_patient_id, json[QString("patientID")]);
    m_patient_id_isSet = !json[QString("patientID")].isNull() && m_patient_id_isValid;

    m_patient_name_isValid = ::OpenAPI::fromJsonValue(m_patient_name, json[QString("patientName")]);
    m_patient_name_isSet = !json[QString("patientName")].isNull() && m_patient_name_isValid;

    m_patient_sex_isValid = ::OpenAPI::fromJsonValue(m_patient_sex, json[QString("patientSex")]);
    m_patient_sex_isSet = !json[QString("patientSex")].isNull() && m_patient_sex_isValid;
}

QString OAIPatient::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPatient::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_patient_birth_date.isSet()) {
        obj.insert(QString("patientBirthDate"), ::OpenAPI::toJsonValue(m_patient_birth_date));
    }
    if (m_patient_id.isSet()) {
        obj.insert(QString("patientID"), ::OpenAPI::toJsonValue(m_patient_id));
    }
    if (m_patient_name.isSet()) {
        obj.insert(QString("patientName"), ::OpenAPI::toJsonValue(m_patient_name));
    }
    if (m_patient_sex.isSet()) {
        obj.insert(QString("patientSex"), ::OpenAPI::toJsonValue(m_patient_sex));
    }
    return obj;
}

qint64 OAIPatient::getId() const {
    return m_id;
}
void OAIPatient::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPatient::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPatient::is_id_Valid() const{
    return m_id_isValid;
}

OAIDicomPropertyValue OAIPatient::getPatientBirthDate() const {
    return m_patient_birth_date;
}
void OAIPatient::setPatientBirthDate(const OAIDicomPropertyValue &patient_birth_date) {
    m_patient_birth_date = patient_birth_date;
    m_patient_birth_date_isSet = true;
}

bool OAIPatient::is_patient_birth_date_Set() const{
    return m_patient_birth_date_isSet;
}

bool OAIPatient::is_patient_birth_date_Valid() const{
    return m_patient_birth_date_isValid;
}

OAIDicomPropertyValue OAIPatient::getPatientId() const {
    return m_patient_id;
}
void OAIPatient::setPatientId(const OAIDicomPropertyValue &patient_id) {
    m_patient_id = patient_id;
    m_patient_id_isSet = true;
}

bool OAIPatient::is_patient_id_Set() const{
    return m_patient_id_isSet;
}

bool OAIPatient::is_patient_id_Valid() const{
    return m_patient_id_isValid;
}

OAIDicomPropertyValue OAIPatient::getPatientName() const {
    return m_patient_name;
}
void OAIPatient::setPatientName(const OAIDicomPropertyValue &patient_name) {
    m_patient_name = patient_name;
    m_patient_name_isSet = true;
}

bool OAIPatient::is_patient_name_Set() const{
    return m_patient_name_isSet;
}

bool OAIPatient::is_patient_name_Valid() const{
    return m_patient_name_isValid;
}

OAIDicomPropertyValue OAIPatient::getPatientSex() const {
    return m_patient_sex;
}
void OAIPatient::setPatientSex(const OAIDicomPropertyValue &patient_sex) {
    m_patient_sex = patient_sex;
    m_patient_sex_isSet = true;
}

bool OAIPatient::is_patient_sex_Set() const{
    return m_patient_sex_isSet;
}

bool OAIPatient::is_patient_sex_Valid() const{
    return m_patient_sex_isValid;
}

bool OAIPatient::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_birth_date.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_name.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient_sex.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPatient::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
