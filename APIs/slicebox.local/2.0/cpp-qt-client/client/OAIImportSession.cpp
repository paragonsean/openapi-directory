/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImportSession.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImportSession::OAIImportSession(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImportSession::OAIImportSession() {
    this->initializeModel();
}

OAIImportSession::~OAIImportSession() {}

void OAIImportSession::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_files_added_isSet = false;
    m_files_added_isValid = false;

    m_files_imported_isSet = false;
    m_files_imported_isValid = false;

    m_files_rejected_isSet = false;
    m_files_rejected_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIImportSession::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImportSession::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_files_added_isValid = ::OpenAPI::fromJsonValue(m_files_added, json[QString("filesAdded")]);
    m_files_added_isSet = !json[QString("filesAdded")].isNull() && m_files_added_isValid;

    m_files_imported_isValid = ::OpenAPI::fromJsonValue(m_files_imported, json[QString("filesImported")]);
    m_files_imported_isSet = !json[QString("filesImported")].isNull() && m_files_imported_isValid;

    m_files_rejected_isValid = ::OpenAPI::fromJsonValue(m_files_rejected, json[QString("filesRejected")]);
    m_files_rejected_isSet = !json[QString("filesRejected")].isNull() && m_files_rejected_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("userId")]);
    m_user_id_isSet = !json[QString("userId")].isNull() && m_user_id_isValid;
}

QString OAIImportSession::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImportSession::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_files_added_isSet) {
        obj.insert(QString("filesAdded"), ::OpenAPI::toJsonValue(m_files_added));
    }
    if (m_files_imported_isSet) {
        obj.insert(QString("filesImported"), ::OpenAPI::toJsonValue(m_files_imported));
    }
    if (m_files_rejected_isSet) {
        obj.insert(QString("filesRejected"), ::OpenAPI::toJsonValue(m_files_rejected));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("userId"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

qint64 OAIImportSession::getCreated() const {
    return m_created;
}
void OAIImportSession::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAIImportSession::is_created_Set() const{
    return m_created_isSet;
}

bool OAIImportSession::is_created_Valid() const{
    return m_created_isValid;
}

qint32 OAIImportSession::getFilesAdded() const {
    return m_files_added;
}
void OAIImportSession::setFilesAdded(const qint32 &files_added) {
    m_files_added = files_added;
    m_files_added_isSet = true;
}

bool OAIImportSession::is_files_added_Set() const{
    return m_files_added_isSet;
}

bool OAIImportSession::is_files_added_Valid() const{
    return m_files_added_isValid;
}

qint32 OAIImportSession::getFilesImported() const {
    return m_files_imported;
}
void OAIImportSession::setFilesImported(const qint32 &files_imported) {
    m_files_imported = files_imported;
    m_files_imported_isSet = true;
}

bool OAIImportSession::is_files_imported_Set() const{
    return m_files_imported_isSet;
}

bool OAIImportSession::is_files_imported_Valid() const{
    return m_files_imported_isValid;
}

qint32 OAIImportSession::getFilesRejected() const {
    return m_files_rejected;
}
void OAIImportSession::setFilesRejected(const qint32 &files_rejected) {
    m_files_rejected = files_rejected;
    m_files_rejected_isSet = true;
}

bool OAIImportSession::is_files_rejected_Set() const{
    return m_files_rejected_isSet;
}

bool OAIImportSession::is_files_rejected_Valid() const{
    return m_files_rejected_isValid;
}

qint64 OAIImportSession::getId() const {
    return m_id;
}
void OAIImportSession::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIImportSession::is_id_Set() const{
    return m_id_isSet;
}

bool OAIImportSession::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIImportSession::getLastUpdated() const {
    return m_last_updated;
}
void OAIImportSession::setLastUpdated(const qint64 &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIImportSession::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIImportSession::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QString OAIImportSession::getName() const {
    return m_name;
}
void OAIImportSession::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImportSession::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImportSession::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImportSession::getUser() const {
    return m_user;
}
void OAIImportSession::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIImportSession::is_user_Set() const{
    return m_user_isSet;
}

bool OAIImportSession::is_user_Valid() const{
    return m_user_isValid;
}

qint64 OAIImportSession::getUserId() const {
    return m_user_id;
}
void OAIImportSession::setUserId(const qint64 &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIImportSession::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIImportSession::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIImportSession::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_added_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_imported_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files_rejected_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImportSession::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
