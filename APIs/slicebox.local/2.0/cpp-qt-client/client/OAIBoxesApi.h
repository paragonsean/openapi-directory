/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIBoxesApi_H
#define OAI_OAIBoxesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBox.h"
#include "OAIBulkAnonymizationData.h"
#include "OAIImage.h"
#include "OAIIncomingTransaction.h"
#include "OAIOutgoingTransaction.h"
#include "OAIRemoteBox.h"
#include "OAIRemoteBoxConnectionData.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIBoxesApi : public QObject {
    Q_OBJECT

public:
    OAIBoxesApi(const int timeOut = 0);
    ~OAIBoxesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  remote_box OAIRemoteBox [required]
    */
    virtual void boxesConnectPost(const OAIRemoteBox &remote_box);

    /**
    * @param[in]  remote_box_connection_data OAIRemoteBoxConnectionData [required]
    */
    virtual void boxesCreateconnectionPost(const OAIRemoteBoxConnectionData &remote_box_connection_data);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void boxesGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void boxesIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  sequence_of_image_tag_values OAIBulkAnonymizationData [required]
    */
    virtual void boxesIdSendPost(const qint64 &id, const OAIBulkAnonymizationData &sequence_of_image_tag_values);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void boxesIncomingGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void boxesIncomingIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void boxesIncomingIdImagesGet(const qint64 &id);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void boxesOutgoingGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void boxesOutgoingIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void boxesOutgoingIdImagesGet(const qint64 &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void boxesConnectPostCallback(OAIHttpRequestWorker *worker);
    void boxesCreateconnectionPostCallback(OAIHttpRequestWorker *worker);
    void boxesGetCallback(OAIHttpRequestWorker *worker);
    void boxesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void boxesIdSendPostCallback(OAIHttpRequestWorker *worker);
    void boxesIncomingGetCallback(OAIHttpRequestWorker *worker);
    void boxesIncomingIdDeleteCallback(OAIHttpRequestWorker *worker);
    void boxesIncomingIdImagesGetCallback(OAIHttpRequestWorker *worker);
    void boxesOutgoingGetCallback(OAIHttpRequestWorker *worker);
    void boxesOutgoingIdDeleteCallback(OAIHttpRequestWorker *worker);
    void boxesOutgoingIdImagesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void boxesConnectPostSignal(OAIBox summary);
    void boxesCreateconnectionPostSignal(OAIBox summary);
    void boxesGetSignal(QList<OAIBox> summary);
    void boxesIdDeleteSignal();
    void boxesIdSendPostSignal();
    void boxesIncomingGetSignal(QList<OAIIncomingTransaction> summary);
    void boxesIncomingIdDeleteSignal();
    void boxesIncomingIdImagesGetSignal(QList<OAIImage> summary);
    void boxesOutgoingGetSignal(QList<OAIOutgoingTransaction> summary);
    void boxesOutgoingIdDeleteSignal();
    void boxesOutgoingIdImagesGetSignal(QList<OAIImage> summary);


    void boxesConnectPostSignalFull(OAIHttpRequestWorker *worker, OAIBox summary);
    void boxesCreateconnectionPostSignalFull(OAIHttpRequestWorker *worker, OAIBox summary);
    void boxesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIBox> summary);
    void boxesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void boxesIdSendPostSignalFull(OAIHttpRequestWorker *worker);
    void boxesIncomingGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIIncomingTransaction> summary);
    void boxesIncomingIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void boxesIncomingIdImagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);
    void boxesOutgoingGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOutgoingTransaction> summary);
    void boxesOutgoingIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void boxesOutgoingIdImagesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIImage> summary);

    Q_DECL_DEPRECATED_X("Use boxesConnectPostSignalError() instead")
    void boxesConnectPostSignalE(OAIBox summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesConnectPostSignalError(OAIBox summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesCreateconnectionPostSignalError() instead")
    void boxesCreateconnectionPostSignalE(OAIBox summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesCreateconnectionPostSignalError(OAIBox summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesGetSignalError() instead")
    void boxesGetSignalE(QList<OAIBox> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesGetSignalError(QList<OAIBox> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIdDeleteSignalError() instead")
    void boxesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIdSendPostSignalError() instead")
    void boxesIdSendPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIdSendPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIncomingGetSignalError() instead")
    void boxesIncomingGetSignalE(QList<OAIIncomingTransaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIncomingGetSignalError(QList<OAIIncomingTransaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIncomingIdDeleteSignalError() instead")
    void boxesIncomingIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIncomingIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIncomingIdImagesGetSignalError() instead")
    void boxesIncomingIdImagesGetSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIncomingIdImagesGetSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesOutgoingGetSignalError() instead")
    void boxesOutgoingGetSignalE(QList<OAIOutgoingTransaction> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesOutgoingGetSignalError(QList<OAIOutgoingTransaction> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesOutgoingIdDeleteSignalError() instead")
    void boxesOutgoingIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxesOutgoingIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesOutgoingIdImagesGetSignalError() instead")
    void boxesOutgoingIdImagesGetSignalE(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesOutgoingIdImagesGetSignalError(QList<OAIImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use boxesConnectPostSignalErrorFull() instead")
    void boxesConnectPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesConnectPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesCreateconnectionPostSignalErrorFull() instead")
    void boxesCreateconnectionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesCreateconnectionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesGetSignalErrorFull() instead")
    void boxesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIdDeleteSignalErrorFull() instead")
    void boxesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIdSendPostSignalErrorFull() instead")
    void boxesIdSendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIdSendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIncomingGetSignalErrorFull() instead")
    void boxesIncomingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIncomingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIncomingIdDeleteSignalErrorFull() instead")
    void boxesIncomingIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIncomingIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesIncomingIdImagesGetSignalErrorFull() instead")
    void boxesIncomingIdImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesIncomingIdImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesOutgoingGetSignalErrorFull() instead")
    void boxesOutgoingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesOutgoingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesOutgoingIdDeleteSignalErrorFull() instead")
    void boxesOutgoingIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesOutgoingIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxesOutgoingIdImagesGetSignalErrorFull() instead")
    void boxesOutgoingIdImagesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxesOutgoingIdImagesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
