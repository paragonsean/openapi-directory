/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAttribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAttribute::OAIImageAttribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAttribute::OAIImageAttribute() {
    this->initializeModel();
}

OAIImageAttribute::~OAIImageAttribute() {}

void OAIImageAttribute::initializeModel() {

    m_depth_isSet = false;
    m_depth_isValid = false;

    m_element_isSet = false;
    m_element_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;

    m_multiplicity_isSet = false;
    m_multiplicity_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;

    m_vr_isSet = false;
    m_vr_isValid = false;
}

void OAIImageAttribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAttribute::fromJsonObject(QJsonObject json) {

    m_depth_isValid = ::OpenAPI::fromJsonValue(m_depth, json[QString("depth")]);
    m_depth_isSet = !json[QString("depth")].isNull() && m_depth_isValid;

    m_element_isValid = ::OpenAPI::fromJsonValue(m_element, json[QString("element")]);
    m_element_isSet = !json[QString("element")].isNull() && m_element_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;

    m_multiplicity_isValid = ::OpenAPI::fromJsonValue(m_multiplicity, json[QString("multiplicity")]);
    m_multiplicity_isSet = !json[QString("multiplicity")].isNull() && m_multiplicity_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;

    m_vr_isValid = ::OpenAPI::fromJsonValue(m_vr, json[QString("vr")]);
    m_vr_isSet = !json[QString("vr")].isNull() && m_vr_isValid;
}

QString OAIImageAttribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAttribute::asJsonObject() const {
    QJsonObject obj;
    if (m_depth_isSet) {
        obj.insert(QString("depth"), ::OpenAPI::toJsonValue(m_depth));
    }
    if (m_element_isSet) {
        obj.insert(QString("element"), ::OpenAPI::toJsonValue(m_element));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    if (m_multiplicity_isSet) {
        obj.insert(QString("multiplicity"), ::OpenAPI::toJsonValue(m_multiplicity));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    if (m_vr_isSet) {
        obj.insert(QString("vr"), ::OpenAPI::toJsonValue(m_vr));
    }
    return obj;
}

qint32 OAIImageAttribute::getDepth() const {
    return m_depth;
}
void OAIImageAttribute::setDepth(const qint32 &depth) {
    m_depth = depth;
    m_depth_isSet = true;
}

bool OAIImageAttribute::is_depth_Set() const{
    return m_depth_isSet;
}

bool OAIImageAttribute::is_depth_Valid() const{
    return m_depth_isValid;
}

QString OAIImageAttribute::getElement() const {
    return m_element;
}
void OAIImageAttribute::setElement(const QString &element) {
    m_element = element;
    m_element_isSet = true;
}

bool OAIImageAttribute::is_element_Set() const{
    return m_element_isSet;
}

bool OAIImageAttribute::is_element_Valid() const{
    return m_element_isValid;
}

QString OAIImageAttribute::getGroup() const {
    return m_group;
}
void OAIImageAttribute::setGroup(const QString &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAIImageAttribute::is_group_Set() const{
    return m_group_isSet;
}

bool OAIImageAttribute::is_group_Valid() const{
    return m_group_isValid;
}

qint32 OAIImageAttribute::getLength() const {
    return m_length;
}
void OAIImageAttribute::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIImageAttribute::is_length_Set() const{
    return m_length_isSet;
}

bool OAIImageAttribute::is_length_Valid() const{
    return m_length_isValid;
}

qint32 OAIImageAttribute::getMultiplicity() const {
    return m_multiplicity;
}
void OAIImageAttribute::setMultiplicity(const qint32 &multiplicity) {
    m_multiplicity = multiplicity;
    m_multiplicity_isSet = true;
}

bool OAIImageAttribute::is_multiplicity_Set() const{
    return m_multiplicity_isSet;
}

bool OAIImageAttribute::is_multiplicity_Valid() const{
    return m_multiplicity_isValid;
}

QString OAIImageAttribute::getName() const {
    return m_name;
}
void OAIImageAttribute::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIImageAttribute::is_name_Set() const{
    return m_name_isSet;
}

bool OAIImageAttribute::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIImageAttribute::getPath() const {
    return m_path;
}
void OAIImageAttribute::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAIImageAttribute::is_path_Set() const{
    return m_path_isSet;
}

bool OAIImageAttribute::is_path_Valid() const{
    return m_path_isValid;
}

QString OAIImageAttribute::getValue() const {
    return m_value;
}
void OAIImageAttribute::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIImageAttribute::is_value_Set() const{
    return m_value_isSet;
}

bool OAIImageAttribute::is_value_Valid() const{
    return m_value_isValid;
}

QString OAIImageAttribute::getVr() const {
    return m_vr;
}
void OAIImageAttribute::setVr(const QString &vr) {
    m_vr = vr;
    m_vr_isSet = true;
}

bool OAIImageAttribute::is_vr_Set() const{
    return m_vr_isSet;
}

bool OAIImageAttribute::is_vr_Valid() const{
    return m_vr_isValid;
}

bool OAIImageAttribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_depth_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_element_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_multiplicity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAttribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
