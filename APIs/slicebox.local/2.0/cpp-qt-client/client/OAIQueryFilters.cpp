/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryFilters::OAIQueryFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryFilters::OAIQueryFilters() {
    this->initializeModel();
}

OAIQueryFilters::~OAIQueryFilters() {}

void OAIQueryFilters::initializeModel() {

    m_series_tag_ids_isSet = false;
    m_series_tag_ids_isValid = false;

    m_series_type_ids_isSet = false;
    m_series_type_ids_isValid = false;

    m_source_refs_isSet = false;
    m_source_refs_isValid = false;
}

void OAIQueryFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryFilters::fromJsonObject(QJsonObject json) {

    m_series_tag_ids_isValid = ::OpenAPI::fromJsonValue(m_series_tag_ids, json[QString("seriesTagIds")]);
    m_series_tag_ids_isSet = !json[QString("seriesTagIds")].isNull() && m_series_tag_ids_isValid;

    m_series_type_ids_isValid = ::OpenAPI::fromJsonValue(m_series_type_ids, json[QString("seriesTypeIds")]);
    m_series_type_ids_isSet = !json[QString("seriesTypeIds")].isNull() && m_series_type_ids_isValid;

    m_source_refs_isValid = ::OpenAPI::fromJsonValue(m_source_refs, json[QString("sourceRefs")]);
    m_source_refs_isSet = !json[QString("sourceRefs")].isNull() && m_source_refs_isValid;
}

QString OAIQueryFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_series_tag_ids.size() > 0) {
        obj.insert(QString("seriesTagIds"), ::OpenAPI::toJsonValue(m_series_tag_ids));
    }
    if (m_series_type_ids.size() > 0) {
        obj.insert(QString("seriesTypeIds"), ::OpenAPI::toJsonValue(m_series_type_ids));
    }
    if (m_source_refs.size() > 0) {
        obj.insert(QString("sourceRefs"), ::OpenAPI::toJsonValue(m_source_refs));
    }
    return obj;
}

QList<qint64> OAIQueryFilters::getSeriesTagIds() const {
    return m_series_tag_ids;
}
void OAIQueryFilters::setSeriesTagIds(const QList<qint64> &series_tag_ids) {
    m_series_tag_ids = series_tag_ids;
    m_series_tag_ids_isSet = true;
}

bool OAIQueryFilters::is_series_tag_ids_Set() const{
    return m_series_tag_ids_isSet;
}

bool OAIQueryFilters::is_series_tag_ids_Valid() const{
    return m_series_tag_ids_isValid;
}

QList<qint64> OAIQueryFilters::getSeriesTypeIds() const {
    return m_series_type_ids;
}
void OAIQueryFilters::setSeriesTypeIds(const QList<qint64> &series_type_ids) {
    m_series_type_ids = series_type_ids;
    m_series_type_ids_isSet = true;
}

bool OAIQueryFilters::is_series_type_ids_Set() const{
    return m_series_type_ids_isSet;
}

bool OAIQueryFilters::is_series_type_ids_Valid() const{
    return m_series_type_ids_isValid;
}

QList<OAISourceRef> OAIQueryFilters::getSourceRefs() const {
    return m_source_refs;
}
void OAIQueryFilters::setSourceRefs(const QList<OAISourceRef> &source_refs) {
    m_source_refs = source_refs;
    m_source_refs_isSet = true;
}

bool OAIQueryFilters::is_source_refs_Set() const{
    return m_source_refs_isSet;
}

bool OAIQueryFilters::is_source_refs_Valid() const{
    return m_source_refs_isValid;
}

bool OAIQueryFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_series_tag_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_type_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_source_refs.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
