/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutgoingTransactionImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutgoingTransactionImage::OAIOutgoingTransactionImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutgoingTransactionImage::OAIOutgoingTransactionImage() {
    this->initializeModel();
}

OAIOutgoingTransactionImage::~OAIOutgoingTransactionImage() {}

void OAIOutgoingTransactionImage::initializeModel() {

    m_image_isSet = false;
    m_image_isValid = false;

    m_transaction_isSet = false;
    m_transaction_isValid = false;
}

void OAIOutgoingTransactionImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutgoingTransactionImage::fromJsonObject(QJsonObject json) {

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_transaction_isValid = ::OpenAPI::fromJsonValue(m_transaction, json[QString("transaction")]);
    m_transaction_isSet = !json[QString("transaction")].isNull() && m_transaction_isValid;
}

QString OAIOutgoingTransactionImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutgoingTransactionImage::asJsonObject() const {
    QJsonObject obj;
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_transaction.isSet()) {
        obj.insert(QString("transaction"), ::OpenAPI::toJsonValue(m_transaction));
    }
    return obj;
}

OAIOutgoingImage OAIOutgoingTransactionImage::getImage() const {
    return m_image;
}
void OAIOutgoingTransactionImage::setImage(const OAIOutgoingImage &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIOutgoingTransactionImage::is_image_Set() const{
    return m_image_isSet;
}

bool OAIOutgoingTransactionImage::is_image_Valid() const{
    return m_image_isValid;
}

OAIOutgoingTransaction OAIOutgoingTransactionImage::getTransaction() const {
    return m_transaction;
}
void OAIOutgoingTransactionImage::setTransaction(const OAIOutgoingTransaction &transaction) {
    m_transaction = transaction;
    m_transaction_isSet = true;
}

bool OAIOutgoingTransactionImage::is_transaction_Set() const{
    return m_transaction_isSet;
}

bool OAIOutgoingTransactionImage::is_transaction_Valid() const{
    return m_transaction_isValid;
}

bool OAIOutgoingTransactionImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutgoingTransactionImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
