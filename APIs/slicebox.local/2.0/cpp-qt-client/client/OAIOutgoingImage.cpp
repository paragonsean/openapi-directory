/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIOutgoingImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIOutgoingImage::OAIOutgoingImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIOutgoingImage::OAIOutgoingImage() {
    this->initializeModel();
}

OAIOutgoingImage::~OAIOutgoingImage() {}

void OAIOutgoingImage::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_outgoing_transaction_id_isSet = false;
    m_outgoing_transaction_id_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;

    m_sequence_number_isSet = false;
    m_sequence_number_isValid = false;
}

void OAIOutgoingImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIOutgoingImage::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("imageId")]);
    m_image_id_isSet = !json[QString("imageId")].isNull() && m_image_id_isValid;

    m_outgoing_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_outgoing_transaction_id, json[QString("outgoingTransactionId")]);
    m_outgoing_transaction_id_isSet = !json[QString("outgoingTransactionId")].isNull() && m_outgoing_transaction_id_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;

    m_sequence_number_isValid = ::OpenAPI::fromJsonValue(m_sequence_number, json[QString("sequenceNumber")]);
    m_sequence_number_isSet = !json[QString("sequenceNumber")].isNull() && m_sequence_number_isValid;
}

QString OAIOutgoingImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIOutgoingImage::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("imageId"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_outgoing_transaction_id_isSet) {
        obj.insert(QString("outgoingTransactionId"), ::OpenAPI::toJsonValue(m_outgoing_transaction_id));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    if (m_sequence_number_isSet) {
        obj.insert(QString("sequenceNumber"), ::OpenAPI::toJsonValue(m_sequence_number));
    }
    return obj;
}

qint64 OAIOutgoingImage::getId() const {
    return m_id;
}
void OAIOutgoingImage::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIOutgoingImage::is_id_Set() const{
    return m_id_isSet;
}

bool OAIOutgoingImage::is_id_Valid() const{
    return m_id_isValid;
}

qint64 OAIOutgoingImage::getImageId() const {
    return m_image_id;
}
void OAIOutgoingImage::setImageId(const qint64 &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAIOutgoingImage::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAIOutgoingImage::is_image_id_Valid() const{
    return m_image_id_isValid;
}

qint64 OAIOutgoingImage::getOutgoingTransactionId() const {
    return m_outgoing_transaction_id;
}
void OAIOutgoingImage::setOutgoingTransactionId(const qint64 &outgoing_transaction_id) {
    m_outgoing_transaction_id = outgoing_transaction_id;
    m_outgoing_transaction_id_isSet = true;
}

bool OAIOutgoingImage::is_outgoing_transaction_id_Set() const{
    return m_outgoing_transaction_id_isSet;
}

bool OAIOutgoingImage::is_outgoing_transaction_id_Valid() const{
    return m_outgoing_transaction_id_isValid;
}

bool OAIOutgoingImage::isSent() const {
    return m_sent;
}
void OAIOutgoingImage::setSent(const bool &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIOutgoingImage::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIOutgoingImage::is_sent_Valid() const{
    return m_sent_isValid;
}

qint64 OAIOutgoingImage::getSequenceNumber() const {
    return m_sequence_number;
}
void OAIOutgoingImage::setSequenceNumber(const qint64 &sequence_number) {
    m_sequence_number = sequence_number;
    m_sequence_number_isSet = true;
}

bool OAIOutgoingImage::is_sequence_number_Set() const{
    return m_sequence_number_isSet;
}

bool OAIOutgoingImage::is_sequence_number_Valid() const{
    return m_sequence_number_isValid;
}

bool OAIOutgoingImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_outgoing_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sequence_number_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIOutgoingImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
