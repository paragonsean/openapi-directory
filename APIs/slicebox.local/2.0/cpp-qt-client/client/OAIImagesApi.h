/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAnonymizationData.h"
#include "OAIExportSetId.h"
#include "OAIImage.h"
#include "OAIImageAttribute.h"
#include "OAIImageInformation.h"
#include "OAIObject.h"
#include "OAITagMapping.h"
#include "OAI_images_post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  image_ids QList<qint64> [required]
    */
    virtual void imagesDeletePost(const QList<qint64> &image_ids);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void imagesExportGet(const qint64 &id);

    /**
    * @param[in]  image_ids QList<qint64> [required]
    */
    virtual void imagesExportPost(const QList<qint64> &image_ids);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  tag_values OAIAnonymizationData [required]
    */
    virtual void imagesIdAnonymizePut(const qint64 &id, const OAIAnonymizationData &tag_values);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  tag_values OAIAnonymizationData [required]
    */
    virtual void imagesIdAnonymizedPost(const qint64 &id, const OAIAnonymizationData &tag_values);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void imagesIdAttributesGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void imagesIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void imagesIdGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void imagesIdImageinformationGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  tag_path_value_mappings QList<OAITagMapping> [required]
    */
    virtual void imagesIdModifyPut(const qint64 &id, const QList<OAITagMapping> &tag_path_value_mappings);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  framenumber qint32 [optional]
    * @param[in]  windowmin qint32 [optional]
    * @param[in]  windowmax qint32 [optional]
    * @param[in]  imageheight qint32 [optional]
    */
    virtual void imagesIdPngGet(const qint64 &id, const ::OpenAPI::OptionalParam<qint32> &framenumber = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &windowmin = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &windowmax = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &imageheight = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  studyid qint64 [required]
    * @param[in]  jpeg_bytes OAIObject [required]
    * @param[in]  description QString [optional]
    */
    virtual void imagesJpegPost(const qint64 &studyid, const OAIObject &jpeg_bytes, const ::OpenAPI::OptionalParam<QString> &description = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_images_post_request OAI_images_post_request [required]
    */
    virtual void imagesPost(const OAI_images_post_request &oai_images_post_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void imagesDeletePostCallback(OAIHttpRequestWorker *worker);
    void imagesExportGetCallback(OAIHttpRequestWorker *worker);
    void imagesExportPostCallback(OAIHttpRequestWorker *worker);
    void imagesIdAnonymizePutCallback(OAIHttpRequestWorker *worker);
    void imagesIdAnonymizedPostCallback(OAIHttpRequestWorker *worker);
    void imagesIdAttributesGetCallback(OAIHttpRequestWorker *worker);
    void imagesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void imagesIdGetCallback(OAIHttpRequestWorker *worker);
    void imagesIdImageinformationGetCallback(OAIHttpRequestWorker *worker);
    void imagesIdModifyPutCallback(OAIHttpRequestWorker *worker);
    void imagesIdPngGetCallback(OAIHttpRequestWorker *worker);
    void imagesJpegPostCallback(OAIHttpRequestWorker *worker);
    void imagesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void imagesDeletePostSignal();
    void imagesExportGetSignal();
    void imagesExportPostSignal(OAIExportSetId summary);
    void imagesIdAnonymizePutSignal(OAIImage summary);
    void imagesIdAnonymizedPostSignal();
    void imagesIdAttributesGetSignal(QList<OAIImageAttribute> summary);
    void imagesIdDeleteSignal();
    void imagesIdGetSignal();
    void imagesIdImageinformationGetSignal(OAIImageInformation summary);
    void imagesIdModifyPutSignal();
    void imagesIdPngGetSignal();
    void imagesJpegPostSignal(OAIImage summary);
    void imagesPostSignal(OAIImage summary);


    void imagesDeletePostSignalFull(OAIHttpRequestWorker *worker);
    void imagesExportGetSignalFull(OAIHttpRequestWorker *worker);
    void imagesExportPostSignalFull(OAIHttpRequestWorker *worker, OAIExportSetId summary);
    void imagesIdAnonymizePutSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void imagesIdAnonymizedPostSignalFull(OAIHttpRequestWorker *worker);
    void imagesIdAttributesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIImageAttribute> summary);
    void imagesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void imagesIdGetSignalFull(OAIHttpRequestWorker *worker);
    void imagesIdImageinformationGetSignalFull(OAIHttpRequestWorker *worker, OAIImageInformation summary);
    void imagesIdModifyPutSignalFull(OAIHttpRequestWorker *worker);
    void imagesIdPngGetSignalFull(OAIHttpRequestWorker *worker);
    void imagesJpegPostSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void imagesPostSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);

    Q_DECL_DEPRECATED_X("Use imagesDeletePostSignalError() instead")
    void imagesDeletePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesDeletePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesExportGetSignalError() instead")
    void imagesExportGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesExportGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesExportPostSignalError() instead")
    void imagesExportPostSignalE(OAIExportSetId summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesExportPostSignalError(OAIExportSetId summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdAnonymizePutSignalError() instead")
    void imagesIdAnonymizePutSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdAnonymizePutSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdAnonymizedPostSignalError() instead")
    void imagesIdAnonymizedPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdAnonymizedPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdAttributesGetSignalError() instead")
    void imagesIdAttributesGetSignalE(QList<OAIImageAttribute> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdAttributesGetSignalError(QList<OAIImageAttribute> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdDeleteSignalError() instead")
    void imagesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdGetSignalError() instead")
    void imagesIdGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdImageinformationGetSignalError() instead")
    void imagesIdImageinformationGetSignalE(OAIImageInformation summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdImageinformationGetSignalError(OAIImageInformation summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdModifyPutSignalError() instead")
    void imagesIdModifyPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdModifyPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdPngGetSignalError() instead")
    void imagesIdPngGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdPngGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesJpegPostSignalError() instead")
    void imagesJpegPostSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesJpegPostSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesPostSignalError() instead")
    void imagesPostSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesPostSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use imagesDeletePostSignalErrorFull() instead")
    void imagesDeletePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesDeletePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesExportGetSignalErrorFull() instead")
    void imagesExportGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesExportGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesExportPostSignalErrorFull() instead")
    void imagesExportPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesExportPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdAnonymizePutSignalErrorFull() instead")
    void imagesIdAnonymizePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdAnonymizePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdAnonymizedPostSignalErrorFull() instead")
    void imagesIdAnonymizedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdAnonymizedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdAttributesGetSignalErrorFull() instead")
    void imagesIdAttributesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdAttributesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdDeleteSignalErrorFull() instead")
    void imagesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdGetSignalErrorFull() instead")
    void imagesIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdImageinformationGetSignalErrorFull() instead")
    void imagesIdImageinformationGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdImageinformationGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdModifyPutSignalErrorFull() instead")
    void imagesIdModifyPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdModifyPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesIdPngGetSignalErrorFull() instead")
    void imagesIdPngGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesIdPngGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesJpegPostSignalErrorFull() instead")
    void imagesJpegPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesJpegPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use imagesPostSignalErrorFull() instead")
    void imagesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void imagesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
