/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFailedOutgoingTransactionImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFailedOutgoingTransactionImage::OAIFailedOutgoingTransactionImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFailedOutgoingTransactionImage::OAIFailedOutgoingTransactionImage() {
    this->initializeModel();
}

OAIFailedOutgoingTransactionImage::~OAIFailedOutgoingTransactionImage() {}

void OAIFailedOutgoingTransactionImage::initializeModel() {

    m_message_isSet = false;
    m_message_isValid = false;

    m_transaction_image_isSet = false;
    m_transaction_image_isValid = false;
}

void OAIFailedOutgoingTransactionImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFailedOutgoingTransactionImage::fromJsonObject(QJsonObject json) {

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_transaction_image_isValid = ::OpenAPI::fromJsonValue(m_transaction_image, json[QString("transactionImage")]);
    m_transaction_image_isSet = !json[QString("transactionImage")].isNull() && m_transaction_image_isValid;
}

QString OAIFailedOutgoingTransactionImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFailedOutgoingTransactionImage::asJsonObject() const {
    QJsonObject obj;
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_transaction_image.isSet()) {
        obj.insert(QString("transactionImage"), ::OpenAPI::toJsonValue(m_transaction_image));
    }
    return obj;
}

QString OAIFailedOutgoingTransactionImage::getMessage() const {
    return m_message;
}
void OAIFailedOutgoingTransactionImage::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAIFailedOutgoingTransactionImage::is_message_Set() const{
    return m_message_isSet;
}

bool OAIFailedOutgoingTransactionImage::is_message_Valid() const{
    return m_message_isValid;
}

OAIOutgoingTransactionImage OAIFailedOutgoingTransactionImage::getTransactionImage() const {
    return m_transaction_image;
}
void OAIFailedOutgoingTransactionImage::setTransactionImage(const OAIOutgoingTransactionImage &transaction_image) {
    m_transaction_image = transaction_image;
    m_transaction_image_isSet = true;
}

bool OAIFailedOutgoingTransactionImage::is_transaction_image_Set() const{
    return m_transaction_image_isSet;
}

bool OAIFailedOutgoingTransactionImage::is_transaction_image_Valid() const{
    return m_transaction_image_isValid;
}

bool OAIFailedOutgoingTransactionImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_image.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFailedOutgoingTransactionImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
