/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneralApi_H
#define OAI_OAIGeneralApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDestination.h"
#include "OAISource.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneralApi : public QObject {
    Q_OBJECT

public:
    OAIGeneralApi(const int timeOut = 0);
    ~OAIGeneralApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    virtual void destinationsGet();


    virtual void sourcesGet();


    virtual void systemHealthGet();


    virtual void systemStopPost();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void destinationsGetCallback(OAIHttpRequestWorker *worker);
    void sourcesGetCallback(OAIHttpRequestWorker *worker);
    void systemHealthGetCallback(OAIHttpRequestWorker *worker);
    void systemStopPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void destinationsGetSignal(QList<OAIDestination> summary);
    void sourcesGetSignal(QList<OAISource> summary);
    void systemHealthGetSignal();
    void systemStopPostSignal();


    void destinationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIDestination> summary);
    void sourcesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISource> summary);
    void systemHealthGetSignalFull(OAIHttpRequestWorker *worker);
    void systemStopPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use destinationsGetSignalError() instead")
    void destinationsGetSignalE(QList<OAIDestination> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void destinationsGetSignalError(QList<OAIDestination> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourcesGetSignalError() instead")
    void sourcesGetSignalE(QList<OAISource> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourcesGetSignalError(QList<OAISource> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemHealthGetSignalError() instead")
    void systemHealthGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void systemHealthGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemStopPostSignalError() instead")
    void systemStopPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void systemStopPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use destinationsGetSignalErrorFull() instead")
    void destinationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void destinationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourcesGetSignalErrorFull() instead")
    void sourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemHealthGetSignalErrorFull() instead")
    void systemHealthGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemHealthGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use systemStopPostSignalErrorFull() instead")
    void systemStopPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void systemStopPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
