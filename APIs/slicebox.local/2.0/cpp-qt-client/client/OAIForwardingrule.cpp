/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIForwardingrule.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIForwardingrule::OAIForwardingrule(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIForwardingrule::OAIForwardingrule() {
    this->initializeModel();
}

OAIForwardingrule::~OAIForwardingrule() {}

void OAIForwardingrule::initializeModel() {

    m_destination_isSet = false;
    m_destination_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keep_images_isSet = false;
    m_keep_images_isValid = false;

    m_source_isSet = false;
    m_source_isValid = false;
}

void OAIForwardingrule::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIForwardingrule::fromJsonObject(QJsonObject json) {

    m_destination_isValid = ::OpenAPI::fromJsonValue(m_destination, json[QString("destination")]);
    m_destination_isSet = !json[QString("destination")].isNull() && m_destination_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keep_images_isValid = ::OpenAPI::fromJsonValue(m_keep_images, json[QString("keepImages")]);
    m_keep_images_isSet = !json[QString("keepImages")].isNull() && m_keep_images_isValid;

    m_source_isValid = ::OpenAPI::fromJsonValue(m_source, json[QString("source")]);
    m_source_isSet = !json[QString("source")].isNull() && m_source_isValid;
}

QString OAIForwardingrule::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIForwardingrule::asJsonObject() const {
    QJsonObject obj;
    if (m_destination.isSet()) {
        obj.insert(QString("destination"), ::OpenAPI::toJsonValue(m_destination));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keep_images_isSet) {
        obj.insert(QString("keepImages"), ::OpenAPI::toJsonValue(m_keep_images));
    }
    if (m_source.isSet()) {
        obj.insert(QString("source"), ::OpenAPI::toJsonValue(m_source));
    }
    return obj;
}

OAIDestination OAIForwardingrule::getDestination() const {
    return m_destination;
}
void OAIForwardingrule::setDestination(const OAIDestination &destination) {
    m_destination = destination;
    m_destination_isSet = true;
}

bool OAIForwardingrule::is_destination_Set() const{
    return m_destination_isSet;
}

bool OAIForwardingrule::is_destination_Valid() const{
    return m_destination_isValid;
}

qint64 OAIForwardingrule::getId() const {
    return m_id;
}
void OAIForwardingrule::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIForwardingrule::is_id_Set() const{
    return m_id_isSet;
}

bool OAIForwardingrule::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIForwardingrule::isKeepImages() const {
    return m_keep_images;
}
void OAIForwardingrule::setKeepImages(const bool &keep_images) {
    m_keep_images = keep_images;
    m_keep_images_isSet = true;
}

bool OAIForwardingrule::is_keep_images_Set() const{
    return m_keep_images_isSet;
}

bool OAIForwardingrule::is_keep_images_Valid() const{
    return m_keep_images_isValid;
}

OAISource OAIForwardingrule::getSource() const {
    return m_source;
}
void OAIForwardingrule::setSource(const OAISource &source) {
    m_source = source;
    m_source_isSet = true;
}

bool OAIForwardingrule::is_source_Set() const{
    return m_source_isSet;
}

bool OAIForwardingrule::is_source_Valid() const{
    return m_source_isValid;
}

bool OAIForwardingrule::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keep_images_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_source.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIForwardingrule::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
