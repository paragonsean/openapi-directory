/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFailedOutgoingTransactionImage.h"
#include "OAIObject.h"
#include "OAIOutgoingTransactionImage.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  token QString [required]
    * @param[in]  transactionid qint64 [required]
    * @param[in]  sequencenumber qint64 [required]
    * @param[in]  totalimagecount qint64 [required]
    * @param[in]  dataset OAIObject [required]
    */
    virtual void transactionsTokenImagePost(const QString &token, const qint64 &transactionid, const qint64 &sequencenumber, const qint64 &totalimagecount, const OAIObject &dataset);

    /**
    * @param[in]  token QString [required]
    * @param[in]  outgoing_entry_and_image_information_block OAIOutgoingTransactionImage [required]
    */
    virtual void transactionsTokenOutgoingDonePost(const QString &token, const OAIOutgoingTransactionImage &outgoing_entry_and_image_information_block);

    /**
    * @param[in]  token QString [required]
    * @param[in]  outgoing_transaction_and_image_and_error_message OAIFailedOutgoingTransactionImage [required]
    */
    virtual void transactionsTokenOutgoingFailedPost(const QString &token, const OAIFailedOutgoingTransactionImage &outgoing_transaction_and_image_and_error_message);

    /**
    * @param[in]  token QString [required]
    * @param[in]  transactionid qint64 [required]
    * @param[in]  imageid qint64 [required]
    */
    virtual void transactionsTokenOutgoingGet(const QString &token, const qint64 &transactionid, const qint64 &imageid);

    /**
    * @param[in]  token QString [required]
    */
    virtual void transactionsTokenOutgoingPollGet(const QString &token);

    /**
    * @param[in]  token QString [required]
    * @param[in]  transactionid qint64 [required]
    */
    virtual void transactionsTokenStatusGet(const QString &token, const qint64 &transactionid);

    /**
    * @param[in]  token QString [required]
    * @param[in]  transactionid qint64 [required]
    * @param[in]  transaction_status QString [required]
    */
    virtual void transactionsTokenStatusPut(const QString &token, const qint64 &transactionid, const QString &transaction_status);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void transactionsTokenImagePostCallback(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingDonePostCallback(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingFailedPostCallback(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingGetCallback(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingPollGetCallback(OAIHttpRequestWorker *worker);
    void transactionsTokenStatusGetCallback(OAIHttpRequestWorker *worker);
    void transactionsTokenStatusPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void transactionsTokenImagePostSignal();
    void transactionsTokenOutgoingDonePostSignal();
    void transactionsTokenOutgoingFailedPostSignal();
    void transactionsTokenOutgoingGetSignal();
    void transactionsTokenOutgoingPollGetSignal(QList<OAIOutgoingTransactionImage> summary);
    void transactionsTokenStatusGetSignal();
    void transactionsTokenStatusPutSignal();


    void transactionsTokenImagePostSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingDonePostSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingFailedPostSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingGetSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTokenOutgoingPollGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIOutgoingTransactionImage> summary);
    void transactionsTokenStatusGetSignalFull(OAIHttpRequestWorker *worker);
    void transactionsTokenStatusPutSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use transactionsTokenImagePostSignalError() instead")
    void transactionsTokenImagePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenImagePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingDonePostSignalError() instead")
    void transactionsTokenOutgoingDonePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingDonePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingFailedPostSignalError() instead")
    void transactionsTokenOutgoingFailedPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingFailedPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingGetSignalError() instead")
    void transactionsTokenOutgoingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingPollGetSignalError() instead")
    void transactionsTokenOutgoingPollGetSignalE(QList<OAIOutgoingTransactionImage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingPollGetSignalError(QList<OAIOutgoingTransactionImage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenStatusGetSignalError() instead")
    void transactionsTokenStatusGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenStatusGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenStatusPutSignalError() instead")
    void transactionsTokenStatusPutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenStatusPutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use transactionsTokenImagePostSignalErrorFull() instead")
    void transactionsTokenImagePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenImagePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingDonePostSignalErrorFull() instead")
    void transactionsTokenOutgoingDonePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingDonePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingFailedPostSignalErrorFull() instead")
    void transactionsTokenOutgoingFailedPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingFailedPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingGetSignalErrorFull() instead")
    void transactionsTokenOutgoingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenOutgoingPollGetSignalErrorFull() instead")
    void transactionsTokenOutgoingPollGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenOutgoingPollGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenStatusGetSignalErrorFull() instead")
    void transactionsTokenStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use transactionsTokenStatusPutSignalErrorFull() instead")
    void transactionsTokenStatusPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void transactionsTokenStatusPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
