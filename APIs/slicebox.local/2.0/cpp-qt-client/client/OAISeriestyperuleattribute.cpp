/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISeriestyperuleattribute.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISeriestyperuleattribute::OAISeriestyperuleattribute(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISeriestyperuleattribute::OAISeriestyperuleattribute() {
    this->initializeModel();
}

OAISeriestyperuleattribute::~OAISeriestyperuleattribute() {}

void OAISeriestyperuleattribute::initializeModel() {

    m_element_isSet = false;
    m_element_isValid = false;

    m_group_isSet = false;
    m_group_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_path_isSet = false;
    m_path_isValid = false;

    m_series_type_rule_id_isSet = false;
    m_series_type_rule_id_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAISeriestyperuleattribute::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISeriestyperuleattribute::fromJsonObject(QJsonObject json) {

    m_element_isValid = ::OpenAPI::fromJsonValue(m_element, json[QString("element")]);
    m_element_isSet = !json[QString("element")].isNull() && m_element_isValid;

    m_group_isValid = ::OpenAPI::fromJsonValue(m_group, json[QString("group")]);
    m_group_isSet = !json[QString("group")].isNull() && m_group_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_path_isValid = ::OpenAPI::fromJsonValue(m_path, json[QString("path")]);
    m_path_isSet = !json[QString("path")].isNull() && m_path_isValid;

    m_series_type_rule_id_isValid = ::OpenAPI::fromJsonValue(m_series_type_rule_id, json[QString("seriesTypeRuleId")]);
    m_series_type_rule_id_isSet = !json[QString("seriesTypeRuleId")].isNull() && m_series_type_rule_id_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAISeriestyperuleattribute::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISeriestyperuleattribute::asJsonObject() const {
    QJsonObject obj;
    if (m_element_isSet) {
        obj.insert(QString("element"), ::OpenAPI::toJsonValue(m_element));
    }
    if (m_group_isSet) {
        obj.insert(QString("group"), ::OpenAPI::toJsonValue(m_group));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_path_isSet) {
        obj.insert(QString("path"), ::OpenAPI::toJsonValue(m_path));
    }
    if (m_series_type_rule_id_isSet) {
        obj.insert(QString("seriesTypeRuleId"), ::OpenAPI::toJsonValue(m_series_type_rule_id));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

qint32 OAISeriestyperuleattribute::getElement() const {
    return m_element;
}
void OAISeriestyperuleattribute::setElement(const qint32 &element) {
    m_element = element;
    m_element_isSet = true;
}

bool OAISeriestyperuleattribute::is_element_Set() const{
    return m_element_isSet;
}

bool OAISeriestyperuleattribute::is_element_Valid() const{
    return m_element_isValid;
}

qint32 OAISeriestyperuleattribute::getGroup() const {
    return m_group;
}
void OAISeriestyperuleattribute::setGroup(const qint32 &group) {
    m_group = group;
    m_group_isSet = true;
}

bool OAISeriestyperuleattribute::is_group_Set() const{
    return m_group_isSet;
}

bool OAISeriestyperuleattribute::is_group_Valid() const{
    return m_group_isValid;
}

qint64 OAISeriestyperuleattribute::getId() const {
    return m_id;
}
void OAISeriestyperuleattribute::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISeriestyperuleattribute::is_id_Set() const{
    return m_id_isSet;
}

bool OAISeriestyperuleattribute::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISeriestyperuleattribute::getPath() const {
    return m_path;
}
void OAISeriestyperuleattribute::setPath(const QString &path) {
    m_path = path;
    m_path_isSet = true;
}

bool OAISeriestyperuleattribute::is_path_Set() const{
    return m_path_isSet;
}

bool OAISeriestyperuleattribute::is_path_Valid() const{
    return m_path_isValid;
}

qint64 OAISeriestyperuleattribute::getSeriesTypeRuleId() const {
    return m_series_type_rule_id;
}
void OAISeriestyperuleattribute::setSeriesTypeRuleId(const qint64 &series_type_rule_id) {
    m_series_type_rule_id = series_type_rule_id;
    m_series_type_rule_id_isSet = true;
}

bool OAISeriestyperuleattribute::is_series_type_rule_id_Set() const{
    return m_series_type_rule_id_isSet;
}

bool OAISeriestyperuleattribute::is_series_type_rule_id_Valid() const{
    return m_series_type_rule_id_isValid;
}

QString OAISeriestyperuleattribute::getValue() const {
    return m_value;
}
void OAISeriestyperuleattribute::setValue(const QString &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAISeriestyperuleattribute::is_value_Set() const{
    return m_value_isSet;
}

bool OAISeriestyperuleattribute::is_value_Valid() const{
    return m_value_isValid;
}

bool OAISeriestyperuleattribute::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_element_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_path_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_series_type_rule_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISeriestyperuleattribute::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_element_isValid && m_group_isValid && m_id_isValid && m_series_type_rule_id_isValid && m_value_isValid && true;
}

} // namespace OpenAPI
