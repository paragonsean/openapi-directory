/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQueryProperty.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQueryProperty::OAIQueryProperty(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQueryProperty::OAIQueryProperty() {
    this->initializeModel();
}

OAIQueryProperty::~OAIQueryProperty() {}

void OAIQueryProperty::initializeModel() {

    m_r_operator_isSet = false;
    m_r_operator_isValid = false;

    m_property_name_isSet = false;
    m_property_name_isValid = false;

    m_property_value_isSet = false;
    m_property_value_isValid = false;
}

void OAIQueryProperty::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQueryProperty::fromJsonObject(QJsonObject json) {

    m_r_operator_isValid = ::OpenAPI::fromJsonValue(m_r_operator, json[QString("operator")]);
    m_r_operator_isSet = !json[QString("operator")].isNull() && m_r_operator_isValid;

    m_property_name_isValid = ::OpenAPI::fromJsonValue(m_property_name, json[QString("propertyName")]);
    m_property_name_isSet = !json[QString("propertyName")].isNull() && m_property_name_isValid;

    m_property_value_isValid = ::OpenAPI::fromJsonValue(m_property_value, json[QString("propertyValue")]);
    m_property_value_isSet = !json[QString("propertyValue")].isNull() && m_property_value_isValid;
}

QString OAIQueryProperty::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQueryProperty::asJsonObject() const {
    QJsonObject obj;
    if (m_r_operator_isSet) {
        obj.insert(QString("operator"), ::OpenAPI::toJsonValue(m_r_operator));
    }
    if (m_property_name_isSet) {
        obj.insert(QString("propertyName"), ::OpenAPI::toJsonValue(m_property_name));
    }
    if (m_property_value_isSet) {
        obj.insert(QString("propertyValue"), ::OpenAPI::toJsonValue(m_property_value));
    }
    return obj;
}

QString OAIQueryProperty::getROperator() const {
    return m_r_operator;
}
void OAIQueryProperty::setROperator(const QString &r_operator) {
    m_r_operator = r_operator;
    m_r_operator_isSet = true;
}

bool OAIQueryProperty::is_r_operator_Set() const{
    return m_r_operator_isSet;
}

bool OAIQueryProperty::is_r_operator_Valid() const{
    return m_r_operator_isValid;
}

QString OAIQueryProperty::getPropertyName() const {
    return m_property_name;
}
void OAIQueryProperty::setPropertyName(const QString &property_name) {
    m_property_name = property_name;
    m_property_name_isSet = true;
}

bool OAIQueryProperty::is_property_name_Set() const{
    return m_property_name_isSet;
}

bool OAIQueryProperty::is_property_name_Valid() const{
    return m_property_name_isValid;
}

QString OAIQueryProperty::getPropertyValue() const {
    return m_property_value;
}
void OAIQueryProperty::setPropertyValue(const QString &property_value) {
    m_property_value = property_value;
    m_property_value_isSet = true;
}

bool OAIQueryProperty::is_property_value_Set() const{
    return m_property_value_isSet;
}

bool OAIQueryProperty::is_property_value_Valid() const{
    return m_property_value_isValid;
}

bool OAIQueryProperty::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_operator_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_property_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQueryProperty::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
