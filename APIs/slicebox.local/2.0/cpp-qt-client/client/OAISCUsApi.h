/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISCUsApi_H
#define OAI_OAISCUsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIScu.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISCUsApi : public QObject {
    Q_OBJECT

public:
    OAISCUsApi(const int timeOut = 0);
    ~OAISCUsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void scusGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void scusIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  imageids QList<qint64> [required]
    */
    virtual void scusIdSendPost(const qint64 &id, const QList<qint64> &imageids);

    /**
    * @param[in]  scu OAIScu [optional]
    */
    virtual void scusPost(const ::OpenAPI::OptionalParam<OAIScu> &scu = ::OpenAPI::OptionalParam<OAIScu>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void scusGetCallback(OAIHttpRequestWorker *worker);
    void scusIdDeleteCallback(OAIHttpRequestWorker *worker);
    void scusIdSendPostCallback(OAIHttpRequestWorker *worker);
    void scusPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void scusGetSignal(QList<OAIScu> summary);
    void scusIdDeleteSignal();
    void scusIdSendPostSignal();
    void scusPostSignal(OAIScu summary);


    void scusGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIScu> summary);
    void scusIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void scusIdSendPostSignalFull(OAIHttpRequestWorker *worker);
    void scusPostSignalFull(OAIHttpRequestWorker *worker, OAIScu summary);

    Q_DECL_DEPRECATED_X("Use scusGetSignalError() instead")
    void scusGetSignalE(QList<OAIScu> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scusGetSignalError(QList<OAIScu> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scusIdDeleteSignalError() instead")
    void scusIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scusIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scusIdSendPostSignalError() instead")
    void scusIdSendPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scusIdSendPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scusPostSignalError() instead")
    void scusPostSignalE(OAIScu summary, QNetworkReply::NetworkError error_type, QString error_str);
    void scusPostSignalError(OAIScu summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use scusGetSignalErrorFull() instead")
    void scusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scusIdDeleteSignalErrorFull() instead")
    void scusIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scusIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scusIdSendPostSignalErrorFull() instead")
    void scusIdSendPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scusIdSendPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scusPostSignalErrorFull() instead")
    void scusPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scusPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
