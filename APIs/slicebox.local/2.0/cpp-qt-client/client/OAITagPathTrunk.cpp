/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITagPathTrunk.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITagPathTrunk::OAITagPathTrunk(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITagPathTrunk::OAITagPathTrunk() {
    this->initializeModel();
}

OAITagPathTrunk::~OAITagPathTrunk() {}

void OAITagPathTrunk::initializeModel() {

    m_item_isSet = false;
    m_item_isValid = false;

    m_previous_isSet = false;
    m_previous_isValid = false;

    m_tag_isSet = false;
    m_tag_isValid = false;
}

void OAITagPathTrunk::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITagPathTrunk::fromJsonObject(QJsonObject json) {

    m_item_isValid = ::OpenAPI::fromJsonValue(m_item, json[QString("item")]);
    m_item_isSet = !json[QString("item")].isNull() && m_item_isValid;

    m_previous_isValid = ::OpenAPI::fromJsonValue(m_previous, json[QString("previous")]);
    m_previous_isSet = !json[QString("previous")].isNull() && m_previous_isValid;

    m_tag_isValid = ::OpenAPI::fromJsonValue(m_tag, json[QString("tag")]);
    m_tag_isSet = !json[QString("tag")].isNull() && m_tag_isValid;
}

QString OAITagPathTrunk::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITagPathTrunk::asJsonObject() const {
    QJsonObject obj;
    if (m_item_isSet) {
        obj.insert(QString("item"), ::OpenAPI::toJsonValue(m_item));
    }
    if (m_previous.isSet()) {
        obj.insert(QString("previous"), ::OpenAPI::toJsonValue(m_previous));
    }
    if (m_tag_isSet) {
        obj.insert(QString("tag"), ::OpenAPI::toJsonValue(m_tag));
    }
    return obj;
}

QString OAITagPathTrunk::getItem() const {
    return m_item;
}
void OAITagPathTrunk::setItem(const QString &item) {
    m_item = item;
    m_item_isSet = true;
}

bool OAITagPathTrunk::is_item_Set() const{
    return m_item_isSet;
}

bool OAITagPathTrunk::is_item_Valid() const{
    return m_item_isValid;
}

OAITagPathTrunk OAITagPathTrunk::getPrevious() const {
    return m_previous;
}
void OAITagPathTrunk::setPrevious(const OAITagPathTrunk &previous) {
    m_previous = previous;
    m_previous_isSet = true;
}

bool OAITagPathTrunk::is_previous_Set() const{
    return m_previous_isSet;
}

bool OAITagPathTrunk::is_previous_Valid() const{
    return m_previous_isValid;
}

qint32 OAITagPathTrunk::getTag() const {
    return m_tag;
}
void OAITagPathTrunk::setTag(const qint32 &tag) {
    m_tag = tag;
    m_tag_isSet = true;
}

bool OAITagPathTrunk::is_tag_Set() const{
    return m_tag_isSet;
}

bool OAITagPathTrunk::is_tag_Valid() const{
    return m_tag_isValid;
}

bool OAITagPathTrunk::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_item_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previous.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tag_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITagPathTrunk::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
