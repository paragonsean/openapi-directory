/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDestination.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDestination::OAIDestination(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDestination::OAIDestination() {
    this->initializeModel();
}

OAIDestination::~OAIDestination() {}

void OAIDestination::initializeModel() {

    m_destination_id_isSet = false;
    m_destination_id_isValid = false;

    m_destination_name_isSet = false;
    m_destination_name_isValid = false;

    m_destination_type_isSet = false;
    m_destination_type_isValid = false;
}

void OAIDestination::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDestination::fromJsonObject(QJsonObject json) {

    m_destination_id_isValid = ::OpenAPI::fromJsonValue(m_destination_id, json[QString("destinationId")]);
    m_destination_id_isSet = !json[QString("destinationId")].isNull() && m_destination_id_isValid;

    m_destination_name_isValid = ::OpenAPI::fromJsonValue(m_destination_name, json[QString("destinationName")]);
    m_destination_name_isSet = !json[QString("destinationName")].isNull() && m_destination_name_isValid;

    m_destination_type_isValid = ::OpenAPI::fromJsonValue(m_destination_type, json[QString("destinationType")]);
    m_destination_type_isSet = !json[QString("destinationType")].isNull() && m_destination_type_isValid;
}

QString OAIDestination::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDestination::asJsonObject() const {
    QJsonObject obj;
    if (m_destination_id_isSet) {
        obj.insert(QString("destinationId"), ::OpenAPI::toJsonValue(m_destination_id));
    }
    if (m_destination_name_isSet) {
        obj.insert(QString("destinationName"), ::OpenAPI::toJsonValue(m_destination_name));
    }
    if (m_destination_type_isSet) {
        obj.insert(QString("destinationType"), ::OpenAPI::toJsonValue(m_destination_type));
    }
    return obj;
}

qint64 OAIDestination::getDestinationId() const {
    return m_destination_id;
}
void OAIDestination::setDestinationId(const qint64 &destination_id) {
    m_destination_id = destination_id;
    m_destination_id_isSet = true;
}

bool OAIDestination::is_destination_id_Set() const{
    return m_destination_id_isSet;
}

bool OAIDestination::is_destination_id_Valid() const{
    return m_destination_id_isValid;
}

QString OAIDestination::getDestinationName() const {
    return m_destination_name;
}
void OAIDestination::setDestinationName(const QString &destination_name) {
    m_destination_name = destination_name;
    m_destination_name_isSet = true;
}

bool OAIDestination::is_destination_name_Set() const{
    return m_destination_name_isSet;
}

bool OAIDestination::is_destination_name_Valid() const{
    return m_destination_name_isValid;
}

QString OAIDestination::getDestinationType() const {
    return m_destination_type;
}
void OAIDestination::setDestinationType(const QString &destination_type) {
    m_destination_type = destination_type;
    m_destination_type_isSet = true;
}

bool OAIDestination::is_destination_type_Set() const{
    return m_destination_type_isSet;
}

bool OAIDestination::is_destination_type_Valid() const{
    return m_destination_type_isValid;
}

bool OAIDestination::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_destination_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_destination_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDestination::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
