/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIFilteringApi_H
#define OAI_OAIFilteringApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIFilter.h"
#include "OAISourceTagFilter.h"
#include "OAITagPathTag.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIFilteringApi : public QObject {
    Q_OBJECT

public:
    OAIFilteringApi(const int timeOut = 0);
    ~OAIFilteringApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void filteringAssociationsGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void filteringAssociationsIdDelete(const qint64 &id);

    /**
    * @param[in]  sourcetagfilter OAISourceTagFilter [required]
    */
    virtual void filteringAssociationsPost(const OAISourceTagFilter &sourcetagfilter);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void filteringFiltersGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void filteringFiltersIdDelete(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void filteringFiltersIdTagpathsGet(const qint64 &id);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  tagpath OAITagPathTag [required]
    */
    virtual void filteringFiltersIdTagpathsPost(const qint64 &id, const OAITagPathTag &tagpath);

    /**
    * @param[in]  id qint64 [required]
    * @param[in]  tagpathid qint64 [required]
    */
    virtual void filteringFiltersIdTagpathsTagpathidDelete(const qint64 &id, const qint64 &tagpathid);

    /**
    * @param[in]  tag_filter OAIFilter [required]
    */
    virtual void filteringFiltersPost(const OAIFilter &tag_filter);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void filteringAssociationsGetCallback(OAIHttpRequestWorker *worker);
    void filteringAssociationsIdDeleteCallback(OAIHttpRequestWorker *worker);
    void filteringAssociationsPostCallback(OAIHttpRequestWorker *worker);
    void filteringFiltersGetCallback(OAIHttpRequestWorker *worker);
    void filteringFiltersIdDeleteCallback(OAIHttpRequestWorker *worker);
    void filteringFiltersIdTagpathsGetCallback(OAIHttpRequestWorker *worker);
    void filteringFiltersIdTagpathsPostCallback(OAIHttpRequestWorker *worker);
    void filteringFiltersIdTagpathsTagpathidDeleteCallback(OAIHttpRequestWorker *worker);
    void filteringFiltersPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void filteringAssociationsGetSignal(QList<OAISourceTagFilter> summary);
    void filteringAssociationsIdDeleteSignal();
    void filteringAssociationsPostSignal();
    void filteringFiltersGetSignal(QList<OAIFilter> summary);
    void filteringFiltersIdDeleteSignal();
    void filteringFiltersIdTagpathsGetSignal(QList<OAITagPathTag> summary);
    void filteringFiltersIdTagpathsPostSignal();
    void filteringFiltersIdTagpathsTagpathidDeleteSignal();
    void filteringFiltersPostSignal();


    void filteringAssociationsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAISourceTagFilter> summary);
    void filteringAssociationsIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void filteringAssociationsPostSignalFull(OAIHttpRequestWorker *worker);
    void filteringFiltersGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIFilter> summary);
    void filteringFiltersIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void filteringFiltersIdTagpathsGetSignalFull(OAIHttpRequestWorker *worker, QList<OAITagPathTag> summary);
    void filteringFiltersIdTagpathsPostSignalFull(OAIHttpRequestWorker *worker);
    void filteringFiltersIdTagpathsTagpathidDeleteSignalFull(OAIHttpRequestWorker *worker);
    void filteringFiltersPostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use filteringAssociationsGetSignalError() instead")
    void filteringAssociationsGetSignalE(QList<OAISourceTagFilter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringAssociationsGetSignalError(QList<OAISourceTagFilter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringAssociationsIdDeleteSignalError() instead")
    void filteringAssociationsIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filteringAssociationsIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringAssociationsPostSignalError() instead")
    void filteringAssociationsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filteringAssociationsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersGetSignalError() instead")
    void filteringFiltersGetSignalE(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersGetSignalError(QList<OAIFilter> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdDeleteSignalError() instead")
    void filteringFiltersIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdTagpathsGetSignalError() instead")
    void filteringFiltersIdTagpathsGetSignalE(QList<OAITagPathTag> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdTagpathsGetSignalError(QList<OAITagPathTag> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdTagpathsPostSignalError() instead")
    void filteringFiltersIdTagpathsPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdTagpathsPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdTagpathsTagpathidDeleteSignalError() instead")
    void filteringFiltersIdTagpathsTagpathidDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdTagpathsTagpathidDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersPostSignalError() instead")
    void filteringFiltersPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use filteringAssociationsGetSignalErrorFull() instead")
    void filteringAssociationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringAssociationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringAssociationsIdDeleteSignalErrorFull() instead")
    void filteringAssociationsIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringAssociationsIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringAssociationsPostSignalErrorFull() instead")
    void filteringAssociationsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringAssociationsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersGetSignalErrorFull() instead")
    void filteringFiltersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdDeleteSignalErrorFull() instead")
    void filteringFiltersIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdTagpathsGetSignalErrorFull() instead")
    void filteringFiltersIdTagpathsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdTagpathsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdTagpathsPostSignalErrorFull() instead")
    void filteringFiltersIdTagpathsPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdTagpathsPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersIdTagpathsTagpathidDeleteSignalErrorFull() instead")
    void filteringFiltersIdTagpathsTagpathidDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersIdTagpathsTagpathidDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use filteringFiltersPostSignalErrorFull() instead")
    void filteringFiltersPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void filteringFiltersPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
