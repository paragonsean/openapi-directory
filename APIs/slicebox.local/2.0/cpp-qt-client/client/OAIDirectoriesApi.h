/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDirectoriesApi_H
#define OAI_OAIDirectoriesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIWatchedDirectory.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDirectoriesApi : public QObject {
    Q_OBJECT

public:
    OAIDirectoriesApi(const int timeOut = 0);
    ~OAIDirectoriesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  startindex qint64 [optional]
    * @param[in]  count qint64 [optional]
    */
    virtual void directorywatchesGet(const ::OpenAPI::OptionalParam<qint64> &startindex = ::OpenAPI::OptionalParam<qint64>(), const ::OpenAPI::OptionalParam<qint64> &count = ::OpenAPI::OptionalParam<qint64>());

    /**
    * @param[in]  id qint64 [required]
    */
    virtual void directorywatchesIdDelete(const qint64 &id);

    /**
    * @param[in]  watched_directory OAIWatchedDirectory [optional]
    */
    virtual void directorywatchesPost(const ::OpenAPI::OptionalParam<OAIWatchedDirectory> &watched_directory = ::OpenAPI::OptionalParam<OAIWatchedDirectory>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void directorywatchesGetCallback(OAIHttpRequestWorker *worker);
    void directorywatchesIdDeleteCallback(OAIHttpRequestWorker *worker);
    void directorywatchesPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void directorywatchesGetSignal(QList<OAIWatchedDirectory> summary);
    void directorywatchesIdDeleteSignal();
    void directorywatchesPostSignal(OAIWatchedDirectory summary);


    void directorywatchesGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIWatchedDirectory> summary);
    void directorywatchesIdDeleteSignalFull(OAIHttpRequestWorker *worker);
    void directorywatchesPostSignalFull(OAIHttpRequestWorker *worker, OAIWatchedDirectory summary);

    Q_DECL_DEPRECATED_X("Use directorywatchesGetSignalError() instead")
    void directorywatchesGetSignalE(QList<OAIWatchedDirectory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void directorywatchesGetSignalError(QList<OAIWatchedDirectory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directorywatchesIdDeleteSignalError() instead")
    void directorywatchesIdDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void directorywatchesIdDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directorywatchesPostSignalError() instead")
    void directorywatchesPostSignalE(OAIWatchedDirectory summary, QNetworkReply::NetworkError error_type, QString error_str);
    void directorywatchesPostSignalError(OAIWatchedDirectory summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use directorywatchesGetSignalErrorFull() instead")
    void directorywatchesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directorywatchesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directorywatchesIdDeleteSignalErrorFull() instead")
    void directorywatchesIdDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directorywatchesIdDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use directorywatchesPostSignalErrorFull() instead")
    void directorywatchesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void directorywatchesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
