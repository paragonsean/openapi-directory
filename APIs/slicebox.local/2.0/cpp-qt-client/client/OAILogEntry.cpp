/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILogEntry.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILogEntry::OAILogEntry(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILogEntry::OAILogEntry() {
    this->initializeModel();
}

OAILogEntry::~OAILogEntry() {}

void OAILogEntry::initializeModel() {

    m_created_isSet = false;
    m_created_isValid = false;

    m_entry_type_isSet = false;
    m_entry_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_subject_isSet = false;
    m_subject_isValid = false;
}

void OAILogEntry::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILogEntry::fromJsonObject(QJsonObject json) {

    m_created_isValid = ::OpenAPI::fromJsonValue(m_created, json[QString("created")]);
    m_created_isSet = !json[QString("created")].isNull() && m_created_isValid;

    m_entry_type_isValid = ::OpenAPI::fromJsonValue(m_entry_type, json[QString("entryType")]);
    m_entry_type_isSet = !json[QString("entryType")].isNull() && m_entry_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_subject_isValid = ::OpenAPI::fromJsonValue(m_subject, json[QString("subject")]);
    m_subject_isSet = !json[QString("subject")].isNull() && m_subject_isValid;
}

QString OAILogEntry::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILogEntry::asJsonObject() const {
    QJsonObject obj;
    if (m_created_isSet) {
        obj.insert(QString("created"), ::OpenAPI::toJsonValue(m_created));
    }
    if (m_entry_type_isSet) {
        obj.insert(QString("entryType"), ::OpenAPI::toJsonValue(m_entry_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_subject_isSet) {
        obj.insert(QString("subject"), ::OpenAPI::toJsonValue(m_subject));
    }
    return obj;
}

qint64 OAILogEntry::getCreated() const {
    return m_created;
}
void OAILogEntry::setCreated(const qint64 &created) {
    m_created = created;
    m_created_isSet = true;
}

bool OAILogEntry::is_created_Set() const{
    return m_created_isSet;
}

bool OAILogEntry::is_created_Valid() const{
    return m_created_isValid;
}

QString OAILogEntry::getEntryType() const {
    return m_entry_type;
}
void OAILogEntry::setEntryType(const QString &entry_type) {
    m_entry_type = entry_type;
    m_entry_type_isSet = true;
}

bool OAILogEntry::is_entry_type_Set() const{
    return m_entry_type_isSet;
}

bool OAILogEntry::is_entry_type_Valid() const{
    return m_entry_type_isValid;
}

qint64 OAILogEntry::getId() const {
    return m_id;
}
void OAILogEntry::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILogEntry::is_id_Set() const{
    return m_id_isSet;
}

bool OAILogEntry::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILogEntry::getMessage() const {
    return m_message;
}
void OAILogEntry::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAILogEntry::is_message_Set() const{
    return m_message_isSet;
}

bool OAILogEntry::is_message_Valid() const{
    return m_message_isValid;
}

QString OAILogEntry::getSubject() const {
    return m_subject;
}
void OAILogEntry::setSubject(const QString &subject) {
    m_subject = subject;
    m_subject_isSet = true;
}

bool OAILogEntry::is_subject_Set() const{
    return m_subject_isSet;
}

bool OAILogEntry::is_subject_Valid() const{
    return m_subject_isValid;
}

bool OAILogEntry::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_entry_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subject_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILogEntry::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
