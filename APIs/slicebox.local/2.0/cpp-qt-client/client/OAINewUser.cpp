/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewUser::OAINewUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewUser::OAINewUser() {
    this->initializeModel();
}

OAINewUser::~OAINewUser() {}

void OAINewUser::initializeModel() {

    m_password_isSet = false;
    m_password_isValid = false;

    m_role_isSet = false;
    m_role_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAINewUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewUser::fromJsonObject(QJsonObject json) {

    m_password_isValid = ::OpenAPI::fromJsonValue(m_password, json[QString("password")]);
    m_password_isSet = !json[QString("password")].isNull() && m_password_isValid;

    m_role_isValid = ::OpenAPI::fromJsonValue(m_role, json[QString("role")]);
    m_role_isSet = !json[QString("role")].isNull() && m_role_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAINewUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewUser::asJsonObject() const {
    QJsonObject obj;
    if (m_password_isSet) {
        obj.insert(QString("password"), ::OpenAPI::toJsonValue(m_password));
    }
    if (m_role_isSet) {
        obj.insert(QString("role"), ::OpenAPI::toJsonValue(m_role));
    }
    if (m_user_isSet) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAINewUser::getPassword() const {
    return m_password;
}
void OAINewUser::setPassword(const QString &password) {
    m_password = password;
    m_password_isSet = true;
}

bool OAINewUser::is_password_Set() const{
    return m_password_isSet;
}

bool OAINewUser::is_password_Valid() const{
    return m_password_isValid;
}

QString OAINewUser::getRole() const {
    return m_role;
}
void OAINewUser::setRole(const QString &role) {
    m_role = role;
    m_role_isSet = true;
}

bool OAINewUser::is_role_Set() const{
    return m_role_isSet;
}

bool OAINewUser::is_role_Valid() const{
    return m_role_isValid;
}

QString OAINewUser::getUser() const {
    return m_user;
}
void OAINewUser::setUser(const QString &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAINewUser::is_user_Set() const{
    return m_user_isSet;
}

bool OAINewUser::is_user_Valid() const{
    return m_user_isValid;
}

bool OAINewUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_password_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
