/**
 * Slicebox API
 * Slicebox - safe sharing of medical images
 *
 * The version of the OpenAPI document: 2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIFlatSeries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIFlatSeries::OAIFlatSeries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIFlatSeries::OAIFlatSeries() {
    this->initializeModel();
}

OAIFlatSeries::~OAIFlatSeries() {}

void OAIFlatSeries::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_patient_isSet = false;
    m_patient_isValid = false;

    m_series_isSet = false;
    m_series_isValid = false;

    m_study_isSet = false;
    m_study_isValid = false;
}

void OAIFlatSeries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIFlatSeries::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_patient_isValid = ::OpenAPI::fromJsonValue(m_patient, json[QString("patient")]);
    m_patient_isSet = !json[QString("patient")].isNull() && m_patient_isValid;

    m_series_isValid = ::OpenAPI::fromJsonValue(m_series, json[QString("series")]);
    m_series_isSet = !json[QString("series")].isNull() && m_series_isValid;

    m_study_isValid = ::OpenAPI::fromJsonValue(m_study, json[QString("study")]);
    m_study_isSet = !json[QString("study")].isNull() && m_study_isValid;
}

QString OAIFlatSeries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIFlatSeries::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_patient.isSet()) {
        obj.insert(QString("patient"), ::OpenAPI::toJsonValue(m_patient));
    }
    if (m_series.isSet()) {
        obj.insert(QString("series"), ::OpenAPI::toJsonValue(m_series));
    }
    if (m_study.isSet()) {
        obj.insert(QString("study"), ::OpenAPI::toJsonValue(m_study));
    }
    return obj;
}

qint64 OAIFlatSeries::getId() const {
    return m_id;
}
void OAIFlatSeries::setId(const qint64 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIFlatSeries::is_id_Set() const{
    return m_id_isSet;
}

bool OAIFlatSeries::is_id_Valid() const{
    return m_id_isValid;
}

OAIPatient OAIFlatSeries::getPatient() const {
    return m_patient;
}
void OAIFlatSeries::setPatient(const OAIPatient &patient) {
    m_patient = patient;
    m_patient_isSet = true;
}

bool OAIFlatSeries::is_patient_Set() const{
    return m_patient_isSet;
}

bool OAIFlatSeries::is_patient_Valid() const{
    return m_patient_isValid;
}

OAISeries OAIFlatSeries::getSeries() const {
    return m_series;
}
void OAIFlatSeries::setSeries(const OAISeries &series) {
    m_series = series;
    m_series_isSet = true;
}

bool OAIFlatSeries::is_series_Set() const{
    return m_series_isSet;
}

bool OAIFlatSeries::is_series_Valid() const{
    return m_series_isValid;
}

OAIStudy OAIFlatSeries::getStudy() const {
    return m_study;
}
void OAIFlatSeries::setStudy(const OAIStudy &study) {
    m_study = study;
    m_study_isSet = true;
}

bool OAIFlatSeries::is_study_Set() const{
    return m_study_isSet;
}

bool OAIFlatSeries::is_study_Valid() const{
    return m_study_isValid;
}

bool OAIFlatSeries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_patient.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_series.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_study.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIFlatSeries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
