/*
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QshowApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QshowApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QshowApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for qshowDelete
     * @param id Qshow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling qshowDelete(Async)");
        }

        return qshowDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete a qshow. 
     * @param id Qshow ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowDelete(String id) throws ApiException {
        qshowDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete a qshow. 
     * @param id Qshow ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = qshowDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a qshow. 
     * @param id Qshow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowGet
     * @param id Qshow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling qshowGet(Async)");
        }

        return qshowGetCall(id, _callback);

    }

    /**
     * 
     * Gets a details about a qshow. 
     * @param id Qshow ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowGet(String id) throws ApiException {
        qshowGetWithHttpInfo(id);
    }

    /**
     * 
     * Gets a details about a qshow. 
     * @param id Qshow ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = qshowGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a details about a qshow. 
     * @param id Qshow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowListGet
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param _public Should include public qshows or not in the list (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowListGetCall(Integer start, Boolean _public, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (_public != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("public", _public));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowListGetValidateBeforeCall(Integer start, Boolean _public, final ApiCallback _callback) throws ApiException {
        return qshowListGetCall(start, _public, _callback);

    }

    /**
     * 
     * Get the list of Qshows in They Said So platform.
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param _public Should include public qshows or not in the list (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowListGet(Integer start, Boolean _public) throws ApiException {
        qshowListGetWithHttpInfo(start, _public);
    }

    /**
     * 
     * Get the list of Qshows in They Said So platform.
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param _public Should include public qshows or not in the list (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowListGetWithHttpInfo(Integer start, Boolean _public) throws ApiException {
        okhttp3.Call localVarCall = qshowListGetValidateBeforeCall(start, _public, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the list of Qshows in They Said So platform.
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param _public Should include public qshows or not in the list (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowListGetAsync(Integer start, Boolean _public, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowListGetValidateBeforeCall(start, _public, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowPatch
     * @param id Qshow ID (required)
     * @param title Qshow title (optional)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowPatchCall(String id, String title, String description, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowPatchValidateBeforeCall(String id, String title, String description, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling qshowPatch(Async)");
        }

        return qshowPatchCall(id, title, description, tags, _callback);

    }

    /**
     * 
     * Update an existing qshow.
     * @param id Qshow ID (required)
     * @param title Qshow title (optional)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowPatch(String id, String title, String description, List<String> tags) throws ApiException {
        qshowPatchWithHttpInfo(id, title, description, tags);
    }

    /**
     * 
     * Update an existing qshow.
     * @param id Qshow ID (required)
     * @param title Qshow title (optional)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowPatchWithHttpInfo(String id, String title, String description, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = qshowPatchValidateBeforeCall(id, title, description, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Update an existing qshow.
     * @param id Qshow ID (required)
     * @param title Qshow title (optional)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowPatchAsync(String id, String title, String description, List<String> tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowPatchValidateBeforeCall(id, title, description, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowPut
     * @param title Qshow title (required)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowPutCall(String title, String description, List<String> tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (title != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("title", title));
        }

        if (description != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("description", description));
        }

        if (tags != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowPutValidateBeforeCall(String title, String description, List<String> tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'title' is set
        if (title == null) {
            throw new ApiException("Missing the required parameter 'title' when calling qshowPut(Async)");
        }

        return qshowPutCall(title, description, tags, _callback);

    }

    /**
     * 
     * Create and add a new qshow to your private collection.
     * @param title Qshow title (required)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowPut(String title, String description, List<String> tags) throws ApiException {
        qshowPutWithHttpInfo(title, description, tags);
    }

    /**
     * 
     * Create and add a new qshow to your private collection.
     * @param title Qshow title (required)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowPutWithHttpInfo(String title, String description, List<String> tags) throws ApiException {
        okhttp3.Call localVarCall = qshowPutValidateBeforeCall(title, description, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create and add a new qshow to your private collection.
     * @param title Qshow title (required)
     * @param description Qshow description (optional)
     * @param tags Tags for the qshow (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowPutAsync(String title, String description, List<String> tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowPutValidateBeforeCall(title, description, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowQuotesAddPost
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to add the qshow collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowQuotesAddPostCall(String id, String quoteid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow/quotes/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (quoteid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteid", quoteid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowQuotesAddPostValidateBeforeCall(String id, String quoteid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling qshowQuotesAddPost(Async)");
        }

        // verify the required parameter 'quoteid' is set
        if (quoteid == null) {
            throw new ApiException("Missing the required parameter 'quoteid' when calling qshowQuotesAddPost(Async)");
        }

        return qshowQuotesAddPostCall(id, quoteid, _callback);

    }

    /**
     * 
     * Add a quote to a given Qshow.
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to add the qshow collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowQuotesAddPost(String id, String quoteid) throws ApiException {
        qshowQuotesAddPostWithHttpInfo(id, quoteid);
    }

    /**
     * 
     * Add a quote to a given Qshow.
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to add the qshow collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowQuotesAddPostWithHttpInfo(String id, String quoteid) throws ApiException {
        okhttp3.Call localVarCall = qshowQuotesAddPostValidateBeforeCall(id, quoteid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a quote to a given Qshow.
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to add the qshow collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowQuotesAddPostAsync(String id, String quoteid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowQuotesAddPostValidateBeforeCall(id, quoteid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowQuotesGet
     * @param id Qshow ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowQuotesGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow/quotes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowQuotesGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling qshowQuotesGet(Async)");
        }

        return qshowQuotesGetCall(id, _callback);

    }

    /**
     * 
     * Get the quotes in a given Qshow.
     * @param id Qshow ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowQuotesGet(String id) throws ApiException {
        qshowQuotesGetWithHttpInfo(id);
    }

    /**
     * 
     * Get the quotes in a given Qshow.
     * @param id Qshow ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowQuotesGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = qshowQuotesGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Get the quotes in a given Qshow.
     * @param id Qshow ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowQuotesGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowQuotesGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qshowQuotesRemovePost
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to remove from the qshow collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowQuotesRemovePostCall(String id, String quoteid, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qshow/quotes/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (quoteid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quoteid", quoteid));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qshowQuotesRemovePostValidateBeforeCall(String id, String quoteid, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling qshowQuotesRemovePost(Async)");
        }

        // verify the required parameter 'quoteid' is set
        if (quoteid == null) {
            throw new ApiException("Missing the required parameter 'quoteid' when calling qshowQuotesRemovePost(Async)");
        }

        return qshowQuotesRemovePostCall(id, quoteid, _callback);

    }

    /**
     * 
     * Remove a quote to a given Qshow.
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to remove from the qshow collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void qshowQuotesRemovePost(String id, String quoteid) throws ApiException {
        qshowQuotesRemovePostWithHttpInfo(id, quoteid);
    }

    /**
     * 
     * Remove a quote to a given Qshow.
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to remove from the qshow collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qshowQuotesRemovePostWithHttpInfo(String id, String quoteid) throws ApiException {
        okhttp3.Call localVarCall = qshowQuotesRemovePostValidateBeforeCall(id, quoteid, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a quote to a given Qshow.
     * @param id Qshow ID (required)
     * @param quoteid Quote ID to remove from the qshow collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qshowQuotesRemovePostAsync(String id, String quoteid, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qshowQuotesRemovePostValidateBeforeCall(id, quoteid, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
