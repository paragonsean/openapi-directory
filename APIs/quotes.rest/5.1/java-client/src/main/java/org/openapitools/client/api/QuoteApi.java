/*
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QuoteResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuoteApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuoteApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuoteApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for quoteAuthorsPopularGet
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteAuthorsPopularGetCall(String language, Boolean detailed, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/authors/popular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteAuthorsPopularGetValidateBeforeCall(String language, Boolean detailed, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        return quoteAuthorsPopularGetCall(language, detailed, start, limit, _callback);

    }

    /**
     * 
     * Gets a list of popular author names in the system.  
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteAuthorsPopularGet(String language, Boolean detailed, Integer start, Integer limit) throws ApiException {
        quoteAuthorsPopularGetWithHttpInfo(language, detailed, start, limit);
    }

    /**
     * 
     * Gets a list of popular author names in the system.  
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteAuthorsPopularGetWithHttpInfo(String language, Boolean detailed, Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = quoteAuthorsPopularGetValidateBeforeCall(language, detailed, start, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a list of popular author names in the system.  
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteAuthorsPopularGetAsync(String language, Boolean detailed, Integer start, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteAuthorsPopularGetValidateBeforeCall(language, detailed, start, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteAuthorsSearchGet
     * @param query Text string to search for in author names (optional)
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteAuthorsSearchGetCall(String query, String language, Boolean detailed, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/authors/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteAuthorsSearchGetValidateBeforeCall(String query, String language, Boolean detailed, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        return quoteAuthorsSearchGetCall(query, language, detailed, start, limit, _callback);

    }

    /**
     * 
     * Gets a list of author names in the system.  
     * @param query Text string to search for in author names (optional)
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 1)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteAuthorsSearchGet(String query, String language, Boolean detailed, Integer start, Integer limit) throws ApiException {
        quoteAuthorsSearchGetWithHttpInfo(query, language, detailed, start, limit);
    }

    /**
     * 
     * Gets a list of author names in the system.  
     * @param query Text string to search for in author names (optional)
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 1)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteAuthorsSearchGetWithHttpInfo(String query, String language, Boolean detailed, Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = quoteAuthorsSearchGetValidateBeforeCall(query, language, detailed, start, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a list of author names in the system.  
     * @param query Text string to search for in author names (optional)
     * @param language Language. A same author may have quotes in two or more different languages. So for example &#39;Mahatma Gandhi&#39; may be returned for language \&quot;en\&quot;(English), and \&quot;மஹாத்மா காந்தி\&quot; may be returned when the language is \&quot;ta\&quot; (Tamil). (optional, default to en)
     * @param detailed Should return detailed author information such as &#x60;birthday&#x60;, &#x60;death date&#x60;, &#x60;occupation&#x60;, &#x60;description&#x60; etc. Only available at certain subscription levels. (optional, default to false)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteAuthorsSearchGetAsync(String query, String language, Boolean detailed, Integer start, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteAuthorsSearchGetValidateBeforeCall(query, language, detailed, start, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteBookmarkToggleGet
     * @param quoteId Quote ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteBookmarkToggleGetCall(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/bookmark/toggle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quote_id", quoteId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteBookmarkToggleGetValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling quoteBookmarkToggleGet(Async)");
        }

        return quoteBookmarkToggleGetCall(quoteId, _callback);

    }

    /**
     * 
     * Toggle the user bookmark of the given Quote as a user of the API Key.
     * @param quoteId Quote ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteBookmarkToggleGet(String quoteId) throws ApiException {
        quoteBookmarkToggleGetWithHttpInfo(quoteId);
    }

    /**
     * 
     * Toggle the user bookmark of the given Quote as a user of the API Key.
     * @param quoteId Quote ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteBookmarkToggleGetWithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = quoteBookmarkToggleGetValidateBeforeCall(quoteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Toggle the user bookmark of the given Quote as a user of the API Key.
     * @param quoteId Quote ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteBookmarkToggleGetAsync(String quoteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteBookmarkToggleGetValidateBeforeCall(quoteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteCategoriesPopularGet
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteCategoriesPopularGetCall(Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/categories/popular";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteCategoriesPopularGetValidateBeforeCall(Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        return quoteCategoriesPopularGetCall(start, limit, _callback);

    }

    /**
     * 
     * Gets a list of popular &#x60;Quote&#x60; Categories. 
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteCategoriesPopularGet(Integer start, Integer limit) throws ApiException {
        quoteCategoriesPopularGetWithHttpInfo(start, limit);
    }

    /**
     * 
     * Gets a list of popular &#x60;Quote&#x60; Categories. 
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteCategoriesPopularGetWithHttpInfo(Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = quoteCategoriesPopularGetValidateBeforeCall(start, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a list of popular &#x60;Quote&#x60; Categories. 
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 5)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteCategoriesPopularGetAsync(Integer start, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteCategoriesPopularGetValidateBeforeCall(start, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteCategoriesSearchGet
     * @param query Text string to search for in the categories (optional, default to 0)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 2)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteCategoriesSearchGetCall(String query, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/categories/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteCategoriesSearchGetValidateBeforeCall(String query, Integer start, Integer limit, final ApiCallback _callback) throws ApiException {
        return quoteCategoriesSearchGetCall(query, start, limit, _callback);

    }

    /**
     * 
     * Gets a list of &#x60;Quote&#x60; Categories matching the query string. 
     * @param query Text string to search for in the categories (optional, default to 0)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 2)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteCategoriesSearchGet(String query, Integer start, Integer limit) throws ApiException {
        quoteCategoriesSearchGetWithHttpInfo(query, start, limit);
    }

    /**
     * 
     * Gets a list of &#x60;Quote&#x60; Categories matching the query string. 
     * @param query Text string to search for in the categories (optional, default to 0)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 2)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteCategoriesSearchGetWithHttpInfo(String query, Integer start, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = quoteCategoriesSearchGetValidateBeforeCall(query, start, limit, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a list of &#x60;Quote&#x60; Categories matching the query string. 
     * @param query Text string to search for in the categories (optional, default to 0)
     * @param start Response is paged. This parameter controls where response starts the listing at (optional, default to 0)
     * @param limit Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level. (optional, default to 2)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteCategoriesSearchGetAsync(String query, Integer start, Integer limit, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteCategoriesSearchGetValidateBeforeCall(query, start, limit, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteGet
     * @param id Quote ID (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        return quoteGetCall(id, _callback);

    }

    /**
     * 
     * Gets a &#x60;Quote&#x60; with a given &#x60;id&#x60;.
     * @param id Quote ID (optional)
     * @return QuoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public QuoteResponse quoteGet(String id) throws ApiException {
        ApiResponse<QuoteResponse> localVarResp = quoteGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a &#x60;Quote&#x60; with a given &#x60;id&#x60;.
     * @param id Quote ID (optional)
     * @return ApiResponse&lt;QuoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteResponse> quoteGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = quoteGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a &#x60;Quote&#x60; with a given &#x60;id&#x60;.
     * @param id Quote ID (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteGetAsync(String id, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteLikeToggleGet
     * @param quoteId Quote ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteLikeToggleGetCall(String quoteId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/like/toggle";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quote_id", quoteId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteLikeToggleGetValidateBeforeCall(String quoteId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling quoteLikeToggleGet(Async)");
        }

        return quoteLikeToggleGetCall(quoteId, _callback);

    }

    /**
     * 
     * Toggle the user like of the given Quote as a user of the API Key.
     * @param quoteId Quote ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteLikeToggleGet(String quoteId) throws ApiException {
        quoteLikeToggleGetWithHttpInfo(quoteId);
    }

    /**
     * 
     * Toggle the user like of the given Quote as a user of the API Key.
     * @param quoteId Quote ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteLikeToggleGetWithHttpInfo(String quoteId) throws ApiException {
        okhttp3.Call localVarCall = quoteLikeToggleGetValidateBeforeCall(quoteId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Toggle the user like of the given Quote as a user of the API Key.
     * @param quoteId Quote ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteLikeToggleGetAsync(String quoteId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteLikeToggleGetValidateBeforeCall(quoteId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteRandomGet
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteRandomGetCall(String language, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/random";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteRandomGetValidateBeforeCall(String language, Integer limit, final ApiCallback _callback) throws ApiException {
        return quoteRandomGetCall(language, limit, _callback);

    }

    /**
     * 
     * Gets a &#x60;Random Quote&#x60;. When you are in a hurry this is what you call to get a random famous quote.
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @return QuoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public QuoteResponse quoteRandomGet(String language, Integer limit) throws ApiException {
        ApiResponse<QuoteResponse> localVarResp = quoteRandomGetWithHttpInfo(language, limit);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets a &#x60;Random Quote&#x60;. When you are in a hurry this is what you call to get a random famous quote.
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @return ApiResponse&lt;QuoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteResponse> quoteRandomGetWithHttpInfo(String language, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = quoteRandomGetValidateBeforeCall(language, limit, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets a &#x60;Random Quote&#x60;. When you are in a hurry this is what you call to get a random famous quote.
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteRandomGetAsync(String language, Integer limit, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteRandomGetValidateBeforeCall(language, limit, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteSearchGet
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param minlength Quote minimum Length (optional, default to 100)
     * @param maxlength Quote maximum Length (optional, default to 300)
     * @param query keyword to search for in the quote (optional)
     * @param _private Should search private collection? Default searches public collection. (optional, default to false)
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @param sfw Should search only SFW (Safe For Work) quotes? (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteSearchGetCall(String category, String author, Integer minlength, Integer maxlength, String query, Boolean _private, String language, Integer limit, Boolean sfw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (minlength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minlength", minlength));
        }

        if (maxlength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxlength", maxlength));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (_private != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("private", _private));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (sfw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfw", sfw));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteSearchGetValidateBeforeCall(String category, String author, Integer minlength, Integer maxlength, String query, Boolean _private, String language, Integer limit, Boolean sfw, final ApiCallback _callback) throws ApiException {
        return quoteSearchGetCall(category, author, minlength, maxlength, query, _private, language, limit, sfw, _callback);

    }

    /**
     * 
     * Search for a &#x60;Quote&#x60; in They Said So platform. Optional &#x60;category&#x60; , &#x60;author&#x60;, &#x60;minlength&#x60;, &#x60;maxlength&#x60; params determines the filters applied while searching for the quote. 
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param minlength Quote minimum Length (optional, default to 100)
     * @param maxlength Quote maximum Length (optional, default to 300)
     * @param query keyword to search for in the quote (optional)
     * @param _private Should search private collection? Default searches public collection. (optional, default to false)
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @param sfw Should search only SFW (Safe For Work) quotes? (optional, default to false)
     * @return QuoteResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public QuoteResponse quoteSearchGet(String category, String author, Integer minlength, Integer maxlength, String query, Boolean _private, String language, Integer limit, Boolean sfw) throws ApiException {
        ApiResponse<QuoteResponse> localVarResp = quoteSearchGetWithHttpInfo(category, author, minlength, maxlength, query, _private, language, limit, sfw);
        return localVarResp.getData();
    }

    /**
     * 
     * Search for a &#x60;Quote&#x60; in They Said So platform. Optional &#x60;category&#x60; , &#x60;author&#x60;, &#x60;minlength&#x60;, &#x60;maxlength&#x60; params determines the filters applied while searching for the quote. 
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param minlength Quote minimum Length (optional, default to 100)
     * @param maxlength Quote maximum Length (optional, default to 300)
     * @param query keyword to search for in the quote (optional)
     * @param _private Should search private collection? Default searches public collection. (optional, default to false)
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @param sfw Should search only SFW (Safe For Work) quotes? (optional, default to false)
     * @return ApiResponse&lt;QuoteResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QuoteResponse> quoteSearchGetWithHttpInfo(String category, String author, Integer minlength, Integer maxlength, String query, Boolean _private, String language, Integer limit, Boolean sfw) throws ApiException {
        okhttp3.Call localVarCall = quoteSearchGetValidateBeforeCall(category, author, minlength, maxlength, query, _private, language, limit, sfw, null);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search for a &#x60;Quote&#x60; in They Said So platform. Optional &#x60;category&#x60; , &#x60;author&#x60;, &#x60;minlength&#x60;, &#x60;maxlength&#x60; params determines the filters applied while searching for the quote. 
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param minlength Quote minimum Length (optional, default to 100)
     * @param maxlength Quote maximum Length (optional, default to 300)
     * @param query keyword to search for in the quote (optional)
     * @param _private Should search private collection? Default searches public collection. (optional, default to false)
     * @param language Language of the Quote. The language must be supported in our system. (optional, default to en)
     * @param limit No of quotes to return. The max limit depends on the subscription level. (optional, default to 1)
     * @param sfw Should search only SFW (Safe For Work) quotes? (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteSearchGetAsync(String category, String author, Integer minlength, Integer maxlength, String query, Boolean _private, String language, Integer limit, Boolean sfw, final ApiCallback<QuoteResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteSearchGetValidateBeforeCall(category, author, minlength, maxlength, query, _private, language, limit, sfw, _callback);
        Type localVarReturnType = new TypeToken<QuoteResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
