/*
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.QODResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuoteOfTheDayApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuoteOfTheDayApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuoteOfTheDayApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for qodCategoriesGet
     * @param language Language of the QOD category. The language must be supported in our QOD system. (optional, default to en)
     * @param detailed Return detailed information of the categories. Note the data format changes between the two values of this switch. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qodCategoriesGetCall(String language, Boolean detailed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qod/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (detailed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("detailed", detailed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qodCategoriesGetValidateBeforeCall(String language, Boolean detailed, final ApiCallback _callback) throws ApiException {
        return qodCategoriesGetCall(language, detailed, _callback);

    }

    /**
     * 
     * Gets a list of &#x60;Quote of the Day&#x60; Categories. 
     * @param language Language of the QOD category. The language must be supported in our QOD system. (optional, default to en)
     * @param detailed Return detailed information of the categories. Note the data format changes between the two values of this switch. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public void qodCategoriesGet(String language, Boolean detailed) throws ApiException {
        qodCategoriesGetWithHttpInfo(language, detailed);
    }

    /**
     * 
     * Gets a list of &#x60;Quote of the Day&#x60; Categories. 
     * @param language Language of the QOD category. The language must be supported in our QOD system. (optional, default to en)
     * @param detailed Return detailed information of the categories. Note the data format changes between the two values of this switch. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qodCategoriesGetWithHttpInfo(String language, Boolean detailed) throws ApiException {
        okhttp3.Call localVarCall = qodCategoriesGetValidateBeforeCall(language, detailed, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a list of &#x60;Quote of the Day&#x60; Categories. 
     * @param language Language of the QOD category. The language must be supported in our QOD system. (optional, default to en)
     * @param detailed Return detailed information of the categories. Note the data format changes between the two values of this switch. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qodCategoriesGetAsync(String language, Boolean detailed, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qodCategoriesGetValidateBeforeCall(language, detailed, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for qodGet
     * @param category QOD Category (Used in public QOD only) (optional)
     * @param language Language of the QOD. The language must be supported in our QOD system. (optional, default to en)
     * @param id QOD defition id (Used in private QOD only) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qodGetCall(String category, String language, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qod";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json",
            "application/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qodGetValidateBeforeCall(String category, String language, String id, final ApiCallback _callback) throws ApiException {
        return qodGetCall(category, language, id, _callback);

    }

    /**
     * 
     * Gets &#x60;Quote of the Day&#x60; (QOD). Optional &#x60;category&#x60; param determines the category of returned quote of the day 
     * @param category QOD Category (Used in public QOD only) (optional)
     * @param language Language of the QOD. The language must be supported in our QOD system. (optional, default to en)
     * @param id QOD defition id (Used in private QOD only) (optional)
     * @return QODResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public QODResponse qodGet(String category, String language, String id) throws ApiException {
        ApiResponse<QODResponse> localVarResp = qodGetWithHttpInfo(category, language, id);
        return localVarResp.getData();
    }

    /**
     * 
     * Gets &#x60;Quote of the Day&#x60; (QOD). Optional &#x60;category&#x60; param determines the category of returned quote of the day 
     * @param category QOD Category (Used in public QOD only) (optional)
     * @param language Language of the QOD. The language must be supported in our QOD system. (optional, default to en)
     * @param id QOD defition id (Used in private QOD only) (optional)
     * @return ApiResponse&lt;QODResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<QODResponse> qodGetWithHttpInfo(String category, String language, String id) throws ApiException {
        okhttp3.Call localVarCall = qodGetValidateBeforeCall(category, language, id, null);
        Type localVarReturnType = new TypeToken<QODResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Gets &#x60;Quote of the Day&#x60; (QOD). Optional &#x60;category&#x60; param determines the category of returned quote of the day 
     * @param category QOD Category (Used in public QOD only) (optional)
     * @param language Language of the QOD. The language must be supported in our QOD system. (optional, default to en)
     * @param id QOD defition id (Used in private QOD only) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> 400  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qodGetAsync(String category, String language, String id, final ApiCallback<QODResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = qodGetValidateBeforeCall(category, language, id, _callback);
        Type localVarReturnType = new TypeToken<QODResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for qodLanguagesGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qodLanguagesGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/qod/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call qodLanguagesGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return qodLanguagesGetCall(_callback);

    }

    /**
     * 
     * Gets a list of supported languages for &#x60;Quote of the Day&#x60;.  
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public void qodLanguagesGet() throws ApiException {
        qodLanguagesGetWithHttpInfo();
    }

    /**
     * 
     * Gets a list of supported languages for &#x60;Quote of the Day&#x60;.  
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> qodLanguagesGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = qodLanguagesGetValidateBeforeCall(null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a list of supported languages for &#x60;Quote of the Day&#x60;.  
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call qodLanguagesGetAsync(final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = qodLanguagesGetValidateBeforeCall(_callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
