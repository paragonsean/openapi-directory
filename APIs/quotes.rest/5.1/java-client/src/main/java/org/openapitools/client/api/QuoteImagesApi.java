/*
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.io.File;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QuoteImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public QuoteImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QuoteImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for quoteImageBackgroundDelete
     * @param id Font ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/background";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageBackgroundDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageBackgroundDelete(Async)");
        }

        return quoteImageBackgroundDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete a background image file. The user needs to be the owner of the background image to be able to delete it. 
     * @param id Font ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageBackgroundDelete(String id) throws ApiException {
        quoteImageBackgroundDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete a background image file. The user needs to be the owner of the background image to be able to delete it. 
     * @param id Font ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageBackgroundDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = quoteImageBackgroundDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a background image file. The user needs to be the owner of the background image to be able to delete it. 
     * @param id Font ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageBackgroundDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageBackgroundListGet
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundListGetCall(Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/background/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageBackgroundListGetValidateBeforeCall(Integer start, final ApiCallback _callback) throws ApiException {
        return quoteImageBackgroundListGetCall(start, _callback);

    }

    /**
     * 
     * Lists background images in your private collection.  
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageBackgroundListGet(Integer start) throws ApiException {
        quoteImageBackgroundListGetWithHttpInfo(start);
    }

    /**
     * 
     * Lists background images in your private collection.  
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageBackgroundListGetWithHttpInfo(Integer start) throws ApiException {
        okhttp3.Call localVarCall = quoteImageBackgroundListGetValidateBeforeCall(start, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Lists background images in your private collection.  
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundListGetAsync(Integer start, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageBackgroundListGetValidateBeforeCall(start, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageBackgroundPost
     * @param image Image file to add to your collection (png/jpg/gif are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundPostCall(File image, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/background";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (image != null) {
            localVarFormParams.put("image", image);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageBackgroundPostValidateBeforeCall(File image, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'image' is set
        if (image == null) {
            throw new ApiException("Missing the required parameter 'image' when calling quoteImageBackgroundPost(Async)");
        }

        return quoteImageBackgroundPostCall(image, tags, _callback);

    }

    /**
     * 
     * Add an image for use later as a quote background image.
     * @param image Image file to add to your collection (png/jpg/gif are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageBackgroundPost(File image, String tags) throws ApiException {
        quoteImageBackgroundPostWithHttpInfo(image, tags);
    }

    /**
     * 
     * Add an image for use later as a quote background image.
     * @param image Image file to add to your collection (png/jpg/gif are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageBackgroundPostWithHttpInfo(File image, String tags) throws ApiException {
        okhttp3.Call localVarCall = quoteImageBackgroundPostValidateBeforeCall(image, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add an image for use later as a quote background image.
     * @param image Image file to add to your collection (png/jpg/gif are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundPostAsync(File image, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageBackgroundPostValidateBeforeCall(image, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageBackgroundSearchGet
     * @param query Tag string (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundSearchGetCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/background/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageBackgroundSearchGetValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        return quoteImageBackgroundSearchGetCall(query, _callback);

    }

    /**
     * 
     * Searches for a background image with a given tag.  
     * @param query Tag string (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageBackgroundSearchGet(String query) throws ApiException {
        quoteImageBackgroundSearchGetWithHttpInfo(query);
    }

    /**
     * 
     * Searches for a background image with a given tag.  
     * @param query Tag string (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageBackgroundSearchGetWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = quoteImageBackgroundSearchGetValidateBeforeCall(query, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Searches for a background image with a given tag.  
     * @param query Tag string (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundSearchGetAsync(String query, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageBackgroundSearchGetValidateBeforeCall(query, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageBackgroundTagsAddPost
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundTagsAddPostCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/background/tags/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageBackgroundTagsAddPostValidateBeforeCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageBackgroundTagsAddPost(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling quoteImageBackgroundTagsAddPost(Async)");
        }

        return quoteImageBackgroundTagsAddPostCall(id, tags, _callback);

    }

    /**
     * 
     * Add a tag to a given Image.
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageBackgroundTagsAddPost(String id, String tags) throws ApiException {
        quoteImageBackgroundTagsAddPostWithHttpInfo(id, tags);
    }

    /**
     * 
     * Add a tag to a given Image.
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageBackgroundTagsAddPostWithHttpInfo(String id, String tags) throws ApiException {
        okhttp3.Call localVarCall = quoteImageBackgroundTagsAddPostValidateBeforeCall(id, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a tag to a given Image.
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundTagsAddPostAsync(String id, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageBackgroundTagsAddPostValidateBeforeCall(id, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageBackgroundTagsRemovePost
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundTagsRemovePostCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/background/tags/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageBackgroundTagsRemovePostValidateBeforeCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageBackgroundTagsRemovePost(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling quoteImageBackgroundTagsRemovePost(Async)");
        }

        return quoteImageBackgroundTagsRemovePostCall(id, tags, _callback);

    }

    /**
     * 
     * Remove a tag from a given Image.
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageBackgroundTagsRemovePost(String id, String tags) throws ApiException {
        quoteImageBackgroundTagsRemovePostWithHttpInfo(id, tags);
    }

    /**
     * 
     * Remove a tag from a given Image.
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageBackgroundTagsRemovePostWithHttpInfo(String id, String tags) throws ApiException {
        okhttp3.Call localVarCall = quoteImageBackgroundTagsRemovePostValidateBeforeCall(id, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a tag from a given Image.
     * @param id Image ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageBackgroundTagsRemovePostAsync(String id, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageBackgroundTagsRemovePostValidateBeforeCall(id, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageDelete
     * @param id Quote Image ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageDelete(Async)");
        }

        return quoteImageDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete a quote image. The user needs to be the owner of the quote image to be able to delete it. 
     * @param id Quote Image ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageDelete(String id) throws ApiException {
        quoteImageDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete a quote image. The user needs to be the owner of the quote image to be able to delete it. 
     * @param id Quote Image ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = quoteImageDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a quote image. The user needs to be the owner of the quote image to be able to delete it. 
     * @param id Quote Image ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageFontDelete
     * @param id Font ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontDeleteCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/font";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/xml",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageFontDeleteValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageFontDelete(Async)");
        }

        return quoteImageFontDeleteCall(id, _callback);

    }

    /**
     * 
     * Delete a font file. The user needs to be the owner of the font to be able to delete it. 
     * @param id Font ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageFontDelete(String id) throws ApiException {
        quoteImageFontDeleteWithHttpInfo(id);
    }

    /**
     * 
     * Delete a font file. The user needs to be the owner of the font to be able to delete it. 
     * @param id Font ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageFontDeleteWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = quoteImageFontDeleteValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete a font file. The user needs to be the owner of the font to be able to delete it. 
     * @param id Font ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontDeleteAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageFontDeleteValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageFontListGet
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontListGetCall(Integer start, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/font/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (start != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start", start));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageFontListGetValidateBeforeCall(Integer start, final ApiCallback _callback) throws ApiException {
        return quoteImageFontListGetCall(start, _callback);

    }

    /**
     * 
     * Lists background images in your private collection.  
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageFontListGet(Integer start) throws ApiException {
        quoteImageFontListGetWithHttpInfo(start);
    }

    /**
     * 
     * Lists background images in your private collection.  
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageFontListGetWithHttpInfo(Integer start) throws ApiException {
        okhttp3.Call localVarCall = quoteImageFontListGetValidateBeforeCall(start, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Lists background images in your private collection.  
     * @param start Response is paged. This parameter determines where the response should start. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontListGetAsync(Integer start, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageFontListGetValidateBeforeCall(start, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageFontPost
     * @param font Font file to add to your collection (ttf/otf are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontPostCall(File font, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/font";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (font != null) {
            localVarFormParams.put("font", font);
        }

        if (tags != null) {
            localVarFormParams.put("tags", tags);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageFontPostValidateBeforeCall(File font, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'font' is set
        if (font == null) {
            throw new ApiException("Missing the required parameter 'font' when calling quoteImageFontPost(Async)");
        }

        return quoteImageFontPostCall(font, tags, _callback);

    }

    /**
     * 
     * Add a font file for use later in creating a quote image. This is essentially a &#x60;PUT&#x60; but not many clients handle PUT with binary stream i.e. a file, gracefully.
     * @param font Font file to add to your collection (ttf/otf are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageFontPost(File font, String tags) throws ApiException {
        quoteImageFontPostWithHttpInfo(font, tags);
    }

    /**
     * 
     * Add a font file for use later in creating a quote image. This is essentially a &#x60;PUT&#x60; but not many clients handle PUT with binary stream i.e. a file, gracefully.
     * @param font Font file to add to your collection (ttf/otf are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageFontPostWithHttpInfo(File font, String tags) throws ApiException {
        okhttp3.Call localVarCall = quoteImageFontPostValidateBeforeCall(font, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a font file for use later in creating a quote image. This is essentially a &#x60;PUT&#x60; but not many clients handle PUT with binary stream i.e. a file, gracefully.
     * @param font Font file to add to your collection (ttf/otf are supported) (required)
     * @param tags Optional comma separated tags (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontPostAsync(File font, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageFontPostValidateBeforeCall(font, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageFontSearchGet
     * @param query Tag string (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontSearchGetCall(String query, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/font/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageFontSearchGetValidateBeforeCall(String query, final ApiCallback _callback) throws ApiException {
        return quoteImageFontSearchGetCall(query, _callback);

    }

    /**
     * 
     * Searches for a font with a given tag.  
     * @param query Tag string (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageFontSearchGet(String query) throws ApiException {
        quoteImageFontSearchGetWithHttpInfo(query);
    }

    /**
     * 
     * Searches for a font with a given tag.  
     * @param query Tag string (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageFontSearchGetWithHttpInfo(String query) throws ApiException {
        okhttp3.Call localVarCall = quoteImageFontSearchGetValidateBeforeCall(query, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Searches for a font with a given tag.  
     * @param query Tag string (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontSearchGetAsync(String query, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageFontSearchGetValidateBeforeCall(query, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageFontTagsAddPost
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontTagsAddPostCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/font/tags/add";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageFontTagsAddPostValidateBeforeCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageFontTagsAddPost(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling quoteImageFontTagsAddPost(Async)");
        }

        return quoteImageFontTagsAddPostCall(id, tags, _callback);

    }

    /**
     * 
     * Add a tag to a given font.
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageFontTagsAddPost(String id, String tags) throws ApiException {
        quoteImageFontTagsAddPostWithHttpInfo(id, tags);
    }

    /**
     * 
     * Add a tag to a given font.
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageFontTagsAddPostWithHttpInfo(String id, String tags) throws ApiException {
        okhttp3.Call localVarCall = quoteImageFontTagsAddPostValidateBeforeCall(id, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Add a tag to a given font.
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontTagsAddPostAsync(String id, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageFontTagsAddPostValidateBeforeCall(id, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageFontTagsRemovePost
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontTagsRemovePostCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/font/tags/remove";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (tags != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tags", tags));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageFontTagsRemovePostValidateBeforeCall(String id, String tags, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageFontTagsRemovePost(Async)");
        }

        // verify the required parameter 'tags' is set
        if (tags == null) {
            throw new ApiException("Missing the required parameter 'tags' when calling quoteImageFontTagsRemovePost(Async)");
        }

        return quoteImageFontTagsRemovePostCall(id, tags, _callback);

    }

    /**
     * 
     * Remove a tag from a given Font.
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageFontTagsRemovePost(String id, String tags) throws ApiException {
        quoteImageFontTagsRemovePostWithHttpInfo(id, tags);
    }

    /**
     * 
     * Remove a tag from a given Font.
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageFontTagsRemovePostWithHttpInfo(String id, String tags) throws ApiException {
        okhttp3.Call localVarCall = quoteImageFontTagsRemovePostValidateBeforeCall(id, tags, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Remove a tag from a given Font.
     * @param id Font ID (required)
     * @param tags Comma Separated tags (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageFontTagsRemovePostAsync(String id, String tags, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageFontTagsRemovePostValidateBeforeCall(id, tags, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageGet
     * @param id Quote Image id (required)
     * @param binary Should the response be a direct file download of the image or a base64 encoded image file wrapped in json? (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageGetCall(String id, Boolean binary, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (binary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("binary", binary));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageGetValidateBeforeCall(String id, Boolean binary, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling quoteImageGet(Async)");
        }

        return quoteImageGetCall(id, binary, _callback);

    }

    /**
     * 
     * Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. &#x60;TODO&#x60; 
     * @param id Quote Image id (required)
     * @param binary Should the response be a direct file download of the image or a base64 encoded image file wrapped in json? (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageGet(String id, Boolean binary) throws ApiException {
        quoteImageGetWithHttpInfo(id, binary);
    }

    /**
     * 
     * Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. &#x60;TODO&#x60; 
     * @param id Quote Image id (required)
     * @param binary Should the response be a direct file download of the image or a base64 encoded image file wrapped in json? (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageGetWithHttpInfo(String id, Boolean binary) throws ApiException {
        okhttp3.Call localVarCall = quoteImageGetValidateBeforeCall(id, binary, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. &#x60;TODO&#x60; 
     * @param id Quote Image id (required)
     * @param binary Should the response be a direct file download of the image or a base64 encoded image file wrapped in json? (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageGetAsync(String id, Boolean binary, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageGetValidateBeforeCall(id, binary, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImagePut
     * @param quoteId Quote id (required)
     * @param bgimageId Background Image id ( Will override bgcolor if supplied) (optional, default to theysaidso_default_background_image)
     * @param bgColor Background Color(if background image id is not supplied) (optional)
     * @param fontId Font id (optional, default to theysaidso_default_font)
     * @param textColor Text Color (optional)
     * @param textSize Text/font size (optional)
     * @param halign Horizontal text Alignment Value (optional, default to center)
     * @param valign Vertical text Alignment Value (optional, default to center)
     * @param width Image Width(By default this takes the width of the background image) (optional)
     * @param height Image Height(By default this takes the height of the background image) (optional)
     * @param branding Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels) (optional, default to false)
     * @param includeTransparentLayer Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text. (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImagePutCall(String quoteId, String bgimageId, String bgColor, String fontId, String textColor, String textSize, String halign, String valign, Integer width, Integer height, Boolean branding, Boolean includeTransparentLayer, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (quoteId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quote_id", quoteId));
        }

        if (bgimageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bgimage_id", bgimageId));
        }

        if (bgColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bg_color", bgColor));
        }

        if (fontId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("font_id", fontId));
        }

        if (textColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text_color", textColor));
        }

        if (textSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text_size", textSize));
        }

        if (halign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("halign", halign));
        }

        if (valign != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("valign", valign));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (branding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("branding", branding));
        }

        if (includeTransparentLayer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_transparent_layer", includeTransparentLayer));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImagePutValidateBeforeCall(String quoteId, String bgimageId, String bgColor, String fontId, String textColor, String textSize, String halign, String valign, Integer width, Integer height, Boolean branding, Boolean includeTransparentLayer, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quoteId' is set
        if (quoteId == null) {
            throw new ApiException("Missing the required parameter 'quoteId' when calling quoteImagePut(Async)");
        }

        return quoteImagePutCall(quoteId, bgimageId, bgColor, fontId, textColor, textSize, halign, valign, width, height, branding, includeTransparentLayer, _callback);

    }

    /**
     * 
     * Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?! 
     * @param quoteId Quote id (required)
     * @param bgimageId Background Image id ( Will override bgcolor if supplied) (optional, default to theysaidso_default_background_image)
     * @param bgColor Background Color(if background image id is not supplied) (optional)
     * @param fontId Font id (optional, default to theysaidso_default_font)
     * @param textColor Text Color (optional)
     * @param textSize Text/font size (optional)
     * @param halign Horizontal text Alignment Value (optional, default to center)
     * @param valign Vertical text Alignment Value (optional, default to center)
     * @param width Image Width(By default this takes the width of the background image) (optional)
     * @param height Image Height(By default this takes the height of the background image) (optional)
     * @param branding Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels) (optional, default to false)
     * @param includeTransparentLayer Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text. (optional, default to true)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImagePut(String quoteId, String bgimageId, String bgColor, String fontId, String textColor, String textSize, String halign, String valign, Integer width, Integer height, Boolean branding, Boolean includeTransparentLayer) throws ApiException {
        quoteImagePutWithHttpInfo(quoteId, bgimageId, bgColor, fontId, textColor, textSize, halign, valign, width, height, branding, includeTransparentLayer);
    }

    /**
     * 
     * Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?! 
     * @param quoteId Quote id (required)
     * @param bgimageId Background Image id ( Will override bgcolor if supplied) (optional, default to theysaidso_default_background_image)
     * @param bgColor Background Color(if background image id is not supplied) (optional)
     * @param fontId Font id (optional, default to theysaidso_default_font)
     * @param textColor Text Color (optional)
     * @param textSize Text/font size (optional)
     * @param halign Horizontal text Alignment Value (optional, default to center)
     * @param valign Vertical text Alignment Value (optional, default to center)
     * @param width Image Width(By default this takes the width of the background image) (optional)
     * @param height Image Height(By default this takes the height of the background image) (optional)
     * @param branding Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels) (optional, default to false)
     * @param includeTransparentLayer Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text. (optional, default to true)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImagePutWithHttpInfo(String quoteId, String bgimageId, String bgColor, String fontId, String textColor, String textSize, String halign, String valign, Integer width, Integer height, Boolean branding, Boolean includeTransparentLayer) throws ApiException {
        okhttp3.Call localVarCall = quoteImagePutValidateBeforeCall(quoteId, bgimageId, bgColor, fontId, textColor, textSize, halign, valign, width, height, branding, includeTransparentLayer, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?! 
     * @param quoteId Quote id (required)
     * @param bgimageId Background Image id ( Will override bgcolor if supplied) (optional, default to theysaidso_default_background_image)
     * @param bgColor Background Color(if background image id is not supplied) (optional)
     * @param fontId Font id (optional, default to theysaidso_default_font)
     * @param textColor Text Color (optional)
     * @param textSize Text/font size (optional)
     * @param halign Horizontal text Alignment Value (optional, default to center)
     * @param valign Vertical text Alignment Value (optional, default to center)
     * @param width Image Width(By default this takes the width of the background image) (optional)
     * @param height Image Height(By default this takes the height of the background image) (optional)
     * @param branding Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels) (optional, default to false)
     * @param includeTransparentLayer Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text. (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImagePutAsync(String quoteId, String bgimageId, String bgColor, String fontId, String textColor, String textSize, String halign, String valign, Integer width, Integer height, Boolean branding, Boolean includeTransparentLayer, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImagePutValidateBeforeCall(quoteId, bgimageId, bgColor, fontId, textColor, textSize, halign, valign, width, height, branding, includeTransparentLayer, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for quoteImageSearchGet
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param _private Should search private collection. Default searches public image collection. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageSearchGetCall(String category, String author, Boolean _private, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/quote/image/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (author != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("author", author));
        }

        if (_private != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("private", _private));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call quoteImageSearchGetValidateBeforeCall(String category, String author, Boolean _private, final ApiCallback _callback) throws ApiException {
        return quoteImageSearchGetCall(category, author, _private, _callback);

    }

    /**
     * 
     * Gets a Random Quote image. Optional &#x60;category&#x60; param determines the category of quote used in the image. Optional &#x60;author&#x60; param gets the quote image of a given author.  
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param _private Should search private collection. Default searches public image collection. (optional, default to false)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public void quoteImageSearchGet(String category, String author, Boolean _private) throws ApiException {
        quoteImageSearchGetWithHttpInfo(category, author, _private);
    }

    /**
     * 
     * Gets a Random Quote image. Optional &#x60;category&#x60; param determines the category of quote used in the image. Optional &#x60;author&#x60; param gets the quote image of a given author.  
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param _private Should search private collection. Default searches public image collection. (optional, default to false)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> quoteImageSearchGetWithHttpInfo(String category, String author, Boolean _private) throws ApiException {
        okhttp3.Call localVarCall = quoteImageSearchGetValidateBeforeCall(category, author, _private, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Gets a Random Quote image. Optional &#x60;category&#x60; param determines the category of quote used in the image. Optional &#x60;author&#x60; param gets the quote image of a given author.  
     * @param category Quote Category (optional)
     * @param author Quote Author (optional)
     * @param _private Should search private collection. Default searches public image collection. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> 200  response </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> 401  response </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> 404  response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call quoteImageSearchGetAsync(String category, String author, Boolean _private, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = quoteImageSearchGetValidateBeforeCall(category, author, _private, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
