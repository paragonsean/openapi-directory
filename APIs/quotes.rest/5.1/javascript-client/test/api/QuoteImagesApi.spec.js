/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.TheySaidSoQuotesApi);
  }
}(this, function(expect, TheySaidSoQuotesApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new TheySaidSoQuotesApi.QuoteImagesApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('QuoteImagesApi', function() {
    describe('quoteImageBackgroundDelete', function() {
      it('should call quoteImageBackgroundDelete successfully', function(done) {
        //uncomment below and update the code to test quoteImageBackgroundDelete
        //instance.quoteImageBackgroundDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageBackgroundListGet', function() {
      it('should call quoteImageBackgroundListGet successfully', function(done) {
        //uncomment below and update the code to test quoteImageBackgroundListGet
        //instance.quoteImageBackgroundListGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageBackgroundPost', function() {
      it('should call quoteImageBackgroundPost successfully', function(done) {
        //uncomment below and update the code to test quoteImageBackgroundPost
        //instance.quoteImageBackgroundPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageBackgroundSearchGet', function() {
      it('should call quoteImageBackgroundSearchGet successfully', function(done) {
        //uncomment below and update the code to test quoteImageBackgroundSearchGet
        //instance.quoteImageBackgroundSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageBackgroundTagsAddPost', function() {
      it('should call quoteImageBackgroundTagsAddPost successfully', function(done) {
        //uncomment below and update the code to test quoteImageBackgroundTagsAddPost
        //instance.quoteImageBackgroundTagsAddPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageBackgroundTagsRemovePost', function() {
      it('should call quoteImageBackgroundTagsRemovePost successfully', function(done) {
        //uncomment below and update the code to test quoteImageBackgroundTagsRemovePost
        //instance.quoteImageBackgroundTagsRemovePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageDelete', function() {
      it('should call quoteImageDelete successfully', function(done) {
        //uncomment below and update the code to test quoteImageDelete
        //instance.quoteImageDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageFontDelete', function() {
      it('should call quoteImageFontDelete successfully', function(done) {
        //uncomment below and update the code to test quoteImageFontDelete
        //instance.quoteImageFontDelete(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageFontListGet', function() {
      it('should call quoteImageFontListGet successfully', function(done) {
        //uncomment below and update the code to test quoteImageFontListGet
        //instance.quoteImageFontListGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageFontPost', function() {
      it('should call quoteImageFontPost successfully', function(done) {
        //uncomment below and update the code to test quoteImageFontPost
        //instance.quoteImageFontPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageFontSearchGet', function() {
      it('should call quoteImageFontSearchGet successfully', function(done) {
        //uncomment below and update the code to test quoteImageFontSearchGet
        //instance.quoteImageFontSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageFontTagsAddPost', function() {
      it('should call quoteImageFontTagsAddPost successfully', function(done) {
        //uncomment below and update the code to test quoteImageFontTagsAddPost
        //instance.quoteImageFontTagsAddPost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageFontTagsRemovePost', function() {
      it('should call quoteImageFontTagsRemovePost successfully', function(done) {
        //uncomment below and update the code to test quoteImageFontTagsRemovePost
        //instance.quoteImageFontTagsRemovePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageGet', function() {
      it('should call quoteImageGet successfully', function(done) {
        //uncomment below and update the code to test quoteImageGet
        //instance.quoteImageGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImagePut', function() {
      it('should call quoteImagePut successfully', function(done) {
        //uncomment below and update the code to test quoteImagePut
        //instance.quoteImagePut(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('quoteImageSearchGet', function() {
      it('should call quoteImageSearchGet successfully', function(done) {
        //uncomment below and update the code to test quoteImageSearchGet
        //instance.quoteImageSearchGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
