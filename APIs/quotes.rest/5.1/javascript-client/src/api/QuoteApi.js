/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QuoteResponse from '../model/QuoteResponse';

/**
* Quote service.
* @module api/QuoteApi
* @version 5.1
*/
export default class QuoteApi {

    /**
    * Constructs a new QuoteApi. 
    * @alias module:api/QuoteApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteAuthorsPopularGet operation.
     * @callback module:api/QuoteApi~quoteAuthorsPopularGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of popular author names in the system.  
     * @param {Object} opts Optional parameters
     * @param {String} [language = 'en')] Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language \"en\"(English), and \"மஹாத்மா காந்தி\" may be returned when the language is \"ta\" (Tamil).
     * @param {Boolean} [detailed = false)] Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {Number} [limit = 5)] Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.
     * @param {module:api/QuoteApi~quoteAuthorsPopularGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteAuthorsPopularGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language'],
        'detailed': opts['detailed'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/authors/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteAuthorsSearchGet operation.
     * @callback module:api/QuoteApi~quoteAuthorsSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of author names in the system.  
     * @param {Object} opts Optional parameters
     * @param {String} [query] Text string to search for in author names
     * @param {String} [language = 'en')] Language. A same author may have quotes in two or more different languages. So for example 'Mahatma Gandhi' may be returned for language \"en\"(English), and \"மஹாத்மா காந்தி\" may be returned when the language is \"ta\" (Tamil).
     * @param {Boolean} [detailed = false)] Should return detailed author information such as `birthday`, `death date`, `occupation`, `description` etc. Only available at certain subscription levels.
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {Number} [limit = 1)] Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.
     * @param {module:api/QuoteApi~quoteAuthorsSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteAuthorsSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'language': opts['language'],
        'detailed': opts['detailed'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/authors/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteBookmarkToggleGet operation.
     * @callback module:api/QuoteApi~quoteBookmarkToggleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle the user bookmark of the given Quote as a user of the API Key.
     * @param {String} quoteId Quote ID
     * @param {module:api/QuoteApi~quoteBookmarkToggleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteBookmarkToggleGet(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling quoteBookmarkToggleGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'quote_id': quoteId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/bookmark/toggle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCategoriesPopularGet operation.
     * @callback module:api/QuoteApi~quoteCategoriesPopularGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of popular `Quote` Categories. 
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {Number} [limit = 5)] Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.
     * @param {module:api/QuoteApi~quoteCategoriesPopularGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteCategoriesPopularGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/categories/popular', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteCategoriesSearchGet operation.
     * @callback module:api/QuoteApi~quoteCategoriesSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of `Quote` Categories matching the query string. 
     * @param {Object} opts Optional parameters
     * @param {String} [query = '0')] Text string to search for in the categories
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {Number} [limit = 2)] Response is paged. This parameter controls how many is returned in the result. The maximum depends on the subscription level.
     * @param {module:api/QuoteApi~quoteCategoriesSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteCategoriesSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/categories/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteGet operation.
     * @callback module:api/QuoteApi~quoteGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a `Quote` with a given `id`.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Quote ID
     * @param {module:api/QuoteApi~quoteGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteResponse}
     */
    quoteGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = QuoteResponse;
      return this.apiClient.callApi(
        '/quote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteLikeToggleGet operation.
     * @callback module:api/QuoteApi~quoteLikeToggleGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Toggle the user like of the given Quote as a user of the API Key.
     * @param {String} quoteId Quote ID
     * @param {module:api/QuoteApi~quoteLikeToggleGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteLikeToggleGet(quoteId, callback) {
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling quoteLikeToggleGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'quote_id': quoteId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/like/toggle', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteRandomGet operation.
     * @callback module:api/QuoteApi~quoteRandomGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a `Random Quote`. When you are in a hurry this is what you call to get a random famous quote.
     * @param {Object} opts Optional parameters
     * @param {String} [language = 'en')] Language of the Quote. The language must be supported in our system.
     * @param {Number} [limit = 1)] No of quotes to return. The max limit depends on the subscription level.
     * @param {module:api/QuoteApi~quoteRandomGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteResponse}
     */
    quoteRandomGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = QuoteResponse;
      return this.apiClient.callApi(
        '/quote/random', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteSearchGet operation.
     * @callback module:api/QuoteApi~quoteSearchGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for a `Quote` in They Said So platform. Optional `category` , `author`, `minlength`, `maxlength` params determines the filters applied while searching for the quote. 
     * @param {Object} opts Optional parameters
     * @param {String} [category] Quote Category
     * @param {String} [author] Quote Author
     * @param {Number} [minlength = 100)] Quote minimum Length
     * @param {Number} [maxlength = 300)] Quote maximum Length
     * @param {String} [query] keyword to search for in the quote
     * @param {Boolean} [_private = false)] Should search private collection? Default searches public collection.
     * @param {String} [language = 'en')] Language of the Quote. The language must be supported in our system.
     * @param {Number} [limit = 1)] No of quotes to return. The max limit depends on the subscription level.
     * @param {Boolean} [sfw = false)] Should search only SFW (Safe For Work) quotes?
     * @param {module:api/QuoteApi~quoteSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteResponse}
     */
    quoteSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'author': opts['author'],
        'minlength': opts['minlength'],
        'maxlength': opts['maxlength'],
        'query': opts['query'],
        'private': opts['_private'],
        'language': opts['language'],
        'limit': opts['limit'],
        'sfw': opts['sfw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = QuoteResponse;
      return this.apiClient.callApi(
        '/quote/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
