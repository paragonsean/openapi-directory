/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import QuoteResponse from '../model/QuoteResponse';

/**
* PrivateQuotes service.
* @module api/PrivateQuotesApi
* @version 5.1
*/
export default class PrivateQuotesApi {

    /**
    * Constructs a new PrivateQuotesApi. 
    * @alias module:api/PrivateQuotesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteDelete operation.
     * @callback module:api/PrivateQuotesApi~quoteDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a quote. The user needs to be the owner of the quote to be able to delete it. 
     * @param {String} id Quote ID
     * @param {module:api/PrivateQuotesApi~quoteDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteGet_0 operation.
     * @callback module:api/PrivateQuotesApi~quoteGet_0Callback
     * @param {String} error Error message, if any.
     * @param {module:model/QuoteResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a `Quote` with a given `id`.
     * @param {Object} opts Optional parameters
     * @param {String} [id] Quote ID
     * @param {module:api/PrivateQuotesApi~quoteGet_0Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/QuoteResponse}
     */
    quoteGet_0(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = QuoteResponse;
      return this.apiClient.callApi(
        '/quote', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteListGet operation.
     * @callback module:api/PrivateQuotesApi~quoteListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of quotes in your private collection.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {Number} [limit = 10)] Response is paged. This parameter controls how many is returned in the result.
     * @param {module:api/PrivateQuotesApi~quoteListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePatch operation.
     * @callback module:api/PrivateQuotesApi~quotePatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update a quote
     * @param {String} id Quote ID
     * @param {Object} opts Optional parameters
     * @param {String} [quote] Quote
     * @param {String} [author] Quote Author
     * @param {String} [language = 'en')] Language. If not supplied an auto detection mechanism will be used to detect a language.
     * @param {String} [tags] Comma Separated tags
     * @param {module:api/PrivateQuotesApi~quotePatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quotePatch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quotePatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'quote': opts['quote'],
        'author': opts['author'],
        'language': opts['language'],
        'tags': opts['tags']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePost operation.
     * @callback module:api/PrivateQuotesApi~quotePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new quote to your private collection. Same as 'PUT' but added since some clients don't handle PUT well.
     * @param {String} quote Quote
     * @param {Object} opts Optional parameters
     * @param {String} [author] Quote Author
     * @param {String} [tags] Comma Separated tags
     * @param {String} [language = 'en')] Language. If not supplied an auto detection mechanism will be used to detect a language.
     * @param {module:api/PrivateQuotesApi~quotePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quotePost(quote, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'quote' is set
      if (quote === undefined || quote === null) {
        throw new Error("Missing the required parameter 'quote' when calling quotePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'quote': quote,
        'author': opts['author'],
        'tags': opts['tags'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quotePut operation.
     * @callback module:api/PrivateQuotesApi~quotePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new quote to your private collection.
     * @param {String} quote Quote
     * @param {Object} opts Optional parameters
     * @param {String} [author] Quote Author
     * @param {String} [tags] Comma Separated tags
     * @param {String} [language = 'en')] Language. If not supplied an auto detection mechanism will be used to detect a language.
     * @param {module:api/PrivateQuotesApi~quotePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quotePut(quote, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'quote' is set
      if (quote === undefined || quote === null) {
        throw new Error("Missing the required parameter 'quote' when calling quotePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'quote': quote,
        'author': opts['author'],
        'tags': opts['tags'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteTagsAddPost operation.
     * @callback module:api/PrivateQuotesApi~quoteTagsAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a given Quote.
     * @param {String} id Quote ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/PrivateQuotesApi~quoteTagsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteTagsAddPost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteTagsAddPost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling quoteTagsAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/tags/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteTagsRemovePost operation.
     * @callback module:api/PrivateQuotesApi~quoteTagsRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a given quote.
     * @param {String} id Quote ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/PrivateQuotesApi~quoteTagsRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteTagsRemovePost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteTagsRemovePost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling quoteTagsRemovePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/tags/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
