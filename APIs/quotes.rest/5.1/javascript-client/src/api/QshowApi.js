/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Qshow service.
* @module api/QshowApi
* @version 5.1
*/
export default class QshowApi {

    /**
    * Constructs a new QshowApi. 
    * @alias module:api/QshowApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the qshowDelete operation.
     * @callback module:api/QshowApi~qshowDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a qshow. 
     * @param {String} id Qshow ID
     * @param {module:api/QshowApi~qshowDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qshowDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowGet operation.
     * @callback module:api/QshowApi~qshowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a details about a qshow. 
     * @param {String} id Qshow ID
     * @param {module:api/QshowApi~qshowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qshowGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json', 'application/xml'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowListGet operation.
     * @callback module:api/QshowApi~qshowListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Qshows in They Said So platform.
     * @param {Object} opts Optional parameters
     * @param {Number} [start = 0)] Response is paged. This parameter controls where response starts the listing at
     * @param {Boolean} [_public = false)] Should include public qshows or not in the list
     * @param {module:api/QshowApi~qshowListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start'],
        'public': opts['_public']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowPatch operation.
     * @callback module:api/QshowApi~qshowPatchCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an existing qshow.
     * @param {String} id Qshow ID
     * @param {Object} opts Optional parameters
     * @param {String} [title] Qshow title
     * @param {String} [description] Qshow description
     * @param {Array.<String>} [tags] Tags for the qshow
     * @param {module:api/QshowApi~qshowPatchCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowPatch(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qshowPatch");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'title': opts['title'],
        'description': opts['description'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowPut operation.
     * @callback module:api/QshowApi~qshowPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create and add a new qshow to your private collection.
     * @param {String} title Qshow title
     * @param {Object} opts Optional parameters
     * @param {String} [description] Qshow description
     * @param {Array.<String>} [tags] Tags for the qshow
     * @param {module:api/QshowApi~qshowPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowPut(title, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'title' is set
      if (title === undefined || title === null) {
        throw new Error("Missing the required parameter 'title' when calling qshowPut");
      }

      let pathParams = {
      };
      let queryParams = {
        'title': title,
        'description': opts['description'],
        'tags': this.apiClient.buildCollectionParam(opts['tags'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowQuotesAddPost operation.
     * @callback module:api/QshowApi~qshowQuotesAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a quote to a given Qshow.
     * @param {String} id Qshow ID
     * @param {String} quoteid Quote ID to add the qshow collection
     * @param {module:api/QshowApi~qshowQuotesAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowQuotesAddPost(id, quoteid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qshowQuotesAddPost");
      }
      // verify the required parameter 'quoteid' is set
      if (quoteid === undefined || quoteid === null) {
        throw new Error("Missing the required parameter 'quoteid' when calling qshowQuotesAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'quoteid': quoteid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow/quotes/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowQuotesGet operation.
     * @callback module:api/QshowApi~qshowQuotesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the quotes in a given Qshow.
     * @param {String} id Qshow ID
     * @param {module:api/QshowApi~qshowQuotesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowQuotesGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qshowQuotesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow/quotes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the qshowQuotesRemovePost operation.
     * @callback module:api/QshowApi~qshowQuotesRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a quote to a given Qshow.
     * @param {String} id Qshow ID
     * @param {String} quoteid Quote ID to remove from the qshow collection
     * @param {module:api/QshowApi~qshowQuotesRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    qshowQuotesRemovePost(id, quoteid, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling qshowQuotesRemovePost");
      }
      // verify the required parameter 'quoteid' is set
      if (quoteid === undefined || quoteid === null) {
        throw new Error("Missing the required parameter 'quoteid' when calling qshowQuotesRemovePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'quoteid': quoteid
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/qshow/quotes/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
