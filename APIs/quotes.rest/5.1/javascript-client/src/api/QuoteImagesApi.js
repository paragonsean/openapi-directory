/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* QuoteImages service.
* @module api/QuoteImagesApi
* @version 5.1
*/
export default class QuoteImagesApi {

    /**
    * Constructs a new QuoteImagesApi. 
    * @alias module:api/QuoteImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the quoteImageBackgroundDelete operation.
     * @callback module:api/QuoteImagesApi~quoteImageBackgroundDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a background image file. The user needs to be the owner of the background image to be able to delete it. 
     * @param {String} id Font ID
     * @param {module:api/QuoteImagesApi~quoteImageBackgroundDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageBackgroundDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageBackgroundDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/background', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageBackgroundListGet operation.
     * @callback module:api/QuoteImagesApi~quoteImageBackgroundListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists background images in your private collection.  
     * @param {Object} opts Optional parameters
     * @param {Number} [start] Response is paged. This parameter determines where the response should start.
     * @param {module:api/QuoteImagesApi~quoteImageBackgroundListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageBackgroundListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/background/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageBackgroundPost operation.
     * @callback module:api/QuoteImagesApi~quoteImageBackgroundPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add an image for use later as a quote background image.
     * @param {File} image Image file to add to your collection (png/jpg/gif are supported)
     * @param {Object} opts Optional parameters
     * @param {String} [tags] Optional comma separated tags
     * @param {module:api/QuoteImagesApi~quoteImageBackgroundPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageBackgroundPost(image, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'image' is set
      if (image === undefined || image === null) {
        throw new Error("Missing the required parameter 'image' when calling quoteImageBackgroundPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'image': image,
        'tags': opts['tags']
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/background', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageBackgroundSearchGet operation.
     * @callback module:api/QuoteImagesApi~quoteImageBackgroundSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for a background image with a given tag.  
     * @param {Object} opts Optional parameters
     * @param {String} [query] Tag string
     * @param {module:api/QuoteImagesApi~quoteImageBackgroundSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageBackgroundSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/background/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageBackgroundTagsAddPost operation.
     * @callback module:api/QuoteImagesApi~quoteImageBackgroundTagsAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a given Image.
     * @param {String} id Image ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/QuoteImagesApi~quoteImageBackgroundTagsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageBackgroundTagsAddPost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageBackgroundTagsAddPost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling quoteImageBackgroundTagsAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/background/tags/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageBackgroundTagsRemovePost operation.
     * @callback module:api/QuoteImagesApi~quoteImageBackgroundTagsRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a given Image.
     * @param {String} id Image ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/QuoteImagesApi~quoteImageBackgroundTagsRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageBackgroundTagsRemovePost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageBackgroundTagsRemovePost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling quoteImageBackgroundTagsRemovePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/background/tags/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageDelete operation.
     * @callback module:api/QuoteImagesApi~quoteImageDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a quote image. The user needs to be the owner of the quote image to be able to delete it. 
     * @param {String} id Quote Image ID
     * @param {module:api/QuoteImagesApi~quoteImageDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageFontDelete operation.
     * @callback module:api/QuoteImagesApi~quoteImageFontDeleteCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete a font file. The user needs to be the owner of the font to be able to delete it. 
     * @param {String} id Font ID
     * @param {module:api/QuoteImagesApi~quoteImageFontDeleteCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageFontDelete(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageFontDelete");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/xml', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/font', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageFontListGet operation.
     * @callback module:api/QuoteImagesApi~quoteImageFontListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Lists background images in your private collection.  
     * @param {Object} opts Optional parameters
     * @param {Number} [start] Response is paged. This parameter determines where the response should start.
     * @param {module:api/QuoteImagesApi~quoteImageFontListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageFontListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start': opts['start']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/font/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageFontPost operation.
     * @callback module:api/QuoteImagesApi~quoteImageFontPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a font file for use later in creating a quote image. This is essentially a `PUT` but not many clients handle PUT with binary stream i.e. a file, gracefully.
     * @param {File} font Font file to add to your collection (ttf/otf are supported)
     * @param {Object} opts Optional parameters
     * @param {String} [tags] Optional comma separated tags
     * @param {module:api/QuoteImagesApi~quoteImageFontPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageFontPost(font, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'font' is set
      if (font === undefined || font === null) {
        throw new Error("Missing the required parameter 'font' when calling quoteImageFontPost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'font': font,
        'tags': opts['tags']
      };

      let authNames = ['BearerAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/font', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageFontSearchGet operation.
     * @callback module:api/QuoteImagesApi~quoteImageFontSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Searches for a font with a given tag.  
     * @param {Object} opts Optional parameters
     * @param {String} [query] Tag string
     * @param {module:api/QuoteImagesApi~quoteImageFontSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageFontSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/font/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageFontTagsAddPost operation.
     * @callback module:api/QuoteImagesApi~quoteImageFontTagsAddPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a tag to a given font.
     * @param {String} id Font ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/QuoteImagesApi~quoteImageFontTagsAddPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageFontTagsAddPost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageFontTagsAddPost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling quoteImageFontTagsAddPost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/font/tags/add', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageFontTagsRemovePost operation.
     * @callback module:api/QuoteImagesApi~quoteImageFontTagsRemovePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove a tag from a given Font.
     * @param {String} id Font ID
     * @param {String} tags Comma Separated tags
     * @param {module:api/QuoteImagesApi~quoteImageFontTagsRemovePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageFontTagsRemovePost(id, tags, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageFontTagsRemovePost");
      }
      // verify the required parameter 'tags' is set
      if (tags === undefined || tags === null) {
        throw new Error("Missing the required parameter 'tags' when calling quoteImageFontTagsRemovePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tags': tags
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/font/tags/remove', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageGet operation.
     * @callback module:api/QuoteImagesApi~quoteImageGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Quote image for a given id. Response can be an image file as a binary or a base64 encoded contents wrapped in json. `TODO` 
     * @param {String} id Quote Image id
     * @param {Object} opts Optional parameters
     * @param {Boolean} [binary = true)] Should the response be a direct file download of the image or a base64 encoded image file wrapped in json?
     * @param {module:api/QuoteImagesApi~quoteImageGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageGet(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling quoteImageGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'binary': opts['binary']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImagePut operation.
     * @callback module:api/QuoteImagesApi~quoteImagePutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a new quote image for a given quote. Choose background colors/images , choose different font styles and generate a beautiful quote image. Did you just had a feeling of being a god or what?! 
     * @param {String} quoteId Quote id
     * @param {Object} opts Optional parameters
     * @param {String} [bgimageId = 'theysaidso_default_background_image')] Background Image id ( Will override bgcolor if supplied)
     * @param {String} [bgColor] Background Color(if background image id is not supplied)
     * @param {String} [fontId = 'theysaidso_default_font')] Font id
     * @param {String} [textColor] Text Color
     * @param {String} [textSize] Text/font size
     * @param {String} [halign = 'center')] Horizontal text Alignment Value
     * @param {String} [valign = 'center')] Vertical text Alignment Value
     * @param {Number} [width] Image Width(By default this takes the width of the background image)
     * @param {Number} [height] Image Height(By default this takes the height of the background image)
     * @param {Boolean} [branding = false)] Disable They Said So branding (Only available in certain subscription levels. Ignored in other levels)
     * @param {Boolean} [includeTransparentLayer = true)] Should include a transparent layer between the text and the background image? This helps when the background image is bright and obscures the text.
     * @param {module:api/QuoteImagesApi~quoteImagePutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImagePut(quoteId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'quoteId' is set
      if (quoteId === undefined || quoteId === null) {
        throw new Error("Missing the required parameter 'quoteId' when calling quoteImagePut");
      }

      let pathParams = {
      };
      let queryParams = {
        'quote_id': quoteId,
        'bgimage_id': opts['bgimageId'],
        'bg_color': opts['bgColor'],
        'font_id': opts['fontId'],
        'text_color': opts['textColor'],
        'text_size': opts['textSize'],
        'halign': opts['halign'],
        'valign': opts['valign'],
        'width': opts['width'],
        'height': opts['height'],
        'branding': opts['branding'],
        'include_transparent_layer': opts['includeTransparentLayer']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the quoteImageSearchGet operation.
     * @callback module:api/QuoteImagesApi~quoteImageSearchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a Random Quote image. Optional `category` param determines the category of quote used in the image. Optional `author` param gets the quote image of a given author.  
     * @param {Object} opts Optional parameters
     * @param {String} [category] Quote Category
     * @param {String} [author] Quote Author
     * @param {Boolean} [_private = false)] Should search private collection. Default searches public image collection.
     * @param {module:api/QuoteImagesApi~quoteImageSearchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    quoteImageSearchGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'category': opts['category'],
        'author': opts['author'],
        'private': opts['_private']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['BearerAuth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/quote/image/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
