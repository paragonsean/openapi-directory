/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuoteApi_H
#define OAI_OAIQuoteApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQuoteResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuoteApi : public QObject {
    Q_OBJECT

public:
    OAIQuoteApi(const int timeOut = 0);
    ~OAIQuoteApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  language QString [optional]
    * @param[in]  detailed bool [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void quoteAuthorsPopularGet(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &detailed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  detailed bool [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void quoteAuthorsSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &detailed = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void quoteBookmarkToggleGet(const QString &quote_id);

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void quoteCategoriesPopularGet(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  query QString [optional]
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void quoteCategoriesSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [optional]
    */
    virtual void quoteGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  quote_id QString [required]
    */
    virtual void quoteLikeToggleGet(const QString &quote_id);

    /**
    * @param[in]  language QString [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void quoteRandomGet(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  category QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  minlength qint32 [optional]
    * @param[in]  maxlength qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  r_private bool [optional]
    * @param[in]  language QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  sfw bool [optional]
    */
    virtual void quoteSearchGet(const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &minlength = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &maxlength = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &sfw = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void quoteAuthorsPopularGetCallback(OAIHttpRequestWorker *worker);
    void quoteAuthorsSearchGetCallback(OAIHttpRequestWorker *worker);
    void quoteBookmarkToggleGetCallback(OAIHttpRequestWorker *worker);
    void quoteCategoriesPopularGetCallback(OAIHttpRequestWorker *worker);
    void quoteCategoriesSearchGetCallback(OAIHttpRequestWorker *worker);
    void quoteGetCallback(OAIHttpRequestWorker *worker);
    void quoteLikeToggleGetCallback(OAIHttpRequestWorker *worker);
    void quoteRandomGetCallback(OAIHttpRequestWorker *worker);
    void quoteSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void quoteAuthorsPopularGetSignal();
    void quoteAuthorsSearchGetSignal();
    void quoteBookmarkToggleGetSignal();
    void quoteCategoriesPopularGetSignal();
    void quoteCategoriesSearchGetSignal();
    void quoteGetSignal(OAIQuoteResponse summary);
    void quoteLikeToggleGetSignal();
    void quoteRandomGetSignal(OAIQuoteResponse summary);
    void quoteSearchGetSignal(OAIQuoteResponse summary);


    void quoteAuthorsPopularGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteAuthorsSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteBookmarkToggleGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteCategoriesPopularGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteCategoriesSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteGetSignalFull(OAIHttpRequestWorker *worker, OAIQuoteResponse summary);
    void quoteLikeToggleGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteRandomGetSignalFull(OAIHttpRequestWorker *worker, OAIQuoteResponse summary);
    void quoteSearchGetSignalFull(OAIHttpRequestWorker *worker, OAIQuoteResponse summary);

    Q_DECL_DEPRECATED_X("Use quoteAuthorsPopularGetSignalError() instead")
    void quoteAuthorsPopularGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteAuthorsPopularGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteAuthorsSearchGetSignalError() instead")
    void quoteAuthorsSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteAuthorsSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteBookmarkToggleGetSignalError() instead")
    void quoteBookmarkToggleGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteBookmarkToggleGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteCategoriesPopularGetSignalError() instead")
    void quoteCategoriesPopularGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteCategoriesPopularGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteCategoriesSearchGetSignalError() instead")
    void quoteCategoriesSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteCategoriesSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteGetSignalError() instead")
    void quoteGetSignalE(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteGetSignalError(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteLikeToggleGetSignalError() instead")
    void quoteLikeToggleGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteLikeToggleGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteRandomGetSignalError() instead")
    void quoteRandomGetSignalE(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteRandomGetSignalError(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteSearchGetSignalError() instead")
    void quoteSearchGetSignalE(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteSearchGetSignalError(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use quoteAuthorsPopularGetSignalErrorFull() instead")
    void quoteAuthorsPopularGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteAuthorsPopularGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteAuthorsSearchGetSignalErrorFull() instead")
    void quoteAuthorsSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteAuthorsSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteBookmarkToggleGetSignalErrorFull() instead")
    void quoteBookmarkToggleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteBookmarkToggleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteCategoriesPopularGetSignalErrorFull() instead")
    void quoteCategoriesPopularGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteCategoriesPopularGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteCategoriesSearchGetSignalErrorFull() instead")
    void quoteCategoriesSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteCategoriesSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteGetSignalErrorFull() instead")
    void quoteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteLikeToggleGetSignalErrorFull() instead")
    void quoteLikeToggleGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteLikeToggleGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteRandomGetSignalErrorFull() instead")
    void quoteRandomGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteRandomGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteSearchGetSignalErrorFull() instead")
    void quoteSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
