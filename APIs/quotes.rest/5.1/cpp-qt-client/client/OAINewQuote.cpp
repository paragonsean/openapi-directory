/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAINewQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAINewQuote::OAINewQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAINewQuote::OAINewQuote() {
    this->initializeModel();
}

OAINewQuote::~OAINewQuote() {}

void OAINewQuote::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAINewQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAINewQuote::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAINewQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAINewQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

QString OAINewQuote::getAuthor() const {
    return m_author;
}
void OAINewQuote::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAINewQuote::is_author_Set() const{
    return m_author_isSet;
}

bool OAINewQuote::is_author_Valid() const{
    return m_author_isValid;
}

QString OAINewQuote::getQuote() const {
    return m_quote;
}
void OAINewQuote::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAINewQuote::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAINewQuote::is_quote_Valid() const{
    return m_quote_isValid;
}

QList<QString> OAINewQuote::getTags() const {
    return m_tags;
}
void OAINewQuote::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAINewQuote::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAINewQuote::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAINewQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAINewQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quote_isValid && true;
}

} // namespace OpenAPI
