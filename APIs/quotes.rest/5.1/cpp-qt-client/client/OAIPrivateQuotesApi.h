/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateQuotesApi_H
#define OAI_OAIPrivateQuotesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQuoteResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateQuotesApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateQuotesApi(const int timeOut = 0);
    ~OAIPrivateQuotesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void quoteDelete(const QString &id);

    /**
    * @param[in]  id QString [optional]
    */
    virtual void quoteGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start qint32 [optional]
    * @param[in]  limit qint32 [optional]
    */
    virtual void quoteListGet(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  quote QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  tags QString [optional]
    */
    virtual void quotePatch(const QString &id, const ::OpenAPI::OptionalParam<QString> &quote = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  quote QString [required]
    * @param[in]  author QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void quotePost(const QString &quote, const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  quote QString [required]
    * @param[in]  author QString [optional]
    * @param[in]  tags QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void quotePut(const QString &quote, const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void quoteTagsAddPost(const QString &id, const QString &tags);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void quoteTagsRemovePost(const QString &id, const QString &tags);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void quoteDeleteCallback(OAIHttpRequestWorker *worker);
    void quoteGetCallback(OAIHttpRequestWorker *worker);
    void quoteListGetCallback(OAIHttpRequestWorker *worker);
    void quotePatchCallback(OAIHttpRequestWorker *worker);
    void quotePostCallback(OAIHttpRequestWorker *worker);
    void quotePutCallback(OAIHttpRequestWorker *worker);
    void quoteTagsAddPostCallback(OAIHttpRequestWorker *worker);
    void quoteTagsRemovePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void quoteDeleteSignal();
    void quoteGetSignal(OAIQuoteResponse summary);
    void quoteListGetSignal();
    void quotePatchSignal();
    void quotePostSignal();
    void quotePutSignal();
    void quoteTagsAddPostSignal();
    void quoteTagsRemovePostSignal();


    void quoteDeleteSignalFull(OAIHttpRequestWorker *worker);
    void quoteGetSignalFull(OAIHttpRequestWorker *worker, OAIQuoteResponse summary);
    void quoteListGetSignalFull(OAIHttpRequestWorker *worker);
    void quotePatchSignalFull(OAIHttpRequestWorker *worker);
    void quotePostSignalFull(OAIHttpRequestWorker *worker);
    void quotePutSignalFull(OAIHttpRequestWorker *worker);
    void quoteTagsAddPostSignalFull(OAIHttpRequestWorker *worker);
    void quoteTagsRemovePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use quoteDeleteSignalError() instead")
    void quoteDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteGetSignalError() instead")
    void quoteGetSignalE(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteGetSignalError(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteListGetSignalError() instead")
    void quoteListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePatchSignalError() instead")
    void quotePatchSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quotePatchSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostSignalError() instead")
    void quotePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePutSignalError() instead")
    void quotePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quotePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteTagsAddPostSignalError() instead")
    void quoteTagsAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteTagsAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteTagsRemovePostSignalError() instead")
    void quoteTagsRemovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteTagsRemovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use quoteDeleteSignalErrorFull() instead")
    void quoteDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteGetSignalErrorFull() instead")
    void quoteGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteListGetSignalErrorFull() instead")
    void quoteListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePatchSignalErrorFull() instead")
    void quotePatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePostSignalErrorFull() instead")
    void quotePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quotePutSignalErrorFull() instead")
    void quotePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quotePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteTagsAddPostSignalErrorFull() instead")
    void quoteTagsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteTagsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteTagsRemovePostSignalErrorFull() instead")
    void quoteTagsRemovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteTagsRemovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
