/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIQuoteImagesApi_H
#define OAI_OAIQuoteImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIHttpFileElement.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIQuoteImagesApi : public QObject {
    Q_OBJECT

public:
    OAIQuoteImagesApi(const int timeOut = 0);
    ~OAIQuoteImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void quoteImageBackgroundDelete(const QString &id);

    /**
    * @param[in]  start qint32 [optional]
    */
    virtual void quoteImageBackgroundListGet(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  image OAIHttpFileElement [required]
    * @param[in]  tags QString [optional]
    */
    virtual void quoteImageBackgroundPost(const OAIHttpFileElement &image, const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    */
    virtual void quoteImageBackgroundSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void quoteImageBackgroundTagsAddPost(const QString &id, const QString &tags);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void quoteImageBackgroundTagsRemovePost(const QString &id, const QString &tags);

    /**
    * @param[in]  id QString [required]
    */
    virtual void quoteImageDelete(const QString &id);

    /**
    * @param[in]  id QString [required]
    */
    virtual void quoteImageFontDelete(const QString &id);

    /**
    * @param[in]  start qint32 [optional]
    */
    virtual void quoteImageFontListGet(const ::OpenAPI::OptionalParam<qint32> &start = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  font OAIHttpFileElement [required]
    * @param[in]  tags QString [optional]
    */
    virtual void quoteImageFontPost(const OAIHttpFileElement &font, const ::OpenAPI::OptionalParam<QString> &tags = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [optional]
    */
    virtual void quoteImageFontSearchGet(const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void quoteImageFontTagsAddPost(const QString &id, const QString &tags);

    /**
    * @param[in]  id QString [required]
    * @param[in]  tags QString [required]
    */
    virtual void quoteImageFontTagsRemovePost(const QString &id, const QString &tags);

    /**
    * @param[in]  id QString [required]
    * @param[in]  binary bool [optional]
    */
    virtual void quoteImageGet(const QString &id, const ::OpenAPI::OptionalParam<bool> &binary = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  quote_id QString [required]
    * @param[in]  bgimage_id QString [optional]
    * @param[in]  bg_color QString [optional]
    * @param[in]  font_id QString [optional]
    * @param[in]  text_color QString [optional]
    * @param[in]  text_size QString [optional]
    * @param[in]  halign QString [optional]
    * @param[in]  valign QString [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  branding bool [optional]
    * @param[in]  include_transparent_layer bool [optional]
    */
    virtual void quoteImagePut(const QString &quote_id, const ::OpenAPI::OptionalParam<QString> &bgimage_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &bg_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &font_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text_size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &halign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &valign = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &branding = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &include_transparent_layer = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  category QString [optional]
    * @param[in]  author QString [optional]
    * @param[in]  r_private bool [optional]
    */
    virtual void quoteImageSearchGet(const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &author = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void quoteImageBackgroundDeleteCallback(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundListGetCallback(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundPostCallback(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundSearchGetCallback(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundTagsAddPostCallback(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundTagsRemovePostCallback(OAIHttpRequestWorker *worker);
    void quoteImageDeleteCallback(OAIHttpRequestWorker *worker);
    void quoteImageFontDeleteCallback(OAIHttpRequestWorker *worker);
    void quoteImageFontListGetCallback(OAIHttpRequestWorker *worker);
    void quoteImageFontPostCallback(OAIHttpRequestWorker *worker);
    void quoteImageFontSearchGetCallback(OAIHttpRequestWorker *worker);
    void quoteImageFontTagsAddPostCallback(OAIHttpRequestWorker *worker);
    void quoteImageFontTagsRemovePostCallback(OAIHttpRequestWorker *worker);
    void quoteImageGetCallback(OAIHttpRequestWorker *worker);
    void quoteImagePutCallback(OAIHttpRequestWorker *worker);
    void quoteImageSearchGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void quoteImageBackgroundDeleteSignal();
    void quoteImageBackgroundListGetSignal();
    void quoteImageBackgroundPostSignal();
    void quoteImageBackgroundSearchGetSignal();
    void quoteImageBackgroundTagsAddPostSignal();
    void quoteImageBackgroundTagsRemovePostSignal();
    void quoteImageDeleteSignal();
    void quoteImageFontDeleteSignal();
    void quoteImageFontListGetSignal();
    void quoteImageFontPostSignal();
    void quoteImageFontSearchGetSignal();
    void quoteImageFontTagsAddPostSignal();
    void quoteImageFontTagsRemovePostSignal();
    void quoteImageGetSignal();
    void quoteImagePutSignal();
    void quoteImageSearchGetSignal();


    void quoteImageBackgroundDeleteSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundListGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundPostSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundTagsAddPostSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageBackgroundTagsRemovePostSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageDeleteSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageFontDeleteSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageFontListGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageFontPostSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageFontSearchGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageFontTagsAddPostSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageFontTagsRemovePostSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageGetSignalFull(OAIHttpRequestWorker *worker);
    void quoteImagePutSignalFull(OAIHttpRequestWorker *worker);
    void quoteImageSearchGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundDeleteSignalError() instead")
    void quoteImageBackgroundDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundListGetSignalError() instead")
    void quoteImageBackgroundListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundPostSignalError() instead")
    void quoteImageBackgroundPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundSearchGetSignalError() instead")
    void quoteImageBackgroundSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundTagsAddPostSignalError() instead")
    void quoteImageBackgroundTagsAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundTagsAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundTagsRemovePostSignalError() instead")
    void quoteImageBackgroundTagsRemovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundTagsRemovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageDeleteSignalError() instead")
    void quoteImageDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontDeleteSignalError() instead")
    void quoteImageFontDeleteSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontDeleteSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontListGetSignalError() instead")
    void quoteImageFontListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontPostSignalError() instead")
    void quoteImageFontPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontSearchGetSignalError() instead")
    void quoteImageFontSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontTagsAddPostSignalError() instead")
    void quoteImageFontTagsAddPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontTagsAddPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontTagsRemovePostSignalError() instead")
    void quoteImageFontTagsRemovePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontTagsRemovePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageGetSignalError() instead")
    void quoteImageGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImagePutSignalError() instead")
    void quoteImagePutSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImagePutSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageSearchGetSignalError() instead")
    void quoteImageSearchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageSearchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundDeleteSignalErrorFull() instead")
    void quoteImageBackgroundDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundListGetSignalErrorFull() instead")
    void quoteImageBackgroundListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundPostSignalErrorFull() instead")
    void quoteImageBackgroundPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundSearchGetSignalErrorFull() instead")
    void quoteImageBackgroundSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundTagsAddPostSignalErrorFull() instead")
    void quoteImageBackgroundTagsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundTagsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageBackgroundTagsRemovePostSignalErrorFull() instead")
    void quoteImageBackgroundTagsRemovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageBackgroundTagsRemovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageDeleteSignalErrorFull() instead")
    void quoteImageDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontDeleteSignalErrorFull() instead")
    void quoteImageFontDeleteSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontDeleteSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontListGetSignalErrorFull() instead")
    void quoteImageFontListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontPostSignalErrorFull() instead")
    void quoteImageFontPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontSearchGetSignalErrorFull() instead")
    void quoteImageFontSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontTagsAddPostSignalErrorFull() instead")
    void quoteImageFontTagsAddPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontTagsAddPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageFontTagsRemovePostSignalErrorFull() instead")
    void quoteImageFontTagsRemovePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageFontTagsRemovePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageGetSignalErrorFull() instead")
    void quoteImageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImagePutSignalErrorFull() instead")
    void quoteImagePutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImagePutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use quoteImageSearchGetSignalErrorFull() instead")
    void quoteImageSearchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void quoteImageSearchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
