/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIPrivateQODApi_H
#define OAI_OAIPrivateQODApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIQODResponse.h"
#include "OAIQuoteResponse.h"
#include "OAISuccessResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIPrivateQODApi : public QObject {
    Q_OBJECT

public:
    OAIPrivateQODApi(const int timeOut = 0);
    ~OAIPrivateQODApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  category QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  id QString [optional]
    */
    virtual void qodGet(const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  title QString [required]
    * @param[in]  repeat_after qint32 [optional]
    * @param[in]  authors QList [optional]
    * @param[in]  r_private bool [optional]
    * @param[in]  language QString [optional]
    * @param[in]  sfw bool [optional]
    */
    virtual void qodPatch(const QString &title, const ::OpenAPI::OptionalParam<qint32> &repeat_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList> &authors = ::OpenAPI::OptionalParam<QList>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sfw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  title QString [required]
    * @param[in]  repeat_after qint32 [optional]
    * @param[in]  authors QList [optional]
    * @param[in]  r_private bool [optional]
    * @param[in]  language QString [optional]
    * @param[in]  sfw bool [optional]
    */
    virtual void qodPut(const QString &title, const ::OpenAPI::OptionalParam<qint32> &repeat_after = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList> &authors = ::OpenAPI::OptionalParam<QList>(), const ::OpenAPI::OptionalParam<bool> &r_private = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sfw = ::OpenAPI::OptionalParam<bool>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void qodGetCallback(OAIHttpRequestWorker *worker);
    void qodPatchCallback(OAIHttpRequestWorker *worker);
    void qodPutCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void qodGetSignal(OAIQODResponse summary);
    void qodPatchSignal(OAIQuoteResponse summary);
    void qodPutSignal(OAISuccessResponse summary);


    void qodGetSignalFull(OAIHttpRequestWorker *worker, OAIQODResponse summary);
    void qodPatchSignalFull(OAIHttpRequestWorker *worker, OAIQuoteResponse summary);
    void qodPutSignalFull(OAIHttpRequestWorker *worker, OAISuccessResponse summary);

    Q_DECL_DEPRECATED_X("Use qodGetSignalError() instead")
    void qodGetSignalE(OAIQODResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void qodGetSignalError(OAIQODResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qodPatchSignalError() instead")
    void qodPatchSignalE(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void qodPatchSignalError(OAIQuoteResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qodPutSignalError() instead")
    void qodPutSignalE(OAISuccessResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void qodPutSignalError(OAISuccessResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use qodGetSignalErrorFull() instead")
    void qodGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qodGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qodPatchSignalErrorFull() instead")
    void qodPatchSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qodPatchSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use qodPutSignalErrorFull() instead")
    void qodPutSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void qodPutSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
