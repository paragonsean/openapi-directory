/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISuccessResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISuccessResponse::OAISuccessResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISuccessResponse::OAISuccessResponse() {
    this->initializeModel();
}

OAISuccessResponse::~OAISuccessResponse() {}

void OAISuccessResponse::initializeModel() {

    m_contents_isSet = false;
    m_contents_isValid = false;

    m_success_isSet = false;
    m_success_isValid = false;
}

void OAISuccessResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISuccessResponse::fromJsonObject(QJsonObject json) {

    m_contents_isValid = ::OpenAPI::fromJsonValue(m_contents, json[QString("contents")]);
    m_contents_isSet = !json[QString("contents")].isNull() && m_contents_isValid;

    m_success_isValid = ::OpenAPI::fromJsonValue(m_success, json[QString("success")]);
    m_success_isSet = !json[QString("success")].isNull() && m_success_isValid;
}

QString OAISuccessResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISuccessResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_contents.size() > 0) {
        obj.insert(QString("contents"), ::OpenAPI::toJsonValue(m_contents));
    }
    if (m_success_isSet) {
        obj.insert(QString("success"), ::OpenAPI::toJsonValue(m_success));
    }
    return obj;
}

QList<QJsonValue> OAISuccessResponse::getContents() const {
    return m_contents;
}
void OAISuccessResponse::setContents(const QList<QJsonValue> &contents) {
    m_contents = contents;
    m_contents_isSet = true;
}

bool OAISuccessResponse::is_contents_Set() const{
    return m_contents_isSet;
}

bool OAISuccessResponse::is_contents_Valid() const{
    return m_contents_isValid;
}

QString OAISuccessResponse::getSuccess() const {
    return m_success;
}
void OAISuccessResponse::setSuccess(const QString &success) {
    m_success = success;
    m_success_isSet = true;
}

bool OAISuccessResponse::is_success_Set() const{
    return m_success_isSet;
}

bool OAISuccessResponse::is_success_Valid() const{
    return m_success_isValid;
}

bool OAISuccessResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contents.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_success_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISuccessResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
