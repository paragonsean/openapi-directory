/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuote.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuote::OAIQuote(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuote::OAIQuote() {
    this->initializeModel();
}

OAIQuote::~OAIQuote() {}

void OAIQuote::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_quote_isSet = false;
    m_quote_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_length_isSet = false;
    m_length_isValid = false;
}

void OAIQuote::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuote::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_quote_isValid = ::OpenAPI::fromJsonValue(m_quote, json[QString("quote")]);
    m_quote_isSet = !json[QString("quote")].isNull() && m_quote_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_length_isValid = ::OpenAPI::fromJsonValue(m_length, json[QString("length")]);
    m_length_isSet = !json[QString("length")].isNull() && m_length_isValid;
}

QString OAIQuote::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuote::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_quote_isSet) {
        obj.insert(QString("quote"), ::OpenAPI::toJsonValue(m_quote));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_length_isSet) {
        obj.insert(QString("length"), ::OpenAPI::toJsonValue(m_length));
    }
    return obj;
}

QString OAIQuote::getAuthor() const {
    return m_author;
}
void OAIQuote::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIQuote::is_author_Set() const{
    return m_author_isSet;
}

bool OAIQuote::is_author_Valid() const{
    return m_author_isValid;
}

QString OAIQuote::getQuote() const {
    return m_quote;
}
void OAIQuote::setQuote(const QString &quote) {
    m_quote = quote;
    m_quote_isSet = true;
}

bool OAIQuote::is_quote_Set() const{
    return m_quote_isSet;
}

bool OAIQuote::is_quote_Valid() const{
    return m_quote_isValid;
}

QList<QString> OAIQuote::getTags() const {
    return m_tags;
}
void OAIQuote::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIQuote::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIQuote::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIQuote::getId() const {
    return m_id;
}
void OAIQuote::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIQuote::is_id_Set() const{
    return m_id_isSet;
}

bool OAIQuote::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIQuote::getImage() const {
    return m_image;
}
void OAIQuote::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIQuote::is_image_Set() const{
    return m_image_isSet;
}

bool OAIQuote::is_image_Valid() const{
    return m_image_isValid;
}

qint32 OAIQuote::getLength() const {
    return m_length;
}
void OAIQuote::setLength(const qint32 &length) {
    m_length = length;
    m_length_isSet = true;
}

bool OAIQuote::is_length_Set() const{
    return m_length_isSet;
}

bool OAIQuote::is_length_Valid() const{
    return m_length_isValid;
}

bool OAIQuote::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quote_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_length_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuote::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_quote_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
