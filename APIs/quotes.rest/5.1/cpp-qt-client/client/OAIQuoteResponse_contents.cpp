/**
 * They Said So Quotes API
 *  They Said So Quotes API offers a complete feature rich REST API access to its quotes platform.  This is the documentation for the world famous [quotes API](https://theysaidso.com/api).  If you are a subscriber and you are trying this from a console you can use Bearer token with your api key as the token. You can test and play with the API right here on this web page. Please note recently we closed downs public access without api key to prevent abuse. The public routes are still available to use free of charge but requires a api token. You can get one for free at our website. For using the private end points and subscribing to the API please visit [https://theysaidso.com/api](https://theysaidso.com/api).
 *
 * The version of the OpenAPI document: 5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIQuoteResponse_contents.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIQuoteResponse_contents::OAIQuoteResponse_contents(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIQuoteResponse_contents::OAIQuoteResponse_contents() {
    this->initializeModel();
}

OAIQuoteResponse_contents::~OAIQuoteResponse_contents() {}

void OAIQuoteResponse_contents::initializeModel() {

    m_quotes_isSet = false;
    m_quotes_isValid = false;
}

void OAIQuoteResponse_contents::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIQuoteResponse_contents::fromJsonObject(QJsonObject json) {

    m_quotes_isValid = ::OpenAPI::fromJsonValue(m_quotes, json[QString("quotes")]);
    m_quotes_isSet = !json[QString("quotes")].isNull() && m_quotes_isValid;
}

QString OAIQuoteResponse_contents::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIQuoteResponse_contents::asJsonObject() const {
    QJsonObject obj;
    if (m_quotes.size() > 0) {
        obj.insert(QString("quotes"), ::OpenAPI::toJsonValue(m_quotes));
    }
    return obj;
}

QList<OAIQuote> OAIQuoteResponse_contents::getQuotes() const {
    return m_quotes;
}
void OAIQuoteResponse_contents::setQuotes(const QList<OAIQuote> &quotes) {
    m_quotes = quotes;
    m_quotes_isSet = true;
}

bool OAIQuoteResponse_contents::is_quotes_Set() const{
    return m_quotes_isSet;
}

bool OAIQuoteResponse_contents::is_quotes_Valid() const{
    return m_quotes_isValid;
}

bool OAIQuoteResponse_contents::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_quotes.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIQuoteResponse_contents::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
