# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class NewQuote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, quote: str=None, tags: List[str]=None):
        """NewQuote - a model defined in OpenAPI

        :param author: The author of this NewQuote.
        :param quote: The quote of this NewQuote.
        :param tags: The tags of this NewQuote.
        """
        self.openapi_types = {
            'author': str,
            'quote': str,
            'tags': List[str]
        }

        self.attribute_map = {
            'author': 'author',
            'quote': 'quote',
            'tags': 'tags'
        }

        self._author = author
        self._quote = quote
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewQuote':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The NewQuote of this NewQuote.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this NewQuote.

        Author name of quote.

        :return: The author of this NewQuote.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this NewQuote.

        Author name of quote.

        :param author: The author of this NewQuote.
        :type author: str
        """

        self._author = author

    @property
    def quote(self):
        """Gets the quote of this NewQuote.

        The Quote.

        :return: The quote of this NewQuote.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this NewQuote.

        The Quote.

        :param quote: The quote of this NewQuote.
        :type quote: str
        """
        if quote is None:
            raise ValueError("Invalid value for `quote`, must not be `None`")

        self._quote = quote

    @property
    def tags(self):
        """Gets the tags of this NewQuote.

        Array of tags/categories.

        :return: The tags of this NewQuote.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this NewQuote.

        Array of tags/categories.

        :param tags: The tags of this NewQuote.
        :type tags: List[str]
        """

        self._tags = tags
