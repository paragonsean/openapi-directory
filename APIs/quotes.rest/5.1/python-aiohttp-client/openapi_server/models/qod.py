# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class QOD(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, quote: str=None, tags: List[str]=None, id: str=None, image: str=None, length: int=None, _date: str=None, title: str=None):
        """QOD - a model defined in OpenAPI

        :param author: The author of this QOD.
        :param quote: The quote of this QOD.
        :param tags: The tags of this QOD.
        :param id: The id of this QOD.
        :param image: The image of this QOD.
        :param length: The length of this QOD.
        :param _date: The _date of this QOD.
        :param title: The title of this QOD.
        """
        self.openapi_types = {
            'author': str,
            'quote': str,
            'tags': List[str],
            'id': str,
            'image': str,
            'length': int,
            '_date': str,
            'title': str
        }

        self.attribute_map = {
            'author': 'author',
            'quote': 'quote',
            'tags': 'tags',
            'id': 'id',
            'image': 'image',
            'length': 'length',
            '_date': 'date',
            'title': 'title'
        }

        self._author = author
        self._quote = quote
        self._tags = tags
        self._id = id
        self._image = image
        self._length = length
        self.__date = _date
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'QOD':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The QOD of this QOD.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this QOD.

        Author name of quote.

        :return: The author of this QOD.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this QOD.

        Author name of quote.

        :param author: The author of this QOD.
        :type author: str
        """

        self._author = author

    @property
    def quote(self):
        """Gets the quote of this QOD.

        The Quote.

        :return: The quote of this QOD.
        :rtype: str
        """
        return self._quote

    @quote.setter
    def quote(self, quote):
        """Sets the quote of this QOD.

        The Quote.

        :param quote: The quote of this QOD.
        :type quote: str
        """
        if quote is None:
            raise ValueError("Invalid value for `quote`, must not be `None`")

        self._quote = quote

    @property
    def tags(self):
        """Gets the tags of this QOD.

        Array of tags/categories.

        :return: The tags of this QOD.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this QOD.

        Array of tags/categories.

        :param tags: The tags of this QOD.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def id(self):
        """Gets the id of this QOD.

        Unique identifier representing a specific quote in theysaidso.com.

        :return: The id of this QOD.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QOD.

        Unique identifier representing a specific quote in theysaidso.com.

        :param id: The id of this QOD.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this QOD.

        Image URL that can be used for background to display this quote.

        :return: The image of this QOD.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this QOD.

        Image URL that can be used for background to display this quote.

        :param image: The image of this QOD.
        :type image: str
        """

        self._image = image

    @property
    def length(self):
        """Gets the length of this QOD.

        Length of the quote string.

        :return: The length of this QOD.
        :rtype: int
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this QOD.

        Length of the quote string.

        :param length: The length of this QOD.
        :type length: int
        """

        self._length = length

    @property
    def _date(self):
        """Gets the _date of this QOD.

        Date this quote of the day belongs to

        :return: The _date of this QOD.
        :rtype: str
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this QOD.

        Date this quote of the day belongs to

        :param _date: The _date of this QOD.
        :type _date: str
        """
        if _date is None:
            raise ValueError("Invalid value for `_date`, must not be `None`")

        self.__date = _date

    @property
    def title(self):
        """Gets the title of this QOD.

        Title of the QOD category

        :return: The title of this QOD.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this QOD.

        Title of the QOD category

        :param title: The title of this QOD.
        :type title: str
        """

        self._title = title
