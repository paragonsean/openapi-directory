/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  weight_lb double [required]
    * @param[in]  origin_address double [optional]
    * @param[in]  destination_address double [optional]
    * @param[in]  distance_mi double [optional]
    * @param[in]  transportation_method QString [optional]
    */
    virtual void apiV1DonationsCarbonCalculateGet(const double &weight_lb, const ::OpenAPI::OptionalParam<double> &origin_address = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &destination_address = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &distance_mi = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &transportation_method = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id double [optional]
    */
    virtual void apiV1DonationsCarbonStatsGet(const ::OpenAPI::OptionalParam<double> &id = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  amount QString [required]
    * @param[in]  nonprofit_id QString [required]
    * @param[in]  funding_source QString [required]
    * @param[in]  zip_code QString [optional]
    */
    virtual void apiV1DonationsCreatePost(const QString &amount, const QString &nonprofit_id, const QString &funding_source, const ::OpenAPI::OptionalParam<QString> &zip_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  currency QString [required]
    * @param[in]  count double [optional]
    */
    virtual void apiV1DonationsCryptoCalculateGet(const QString &currency, const ::OpenAPI::OptionalParam<double> &count = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  page double [optional]
    */
    virtual void apiV1DonationsIndexGet(const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1DonationsShowGet(const QString &id);

    /**
    * @param[in]  name QString [optional]
    * @param[in]  page double [optional]
    */
    virtual void apiV1NonprofitsListGet(const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &page = ::OpenAPI::OptionalParam<double>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void apiV1NonprofitsShowGet(const QString &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void apiV1DonationsCarbonCalculateGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DonationsCarbonStatsGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DonationsCreatePostCallback(OAIHttpRequestWorker *worker);
    void apiV1DonationsCryptoCalculateGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DonationsIndexGetCallback(OAIHttpRequestWorker *worker);
    void apiV1DonationsShowGetCallback(OAIHttpRequestWorker *worker);
    void apiV1NonprofitsListGetCallback(OAIHttpRequestWorker *worker);
    void apiV1NonprofitsShowGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void apiV1DonationsCarbonCalculateGetSignal();
    void apiV1DonationsCarbonStatsGetSignal();
    void apiV1DonationsCreatePostSignal();
    void apiV1DonationsCryptoCalculateGetSignal();
    void apiV1DonationsIndexGetSignal();
    void apiV1DonationsShowGetSignal();
    void apiV1NonprofitsListGetSignal();
    void apiV1NonprofitsShowGetSignal();


    void apiV1DonationsCarbonCalculateGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV1DonationsCarbonStatsGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV1DonationsCreatePostSignalFull(OAIHttpRequestWorker *worker);
    void apiV1DonationsCryptoCalculateGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV1DonationsIndexGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV1DonationsShowGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV1NonprofitsListGetSignalFull(OAIHttpRequestWorker *worker);
    void apiV1NonprofitsShowGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use apiV1DonationsCarbonCalculateGetSignalError() instead")
    void apiV1DonationsCarbonCalculateGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCarbonCalculateGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsCarbonStatsGetSignalError() instead")
    void apiV1DonationsCarbonStatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCarbonStatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsCreatePostSignalError() instead")
    void apiV1DonationsCreatePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCreatePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsCryptoCalculateGetSignalError() instead")
    void apiV1DonationsCryptoCalculateGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCryptoCalculateGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsIndexGetSignalError() instead")
    void apiV1DonationsIndexGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsIndexGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsShowGetSignalError() instead")
    void apiV1DonationsShowGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsShowGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NonprofitsListGetSignalError() instead")
    void apiV1NonprofitsListGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NonprofitsListGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NonprofitsShowGetSignalError() instead")
    void apiV1NonprofitsShowGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NonprofitsShowGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use apiV1DonationsCarbonCalculateGetSignalErrorFull() instead")
    void apiV1DonationsCarbonCalculateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCarbonCalculateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsCarbonStatsGetSignalErrorFull() instead")
    void apiV1DonationsCarbonStatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCarbonStatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsCreatePostSignalErrorFull() instead")
    void apiV1DonationsCreatePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCreatePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsCryptoCalculateGetSignalErrorFull() instead")
    void apiV1DonationsCryptoCalculateGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsCryptoCalculateGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsIndexGetSignalErrorFull() instead")
    void apiV1DonationsIndexGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsIndexGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1DonationsShowGetSignalErrorFull() instead")
    void apiV1DonationsShowGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1DonationsShowGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NonprofitsListGetSignalErrorFull() instead")
    void apiV1NonprofitsListGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NonprofitsListGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use apiV1NonprofitsShowGetSignalErrorFull() instead")
    void apiV1NonprofitsShowGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void apiV1NonprofitsShowGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
