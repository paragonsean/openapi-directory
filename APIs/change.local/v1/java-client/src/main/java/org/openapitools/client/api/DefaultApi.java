/*
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for apiV1DonationsCarbonCalculateGet
     * @param weightLb The total weight (in pounds) of the shipment. (required)
     * @param originAddress The origin zip code (US only) of the shipment. If you send this parameter, also send &#x60;destination_address&#x60;. (optional)
     * @param destinationAddress The destination zip code (US only) of the shipment. If you send this parameter, also send &#x60;origin_address&#x60;. (optional)
     * @param distanceMi The total distance (in miles) of the shipment. You can use this parameter in place of &#x60;origin_address&#x60; and &#x60;destination_address&#x60;. (optional)
     * @param transportationMethod The primary transportation method of the shipment. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCarbonCalculateGetCall(BigDecimal weightLb, BigDecimal originAddress, BigDecimal destinationAddress, BigDecimal distanceMi, String transportationMethod, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/donations/carbon_calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (originAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("origin_address", originAddress));
        }

        if (destinationAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("destination_address", destinationAddress));
        }

        if (distanceMi != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("distance_mi", distanceMi));
        }

        if (weightLb != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("weight_lb", weightLb));
        }

        if (transportationMethod != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transportation_method", transportationMethod));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DonationsCarbonCalculateGetValidateBeforeCall(BigDecimal weightLb, BigDecimal originAddress, BigDecimal destinationAddress, BigDecimal distanceMi, String transportationMethod, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'weightLb' is set
        if (weightLb == null) {
            throw new ApiException("Missing the required parameter 'weightLb' when calling apiV1DonationsCarbonCalculateGet(Async)");
        }

        return apiV1DonationsCarbonCalculateGetCall(weightLb, originAddress, destinationAddress, distanceMi, transportationMethod, _callback);

    }

    /**
     * Calculate shipping carbon offset
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a physical shipment. This calculation depends on the weight, primary transportation method, and distance of the shipment. Provide the distance of the shipment using the origin and destination address, or directly with the number of miles. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param weightLb The total weight (in pounds) of the shipment. (required)
     * @param originAddress The origin zip code (US only) of the shipment. If you send this parameter, also send &#x60;destination_address&#x60;. (optional)
     * @param destinationAddress The destination zip code (US only) of the shipment. If you send this parameter, also send &#x60;origin_address&#x60;. (optional)
     * @param distanceMi The total distance (in miles) of the shipment. You can use this parameter in place of &#x60;origin_address&#x60; and &#x60;destination_address&#x60;. (optional)
     * @param transportationMethod The primary transportation method of the shipment. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1DonationsCarbonCalculateGet(BigDecimal weightLb, BigDecimal originAddress, BigDecimal destinationAddress, BigDecimal distanceMi, String transportationMethod) throws ApiException {
        apiV1DonationsCarbonCalculateGetWithHttpInfo(weightLb, originAddress, destinationAddress, distanceMi, transportationMethod);
    }

    /**
     * Calculate shipping carbon offset
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a physical shipment. This calculation depends on the weight, primary transportation method, and distance of the shipment. Provide the distance of the shipment using the origin and destination address, or directly with the number of miles. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param weightLb The total weight (in pounds) of the shipment. (required)
     * @param originAddress The origin zip code (US only) of the shipment. If you send this parameter, also send &#x60;destination_address&#x60;. (optional)
     * @param destinationAddress The destination zip code (US only) of the shipment. If you send this parameter, also send &#x60;origin_address&#x60;. (optional)
     * @param distanceMi The total distance (in miles) of the shipment. You can use this parameter in place of &#x60;origin_address&#x60; and &#x60;destination_address&#x60;. (optional)
     * @param transportationMethod The primary transportation method of the shipment. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1DonationsCarbonCalculateGetWithHttpInfo(BigDecimal weightLb, BigDecimal originAddress, BigDecimal destinationAddress, BigDecimal distanceMi, String transportationMethod) throws ApiException {
        okhttp3.Call localVarCall = apiV1DonationsCarbonCalculateGetValidateBeforeCall(weightLb, originAddress, destinationAddress, distanceMi, transportationMethod, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Calculate shipping carbon offset (asynchronously)
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a physical shipment. This calculation depends on the weight, primary transportation method, and distance of the shipment. Provide the distance of the shipment using the origin and destination address, or directly with the number of miles. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param weightLb The total weight (in pounds) of the shipment. (required)
     * @param originAddress The origin zip code (US only) of the shipment. If you send this parameter, also send &#x60;destination_address&#x60;. (optional)
     * @param destinationAddress The destination zip code (US only) of the shipment. If you send this parameter, also send &#x60;origin_address&#x60;. (optional)
     * @param distanceMi The total distance (in miles) of the shipment. You can use this parameter in place of &#x60;origin_address&#x60; and &#x60;destination_address&#x60;. (optional)
     * @param transportationMethod The primary transportation method of the shipment. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCarbonCalculateGetAsync(BigDecimal weightLb, BigDecimal originAddress, BigDecimal destinationAddress, BigDecimal distanceMi, String transportationMethod, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DonationsCarbonCalculateGetValidateBeforeCall(weightLb, originAddress, destinationAddress, distanceMi, transportationMethod, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DonationsCarbonStatsGet
     * @param id The id of a donation to the CarbonFund nonprofit. Ids are returned when a donation is created. If an ID is not provided, the total stats for all donations to CarbonFund are returned. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCarbonStatsGetCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/donations/carbon_stats";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DonationsCarbonStatsGetValidateBeforeCall(BigDecimal id, final ApiCallback _callback) throws ApiException {
        return apiV1DonationsCarbonStatsGetCall(id, _callback);

    }

    /**
     * Retrieve carbon offset stats
     * Measures your carbon offset impact in relatable terms. Provide the id of a donation to CarbonFund to see stats about that specific donation. If you omit the donation id, this endpoint returns aggregate stats for all of your CarbonFund donations.
     * @param id The id of a donation to the CarbonFund nonprofit. Ids are returned when a donation is created. If an ID is not provided, the total stats for all donations to CarbonFund are returned. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1DonationsCarbonStatsGet(BigDecimal id) throws ApiException {
        apiV1DonationsCarbonStatsGetWithHttpInfo(id);
    }

    /**
     * Retrieve carbon offset stats
     * Measures your carbon offset impact in relatable terms. Provide the id of a donation to CarbonFund to see stats about that specific donation. If you omit the donation id, this endpoint returns aggregate stats for all of your CarbonFund donations.
     * @param id The id of a donation to the CarbonFund nonprofit. Ids are returned when a donation is created. If an ID is not provided, the total stats for all donations to CarbonFund are returned. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1DonationsCarbonStatsGetWithHttpInfo(BigDecimal id) throws ApiException {
        okhttp3.Call localVarCall = apiV1DonationsCarbonStatsGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve carbon offset stats (asynchronously)
     * Measures your carbon offset impact in relatable terms. Provide the id of a donation to CarbonFund to see stats about that specific donation. If you omit the donation id, this endpoint returns aggregate stats for all of your CarbonFund donations.
     * @param id The id of a donation to the CarbonFund nonprofit. Ids are returned when a donation is created. If an ID is not provided, the total stats for all donations to CarbonFund are returned. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCarbonStatsGetAsync(BigDecimal id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DonationsCarbonStatsGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DonationsCreatePost
     * @param amount The amount of the donation in cents. (required)
     * @param nonprofitId The id of a nonprofit from the CHANGE network. (required)
     * @param fundingSource Source of the donation funds. If you are collecting payment from your customer for the donation, use &#x60;customer&#x60;. (required)
     * @param zipCode The customer&#39;s zip code. Provide this to unlock geographic insights. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Donation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Param &#x60;nonprofit_id&#x60; invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCreatePostCall(String amount, String nonprofitId, String fundingSource, String zipCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/donations/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (nonprofitId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nonprofit_id", nonprofitId));
        }

        if (fundingSource != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("funding_source", fundingSource));
        }

        if (zipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zip_code", zipCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DonationsCreatePostValidateBeforeCall(String amount, String nonprofitId, String fundingSource, String zipCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling apiV1DonationsCreatePost(Async)");
        }

        // verify the required parameter 'nonprofitId' is set
        if (nonprofitId == null) {
            throw new ApiException("Missing the required parameter 'nonprofitId' when calling apiV1DonationsCreatePost(Async)");
        }

        // verify the required parameter 'fundingSource' is set
        if (fundingSource == null) {
            throw new ApiException("Missing the required parameter 'fundingSource' when calling apiV1DonationsCreatePost(Async)");
        }

        return apiV1DonationsCreatePostCall(amount, nonprofitId, fundingSource, zipCode, _callback);

    }

    /**
     * Create a donation
     * Creates a donation to any nonprofit. CHANGE keeps track of your donations, bills you at the end of the month, and handles the nonprofit payouts for you.
     * @param amount The amount of the donation in cents. (required)
     * @param nonprofitId The id of a nonprofit from the CHANGE network. (required)
     * @param fundingSource Source of the donation funds. If you are collecting payment from your customer for the donation, use &#x60;customer&#x60;. (required)
     * @param zipCode The customer&#39;s zip code. Provide this to unlock geographic insights. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Donation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Param &#x60;nonprofit_id&#x60; invalid </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1DonationsCreatePost(String amount, String nonprofitId, String fundingSource, String zipCode) throws ApiException {
        apiV1DonationsCreatePostWithHttpInfo(amount, nonprofitId, fundingSource, zipCode);
    }

    /**
     * Create a donation
     * Creates a donation to any nonprofit. CHANGE keeps track of your donations, bills you at the end of the month, and handles the nonprofit payouts for you.
     * @param amount The amount of the donation in cents. (required)
     * @param nonprofitId The id of a nonprofit from the CHANGE network. (required)
     * @param fundingSource Source of the donation funds. If you are collecting payment from your customer for the donation, use &#x60;customer&#x60;. (required)
     * @param zipCode The customer&#39;s zip code. Provide this to unlock geographic insights. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Donation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Param &#x60;nonprofit_id&#x60; invalid </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1DonationsCreatePostWithHttpInfo(String amount, String nonprofitId, String fundingSource, String zipCode) throws ApiException {
        okhttp3.Call localVarCall = apiV1DonationsCreatePostValidateBeforeCall(amount, nonprofitId, fundingSource, zipCode, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Create a donation (asynchronously)
     * Creates a donation to any nonprofit. CHANGE keeps track of your donations, bills you at the end of the month, and handles the nonprofit payouts for you.
     * @param amount The amount of the donation in cents. (required)
     * @param nonprofitId The id of a nonprofit from the CHANGE network. (required)
     * @param fundingSource Source of the donation funds. If you are collecting payment from your customer for the donation, use &#x60;customer&#x60;. (required)
     * @param zipCode The customer&#39;s zip code. Provide this to unlock geographic insights. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Donation successful </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Param &#x60;nonprofit_id&#x60; invalid </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCreatePostAsync(String amount, String nonprofitId, String fundingSource, String zipCode, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DonationsCreatePostValidateBeforeCall(amount, nonprofitId, fundingSource, zipCode, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DonationsCryptoCalculateGet
     * @param currency The currency of the transaction. (required)
     * @param count The number of transactions to offset. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCryptoCalculateGetCall(String currency, BigDecimal count, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/donations/crypto_calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (currency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency", currency));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DonationsCryptoCalculateGetValidateBeforeCall(String currency, BigDecimal count, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currency' is set
        if (currency == null) {
            throw new ApiException("Missing the required parameter 'currency' when calling apiV1DonationsCryptoCalculateGet(Async)");
        }

        return apiV1DonationsCryptoCalculateGetCall(currency, count, _callback);

    }

    /**
     * Calculate crypto carbon offset
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a cryptocurrency transaction. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param currency The currency of the transaction. (required)
     * @param count The number of transactions to offset. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1DonationsCryptoCalculateGet(String currency, BigDecimal count) throws ApiException {
        apiV1DonationsCryptoCalculateGetWithHttpInfo(currency, count);
    }

    /**
     * Calculate crypto carbon offset
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a cryptocurrency transaction. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param currency The currency of the transaction. (required)
     * @param count The number of transactions to offset. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1DonationsCryptoCalculateGetWithHttpInfo(String currency, BigDecimal count) throws ApiException {
        okhttp3.Call localVarCall = apiV1DonationsCryptoCalculateGetValidateBeforeCall(currency, count, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Calculate crypto carbon offset (asynchronously)
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a cryptocurrency transaction. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param currency The currency of the transaction. (required)
     * @param count The number of transactions to offset. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsCryptoCalculateGetAsync(String currency, BigDecimal count, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DonationsCryptoCalculateGetValidateBeforeCall(currency, count, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DonationsIndexGet
     * @param page Which page to return. This endpoint is paginated, and returns maximum 30 donations per page. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsIndexGetCall(BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/donations/index";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DonationsIndexGetValidateBeforeCall(BigDecimal page, final ApiCallback _callback) throws ApiException {
        return apiV1DonationsIndexGetCall(page, _callback);

    }

    /**
     * List your donations
     * Retrieves a list of donations you&#39;ve previously made. The donations are returned in order of creation, with the most recent donations appearing first. This endpoint is paginated.
     * @param page Which page to return. This endpoint is paginated, and returns maximum 30 donations per page. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1DonationsIndexGet(BigDecimal page) throws ApiException {
        apiV1DonationsIndexGetWithHttpInfo(page);
    }

    /**
     * List your donations
     * Retrieves a list of donations you&#39;ve previously made. The donations are returned in order of creation, with the most recent donations appearing first. This endpoint is paginated.
     * @param page Which page to return. This endpoint is paginated, and returns maximum 30 donations per page. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1DonationsIndexGetWithHttpInfo(BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = apiV1DonationsIndexGetValidateBeforeCall(page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * List your donations (asynchronously)
     * Retrieves a list of donations you&#39;ve previously made. The donations are returned in order of creation, with the most recent donations appearing first. This endpoint is paginated.
     * @param page Which page to return. This endpoint is paginated, and returns maximum 30 donations per page. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsIndexGetAsync(BigDecimal page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DonationsIndexGetValidateBeforeCall(page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1DonationsShowGet
     * @param id The id of a donation. Ids are returned when a donation is created. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsShowGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/donations/show";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1DonationsShowGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1DonationsShowGet(Async)");
        }

        return apiV1DonationsShowGetCall(id, _callback);

    }

    /**
     * Retrieve a donation
     * Retrieves the details of a donation you&#39;ve previously made.
     * @param id The id of a donation. Ids are returned when a donation is created. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1DonationsShowGet(String id) throws ApiException {
        apiV1DonationsShowGetWithHttpInfo(id);
    }

    /**
     * Retrieve a donation
     * Retrieves the details of a donation you&#39;ve previously made.
     * @param id The id of a donation. Ids are returned when a donation is created. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1DonationsShowGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1DonationsShowGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Retrieve a donation (asynchronously)
     * Retrieves the details of a donation you&#39;ve previously made.
     * @param id The id of a donation. Ids are returned when a donation is created. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1DonationsShowGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1DonationsShowGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NonprofitsListGet
     * @param name A string to search. (optional)
     * @param page The page to return. This endpoint is paginated, and returns up to 30 nonprofits at a time. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NonprofitsListGetCall(String name, BigDecimal page, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/nonprofits/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NonprofitsListGetValidateBeforeCall(String name, BigDecimal page, final ApiCallback _callback) throws ApiException {
        return apiV1NonprofitsListGetCall(name, page, _callback);

    }

    /**
     * Search a nonprofit
     * Retrieves a list of nonprofits whose names match the provided name. This endpoint is paginated.
     * @param name A string to search. (optional)
     * @param page The page to return. This endpoint is paginated, and returns up to 30 nonprofits at a time. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1NonprofitsListGet(String name, BigDecimal page) throws ApiException {
        apiV1NonprofitsListGetWithHttpInfo(name, page);
    }

    /**
     * Search a nonprofit
     * Retrieves a list of nonprofits whose names match the provided name. This endpoint is paginated.
     * @param name A string to search. (optional)
     * @param page The page to return. This endpoint is paginated, and returns up to 30 nonprofits at a time. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1NonprofitsListGetWithHttpInfo(String name, BigDecimal page) throws ApiException {
        okhttp3.Call localVarCall = apiV1NonprofitsListGetValidateBeforeCall(name, page, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Search a nonprofit (asynchronously)
     * Retrieves a list of nonprofits whose names match the provided name. This endpoint is paginated.
     * @param name A string to search. (optional)
     * @param page The page to return. This endpoint is paginated, and returns up to 30 nonprofits at a time. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NonprofitsListGetAsync(String name, BigDecimal page, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NonprofitsListGetValidateBeforeCall(name, page, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for apiV1NonprofitsShowGet
     * @param id The id of a nonprofit from the CHANGE network. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NonprofitsShowGetCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/nonprofits/show";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basic_auth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call apiV1NonprofitsShowGetValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling apiV1NonprofitsShowGet(Async)");
        }

        return apiV1NonprofitsShowGetCall(id, _callback);

    }

    /**
     * Show a nonprofit
     * Retrieves information for a nonprofit.
     * @param id The id of a nonprofit from the CHANGE network. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show successful </td><td>  -  </td></tr>
     </table>
     */
    public void apiV1NonprofitsShowGet(String id) throws ApiException {
        apiV1NonprofitsShowGetWithHttpInfo(id);
    }

    /**
     * Show a nonprofit
     * Retrieves information for a nonprofit.
     * @param id The id of a nonprofit from the CHANGE network. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> apiV1NonprofitsShowGetWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = apiV1NonprofitsShowGetValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Show a nonprofit (asynchronously)
     * Retrieves information for a nonprofit.
     * @param id The id of a nonprofit from the CHANGE network. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Show successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call apiV1NonprofitsShowGetAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = apiV1NonprofitsShowGetValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
