/**
 * API V1
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version v1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiV1DonationsCarbonCalculateGet operation.
     * @callback module:api/DefaultApi~apiV1DonationsCarbonCalculateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate shipping carbon offset
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a physical shipment. This calculation depends on the weight, primary transportation method, and distance of the shipment. Provide the distance of the shipment using the origin and destination address, or directly with the number of miles. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param {Number} weightLb The total weight (in pounds) of the shipment.
     * @param {Object} opts Optional parameters
     * @param {Number} [originAddress] The origin zip code (US only) of the shipment. If you send this parameter, also send `destination_address`.
     * @param {Number} [destinationAddress] The destination zip code (US only) of the shipment. If you send this parameter, also send `origin_address`.
     * @param {Number} [distanceMi] The total distance (in miles) of the shipment. You can use this parameter in place of `origin_address` and `destination_address`.
     * @param {module:model/String} [transportationMethod] The primary transportation method of the shipment.
     * @param {module:api/DefaultApi~apiV1DonationsCarbonCalculateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1DonationsCarbonCalculateGet(weightLb, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'weightLb' is set
      if (weightLb === undefined || weightLb === null) {
        throw new Error("Missing the required parameter 'weightLb' when calling apiV1DonationsCarbonCalculateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'origin_address': opts['originAddress'],
        'destination_address': opts['destinationAddress'],
        'distance_mi': opts['distanceMi'],
        'weight_lb': weightLb,
        'transportation_method': opts['transportationMethod']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/donations/carbon_calculate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DonationsCarbonStatsGet operation.
     * @callback module:api/DefaultApi~apiV1DonationsCarbonStatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve carbon offset stats
     * Measures your carbon offset impact in relatable terms. Provide the id of a donation to CarbonFund to see stats about that specific donation. If you omit the donation id, this endpoint returns aggregate stats for all of your CarbonFund donations.
     * @param {Object} opts Optional parameters
     * @param {Number} [id] The id of a donation to the CarbonFund nonprofit. Ids are returned when a donation is created. If an ID is not provided, the total stats for all donations to CarbonFund are returned.
     * @param {module:api/DefaultApi~apiV1DonationsCarbonStatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1DonationsCarbonStatsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/donations/carbon_stats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DonationsCreatePost operation.
     * @callback module:api/DefaultApi~apiV1DonationsCreatePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a donation
     * Creates a donation to any nonprofit. CHANGE keeps track of your donations, bills you at the end of the month, and handles the nonprofit payouts for you.
     * @param {String} amount The amount of the donation in cents.
     * @param {String} nonprofitId The id of a nonprofit from the CHANGE network.
     * @param {module:model/String} fundingSource Source of the donation funds. If you are collecting payment from your customer for the donation, use `customer`.
     * @param {Object} opts Optional parameters
     * @param {String} [zipCode] The customer's zip code. Provide this to unlock geographic insights.
     * @param {module:api/DefaultApi~apiV1DonationsCreatePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1DonationsCreatePost(amount, nonprofitId, fundingSource, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'amount' is set
      if (amount === undefined || amount === null) {
        throw new Error("Missing the required parameter 'amount' when calling apiV1DonationsCreatePost");
      }
      // verify the required parameter 'nonprofitId' is set
      if (nonprofitId === undefined || nonprofitId === null) {
        throw new Error("Missing the required parameter 'nonprofitId' when calling apiV1DonationsCreatePost");
      }
      // verify the required parameter 'fundingSource' is set
      if (fundingSource === undefined || fundingSource === null) {
        throw new Error("Missing the required parameter 'fundingSource' when calling apiV1DonationsCreatePost");
      }

      let pathParams = {
      };
      let queryParams = {
        'amount': amount,
        'nonprofit_id': nonprofitId,
        'funding_source': fundingSource,
        'zip_code': opts['zipCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/donations/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DonationsCryptoCalculateGet operation.
     * @callback module:api/DefaultApi~apiV1DonationsCryptoCalculateGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate crypto carbon offset
     * Calculates the donation amount (to CarbonFund 501\\(c\\)3) needed to offset a cryptocurrency transaction. For convenience, this endpoint also returns the id of the nonprofit CarbonFund, for making a subsequent donation to. See the [Carbon offsets guide](/recipes/carbon-offsets/) for more on using this endpoint.
     * @param {module:model/String} currency The currency of the transaction.
     * @param {Object} opts Optional parameters
     * @param {Number} [count] The number of transactions to offset.
     * @param {module:api/DefaultApi~apiV1DonationsCryptoCalculateGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1DonationsCryptoCalculateGet(currency, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currency' is set
      if (currency === undefined || currency === null) {
        throw new Error("Missing the required parameter 'currency' when calling apiV1DonationsCryptoCalculateGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'count': opts['count'],
        'currency': currency
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/donations/crypto_calculate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DonationsIndexGet operation.
     * @callback module:api/DefaultApi~apiV1DonationsIndexGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List your donations
     * Retrieves a list of donations you've previously made. The donations are returned in order of creation, with the most recent donations appearing first. This endpoint is paginated.
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Which page to return. This endpoint is paginated, and returns maximum 30 donations per page.
     * @param {module:api/DefaultApi~apiV1DonationsIndexGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1DonationsIndexGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/donations/index', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1DonationsShowGet operation.
     * @callback module:api/DefaultApi~apiV1DonationsShowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve a donation
     * Retrieves the details of a donation you've previously made.
     * @param {String} id The id of a donation. Ids are returned when a donation is created.
     * @param {module:api/DefaultApi~apiV1DonationsShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1DonationsShowGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1DonationsShowGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/donations/show', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1NonprofitsListGet operation.
     * @callback module:api/DefaultApi~apiV1NonprofitsListGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search a nonprofit
     * Retrieves a list of nonprofits whose names match the provided name. This endpoint is paginated.
     * @param {Object} opts Optional parameters
     * @param {String} [name] A string to search.
     * @param {Number} [page] The page to return. This endpoint is paginated, and returns up to 30 nonprofits at a time.
     * @param {module:api/DefaultApi~apiV1NonprofitsListGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1NonprofitsListGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'name': opts['name'],
        'page': opts['page']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/nonprofits/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiV1NonprofitsShowGet operation.
     * @callback module:api/DefaultApi~apiV1NonprofitsShowGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Show a nonprofit
     * Retrieves information for a nonprofit.
     * @param {String} id The id of a nonprofit from the CHANGE network.
     * @param {module:api/DefaultApi~apiV1NonprofitsShowGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    apiV1NonprofitsShowGet(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling apiV1NonprofitsShowGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['basic_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v1/nonprofits/show', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
