# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CitiesRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, count: int=None, country: str=None, first_updated: datetime=None, last_updated: datetime=None, locations: int=None, parameters: List[str]=None):
        """CitiesRow - a model defined in OpenAPI

        :param city: The city of this CitiesRow.
        :param count: The count of this CitiesRow.
        :param country: The country of this CitiesRow.
        :param first_updated: The first_updated of this CitiesRow.
        :param last_updated: The last_updated of this CitiesRow.
        :param locations: The locations of this CitiesRow.
        :param parameters: The parameters of this CitiesRow.
        """
        self.openapi_types = {
            'city': str,
            'count': int,
            'country': str,
            'first_updated': datetime,
            'last_updated': datetime,
            'locations': int,
            'parameters': List[str]
        }

        self.attribute_map = {
            'city': 'city',
            'count': 'count',
            'country': 'country',
            'first_updated': 'firstUpdated',
            'last_updated': 'lastUpdated',
            'locations': 'locations',
            'parameters': 'parameters'
        }

        self._city = city
        self._count = count
        self._country = country
        self._first_updated = first_updated
        self._last_updated = last_updated
        self._locations = locations
        self._parameters = parameters

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CitiesRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CitiesRow of this CitiesRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this CitiesRow.


        :return: The city of this CitiesRow.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this CitiesRow.


        :param city: The city of this CitiesRow.
        :type city: str
        """
        if city is None:
            raise ValueError("Invalid value for `city`, must not be `None`")

        self._city = city

    @property
    def count(self):
        """Gets the count of this CitiesRow.


        :return: The count of this CitiesRow.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CitiesRow.


        :param count: The count of this CitiesRow.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def country(self):
        """Gets the country of this CitiesRow.


        :return: The country of this CitiesRow.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this CitiesRow.


        :param country: The country of this CitiesRow.
        :type country: str
        """

        self._country = country

    @property
    def first_updated(self):
        """Gets the first_updated of this CitiesRow.


        :return: The first_updated of this CitiesRow.
        :rtype: datetime
        """
        return self._first_updated

    @first_updated.setter
    def first_updated(self, first_updated):
        """Sets the first_updated of this CitiesRow.


        :param first_updated: The first_updated of this CitiesRow.
        :type first_updated: datetime
        """
        if first_updated is None:
            raise ValueError("Invalid value for `first_updated`, must not be `None`")

        self._first_updated = first_updated

    @property
    def last_updated(self):
        """Gets the last_updated of this CitiesRow.


        :return: The last_updated of this CitiesRow.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CitiesRow.


        :param last_updated: The last_updated of this CitiesRow.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def locations(self):
        """Gets the locations of this CitiesRow.


        :return: The locations of this CitiesRow.
        :rtype: int
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CitiesRow.


        :param locations: The locations of this CitiesRow.
        :type locations: int
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def parameters(self):
        """Gets the parameters of this CitiesRow.


        :return: The parameters of this CitiesRow.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CitiesRow.


        :param parameters: The parameters of this CitiesRow.
        :type parameters: List[str]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters
