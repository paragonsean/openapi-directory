# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class TileJSON(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribution: str=None, bounds: List[float]=[-180,-90,180,90], data: List[str]=[], description: str=None, grids: List[str]=[], legend: str=None, maxzoom: int=30, minzoom: int=0, name: str=None, scheme: str='xyz', template: str=None, tilejson: str='2.2.0', tiles: List[str]=None, version: str='1.0.0'):
        """TileJSON - a model defined in OpenAPI

        :param attribution: The attribution of this TileJSON.
        :param bounds: The bounds of this TileJSON.
        :param data: The data of this TileJSON.
        :param description: The description of this TileJSON.
        :param grids: The grids of this TileJSON.
        :param legend: The legend of this TileJSON.
        :param maxzoom: The maxzoom of this TileJSON.
        :param minzoom: The minzoom of this TileJSON.
        :param name: The name of this TileJSON.
        :param scheme: The scheme of this TileJSON.
        :param template: The template of this TileJSON.
        :param tilejson: The tilejson of this TileJSON.
        :param tiles: The tiles of this TileJSON.
        :param version: The version of this TileJSON.
        """
        self.openapi_types = {
            'attribution': str,
            'bounds': List[float],
            'data': List[str],
            'description': str,
            'grids': List[str],
            'legend': str,
            'maxzoom': int,
            'minzoom': int,
            'name': str,
            'scheme': str,
            'template': str,
            'tilejson': str,
            'tiles': List[str],
            'version': str
        }

        self.attribute_map = {
            'attribution': 'attribution',
            'bounds': 'bounds',
            'data': 'data',
            'description': 'description',
            'grids': 'grids',
            'legend': 'legend',
            'maxzoom': 'maxzoom',
            'minzoom': 'minzoom',
            'name': 'name',
            'scheme': 'scheme',
            'template': 'template',
            'tilejson': 'tilejson',
            'tiles': 'tiles',
            'version': 'version'
        }

        self._attribution = attribution
        self._bounds = bounds
        self._data = data
        self._description = description
        self._grids = grids
        self._legend = legend
        self._maxzoom = maxzoom
        self._minzoom = minzoom
        self._name = name
        self._scheme = scheme
        self._template = template
        self._tilejson = tilejson
        self._tiles = tiles
        self._version = version

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TileJSON':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TileJSON of this TileJSON.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribution(self):
        """Gets the attribution of this TileJSON.


        :return: The attribution of this TileJSON.
        :rtype: str
        """
        return self._attribution

    @attribution.setter
    def attribution(self, attribution):
        """Sets the attribution of this TileJSON.


        :param attribution: The attribution of this TileJSON.
        :type attribution: str
        """

        self._attribution = attribution

    @property
    def bounds(self):
        """Gets the bounds of this TileJSON.


        :return: The bounds of this TileJSON.
        :rtype: List[float]
        """
        return self._bounds

    @bounds.setter
    def bounds(self, bounds):
        """Sets the bounds of this TileJSON.


        :param bounds: The bounds of this TileJSON.
        :type bounds: List[float]
        """

        self._bounds = bounds

    @property
    def data(self):
        """Gets the data of this TileJSON.


        :return: The data of this TileJSON.
        :rtype: List[str]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this TileJSON.


        :param data: The data of this TileJSON.
        :type data: List[str]
        """

        self._data = data

    @property
    def description(self):
        """Gets the description of this TileJSON.


        :return: The description of this TileJSON.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TileJSON.


        :param description: The description of this TileJSON.
        :type description: str
        """

        self._description = description

    @property
    def grids(self):
        """Gets the grids of this TileJSON.


        :return: The grids of this TileJSON.
        :rtype: List[str]
        """
        return self._grids

    @grids.setter
    def grids(self, grids):
        """Sets the grids of this TileJSON.


        :param grids: The grids of this TileJSON.
        :type grids: List[str]
        """

        self._grids = grids

    @property
    def legend(self):
        """Gets the legend of this TileJSON.


        :return: The legend of this TileJSON.
        :rtype: str
        """
        return self._legend

    @legend.setter
    def legend(self, legend):
        """Sets the legend of this TileJSON.


        :param legend: The legend of this TileJSON.
        :type legend: str
        """

        self._legend = legend

    @property
    def maxzoom(self):
        """Gets the maxzoom of this TileJSON.


        :return: The maxzoom of this TileJSON.
        :rtype: int
        """
        return self._maxzoom

    @maxzoom.setter
    def maxzoom(self, maxzoom):
        """Sets the maxzoom of this TileJSON.


        :param maxzoom: The maxzoom of this TileJSON.
        :type maxzoom: int
        """
        if maxzoom is not None and maxzoom > 30:
            raise ValueError("Invalid value for `maxzoom`, must be a value less than or equal to `30`")
        if maxzoom is not None and maxzoom < 0:
            raise ValueError("Invalid value for `maxzoom`, must be a value greater than or equal to `0`")

        self._maxzoom = maxzoom

    @property
    def minzoom(self):
        """Gets the minzoom of this TileJSON.


        :return: The minzoom of this TileJSON.
        :rtype: int
        """
        return self._minzoom

    @minzoom.setter
    def minzoom(self, minzoom):
        """Sets the minzoom of this TileJSON.


        :param minzoom: The minzoom of this TileJSON.
        :type minzoom: int
        """
        if minzoom is not None and minzoom > 30:
            raise ValueError("Invalid value for `minzoom`, must be a value less than or equal to `30`")
        if minzoom is not None and minzoom < 0:
            raise ValueError("Invalid value for `minzoom`, must be a value greater than or equal to `0`")

        self._minzoom = minzoom

    @property
    def name(self):
        """Gets the name of this TileJSON.


        :return: The name of this TileJSON.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TileJSON.


        :param name: The name of this TileJSON.
        :type name: str
        """

        self._name = name

    @property
    def scheme(self):
        """Gets the scheme of this TileJSON.


        :return: The scheme of this TileJSON.
        :rtype: str
        """
        return self._scheme

    @scheme.setter
    def scheme(self, scheme):
        """Sets the scheme of this TileJSON.


        :param scheme: The scheme of this TileJSON.
        :type scheme: str
        """

        self._scheme = scheme

    @property
    def template(self):
        """Gets the template of this TileJSON.


        :return: The template of this TileJSON.
        :rtype: str
        """
        return self._template

    @template.setter
    def template(self, template):
        """Sets the template of this TileJSON.


        :param template: The template of this TileJSON.
        :type template: str
        """

        self._template = template

    @property
    def tilejson(self):
        """Gets the tilejson of this TileJSON.


        :return: The tilejson of this TileJSON.
        :rtype: str
        """
        return self._tilejson

    @tilejson.setter
    def tilejson(self, tilejson):
        """Sets the tilejson of this TileJSON.


        :param tilejson: The tilejson of this TileJSON.
        :type tilejson: str
        """

        self._tilejson = tilejson

    @property
    def tiles(self):
        """Gets the tiles of this TileJSON.


        :return: The tiles of this TileJSON.
        :rtype: List[str]
        """
        return self._tiles

    @tiles.setter
    def tiles(self, tiles):
        """Sets the tiles of this TileJSON.


        :param tiles: The tiles of this TileJSON.
        :type tiles: List[str]
        """
        if tiles is None:
            raise ValueError("Invalid value for `tiles`, must not be `None`")

        self._tiles = tiles

    @property
    def version(self):
        """Gets the version of this TileJSON.


        :return: The version of this TileJSON.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this TileJSON.


        :param version: The version of this TileJSON.
        :type version: str
        """

        self._version = version
