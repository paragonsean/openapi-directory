# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CountriesRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cities: int=None, code: str=None, count: int=None, first_updated: datetime=None, last_updated: datetime=None, locations: int=None, name: str=None, parameters: List[str]=None, sources: int=None):
        """CountriesRow - a model defined in OpenAPI

        :param cities: The cities of this CountriesRow.
        :param code: The code of this CountriesRow.
        :param count: The count of this CountriesRow.
        :param first_updated: The first_updated of this CountriesRow.
        :param last_updated: The last_updated of this CountriesRow.
        :param locations: The locations of this CountriesRow.
        :param name: The name of this CountriesRow.
        :param parameters: The parameters of this CountriesRow.
        :param sources: The sources of this CountriesRow.
        """
        self.openapi_types = {
            'cities': int,
            'code': str,
            'count': int,
            'first_updated': datetime,
            'last_updated': datetime,
            'locations': int,
            'name': str,
            'parameters': List[str],
            'sources': int
        }

        self.attribute_map = {
            'cities': 'cities',
            'code': 'code',
            'count': 'count',
            'first_updated': 'firstUpdated',
            'last_updated': 'lastUpdated',
            'locations': 'locations',
            'name': 'name',
            'parameters': 'parameters',
            'sources': 'sources'
        }

        self._cities = cities
        self._code = code
        self._count = count
        self._first_updated = first_updated
        self._last_updated = last_updated
        self._locations = locations
        self._name = name
        self._parameters = parameters
        self._sources = sources

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CountriesRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CountriesRow of this CountriesRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cities(self):
        """Gets the cities of this CountriesRow.


        :return: The cities of this CountriesRow.
        :rtype: int
        """
        return self._cities

    @cities.setter
    def cities(self, cities):
        """Sets the cities of this CountriesRow.


        :param cities: The cities of this CountriesRow.
        :type cities: int
        """
        if cities is None:
            raise ValueError("Invalid value for `cities`, must not be `None`")

        self._cities = cities

    @property
    def code(self):
        """Gets the code of this CountriesRow.


        :return: The code of this CountriesRow.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CountriesRow.


        :param code: The code of this CountriesRow.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")

        self._code = code

    @property
    def count(self):
        """Gets the count of this CountriesRow.


        :return: The count of this CountriesRow.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this CountriesRow.


        :param count: The count of this CountriesRow.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def first_updated(self):
        """Gets the first_updated of this CountriesRow.


        :return: The first_updated of this CountriesRow.
        :rtype: datetime
        """
        return self._first_updated

    @first_updated.setter
    def first_updated(self, first_updated):
        """Sets the first_updated of this CountriesRow.


        :param first_updated: The first_updated of this CountriesRow.
        :type first_updated: datetime
        """
        if first_updated is None:
            raise ValueError("Invalid value for `first_updated`, must not be `None`")

        self._first_updated = first_updated

    @property
    def last_updated(self):
        """Gets the last_updated of this CountriesRow.


        :return: The last_updated of this CountriesRow.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this CountriesRow.


        :param last_updated: The last_updated of this CountriesRow.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def locations(self):
        """Gets the locations of this CountriesRow.


        :return: The locations of this CountriesRow.
        :rtype: int
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this CountriesRow.


        :param locations: The locations of this CountriesRow.
        :type locations: int
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def name(self):
        """Gets the name of this CountriesRow.


        :return: The name of this CountriesRow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CountriesRow.


        :param name: The name of this CountriesRow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this CountriesRow.


        :return: The parameters of this CountriesRow.
        :rtype: List[str]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this CountriesRow.


        :param parameters: The parameters of this CountriesRow.
        :type parameters: List[str]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def sources(self):
        """Gets the sources of this CountriesRow.


        :return: The sources of this CountriesRow.
        :rtype: int
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this CountriesRow.


        :param sources: The sources of this CountriesRow.
        :type sources: int
        """
        if sources is None:
            raise ValueError("Invalid value for `sources`, must not be `None`")

        self._sources = sources
