# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.project_parameter_details import ProjectParameterDetails
from openapi_server import util


class ProjectsRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bbox: List[float]=None, countries: List[str]=None, entity: str=None, first_updated: datetime=None, id: int=None, is_analysis: bool=None, is_mobile: bool=None, last_updated: datetime=None, location_ids: List[int]=None, locations: int=None, measurements: int=None, name: str=None, parameters: List[ProjectParameterDetails]=None, sensor_type: str=None, sources: List[object]=None, subtitle: str=None):
        """ProjectsRow - a model defined in OpenAPI

        :param bbox: The bbox of this ProjectsRow.
        :param countries: The countries of this ProjectsRow.
        :param entity: The entity of this ProjectsRow.
        :param first_updated: The first_updated of this ProjectsRow.
        :param id: The id of this ProjectsRow.
        :param is_analysis: The is_analysis of this ProjectsRow.
        :param is_mobile: The is_mobile of this ProjectsRow.
        :param last_updated: The last_updated of this ProjectsRow.
        :param location_ids: The location_ids of this ProjectsRow.
        :param locations: The locations of this ProjectsRow.
        :param measurements: The measurements of this ProjectsRow.
        :param name: The name of this ProjectsRow.
        :param parameters: The parameters of this ProjectsRow.
        :param sensor_type: The sensor_type of this ProjectsRow.
        :param sources: The sources of this ProjectsRow.
        :param subtitle: The subtitle of this ProjectsRow.
        """
        self.openapi_types = {
            'bbox': List[float],
            'countries': List[str],
            'entity': str,
            'first_updated': datetime,
            'id': int,
            'is_analysis': bool,
            'is_mobile': bool,
            'last_updated': datetime,
            'location_ids': List[int],
            'locations': int,
            'measurements': int,
            'name': str,
            'parameters': List[ProjectParameterDetails],
            'sensor_type': str,
            'sources': List[object],
            'subtitle': str
        }

        self.attribute_map = {
            'bbox': 'bbox',
            'countries': 'countries',
            'entity': 'entity',
            'first_updated': 'firstUpdated',
            'id': 'id',
            'is_analysis': 'isAnalysis',
            'is_mobile': 'isMobile',
            'last_updated': 'lastUpdated',
            'location_ids': 'locationIds',
            'locations': 'locations',
            'measurements': 'measurements',
            'name': 'name',
            'parameters': 'parameters',
            'sensor_type': 'sensorType',
            'sources': 'sources',
            'subtitle': 'subtitle'
        }

        self._bbox = bbox
        self._countries = countries
        self._entity = entity
        self._first_updated = first_updated
        self._id = id
        self._is_analysis = is_analysis
        self._is_mobile = is_mobile
        self._last_updated = last_updated
        self._location_ids = location_ids
        self._locations = locations
        self._measurements = measurements
        self._name = name
        self._parameters = parameters
        self._sensor_type = sensor_type
        self._sources = sources
        self._subtitle = subtitle

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectsRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectsRow of this ProjectsRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bbox(self):
        """Gets the bbox of this ProjectsRow.


        :return: The bbox of this ProjectsRow.
        :rtype: List[float]
        """
        return self._bbox

    @bbox.setter
    def bbox(self, bbox):
        """Sets the bbox of this ProjectsRow.


        :param bbox: The bbox of this ProjectsRow.
        :type bbox: List[float]
        """

        self._bbox = bbox

    @property
    def countries(self):
        """Gets the countries of this ProjectsRow.


        :return: The countries of this ProjectsRow.
        :rtype: List[str]
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this ProjectsRow.


        :param countries: The countries of this ProjectsRow.
        :type countries: List[str]
        """

        self._countries = countries

    @property
    def entity(self):
        """Gets the entity of this ProjectsRow.


        :return: The entity of this ProjectsRow.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this ProjectsRow.


        :param entity: The entity of this ProjectsRow.
        :type entity: str
        """

        self._entity = entity

    @property
    def first_updated(self):
        """Gets the first_updated of this ProjectsRow.


        :return: The first_updated of this ProjectsRow.
        :rtype: datetime
        """
        return self._first_updated

    @first_updated.setter
    def first_updated(self, first_updated):
        """Sets the first_updated of this ProjectsRow.


        :param first_updated: The first_updated of this ProjectsRow.
        :type first_updated: datetime
        """
        if first_updated is None:
            raise ValueError("Invalid value for `first_updated`, must not be `None`")

        self._first_updated = first_updated

    @property
    def id(self):
        """Gets the id of this ProjectsRow.


        :return: The id of this ProjectsRow.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProjectsRow.


        :param id: The id of this ProjectsRow.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_analysis(self):
        """Gets the is_analysis of this ProjectsRow.


        :return: The is_analysis of this ProjectsRow.
        :rtype: bool
        """
        return self._is_analysis

    @is_analysis.setter
    def is_analysis(self, is_analysis):
        """Sets the is_analysis of this ProjectsRow.


        :param is_analysis: The is_analysis of this ProjectsRow.
        :type is_analysis: bool
        """

        self._is_analysis = is_analysis

    @property
    def is_mobile(self):
        """Gets the is_mobile of this ProjectsRow.


        :return: The is_mobile of this ProjectsRow.
        :rtype: bool
        """
        return self._is_mobile

    @is_mobile.setter
    def is_mobile(self, is_mobile):
        """Sets the is_mobile of this ProjectsRow.


        :param is_mobile: The is_mobile of this ProjectsRow.
        :type is_mobile: bool
        """

        self._is_mobile = is_mobile

    @property
    def last_updated(self):
        """Gets the last_updated of this ProjectsRow.


        :return: The last_updated of this ProjectsRow.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProjectsRow.


        :param last_updated: The last_updated of this ProjectsRow.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def location_ids(self):
        """Gets the location_ids of this ProjectsRow.


        :return: The location_ids of this ProjectsRow.
        :rtype: List[int]
        """
        return self._location_ids

    @location_ids.setter
    def location_ids(self, location_ids):
        """Sets the location_ids of this ProjectsRow.


        :param location_ids: The location_ids of this ProjectsRow.
        :type location_ids: List[int]
        """
        if location_ids is None:
            raise ValueError("Invalid value for `location_ids`, must not be `None`")

        self._location_ids = location_ids

    @property
    def locations(self):
        """Gets the locations of this ProjectsRow.


        :return: The locations of this ProjectsRow.
        :rtype: int
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ProjectsRow.


        :param locations: The locations of this ProjectsRow.
        :type locations: int
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def measurements(self):
        """Gets the measurements of this ProjectsRow.


        :return: The measurements of this ProjectsRow.
        :rtype: int
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this ProjectsRow.


        :param measurements: The measurements of this ProjectsRow.
        :type measurements: int
        """
        if measurements is None:
            raise ValueError("Invalid value for `measurements`, must not be `None`")

        self._measurements = measurements

    @property
    def name(self):
        """Gets the name of this ProjectsRow.


        :return: The name of this ProjectsRow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ProjectsRow.


        :param name: The name of this ProjectsRow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def parameters(self):
        """Gets the parameters of this ProjectsRow.


        :return: The parameters of this ProjectsRow.
        :rtype: List[ProjectParameterDetails]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters):
        """Sets the parameters of this ProjectsRow.


        :param parameters: The parameters of this ProjectsRow.
        :type parameters: List[ProjectParameterDetails]
        """
        if parameters is None:
            raise ValueError("Invalid value for `parameters`, must not be `None`")

        self._parameters = parameters

    @property
    def sensor_type(self):
        """Gets the sensor_type of this ProjectsRow.


        :return: The sensor_type of this ProjectsRow.
        :rtype: str
        """
        return self._sensor_type

    @sensor_type.setter
    def sensor_type(self, sensor_type):
        """Sets the sensor_type of this ProjectsRow.


        :param sensor_type: The sensor_type of this ProjectsRow.
        :type sensor_type: str
        """

        self._sensor_type = sensor_type

    @property
    def sources(self):
        """Gets the sources of this ProjectsRow.


        :return: The sources of this ProjectsRow.
        :rtype: List[object]
        """
        return self._sources

    @sources.setter
    def sources(self, sources):
        """Sets the sources of this ProjectsRow.


        :param sources: The sources of this ProjectsRow.
        :type sources: List[object]
        """

        self._sources = sources

    @property
    def subtitle(self):
        """Gets the subtitle of this ProjectsRow.


        :return: The subtitle of this ProjectsRow.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this ProjectsRow.


        :param subtitle: The subtitle of this ProjectsRow.
        :type subtitle: str
        """
        if subtitle is None:
            raise ValueError("Invalid value for `subtitle`, must not be `None`")

        self._subtitle = subtitle
