# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectParameterDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average: float=None, count: int=None, display_name: str=None, first_updated: datetime=None, last_updated: datetime=None, last_value: float=None, locations: int=None, parameter: str=None, parameter_id: int=None, unit: str=None):
        """ProjectParameterDetails - a model defined in OpenAPI

        :param average: The average of this ProjectParameterDetails.
        :param count: The count of this ProjectParameterDetails.
        :param display_name: The display_name of this ProjectParameterDetails.
        :param first_updated: The first_updated of this ProjectParameterDetails.
        :param last_updated: The last_updated of this ProjectParameterDetails.
        :param last_value: The last_value of this ProjectParameterDetails.
        :param locations: The locations of this ProjectParameterDetails.
        :param parameter: The parameter of this ProjectParameterDetails.
        :param parameter_id: The parameter_id of this ProjectParameterDetails.
        :param unit: The unit of this ProjectParameterDetails.
        """
        self.openapi_types = {
            'average': float,
            'count': int,
            'display_name': str,
            'first_updated': datetime,
            'last_updated': datetime,
            'last_value': float,
            'locations': int,
            'parameter': str,
            'parameter_id': int,
            'unit': str
        }

        self.attribute_map = {
            'average': 'average',
            'count': 'count',
            'display_name': 'displayName',
            'first_updated': 'firstUpdated',
            'last_updated': 'lastUpdated',
            'last_value': 'lastValue',
            'locations': 'locations',
            'parameter': 'parameter',
            'parameter_id': 'parameterId',
            'unit': 'unit'
        }

        self._average = average
        self._count = count
        self._display_name = display_name
        self._first_updated = first_updated
        self._last_updated = last_updated
        self._last_value = last_value
        self._locations = locations
        self._parameter = parameter
        self._parameter_id = parameter_id
        self._unit = unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProjectParameterDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ProjectParameterDetails of this ProjectParameterDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average(self):
        """Gets the average of this ProjectParameterDetails.


        :return: The average of this ProjectParameterDetails.
        :rtype: float
        """
        return self._average

    @average.setter
    def average(self, average):
        """Sets the average of this ProjectParameterDetails.


        :param average: The average of this ProjectParameterDetails.
        :type average: float
        """
        if average is None:
            raise ValueError("Invalid value for `average`, must not be `None`")

        self._average = average

    @property
    def count(self):
        """Gets the count of this ProjectParameterDetails.


        :return: The count of this ProjectParameterDetails.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this ProjectParameterDetails.


        :param count: The count of this ProjectParameterDetails.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")

        self._count = count

    @property
    def display_name(self):
        """Gets the display_name of this ProjectParameterDetails.


        :return: The display_name of this ProjectParameterDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ProjectParameterDetails.


        :param display_name: The display_name of this ProjectParameterDetails.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def first_updated(self):
        """Gets the first_updated of this ProjectParameterDetails.


        :return: The first_updated of this ProjectParameterDetails.
        :rtype: datetime
        """
        return self._first_updated

    @first_updated.setter
    def first_updated(self, first_updated):
        """Sets the first_updated of this ProjectParameterDetails.


        :param first_updated: The first_updated of this ProjectParameterDetails.
        :type first_updated: datetime
        """
        if first_updated is None:
            raise ValueError("Invalid value for `first_updated`, must not be `None`")

        self._first_updated = first_updated

    @property
    def last_updated(self):
        """Gets the last_updated of this ProjectParameterDetails.


        :return: The last_updated of this ProjectParameterDetails.
        :rtype: datetime
        """
        return self._last_updated

    @last_updated.setter
    def last_updated(self, last_updated):
        """Sets the last_updated of this ProjectParameterDetails.


        :param last_updated: The last_updated of this ProjectParameterDetails.
        :type last_updated: datetime
        """
        if last_updated is None:
            raise ValueError("Invalid value for `last_updated`, must not be `None`")

        self._last_updated = last_updated

    @property
    def last_value(self):
        """Gets the last_value of this ProjectParameterDetails.


        :return: The last_value of this ProjectParameterDetails.
        :rtype: float
        """
        return self._last_value

    @last_value.setter
    def last_value(self, last_value):
        """Sets the last_value of this ProjectParameterDetails.


        :param last_value: The last_value of this ProjectParameterDetails.
        :type last_value: float
        """
        if last_value is None:
            raise ValueError("Invalid value for `last_value`, must not be `None`")

        self._last_value = last_value

    @property
    def locations(self):
        """Gets the locations of this ProjectParameterDetails.


        :return: The locations of this ProjectParameterDetails.
        :rtype: int
        """
        return self._locations

    @locations.setter
    def locations(self, locations):
        """Sets the locations of this ProjectParameterDetails.


        :param locations: The locations of this ProjectParameterDetails.
        :type locations: int
        """
        if locations is None:
            raise ValueError("Invalid value for `locations`, must not be `None`")

        self._locations = locations

    @property
    def parameter(self):
        """Gets the parameter of this ProjectParameterDetails.


        :return: The parameter of this ProjectParameterDetails.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter):
        """Sets the parameter of this ProjectParameterDetails.


        :param parameter: The parameter of this ProjectParameterDetails.
        :type parameter: str
        """
        if parameter is None:
            raise ValueError("Invalid value for `parameter`, must not be `None`")

        self._parameter = parameter

    @property
    def parameter_id(self):
        """Gets the parameter_id of this ProjectParameterDetails.


        :return: The parameter_id of this ProjectParameterDetails.
        :rtype: int
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this ProjectParameterDetails.


        :param parameter_id: The parameter_id of this ProjectParameterDetails.
        :type parameter_id: int
        """
        if parameter_id is None:
            raise ValueError("Invalid value for `parameter_id`, must not be `None`")

        self._parameter_id = parameter_id

    @property
    def unit(self):
        """Gets the unit of this ProjectParameterDetails.


        :return: The unit of this ProjectParameterDetails.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ProjectParameterDetails.


        :param unit: The unit of this ProjectParameterDetails.
        :type unit: str
        """
        if unit is None:
            raise ValueError("Invalid value for `unit`, must not be `None`")

        self._unit = unit
