# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Meta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, found: int=0, license: str='CC BY 4.0d', limit: int=100, name: str='openaq-api', page: int=1, website: str='/'):
        """Meta - a model defined in OpenAPI

        :param found: The found of this Meta.
        :param license: The license of this Meta.
        :param limit: The limit of this Meta.
        :param name: The name of this Meta.
        :param page: The page of this Meta.
        :param website: The website of this Meta.
        """
        self.openapi_types = {
            'found': int,
            'license': str,
            'limit': int,
            'name': str,
            'page': int,
            'website': str
        }

        self.attribute_map = {
            'found': 'found',
            'license': 'license',
            'limit': 'limit',
            'name': 'name',
            'page': 'page',
            'website': 'website'
        }

        self._found = found
        self._license = license
        self._limit = limit
        self._name = name
        self._page = page
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Meta':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Meta of this Meta.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def found(self):
        """Gets the found of this Meta.


        :return: The found of this Meta.
        :rtype: int
        """
        return self._found

    @found.setter
    def found(self, found):
        """Sets the found of this Meta.


        :param found: The found of this Meta.
        :type found: int
        """

        self._found = found

    @property
    def license(self):
        """Gets the license of this Meta.


        :return: The license of this Meta.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Meta.


        :param license: The license of this Meta.
        :type license: str
        """

        self._license = license

    @property
    def limit(self):
        """Gets the limit of this Meta.


        :return: The limit of this Meta.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this Meta.


        :param limit: The limit of this Meta.
        :type limit: int
        """

        self._limit = limit

    @property
    def name(self):
        """Gets the name of this Meta.


        :return: The name of this Meta.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Meta.


        :param name: The name of this Meta.
        :type name: str
        """

        self._name = name

    @property
    def page(self):
        """Gets the page of this Meta.


        :return: The page of this Meta.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this Meta.


        :param page: The page of this Meta.
        :type page: int
        """

        self._page = page

    @property
    def website(self):
        """Gets the website of this Meta.


        :return: The website of this Meta.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this Meta.


        :param website: The website of this Meta.
        :type website: str
        """

        self._website = website
