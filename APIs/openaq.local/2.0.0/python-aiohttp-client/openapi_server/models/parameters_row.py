# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ParametersRow(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, display_name: str=None, id: int=None, is_core: bool=None, max_color_value: float=None, name: str=None, preferred_unit: str=None):
        """ParametersRow - a model defined in OpenAPI

        :param description: The description of this ParametersRow.
        :param display_name: The display_name of this ParametersRow.
        :param id: The id of this ParametersRow.
        :param is_core: The is_core of this ParametersRow.
        :param max_color_value: The max_color_value of this ParametersRow.
        :param name: The name of this ParametersRow.
        :param preferred_unit: The preferred_unit of this ParametersRow.
        """
        self.openapi_types = {
            'description': str,
            'display_name': str,
            'id': int,
            'is_core': bool,
            'max_color_value': float,
            'name': str,
            'preferred_unit': str
        }

        self.attribute_map = {
            'description': 'description',
            'display_name': 'displayName',
            'id': 'id',
            'is_core': 'isCore',
            'max_color_value': 'maxColorValue',
            'name': 'name',
            'preferred_unit': 'preferredUnit'
        }

        self._description = description
        self._display_name = display_name
        self._id = id
        self._is_core = is_core
        self._max_color_value = max_color_value
        self._name = name
        self._preferred_unit = preferred_unit

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ParametersRow':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ParametersRow of this ParametersRow.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this ParametersRow.


        :return: The description of this ParametersRow.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ParametersRow.


        :param description: The description of this ParametersRow.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this ParametersRow.


        :return: The display_name of this ParametersRow.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ParametersRow.


        :param display_name: The display_name of this ParametersRow.
        :type display_name: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")

        self._display_name = display_name

    @property
    def id(self):
        """Gets the id of this ParametersRow.


        :return: The id of this ParametersRow.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ParametersRow.


        :param id: The id of this ParametersRow.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def is_core(self):
        """Gets the is_core of this ParametersRow.


        :return: The is_core of this ParametersRow.
        :rtype: bool
        """
        return self._is_core

    @is_core.setter
    def is_core(self, is_core):
        """Sets the is_core of this ParametersRow.


        :param is_core: The is_core of this ParametersRow.
        :type is_core: bool
        """

        self._is_core = is_core

    @property
    def max_color_value(self):
        """Gets the max_color_value of this ParametersRow.


        :return: The max_color_value of this ParametersRow.
        :rtype: float
        """
        return self._max_color_value

    @max_color_value.setter
    def max_color_value(self, max_color_value):
        """Sets the max_color_value of this ParametersRow.


        :param max_color_value: The max_color_value of this ParametersRow.
        :type max_color_value: float
        """

        self._max_color_value = max_color_value

    @property
    def name(self):
        """Gets the name of this ParametersRow.


        :return: The name of this ParametersRow.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ParametersRow.


        :param name: The name of this ParametersRow.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def preferred_unit(self):
        """Gets the preferred_unit of this ParametersRow.


        :return: The preferred_unit of this ParametersRow.
        :rtype: str
        """
        return self._preferred_unit

    @preferred_unit.setter
    def preferred_unit(self, preferred_unit):
        """Sets the preferred_unit of this ParametersRow.


        :param preferred_unit: The preferred_unit of this ParametersRow.
        :type preferred_unit: str
        """
        if preferred_unit is None:
            raise ValueError("Invalid value for `preferred_unit`, must not be `None`")

        self._preferred_unit = preferred_unit
