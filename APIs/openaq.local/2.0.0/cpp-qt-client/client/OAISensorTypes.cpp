/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISensorTypes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISensorTypes::OAISensorTypes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISensorTypes::OAISensorTypes() {
    this->initializeModel();
}

OAISensorTypes::~OAISensorTypes() {}

void OAISensorTypes::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAISensorTypes::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAISensorTypes::fromJson(QString jsonString) {
    
    if ( jsonString.compare("reference grade", Qt::CaseInsensitive) == 0) {
        m_value = eOAISensorTypes::REFERENCE_GRADE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("low-cost sensor", Qt::CaseInsensitive) == 0) {
        m_value = eOAISensorTypes::LOW_COST_SENSOR;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAISensorTypes::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAISensorTypes::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAISensorTypes::REFERENCE_GRADE:
            val = "reference grade";
            break;
        case eOAISensorTypes::LOW_COST_SENSOR:
            val = "low-cost sensor";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAISensorTypes::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAISensorTypes::eOAISensorTypes OAISensorTypes::getValue() const {
    return m_value;
}

void OAISensorTypes::setValue(const OAISensorTypes::eOAISensorTypes& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAISensorTypes::isSet() const {
    
    return m_value_isSet;
}

bool OAISensorTypes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
