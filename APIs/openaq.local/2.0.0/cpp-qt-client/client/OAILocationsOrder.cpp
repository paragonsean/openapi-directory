/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocationsOrder.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocationsOrder::OAILocationsOrder(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocationsOrder::OAILocationsOrder() {
    this->initializeModel();
}

OAILocationsOrder::~OAILocationsOrder() {}

void OAILocationsOrder::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILocationsOrder::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILocationsOrder::fromJson(QString jsonString) {
    
    if ( jsonString.compare("city", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::CITY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("country", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::COUNTRY;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("location", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::LOCATION;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sourceName", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::SOURCENAME;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("firstUpdated", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::FIRSTUPDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("lastUpdated", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::LASTUPDATED;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("count", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::COUNT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("random", Qt::CaseInsensitive) == 0) {
        m_value = eOAILocationsOrder::RANDOM;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILocationsOrder::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILocationsOrder::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILocationsOrder::CITY:
            val = "city";
            break;
        case eOAILocationsOrder::COUNTRY:
            val = "country";
            break;
        case eOAILocationsOrder::LOCATION:
            val = "location";
            break;
        case eOAILocationsOrder::SOURCENAME:
            val = "sourceName";
            break;
        case eOAILocationsOrder::FIRSTUPDATED:
            val = "firstUpdated";
            break;
        case eOAILocationsOrder::LASTUPDATED:
            val = "lastUpdated";
            break;
        case eOAILocationsOrder::COUNT:
            val = "count";
            break;
        case eOAILocationsOrder::RANDOM:
            val = "random";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILocationsOrder::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILocationsOrder::eOAILocationsOrder OAILocationsOrder::getValue() const {
    return m_value;
}

void OAILocationsOrder::setValue(const OAILocationsOrder::eOAILocationsOrder& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILocationsOrder::isSet() const {
    
    return m_value_isSet;
}

bool OAILocationsOrder::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
