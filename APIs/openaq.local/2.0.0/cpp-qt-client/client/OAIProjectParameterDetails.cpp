/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectParameterDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectParameterDetails::OAIProjectParameterDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectParameterDetails::OAIProjectParameterDetails() {
    this->initializeModel();
}

OAIProjectParameterDetails::~OAIProjectParameterDetails() {}

void OAIProjectParameterDetails::initializeModel() {

    m_average_isSet = false;
    m_average_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_first_updated_isSet = false;
    m_first_updated_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_last_value_isSet = false;
    m_last_value_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_parameter_isSet = false;
    m_parameter_isValid = false;

    m_parameter_id_isSet = false;
    m_parameter_id_isValid = false;

    m_unit_isSet = false;
    m_unit_isValid = false;
}

void OAIProjectParameterDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectParameterDetails::fromJsonObject(QJsonObject json) {

    m_average_isValid = ::OpenAPI::fromJsonValue(m_average, json[QString("average")]);
    m_average_isSet = !json[QString("average")].isNull() && m_average_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_first_updated_isValid = ::OpenAPI::fromJsonValue(m_first_updated, json[QString("firstUpdated")]);
    m_first_updated_isSet = !json[QString("firstUpdated")].isNull() && m_first_updated_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_last_value_isValid = ::OpenAPI::fromJsonValue(m_last_value, json[QString("lastValue")]);
    m_last_value_isSet = !json[QString("lastValue")].isNull() && m_last_value_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_parameter_isValid = ::OpenAPI::fromJsonValue(m_parameter, json[QString("parameter")]);
    m_parameter_isSet = !json[QString("parameter")].isNull() && m_parameter_isValid;

    m_parameter_id_isValid = ::OpenAPI::fromJsonValue(m_parameter_id, json[QString("parameterId")]);
    m_parameter_id_isSet = !json[QString("parameterId")].isNull() && m_parameter_id_isValid;

    m_unit_isValid = ::OpenAPI::fromJsonValue(m_unit, json[QString("unit")]);
    m_unit_isSet = !json[QString("unit")].isNull() && m_unit_isValid;
}

QString OAIProjectParameterDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectParameterDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_average_isSet) {
        obj.insert(QString("average"), ::OpenAPI::toJsonValue(m_average));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_first_updated_isSet) {
        obj.insert(QString("firstUpdated"), ::OpenAPI::toJsonValue(m_first_updated));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_last_value_isSet) {
        obj.insert(QString("lastValue"), ::OpenAPI::toJsonValue(m_last_value));
    }
    if (m_locations_isSet) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_parameter_isSet) {
        obj.insert(QString("parameter"), ::OpenAPI::toJsonValue(m_parameter));
    }
    if (m_parameter_id_isSet) {
        obj.insert(QString("parameterId"), ::OpenAPI::toJsonValue(m_parameter_id));
    }
    if (m_unit_isSet) {
        obj.insert(QString("unit"), ::OpenAPI::toJsonValue(m_unit));
    }
    return obj;
}

double OAIProjectParameterDetails::getAverage() const {
    return m_average;
}
void OAIProjectParameterDetails::setAverage(const double &average) {
    m_average = average;
    m_average_isSet = true;
}

bool OAIProjectParameterDetails::is_average_Set() const{
    return m_average_isSet;
}

bool OAIProjectParameterDetails::is_average_Valid() const{
    return m_average_isValid;
}

qint32 OAIProjectParameterDetails::getCount() const {
    return m_count;
}
void OAIProjectParameterDetails::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAIProjectParameterDetails::is_count_Set() const{
    return m_count_isSet;
}

bool OAIProjectParameterDetails::is_count_Valid() const{
    return m_count_isValid;
}

QString OAIProjectParameterDetails::getDisplayName() const {
    return m_display_name;
}
void OAIProjectParameterDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIProjectParameterDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIProjectParameterDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QDateTime OAIProjectParameterDetails::getFirstUpdated() const {
    return m_first_updated;
}
void OAIProjectParameterDetails::setFirstUpdated(const QDateTime &first_updated) {
    m_first_updated = first_updated;
    m_first_updated_isSet = true;
}

bool OAIProjectParameterDetails::is_first_updated_Set() const{
    return m_first_updated_isSet;
}

bool OAIProjectParameterDetails::is_first_updated_Valid() const{
    return m_first_updated_isValid;
}

QDateTime OAIProjectParameterDetails::getLastUpdated() const {
    return m_last_updated;
}
void OAIProjectParameterDetails::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIProjectParameterDetails::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIProjectParameterDetails::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

double OAIProjectParameterDetails::getLastValue() const {
    return m_last_value;
}
void OAIProjectParameterDetails::setLastValue(const double &last_value) {
    m_last_value = last_value;
    m_last_value_isSet = true;
}

bool OAIProjectParameterDetails::is_last_value_Set() const{
    return m_last_value_isSet;
}

bool OAIProjectParameterDetails::is_last_value_Valid() const{
    return m_last_value_isValid;
}

qint32 OAIProjectParameterDetails::getLocations() const {
    return m_locations;
}
void OAIProjectParameterDetails::setLocations(const qint32 &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIProjectParameterDetails::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIProjectParameterDetails::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAIProjectParameterDetails::getParameter() const {
    return m_parameter;
}
void OAIProjectParameterDetails::setParameter(const QString &parameter) {
    m_parameter = parameter;
    m_parameter_isSet = true;
}

bool OAIProjectParameterDetails::is_parameter_Set() const{
    return m_parameter_isSet;
}

bool OAIProjectParameterDetails::is_parameter_Valid() const{
    return m_parameter_isValid;
}

qint32 OAIProjectParameterDetails::getParameterId() const {
    return m_parameter_id;
}
void OAIProjectParameterDetails::setParameterId(const qint32 &parameter_id) {
    m_parameter_id = parameter_id;
    m_parameter_id_isSet = true;
}

bool OAIProjectParameterDetails::is_parameter_id_Set() const{
    return m_parameter_id_isSet;
}

bool OAIProjectParameterDetails::is_parameter_id_Valid() const{
    return m_parameter_id_isValid;
}

QString OAIProjectParameterDetails::getUnit() const {
    return m_unit;
}
void OAIProjectParameterDetails::setUnit(const QString &unit) {
    m_unit = unit;
    m_unit_isSet = true;
}

bool OAIProjectParameterDetails::is_unit_Set() const{
    return m_unit_isSet;
}

bool OAIProjectParameterDetails::is_unit_Valid() const{
    return m_unit_isValid;
}

bool OAIProjectParameterDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameter_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectParameterDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_average_isValid && m_count_isValid && m_first_updated_isValid && m_last_updated_isValid && m_last_value_isValid && m_locations_isValid && m_parameter_isValid && m_parameter_id_isValid && m_unit_isValid && true;
}

} // namespace OpenAPI
