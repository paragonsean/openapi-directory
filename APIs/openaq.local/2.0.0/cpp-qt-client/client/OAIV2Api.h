/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV2Api_H
#define OAI_OAIV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICitiesOrder.h"
#include "OAICountriesOrder.h"
#include "OAIDate_From.h"
#include "OAIDate_To.h"
#include "OAIDatefrom.h"
#include "OAIDateto.h"
#include "OAIEntityTypes.h"
#include "OAIHTTPValidationError.h"
#include "OAILastupdatedfrom.h"
#include "OAILastupdatedto.h"
#include "OAILocation_inner.h"
#include "OAILocationsOrder.h"
#include "OAIMeasOrder.h"
#include "OAIOpenAQCitiesResult.h"
#include "OAIOpenAQCountriesResult.h"
#include "OAIOpenAQParametersResult.h"
#include "OAIOpenAQProjectsResult.h"
#include "OAIOpenAQResult.h"
#include "OAIOrder_By.h"
#include "OAIParameter.h"
#include "OAIParameter_inner.h"
#include "OAIProjectsOrder.h"
#include "OAISensorTypes.h"
#include "OAISort.h"
#include "OAISourcesOrder.h"
#include "OAISpatial.h"
#include "OAITemporal.h"
#include "OAITileJSON.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV2Api : public QObject {
    Q_OBJECT

public:
    OAIV2Api(const int timeOut = 0);
    ~OAIV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  spatial OAISpatial [required]
    * @param[in]  temporal OAITemporal [required]
    * @param[in]  date_from OAIDate_From [optional]
    * @param[in]  date_to OAIDate_To [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  project_id qint32 [optional]
    * @param[in]  project QList<OAIParameter_inner> [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  location QList<QString> [optional]
    * @param[in]  group bool [optional]
    */
    virtual void averagesV2GetV2AveragesGet(const OAISpatial &spatial, const OAITemporal &temporal, const ::OpenAPI::OptionalParam<OAIDate_From> &date_from = ::OpenAPI::OptionalParam<OAIDate_From>(), const ::OpenAPI::OptionalParam<OAIDate_To> &date_to = ::OpenAPI::OptionalParam<OAIDate_To>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &project_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &project = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QList<QString>> &location = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &group = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  order_by OAICitiesOrder [optional]
    * @param[in]  entity QString [optional]
    */
    virtual void citiesGetV2CitiesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICitiesOrder> &order_by = ::OpenAPI::OptionalParam<OAICitiesOrder>(), const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  order_by OAICountriesOrder [optional]
    */
    virtual void countriesGetV2CountriesCountryIdGet(const QString &country_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICountriesOrder> &order_by = ::OpenAPI::OptionalParam<OAICountriesOrder>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  order_by OAICountriesOrder [optional]
    */
    virtual void countriesGetV2CountriesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICountriesOrder> &order_by = ::OpenAPI::OptionalParam<OAICountriesOrder>());


    virtual void demoV2LocationsTilesViewerGet();

    /**
    * @param[in]  z qint32 [required]
    * @param[in]  x qint32 [required]
    * @param[in]  y qint32 [required]
    * @param[in]  parameter OAIParameter [optional]
    * @param[in]  location QList<qint32> [optional]
    * @param[in]  last_updated_from OAILastupdatedfrom [optional]
    * @param[in]  last_updated_to OAILastupdatedto [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  project qint32 [optional]
    * @param[in]  is_analysis bool [optional]
    */
    virtual void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(const qint32 &z, const qint32 &x, const qint32 &y, const ::OpenAPI::OptionalParam<OAIParameter> &parameter = ::OpenAPI::OptionalParam<OAIParameter>(), const ::OpenAPI::OptionalParam<QList<qint32>> &location = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAILastupdatedfrom> &last_updated_from = ::OpenAPI::OptionalParam<OAILastupdatedfrom>(), const ::OpenAPI::OptionalParam<OAILastupdatedto> &last_updated_to = ::OpenAPI::OptionalParam<OAILastupdatedto>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &project = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  z qint32 [required]
    * @param[in]  x qint32 [required]
    * @param[in]  y qint32 [required]
    * @param[in]  date_from OAIDatefrom [required]
    * @param[in]  date_to OAIDateto [required]
    * @param[in]  parameter OAIParameter [optional]
    * @param[in]  location QList<qint32> [optional]
    * @param[in]  last_updated_from OAILastupdatedfrom [optional]
    * @param[in]  last_updated_to OAILastupdatedto [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  project qint32 [optional]
    * @param[in]  is_analysis bool [optional]
    */
    virtual void getMobiletileV2LocationsTilesMobileZXYPbfGet(const qint32 &z, const qint32 &x, const qint32 &y, const OAIDatefrom &date_from, const OAIDateto &date_to, const ::OpenAPI::OptionalParam<OAIParameter> &parameter = ::OpenAPI::OptionalParam<OAIParameter>(), const ::OpenAPI::OptionalParam<QList<qint32>> &location = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAILastupdatedfrom> &last_updated_from = ::OpenAPI::OptionalParam<OAILastupdatedfrom>(), const ::OpenAPI::OptionalParam<OAILastupdatedto> &last_updated_to = ::OpenAPI::OptionalParam<OAILastupdatedto>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &project = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  z qint32 [required]
    * @param[in]  x qint32 [required]
    * @param[in]  y qint32 [required]
    * @param[in]  parameter OAIParameter [optional]
    * @param[in]  location QList<qint32> [optional]
    * @param[in]  last_updated_from OAILastupdatedfrom [optional]
    * @param[in]  last_updated_to OAILastupdatedto [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  project qint32 [optional]
    * @param[in]  is_analysis bool [optional]
    */
    virtual void getTileV2LocationsTilesZXYPbfGet(const qint32 &z, const qint32 &x, const qint32 &y, const ::OpenAPI::OptionalParam<OAIParameter> &parameter = ::OpenAPI::OptionalParam<OAIParameter>(), const ::OpenAPI::OptionalParam<QList<qint32>> &location = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<OAILastupdatedfrom> &last_updated_from = ::OpenAPI::OptionalParam<OAILastupdatedfrom>(), const ::OpenAPI::OptionalParam<OAILastupdatedto> &last_updated_to = ::OpenAPI::OptionalParam<OAILastupdatedto>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &project = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location_id qint32 [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void latestGetV2LatestGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &location_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  location_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void latestGetV2LatestLocationIdGet(const qint32 &location_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location_id qint32 [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void locationsGetV2LocationsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &location_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  location_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void locationsGetV2LocationsLocationIdGet(const qint32 &location_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  date_from OAIDate_From [optional]
    * @param[in]  date_to OAIDate_To [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location_id qint32 [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAIMeasOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  project qint32 [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  value_from double [optional]
    * @param[in]  value_to double [optional]
    * @param[in]  include_fields QString [optional]
    */
    virtual void measurementsGetV2MeasurementsGet(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDate_From> &date_from = ::OpenAPI::OptionalParam<OAIDate_From>(), const ::OpenAPI::OptionalParam<OAIDate_To> &date_to = ::OpenAPI::OptionalParam<OAIDate_To>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &location_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAIMeasOrder> &order_by = ::OpenAPI::OptionalParam<OAIMeasOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &project = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<double> &value_from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &value_to = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &include_fields = ::OpenAPI::OptionalParam<QString>());


    virtual void mfrGetV2ManufacturersGet();


    virtual void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet();


    virtual void mobiletilejsonV2LocationsTilesMobileTilesJsonGet();


    virtual void modelGetV2ModelsGet();

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  source_id QList<qint32> [optional]
    * @param[in]  source_slug QList<QString> [optional]
    * @param[in]  order_by OAIOrder_By [optional]
    */
    virtual void parametersGetV2ParametersGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &source_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_slug = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIOrder_By> &order_by = ::OpenAPI::OptionalParam<OAIOrder_By>());

    /**
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  project_id qint32 [optional]
    * @param[in]  project QList<OAIParameter_inner> [optional]
    * @param[in]  order_by OAIProjectsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  entity QString [optional]
    * @param[in]  sensor_type QString [optional]
    * @param[in]  source_name QList<QString> [optional]
    */
    virtual void projectsGetV2ProjectsGet(const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &project_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &project = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<OAIProjectsOrder> &order_by = ::OpenAPI::OptionalParam<OAIProjectsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sensor_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  project_id qint32 [required]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  project QList<OAIParameter_inner> [optional]
    * @param[in]  order_by OAIProjectsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  entity QString [optional]
    * @param[in]  sensor_type QString [optional]
    * @param[in]  source_name QList<QString> [optional]
    */
    virtual void projectsGetV2ProjectsProjectIdGet(const qint32 &project_id, const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &project = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<OAIProjectsOrder> &order_by = ::OpenAPI::OptionalParam<OAIProjectsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sensor_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  slug QString [required]
    */
    virtual void readmeGetV2SourcesReadmeSlugGet(const QString &slug);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  source_id QList<qint32> [optional]
    * @param[in]  source_slug QList<QString> [optional]
    * @param[in]  order_by OAISourcesOrder [optional]
    */
    virtual void sourcesGetV2SourcesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &source_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_slug = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAISourcesOrder> &order_by = ::OpenAPI::OptionalParam<OAISourcesOrder>());


    virtual void summaryGetV2SummaryGet();


    virtual void tilejsonV2LocationsTilesTilesJsonGet();


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void averagesV2GetV2AveragesGetCallback(OAIHttpRequestWorker *worker);
    void citiesGetV2CitiesGetCallback(OAIHttpRequestWorker *worker);
    void countriesGetV2CountriesCountryIdGetCallback(OAIHttpRequestWorker *worker);
    void countriesGetV2CountriesGetCallback(OAIHttpRequestWorker *worker);
    void demoV2LocationsTilesViewerGetCallback(OAIHttpRequestWorker *worker);
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetCallback(OAIHttpRequestWorker *worker);
    void getMobiletileV2LocationsTilesMobileZXYPbfGetCallback(OAIHttpRequestWorker *worker);
    void getTileV2LocationsTilesZXYPbfGetCallback(OAIHttpRequestWorker *worker);
    void latestGetV2LatestGetCallback(OAIHttpRequestWorker *worker);
    void latestGetV2LatestLocationIdGetCallback(OAIHttpRequestWorker *worker);
    void locationsGetV2LocationsGetCallback(OAIHttpRequestWorker *worker);
    void locationsGetV2LocationsLocationIdGetCallback(OAIHttpRequestWorker *worker);
    void measurementsGetV2MeasurementsGetCallback(OAIHttpRequestWorker *worker);
    void mfrGetV2ManufacturersGetCallback(OAIHttpRequestWorker *worker);
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetCallback(OAIHttpRequestWorker *worker);
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetCallback(OAIHttpRequestWorker *worker);
    void modelGetV2ModelsGetCallback(OAIHttpRequestWorker *worker);
    void parametersGetV2ParametersGetCallback(OAIHttpRequestWorker *worker);
    void projectsGetV2ProjectsGetCallback(OAIHttpRequestWorker *worker);
    void projectsGetV2ProjectsProjectIdGetCallback(OAIHttpRequestWorker *worker);
    void readmeGetV2SourcesReadmeSlugGetCallback(OAIHttpRequestWorker *worker);
    void sourcesGetV2SourcesGetCallback(OAIHttpRequestWorker *worker);
    void summaryGetV2SummaryGetCallback(OAIHttpRequestWorker *worker);
    void tilejsonV2LocationsTilesTilesJsonGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void averagesV2GetV2AveragesGetSignal(OAIOpenAQResult summary);
    void citiesGetV2CitiesGetSignal(OAIOpenAQCitiesResult summary);
    void countriesGetV2CountriesCountryIdGetSignal(OAIOpenAQCountriesResult summary);
    void countriesGetV2CountriesGetSignal(OAIOpenAQCountriesResult summary);
    void demoV2LocationsTilesViewerGetSignal(QString summary);
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignal();
    void getMobiletileV2LocationsTilesMobileZXYPbfGetSignal();
    void getTileV2LocationsTilesZXYPbfGetSignal();
    void latestGetV2LatestGetSignal(OAIOpenAQResult summary);
    void latestGetV2LatestLocationIdGetSignal(OAIOpenAQResult summary);
    void locationsGetV2LocationsGetSignal(OAIOpenAQResult summary);
    void locationsGetV2LocationsLocationIdGetSignal(OAIOpenAQResult summary);
    void measurementsGetV2MeasurementsGetSignal(QJsonValue summary);
    void mfrGetV2ManufacturersGetSignal(OAIOpenAQResult summary);
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignal(OAITileJSON summary);
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignal(OAITileJSON summary);
    void modelGetV2ModelsGetSignal(OAIOpenAQResult summary);
    void parametersGetV2ParametersGetSignal(OAIOpenAQParametersResult summary);
    void projectsGetV2ProjectsGetSignal(OAIOpenAQProjectsResult summary);
    void projectsGetV2ProjectsProjectIdGetSignal(OAIOpenAQProjectsResult summary);
    void readmeGetV2SourcesReadmeSlugGetSignal(QJsonValue summary);
    void sourcesGetV2SourcesGetSignal(OAIOpenAQResult summary);
    void summaryGetV2SummaryGetSignal(OAIOpenAQResult summary);
    void tilejsonV2LocationsTilesTilesJsonGetSignal(OAITileJSON summary);


    void averagesV2GetV2AveragesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void citiesGetV2CitiesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQCitiesResult summary);
    void countriesGetV2CountriesCountryIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQCountriesResult summary);
    void countriesGetV2CountriesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQCountriesResult summary);
    void demoV2LocationsTilesViewerGetSignalFull(OAIHttpRequestWorker *worker, QString summary);
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalFull(OAIHttpRequestWorker *worker);
    void getMobiletileV2LocationsTilesMobileZXYPbfGetSignalFull(OAIHttpRequestWorker *worker);
    void getTileV2LocationsTilesZXYPbfGetSignalFull(OAIHttpRequestWorker *worker);
    void latestGetV2LatestGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void latestGetV2LatestLocationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void locationsGetV2LocationsGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void locationsGetV2LocationsLocationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void measurementsGetV2MeasurementsGetSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void mfrGetV2ManufacturersGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalFull(OAIHttpRequestWorker *worker, OAITileJSON summary);
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalFull(OAIHttpRequestWorker *worker, OAITileJSON summary);
    void modelGetV2ModelsGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void parametersGetV2ParametersGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQParametersResult summary);
    void projectsGetV2ProjectsGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQProjectsResult summary);
    void projectsGetV2ProjectsProjectIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQProjectsResult summary);
    void readmeGetV2SourcesReadmeSlugGetSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void sourcesGetV2SourcesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void summaryGetV2SummaryGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void tilejsonV2LocationsTilesTilesJsonGetSignalFull(OAIHttpRequestWorker *worker, OAITileJSON summary);

    Q_DECL_DEPRECATED_X("Use averagesV2GetV2AveragesGetSignalError() instead")
    void averagesV2GetV2AveragesGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void averagesV2GetV2AveragesGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesGetV2CitiesGetSignalError() instead")
    void citiesGetV2CitiesGetSignalE(OAIOpenAQCitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesGetV2CitiesGetSignalError(OAIOpenAQCitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetV2CountriesCountryIdGetSignalError() instead")
    void countriesGetV2CountriesCountryIdGetSignalE(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetV2CountriesCountryIdGetSignalError(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetV2CountriesGetSignalError() instead")
    void countriesGetV2CountriesGetSignalE(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetV2CountriesGetSignalError(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demoV2LocationsTilesViewerGetSignalError() instead")
    void demoV2LocationsTilesViewerGetSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void demoV2LocationsTilesViewerGetSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalError() instead")
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMobiletileV2LocationsTilesMobileZXYPbfGetSignalError() instead")
    void getMobiletileV2LocationsTilesMobileZXYPbfGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getMobiletileV2LocationsTilesMobileZXYPbfGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTileV2LocationsTilesZXYPbfGetSignalError() instead")
    void getTileV2LocationsTilesZXYPbfGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getTileV2LocationsTilesZXYPbfGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestGetV2LatestGetSignalError() instead")
    void latestGetV2LatestGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void latestGetV2LatestGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestGetV2LatestLocationIdGetSignalError() instead")
    void latestGetV2LatestLocationIdGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void latestGetV2LatestLocationIdGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetV2LocationsGetSignalError() instead")
    void locationsGetV2LocationsGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetV2LocationsGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetV2LocationsLocationIdGetSignalError() instead")
    void locationsGetV2LocationsLocationIdGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetV2LocationsLocationIdGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use measurementsGetV2MeasurementsGetSignalError() instead")
    void measurementsGetV2MeasurementsGetSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void measurementsGetV2MeasurementsGetSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mfrGetV2ManufacturersGetSignalError() instead")
    void mfrGetV2ManufacturersGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mfrGetV2ManufacturersGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalError() instead")
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalE(OAITileJSON summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalError(OAITileJSON summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalError() instead")
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalE(OAITileJSON summary, QNetworkReply::NetworkError error_type, QString error_str);
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalError(OAITileJSON summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetV2ModelsGetSignalError() instead")
    void modelGetV2ModelsGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetV2ModelsGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parametersGetV2ParametersGetSignalError() instead")
    void parametersGetV2ParametersGetSignalE(OAIOpenAQParametersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parametersGetV2ParametersGetSignalError(OAIOpenAQParametersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetV2ProjectsGetSignalError() instead")
    void projectsGetV2ProjectsGetSignalE(OAIOpenAQProjectsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetV2ProjectsGetSignalError(OAIOpenAQProjectsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetV2ProjectsProjectIdGetSignalError() instead")
    void projectsGetV2ProjectsProjectIdGetSignalE(OAIOpenAQProjectsResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetV2ProjectsProjectIdGetSignalError(OAIOpenAQProjectsResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readmeGetV2SourcesReadmeSlugGetSignalError() instead")
    void readmeGetV2SourcesReadmeSlugGetSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void readmeGetV2SourcesReadmeSlugGetSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourcesGetV2SourcesGetSignalError() instead")
    void sourcesGetV2SourcesGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourcesGetV2SourcesGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use summaryGetV2SummaryGetSignalError() instead")
    void summaryGetV2SummaryGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void summaryGetV2SummaryGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tilejsonV2LocationsTilesTilesJsonGetSignalError() instead")
    void tilejsonV2LocationsTilesTilesJsonGetSignalE(OAITileJSON summary, QNetworkReply::NetworkError error_type, QString error_str);
    void tilejsonV2LocationsTilesTilesJsonGetSignalError(OAITileJSON summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use averagesV2GetV2AveragesGetSignalErrorFull() instead")
    void averagesV2GetV2AveragesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void averagesV2GetV2AveragesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use citiesGetV2CitiesGetSignalErrorFull() instead")
    void citiesGetV2CitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesGetV2CitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetV2CountriesCountryIdGetSignalErrorFull() instead")
    void countriesGetV2CountriesCountryIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetV2CountriesCountryIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetV2CountriesGetSignalErrorFull() instead")
    void countriesGetV2CountriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetV2CountriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use demoV2LocationsTilesViewerGetSignalErrorFull() instead")
    void demoV2LocationsTilesViewerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void demoV2LocationsTilesViewerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalErrorFull() instead")
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMobiletileV2LocationsTilesMobileZXYPbfGetSignalErrorFull() instead")
    void getMobiletileV2LocationsTilesMobileZXYPbfGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMobiletileV2LocationsTilesMobileZXYPbfGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTileV2LocationsTilesZXYPbfGetSignalErrorFull() instead")
    void getTileV2LocationsTilesZXYPbfGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTileV2LocationsTilesZXYPbfGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestGetV2LatestGetSignalErrorFull() instead")
    void latestGetV2LatestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void latestGetV2LatestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestGetV2LatestLocationIdGetSignalErrorFull() instead")
    void latestGetV2LatestLocationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void latestGetV2LatestLocationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetV2LocationsGetSignalErrorFull() instead")
    void locationsGetV2LocationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetV2LocationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsGetV2LocationsLocationIdGetSignalErrorFull() instead")
    void locationsGetV2LocationsLocationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsGetV2LocationsLocationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use measurementsGetV2MeasurementsGetSignalErrorFull() instead")
    void measurementsGetV2MeasurementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void measurementsGetV2MeasurementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mfrGetV2ManufacturersGetSignalErrorFull() instead")
    void mfrGetV2ManufacturersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mfrGetV2ManufacturersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalErrorFull() instead")
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalErrorFull() instead")
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mobiletilejsonV2LocationsTilesMobileTilesJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use modelGetV2ModelsGetSignalErrorFull() instead")
    void modelGetV2ModelsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void modelGetV2ModelsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parametersGetV2ParametersGetSignalErrorFull() instead")
    void parametersGetV2ParametersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parametersGetV2ParametersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetV2ProjectsGetSignalErrorFull() instead")
    void projectsGetV2ProjectsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetV2ProjectsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use projectsGetV2ProjectsProjectIdGetSignalErrorFull() instead")
    void projectsGetV2ProjectsProjectIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void projectsGetV2ProjectsProjectIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use readmeGetV2SourcesReadmeSlugGetSignalErrorFull() instead")
    void readmeGetV2SourcesReadmeSlugGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void readmeGetV2SourcesReadmeSlugGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourcesGetV2SourcesGetSignalErrorFull() instead")
    void sourcesGetV2SourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourcesGetV2SourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use summaryGetV2SummaryGetSignalErrorFull() instead")
    void summaryGetV2SummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void summaryGetV2SummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use tilejsonV2LocationsTilesTilesJsonGetSignalErrorFull() instead")
    void tilejsonV2LocationsTilesTilesJsonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void tilejsonV2LocationsTilesTilesJsonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
