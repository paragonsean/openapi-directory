/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIMeta.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIMeta::OAIMeta(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIMeta::OAIMeta() {
    this->initializeModel();
}

OAIMeta::~OAIMeta() {}

void OAIMeta::initializeModel() {

    m_found_isSet = false;
    m_found_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIMeta::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIMeta::fromJsonObject(QJsonObject json) {

    m_found_isValid = ::OpenAPI::fromJsonValue(m_found, json[QString("found")]);
    m_found_isSet = !json[QString("found")].isNull() && m_found_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIMeta::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIMeta::asJsonObject() const {
    QJsonObject obj;
    if (m_found_isSet) {
        obj.insert(QString("found"), ::OpenAPI::toJsonValue(m_found));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

qint32 OAIMeta::getFound() const {
    return m_found;
}
void OAIMeta::setFound(const qint32 &found) {
    m_found = found;
    m_found_isSet = true;
}

bool OAIMeta::is_found_Set() const{
    return m_found_isSet;
}

bool OAIMeta::is_found_Valid() const{
    return m_found_isValid;
}

QString OAIMeta::getLicense() const {
    return m_license;
}
void OAIMeta::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIMeta::is_license_Set() const{
    return m_license_isSet;
}

bool OAIMeta::is_license_Valid() const{
    return m_license_isValid;
}

qint32 OAIMeta::getLimit() const {
    return m_limit;
}
void OAIMeta::setLimit(const qint32 &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIMeta::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIMeta::is_limit_Valid() const{
    return m_limit_isValid;
}

QString OAIMeta::getName() const {
    return m_name;
}
void OAIMeta::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIMeta::is_name_Set() const{
    return m_name_isSet;
}

bool OAIMeta::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIMeta::getPage() const {
    return m_page;
}
void OAIMeta::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIMeta::is_page_Set() const{
    return m_page_isSet;
}

bool OAIMeta::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIMeta::getWebsite() const {
    return m_website;
}
void OAIMeta::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIMeta::is_website_Set() const{
    return m_website_isSet;
}

bool OAIMeta::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIMeta::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_found_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIMeta::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
