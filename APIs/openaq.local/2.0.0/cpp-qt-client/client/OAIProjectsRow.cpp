/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProjectsRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProjectsRow::OAIProjectsRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProjectsRow::OAIProjectsRow() {
    this->initializeModel();
}

OAIProjectsRow::~OAIProjectsRow() {}

void OAIProjectsRow::initializeModel() {

    m_bbox_isSet = false;
    m_bbox_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_entity_isSet = false;
    m_entity_isValid = false;

    m_first_updated_isSet = false;
    m_first_updated_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_analysis_isSet = false;
    m_is_analysis_isValid = false;

    m_is_mobile_isSet = false;
    m_is_mobile_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_location_ids_isSet = false;
    m_location_ids_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_measurements_isSet = false;
    m_measurements_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_sensor_type_isSet = false;
    m_sensor_type_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;
}

void OAIProjectsRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProjectsRow::fromJsonObject(QJsonObject json) {

    m_bbox_isValid = ::OpenAPI::fromJsonValue(m_bbox, json[QString("bbox")]);
    m_bbox_isSet = !json[QString("bbox")].isNull() && m_bbox_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_entity_isValid = ::OpenAPI::fromJsonValue(m_entity, json[QString("entity")]);
    m_entity_isSet = !json[QString("entity")].isNull() && m_entity_isValid;

    m_first_updated_isValid = ::OpenAPI::fromJsonValue(m_first_updated, json[QString("firstUpdated")]);
    m_first_updated_isSet = !json[QString("firstUpdated")].isNull() && m_first_updated_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_analysis_isValid = ::OpenAPI::fromJsonValue(m_is_analysis, json[QString("isAnalysis")]);
    m_is_analysis_isSet = !json[QString("isAnalysis")].isNull() && m_is_analysis_isValid;

    m_is_mobile_isValid = ::OpenAPI::fromJsonValue(m_is_mobile, json[QString("isMobile")]);
    m_is_mobile_isSet = !json[QString("isMobile")].isNull() && m_is_mobile_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_location_ids_isValid = ::OpenAPI::fromJsonValue(m_location_ids, json[QString("locationIds")]);
    m_location_ids_isSet = !json[QString("locationIds")].isNull() && m_location_ids_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_measurements_isValid = ::OpenAPI::fromJsonValue(m_measurements, json[QString("measurements")]);
    m_measurements_isSet = !json[QString("measurements")].isNull() && m_measurements_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_sensor_type_isValid = ::OpenAPI::fromJsonValue(m_sensor_type, json[QString("sensorType")]);
    m_sensor_type_isSet = !json[QString("sensorType")].isNull() && m_sensor_type_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;
}

QString OAIProjectsRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProjectsRow::asJsonObject() const {
    QJsonObject obj;
    if (m_bbox.size() > 0) {
        obj.insert(QString("bbox"), ::OpenAPI::toJsonValue(m_bbox));
    }
    if (m_countries.size() > 0) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_entity_isSet) {
        obj.insert(QString("entity"), ::OpenAPI::toJsonValue(m_entity));
    }
    if (m_first_updated_isSet) {
        obj.insert(QString("firstUpdated"), ::OpenAPI::toJsonValue(m_first_updated));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_analysis_isSet) {
        obj.insert(QString("isAnalysis"), ::OpenAPI::toJsonValue(m_is_analysis));
    }
    if (m_is_mobile_isSet) {
        obj.insert(QString("isMobile"), ::OpenAPI::toJsonValue(m_is_mobile));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_location_ids.size() > 0) {
        obj.insert(QString("locationIds"), ::OpenAPI::toJsonValue(m_location_ids));
    }
    if (m_locations_isSet) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_measurements_isSet) {
        obj.insert(QString("measurements"), ::OpenAPI::toJsonValue(m_measurements));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_sensor_type_isSet) {
        obj.insert(QString("sensorType"), ::OpenAPI::toJsonValue(m_sensor_type));
    }
    if (m_sources.size() > 0) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    return obj;
}

QList<double> OAIProjectsRow::getBbox() const {
    return m_bbox;
}
void OAIProjectsRow::setBbox(const QList<double> &bbox) {
    m_bbox = bbox;
    m_bbox_isSet = true;
}

bool OAIProjectsRow::is_bbox_Set() const{
    return m_bbox_isSet;
}

bool OAIProjectsRow::is_bbox_Valid() const{
    return m_bbox_isValid;
}

QList<QString> OAIProjectsRow::getCountries() const {
    return m_countries;
}
void OAIProjectsRow::setCountries(const QList<QString> &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAIProjectsRow::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAIProjectsRow::is_countries_Valid() const{
    return m_countries_isValid;
}

QString OAIProjectsRow::getEntity() const {
    return m_entity;
}
void OAIProjectsRow::setEntity(const QString &entity) {
    m_entity = entity;
    m_entity_isSet = true;
}

bool OAIProjectsRow::is_entity_Set() const{
    return m_entity_isSet;
}

bool OAIProjectsRow::is_entity_Valid() const{
    return m_entity_isValid;
}

QDateTime OAIProjectsRow::getFirstUpdated() const {
    return m_first_updated;
}
void OAIProjectsRow::setFirstUpdated(const QDateTime &first_updated) {
    m_first_updated = first_updated;
    m_first_updated_isSet = true;
}

bool OAIProjectsRow::is_first_updated_Set() const{
    return m_first_updated_isSet;
}

bool OAIProjectsRow::is_first_updated_Valid() const{
    return m_first_updated_isValid;
}

qint32 OAIProjectsRow::getId() const {
    return m_id;
}
void OAIProjectsRow::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProjectsRow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProjectsRow::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIProjectsRow::isIsAnalysis() const {
    return m_is_analysis;
}
void OAIProjectsRow::setIsAnalysis(const bool &is_analysis) {
    m_is_analysis = is_analysis;
    m_is_analysis_isSet = true;
}

bool OAIProjectsRow::is_is_analysis_Set() const{
    return m_is_analysis_isSet;
}

bool OAIProjectsRow::is_is_analysis_Valid() const{
    return m_is_analysis_isValid;
}

bool OAIProjectsRow::isIsMobile() const {
    return m_is_mobile;
}
void OAIProjectsRow::setIsMobile(const bool &is_mobile) {
    m_is_mobile = is_mobile;
    m_is_mobile_isSet = true;
}

bool OAIProjectsRow::is_is_mobile_Set() const{
    return m_is_mobile_isSet;
}

bool OAIProjectsRow::is_is_mobile_Valid() const{
    return m_is_mobile_isValid;
}

QDateTime OAIProjectsRow::getLastUpdated() const {
    return m_last_updated;
}
void OAIProjectsRow::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAIProjectsRow::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAIProjectsRow::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

QList<qint32> OAIProjectsRow::getLocationIds() const {
    return m_location_ids;
}
void OAIProjectsRow::setLocationIds(const QList<qint32> &location_ids) {
    m_location_ids = location_ids;
    m_location_ids_isSet = true;
}

bool OAIProjectsRow::is_location_ids_Set() const{
    return m_location_ids_isSet;
}

bool OAIProjectsRow::is_location_ids_Valid() const{
    return m_location_ids_isValid;
}

qint32 OAIProjectsRow::getLocations() const {
    return m_locations;
}
void OAIProjectsRow::setLocations(const qint32 &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAIProjectsRow::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAIProjectsRow::is_locations_Valid() const{
    return m_locations_isValid;
}

qint32 OAIProjectsRow::getMeasurements() const {
    return m_measurements;
}
void OAIProjectsRow::setMeasurements(const qint32 &measurements) {
    m_measurements = measurements;
    m_measurements_isSet = true;
}

bool OAIProjectsRow::is_measurements_Set() const{
    return m_measurements_isSet;
}

bool OAIProjectsRow::is_measurements_Valid() const{
    return m_measurements_isValid;
}

QString OAIProjectsRow::getName() const {
    return m_name;
}
void OAIProjectsRow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIProjectsRow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIProjectsRow::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIProjectParameterDetails> OAIProjectsRow::getParameters() const {
    return m_parameters;
}
void OAIProjectsRow::setParameters(const QList<OAIProjectParameterDetails> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAIProjectsRow::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAIProjectsRow::is_parameters_Valid() const{
    return m_parameters_isValid;
}

QString OAIProjectsRow::getSensorType() const {
    return m_sensor_type;
}
void OAIProjectsRow::setSensorType(const QString &sensor_type) {
    m_sensor_type = sensor_type;
    m_sensor_type_isSet = true;
}

bool OAIProjectsRow::is_sensor_type_Set() const{
    return m_sensor_type_isSet;
}

bool OAIProjectsRow::is_sensor_type_Valid() const{
    return m_sensor_type_isValid;
}

QList<QJsonValue> OAIProjectsRow::getSources() const {
    return m_sources;
}
void OAIProjectsRow::setSources(const QList<QJsonValue> &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAIProjectsRow::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAIProjectsRow::is_sources_Valid() const{
    return m_sources_isValid;
}

QString OAIProjectsRow::getSubtitle() const {
    return m_subtitle;
}
void OAIProjectsRow::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIProjectsRow::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIProjectsRow::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

bool OAIProjectsRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bbox.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_entity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_analysis_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_mobile_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_measurements_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sensor_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProjectsRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_first_updated_isValid && m_id_isValid && m_last_updated_isValid && m_location_ids_isValid && m_locations_isValid && m_measurements_isValid && m_name_isValid && m_parameters_isValid && m_subtitle_isValid && true;
}

} // namespace OpenAPI
