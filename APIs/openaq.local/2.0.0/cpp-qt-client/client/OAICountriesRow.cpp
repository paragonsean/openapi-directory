/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountriesRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountriesRow::OAICountriesRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountriesRow::OAICountriesRow() {
    this->initializeModel();
}

OAICountriesRow::~OAICountriesRow() {}

void OAICountriesRow::initializeModel() {

    m_cities_isSet = false;
    m_cities_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_first_updated_isSet = false;
    m_first_updated_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;

    m_sources_isSet = false;
    m_sources_isValid = false;
}

void OAICountriesRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountriesRow::fromJsonObject(QJsonObject json) {

    m_cities_isValid = ::OpenAPI::fromJsonValue(m_cities, json[QString("cities")]);
    m_cities_isSet = !json[QString("cities")].isNull() && m_cities_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_first_updated_isValid = ::OpenAPI::fromJsonValue(m_first_updated, json[QString("firstUpdated")]);
    m_first_updated_isSet = !json[QString("firstUpdated")].isNull() && m_first_updated_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;

    m_sources_isValid = ::OpenAPI::fromJsonValue(m_sources, json[QString("sources")]);
    m_sources_isSet = !json[QString("sources")].isNull() && m_sources_isValid;
}

QString OAICountriesRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountriesRow::asJsonObject() const {
    QJsonObject obj;
    if (m_cities_isSet) {
        obj.insert(QString("cities"), ::OpenAPI::toJsonValue(m_cities));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_first_updated_isSet) {
        obj.insert(QString("firstUpdated"), ::OpenAPI::toJsonValue(m_first_updated));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_locations_isSet) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    if (m_sources_isSet) {
        obj.insert(QString("sources"), ::OpenAPI::toJsonValue(m_sources));
    }
    return obj;
}

qint32 OAICountriesRow::getCities() const {
    return m_cities;
}
void OAICountriesRow::setCities(const qint32 &cities) {
    m_cities = cities;
    m_cities_isSet = true;
}

bool OAICountriesRow::is_cities_Set() const{
    return m_cities_isSet;
}

bool OAICountriesRow::is_cities_Valid() const{
    return m_cities_isValid;
}

QString OAICountriesRow::getCode() const {
    return m_code;
}
void OAICountriesRow::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICountriesRow::is_code_Set() const{
    return m_code_isSet;
}

bool OAICountriesRow::is_code_Valid() const{
    return m_code_isValid;
}

qint32 OAICountriesRow::getCount() const {
    return m_count;
}
void OAICountriesRow::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICountriesRow::is_count_Set() const{
    return m_count_isSet;
}

bool OAICountriesRow::is_count_Valid() const{
    return m_count_isValid;
}

QDateTime OAICountriesRow::getFirstUpdated() const {
    return m_first_updated;
}
void OAICountriesRow::setFirstUpdated(const QDateTime &first_updated) {
    m_first_updated = first_updated;
    m_first_updated_isSet = true;
}

bool OAICountriesRow::is_first_updated_Set() const{
    return m_first_updated_isSet;
}

bool OAICountriesRow::is_first_updated_Valid() const{
    return m_first_updated_isValid;
}

QDateTime OAICountriesRow::getLastUpdated() const {
    return m_last_updated;
}
void OAICountriesRow::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAICountriesRow::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAICountriesRow::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAICountriesRow::getLocations() const {
    return m_locations;
}
void OAICountriesRow::setLocations(const qint32 &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAICountriesRow::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAICountriesRow::is_locations_Valid() const{
    return m_locations_isValid;
}

QString OAICountriesRow::getName() const {
    return m_name;
}
void OAICountriesRow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountriesRow::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountriesRow::is_name_Valid() const{
    return m_name_isValid;
}

QList<QString> OAICountriesRow::getParameters() const {
    return m_parameters;
}
void OAICountriesRow::setParameters(const QList<QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICountriesRow::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICountriesRow::is_parameters_Valid() const{
    return m_parameters_isValid;
}

qint32 OAICountriesRow::getSources() const {
    return m_sources;
}
void OAICountriesRow::setSources(const qint32 &sources) {
    m_sources = sources;
    m_sources_isSet = true;
}

bool OAICountriesRow::is_sources_Set() const{
    return m_sources_isSet;
}

bool OAICountriesRow::is_sources_Valid() const{
    return m_sources_isValid;
}

bool OAICountriesRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cities_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_sources_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountriesRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_cities_isValid && m_code_isValid && m_count_isValid && m_first_updated_isValid && m_last_updated_isValid && m_locations_isValid && m_name_isValid && m_parameters_isValid && m_sources_isValid && true;
}

} // namespace OpenAPI
