/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITileJSON.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITileJSON::OAITileJSON(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITileJSON::OAITileJSON() {
    this->initializeModel();
}

OAITileJSON::~OAITileJSON() {}

void OAITileJSON::initializeModel() {

    m_attribution_isSet = false;
    m_attribution_isValid = false;

    m_bounds_isSet = false;
    m_bounds_isValid = false;

    m_data_isSet = false;
    m_data_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_grids_isSet = false;
    m_grids_isValid = false;

    m_legend_isSet = false;
    m_legend_isValid = false;

    m_maxzoom_isSet = false;
    m_maxzoom_isValid = false;

    m_minzoom_isSet = false;
    m_minzoom_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_scheme_isSet = false;
    m_scheme_isValid = false;

    m_r_template_isSet = false;
    m_r_template_isValid = false;

    m_tilejson_isSet = false;
    m_tilejson_isValid = false;

    m_tiles_isSet = false;
    m_tiles_isValid = false;

    m_version_isSet = false;
    m_version_isValid = false;
}

void OAITileJSON::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITileJSON::fromJsonObject(QJsonObject json) {

    m_attribution_isValid = ::OpenAPI::fromJsonValue(m_attribution, json[QString("attribution")]);
    m_attribution_isSet = !json[QString("attribution")].isNull() && m_attribution_isValid;

    m_bounds_isValid = ::OpenAPI::fromJsonValue(m_bounds, json[QString("bounds")]);
    m_bounds_isSet = !json[QString("bounds")].isNull() && m_bounds_isValid;

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_grids_isValid = ::OpenAPI::fromJsonValue(m_grids, json[QString("grids")]);
    m_grids_isSet = !json[QString("grids")].isNull() && m_grids_isValid;

    m_legend_isValid = ::OpenAPI::fromJsonValue(m_legend, json[QString("legend")]);
    m_legend_isSet = !json[QString("legend")].isNull() && m_legend_isValid;

    m_maxzoom_isValid = ::OpenAPI::fromJsonValue(m_maxzoom, json[QString("maxzoom")]);
    m_maxzoom_isSet = !json[QString("maxzoom")].isNull() && m_maxzoom_isValid;

    m_minzoom_isValid = ::OpenAPI::fromJsonValue(m_minzoom, json[QString("minzoom")]);
    m_minzoom_isSet = !json[QString("minzoom")].isNull() && m_minzoom_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_scheme_isValid = ::OpenAPI::fromJsonValue(m_scheme, json[QString("scheme")]);
    m_scheme_isSet = !json[QString("scheme")].isNull() && m_scheme_isValid;

    m_r_template_isValid = ::OpenAPI::fromJsonValue(m_r_template, json[QString("template")]);
    m_r_template_isSet = !json[QString("template")].isNull() && m_r_template_isValid;

    m_tilejson_isValid = ::OpenAPI::fromJsonValue(m_tilejson, json[QString("tilejson")]);
    m_tilejson_isSet = !json[QString("tilejson")].isNull() && m_tilejson_isValid;

    m_tiles_isValid = ::OpenAPI::fromJsonValue(m_tiles, json[QString("tiles")]);
    m_tiles_isSet = !json[QString("tiles")].isNull() && m_tiles_isValid;

    m_version_isValid = ::OpenAPI::fromJsonValue(m_version, json[QString("version")]);
    m_version_isSet = !json[QString("version")].isNull() && m_version_isValid;
}

QString OAITileJSON::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITileJSON::asJsonObject() const {
    QJsonObject obj;
    if (m_attribution_isSet) {
        obj.insert(QString("attribution"), ::OpenAPI::toJsonValue(m_attribution));
    }
    if (m_bounds.size() > 0) {
        obj.insert(QString("bounds"), ::OpenAPI::toJsonValue(m_bounds));
    }
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_grids.size() > 0) {
        obj.insert(QString("grids"), ::OpenAPI::toJsonValue(m_grids));
    }
    if (m_legend_isSet) {
        obj.insert(QString("legend"), ::OpenAPI::toJsonValue(m_legend));
    }
    if (m_maxzoom_isSet) {
        obj.insert(QString("maxzoom"), ::OpenAPI::toJsonValue(m_maxzoom));
    }
    if (m_minzoom_isSet) {
        obj.insert(QString("minzoom"), ::OpenAPI::toJsonValue(m_minzoom));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_scheme_isSet) {
        obj.insert(QString("scheme"), ::OpenAPI::toJsonValue(m_scheme));
    }
    if (m_r_template_isSet) {
        obj.insert(QString("template"), ::OpenAPI::toJsonValue(m_r_template));
    }
    if (m_tilejson_isSet) {
        obj.insert(QString("tilejson"), ::OpenAPI::toJsonValue(m_tilejson));
    }
    if (m_tiles.size() > 0) {
        obj.insert(QString("tiles"), ::OpenAPI::toJsonValue(m_tiles));
    }
    if (m_version_isSet) {
        obj.insert(QString("version"), ::OpenAPI::toJsonValue(m_version));
    }
    return obj;
}

QString OAITileJSON::getAttribution() const {
    return m_attribution;
}
void OAITileJSON::setAttribution(const QString &attribution) {
    m_attribution = attribution;
    m_attribution_isSet = true;
}

bool OAITileJSON::is_attribution_Set() const{
    return m_attribution_isSet;
}

bool OAITileJSON::is_attribution_Valid() const{
    return m_attribution_isValid;
}

QList<double> OAITileJSON::getBounds() const {
    return m_bounds;
}
void OAITileJSON::setBounds(const QList<double> &bounds) {
    m_bounds = bounds;
    m_bounds_isSet = true;
}

bool OAITileJSON::is_bounds_Set() const{
    return m_bounds_isSet;
}

bool OAITileJSON::is_bounds_Valid() const{
    return m_bounds_isValid;
}

QList<QString> OAITileJSON::getData() const {
    return m_data;
}
void OAITileJSON::setData(const QList<QString> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAITileJSON::is_data_Set() const{
    return m_data_isSet;
}

bool OAITileJSON::is_data_Valid() const{
    return m_data_isValid;
}

QString OAITileJSON::getDescription() const {
    return m_description;
}
void OAITileJSON::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITileJSON::is_description_Set() const{
    return m_description_isSet;
}

bool OAITileJSON::is_description_Valid() const{
    return m_description_isValid;
}

QList<QString> OAITileJSON::getGrids() const {
    return m_grids;
}
void OAITileJSON::setGrids(const QList<QString> &grids) {
    m_grids = grids;
    m_grids_isSet = true;
}

bool OAITileJSON::is_grids_Set() const{
    return m_grids_isSet;
}

bool OAITileJSON::is_grids_Valid() const{
    return m_grids_isValid;
}

QString OAITileJSON::getLegend() const {
    return m_legend;
}
void OAITileJSON::setLegend(const QString &legend) {
    m_legend = legend;
    m_legend_isSet = true;
}

bool OAITileJSON::is_legend_Set() const{
    return m_legend_isSet;
}

bool OAITileJSON::is_legend_Valid() const{
    return m_legend_isValid;
}

qint32 OAITileJSON::getMaxzoom() const {
    return m_maxzoom;
}
void OAITileJSON::setMaxzoom(const qint32 &maxzoom) {
    m_maxzoom = maxzoom;
    m_maxzoom_isSet = true;
}

bool OAITileJSON::is_maxzoom_Set() const{
    return m_maxzoom_isSet;
}

bool OAITileJSON::is_maxzoom_Valid() const{
    return m_maxzoom_isValid;
}

qint32 OAITileJSON::getMinzoom() const {
    return m_minzoom;
}
void OAITileJSON::setMinzoom(const qint32 &minzoom) {
    m_minzoom = minzoom;
    m_minzoom_isSet = true;
}

bool OAITileJSON::is_minzoom_Set() const{
    return m_minzoom_isSet;
}

bool OAITileJSON::is_minzoom_Valid() const{
    return m_minzoom_isValid;
}

QString OAITileJSON::getName() const {
    return m_name;
}
void OAITileJSON::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAITileJSON::is_name_Set() const{
    return m_name_isSet;
}

bool OAITileJSON::is_name_Valid() const{
    return m_name_isValid;
}

QString OAITileJSON::getScheme() const {
    return m_scheme;
}
void OAITileJSON::setScheme(const QString &scheme) {
    m_scheme = scheme;
    m_scheme_isSet = true;
}

bool OAITileJSON::is_scheme_Set() const{
    return m_scheme_isSet;
}

bool OAITileJSON::is_scheme_Valid() const{
    return m_scheme_isValid;
}

QString OAITileJSON::getRTemplate() const {
    return m_r_template;
}
void OAITileJSON::setRTemplate(const QString &r_template) {
    m_r_template = r_template;
    m_r_template_isSet = true;
}

bool OAITileJSON::is_r_template_Set() const{
    return m_r_template_isSet;
}

bool OAITileJSON::is_r_template_Valid() const{
    return m_r_template_isValid;
}

QString OAITileJSON::getTilejson() const {
    return m_tilejson;
}
void OAITileJSON::setTilejson(const QString &tilejson) {
    m_tilejson = tilejson;
    m_tilejson_isSet = true;
}

bool OAITileJSON::is_tilejson_Set() const{
    return m_tilejson_isSet;
}

bool OAITileJSON::is_tilejson_Valid() const{
    return m_tilejson_isValid;
}

QList<QString> OAITileJSON::getTiles() const {
    return m_tiles;
}
void OAITileJSON::setTiles(const QList<QString> &tiles) {
    m_tiles = tiles;
    m_tiles_isSet = true;
}

bool OAITileJSON::is_tiles_Set() const{
    return m_tiles_isSet;
}

bool OAITileJSON::is_tiles_Valid() const{
    return m_tiles_isValid;
}

QString OAITileJSON::getVersion() const {
    return m_version;
}
void OAITileJSON::setVersion(const QString &version) {
    m_version = version;
    m_version_isSet = true;
}

bool OAITileJSON::is_version_Set() const{
    return m_version_isSet;
}

bool OAITileJSON::is_version_Valid() const{
    return m_version_isValid;
}

bool OAITileJSON::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_attribution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bounds.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_legend_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_maxzoom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minzoom_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scheme_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_template_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tilejson_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tiles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_version_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITileJSON::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_tiles_isValid && true;
}

} // namespace OpenAPI
