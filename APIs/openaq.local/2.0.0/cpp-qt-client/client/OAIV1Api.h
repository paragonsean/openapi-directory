/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIV1Api_H
#define OAI_OAIV1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICitiesOrder.h"
#include "OAICountriesOrder.h"
#include "OAIDate_From.h"
#include "OAIDate_To.h"
#include "OAIEntityTypes.h"
#include "OAIHTTPValidationError.h"
#include "OAILocation_inner.h"
#include "OAILocationsOrder.h"
#include "OAIMeasOrder.h"
#include "OAIOpenAQCitiesResult.h"
#include "OAIOpenAQCountriesResult.h"
#include "OAIOpenAQParametersResult.h"
#include "OAIOpenAQResult.h"
#include "OAIOrder_By.h"
#include "OAIParameter_inner.h"
#include "OAISensorTypes.h"
#include "OAISort.h"
#include "OAISourcesV1Order.h"
#include <QJsonValue>
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIV1Api : public QObject {
    Q_OBJECT

public:
    OAIV1Api(const int timeOut = 0);
    ~OAIV1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  order_by OAICitiesOrder [optional]
    * @param[in]  entity QString [optional]
    */
    virtual void citiesGetv1V1CitiesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICitiesOrder> &order_by = ::OpenAPI::OptionalParam<OAICitiesOrder>(), const ::OpenAPI::OptionalParam<QString> &entity = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country_id QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  order_by OAICountriesOrder [optional]
    */
    virtual void countriesGetV1CountriesCountryIdGet(const QString &country_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICountriesOrder> &order_by = ::OpenAPI::OptionalParam<OAICountriesOrder>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  order_by OAICountriesOrder [optional]
    */
    virtual void countriesGetv1V1CountriesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAICountriesOrder> &order_by = ::OpenAPI::OptionalParam<OAICountriesOrder>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location_id qint32 [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void latestV1GetV1LatestGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &location_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  location_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void latestV1GetV1LatestLocationIdGet(const qint32 &location_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location_id qint32 [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void locationsv1GetV1LocationsGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &location_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  location_id qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAILocationsOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  model_name QList<QString> [optional]
    * @param[in]  manufacturer_name QList<QString> [optional]
    * @param[in]  dump_raw bool [optional]
    */
    virtual void locationsv1GetV1LocationsLocationIdGet(const qint32 &location_id, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAILocationsOrder> &order_by = ::OpenAPI::OptionalParam<OAILocationsOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<QList<QString>> &model_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &manufacturer_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &dump_raw = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  format QString [optional]
    * @param[in]  date_from OAIDate_From [optional]
    * @param[in]  date_to OAIDate_To [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  has_geo bool [optional]
    * @param[in]  parameter_id qint32 [optional]
    * @param[in]  parameter QList<OAIParameter_inner> [optional]
    * @param[in]  unit QList<QString> [optional]
    * @param[in]  coordinates QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  country_id QString [optional]
    * @param[in]  country QList<QString> [optional]
    * @param[in]  city QList<QString> [optional]
    * @param[in]  location_id qint32 [optional]
    * @param[in]  location QList<OAILocation_inner> [optional]
    * @param[in]  order_by OAIMeasOrder [optional]
    * @param[in]  is_mobile bool [optional]
    * @param[in]  is_analysis bool [optional]
    * @param[in]  project qint32 [optional]
    * @param[in]  entity OAIEntityTypes [optional]
    * @param[in]  sensor_type OAISensorTypes [optional]
    * @param[in]  value_from double [optional]
    * @param[in]  value_to double [optional]
    * @param[in]  include_fields QString [optional]
    */
    virtual void measurementsGetV1V1MeasurementsGet(const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIDate_From> &date_from = ::OpenAPI::OptionalParam<OAIDate_From>(), const ::OpenAPI::OptionalParam<OAIDate_To> &date_to = ::OpenAPI::OptionalParam<OAIDate_To>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<bool> &has_geo = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &parameter_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAIParameter_inner>> &parameter = ::OpenAPI::OptionalParam<QList<OAIParameter_inner>>(), const ::OpenAPI::OptionalParam<QList<QString>> &unit = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &coordinates = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &city = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &location_id = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<OAILocation_inner>> &location = ::OpenAPI::OptionalParam<QList<OAILocation_inner>>(), const ::OpenAPI::OptionalParam<OAIMeasOrder> &order_by = ::OpenAPI::OptionalParam<OAIMeasOrder>(), const ::OpenAPI::OptionalParam<bool> &is_mobile = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &is_analysis = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &project = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIEntityTypes> &entity = ::OpenAPI::OptionalParam<OAIEntityTypes>(), const ::OpenAPI::OptionalParam<OAISensorTypes> &sensor_type = ::OpenAPI::OptionalParam<OAISensorTypes>(), const ::OpenAPI::OptionalParam<double> &value_from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &value_to = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &include_fields = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  source_name QList<QString> [optional]
    * @param[in]  source_id QList<qint32> [optional]
    * @param[in]  source_slug QList<QString> [optional]
    * @param[in]  order_by OAIOrder_By [optional]
    */
    virtual void parametersGetv1V1ParametersGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_name = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<qint32>> &source_id = ::OpenAPI::OptionalParam<QList<qint32>>(), const ::OpenAPI::OptionalParam<QList<QString>> &source_slug = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIOrder_By> &order_by = ::OpenAPI::OptionalParam<OAIOrder_By>());

    /**
    * @param[in]  limit qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  sort OAISort [optional]
    * @param[in]  name QString [optional]
    * @param[in]  order_by OAISourcesV1Order [optional]
    */
    virtual void sourcesV1GetV1SourcesGet(const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAISort> &sort = ::OpenAPI::OptionalParam<OAISort>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAISourcesV1Order> &order_by = ::OpenAPI::OptionalParam<OAISourcesV1Order>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void citiesGetv1V1CitiesGetCallback(OAIHttpRequestWorker *worker);
    void countriesGetV1CountriesCountryIdGetCallback(OAIHttpRequestWorker *worker);
    void countriesGetv1V1CountriesGetCallback(OAIHttpRequestWorker *worker);
    void latestV1GetV1LatestGetCallback(OAIHttpRequestWorker *worker);
    void latestV1GetV1LatestLocationIdGetCallback(OAIHttpRequestWorker *worker);
    void locationsv1GetV1LocationsGetCallback(OAIHttpRequestWorker *worker);
    void locationsv1GetV1LocationsLocationIdGetCallback(OAIHttpRequestWorker *worker);
    void measurementsGetV1V1MeasurementsGetCallback(OAIHttpRequestWorker *worker);
    void parametersGetv1V1ParametersGetCallback(OAIHttpRequestWorker *worker);
    void sourcesV1GetV1SourcesGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void citiesGetv1V1CitiesGetSignal(OAIOpenAQCitiesResult summary);
    void countriesGetV1CountriesCountryIdGetSignal(OAIOpenAQCountriesResult summary);
    void countriesGetv1V1CountriesGetSignal(OAIOpenAQCountriesResult summary);
    void latestV1GetV1LatestGetSignal(OAIOpenAQResult summary);
    void latestV1GetV1LatestLocationIdGetSignal(OAIOpenAQResult summary);
    void locationsv1GetV1LocationsGetSignal(OAIOpenAQResult summary);
    void locationsv1GetV1LocationsLocationIdGetSignal(OAIOpenAQResult summary);
    void measurementsGetV1V1MeasurementsGetSignal(QJsonValue summary);
    void parametersGetv1V1ParametersGetSignal(OAIOpenAQParametersResult summary);
    void sourcesV1GetV1SourcesGetSignal(OAIOpenAQResult summary);


    void citiesGetv1V1CitiesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQCitiesResult summary);
    void countriesGetV1CountriesCountryIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQCountriesResult summary);
    void countriesGetv1V1CountriesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQCountriesResult summary);
    void latestV1GetV1LatestGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void latestV1GetV1LatestLocationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void locationsv1GetV1LocationsGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void locationsv1GetV1LocationsLocationIdGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);
    void measurementsGetV1V1MeasurementsGetSignalFull(OAIHttpRequestWorker *worker, QJsonValue summary);
    void parametersGetv1V1ParametersGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQParametersResult summary);
    void sourcesV1GetV1SourcesGetSignalFull(OAIHttpRequestWorker *worker, OAIOpenAQResult summary);

    Q_DECL_DEPRECATED_X("Use citiesGetv1V1CitiesGetSignalError() instead")
    void citiesGetv1V1CitiesGetSignalE(OAIOpenAQCitiesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesGetv1V1CitiesGetSignalError(OAIOpenAQCitiesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetV1CountriesCountryIdGetSignalError() instead")
    void countriesGetV1CountriesCountryIdGetSignalE(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetV1CountriesCountryIdGetSignalError(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetv1V1CountriesGetSignalError() instead")
    void countriesGetv1V1CountriesGetSignalE(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetv1V1CountriesGetSignalError(OAIOpenAQCountriesResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestV1GetV1LatestGetSignalError() instead")
    void latestV1GetV1LatestGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void latestV1GetV1LatestGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestV1GetV1LatestLocationIdGetSignalError() instead")
    void latestV1GetV1LatestLocationIdGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void latestV1GetV1LatestLocationIdGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsv1GetV1LocationsGetSignalError() instead")
    void locationsv1GetV1LocationsGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsv1GetV1LocationsGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsv1GetV1LocationsLocationIdGetSignalError() instead")
    void locationsv1GetV1LocationsLocationIdGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsv1GetV1LocationsLocationIdGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use measurementsGetV1V1MeasurementsGetSignalError() instead")
    void measurementsGetV1V1MeasurementsGetSignalE(QJsonValue summary, QNetworkReply::NetworkError error_type, QString error_str);
    void measurementsGetV1V1MeasurementsGetSignalError(QJsonValue summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parametersGetv1V1ParametersGetSignalError() instead")
    void parametersGetv1V1ParametersGetSignalE(OAIOpenAQParametersResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void parametersGetv1V1ParametersGetSignalError(OAIOpenAQParametersResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourcesV1GetV1SourcesGetSignalError() instead")
    void sourcesV1GetV1SourcesGetSignalE(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sourcesV1GetV1SourcesGetSignalError(OAIOpenAQResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use citiesGetv1V1CitiesGetSignalErrorFull() instead")
    void citiesGetv1V1CitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void citiesGetv1V1CitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetV1CountriesCountryIdGetSignalErrorFull() instead")
    void countriesGetV1CountriesCountryIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetV1CountriesCountryIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use countriesGetv1V1CountriesGetSignalErrorFull() instead")
    void countriesGetv1V1CountriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void countriesGetv1V1CountriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestV1GetV1LatestGetSignalErrorFull() instead")
    void latestV1GetV1LatestGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void latestV1GetV1LatestGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use latestV1GetV1LatestLocationIdGetSignalErrorFull() instead")
    void latestV1GetV1LatestLocationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void latestV1GetV1LatestLocationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsv1GetV1LocationsGetSignalErrorFull() instead")
    void locationsv1GetV1LocationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsv1GetV1LocationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use locationsv1GetV1LocationsLocationIdGetSignalErrorFull() instead")
    void locationsv1GetV1LocationsLocationIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void locationsv1GetV1LocationsLocationIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use measurementsGetV1V1MeasurementsGetSignalErrorFull() instead")
    void measurementsGetV1V1MeasurementsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void measurementsGetV1V1MeasurementsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use parametersGetv1V1ParametersGetSignalErrorFull() instead")
    void parametersGetv1V1ParametersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void parametersGetv1V1ParametersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sourcesV1GetV1SourcesGetSignalErrorFull() instead")
    void sourcesV1GetV1SourcesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sourcesV1GetV1SourcesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
