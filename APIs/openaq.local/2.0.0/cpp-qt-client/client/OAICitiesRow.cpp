/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICitiesRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICitiesRow::OAICitiesRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICitiesRow::OAICitiesRow() {
    this->initializeModel();
}

OAICitiesRow::~OAICitiesRow() {}

void OAICitiesRow::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_first_updated_isSet = false;
    m_first_updated_isValid = false;

    m_last_updated_isSet = false;
    m_last_updated_isValid = false;

    m_locations_isSet = false;
    m_locations_isValid = false;

    m_parameters_isSet = false;
    m_parameters_isValid = false;
}

void OAICitiesRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICitiesRow::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_first_updated_isValid = ::OpenAPI::fromJsonValue(m_first_updated, json[QString("firstUpdated")]);
    m_first_updated_isSet = !json[QString("firstUpdated")].isNull() && m_first_updated_isValid;

    m_last_updated_isValid = ::OpenAPI::fromJsonValue(m_last_updated, json[QString("lastUpdated")]);
    m_last_updated_isSet = !json[QString("lastUpdated")].isNull() && m_last_updated_isValid;

    m_locations_isValid = ::OpenAPI::fromJsonValue(m_locations, json[QString("locations")]);
    m_locations_isSet = !json[QString("locations")].isNull() && m_locations_isValid;

    m_parameters_isValid = ::OpenAPI::fromJsonValue(m_parameters, json[QString("parameters")]);
    m_parameters_isSet = !json[QString("parameters")].isNull() && m_parameters_isValid;
}

QString OAICitiesRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICitiesRow::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_first_updated_isSet) {
        obj.insert(QString("firstUpdated"), ::OpenAPI::toJsonValue(m_first_updated));
    }
    if (m_last_updated_isSet) {
        obj.insert(QString("lastUpdated"), ::OpenAPI::toJsonValue(m_last_updated));
    }
    if (m_locations_isSet) {
        obj.insert(QString("locations"), ::OpenAPI::toJsonValue(m_locations));
    }
    if (m_parameters.size() > 0) {
        obj.insert(QString("parameters"), ::OpenAPI::toJsonValue(m_parameters));
    }
    return obj;
}

QString OAICitiesRow::getCity() const {
    return m_city;
}
void OAICitiesRow::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAICitiesRow::is_city_Set() const{
    return m_city_isSet;
}

bool OAICitiesRow::is_city_Valid() const{
    return m_city_isValid;
}

qint32 OAICitiesRow::getCount() const {
    return m_count;
}
void OAICitiesRow::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAICitiesRow::is_count_Set() const{
    return m_count_isSet;
}

bool OAICitiesRow::is_count_Valid() const{
    return m_count_isValid;
}

QString OAICitiesRow::getCountry() const {
    return m_country;
}
void OAICitiesRow::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAICitiesRow::is_country_Set() const{
    return m_country_isSet;
}

bool OAICitiesRow::is_country_Valid() const{
    return m_country_isValid;
}

QDateTime OAICitiesRow::getFirstUpdated() const {
    return m_first_updated;
}
void OAICitiesRow::setFirstUpdated(const QDateTime &first_updated) {
    m_first_updated = first_updated;
    m_first_updated_isSet = true;
}

bool OAICitiesRow::is_first_updated_Set() const{
    return m_first_updated_isSet;
}

bool OAICitiesRow::is_first_updated_Valid() const{
    return m_first_updated_isValid;
}

QDateTime OAICitiesRow::getLastUpdated() const {
    return m_last_updated;
}
void OAICitiesRow::setLastUpdated(const QDateTime &last_updated) {
    m_last_updated = last_updated;
    m_last_updated_isSet = true;
}

bool OAICitiesRow::is_last_updated_Set() const{
    return m_last_updated_isSet;
}

bool OAICitiesRow::is_last_updated_Valid() const{
    return m_last_updated_isValid;
}

qint32 OAICitiesRow::getLocations() const {
    return m_locations;
}
void OAICitiesRow::setLocations(const qint32 &locations) {
    m_locations = locations;
    m_locations_isSet = true;
}

bool OAICitiesRow::is_locations_Set() const{
    return m_locations_isSet;
}

bool OAICitiesRow::is_locations_Valid() const{
    return m_locations_isValid;
}

QList<QString> OAICitiesRow::getParameters() const {
    return m_parameters;
}
void OAICitiesRow::setParameters(const QList<QString> &parameters) {
    m_parameters = parameters;
    m_parameters_isSet = true;
}

bool OAICitiesRow::is_parameters_Set() const{
    return m_parameters_isSet;
}

bool OAICitiesRow::is_parameters_Valid() const{
    return m_parameters_isValid;
}

bool OAICitiesRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_updated_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_locations_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parameters.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICitiesRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_city_isValid && m_count_isValid && m_first_updated_isValid && m_last_updated_isValid && m_locations_isValid && m_parameters_isValid && true;
}

} // namespace OpenAPI
