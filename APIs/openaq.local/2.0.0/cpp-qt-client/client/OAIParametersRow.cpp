/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIParametersRow.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIParametersRow::OAIParametersRow(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIParametersRow::OAIParametersRow() {
    this->initializeModel();
}

OAIParametersRow::~OAIParametersRow() {}

void OAIParametersRow::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_core_isSet = false;
    m_is_core_isValid = false;

    m_max_color_value_isSet = false;
    m_max_color_value_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_preferred_unit_isSet = false;
    m_preferred_unit_isValid = false;
}

void OAIParametersRow::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIParametersRow::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("displayName")]);
    m_display_name_isSet = !json[QString("displayName")].isNull() && m_display_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_core_isValid = ::OpenAPI::fromJsonValue(m_is_core, json[QString("isCore")]);
    m_is_core_isSet = !json[QString("isCore")].isNull() && m_is_core_isValid;

    m_max_color_value_isValid = ::OpenAPI::fromJsonValue(m_max_color_value, json[QString("maxColorValue")]);
    m_max_color_value_isSet = !json[QString("maxColorValue")].isNull() && m_max_color_value_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_preferred_unit_isValid = ::OpenAPI::fromJsonValue(m_preferred_unit, json[QString("preferredUnit")]);
    m_preferred_unit_isSet = !json[QString("preferredUnit")].isNull() && m_preferred_unit_isValid;
}

QString OAIParametersRow::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIParametersRow::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("displayName"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_core_isSet) {
        obj.insert(QString("isCore"), ::OpenAPI::toJsonValue(m_is_core));
    }
    if (m_max_color_value_isSet) {
        obj.insert(QString("maxColorValue"), ::OpenAPI::toJsonValue(m_max_color_value));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_preferred_unit_isSet) {
        obj.insert(QString("preferredUnit"), ::OpenAPI::toJsonValue(m_preferred_unit));
    }
    return obj;
}

QString OAIParametersRow::getDescription() const {
    return m_description;
}
void OAIParametersRow::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIParametersRow::is_description_Set() const{
    return m_description_isSet;
}

bool OAIParametersRow::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIParametersRow::getDisplayName() const {
    return m_display_name;
}
void OAIParametersRow::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIParametersRow::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIParametersRow::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIParametersRow::getId() const {
    return m_id;
}
void OAIParametersRow::setId(const qint32 &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIParametersRow::is_id_Set() const{
    return m_id_isSet;
}

bool OAIParametersRow::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIParametersRow::isIsCore() const {
    return m_is_core;
}
void OAIParametersRow::setIsCore(const bool &is_core) {
    m_is_core = is_core;
    m_is_core_isSet = true;
}

bool OAIParametersRow::is_is_core_Set() const{
    return m_is_core_isSet;
}

bool OAIParametersRow::is_is_core_Valid() const{
    return m_is_core_isValid;
}

double OAIParametersRow::getMaxColorValue() const {
    return m_max_color_value;
}
void OAIParametersRow::setMaxColorValue(const double &max_color_value) {
    m_max_color_value = max_color_value;
    m_max_color_value_isSet = true;
}

bool OAIParametersRow::is_max_color_value_Set() const{
    return m_max_color_value_isSet;
}

bool OAIParametersRow::is_max_color_value_Valid() const{
    return m_max_color_value_isValid;
}

QString OAIParametersRow::getName() const {
    return m_name;
}
void OAIParametersRow::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIParametersRow::is_name_Set() const{
    return m_name_isSet;
}

bool OAIParametersRow::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIParametersRow::getPreferredUnit() const {
    return m_preferred_unit;
}
void OAIParametersRow::setPreferredUnit(const QString &preferred_unit) {
    m_preferred_unit = preferred_unit;
    m_preferred_unit_isSet = true;
}

bool OAIParametersRow::is_preferred_unit_Set() const{
    return m_preferred_unit_isSet;
}

bool OAIParametersRow::is_preferred_unit_Valid() const{
    return m_preferred_unit_isValid;
}

bool OAIParametersRow::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_core_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_color_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preferred_unit_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIParametersRow::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_display_name_isValid && m_id_isValid && m_name_isValid && m_preferred_unit_isValid && true;
}

} // namespace OpenAPI
