/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAITileJSON.h
 *
 * TileJSON model. Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
 */

#ifndef OAITileJSON_H
#define OAITileJSON_H

#include <QJsonObject>

#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAITileJSON : public OAIObject {
public:
    OAITileJSON();
    OAITileJSON(QString json);
    ~OAITileJSON() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getAttribution() const;
    void setAttribution(const QString &attribution);
    bool is_attribution_Set() const;
    bool is_attribution_Valid() const;

    QList<double> getBounds() const;
    void setBounds(const QList<double> &bounds);
    bool is_bounds_Set() const;
    bool is_bounds_Valid() const;

    QList<QString> getData() const;
    void setData(const QList<QString> &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    QList<QString> getGrids() const;
    void setGrids(const QList<QString> &grids);
    bool is_grids_Set() const;
    bool is_grids_Valid() const;

    QString getLegend() const;
    void setLegend(const QString &legend);
    bool is_legend_Set() const;
    bool is_legend_Valid() const;

    qint32 getMaxzoom() const;
    void setMaxzoom(const qint32 &maxzoom);
    bool is_maxzoom_Set() const;
    bool is_maxzoom_Valid() const;

    qint32 getMinzoom() const;
    void setMinzoom(const qint32 &minzoom);
    bool is_minzoom_Set() const;
    bool is_minzoom_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getScheme() const;
    void setScheme(const QString &scheme);
    bool is_scheme_Set() const;
    bool is_scheme_Valid() const;

    QString getRTemplate() const;
    void setRTemplate(const QString &r_template);
    bool is_r_template_Set() const;
    bool is_r_template_Valid() const;

    QString getTilejson() const;
    void setTilejson(const QString &tilejson);
    bool is_tilejson_Set() const;
    bool is_tilejson_Valid() const;

    QList<QString> getTiles() const;
    void setTiles(const QList<QString> &tiles);
    bool is_tiles_Set() const;
    bool is_tiles_Valid() const;

    QString getVersion() const;
    void setVersion(const QString &version);
    bool is_version_Set() const;
    bool is_version_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_attribution;
    bool m_attribution_isSet;
    bool m_attribution_isValid;

    QList<double> m_bounds;
    bool m_bounds_isSet;
    bool m_bounds_isValid;

    QList<QString> m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    QList<QString> m_grids;
    bool m_grids_isSet;
    bool m_grids_isValid;

    QString m_legend;
    bool m_legend_isSet;
    bool m_legend_isValid;

    qint32 m_maxzoom;
    bool m_maxzoom_isSet;
    bool m_maxzoom_isValid;

    qint32 m_minzoom;
    bool m_minzoom_isSet;
    bool m_minzoom_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_scheme;
    bool m_scheme_isSet;
    bool m_scheme_isValid;

    QString m_r_template;
    bool m_r_template_isSet;
    bool m_r_template_isValid;

    QString m_tilejson;
    bool m_tilejson_isSet;
    bool m_tilejson_isValid;

    QList<QString> m_tiles;
    bool m_tiles_isSet;
    bool m_tiles_isValid;

    QString m_version;
    bool m_version_isSet;
    bool m_version_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAITileJSON)

#endif // OAITileJSON_H
