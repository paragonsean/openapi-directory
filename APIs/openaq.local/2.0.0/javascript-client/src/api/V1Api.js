/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CitiesOrder from '../model/CitiesOrder';
import CountriesOrder from '../model/CountriesOrder';
import DateFrom from '../model/DateFrom';
import DateTo from '../model/DateTo';
import EntityTypes from '../model/EntityTypes';
import HTTPValidationError from '../model/HTTPValidationError';
import LocationInner from '../model/LocationInner';
import LocationsOrder from '../model/LocationsOrder';
import MeasOrder from '../model/MeasOrder';
import OpenAQCitiesResult from '../model/OpenAQCitiesResult';
import OpenAQCountriesResult from '../model/OpenAQCountriesResult';
import OpenAQParametersResult from '../model/OpenAQParametersResult';
import OpenAQResult from '../model/OpenAQResult';
import OrderBy from '../model/OrderBy';
import ParameterInner from '../model/ParameterInner';
import SensorTypes from '../model/SensorTypes';
import Sort from '../model/Sort';
import SourcesV1Order from '../model/SourcesV1Order';

/**
* V1 service.
* @module api/V1Api
* @version 2.0.0
*/
export default class V1Api {

    /**
    * Constructs a new V1Api. 
    * @alias module:api/V1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the citiesGetv1V1CitiesGet operation.
     * @callback module:api/V1Api~citiesGetv1V1CitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQCitiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a simple listing of cities within the platform
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {module:model/CitiesOrder} [orderBy] Order by a field
     * @param {String} [entity] 
     * @param {module:api/V1Api~citiesGetv1V1CitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQCitiesResult}
     */
    citiesGetv1V1CitiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'order_by': opts['orderBy'],
        'entity': opts['entity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQCitiesResult;
      return this.apiClient.callApi(
        '/v1/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetV1CountriesCountryIdGet operation.
     * @callback module:api/V1Api~countriesGetV1CountriesCountryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQCountriesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Countries Get
     * @param {String} countryId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 200)] 
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {module:model/CountriesOrder} [orderBy] 
     * @param {module:api/V1Api~countriesGetV1CountriesCountryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQCountriesResult}
     */
    countriesGetV1CountriesCountryIdGet(countryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling countriesGetV1CountriesCountryIdGet");
      }

      let pathParams = {
        'country_id': countryId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQCountriesResult;
      return this.apiClient.callApi(
        '/v1/countries/{country_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetv1V1CountriesGet operation.
     * @callback module:api/V1Api~countriesGetv1V1CountriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQCountriesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Countries Getv1
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 200)] 
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {module:model/CountriesOrder} [orderBy] 
     * @param {module:api/V1Api~countriesGetv1V1CountriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQCountriesResult}
     */
    countriesGetv1V1CountriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQCountriesResult;
      return this.apiClient.callApi(
        '/v1/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the latestV1GetV1LatestGet operation.
     * @callback module:api/V1Api~latestV1GetV1LatestGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest V1 Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Number} [locationId] 
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V1Api~latestV1GetV1LatestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    latestV1GetV1LatestGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location_id': opts['locationId'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v1/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the latestV1GetV1LatestLocationIdGet operation.
     * @callback module:api/V1Api~latestV1GetV1LatestLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest V1 Get
     * @param {Number} locationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V1Api~latestV1GetV1LatestLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    latestV1GetV1LatestLocationIdGet(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling latestV1GetV1LatestLocationIdGet");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v1/latest/{location_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsv1GetV1LocationsGet operation.
     * @callback module:api/V1Api~locationsv1GetV1LocationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Locationsv1 Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Number} [locationId] 
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V1Api~locationsv1GetV1LocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    locationsv1GetV1LocationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location_id': opts['locationId'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v1/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsv1GetV1LocationsLocationIdGet operation.
     * @callback module:api/V1Api~locationsv1GetV1LocationsLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Locationsv1 Get
     * @param {Number} locationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V1Api~locationsv1GetV1LocationsLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    locationsv1GetV1LocationsLocationIdGet(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling locationsv1GetV1LocationsLocationIdGet");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v1/locations/{location_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the measurementsGetV1V1MeasurementsGet operation.
     * @callback module:api/V1Api~measurementsGetV1V1MeasurementsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Measurements Get V1
     * @param {Object} opts Optional parameters
     * @param {String} [format] 
     * @param {module:model/DateFrom} [dateFrom] 
     * @param {module:model/DateTo} [dateTo] 
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] 
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Number} [locationId] 
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/MeasOrder} [orderBy] 
     * @param {Boolean} [isMobile] 
     * @param {Boolean} [isAnalysis] 
     * @param {Number} [project] 
     * @param {module:model/EntityTypes} [entity] 
     * @param {module:model/SensorTypes} [sensorType] 
     * @param {Number} [valueFrom] 
     * @param {Number} [valueTo] 
     * @param {String} [includeFields] 
     * @param {module:api/V1Api~measurementsGetV1V1MeasurementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    measurementsGetV1V1MeasurementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location_id': opts['locationId'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'project': opts['project'],
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'value_from': opts['valueFrom'],
        'value_to': opts['valueTo'],
        'include_fields': opts['includeFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v1/measurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parametersGetv1V1ParametersGet operation.
     * @callback module:api/V1Api~parametersGetv1V1ParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parameters Getv1
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Array.<String>} [sourceName] 
     * @param {Array.<Number>} [sourceId] 
     * @param {Array.<String>} [sourceSlug] 
     * @param {module:model/OrderBy} [orderBy] 
     * @param {module:api/V1Api~parametersGetv1V1ParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQParametersResult}
     */
    parametersGetv1V1ParametersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'sourceId': this.apiClient.buildCollectionParam(opts['sourceId'], 'multi'),
        'sourceSlug': this.apiClient.buildCollectionParam(opts['sourceSlug'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQParametersResult;
      return this.apiClient.callApi(
        '/v1/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sourcesV1GetV1SourcesGet operation.
     * @callback module:api/V1Api~sourcesV1GetV1SourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sources V1 Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {String} [name] 
     * @param {module:model/SourcesV1Order} [orderBy] 
     * @param {module:api/V1Api~sourcesV1GetV1SourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    sourcesV1GetV1SourcesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'name': opts['name'],
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v1/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
