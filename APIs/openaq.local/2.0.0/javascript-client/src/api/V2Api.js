/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CitiesOrder from '../model/CitiesOrder';
import CountriesOrder from '../model/CountriesOrder';
import DateFrom from '../model/DateFrom';
import DateTo from '../model/DateTo';
import Datefrom from '../model/Datefrom';
import Dateto from '../model/Dateto';
import EntityTypes from '../model/EntityTypes';
import HTTPValidationError from '../model/HTTPValidationError';
import Lastupdatedfrom from '../model/Lastupdatedfrom';
import Lastupdatedto from '../model/Lastupdatedto';
import LocationInner from '../model/LocationInner';
import LocationsOrder from '../model/LocationsOrder';
import MeasOrder from '../model/MeasOrder';
import OpenAQCitiesResult from '../model/OpenAQCitiesResult';
import OpenAQCountriesResult from '../model/OpenAQCountriesResult';
import OpenAQParametersResult from '../model/OpenAQParametersResult';
import OpenAQProjectsResult from '../model/OpenAQProjectsResult';
import OpenAQResult from '../model/OpenAQResult';
import OrderBy from '../model/OrderBy';
import Parameter from '../model/Parameter';
import ParameterInner from '../model/ParameterInner';
import ProjectsOrder from '../model/ProjectsOrder';
import SensorTypes from '../model/SensorTypes';
import Sort from '../model/Sort';
import SourcesOrder from '../model/SourcesOrder';
import Spatial from '../model/Spatial';
import Temporal from '../model/Temporal';
import TileJSON from '../model/TileJSON';

/**
* V2 service.
* @module api/V2Api
* @version 2.0.0
*/
export default class V2Api {

    /**
    * Constructs a new V2Api. 
    * @alias module:api/V2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the averagesV2GetV2AveragesGet operation.
     * @callback module:api/V2Api~averagesV2GetV2AveragesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Averages V2 Get
     * @param {module:model/Spatial} spatial 
     * @param {module:model/Temporal} temporal 
     * @param {Object} opts Optional parameters
     * @param {module:model/DateFrom} [dateFrom] 
     * @param {module:model/DateTo} [dateTo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {Number} [projectId] 
     * @param {Array.<module:model/ParameterInner>} [project] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Array.<String>} [location] 
     * @param {Boolean} [group = false)] 
     * @param {module:api/V2Api~averagesV2GetV2AveragesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    averagesV2GetV2AveragesGet(spatial, temporal, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'spatial' is set
      if (spatial === undefined || spatial === null) {
        throw new Error("Missing the required parameter 'spatial' when calling averagesV2GetV2AveragesGet");
      }
      // verify the required parameter 'temporal' is set
      if (temporal === undefined || temporal === null) {
        throw new Error("Missing the required parameter 'temporal' when calling averagesV2GetV2AveragesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'project_id': opts['projectId'],
        'project': this.apiClient.buildCollectionParam(opts['project'], 'multi'),
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'spatial': spatial,
        'temporal': temporal,
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'group': opts['group']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/averages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the citiesGetV2CitiesGet operation.
     * @callback module:api/V2Api~citiesGetV2CitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQCitiesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Provides a simple listing of cities within the platform
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {module:model/CitiesOrder} [orderBy] Order by a field
     * @param {String} [entity] 
     * @param {module:api/V2Api~citiesGetV2CitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQCitiesResult}
     */
    citiesGetV2CitiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'order_by': opts['orderBy'],
        'entity': opts['entity']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQCitiesResult;
      return this.apiClient.callApi(
        '/v2/cities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetV2CountriesCountryIdGet operation.
     * @callback module:api/V2Api~countriesGetV2CountriesCountryIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQCountriesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Countries Get
     * @param {String} countryId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 200)] 
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {module:model/CountriesOrder} [orderBy] 
     * @param {module:api/V2Api~countriesGetV2CountriesCountryIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQCountriesResult}
     */
    countriesGetV2CountriesCountryIdGet(countryId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryId' is set
      if (countryId === undefined || countryId === null) {
        throw new Error("Missing the required parameter 'countryId' when calling countriesGetV2CountriesCountryIdGet");
      }

      let pathParams = {
        'country_id': countryId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQCountriesResult;
      return this.apiClient.callApi(
        '/v2/countries/{country_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the countriesGetV2CountriesGet operation.
     * @callback module:api/V2Api~countriesGetV2CountriesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQCountriesResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Countries Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 200)] 
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {module:model/CountriesOrder} [orderBy] 
     * @param {module:api/V2Api~countriesGetV2CountriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQCountriesResult}
     */
    countriesGetV2CountriesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQCountriesResult;
      return this.apiClient.callApi(
        '/v2/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the demoV2LocationsTilesViewerGet operation.
     * @callback module:api/V2Api~demoV2LocationsTilesViewerGetCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Demo
     * @param {module:api/V2Api~demoV2LocationsTilesViewerGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    demoV2LocationsTilesViewerGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/v2/locations/tiles/viewer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet operation.
     * @callback module:api/V2Api~getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Mobilegentile
     * @param {Number} z 
     * @param {Number} x 
     * @param {Number} y 
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameter} [parameter] 
     * @param {Array.<Number>} [location] limit data to location id
     * @param {module:model/Lastupdatedfrom} [lastUpdatedFrom] 
     * @param {module:model/Lastupdatedto} [lastUpdatedTo] 
     * @param {Boolean} [isMobile] 
     * @param {Number} [project] 
     * @param {Boolean} [isAnalysis] 
     * @param {module:api/V2Api~getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(z, x, y, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'z' is set
      if (z === undefined || z === null) {
        throw new Error("Missing the required parameter 'z' when calling getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet");
      }
      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet");
      }
      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet");
      }

      let pathParams = {
        'z': z,
        'x': x,
        'y': y
      };
      let queryParams = {
        'parameter': opts['parameter'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'lastUpdatedFrom': opts['lastUpdatedFrom'],
        'lastUpdatedTo': opts['lastUpdatedTo'],
        'isMobile': opts['isMobile'],
        'project': opts['project'],
        'isAnalysis': opts['isAnalysis']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/x-protobuf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/locations/tiles/mobile-generalized/{z}/{x}/{y}.pbf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMobiletileV2LocationsTilesMobileZXYPbfGet operation.
     * @callback module:api/V2Api~getMobiletileV2LocationsTilesMobileZXYPbfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Mobiletile
     * @param {Number} z 
     * @param {Number} x 
     * @param {Number} y 
     * @param {module:model/Datefrom} dateFrom 
     * @param {module:model/Dateto} dateTo 
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameter} [parameter] 
     * @param {Array.<Number>} [location] limit data to location id
     * @param {module:model/Lastupdatedfrom} [lastUpdatedFrom] 
     * @param {module:model/Lastupdatedto} [lastUpdatedTo] 
     * @param {Boolean} [isMobile] 
     * @param {Number} [project] 
     * @param {Boolean} [isAnalysis] 
     * @param {module:api/V2Api~getMobiletileV2LocationsTilesMobileZXYPbfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMobiletileV2LocationsTilesMobileZXYPbfGet(z, x, y, dateFrom, dateTo, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'z' is set
      if (z === undefined || z === null) {
        throw new Error("Missing the required parameter 'z' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet");
      }
      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet");
      }
      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet");
      }

      let pathParams = {
        'z': z,
        'x': x,
        'y': y
      };
      let queryParams = {
        'dateFrom': dateFrom,
        'dateTo': dateTo,
        'parameter': opts['parameter'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'lastUpdatedFrom': opts['lastUpdatedFrom'],
        'lastUpdatedTo': opts['lastUpdatedTo'],
        'isMobile': opts['isMobile'],
        'project': opts['project'],
        'isAnalysis': opts['isAnalysis']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/x-protobuf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/locations/tiles/mobile/{z}/{x}/{y}.pbf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTileV2LocationsTilesZXYPbfGet operation.
     * @callback module:api/V2Api~getTileV2LocationsTilesZXYPbfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Tile
     * @param {Number} z 
     * @param {Number} x 
     * @param {Number} y 
     * @param {Object} opts Optional parameters
     * @param {module:model/Parameter} [parameter] 
     * @param {Array.<Number>} [location] limit data to location id
     * @param {module:model/Lastupdatedfrom} [lastUpdatedFrom] 
     * @param {module:model/Lastupdatedto} [lastUpdatedTo] 
     * @param {Boolean} [isMobile] 
     * @param {Number} [project] 
     * @param {Boolean} [isAnalysis] 
     * @param {module:api/V2Api~getTileV2LocationsTilesZXYPbfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getTileV2LocationsTilesZXYPbfGet(z, x, y, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'z' is set
      if (z === undefined || z === null) {
        throw new Error("Missing the required parameter 'z' when calling getTileV2LocationsTilesZXYPbfGet");
      }
      // verify the required parameter 'x' is set
      if (x === undefined || x === null) {
        throw new Error("Missing the required parameter 'x' when calling getTileV2LocationsTilesZXYPbfGet");
      }
      // verify the required parameter 'y' is set
      if (y === undefined || y === null) {
        throw new Error("Missing the required parameter 'y' when calling getTileV2LocationsTilesZXYPbfGet");
      }

      let pathParams = {
        'z': z,
        'x': x,
        'y': y
      };
      let queryParams = {
        'parameter': opts['parameter'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'lastUpdatedFrom': opts['lastUpdatedFrom'],
        'lastUpdatedTo': opts['lastUpdatedTo'],
        'isMobile': opts['isMobile'],
        'project': opts['project'],
        'isAnalysis': opts['isAnalysis']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/x-protobuf', 'application/json'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/locations/tiles/{z}/{x}/{y}.pbf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the latestGetV2LatestGet operation.
     * @callback module:api/V2Api~latestGetV2LatestGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Number} [locationId] 
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V2Api~latestGetV2LatestGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    latestGetV2LatestGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location_id': opts['locationId'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/latest', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the latestGetV2LatestLocationIdGet operation.
     * @callback module:api/V2Api~latestGetV2LatestLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Latest Get
     * @param {Number} locationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V2Api~latestGetV2LatestLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    latestGetV2LatestLocationIdGet(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling latestGetV2LatestLocationIdGet");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/latest/{location_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsGetV2LocationsGet operation.
     * @callback module:api/V2Api~locationsGetV2LocationsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Locations Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Number} [locationId] 
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V2Api~locationsGetV2LocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    locationsGetV2LocationsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location_id': opts['locationId'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/locations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the locationsGetV2LocationsLocationIdGet operation.
     * @callback module:api/V2Api~locationsGetV2LocationsLocationIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Locations Get
     * @param {Number} locationId 
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Sort Direction
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/LocationsOrder} [orderBy] Order by a field
     * @param {Boolean} [isMobile] Location is mobile
     * @param {Boolean} [isAnalysis] Data is the product of a previous analysis/aggregation and not raw measurements
     * @param {Array.<String>} [sourceName] Name of the data source
     * @param {module:model/EntityTypes} [entity] Source entity type.
     * @param {module:model/SensorTypes} [sensorType] Type of Sensor
     * @param {Array.<String>} [modelName] Model Name of Sensor
     * @param {Array.<String>} [manufacturerName] Manufacturer of Sensor
     * @param {Boolean} [dumpRaw = false)] 
     * @param {module:api/V2Api~locationsGetV2LocationsLocationIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    locationsGetV2LocationsLocationIdGet(locationId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'locationId' is set
      if (locationId === undefined || locationId === null) {
        throw new Error("Missing the required parameter 'locationId' when calling locationsGetV2LocationsLocationIdGet");
      }

      let pathParams = {
        'location_id': locationId
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'modelName': this.apiClient.buildCollectionParam(opts['modelName'], 'multi'),
        'manufacturerName': this.apiClient.buildCollectionParam(opts['manufacturerName'], 'multi'),
        'dumpRaw': opts['dumpRaw']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/locations/{location_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the measurementsGetV2MeasurementsGet operation.
     * @callback module:api/V2Api~measurementsGetV2MeasurementsGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Measurements Get
     * @param {Object} opts Optional parameters
     * @param {String} [format] 
     * @param {module:model/DateFrom} [dateFrom] 
     * @param {module:model/DateTo} [dateTo] 
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] 
     * @param {Boolean} [hasGeo] 
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {String} [coordinates] 
     * @param {Number} [radius = 1000)] 
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Array.<String>} [city]          Limit results by a certain city or cities.         (ex. ?city=Chicago or ?city=Chicago&city=Boston)         
     * @param {Number} [locationId] 
     * @param {Array.<module:model/LocationInner>} [location] 
     * @param {module:model/MeasOrder} [orderBy] 
     * @param {Boolean} [isMobile] 
     * @param {Boolean} [isAnalysis] 
     * @param {Number} [project] 
     * @param {module:model/EntityTypes} [entity] 
     * @param {module:model/SensorTypes} [sensorType] 
     * @param {Number} [valueFrom] 
     * @param {Number} [valueTo] 
     * @param {String} [includeFields] 
     * @param {module:api/V2Api~measurementsGetV2MeasurementsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    measurementsGetV2MeasurementsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'date_from': opts['dateFrom'],
        'date_to': opts['dateTo'],
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'has_geo': opts['hasGeo'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'coordinates': opts['coordinates'],
        'radius': opts['radius'],
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'city': this.apiClient.buildCollectionParam(opts['city'], 'multi'),
        'location_id': opts['locationId'],
        'location': this.apiClient.buildCollectionParam(opts['location'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'project': opts['project'],
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'value_from': opts['valueFrom'],
        'value_to': opts['valueTo'],
        'include_fields': opts['includeFields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/measurements', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mfrGetV2ManufacturersGet operation.
     * @callback module:api/V2Api~mfrGetV2ManufacturersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mfr Get
     * @param {module:api/V2Api~mfrGetV2ManufacturersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    mfrGetV2ManufacturersGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/manufacturers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet operation.
     * @callback module:api/V2Api~mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TileJSON} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mobilegentilejson
     * @param {module:api/V2Api~mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TileJSON}
     */
    mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TileJSON;
      return this.apiClient.callApi(
        '/v2/locations/tiles/mobile-generalized/tiles.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mobiletilejsonV2LocationsTilesMobileTilesJsonGet operation.
     * @callback module:api/V2Api~mobiletilejsonV2LocationsTilesMobileTilesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TileJSON} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Mobiletilejson
     * @param {module:api/V2Api~mobiletilejsonV2LocationsTilesMobileTilesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TileJSON}
     */
    mobiletilejsonV2LocationsTilesMobileTilesJsonGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TileJSON;
      return this.apiClient.callApi(
        '/v2/locations/tiles/mobile/tiles.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the modelGetV2ModelsGet operation.
     * @callback module:api/V2Api~modelGetV2ModelsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Model Get
     * @param {module:api/V2Api~modelGetV2ModelsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    modelGetV2ModelsGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/models', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the parametersGetV2ParametersGet operation.
     * @callback module:api/V2Api~parametersGetV2ParametersGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQParametersResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Parameters Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Array.<String>} [sourceName] 
     * @param {Array.<Number>} [sourceId] 
     * @param {Array.<String>} [sourceSlug] 
     * @param {module:model/OrderBy} [orderBy] 
     * @param {module:api/V2Api~parametersGetV2ParametersGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQParametersResult}
     */
    parametersGetV2ParametersGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'sourceId': this.apiClient.buildCollectionParam(opts['sourceId'], 'multi'),
        'sourceSlug': this.apiClient.buildCollectionParam(opts['sourceSlug'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQParametersResult;
      return this.apiClient.callApi(
        '/v2/parameters', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetV2ProjectsGet operation.
     * @callback module:api/V2Api~projectsGetV2ProjectsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQProjectsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projects Get
     * @param {Object} opts Optional parameters
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {Number} [projectId] 
     * @param {Array.<module:model/ParameterInner>} [project] 
     * @param {module:model/ProjectsOrder} [orderBy] 
     * @param {Boolean} [isMobile] 
     * @param {Boolean} [isAnalysis] 
     * @param {String} [entity] 
     * @param {String} [sensorType] 
     * @param {Array.<String>} [sourceName] 
     * @param {module:api/V2Api~projectsGetV2ProjectsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQProjectsResult}
     */
    projectsGetV2ProjectsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'project_id': opts['projectId'],
        'project': this.apiClient.buildCollectionParam(opts['project'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQProjectsResult;
      return this.apiClient.callApi(
        '/v2/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the projectsGetV2ProjectsProjectIdGet operation.
     * @callback module:api/V2Api~projectsGetV2ProjectsProjectIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQProjectsResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Projects Get
     * @param {Number} projectId 
     * @param {Object} opts Optional parameters
     * @param {String} [countryId]          Limit results by a certain country using two letter country code.         (ex. /US)         
     * @param {Array.<String>} [country]          Limit results by a certain country using two letter country code.         (ex. ?country=US or ?country=US&country=MX)         
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Number} [parameterId] 
     * @param {Array.<module:model/ParameterInner>} [parameter] 
     * @param {Array.<String>} [unit] 
     * @param {Array.<module:model/ParameterInner>} [project] 
     * @param {module:model/ProjectsOrder} [orderBy] 
     * @param {Boolean} [isMobile] 
     * @param {Boolean} [isAnalysis] 
     * @param {String} [entity] 
     * @param {String} [sensorType] 
     * @param {Array.<String>} [sourceName] 
     * @param {module:api/V2Api~projectsGetV2ProjectsProjectIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQProjectsResult}
     */
    projectsGetV2ProjectsProjectIdGet(projectId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'projectId' is set
      if (projectId === undefined || projectId === null) {
        throw new Error("Missing the required parameter 'projectId' when calling projectsGetV2ProjectsProjectIdGet");
      }

      let pathParams = {
        'project_id': projectId
      };
      let queryParams = {
        'country_id': opts['countryId'],
        'country': this.apiClient.buildCollectionParam(opts['country'], 'multi'),
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'parameter_id': opts['parameterId'],
        'parameter': this.apiClient.buildCollectionParam(opts['parameter'], 'multi'),
        'unit': this.apiClient.buildCollectionParam(opts['unit'], 'multi'),
        'project': this.apiClient.buildCollectionParam(opts['project'], 'multi'),
        'order_by': opts['orderBy'],
        'isMobile': opts['isMobile'],
        'isAnalysis': opts['isAnalysis'],
        'entity': opts['entity'],
        'sensorType': opts['sensorType'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQProjectsResult;
      return this.apiClient.callApi(
        '/v2/projects/{project_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the readmeGetV2SourcesReadmeSlugGet operation.
     * @callback module:api/V2Api~readmeGetV2SourcesReadmeSlugGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Readme Get
     * @param {String} slug 
     * @param {module:api/V2Api~readmeGetV2SourcesReadmeSlugGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    readmeGetV2SourcesReadmeSlugGet(slug, callback) {
      let postBody = null;
      // verify the required parameter 'slug' is set
      if (slug === undefined || slug === null) {
        throw new Error("Missing the required parameter 'slug' when calling readmeGetV2SourcesReadmeSlugGet");
      }

      let pathParams = {
        'slug': slug
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/v2/sources/readme/{slug}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sourcesGetV2SourcesGet operation.
     * @callback module:api/V2Api~sourcesGetV2SourcesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Sources Get
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 100)] Change the number of results returned.
     * @param {Number} [page = 1)] Paginate through results.
     * @param {Number} [offset = 0)] 
     * @param {module:model/Sort} [sort] Define sort order.
     * @param {Array.<String>} [sourceName] 
     * @param {Array.<Number>} [sourceId] 
     * @param {Array.<String>} [sourceSlug] 
     * @param {module:model/SourcesOrder} [orderBy] 
     * @param {module:api/V2Api~sourcesGetV2SourcesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    sourcesGetV2SourcesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'limit': opts['limit'],
        'page': opts['page'],
        'offset': opts['offset'],
        'sort': opts['sort'],
        'sourceName': this.apiClient.buildCollectionParam(opts['sourceName'], 'multi'),
        'sourceId': this.apiClient.buildCollectionParam(opts['sourceId'], 'multi'),
        'sourceSlug': this.apiClient.buildCollectionParam(opts['sourceSlug'], 'multi'),
        'order_by': opts['orderBy']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/sources', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the summaryGetV2SummaryGet operation.
     * @callback module:api/V2Api~summaryGetV2SummaryGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OpenAQResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Summary Get
     * @param {module:api/V2Api~summaryGetV2SummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OpenAQResult}
     */
    summaryGetV2SummaryGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = OpenAQResult;
      return this.apiClient.callApi(
        '/v2/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the tilejsonV2LocationsTilesTilesJsonGet operation.
     * @callback module:api/V2Api~tilejsonV2LocationsTilesTilesJsonGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TileJSON} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tilejson
     * @param {module:api/V2Api~tilejsonV2LocationsTilesTilesJsonGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TileJSON}
     */
    tilejsonV2LocationsTilesTilesJsonGet(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TileJSON;
      return this.apiClient.callApi(
        '/v2/locations/tiles/tiles.json', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
