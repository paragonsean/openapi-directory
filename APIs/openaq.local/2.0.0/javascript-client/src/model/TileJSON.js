/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The TileJSON model module.
 * @module model/TileJSON
 * @version 2.0.0
 */
class TileJSON {
    /**
     * Constructs a new <code>TileJSON</code>.
     * TileJSON model. Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
     * @alias module:model/TileJSON
     * @param tiles {Array.<String>} 
     */
    constructor(tiles) { 
        
        TileJSON.initialize(this, tiles);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, tiles) { 
        obj['maxzoom'] = 30;
        obj['minzoom'] = 0;
        obj['scheme'] = 'xyz';
        obj['tilejson'] = '2.2.0';
        obj['tiles'] = tiles;
        obj['version'] = '1.0.0';
    }

    /**
     * Constructs a <code>TileJSON</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/TileJSON} obj Optional instance to populate.
     * @return {module:model/TileJSON} The populated <code>TileJSON</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new TileJSON();

            if (data.hasOwnProperty('attribution')) {
                obj['attribution'] = ApiClient.convertToType(data['attribution'], 'String');
            }
            if (data.hasOwnProperty('bounds')) {
                obj['bounds'] = ApiClient.convertToType(data['bounds'], ['Number']);
            }
            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], ['String']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('grids')) {
                obj['grids'] = ApiClient.convertToType(data['grids'], ['String']);
            }
            if (data.hasOwnProperty('legend')) {
                obj['legend'] = ApiClient.convertToType(data['legend'], 'String');
            }
            if (data.hasOwnProperty('maxzoom')) {
                obj['maxzoom'] = ApiClient.convertToType(data['maxzoom'], 'Number');
            }
            if (data.hasOwnProperty('minzoom')) {
                obj['minzoom'] = ApiClient.convertToType(data['minzoom'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('scheme')) {
                obj['scheme'] = ApiClient.convertToType(data['scheme'], 'String');
            }
            if (data.hasOwnProperty('template')) {
                obj['template'] = ApiClient.convertToType(data['template'], 'String');
            }
            if (data.hasOwnProperty('tilejson')) {
                obj['tilejson'] = ApiClient.convertToType(data['tilejson'], 'String');
            }
            if (data.hasOwnProperty('tiles')) {
                obj['tiles'] = ApiClient.convertToType(data['tiles'], ['String']);
            }
            if (data.hasOwnProperty('version')) {
                obj['version'] = ApiClient.convertToType(data['version'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>TileJSON</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>TileJSON</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of TileJSON.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['attribution'] && !(typeof data['attribution'] === 'string' || data['attribution'] instanceof String)) {
            throw new Error("Expected the field `attribution` to be a primitive type in the JSON string but got " + data['attribution']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bounds'])) {
            throw new Error("Expected the field `bounds` to be an array in the JSON data but got " + data['bounds']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['data'])) {
            throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['grids'])) {
            throw new Error("Expected the field `grids` to be an array in the JSON data but got " + data['grids']);
        }
        // ensure the json data is a string
        if (data['legend'] && !(typeof data['legend'] === 'string' || data['legend'] instanceof String)) {
            throw new Error("Expected the field `legend` to be a primitive type in the JSON string but got " + data['legend']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['scheme'] && !(typeof data['scheme'] === 'string' || data['scheme'] instanceof String)) {
            throw new Error("Expected the field `scheme` to be a primitive type in the JSON string but got " + data['scheme']);
        }
        // ensure the json data is a string
        if (data['template'] && !(typeof data['template'] === 'string' || data['template'] instanceof String)) {
            throw new Error("Expected the field `template` to be a primitive type in the JSON string but got " + data['template']);
        }
        // ensure the json data is a string
        if (data['tilejson'] && !(typeof data['tilejson'] === 'string' || data['tilejson'] instanceof String)) {
            throw new Error("Expected the field `tilejson` to be a primitive type in the JSON string but got " + data['tilejson']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tiles'])) {
            throw new Error("Expected the field `tiles` to be an array in the JSON data but got " + data['tiles']);
        }
        // ensure the json data is a string
        if (data['version'] && !(typeof data['version'] === 'string' || data['version'] instanceof String)) {
            throw new Error("Expected the field `version` to be a primitive type in the JSON string but got " + data['version']);
        }

        return true;
    }


}

TileJSON.RequiredProperties = ["tiles"];

/**
 * @member {String} attribution
 */
TileJSON.prototype['attribution'] = undefined;

/**
 * @member {Array.<Number>} bounds
 */
TileJSON.prototype['bounds'] = undefined;

/**
 * @member {Array.<String>} data
 */
TileJSON.prototype['data'] = undefined;

/**
 * @member {String} description
 */
TileJSON.prototype['description'] = undefined;

/**
 * @member {Array.<String>} grids
 */
TileJSON.prototype['grids'] = undefined;

/**
 * @member {String} legend
 */
TileJSON.prototype['legend'] = undefined;

/**
 * @member {Number} maxzoom
 * @default 30
 */
TileJSON.prototype['maxzoom'] = 30;

/**
 * @member {Number} minzoom
 * @default 0
 */
TileJSON.prototype['minzoom'] = 0;

/**
 * @member {String} name
 */
TileJSON.prototype['name'] = undefined;

/**
 * @member {String} scheme
 * @default 'xyz'
 */
TileJSON.prototype['scheme'] = 'xyz';

/**
 * @member {String} template
 */
TileJSON.prototype['template'] = undefined;

/**
 * @member {String} tilejson
 * @default '2.2.0'
 */
TileJSON.prototype['tilejson'] = '2.2.0';

/**
 * @member {Array.<String>} tiles
 */
TileJSON.prototype['tiles'] = undefined;

/**
 * @member {String} version
 * @default '1.0.0'
 */
TileJSON.prototype['version'] = '1.0.0';






export default TileJSON;

