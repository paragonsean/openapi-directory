/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CountriesRow model module.
 * @module model/CountriesRow
 * @version 2.0.0
 */
class CountriesRow {
    /**
     * Constructs a new <code>CountriesRow</code>.
     * @alias module:model/CountriesRow
     * @param cities {Number} 
     * @param code {String} 
     * @param count {Number} 
     * @param firstUpdated {Date} 
     * @param lastUpdated {Date} 
     * @param locations {Number} 
     * @param name {String} 
     * @param parameters {Array.<String>} 
     * @param sources {Number} 
     */
    constructor(cities, code, count, firstUpdated, lastUpdated, locations, name, parameters, sources) { 
        
        CountriesRow.initialize(this, cities, code, count, firstUpdated, lastUpdated, locations, name, parameters, sources);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, cities, code, count, firstUpdated, lastUpdated, locations, name, parameters, sources) { 
        obj['cities'] = cities;
        obj['code'] = code;
        obj['count'] = count;
        obj['firstUpdated'] = firstUpdated;
        obj['lastUpdated'] = lastUpdated;
        obj['locations'] = locations;
        obj['name'] = name;
        obj['parameters'] = parameters;
        obj['sources'] = sources;
    }

    /**
     * Constructs a <code>CountriesRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CountriesRow} obj Optional instance to populate.
     * @return {module:model/CountriesRow} The populated <code>CountriesRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CountriesRow();

            if (data.hasOwnProperty('cities')) {
                obj['cities'] = ApiClient.convertToType(data['cities'], 'Number');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('firstUpdated')) {
                obj['firstUpdated'] = ApiClient.convertToType(data['firstUpdated'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], ['String']);
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CountriesRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CountriesRow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CountriesRow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parameters'])) {
            throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
        }

        return true;
    }


}

CountriesRow.RequiredProperties = ["cities", "code", "count", "firstUpdated", "lastUpdated", "locations", "name", "parameters", "sources"];

/**
 * @member {Number} cities
 */
CountriesRow.prototype['cities'] = undefined;

/**
 * @member {String} code
 */
CountriesRow.prototype['code'] = undefined;

/**
 * @member {Number} count
 */
CountriesRow.prototype['count'] = undefined;

/**
 * @member {Date} firstUpdated
 */
CountriesRow.prototype['firstUpdated'] = undefined;

/**
 * @member {Date} lastUpdated
 */
CountriesRow.prototype['lastUpdated'] = undefined;

/**
 * @member {Number} locations
 */
CountriesRow.prototype['locations'] = undefined;

/**
 * @member {String} name
 */
CountriesRow.prototype['name'] = undefined;

/**
 * @member {Array.<String>} parameters
 */
CountriesRow.prototype['parameters'] = undefined;

/**
 * @member {Number} sources
 */
CountriesRow.prototype['sources'] = undefined;






export default CountriesRow;

