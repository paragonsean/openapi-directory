/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProjectParameterDetails from './ProjectParameterDetails';

/**
 * The ProjectsRow model module.
 * @module model/ProjectsRow
 * @version 2.0.0
 */
class ProjectsRow {
    /**
     * Constructs a new <code>ProjectsRow</code>.
     * @alias module:model/ProjectsRow
     * @param firstUpdated {Date} 
     * @param id {Number} 
     * @param lastUpdated {Date} 
     * @param locationIds {Array.<Number>} 
     * @param locations {Number} 
     * @param measurements {Number} 
     * @param name {String} 
     * @param parameters {Array.<module:model/ProjectParameterDetails>} 
     * @param subtitle {String} 
     */
    constructor(firstUpdated, id, lastUpdated, locationIds, locations, measurements, name, parameters, subtitle) { 
        
        ProjectsRow.initialize(this, firstUpdated, id, lastUpdated, locationIds, locations, measurements, name, parameters, subtitle);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, firstUpdated, id, lastUpdated, locationIds, locations, measurements, name, parameters, subtitle) { 
        obj['firstUpdated'] = firstUpdated;
        obj['id'] = id;
        obj['lastUpdated'] = lastUpdated;
        obj['locationIds'] = locationIds;
        obj['locations'] = locations;
        obj['measurements'] = measurements;
        obj['name'] = name;
        obj['parameters'] = parameters;
        obj['subtitle'] = subtitle;
    }

    /**
     * Constructs a <code>ProjectsRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectsRow} obj Optional instance to populate.
     * @return {module:model/ProjectsRow} The populated <code>ProjectsRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectsRow();

            if (data.hasOwnProperty('bbox')) {
                obj['bbox'] = ApiClient.convertToType(data['bbox'], ['Number']);
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = ApiClient.convertToType(data['countries'], ['String']);
            }
            if (data.hasOwnProperty('entity')) {
                obj['entity'] = ApiClient.convertToType(data['entity'], 'String');
            }
            if (data.hasOwnProperty('firstUpdated')) {
                obj['firstUpdated'] = ApiClient.convertToType(data['firstUpdated'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('isAnalysis')) {
                obj['isAnalysis'] = ApiClient.convertToType(data['isAnalysis'], 'Boolean');
            }
            if (data.hasOwnProperty('isMobile')) {
                obj['isMobile'] = ApiClient.convertToType(data['isMobile'], 'Boolean');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('locationIds')) {
                obj['locationIds'] = ApiClient.convertToType(data['locationIds'], ['Number']);
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], 'Number');
            }
            if (data.hasOwnProperty('measurements')) {
                obj['measurements'] = ApiClient.convertToType(data['measurements'], 'Number');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], [ProjectParameterDetails]);
            }
            if (data.hasOwnProperty('sensorType')) {
                obj['sensorType'] = ApiClient.convertToType(data['sensorType'], 'String');
            }
            if (data.hasOwnProperty('sources')) {
                obj['sources'] = ApiClient.convertToType(data['sources'], [Object]);
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectsRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectsRow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectsRow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is an array
        if (!Array.isArray(data['bbox'])) {
            throw new Error("Expected the field `bbox` to be an array in the JSON data but got " + data['bbox']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['countries'])) {
            throw new Error("Expected the field `countries` to be an array in the JSON data but got " + data['countries']);
        }
        // ensure the json data is a string
        if (data['entity'] && !(typeof data['entity'] === 'string' || data['entity'] instanceof String)) {
            throw new Error("Expected the field `entity` to be a primitive type in the JSON string but got " + data['entity']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['locationIds'])) {
            throw new Error("Expected the field `locationIds` to be an array in the JSON data but got " + data['locationIds']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['parameters']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['parameters'])) {
                throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
            }
            // validate the optional field `parameters` (array)
            for (const item of data['parameters']) {
                ProjectParameterDetails.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['sensorType'] && !(typeof data['sensorType'] === 'string' || data['sensorType'] instanceof String)) {
            throw new Error("Expected the field `sensorType` to be a primitive type in the JSON string but got " + data['sensorType']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['sources'])) {
            throw new Error("Expected the field `sources` to be an array in the JSON data but got " + data['sources']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }

        return true;
    }


}

ProjectsRow.RequiredProperties = ["firstUpdated", "id", "lastUpdated", "locationIds", "locations", "measurements", "name", "parameters", "subtitle"];

/**
 * @member {Array.<Number>} bbox
 */
ProjectsRow.prototype['bbox'] = undefined;

/**
 * @member {Array.<String>} countries
 */
ProjectsRow.prototype['countries'] = undefined;

/**
 * @member {String} entity
 */
ProjectsRow.prototype['entity'] = undefined;

/**
 * @member {Date} firstUpdated
 */
ProjectsRow.prototype['firstUpdated'] = undefined;

/**
 * @member {Number} id
 */
ProjectsRow.prototype['id'] = undefined;

/**
 * @member {Boolean} isAnalysis
 */
ProjectsRow.prototype['isAnalysis'] = undefined;

/**
 * @member {Boolean} isMobile
 */
ProjectsRow.prototype['isMobile'] = undefined;

/**
 * @member {Date} lastUpdated
 */
ProjectsRow.prototype['lastUpdated'] = undefined;

/**
 * @member {Array.<Number>} locationIds
 */
ProjectsRow.prototype['locationIds'] = undefined;

/**
 * @member {Number} locations
 */
ProjectsRow.prototype['locations'] = undefined;

/**
 * @member {Number} measurements
 */
ProjectsRow.prototype['measurements'] = undefined;

/**
 * @member {String} name
 */
ProjectsRow.prototype['name'] = undefined;

/**
 * @member {Array.<module:model/ProjectParameterDetails>} parameters
 */
ProjectsRow.prototype['parameters'] = undefined;

/**
 * @member {String} sensorType
 */
ProjectsRow.prototype['sensorType'] = undefined;

/**
 * @member {Array.<Object>} sources
 */
ProjectsRow.prototype['sources'] = undefined;

/**
 * @member {String} subtitle
 */
ProjectsRow.prototype['subtitle'] = undefined;






export default ProjectsRow;

