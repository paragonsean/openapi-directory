/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Meta from './Meta';
import ProjectsRow from './ProjectsRow';

/**
 * The OpenAQProjectsResult model module.
 * @module model/OpenAQProjectsResult
 * @version 2.0.0
 */
class OpenAQProjectsResult {
    /**
     * Constructs a new <code>OpenAQProjectsResult</code>.
     * @alias module:model/OpenAQProjectsResult
     * @param results {Array.<module:model/ProjectsRow>} 
     */
    constructor(results) { 
        
        OpenAQProjectsResult.initialize(this, results);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, results) { 
        obj['results'] = results;
    }

    /**
     * Constructs a <code>OpenAQProjectsResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/OpenAQProjectsResult} obj Optional instance to populate.
     * @return {module:model/OpenAQProjectsResult} The populated <code>OpenAQProjectsResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new OpenAQProjectsResult();

            if (data.hasOwnProperty('meta')) {
                obj['meta'] = ApiClient.convertToType(data['meta'], Meta);
            }
            if (data.hasOwnProperty('results')) {
                obj['results'] = ApiClient.convertToType(data['results'], [ProjectsRow]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>OpenAQProjectsResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>OpenAQProjectsResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of OpenAQProjectsResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `meta`
        if (data['meta']) { // data not null
          Meta.validateJSON(data['meta']);
        }
        if (data['results']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['results'])) {
                throw new Error("Expected the field `results` to be an array in the JSON data but got " + data['results']);
            }
            // validate the optional field `results` (array)
            for (const item of data['results']) {
                ProjectsRow.validateJSON(item);
            };
        }

        return true;
    }


}

OpenAQProjectsResult.RequiredProperties = ["results"];

/**
 * @member {module:model/Meta} meta
 */
OpenAQProjectsResult.prototype['meta'] = undefined;

/**
 * @member {Array.<module:model/ProjectsRow>} results
 */
OpenAQProjectsResult.prototype['results'] = undefined;






export default OpenAQProjectsResult;

