/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CitiesRow model module.
 * @module model/CitiesRow
 * @version 2.0.0
 */
class CitiesRow {
    /**
     * Constructs a new <code>CitiesRow</code>.
     * @alias module:model/CitiesRow
     * @param city {String} 
     * @param count {Number} 
     * @param firstUpdated {Date} 
     * @param lastUpdated {Date} 
     * @param locations {Number} 
     * @param parameters {Array.<String>} 
     */
    constructor(city, count, firstUpdated, lastUpdated, locations, parameters) { 
        
        CitiesRow.initialize(this, city, count, firstUpdated, lastUpdated, locations, parameters);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, city, count, firstUpdated, lastUpdated, locations, parameters) { 
        obj['city'] = city;
        obj['count'] = count;
        obj['firstUpdated'] = firstUpdated;
        obj['lastUpdated'] = lastUpdated;
        obj['locations'] = locations;
        obj['parameters'] = parameters;
    }

    /**
     * Constructs a <code>CitiesRow</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CitiesRow} obj Optional instance to populate.
     * @return {module:model/CitiesRow} The populated <code>CitiesRow</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CitiesRow();

            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('firstUpdated')) {
                obj['firstUpdated'] = ApiClient.convertToType(data['firstUpdated'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], 'Number');
            }
            if (data.hasOwnProperty('parameters')) {
                obj['parameters'] = ApiClient.convertToType(data['parameters'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CitiesRow</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CitiesRow</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CitiesRow.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['parameters'])) {
            throw new Error("Expected the field `parameters` to be an array in the JSON data but got " + data['parameters']);
        }

        return true;
    }


}

CitiesRow.RequiredProperties = ["city", "count", "firstUpdated", "lastUpdated", "locations", "parameters"];

/**
 * @member {String} city
 */
CitiesRow.prototype['city'] = undefined;

/**
 * @member {Number} count
 */
CitiesRow.prototype['count'] = undefined;

/**
 * @member {String} country
 */
CitiesRow.prototype['country'] = undefined;

/**
 * @member {Date} firstUpdated
 */
CitiesRow.prototype['firstUpdated'] = undefined;

/**
 * @member {Date} lastUpdated
 */
CitiesRow.prototype['lastUpdated'] = undefined;

/**
 * @member {Number} locations
 */
CitiesRow.prototype['locations'] = undefined;

/**
 * @member {Array.<String>} parameters
 */
CitiesRow.prototype['parameters'] = undefined;






export default CitiesRow;

