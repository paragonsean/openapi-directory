/**
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProjectParameterDetails model module.
 * @module model/ProjectParameterDetails
 * @version 2.0.0
 */
class ProjectParameterDetails {
    /**
     * Constructs a new <code>ProjectParameterDetails</code>.
     * @alias module:model/ProjectParameterDetails
     * @param average {Number} 
     * @param count {Number} 
     * @param firstUpdated {Date} 
     * @param lastUpdated {Date} 
     * @param lastValue {Number} 
     * @param locations {Number} 
     * @param parameter {String} 
     * @param parameterId {Number} 
     * @param unit {String} 
     */
    constructor(average, count, firstUpdated, lastUpdated, lastValue, locations, parameter, parameterId, unit) { 
        
        ProjectParameterDetails.initialize(this, average, count, firstUpdated, lastUpdated, lastValue, locations, parameter, parameterId, unit);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, average, count, firstUpdated, lastUpdated, lastValue, locations, parameter, parameterId, unit) { 
        obj['average'] = average;
        obj['count'] = count;
        obj['firstUpdated'] = firstUpdated;
        obj['lastUpdated'] = lastUpdated;
        obj['lastValue'] = lastValue;
        obj['locations'] = locations;
        obj['parameter'] = parameter;
        obj['parameterId'] = parameterId;
        obj['unit'] = unit;
    }

    /**
     * Constructs a <code>ProjectParameterDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProjectParameterDetails} obj Optional instance to populate.
     * @return {module:model/ProjectParameterDetails} The populated <code>ProjectParameterDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProjectParameterDetails();

            if (data.hasOwnProperty('average')) {
                obj['average'] = ApiClient.convertToType(data['average'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('displayName')) {
                obj['displayName'] = ApiClient.convertToType(data['displayName'], 'String');
            }
            if (data.hasOwnProperty('firstUpdated')) {
                obj['firstUpdated'] = ApiClient.convertToType(data['firstUpdated'], 'Date');
            }
            if (data.hasOwnProperty('lastUpdated')) {
                obj['lastUpdated'] = ApiClient.convertToType(data['lastUpdated'], 'Date');
            }
            if (data.hasOwnProperty('lastValue')) {
                obj['lastValue'] = ApiClient.convertToType(data['lastValue'], 'Number');
            }
            if (data.hasOwnProperty('locations')) {
                obj['locations'] = ApiClient.convertToType(data['locations'], 'Number');
            }
            if (data.hasOwnProperty('parameter')) {
                obj['parameter'] = ApiClient.convertToType(data['parameter'], 'String');
            }
            if (data.hasOwnProperty('parameterId')) {
                obj['parameterId'] = ApiClient.convertToType(data['parameterId'], 'Number');
            }
            if (data.hasOwnProperty('unit')) {
                obj['unit'] = ApiClient.convertToType(data['unit'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProjectParameterDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProjectParameterDetails</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ProjectParameterDetails.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['displayName'] && !(typeof data['displayName'] === 'string' || data['displayName'] instanceof String)) {
            throw new Error("Expected the field `displayName` to be a primitive type in the JSON string but got " + data['displayName']);
        }
        // ensure the json data is a string
        if (data['parameter'] && !(typeof data['parameter'] === 'string' || data['parameter'] instanceof String)) {
            throw new Error("Expected the field `parameter` to be a primitive type in the JSON string but got " + data['parameter']);
        }
        // ensure the json data is a string
        if (data['unit'] && !(typeof data['unit'] === 'string' || data['unit'] instanceof String)) {
            throw new Error("Expected the field `unit` to be a primitive type in the JSON string but got " + data['unit']);
        }

        return true;
    }


}

ProjectParameterDetails.RequiredProperties = ["average", "count", "firstUpdated", "lastUpdated", "lastValue", "locations", "parameter", "parameterId", "unit"];

/**
 * @member {Number} average
 */
ProjectParameterDetails.prototype['average'] = undefined;

/**
 * @member {Number} count
 */
ProjectParameterDetails.prototype['count'] = undefined;

/**
 * @member {String} displayName
 */
ProjectParameterDetails.prototype['displayName'] = undefined;

/**
 * @member {Date} firstUpdated
 */
ProjectParameterDetails.prototype['firstUpdated'] = undefined;

/**
 * @member {Date} lastUpdated
 */
ProjectParameterDetails.prototype['lastUpdated'] = undefined;

/**
 * @member {Number} lastValue
 */
ProjectParameterDetails.prototype['lastValue'] = undefined;

/**
 * @member {Number} locations
 */
ProjectParameterDetails.prototype['locations'] = undefined;

/**
 * @member {String} parameter
 */
ProjectParameterDetails.prototype['parameter'] = undefined;

/**
 * @member {Number} parameterId
 */
ProjectParameterDetails.prototype['parameterId'] = undefined;

/**
 * @member {String} unit
 */
ProjectParameterDetails.prototype['unit'] = undefined;






export default ProjectParameterDetails;

