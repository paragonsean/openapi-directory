/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CitiesOrder;
import org.openapitools.client.model.CountriesOrder;
import org.openapitools.client.model.DateFrom;
import org.openapitools.client.model.DateTo;
import org.openapitools.client.model.EntityTypes;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.LocationInner;
import org.openapitools.client.model.LocationsOrder;
import org.openapitools.client.model.MeasOrder;
import org.openapitools.client.model.OpenAQCitiesResult;
import org.openapitools.client.model.OpenAQCountriesResult;
import org.openapitools.client.model.OpenAQParametersResult;
import org.openapitools.client.model.OpenAQResult;
import org.openapitools.client.model.OrderBy;
import org.openapitools.client.model.ParameterInner;
import org.openapitools.client.model.SensorTypes;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.SourcesV1Order;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V1Api
 */
@Disabled
public class V1ApiTest {

    private final V1Api api = new V1Api();

    /**
     * Provides a simple listing of cities within the platform
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void citiesGetv1V1CitiesGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        CitiesOrder orderBy = null;
        String entity = null;
        OpenAQCitiesResult response = api.citiesGetv1V1CitiesGet(limit, page, offset, sort, countryId, country, city, orderBy, entity);
        // TODO: test validations
    }

    /**
     * Countries Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetV1CountriesCountryIdGetTest() throws ApiException {
        String countryId = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        List<String> country = null;
        CountriesOrder orderBy = null;
        OpenAQCountriesResult response = api.countriesGetV1CountriesCountryIdGet(countryId, limit, page, offset, sort, country, orderBy);
        // TODO: test validations
    }

    /**
     * Countries Getv1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetv1V1CountriesGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        String countryId = null;
        List<String> country = null;
        CountriesOrder orderBy = null;
        OpenAQCountriesResult response = api.countriesGetv1V1CountriesGet(limit, page, offset, sort, countryId, country, orderBy);
        // TODO: test validations
    }

    /**
     * Latest V1 Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestV1GetV1LatestGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        Integer locationId = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.latestV1GetV1LatestGet(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Latest V1 Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestV1GetV1LatestLocationIdGetTest() throws ApiException {
        Integer locationId = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.latestV1GetV1LatestLocationIdGet(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Locationsv1 Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsv1GetV1LocationsGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        Integer locationId = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.locationsv1GetV1LocationsGet(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Locationsv1 Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsv1GetV1LocationsLocationIdGetTest() throws ApiException {
        Integer locationId = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.locationsv1GetV1LocationsLocationIdGet(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Measurements Get V1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void measurementsGetV1V1MeasurementsGetTest() throws ApiException {
        String format = null;
        DateFrom dateFrom = null;
        DateTo dateTo = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        Integer locationId = null;
        List<LocationInner> location = null;
        MeasOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        Integer project = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        BigDecimal valueFrom = null;
        BigDecimal valueTo = null;
        String includeFields = null;
        Object response = api.measurementsGetV1V1MeasurementsGet(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields);
        // TODO: test validations
    }

    /**
     * Parameters Getv1
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void parametersGetv1V1ParametersGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        List<String> sourceName = null;
        List<Integer> sourceId = null;
        List<String> sourceSlug = null;
        OrderBy orderBy = null;
        OpenAQParametersResult response = api.parametersGetv1V1ParametersGet(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy);
        // TODO: test validations
    }

    /**
     * Sources V1 Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesV1GetV1SourcesGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        String name = null;
        SourcesV1Order orderBy = null;
        OpenAQResult response = api.sourcesV1GetV1SourcesGet(limit, page, offset, sort, name, orderBy);
        // TODO: test validations
    }

}
