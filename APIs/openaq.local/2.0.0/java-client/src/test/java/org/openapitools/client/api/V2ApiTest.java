/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CitiesOrder;
import org.openapitools.client.model.CountriesOrder;
import org.openapitools.client.model.DateFrom;
import org.openapitools.client.model.DateTo;
import org.openapitools.client.model.Datefrom;
import org.openapitools.client.model.Dateto;
import org.openapitools.client.model.EntityTypes;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Lastupdatedfrom;
import org.openapitools.client.model.Lastupdatedto;
import org.openapitools.client.model.LocationInner;
import org.openapitools.client.model.LocationsOrder;
import org.openapitools.client.model.MeasOrder;
import org.openapitools.client.model.OpenAQCitiesResult;
import org.openapitools.client.model.OpenAQCountriesResult;
import org.openapitools.client.model.OpenAQParametersResult;
import org.openapitools.client.model.OpenAQProjectsResult;
import org.openapitools.client.model.OpenAQResult;
import org.openapitools.client.model.OrderBy;
import org.openapitools.client.model.Parameter;
import org.openapitools.client.model.ParameterInner;
import org.openapitools.client.model.ProjectsOrder;
import org.openapitools.client.model.SensorTypes;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.SourcesOrder;
import org.openapitools.client.model.Spatial;
import org.openapitools.client.model.Temporal;
import org.openapitools.client.model.TileJSON;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for V2Api
 */
@Disabled
public class V2ApiTest {

    private final V2Api api = new V2Api();

    /**
     * Averages V2 Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void averagesV2GetV2AveragesGetTest() throws ApiException {
        Spatial spatial = null;
        Temporal temporal = null;
        DateFrom dateFrom = null;
        DateTo dateTo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        Integer projectId = null;
        List<ParameterInner> project = null;
        String countryId = null;
        List<String> country = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        List<String> location = null;
        Boolean group = null;
        OpenAQResult response = api.averagesV2GetV2AveragesGet(spatial, temporal, dateFrom, dateTo, parameterId, parameter, unit, projectId, project, countryId, country, limit, page, offset, sort, location, group);
        // TODO: test validations
    }

    /**
     * Provides a simple listing of cities within the platform
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void citiesGetV2CitiesGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        CitiesOrder orderBy = null;
        String entity = null;
        OpenAQCitiesResult response = api.citiesGetV2CitiesGet(limit, page, offset, sort, countryId, country, city, orderBy, entity);
        // TODO: test validations
    }

    /**
     * Countries Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetV2CountriesCountryIdGetTest() throws ApiException {
        String countryId = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        List<String> country = null;
        CountriesOrder orderBy = null;
        OpenAQCountriesResult response = api.countriesGetV2CountriesCountryIdGet(countryId, limit, page, offset, sort, country, orderBy);
        // TODO: test validations
    }

    /**
     * Countries Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void countriesGetV2CountriesGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        String countryId = null;
        List<String> country = null;
        CountriesOrder orderBy = null;
        OpenAQCountriesResult response = api.countriesGetV2CountriesGet(limit, page, offset, sort, countryId, country, orderBy);
        // TODO: test validations
    }

    /**
     * Demo
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void demoV2LocationsTilesViewerGetTest() throws ApiException {
        String response = api.demoV2LocationsTilesViewerGet();
        // TODO: test validations
    }

    /**
     * Get Mobilegentile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetTest() throws ApiException {
        Integer z = null;
        Integer x = null;
        Integer y = null;
        Parameter parameter = null;
        List<Integer> location = null;
        Lastupdatedfrom lastUpdatedFrom = null;
        Lastupdatedto lastUpdatedTo = null;
        Boolean isMobile = null;
        Integer project = null;
        Boolean isAnalysis = null;
        api.getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis);
        // TODO: test validations
    }

    /**
     * Get Mobiletile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getMobiletileV2LocationsTilesMobileZXYPbfGetTest() throws ApiException {
        Integer z = null;
        Integer x = null;
        Integer y = null;
        Datefrom dateFrom = null;
        Dateto dateTo = null;
        Parameter parameter = null;
        List<Integer> location = null;
        Lastupdatedfrom lastUpdatedFrom = null;
        Lastupdatedto lastUpdatedTo = null;
        Boolean isMobile = null;
        Integer project = null;
        Boolean isAnalysis = null;
        api.getMobiletileV2LocationsTilesMobileZXYPbfGet(z, x, y, dateFrom, dateTo, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis);
        // TODO: test validations
    }

    /**
     * Get Tile
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTileV2LocationsTilesZXYPbfGetTest() throws ApiException {
        Integer z = null;
        Integer x = null;
        Integer y = null;
        Parameter parameter = null;
        List<Integer> location = null;
        Lastupdatedfrom lastUpdatedFrom = null;
        Lastupdatedto lastUpdatedTo = null;
        Boolean isMobile = null;
        Integer project = null;
        Boolean isAnalysis = null;
        api.getTileV2LocationsTilesZXYPbfGet(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis);
        // TODO: test validations
    }

    /**
     * Latest Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestGetV2LatestGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        Integer locationId = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.latestGetV2LatestGet(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Latest Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void latestGetV2LatestLocationIdGetTest() throws ApiException {
        Integer locationId = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.latestGetV2LatestLocationIdGet(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Locations Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsGetV2LocationsGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        Integer locationId = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.locationsGetV2LocationsGet(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Locations Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void locationsGetV2LocationsLocationIdGetTest() throws ApiException {
        Integer locationId = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        List<LocationInner> location = null;
        LocationsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        List<String> sourceName = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        List<String> modelName = null;
        List<String> manufacturerName = null;
        Boolean dumpRaw = null;
        OpenAQResult response = api.locationsGetV2LocationsLocationIdGet(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        // TODO: test validations
    }

    /**
     * Measurements Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void measurementsGetV2MeasurementsGetTest() throws ApiException {
        String format = null;
        DateFrom dateFrom = null;
        DateTo dateTo = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Boolean hasGeo = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        String coordinates = null;
        Integer radius = null;
        String countryId = null;
        List<String> country = null;
        List<String> city = null;
        Integer locationId = null;
        List<LocationInner> location = null;
        MeasOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        Integer project = null;
        EntityTypes entity = null;
        SensorTypes sensorType = null;
        BigDecimal valueFrom = null;
        BigDecimal valueTo = null;
        String includeFields = null;
        Object response = api.measurementsGetV2MeasurementsGet(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields);
        // TODO: test validations
    }

    /**
     * Mfr Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mfrGetV2ManufacturersGetTest() throws ApiException {
        OpenAQResult response = api.mfrGetV2ManufacturersGet();
        // TODO: test validations
    }

    /**
     * Mobilegentilejson
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetTest() throws ApiException {
        TileJSON response = api.mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet();
        // TODO: test validations
    }

    /**
     * Mobiletilejson
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void mobiletilejsonV2LocationsTilesMobileTilesJsonGetTest() throws ApiException {
        TileJSON response = api.mobiletilejsonV2LocationsTilesMobileTilesJsonGet();
        // TODO: test validations
    }

    /**
     * Model Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void modelGetV2ModelsGetTest() throws ApiException {
        OpenAQResult response = api.modelGetV2ModelsGet();
        // TODO: test validations
    }

    /**
     * Parameters Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void parametersGetV2ParametersGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        List<String> sourceName = null;
        List<Integer> sourceId = null;
        List<String> sourceSlug = null;
        OrderBy orderBy = null;
        OpenAQParametersResult response = api.parametersGetV2ParametersGet(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy);
        // TODO: test validations
    }

    /**
     * Projects Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetV2ProjectsGetTest() throws ApiException {
        String countryId = null;
        List<String> country = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        Integer projectId = null;
        List<ParameterInner> project = null;
        ProjectsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        String entity = null;
        String sensorType = null;
        List<String> sourceName = null;
        OpenAQProjectsResult response = api.projectsGetV2ProjectsGet(countryId, country, limit, page, offset, sort, parameterId, parameter, unit, projectId, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName);
        // TODO: test validations
    }

    /**
     * Projects Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void projectsGetV2ProjectsProjectIdGetTest() throws ApiException {
        Integer projectId = null;
        String countryId = null;
        List<String> country = null;
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        Integer parameterId = null;
        List<ParameterInner> parameter = null;
        List<String> unit = null;
        List<ParameterInner> project = null;
        ProjectsOrder orderBy = null;
        Boolean isMobile = null;
        Boolean isAnalysis = null;
        String entity = null;
        String sensorType = null;
        List<String> sourceName = null;
        OpenAQProjectsResult response = api.projectsGetV2ProjectsProjectIdGet(projectId, countryId, country, limit, page, offset, sort, parameterId, parameter, unit, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName);
        // TODO: test validations
    }

    /**
     * Readme Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void readmeGetV2SourcesReadmeSlugGetTest() throws ApiException {
        String slug = null;
        Object response = api.readmeGetV2SourcesReadmeSlugGet(slug);
        // TODO: test validations
    }

    /**
     * Sources Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sourcesGetV2SourcesGetTest() throws ApiException {
        Integer limit = null;
        Integer page = null;
        Integer offset = null;
        Sort sort = null;
        List<String> sourceName = null;
        List<Integer> sourceId = null;
        List<String> sourceSlug = null;
        SourcesOrder orderBy = null;
        OpenAQResult response = api.sourcesGetV2SourcesGet(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy);
        // TODO: test validations
    }

    /**
     * Summary Get
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void summaryGetV2SummaryGetTest() throws ApiException {
        OpenAQResult response = api.summaryGetV2SummaryGet();
        // TODO: test validations
    }

    /**
     * Tilejson
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void tilejsonV2LocationsTilesTilesJsonGetTest() throws ApiException {
        TileJSON response = api.tilejsonV2LocationsTilesTilesJsonGet();
        // TODO: test validations
    }

}
