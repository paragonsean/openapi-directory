/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TileJSON model. Based on https://github.com/mapbox/tilejson-spec/tree/master/2.2.0
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:05.630351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TileJSON {
  public static final String SERIALIZED_NAME_ATTRIBUTION = "attribution";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTION)
  private String attribution;

  public static final String SERIALIZED_NAME_BOUNDS = "bounds";
  @SerializedName(SERIALIZED_NAME_BOUNDS)
  private List<BigDecimal> bounds = new ArrayList<>(Arrays.asList(new BigDecimal("-180"), new BigDecimal("-90"), new BigDecimal("180"), new BigDecimal("90")));

  public static final String SERIALIZED_NAME_DATA = "data";
  @SerializedName(SERIALIZED_NAME_DATA)
  private List<String> data = new ArrayList<>();

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_GRIDS = "grids";
  @SerializedName(SERIALIZED_NAME_GRIDS)
  private List<String> grids = new ArrayList<>();

  public static final String SERIALIZED_NAME_LEGEND = "legend";
  @SerializedName(SERIALIZED_NAME_LEGEND)
  private String legend;

  public static final String SERIALIZED_NAME_MAXZOOM = "maxzoom";
  @SerializedName(SERIALIZED_NAME_MAXZOOM)
  private Integer maxzoom = 30;

  public static final String SERIALIZED_NAME_MINZOOM = "minzoom";
  @SerializedName(SERIALIZED_NAME_MINZOOM)
  private Integer minzoom = 0;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEME = "scheme";
  @SerializedName(SERIALIZED_NAME_SCHEME)
  private String scheme = "xyz";

  public static final String SERIALIZED_NAME_TEMPLATE = "template";
  @SerializedName(SERIALIZED_NAME_TEMPLATE)
  private String template;

  public static final String SERIALIZED_NAME_TILEJSON = "tilejson";
  @SerializedName(SERIALIZED_NAME_TILEJSON)
  private String tilejson = "2.2.0";

  public static final String SERIALIZED_NAME_TILES = "tiles";
  @SerializedName(SERIALIZED_NAME_TILES)
  private List<String> tiles = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERSION = "version";
  @SerializedName(SERIALIZED_NAME_VERSION)
  private String version = "1.0.0";

  public TileJSON() {
  }

  public TileJSON attribution(String attribution) {
    this.attribution = attribution;
    return this;
  }

  /**
   * Get attribution
   * @return attribution
   */
  @javax.annotation.Nullable
  public String getAttribution() {
    return attribution;
  }

  public void setAttribution(String attribution) {
    this.attribution = attribution;
  }


  public TileJSON bounds(List<BigDecimal> bounds) {
    this.bounds = bounds;
    return this;
  }

  public TileJSON addBoundsItem(BigDecimal boundsItem) {
    if (this.bounds == null) {
      this.bounds = new ArrayList<>(Arrays.asList(new BigDecimal("-180"), new BigDecimal("-90"), new BigDecimal("180"), new BigDecimal("90")));
    }
    this.bounds.add(boundsItem);
    return this;
  }

  /**
   * Get bounds
   * @return bounds
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getBounds() {
    return bounds;
  }

  public void setBounds(List<BigDecimal> bounds) {
    this.bounds = bounds;
  }


  public TileJSON data(List<String> data) {
    this.data = data;
    return this;
  }

  public TileJSON addDataItem(String dataItem) {
    if (this.data == null) {
      this.data = new ArrayList<>();
    }
    this.data.add(dataItem);
    return this;
  }

  /**
   * Get data
   * @return data
   */
  @javax.annotation.Nullable
  public List<String> getData() {
    return data;
  }

  public void setData(List<String> data) {
    this.data = data;
  }


  public TileJSON description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TileJSON grids(List<String> grids) {
    this.grids = grids;
    return this;
  }

  public TileJSON addGridsItem(String gridsItem) {
    if (this.grids == null) {
      this.grids = new ArrayList<>();
    }
    this.grids.add(gridsItem);
    return this;
  }

  /**
   * Get grids
   * @return grids
   */
  @javax.annotation.Nullable
  public List<String> getGrids() {
    return grids;
  }

  public void setGrids(List<String> grids) {
    this.grids = grids;
  }


  public TileJSON legend(String legend) {
    this.legend = legend;
    return this;
  }

  /**
   * Get legend
   * @return legend
   */
  @javax.annotation.Nullable
  public String getLegend() {
    return legend;
  }

  public void setLegend(String legend) {
    this.legend = legend;
  }


  public TileJSON maxzoom(Integer maxzoom) {
    this.maxzoom = maxzoom;
    return this;
  }

  /**
   * Get maxzoom
   * minimum: 0
   * maximum: 30
   * @return maxzoom
   */
  @javax.annotation.Nullable
  public Integer getMaxzoom() {
    return maxzoom;
  }

  public void setMaxzoom(Integer maxzoom) {
    this.maxzoom = maxzoom;
  }


  public TileJSON minzoom(Integer minzoom) {
    this.minzoom = minzoom;
    return this;
  }

  /**
   * Get minzoom
   * minimum: 0
   * maximum: 30
   * @return minzoom
   */
  @javax.annotation.Nullable
  public Integer getMinzoom() {
    return minzoom;
  }

  public void setMinzoom(Integer minzoom) {
    this.minzoom = minzoom;
  }


  public TileJSON name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public TileJSON scheme(String scheme) {
    this.scheme = scheme;
    return this;
  }

  /**
   * Get scheme
   * @return scheme
   */
  @javax.annotation.Nullable
  public String getScheme() {
    return scheme;
  }

  public void setScheme(String scheme) {
    this.scheme = scheme;
  }


  public TileJSON template(String template) {
    this.template = template;
    return this;
  }

  /**
   * Get template
   * @return template
   */
  @javax.annotation.Nullable
  public String getTemplate() {
    return template;
  }

  public void setTemplate(String template) {
    this.template = template;
  }


  public TileJSON tilejson(String tilejson) {
    this.tilejson = tilejson;
    return this;
  }

  /**
   * Get tilejson
   * @return tilejson
   */
  @javax.annotation.Nullable
  public String getTilejson() {
    return tilejson;
  }

  public void setTilejson(String tilejson) {
    this.tilejson = tilejson;
  }


  public TileJSON tiles(List<String> tiles) {
    this.tiles = tiles;
    return this;
  }

  public TileJSON addTilesItem(String tilesItem) {
    if (this.tiles == null) {
      this.tiles = new ArrayList<>();
    }
    this.tiles.add(tilesItem);
    return this;
  }

  /**
   * Get tiles
   * @return tiles
   */
  @javax.annotation.Nonnull
  public List<String> getTiles() {
    return tiles;
  }

  public void setTiles(List<String> tiles) {
    this.tiles = tiles;
  }


  public TileJSON version(String version) {
    this.version = version;
    return this;
  }

  /**
   * Get version
   * @return version
   */
  @javax.annotation.Nullable
  public String getVersion() {
    return version;
  }

  public void setVersion(String version) {
    this.version = version;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TileJSON tileJSON = (TileJSON) o;
    return Objects.equals(this.attribution, tileJSON.attribution) &&
        Objects.equals(this.bounds, tileJSON.bounds) &&
        Objects.equals(this.data, tileJSON.data) &&
        Objects.equals(this.description, tileJSON.description) &&
        Objects.equals(this.grids, tileJSON.grids) &&
        Objects.equals(this.legend, tileJSON.legend) &&
        Objects.equals(this.maxzoom, tileJSON.maxzoom) &&
        Objects.equals(this.minzoom, tileJSON.minzoom) &&
        Objects.equals(this.name, tileJSON.name) &&
        Objects.equals(this.scheme, tileJSON.scheme) &&
        Objects.equals(this.template, tileJSON.template) &&
        Objects.equals(this.tilejson, tileJSON.tilejson) &&
        Objects.equals(this.tiles, tileJSON.tiles) &&
        Objects.equals(this.version, tileJSON.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(attribution, bounds, data, description, grids, legend, maxzoom, minzoom, name, scheme, template, tilejson, tiles, version);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TileJSON {\n");
    sb.append("    attribution: ").append(toIndentedString(attribution)).append("\n");
    sb.append("    bounds: ").append(toIndentedString(bounds)).append("\n");
    sb.append("    data: ").append(toIndentedString(data)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    grids: ").append(toIndentedString(grids)).append("\n");
    sb.append("    legend: ").append(toIndentedString(legend)).append("\n");
    sb.append("    maxzoom: ").append(toIndentedString(maxzoom)).append("\n");
    sb.append("    minzoom: ").append(toIndentedString(minzoom)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scheme: ").append(toIndentedString(scheme)).append("\n");
    sb.append("    template: ").append(toIndentedString(template)).append("\n");
    sb.append("    tilejson: ").append(toIndentedString(tilejson)).append("\n");
    sb.append("    tiles: ").append(toIndentedString(tiles)).append("\n");
    sb.append("    version: ").append(toIndentedString(version)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("attribution");
    openapiFields.add("bounds");
    openapiFields.add("data");
    openapiFields.add("description");
    openapiFields.add("grids");
    openapiFields.add("legend");
    openapiFields.add("maxzoom");
    openapiFields.add("minzoom");
    openapiFields.add("name");
    openapiFields.add("scheme");
    openapiFields.add("template");
    openapiFields.add("tilejson");
    openapiFields.add("tiles");
    openapiFields.add("version");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("tiles");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TileJSON
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TileJSON.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TileJSON is not found in the empty JSON string", TileJSON.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TileJSON.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TileJSON` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TileJSON.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("attribution") != null && !jsonObj.get("attribution").isJsonNull()) && !jsonObj.get("attribution").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `attribution` to be a primitive type in the JSON string but got `%s`", jsonObj.get("attribution").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("bounds") != null && !jsonObj.get("bounds").isJsonNull() && !jsonObj.get("bounds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bounds` to be an array in the JSON string but got `%s`", jsonObj.get("bounds").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("data") != null && !jsonObj.get("data").isJsonNull() && !jsonObj.get("data").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `data` to be an array in the JSON string but got `%s`", jsonObj.get("data").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("grids") != null && !jsonObj.get("grids").isJsonNull() && !jsonObj.get("grids").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `grids` to be an array in the JSON string but got `%s`", jsonObj.get("grids").toString()));
      }
      if ((jsonObj.get("legend") != null && !jsonObj.get("legend").isJsonNull()) && !jsonObj.get("legend").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `legend` to be a primitive type in the JSON string but got `%s`", jsonObj.get("legend").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("scheme") != null && !jsonObj.get("scheme").isJsonNull()) && !jsonObj.get("scheme").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `scheme` to be a primitive type in the JSON string but got `%s`", jsonObj.get("scheme").toString()));
      }
      if ((jsonObj.get("template") != null && !jsonObj.get("template").isJsonNull()) && !jsonObj.get("template").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `template` to be a primitive type in the JSON string but got `%s`", jsonObj.get("template").toString()));
      }
      if ((jsonObj.get("tilejson") != null && !jsonObj.get("tilejson").isJsonNull()) && !jsonObj.get("tilejson").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tilejson` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tilejson").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("tiles") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("tiles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tiles` to be an array in the JSON string but got `%s`", jsonObj.get("tiles").toString()));
      }
      if ((jsonObj.get("version") != null && !jsonObj.get("version").isJsonNull()) && !jsonObj.get("version").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `version` to be a primitive type in the JSON string but got `%s`", jsonObj.get("version").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TileJSON.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TileJSON' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TileJSON> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TileJSON.class));

       return (TypeAdapter<T>) new TypeAdapter<TileJSON>() {
           @Override
           public void write(JsonWriter out, TileJSON value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TileJSON read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TileJSON given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TileJSON
   * @throws IOException if the JSON string is invalid with respect to TileJSON
   */
  public static TileJSON fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TileJSON.class);
  }

  /**
   * Convert an instance of TileJSON to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

