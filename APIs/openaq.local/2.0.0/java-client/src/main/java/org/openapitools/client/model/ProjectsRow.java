/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ProjectParameterDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ProjectsRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:05.630351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ProjectsRow {
  public static final String SERIALIZED_NAME_BBOX = "bbox";
  @SerializedName(SERIALIZED_NAME_BBOX)
  private List<BigDecimal> bbox = new ArrayList<>();

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private List<String> countries = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENTITY = "entity";
  @SerializedName(SERIALIZED_NAME_ENTITY)
  private String entity;

  public static final String SERIALIZED_NAME_FIRST_UPDATED = "firstUpdated";
  @SerializedName(SERIALIZED_NAME_FIRST_UPDATED)
  private OffsetDateTime firstUpdated;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_ANALYSIS = "isAnalysis";
  @SerializedName(SERIALIZED_NAME_IS_ANALYSIS)
  private Boolean isAnalysis;

  public static final String SERIALIZED_NAME_IS_MOBILE = "isMobile";
  @SerializedName(SERIALIZED_NAME_IS_MOBILE)
  private Boolean isMobile;

  public static final String SERIALIZED_NAME_LAST_UPDATED = "lastUpdated";
  @SerializedName(SERIALIZED_NAME_LAST_UPDATED)
  private OffsetDateTime lastUpdated;

  public static final String SERIALIZED_NAME_LOCATION_IDS = "locationIds";
  @SerializedName(SERIALIZED_NAME_LOCATION_IDS)
  private List<Integer> locationIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATIONS = "locations";
  @SerializedName(SERIALIZED_NAME_LOCATIONS)
  private Integer locations;

  public static final String SERIALIZED_NAME_MEASUREMENTS = "measurements";
  @SerializedName(SERIALIZED_NAME_MEASUREMENTS)
  private Integer measurements;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PARAMETERS = "parameters";
  @SerializedName(SERIALIZED_NAME_PARAMETERS)
  private List<ProjectParameterDetails> parameters = new ArrayList<>();

  public static final String SERIALIZED_NAME_SENSOR_TYPE = "sensorType";
  @SerializedName(SERIALIZED_NAME_SENSOR_TYPE)
  private String sensorType;

  public static final String SERIALIZED_NAME_SOURCES = "sources";
  @SerializedName(SERIALIZED_NAME_SOURCES)
  private List<Object> sources = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBTITLE = "subtitle";
  @SerializedName(SERIALIZED_NAME_SUBTITLE)
  private String subtitle;

  public ProjectsRow() {
  }

  public ProjectsRow bbox(List<BigDecimal> bbox) {
    this.bbox = bbox;
    return this;
  }

  public ProjectsRow addBboxItem(BigDecimal bboxItem) {
    if (this.bbox == null) {
      this.bbox = new ArrayList<>();
    }
    this.bbox.add(bboxItem);
    return this;
  }

  /**
   * Get bbox
   * @return bbox
   */
  @javax.annotation.Nullable
  public List<BigDecimal> getBbox() {
    return bbox;
  }

  public void setBbox(List<BigDecimal> bbox) {
    this.bbox = bbox;
  }


  public ProjectsRow countries(List<String> countries) {
    this.countries = countries;
    return this;
  }

  public ProjectsRow addCountriesItem(String countriesItem) {
    if (this.countries == null) {
      this.countries = new ArrayList<>();
    }
    this.countries.add(countriesItem);
    return this;
  }

  /**
   * Get countries
   * @return countries
   */
  @javax.annotation.Nullable
  public List<String> getCountries() {
    return countries;
  }

  public void setCountries(List<String> countries) {
    this.countries = countries;
  }


  public ProjectsRow entity(String entity) {
    this.entity = entity;
    return this;
  }

  /**
   * Get entity
   * @return entity
   */
  @javax.annotation.Nullable
  public String getEntity() {
    return entity;
  }

  public void setEntity(String entity) {
    this.entity = entity;
  }


  public ProjectsRow firstUpdated(OffsetDateTime firstUpdated) {
    this.firstUpdated = firstUpdated;
    return this;
  }

  /**
   * Get firstUpdated
   * @return firstUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getFirstUpdated() {
    return firstUpdated;
  }

  public void setFirstUpdated(OffsetDateTime firstUpdated) {
    this.firstUpdated = firstUpdated;
  }


  public ProjectsRow id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ProjectsRow isAnalysis(Boolean isAnalysis) {
    this.isAnalysis = isAnalysis;
    return this;
  }

  /**
   * Get isAnalysis
   * @return isAnalysis
   */
  @javax.annotation.Nullable
  public Boolean getIsAnalysis() {
    return isAnalysis;
  }

  public void setIsAnalysis(Boolean isAnalysis) {
    this.isAnalysis = isAnalysis;
  }


  public ProjectsRow isMobile(Boolean isMobile) {
    this.isMobile = isMobile;
    return this;
  }

  /**
   * Get isMobile
   * @return isMobile
   */
  @javax.annotation.Nullable
  public Boolean getIsMobile() {
    return isMobile;
  }

  public void setIsMobile(Boolean isMobile) {
    this.isMobile = isMobile;
  }


  public ProjectsRow lastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
    return this;
  }

  /**
   * Get lastUpdated
   * @return lastUpdated
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getLastUpdated() {
    return lastUpdated;
  }

  public void setLastUpdated(OffsetDateTime lastUpdated) {
    this.lastUpdated = lastUpdated;
  }


  public ProjectsRow locationIds(List<Integer> locationIds) {
    this.locationIds = locationIds;
    return this;
  }

  public ProjectsRow addLocationIdsItem(Integer locationIdsItem) {
    if (this.locationIds == null) {
      this.locationIds = new ArrayList<>();
    }
    this.locationIds.add(locationIdsItem);
    return this;
  }

  /**
   * Get locationIds
   * @return locationIds
   */
  @javax.annotation.Nonnull
  public List<Integer> getLocationIds() {
    return locationIds;
  }

  public void setLocationIds(List<Integer> locationIds) {
    this.locationIds = locationIds;
  }


  public ProjectsRow locations(Integer locations) {
    this.locations = locations;
    return this;
  }

  /**
   * Get locations
   * @return locations
   */
  @javax.annotation.Nonnull
  public Integer getLocations() {
    return locations;
  }

  public void setLocations(Integer locations) {
    this.locations = locations;
  }


  public ProjectsRow measurements(Integer measurements) {
    this.measurements = measurements;
    return this;
  }

  /**
   * Get measurements
   * @return measurements
   */
  @javax.annotation.Nonnull
  public Integer getMeasurements() {
    return measurements;
  }

  public void setMeasurements(Integer measurements) {
    this.measurements = measurements;
  }


  public ProjectsRow name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ProjectsRow parameters(List<ProjectParameterDetails> parameters) {
    this.parameters = parameters;
    return this;
  }

  public ProjectsRow addParametersItem(ProjectParameterDetails parametersItem) {
    if (this.parameters == null) {
      this.parameters = new ArrayList<>();
    }
    this.parameters.add(parametersItem);
    return this;
  }

  /**
   * Get parameters
   * @return parameters
   */
  @javax.annotation.Nonnull
  public List<ProjectParameterDetails> getParameters() {
    return parameters;
  }

  public void setParameters(List<ProjectParameterDetails> parameters) {
    this.parameters = parameters;
  }


  public ProjectsRow sensorType(String sensorType) {
    this.sensorType = sensorType;
    return this;
  }

  /**
   * Get sensorType
   * @return sensorType
   */
  @javax.annotation.Nullable
  public String getSensorType() {
    return sensorType;
  }

  public void setSensorType(String sensorType) {
    this.sensorType = sensorType;
  }


  public ProjectsRow sources(List<Object> sources) {
    this.sources = sources;
    return this;
  }

  public ProjectsRow addSourcesItem(Object sourcesItem) {
    if (this.sources == null) {
      this.sources = new ArrayList<>();
    }
    this.sources.add(sourcesItem);
    return this;
  }

  /**
   * Get sources
   * @return sources
   */
  @javax.annotation.Nullable
  public List<Object> getSources() {
    return sources;
  }

  public void setSources(List<Object> sources) {
    this.sources = sources;
  }


  public ProjectsRow subtitle(String subtitle) {
    this.subtitle = subtitle;
    return this;
  }

  /**
   * Get subtitle
   * @return subtitle
   */
  @javax.annotation.Nonnull
  public String getSubtitle() {
    return subtitle;
  }

  public void setSubtitle(String subtitle) {
    this.subtitle = subtitle;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ProjectsRow projectsRow = (ProjectsRow) o;
    return Objects.equals(this.bbox, projectsRow.bbox) &&
        Objects.equals(this.countries, projectsRow.countries) &&
        Objects.equals(this.entity, projectsRow.entity) &&
        Objects.equals(this.firstUpdated, projectsRow.firstUpdated) &&
        Objects.equals(this.id, projectsRow.id) &&
        Objects.equals(this.isAnalysis, projectsRow.isAnalysis) &&
        Objects.equals(this.isMobile, projectsRow.isMobile) &&
        Objects.equals(this.lastUpdated, projectsRow.lastUpdated) &&
        Objects.equals(this.locationIds, projectsRow.locationIds) &&
        Objects.equals(this.locations, projectsRow.locations) &&
        Objects.equals(this.measurements, projectsRow.measurements) &&
        Objects.equals(this.name, projectsRow.name) &&
        Objects.equals(this.parameters, projectsRow.parameters) &&
        Objects.equals(this.sensorType, projectsRow.sensorType) &&
        Objects.equals(this.sources, projectsRow.sources) &&
        Objects.equals(this.subtitle, projectsRow.subtitle);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bbox, countries, entity, firstUpdated, id, isAnalysis, isMobile, lastUpdated, locationIds, locations, measurements, name, parameters, sensorType, sources, subtitle);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ProjectsRow {\n");
    sb.append("    bbox: ").append(toIndentedString(bbox)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    entity: ").append(toIndentedString(entity)).append("\n");
    sb.append("    firstUpdated: ").append(toIndentedString(firstUpdated)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isAnalysis: ").append(toIndentedString(isAnalysis)).append("\n");
    sb.append("    isMobile: ").append(toIndentedString(isMobile)).append("\n");
    sb.append("    lastUpdated: ").append(toIndentedString(lastUpdated)).append("\n");
    sb.append("    locationIds: ").append(toIndentedString(locationIds)).append("\n");
    sb.append("    locations: ").append(toIndentedString(locations)).append("\n");
    sb.append("    measurements: ").append(toIndentedString(measurements)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    parameters: ").append(toIndentedString(parameters)).append("\n");
    sb.append("    sensorType: ").append(toIndentedString(sensorType)).append("\n");
    sb.append("    sources: ").append(toIndentedString(sources)).append("\n");
    sb.append("    subtitle: ").append(toIndentedString(subtitle)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bbox");
    openapiFields.add("countries");
    openapiFields.add("entity");
    openapiFields.add("firstUpdated");
    openapiFields.add("id");
    openapiFields.add("isAnalysis");
    openapiFields.add("isMobile");
    openapiFields.add("lastUpdated");
    openapiFields.add("locationIds");
    openapiFields.add("locations");
    openapiFields.add("measurements");
    openapiFields.add("name");
    openapiFields.add("parameters");
    openapiFields.add("sensorType");
    openapiFields.add("sources");
    openapiFields.add("subtitle");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("firstUpdated");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("lastUpdated");
    openapiRequiredFields.add("locationIds");
    openapiRequiredFields.add("locations");
    openapiRequiredFields.add("measurements");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("parameters");
    openapiRequiredFields.add("subtitle");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ProjectsRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ProjectsRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ProjectsRow is not found in the empty JSON string", ProjectsRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ProjectsRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ProjectsRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ProjectsRow.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("bbox") != null && !jsonObj.get("bbox").isJsonNull() && !jsonObj.get("bbox").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `bbox` to be an array in the JSON string but got `%s`", jsonObj.get("bbox").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull() && !jsonObj.get("countries").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `countries` to be an array in the JSON string but got `%s`", jsonObj.get("countries").toString()));
      }
      if ((jsonObj.get("entity") != null && !jsonObj.get("entity").isJsonNull()) && !jsonObj.get("entity").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `entity` to be a primitive type in the JSON string but got `%s`", jsonObj.get("entity").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("locationIds") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("locationIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `locationIds` to be an array in the JSON string but got `%s`", jsonObj.get("locationIds").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("parameters").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `parameters` to be an array in the JSON string but got `%s`", jsonObj.get("parameters").toString()));
      }

      JsonArray jsonArrayparameters = jsonObj.getAsJsonArray("parameters");
      // validate the required field `parameters` (array)
      for (int i = 0; i < jsonArrayparameters.size(); i++) {
        ProjectParameterDetails.validateJsonElement(jsonArrayparameters.get(i));
      };
      if ((jsonObj.get("sensorType") != null && !jsonObj.get("sensorType").isJsonNull()) && !jsonObj.get("sensorType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sensorType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sensorType").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("sources") != null && !jsonObj.get("sources").isJsonNull() && !jsonObj.get("sources").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sources` to be an array in the JSON string but got `%s`", jsonObj.get("sources").toString()));
      }
      if (!jsonObj.get("subtitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subtitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subtitle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ProjectsRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ProjectsRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ProjectsRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ProjectsRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ProjectsRow>() {
           @Override
           public void write(JsonWriter out, ProjectsRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ProjectsRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ProjectsRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ProjectsRow
   * @throws IOException if the JSON string is invalid with respect to ProjectsRow
   */
  public static ProjectsRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ProjectsRow.class);
  }

  /**
   * Convert an instance of ProjectsRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

