/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CitiesOrder;
import org.openapitools.client.model.CountriesOrder;
import org.openapitools.client.model.DateFrom;
import org.openapitools.client.model.DateTo;
import org.openapitools.client.model.Datefrom;
import org.openapitools.client.model.Dateto;
import org.openapitools.client.model.EntityTypes;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.Lastupdatedfrom;
import org.openapitools.client.model.Lastupdatedto;
import org.openapitools.client.model.LocationInner;
import org.openapitools.client.model.LocationsOrder;
import org.openapitools.client.model.MeasOrder;
import org.openapitools.client.model.OpenAQCitiesResult;
import org.openapitools.client.model.OpenAQCountriesResult;
import org.openapitools.client.model.OpenAQParametersResult;
import org.openapitools.client.model.OpenAQProjectsResult;
import org.openapitools.client.model.OpenAQResult;
import org.openapitools.client.model.OrderBy;
import org.openapitools.client.model.Parameter;
import org.openapitools.client.model.ParameterInner;
import org.openapitools.client.model.ProjectsOrder;
import org.openapitools.client.model.SensorTypes;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.SourcesOrder;
import org.openapitools.client.model.Spatial;
import org.openapitools.client.model.Temporal;
import org.openapitools.client.model.TileJSON;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for averagesV2GetV2AveragesGet
     * @param spatial  (required)
     * @param temporal  (required)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to desc)
     * @param location  (optional)
     * @param group  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call averagesV2GetV2AveragesGetCall(Spatial spatial, Temporal temporal, DateFrom dateFrom, DateTo dateTo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, List<String> location, Boolean group, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/averages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        if (project != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project", project));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (spatial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spatial", spatial));
        }

        if (temporal != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("temporal", temporal));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (group != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("group", group));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call averagesV2GetV2AveragesGetValidateBeforeCall(Spatial spatial, Temporal temporal, DateFrom dateFrom, DateTo dateTo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, List<String> location, Boolean group, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'spatial' is set
        if (spatial == null) {
            throw new ApiException("Missing the required parameter 'spatial' when calling averagesV2GetV2AveragesGet(Async)");
        }

        // verify the required parameter 'temporal' is set
        if (temporal == null) {
            throw new ApiException("Missing the required parameter 'temporal' when calling averagesV2GetV2AveragesGet(Async)");
        }

        return averagesV2GetV2AveragesGetCall(spatial, temporal, dateFrom, dateTo, parameterId, parameter, unit, projectId, project, countryId, country, limit, page, offset, sort, location, group, _callback);

    }

    /**
     * Averages V2 Get
     * 
     * @param spatial  (required)
     * @param temporal  (required)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to desc)
     * @param location  (optional)
     * @param group  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult averagesV2GetV2AveragesGet(Spatial spatial, Temporal temporal, DateFrom dateFrom, DateTo dateTo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, List<String> location, Boolean group) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = averagesV2GetV2AveragesGetWithHttpInfo(spatial, temporal, dateFrom, dateTo, parameterId, parameter, unit, projectId, project, countryId, country, limit, page, offset, sort, location, group);
        return localVarResp.getData();
    }

    /**
     * Averages V2 Get
     * 
     * @param spatial  (required)
     * @param temporal  (required)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to desc)
     * @param location  (optional)
     * @param group  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> averagesV2GetV2AveragesGetWithHttpInfo(Spatial spatial, Temporal temporal, DateFrom dateFrom, DateTo dateTo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, List<String> location, Boolean group) throws ApiException {
        okhttp3.Call localVarCall = averagesV2GetV2AveragesGetValidateBeforeCall(spatial, temporal, dateFrom, dateTo, parameterId, parameter, unit, projectId, project, countryId, country, limit, page, offset, sort, location, group, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Averages V2 Get (asynchronously)
     * 
     * @param spatial  (required)
     * @param temporal  (required)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to desc)
     * @param location  (optional)
     * @param group  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call averagesV2GetV2AveragesGetAsync(Spatial spatial, Temporal temporal, DateFrom dateFrom, DateTo dateTo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, List<String> location, Boolean group, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = averagesV2GetV2AveragesGetValidateBeforeCall(spatial, temporal, dateFrom, dateTo, parameterId, parameter, unit, projectId, project, countryId, country, limit, page, offset, sort, location, group, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for citiesGetV2CitiesGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call citiesGetV2CitiesGetCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call citiesGetV2CitiesGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity, final ApiCallback _callback) throws ApiException {
        return citiesGetV2CitiesGetCall(limit, page, offset, sort, countryId, country, city, orderBy, entity, _callback);

    }

    /**
     * Provides a simple listing of cities within the platform
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @return OpenAQCitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQCitiesResult citiesGetV2CitiesGet(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity) throws ApiException {
        ApiResponse<OpenAQCitiesResult> localVarResp = citiesGetV2CitiesGetWithHttpInfo(limit, page, offset, sort, countryId, country, city, orderBy, entity);
        return localVarResp.getData();
    }

    /**
     * Provides a simple listing of cities within the platform
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @return ApiResponse&lt;OpenAQCitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQCitiesResult> citiesGetV2CitiesGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity) throws ApiException {
        okhttp3.Call localVarCall = citiesGetV2CitiesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, city, orderBy, entity, null);
        Type localVarReturnType = new TypeToken<OpenAQCitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provides a simple listing of cities within the platform (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call citiesGetV2CitiesGetAsync(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity, final ApiCallback<OpenAQCitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = citiesGetV2CitiesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, city, orderBy, entity, _callback);
        Type localVarReturnType = new TypeToken<OpenAQCitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetV2CountriesCountryIdGet
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetV2CountriesCountryIdGetCall(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/countries/{country_id}"
            .replace("{" + "country_id" + "}", localVarApiClient.escapeString(countryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetV2CountriesCountryIdGetValidateBeforeCall(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryId' is set
        if (countryId == null) {
            throw new ApiException("Missing the required parameter 'countryId' when calling countriesGetV2CountriesCountryIdGet(Async)");
        }

        return countriesGetV2CountriesCountryIdGetCall(countryId, limit, page, offset, sort, country, orderBy, _callback);

    }

    /**
     * Countries Get
     * 
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return OpenAQCountriesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQCountriesResult countriesGetV2CountriesCountryIdGet(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy) throws ApiException {
        ApiResponse<OpenAQCountriesResult> localVarResp = countriesGetV2CountriesCountryIdGetWithHttpInfo(countryId, limit, page, offset, sort, country, orderBy);
        return localVarResp.getData();
    }

    /**
     * Countries Get
     * 
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return ApiResponse&lt;OpenAQCountriesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQCountriesResult> countriesGetV2CountriesCountryIdGetWithHttpInfo(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy) throws ApiException {
        okhttp3.Call localVarCall = countriesGetV2CountriesCountryIdGetValidateBeforeCall(countryId, limit, page, offset, sort, country, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Countries Get (asynchronously)
     * 
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetV2CountriesCountryIdGetAsync(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy, final ApiCallback<OpenAQCountriesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetV2CountriesCountryIdGetValidateBeforeCall(countryId, limit, page, offset, sort, country, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetV2CountriesGet
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetV2CountriesGetCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetV2CountriesGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        return countriesGetV2CountriesGetCall(limit, page, offset, sort, countryId, country, orderBy, _callback);

    }

    /**
     * Countries Get
     * 
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return OpenAQCountriesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQCountriesResult countriesGetV2CountriesGet(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy) throws ApiException {
        ApiResponse<OpenAQCountriesResult> localVarResp = countriesGetV2CountriesGetWithHttpInfo(limit, page, offset, sort, countryId, country, orderBy);
        return localVarResp.getData();
    }

    /**
     * Countries Get
     * 
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return ApiResponse&lt;OpenAQCountriesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQCountriesResult> countriesGetV2CountriesGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy) throws ApiException {
        okhttp3.Call localVarCall = countriesGetV2CountriesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Countries Get (asynchronously)
     * 
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetV2CountriesGetAsync(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy, final ApiCallback<OpenAQCountriesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetV2CountriesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for demoV2LocationsTilesViewerGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoV2LocationsTilesViewerGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/viewer";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call demoV2LocationsTilesViewerGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return demoV2LocationsTilesViewerGetCall(_callback);

    }

    /**
     * Demo
     * 
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public String demoV2LocationsTilesViewerGet() throws ApiException {
        ApiResponse<String> localVarResp = demoV2LocationsTilesViewerGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Demo
     * 
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> demoV2LocationsTilesViewerGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = demoV2LocationsTilesViewerGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Demo (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call demoV2LocationsTilesViewerGetAsync(final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = demoV2LocationsTilesViewerGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetCall(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/mobile-generalized/{z}/{x}/{y}.pbf"
            .replace("{" + "z" + "}", localVarApiClient.escapeString(z.toString()))
            .replace("{" + "x" + "}", localVarApiClient.escapeString(x.toString()))
            .replace("{" + "y" + "}", localVarApiClient.escapeString(y.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter", parameter));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (lastUpdatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdatedFrom", lastUpdatedFrom));
        }

        if (lastUpdatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdatedTo", lastUpdatedTo));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        final String[] localVarAccepts = {
            "application/x-protobuf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetValidateBeforeCall(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(Async)");
        }

        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(Async)");
        }

        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(Async)");
        }

        return getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetCall(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, _callback);

    }

    /**
     * Get Mobilegentile
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGet(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis) throws ApiException {
        getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetWithHttpInfo(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis);
    }

    /**
     * Get Mobilegentile
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetWithHttpInfo(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis) throws ApiException {
        okhttp3.Call localVarCall = getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetValidateBeforeCall(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Mobilegentile (asynchronously)
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetAsync(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMobilegentileV2LocationsTilesMobileGeneralizedZXYPbfGetValidateBeforeCall(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMobiletileV2LocationsTilesMobileZXYPbfGet
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMobiletileV2LocationsTilesMobileZXYPbfGetCall(Integer z, Integer x, Integer y, Datefrom dateFrom, Dateto dateTo, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/mobile/{z}/{x}/{y}.pbf"
            .replace("{" + "z" + "}", localVarApiClient.escapeString(z.toString()))
            .replace("{" + "x" + "}", localVarApiClient.escapeString(x.toString()))
            .replace("{" + "y" + "}", localVarApiClient.escapeString(y.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateFrom", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTo", dateTo));
        }

        if (parameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter", parameter));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (lastUpdatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdatedFrom", lastUpdatedFrom));
        }

        if (lastUpdatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdatedTo", lastUpdatedTo));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        final String[] localVarAccepts = {
            "application/x-protobuf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMobiletileV2LocationsTilesMobileZXYPbfGetValidateBeforeCall(Integer z, Integer x, Integer y, Datefrom dateFrom, Dateto dateTo, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet(Async)");
        }

        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet(Async)");
        }

        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getMobiletileV2LocationsTilesMobileZXYPbfGet(Async)");
        }

        return getMobiletileV2LocationsTilesMobileZXYPbfGetCall(z, x, y, dateFrom, dateTo, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, _callback);

    }

    /**
     * Get Mobiletile
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void getMobiletileV2LocationsTilesMobileZXYPbfGet(Integer z, Integer x, Integer y, Datefrom dateFrom, Dateto dateTo, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis) throws ApiException {
        getMobiletileV2LocationsTilesMobileZXYPbfGetWithHttpInfo(z, x, y, dateFrom, dateTo, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis);
    }

    /**
     * Get Mobiletile
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMobiletileV2LocationsTilesMobileZXYPbfGetWithHttpInfo(Integer z, Integer x, Integer y, Datefrom dateFrom, Dateto dateTo, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis) throws ApiException {
        okhttp3.Call localVarCall = getMobiletileV2LocationsTilesMobileZXYPbfGetValidateBeforeCall(z, x, y, dateFrom, dateTo, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Mobiletile (asynchronously)
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param dateFrom  (required)
     * @param dateTo  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMobiletileV2LocationsTilesMobileZXYPbfGetAsync(Integer z, Integer x, Integer y, Datefrom dateFrom, Dateto dateTo, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMobiletileV2LocationsTilesMobileZXYPbfGetValidateBeforeCall(z, x, y, dateFrom, dateTo, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTileV2LocationsTilesZXYPbfGet
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTileV2LocationsTilesZXYPbfGetCall(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/{z}/{x}/{y}.pbf"
            .replace("{" + "z" + "}", localVarApiClient.escapeString(z.toString()))
            .replace("{" + "x" + "}", localVarApiClient.escapeString(x.toString()))
            .replace("{" + "y" + "}", localVarApiClient.escapeString(y.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parameter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter", parameter));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (lastUpdatedFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdatedFrom", lastUpdatedFrom));
        }

        if (lastUpdatedTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastUpdatedTo", lastUpdatedTo));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        final String[] localVarAccepts = {
            "application/x-protobuf",
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTileV2LocationsTilesZXYPbfGetValidateBeforeCall(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'z' is set
        if (z == null) {
            throw new ApiException("Missing the required parameter 'z' when calling getTileV2LocationsTilesZXYPbfGet(Async)");
        }

        // verify the required parameter 'x' is set
        if (x == null) {
            throw new ApiException("Missing the required parameter 'x' when calling getTileV2LocationsTilesZXYPbfGet(Async)");
        }

        // verify the required parameter 'y' is set
        if (y == null) {
            throw new ApiException("Missing the required parameter 'y' when calling getTileV2LocationsTilesZXYPbfGet(Async)");
        }

        return getTileV2LocationsTilesZXYPbfGetCall(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, _callback);

    }

    /**
     * Get Tile
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void getTileV2LocationsTilesZXYPbfGet(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis) throws ApiException {
        getTileV2LocationsTilesZXYPbfGetWithHttpInfo(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis);
    }

    /**
     * Get Tile
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getTileV2LocationsTilesZXYPbfGetWithHttpInfo(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis) throws ApiException {
        okhttp3.Call localVarCall = getTileV2LocationsTilesZXYPbfGetValidateBeforeCall(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Get Tile (asynchronously)
     * 
     * @param z  (required)
     * @param x  (required)
     * @param y  (required)
     * @param parameter  (optional)
     * @param location limit data to location id (optional)
     * @param lastUpdatedFrom  (optional)
     * @param lastUpdatedTo  (optional)
     * @param isMobile  (optional)
     * @param project  (optional)
     * @param isAnalysis  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTileV2LocationsTilesZXYPbfGetAsync(Integer z, Integer x, Integer y, Parameter parameter, List<Integer> location, Lastupdatedfrom lastUpdatedFrom, Lastupdatedto lastUpdatedTo, Boolean isMobile, Integer project, Boolean isAnalysis, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTileV2LocationsTilesZXYPbfGetValidateBeforeCall(z, x, y, parameter, location, lastUpdatedFrom, lastUpdatedTo, isMobile, project, isAnalysis, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for latestGetV2LatestGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestGetV2LatestGetCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestGetV2LatestGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        return latestGetV2LatestGetCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Latest Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult latestGetV2LatestGet(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = latestGetV2LatestGetWithHttpInfo(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Latest Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> latestGetV2LatestGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = latestGetV2LatestGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Latest Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestGetV2LatestGetAsync(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestGetV2LatestGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for latestGetV2LatestLocationIdGet
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestGetV2LatestLocationIdGetCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/latest/{location_id}"
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestGetV2LatestLocationIdGetValidateBeforeCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling latestGetV2LatestLocationIdGet(Async)");
        }

        return latestGetV2LatestLocationIdGetCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Latest Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult latestGetV2LatestLocationIdGet(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = latestGetV2LatestLocationIdGetWithHttpInfo(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Latest Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> latestGetV2LatestLocationIdGetWithHttpInfo(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = latestGetV2LatestLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Latest Get (asynchronously)
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestGetV2LatestLocationIdGetAsync(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestGetV2LatestLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsGetV2LocationsGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsGetV2LocationsGetCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsGetV2LocationsGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        return locationsGetV2LocationsGetCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Locations Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult locationsGetV2LocationsGet(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = locationsGetV2LocationsGetWithHttpInfo(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Locations Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> locationsGetV2LocationsGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = locationsGetV2LocationsGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locations Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsGetV2LocationsGetAsync(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsGetV2LocationsGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsGetV2LocationsLocationIdGet
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsGetV2LocationsLocationIdGetCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/{location_id}"
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsGetV2LocationsLocationIdGetValidateBeforeCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling locationsGetV2LocationsLocationIdGet(Async)");
        }

        return locationsGetV2LocationsLocationIdGetCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Locations Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult locationsGetV2LocationsLocationIdGet(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = locationsGetV2LocationsLocationIdGetWithHttpInfo(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Locations Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> locationsGetV2LocationsLocationIdGetWithHttpInfo(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = locationsGetV2LocationsLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locations Get (asynchronously)
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsGetV2LocationsLocationIdGetAsync(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsGetV2LocationsLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementsGetV2MeasurementsGet
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementsGetV2MeasurementsGetCall(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/measurements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (valueFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value_from", valueFrom));
        }

        if (valueTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value_to", valueTo));
        }

        if (includeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_fields", includeFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementsGetV2MeasurementsGetValidateBeforeCall(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields, final ApiCallback _callback) throws ApiException {
        return measurementsGetV2MeasurementsGetCall(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields, _callback);

    }

    /**
     * Measurements Get
     * 
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object measurementsGetV2MeasurementsGet(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields) throws ApiException {
        ApiResponse<Object> localVarResp = measurementsGetV2MeasurementsGetWithHttpInfo(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields);
        return localVarResp.getData();
    }

    /**
     * Measurements Get
     * 
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> measurementsGetV2MeasurementsGetWithHttpInfo(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields) throws ApiException {
        okhttp3.Call localVarCall = measurementsGetV2MeasurementsGetValidateBeforeCall(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Measurements Get (asynchronously)
     * 
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementsGetV2MeasurementsGetAsync(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementsGetV2MeasurementsGetValidateBeforeCall(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mfrGetV2ManufacturersGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mfrGetV2ManufacturersGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/manufacturers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mfrGetV2ManufacturersGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mfrGetV2ManufacturersGetCall(_callback);

    }

    /**
     * Mfr Get
     * 
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult mfrGetV2ManufacturersGet() throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = mfrGetV2ManufacturersGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Mfr Get
     * 
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> mfrGetV2ManufacturersGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mfrGetV2ManufacturersGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mfr Get (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mfrGetV2ManufacturersGetAsync(final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = mfrGetV2ManufacturersGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/mobile-generalized/tiles.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetCall(_callback);

    }

    /**
     * Mobilegentilejson
     * 
     * @return TileJSON
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public TileJSON mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGet() throws ApiException {
        ApiResponse<TileJSON> localVarResp = mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Mobilegentilejson
     * 
     * @return ApiResponse&lt;TileJSON&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TileJSON> mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TileJSON>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mobilegentilejson (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetAsync(final ApiCallback<TileJSON> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobilegentilejsonV2LocationsTilesMobileGeneralizedTilesJsonGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TileJSON>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for mobiletilejsonV2LocationsTilesMobileTilesJsonGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobiletilejsonV2LocationsTilesMobileTilesJsonGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/mobile/tiles.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mobiletilejsonV2LocationsTilesMobileTilesJsonGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return mobiletilejsonV2LocationsTilesMobileTilesJsonGetCall(_callback);

    }

    /**
     * Mobiletilejson
     * 
     * @return TileJSON
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public TileJSON mobiletilejsonV2LocationsTilesMobileTilesJsonGet() throws ApiException {
        ApiResponse<TileJSON> localVarResp = mobiletilejsonV2LocationsTilesMobileTilesJsonGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Mobiletilejson
     * 
     * @return ApiResponse&lt;TileJSON&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TileJSON> mobiletilejsonV2LocationsTilesMobileTilesJsonGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = mobiletilejsonV2LocationsTilesMobileTilesJsonGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TileJSON>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Mobiletilejson (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mobiletilejsonV2LocationsTilesMobileTilesJsonGetAsync(final ApiCallback<TileJSON> _callback) throws ApiException {

        okhttp3.Call localVarCall = mobiletilejsonV2LocationsTilesMobileTilesJsonGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TileJSON>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for modelGetV2ModelsGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetV2ModelsGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/models";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call modelGetV2ModelsGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return modelGetV2ModelsGetCall(_callback);

    }

    /**
     * Model Get
     * 
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult modelGetV2ModelsGet() throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = modelGetV2ModelsGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Model Get
     * 
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> modelGetV2ModelsGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = modelGetV2ModelsGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Model Get (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call modelGetV2ModelsGetAsync(final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = modelGetV2ModelsGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parametersGetV2ParametersGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametersGetV2ParametersGetCall(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceId", sourceId));
        }

        if (sourceSlug != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceSlug", sourceSlug));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parametersGetV2ParametersGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy, final ApiCallback _callback) throws ApiException {
        return parametersGetV2ParametersGetCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, _callback);

    }

    /**
     * Parameters Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @return OpenAQParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQParametersResult parametersGetV2ParametersGet(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy) throws ApiException {
        ApiResponse<OpenAQParametersResult> localVarResp = parametersGetV2ParametersGetWithHttpInfo(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy);
        return localVarResp.getData();
    }

    /**
     * Parameters Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @return ApiResponse&lt;OpenAQParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQParametersResult> parametersGetV2ParametersGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy) throws ApiException {
        okhttp3.Call localVarCall = parametersGetV2ParametersGetValidateBeforeCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parameters Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametersGetV2ParametersGetAsync(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy, final ApiCallback<OpenAQParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = parametersGetV2ParametersGetValidateBeforeCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetV2ProjectsGet
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetV2ProjectsGetCall(String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (projectId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project_id", projectId));
        }

        if (project != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project", project));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetV2ProjectsGetValidateBeforeCall(String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName, final ApiCallback _callback) throws ApiException {
        return projectsGetV2ProjectsGetCall(countryId, country, limit, page, offset, sort, parameterId, parameter, unit, projectId, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName, _callback);

    }

    /**
     * Projects Get
     * 
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @return OpenAQProjectsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQProjectsResult projectsGetV2ProjectsGet(String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName) throws ApiException {
        ApiResponse<OpenAQProjectsResult> localVarResp = projectsGetV2ProjectsGetWithHttpInfo(countryId, country, limit, page, offset, sort, parameterId, parameter, unit, projectId, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName);
        return localVarResp.getData();
    }

    /**
     * Projects Get
     * 
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @return ApiResponse&lt;OpenAQProjectsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQProjectsResult> projectsGetV2ProjectsGetWithHttpInfo(String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName) throws ApiException {
        okhttp3.Call localVarCall = projectsGetV2ProjectsGetValidateBeforeCall(countryId, country, limit, page, offset, sort, parameterId, parameter, unit, projectId, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName, null);
        Type localVarReturnType = new TypeToken<OpenAQProjectsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects Get (asynchronously)
     * 
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param projectId  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetV2ProjectsGetAsync(String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, Integer projectId, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName, final ApiCallback<OpenAQProjectsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetV2ProjectsGetValidateBeforeCall(countryId, country, limit, page, offset, sort, parameterId, parameter, unit, projectId, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName, _callback);
        Type localVarReturnType = new TypeToken<OpenAQProjectsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for projectsGetV2ProjectsProjectIdGet
     * @param projectId  (required)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetV2ProjectsProjectIdGetCall(Integer projectId, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/projects/{project_id}"
            .replace("{" + "project_id" + "}", localVarApiClient.escapeString(projectId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (project != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "project", project));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call projectsGetV2ProjectsProjectIdGetValidateBeforeCall(Integer projectId, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'projectId' is set
        if (projectId == null) {
            throw new ApiException("Missing the required parameter 'projectId' when calling projectsGetV2ProjectsProjectIdGet(Async)");
        }

        return projectsGetV2ProjectsProjectIdGetCall(projectId, countryId, country, limit, page, offset, sort, parameterId, parameter, unit, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName, _callback);

    }

    /**
     * Projects Get
     * 
     * @param projectId  (required)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @return OpenAQProjectsResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQProjectsResult projectsGetV2ProjectsProjectIdGet(Integer projectId, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName) throws ApiException {
        ApiResponse<OpenAQProjectsResult> localVarResp = projectsGetV2ProjectsProjectIdGetWithHttpInfo(projectId, countryId, country, limit, page, offset, sort, parameterId, parameter, unit, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName);
        return localVarResp.getData();
    }

    /**
     * Projects Get
     * 
     * @param projectId  (required)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @return ApiResponse&lt;OpenAQProjectsResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQProjectsResult> projectsGetV2ProjectsProjectIdGetWithHttpInfo(Integer projectId, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName) throws ApiException {
        okhttp3.Call localVarCall = projectsGetV2ProjectsProjectIdGetValidateBeforeCall(projectId, countryId, country, limit, page, offset, sort, parameterId, parameter, unit, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName, null);
        Type localVarReturnType = new TypeToken<OpenAQProjectsResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Projects Get (asynchronously)
     * 
     * @param projectId  (required)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param project  (optional)
     * @param orderBy  (optional, default to lastUpdated)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param sourceName  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call projectsGetV2ProjectsProjectIdGetAsync(Integer projectId, String countryId, List<String> country, Integer limit, Integer page, Integer offset, Sort sort, Integer parameterId, List<ParameterInner> parameter, List<String> unit, List<ParameterInner> project, ProjectsOrder orderBy, Boolean isMobile, Boolean isAnalysis, String entity, String sensorType, List<String> sourceName, final ApiCallback<OpenAQProjectsResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = projectsGetV2ProjectsProjectIdGetValidateBeforeCall(projectId, countryId, country, limit, page, offset, sort, parameterId, parameter, unit, project, orderBy, isMobile, isAnalysis, entity, sensorType, sourceName, _callback);
        Type localVarReturnType = new TypeToken<OpenAQProjectsResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for readmeGetV2SourcesReadmeSlugGet
     * @param slug  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readmeGetV2SourcesReadmeSlugGetCall(String slug, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sources/readme/{slug}"
            .replace("{" + "slug" + "}", localVarApiClient.escapeString(slug.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call readmeGetV2SourcesReadmeSlugGetValidateBeforeCall(String slug, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'slug' is set
        if (slug == null) {
            throw new ApiException("Missing the required parameter 'slug' when calling readmeGetV2SourcesReadmeSlugGet(Async)");
        }

        return readmeGetV2SourcesReadmeSlugGetCall(slug, _callback);

    }

    /**
     * Readme Get
     * 
     * @param slug  (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object readmeGetV2SourcesReadmeSlugGet(String slug) throws ApiException {
        ApiResponse<Object> localVarResp = readmeGetV2SourcesReadmeSlugGetWithHttpInfo(slug);
        return localVarResp.getData();
    }

    /**
     * Readme Get
     * 
     * @param slug  (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> readmeGetV2SourcesReadmeSlugGetWithHttpInfo(String slug) throws ApiException {
        okhttp3.Call localVarCall = readmeGetV2SourcesReadmeSlugGetValidateBeforeCall(slug, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Readme Get (asynchronously)
     * 
     * @param slug  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call readmeGetV2SourcesReadmeSlugGetAsync(String slug, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = readmeGetV2SourcesReadmeSlugGetValidateBeforeCall(slug, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sourcesGetV2SourcesGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to sourceName)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sourcesGetV2SourcesGetCall(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, SourcesOrder orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceId", sourceId));
        }

        if (sourceSlug != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceSlug", sourceSlug));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sourcesGetV2SourcesGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, SourcesOrder orderBy, final ApiCallback _callback) throws ApiException {
        return sourcesGetV2SourcesGetCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, _callback);

    }

    /**
     * Sources Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to sourceName)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult sourcesGetV2SourcesGet(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, SourcesOrder orderBy) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = sourcesGetV2SourcesGetWithHttpInfo(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy);
        return localVarResp.getData();
    }

    /**
     * Sources Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to sourceName)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> sourcesGetV2SourcesGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, SourcesOrder orderBy) throws ApiException {
        okhttp3.Call localVarCall = sourcesGetV2SourcesGetValidateBeforeCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sources Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to sourceName)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sourcesGetV2SourcesGetAsync(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, SourcesOrder orderBy, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sourcesGetV2SourcesGetValidateBeforeCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for summaryGetV2SummaryGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryGetV2SummaryGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call summaryGetV2SummaryGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return summaryGetV2SummaryGetCall(_callback);

    }

    /**
     * Summary Get
     * 
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult summaryGetV2SummaryGet() throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = summaryGetV2SummaryGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Summary Get
     * 
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> summaryGetV2SummaryGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = summaryGetV2SummaryGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Summary Get (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call summaryGetV2SummaryGetAsync(final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = summaryGetV2SummaryGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for tilejsonV2LocationsTilesTilesJsonGet
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tilejsonV2LocationsTilesTilesJsonGetCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/locations/tiles/tiles.json";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call tilejsonV2LocationsTilesTilesJsonGetValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return tilejsonV2LocationsTilesTilesJsonGetCall(_callback);

    }

    /**
     * Tilejson
     * 
     * @return TileJSON
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public TileJSON tilejsonV2LocationsTilesTilesJsonGet() throws ApiException {
        ApiResponse<TileJSON> localVarResp = tilejsonV2LocationsTilesTilesJsonGetWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Tilejson
     * 
     * @return ApiResponse&lt;TileJSON&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TileJSON> tilejsonV2LocationsTilesTilesJsonGetWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = tilejsonV2LocationsTilesTilesJsonGetValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<TileJSON>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Tilejson (asynchronously)
     * 
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Return a tilejson </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call tilejsonV2LocationsTilesTilesJsonGetAsync(final ApiCallback<TileJSON> _callback) throws ApiException {

        okhttp3.Call localVarCall = tilejsonV2LocationsTilesTilesJsonGetValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<TileJSON>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
