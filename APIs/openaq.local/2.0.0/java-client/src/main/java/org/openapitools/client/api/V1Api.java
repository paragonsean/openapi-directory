/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CitiesOrder;
import org.openapitools.client.model.CountriesOrder;
import org.openapitools.client.model.DateFrom;
import org.openapitools.client.model.DateTo;
import org.openapitools.client.model.EntityTypes;
import org.openapitools.client.model.HTTPValidationError;
import org.openapitools.client.model.LocationInner;
import org.openapitools.client.model.LocationsOrder;
import org.openapitools.client.model.MeasOrder;
import org.openapitools.client.model.OpenAQCitiesResult;
import org.openapitools.client.model.OpenAQCountriesResult;
import org.openapitools.client.model.OpenAQParametersResult;
import org.openapitools.client.model.OpenAQResult;
import org.openapitools.client.model.OrderBy;
import org.openapitools.client.model.ParameterInner;
import org.openapitools.client.model.SensorTypes;
import org.openapitools.client.model.Sort;
import org.openapitools.client.model.SourcesV1Order;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class V1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public V1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for citiesGetv1V1CitiesGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call citiesGetv1V1CitiesGetCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/cities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call citiesGetv1V1CitiesGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity, final ApiCallback _callback) throws ApiException {
        return citiesGetv1V1CitiesGetCall(limit, page, offset, sort, countryId, country, city, orderBy, entity, _callback);

    }

    /**
     * Provides a simple listing of cities within the platform
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @return OpenAQCitiesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQCitiesResult citiesGetv1V1CitiesGet(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity) throws ApiException {
        ApiResponse<OpenAQCitiesResult> localVarResp = citiesGetv1V1CitiesGetWithHttpInfo(limit, page, offset, sort, countryId, country, city, orderBy, entity);
        return localVarResp.getData();
    }

    /**
     * Provides a simple listing of cities within the platform
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @return ApiResponse&lt;OpenAQCitiesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQCitiesResult> citiesGetv1V1CitiesGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity) throws ApiException {
        okhttp3.Call localVarCall = citiesGetv1V1CitiesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, city, orderBy, entity, null);
        Type localVarReturnType = new TypeToken<OpenAQCitiesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Provides a simple listing of cities within the platform (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param orderBy Order by a field (optional, default to city)
     * @param entity  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call citiesGetv1V1CitiesGetAsync(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, List<String> city, CitiesOrder orderBy, String entity, final ApiCallback<OpenAQCitiesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = citiesGetv1V1CitiesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, city, orderBy, entity, _callback);
        Type localVarReturnType = new TypeToken<OpenAQCitiesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetV1CountriesCountryIdGet
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetV1CountriesCountryIdGetCall(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries/{country_id}"
            .replace("{" + "country_id" + "}", localVarApiClient.escapeString(countryId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetV1CountriesCountryIdGetValidateBeforeCall(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryId' is set
        if (countryId == null) {
            throw new ApiException("Missing the required parameter 'countryId' when calling countriesGetV1CountriesCountryIdGet(Async)");
        }

        return countriesGetV1CountriesCountryIdGetCall(countryId, limit, page, offset, sort, country, orderBy, _callback);

    }

    /**
     * Countries Get
     * 
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return OpenAQCountriesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQCountriesResult countriesGetV1CountriesCountryIdGet(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy) throws ApiException {
        ApiResponse<OpenAQCountriesResult> localVarResp = countriesGetV1CountriesCountryIdGetWithHttpInfo(countryId, limit, page, offset, sort, country, orderBy);
        return localVarResp.getData();
    }

    /**
     * Countries Get
     * 
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return ApiResponse&lt;OpenAQCountriesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQCountriesResult> countriesGetV1CountriesCountryIdGetWithHttpInfo(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy) throws ApiException {
        okhttp3.Call localVarCall = countriesGetV1CountriesCountryIdGetValidateBeforeCall(countryId, limit, page, offset, sort, country, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Countries Get (asynchronously)
     * 
     * @param countryId  (required)
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetV1CountriesCountryIdGetAsync(String countryId, Integer limit, Integer page, Integer offset, Sort sort, List<String> country, CountriesOrder orderBy, final ApiCallback<OpenAQCountriesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetV1CountriesCountryIdGetValidateBeforeCall(countryId, limit, page, offset, sort, country, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for countriesGetv1V1CountriesGet
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetv1V1CountriesGetCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call countriesGetv1V1CountriesGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy, final ApiCallback _callback) throws ApiException {
        return countriesGetv1V1CountriesGetCall(limit, page, offset, sort, countryId, country, orderBy, _callback);

    }

    /**
     * Countries Getv1
     * 
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return OpenAQCountriesResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQCountriesResult countriesGetv1V1CountriesGet(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy) throws ApiException {
        ApiResponse<OpenAQCountriesResult> localVarResp = countriesGetv1V1CountriesGetWithHttpInfo(limit, page, offset, sort, countryId, country, orderBy);
        return localVarResp.getData();
    }

    /**
     * Countries Getv1
     * 
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @return ApiResponse&lt;OpenAQCountriesResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQCountriesResult> countriesGetv1V1CountriesGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy) throws ApiException {
        okhttp3.Call localVarCall = countriesGetv1V1CountriesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Countries Getv1 (asynchronously)
     * 
     * @param limit  (optional, default to 200)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param orderBy  (optional, default to country)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call countriesGetv1V1CountriesGetAsync(Integer limit, Integer page, Integer offset, Sort sort, String countryId, List<String> country, CountriesOrder orderBy, final ApiCallback<OpenAQCountriesResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = countriesGetv1V1CountriesGetValidateBeforeCall(limit, page, offset, sort, countryId, country, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQCountriesResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for latestV1GetV1LatestGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestV1GetV1LatestGetCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/latest";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestV1GetV1LatestGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        return latestV1GetV1LatestGetCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Latest V1 Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult latestV1GetV1LatestGet(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = latestV1GetV1LatestGetWithHttpInfo(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Latest V1 Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> latestV1GetV1LatestGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = latestV1GetV1LatestGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Latest V1 Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestV1GetV1LatestGetAsync(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestV1GetV1LatestGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for latestV1GetV1LatestLocationIdGet
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestV1GetV1LatestLocationIdGetCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/latest/{location_id}"
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call latestV1GetV1LatestLocationIdGetValidateBeforeCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling latestV1GetV1LatestLocationIdGet(Async)");
        }

        return latestV1GetV1LatestLocationIdGetCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Latest V1 Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult latestV1GetV1LatestLocationIdGet(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = latestV1GetV1LatestLocationIdGetWithHttpInfo(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Latest V1 Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> latestV1GetV1LatestLocationIdGetWithHttpInfo(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = latestV1GetV1LatestLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Latest V1 Get (asynchronously)
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call latestV1GetV1LatestLocationIdGetAsync(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = latestV1GetV1LatestLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsv1GetV1LocationsGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsv1GetV1LocationsGetCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/locations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsv1GetV1LocationsGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        return locationsv1GetV1LocationsGetCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Locationsv1 Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult locationsv1GetV1LocationsGet(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = locationsv1GetV1LocationsGetWithHttpInfo(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Locationsv1 Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> locationsv1GetV1LocationsGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = locationsv1GetV1LocationsGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locationsv1 Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsv1GetV1LocationsGetAsync(Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsv1GetV1LocationsGetValidateBeforeCall(limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for locationsv1GetV1LocationsLocationIdGet
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsv1GetV1LocationsLocationIdGetCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/locations/{location_id}"
            .replace("{" + "location_id" + "}", localVarApiClient.escapeString(locationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (modelName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "modelName", modelName));
        }

        if (manufacturerName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "manufacturerName", manufacturerName));
        }

        if (dumpRaw != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dumpRaw", dumpRaw));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call locationsv1GetV1LocationsLocationIdGetValidateBeforeCall(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'locationId' is set
        if (locationId == null) {
            throw new ApiException("Missing the required parameter 'locationId' when calling locationsv1GetV1LocationsLocationIdGet(Async)");
        }

        return locationsv1GetV1LocationsLocationIdGetCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);

    }

    /**
     * Locationsv1 Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult locationsv1GetV1LocationsLocationIdGet(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = locationsv1GetV1LocationsLocationIdGetWithHttpInfo(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw);
        return localVarResp.getData();
    }

    /**
     * Locationsv1 Get
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> locationsv1GetV1LocationsLocationIdGetWithHttpInfo(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw) throws ApiException {
        okhttp3.Call localVarCall = locationsv1GetV1LocationsLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Locationsv1 Get (asynchronously)
     * 
     * @param locationId  (required)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Sort Direction (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param location  (optional)
     * @param orderBy Order by a field (optional, default to lastUpdated)
     * @param isMobile Location is mobile (optional)
     * @param isAnalysis Data is the product of a previous analysis/aggregation and not raw measurements (optional)
     * @param sourceName Name of the data source (optional)
     * @param entity Source entity type. (optional)
     * @param sensorType Type of Sensor (optional)
     * @param modelName Model Name of Sensor (optional)
     * @param manufacturerName Manufacturer of Sensor (optional)
     * @param dumpRaw  (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call locationsv1GetV1LocationsLocationIdGetAsync(Integer locationId, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, List<LocationInner> location, LocationsOrder orderBy, Boolean isMobile, Boolean isAnalysis, List<String> sourceName, EntityTypes entity, SensorTypes sensorType, List<String> modelName, List<String> manufacturerName, Boolean dumpRaw, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = locationsv1GetV1LocationsLocationIdGetValidateBeforeCall(locationId, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, location, orderBy, isMobile, isAnalysis, sourceName, entity, sensorType, modelName, manufacturerName, dumpRaw, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for measurementsGetV1V1MeasurementsGet
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementsGetV1V1MeasurementsGetCall(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/measurements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (hasGeo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_geo", hasGeo));
        }

        if (parameterId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parameter_id", parameterId));
        }

        if (parameter != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "parameter", parameter));
        }

        if (unit != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "unit", unit));
        }

        if (coordinates != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("coordinates", coordinates));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (countryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_id", countryId));
        }

        if (country != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "country", country));
        }

        if (city != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "city", city));
        }

        if (locationId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("location_id", locationId));
        }

        if (location != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "location", location));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        if (isMobile != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMobile", isMobile));
        }

        if (isAnalysis != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAnalysis", isAnalysis));
        }

        if (project != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("project", project));
        }

        if (entity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("entity", entity));
        }

        if (sensorType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sensorType", sensorType));
        }

        if (valueFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value_from", valueFrom));
        }

        if (valueTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("value_to", valueTo));
        }

        if (includeFields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include_fields", includeFields));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call measurementsGetV1V1MeasurementsGetValidateBeforeCall(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields, final ApiCallback _callback) throws ApiException {
        return measurementsGetV1V1MeasurementsGetCall(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields, _callback);

    }

    /**
     * Measurements Get V1
     * 
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public Object measurementsGetV1V1MeasurementsGet(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields) throws ApiException {
        ApiResponse<Object> localVarResp = measurementsGetV1V1MeasurementsGetWithHttpInfo(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields);
        return localVarResp.getData();
    }

    /**
     * Measurements Get V1
     * 
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> measurementsGetV1V1MeasurementsGetWithHttpInfo(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields) throws ApiException {
        okhttp3.Call localVarCall = measurementsGetV1V1MeasurementsGetValidateBeforeCall(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Measurements Get V1 (asynchronously)
     * 
     * @param format  (optional)
     * @param dateFrom  (optional, default to 2000-01-01T00:00:00+00:00)
     * @param dateTo  (optional, default to 2021-08-23T09:48:00+00:00)
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort  (optional, default to desc)
     * @param hasGeo  (optional)
     * @param parameterId  (optional)
     * @param parameter  (optional)
     * @param unit  (optional)
     * @param coordinates  (optional)
     * @param radius  (optional, default to 1000)
     * @param countryId          Limit results by a certain country using two letter country code.         (ex. /US)          (optional)
     * @param country          Limit results by a certain country using two letter country code.         (ex. ?country&#x3D;US or ?country&#x3D;US&amp;country&#x3D;MX)          (optional)
     * @param city          Limit results by a certain city or cities.         (ex. ?city&#x3D;Chicago or ?city&#x3D;Chicago&amp;city&#x3D;Boston)          (optional)
     * @param locationId  (optional)
     * @param location  (optional)
     * @param orderBy  (optional, default to datetime)
     * @param isMobile  (optional)
     * @param isAnalysis  (optional)
     * @param project  (optional)
     * @param entity  (optional)
     * @param sensorType  (optional)
     * @param valueFrom  (optional)
     * @param valueTo  (optional)
     * @param includeFields  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call measurementsGetV1V1MeasurementsGetAsync(String format, DateFrom dateFrom, DateTo dateTo, Integer limit, Integer page, Integer offset, Sort sort, Boolean hasGeo, Integer parameterId, List<ParameterInner> parameter, List<String> unit, String coordinates, Integer radius, String countryId, List<String> country, List<String> city, Integer locationId, List<LocationInner> location, MeasOrder orderBy, Boolean isMobile, Boolean isAnalysis, Integer project, EntityTypes entity, SensorTypes sensorType, BigDecimal valueFrom, BigDecimal valueTo, String includeFields, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = measurementsGetV1V1MeasurementsGetValidateBeforeCall(format, dateFrom, dateTo, limit, page, offset, sort, hasGeo, parameterId, parameter, unit, coordinates, radius, countryId, country, city, locationId, location, orderBy, isMobile, isAnalysis, project, entity, sensorType, valueFrom, valueTo, includeFields, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for parametersGetv1V1ParametersGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametersGetv1V1ParametersGetCall(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/parameters";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (sourceName != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceName", sourceName));
        }

        if (sourceId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceId", sourceId));
        }

        if (sourceSlug != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "sourceSlug", sourceSlug));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call parametersGetv1V1ParametersGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy, final ApiCallback _callback) throws ApiException {
        return parametersGetv1V1ParametersGetCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, _callback);

    }

    /**
     * Parameters Getv1
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @return OpenAQParametersResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQParametersResult parametersGetv1V1ParametersGet(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy) throws ApiException {
        ApiResponse<OpenAQParametersResult> localVarResp = parametersGetv1V1ParametersGetWithHttpInfo(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy);
        return localVarResp.getData();
    }

    /**
     * Parameters Getv1
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @return ApiResponse&lt;OpenAQParametersResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQParametersResult> parametersGetv1V1ParametersGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy) throws ApiException {
        okhttp3.Call localVarCall = parametersGetv1V1ParametersGetValidateBeforeCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQParametersResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Parameters Getv1 (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param sourceName  (optional)
     * @param sourceId  (optional)
     * @param sourceSlug  (optional)
     * @param orderBy  (optional, default to id)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call parametersGetv1V1ParametersGetAsync(Integer limit, Integer page, Integer offset, Sort sort, List<String> sourceName, List<Integer> sourceId, List<String> sourceSlug, OrderBy orderBy, final ApiCallback<OpenAQParametersResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = parametersGetv1V1ParametersGetValidateBeforeCall(limit, page, offset, sort, sourceName, sourceId, sourceSlug, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQParametersResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sourcesV1GetV1SourcesGet
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param name  (optional)
     * @param orderBy  (optional, default to name)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sourcesV1GetV1SourcesGetCall(Integer limit, Integer page, Integer offset, Sort sort, String name, SourcesV1Order orderBy, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/sources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (orderBy != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_by", orderBy));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sourcesV1GetV1SourcesGetValidateBeforeCall(Integer limit, Integer page, Integer offset, Sort sort, String name, SourcesV1Order orderBy, final ApiCallback _callback) throws ApiException {
        return sourcesV1GetV1SourcesGetCall(limit, page, offset, sort, name, orderBy, _callback);

    }

    /**
     * Sources V1 Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param name  (optional)
     * @param orderBy  (optional, default to name)
     * @return OpenAQResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public OpenAQResult sourcesV1GetV1SourcesGet(Integer limit, Integer page, Integer offset, Sort sort, String name, SourcesV1Order orderBy) throws ApiException {
        ApiResponse<OpenAQResult> localVarResp = sourcesV1GetV1SourcesGetWithHttpInfo(limit, page, offset, sort, name, orderBy);
        return localVarResp.getData();
    }

    /**
     * Sources V1 Get
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param name  (optional)
     * @param orderBy  (optional, default to name)
     * @return ApiResponse&lt;OpenAQResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OpenAQResult> sourcesV1GetV1SourcesGetWithHttpInfo(Integer limit, Integer page, Integer offset, Sort sort, String name, SourcesV1Order orderBy) throws ApiException {
        okhttp3.Call localVarCall = sourcesV1GetV1SourcesGetValidateBeforeCall(limit, page, offset, sort, name, orderBy, null);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sources V1 Get (asynchronously)
     * 
     * @param limit Change the number of results returned. (optional, default to 100)
     * @param page Paginate through results. (optional, default to 1)
     * @param offset  (optional, default to 0)
     * @param sort Define sort order. (optional, default to asc)
     * @param name  (optional)
     * @param orderBy  (optional, default to name)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sourcesV1GetV1SourcesGetAsync(Integer limit, Integer page, Integer offset, Sort sort, String name, SourcesV1Order orderBy, final ApiCallback<OpenAQResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = sourcesV1GetV1SourcesGetValidateBeforeCall(limit, page, offset, sort, name, orderBy, _callback);
        Type localVarReturnType = new TypeToken<OpenAQResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
