/*
 * OpenAQ
 * API for OpenAQ LCS
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ParametersRow
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:23:05.630351-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ParametersRow {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "displayName";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_IS_CORE = "isCore";
  @SerializedName(SERIALIZED_NAME_IS_CORE)
  private Boolean isCore;

  public static final String SERIALIZED_NAME_MAX_COLOR_VALUE = "maxColorValue";
  @SerializedName(SERIALIZED_NAME_MAX_COLOR_VALUE)
  private BigDecimal maxColorValue;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREFERRED_UNIT = "preferredUnit";
  @SerializedName(SERIALIZED_NAME_PREFERRED_UNIT)
  private String preferredUnit;

  public ParametersRow() {
  }

  public ParametersRow description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nonnull
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public ParametersRow displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Get displayName
   * @return displayName
   */
  @javax.annotation.Nonnull
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ParametersRow id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ParametersRow isCore(Boolean isCore) {
    this.isCore = isCore;
    return this;
  }

  /**
   * Get isCore
   * @return isCore
   */
  @javax.annotation.Nullable
  public Boolean getIsCore() {
    return isCore;
  }

  public void setIsCore(Boolean isCore) {
    this.isCore = isCore;
  }


  public ParametersRow maxColorValue(BigDecimal maxColorValue) {
    this.maxColorValue = maxColorValue;
    return this;
  }

  /**
   * Get maxColorValue
   * @return maxColorValue
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxColorValue() {
    return maxColorValue;
  }

  public void setMaxColorValue(BigDecimal maxColorValue) {
    this.maxColorValue = maxColorValue;
  }


  public ParametersRow name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ParametersRow preferredUnit(String preferredUnit) {
    this.preferredUnit = preferredUnit;
    return this;
  }

  /**
   * Get preferredUnit
   * @return preferredUnit
   */
  @javax.annotation.Nonnull
  public String getPreferredUnit() {
    return preferredUnit;
  }

  public void setPreferredUnit(String preferredUnit) {
    this.preferredUnit = preferredUnit;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ParametersRow parametersRow = (ParametersRow) o;
    return Objects.equals(this.description, parametersRow.description) &&
        Objects.equals(this.displayName, parametersRow.displayName) &&
        Objects.equals(this.id, parametersRow.id) &&
        Objects.equals(this.isCore, parametersRow.isCore) &&
        Objects.equals(this.maxColorValue, parametersRow.maxColorValue) &&
        Objects.equals(this.name, parametersRow.name) &&
        Objects.equals(this.preferredUnit, parametersRow.preferredUnit);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, displayName, id, isCore, maxColorValue, name, preferredUnit);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ParametersRow {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isCore: ").append(toIndentedString(isCore)).append("\n");
    sb.append("    maxColorValue: ").append(toIndentedString(maxColorValue)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    preferredUnit: ").append(toIndentedString(preferredUnit)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("displayName");
    openapiFields.add("id");
    openapiFields.add("isCore");
    openapiFields.add("maxColorValue");
    openapiFields.add("name");
    openapiFields.add("preferredUnit");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("description");
    openapiRequiredFields.add("displayName");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("preferredUnit");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ParametersRow
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ParametersRow.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ParametersRow is not found in the empty JSON string", ParametersRow.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ParametersRow.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ParametersRow` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ParametersRow.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("displayName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `displayName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("displayName").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("preferredUnit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredUnit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredUnit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ParametersRow.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ParametersRow' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ParametersRow> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ParametersRow.class));

       return (TypeAdapter<T>) new TypeAdapter<ParametersRow>() {
           @Override
           public void write(JsonWriter out, ParametersRow value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ParametersRow read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ParametersRow given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ParametersRow
   * @throws IOException if the JSON string is invalid with respect to ParametersRow
   */
  public static ParametersRow fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ParametersRow.class);
  }

  /**
   * Convert an instance of ParametersRow to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

