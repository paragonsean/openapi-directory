/*
 * Image-Charts
 * Charts, simple as a URL. A safe and fast replacement for Google Image Charts
 *
 * The version of the OpenAPI document: 6.1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChartApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChartApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChartApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getChart
     * @param cht Chart type (required)
     * @param chl bar, pie slice, doughnut slice and polar slice chart labels (required)
     * @param chd chart data (optional)
     * @param chds data format with custom scaling (optional)
     * @param choe QRCode data encoding (optional)
     * @param chld QRCode error correction level and optional margin (optional, default to L|4)
     * @param chxr Axis data-range (optional)
     * @param chxp axis label positions (optional)
     * @param chof Image output format (optional, default to .png)
     * @param chs Chart size (&lt;width&gt;x&lt;height&gt;) (optional)
     * @param chdl Text for each series, to display in the legend (optional)
     * @param chdls Chart legend text and style (optional, default to 000000)
     * @param chg Solid or dotted grid lines (optional)
     * @param chco series colors (optional, default to F56991,FF9F80,FFC48C,D1F2A5,EFFAB4)
     * @param chtt chart title (optional)
     * @param chts chart title colors and font size (optional)
     * @param chxt Display values on your axis lines or change which axes are shown (optional)
     * @param chxl Custom string axis labels on any axis (optional)
     * @param chxs Font size, color for axis labels, both custom labels and default label values (optional)
     * @param chm compound charts and line fills (optional)
     * @param chls line thickness and solid/dashed style (optional)
     * @param chlps Position and style of labels on data (optional)
     * @param chma chart margins (optional)
     * @param chdlp Position of the legend and order of the legend entries (optional, default to r)
     * @param chf Background Fills (optional, default to bg,s,FFFFFF)
     * @param chbh Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don&#39;t specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width. (optional, default to 10)
     * @param chbr Bar corner radius. Display bars with rounded corner. (optional, default to 0)
     * @param chan gif configuration (optional)
     * @param chli doughnut chart inside label (optional)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icff Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API (optional)
     * @param icfs Default font style for all text (optional)
     * @param iclocale localization (ISO 639-1) (optional)
     * @param icwt (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account (optional, default to false)
     * @param icretina retina mode (optional)
     * @param icqrb Background color for QR Codes (optional, default to FFFFFF)
     * @param icqrf Foreground color for QR Codes (optional, default to 000000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartCall(String cht, String chl, String chd, String chds, String choe, String chld, String chxr, String chxp, String chof, String chs, String chdl, String chdls, String chg, String chco, String chtt, String chts, String chxt, String chxl, String chxs, String chm, String chls, String chlps, String chma, String chdlp, String chf, String chbh, String chbr, String chan, String chli, String icac, String ichm, String icff, String icfs, String iclocale, Boolean icwt, String icretina, String icqrb, String icqrf, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chart";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (cht != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cht", cht));
        }

        if (chd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chd", chd));
        }

        if (chds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chds", chds));
        }

        if (choe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("choe", choe));
        }

        if (chld != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chld", chld));
        }

        if (chxr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chxr", chxr));
        }

        if (chxp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chxp", chxp));
        }

        if (chof != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chof", chof));
        }

        if (chs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chs", chs));
        }

        if (chdl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chdl", chdl));
        }

        if (chdls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chdls", chdls));
        }

        if (chg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chg", chg));
        }

        if (chco != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chco", chco));
        }

        if (chtt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chtt", chtt));
        }

        if (chts != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chts", chts));
        }

        if (chxt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chxt", chxt));
        }

        if (chxl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chxl", chxl));
        }

        if (chxs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chxs", chxs));
        }

        if (chm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chm", chm));
        }

        if (chls != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chls", chls));
        }

        if (chl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chl", chl));
        }

        if (chlps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chlps", chlps));
        }

        if (chma != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chma", chma));
        }

        if (chdlp != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chdlp", chdlp));
        }

        if (chf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chf", chf));
        }

        if (chbh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chbh", chbh));
        }

        if (chbr != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chbr", chbr));
        }

        if (chan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chan", chan));
        }

        if (chli != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chli", chli));
        }

        if (icac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icac", icac));
        }

        if (ichm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ichm", ichm));
        }

        if (icff != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icff", icff));
        }

        if (icfs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icfs", icfs));
        }

        if (iclocale != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("iclocale", iclocale));
        }

        if (icwt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icwt", icwt));
        }

        if (icretina != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icretina", icretina));
        }

        if (icqrb != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icqrb", icqrb));
        }

        if (icqrf != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icqrf", icqrf));
        }

        final String[] localVarAccepts = {
            "application/png",
            "application/gif",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChartValidateBeforeCall(String cht, String chl, String chd, String chds, String choe, String chld, String chxr, String chxp, String chof, String chs, String chdl, String chdls, String chg, String chco, String chtt, String chts, String chxt, String chxl, String chxs, String chm, String chls, String chlps, String chma, String chdlp, String chf, String chbh, String chbr, String chan, String chli, String icac, String ichm, String icff, String icfs, String iclocale, Boolean icwt, String icretina, String icqrb, String icqrf, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'cht' is set
        if (cht == null) {
            throw new ApiException("Missing the required parameter 'cht' when calling getChart(Async)");
        }

        // verify the required parameter 'chl' is set
        if (chl == null) {
            throw new ApiException("Missing the required parameter 'chl' when calling getChart(Async)");
        }

        return getChartCall(cht, chl, chd, chds, choe, chld, chxr, chxp, chof, chs, chdl, chdls, chg, chco, chtt, chts, chxt, chxl, chxs, chm, chls, chlps, chma, chdlp, chf, chbh, chbr, chan, chli, icac, ichm, icff, icfs, iclocale, icwt, icretina, icqrb, icqrf, _callback);

    }

    /**
     * Image-Charts API
     * Image-charts
     * @param cht Chart type (required)
     * @param chl bar, pie slice, doughnut slice and polar slice chart labels (required)
     * @param chd chart data (optional)
     * @param chds data format with custom scaling (optional)
     * @param choe QRCode data encoding (optional)
     * @param chld QRCode error correction level and optional margin (optional, default to L|4)
     * @param chxr Axis data-range (optional)
     * @param chxp axis label positions (optional)
     * @param chof Image output format (optional, default to .png)
     * @param chs Chart size (&lt;width&gt;x&lt;height&gt;) (optional)
     * @param chdl Text for each series, to display in the legend (optional)
     * @param chdls Chart legend text and style (optional, default to 000000)
     * @param chg Solid or dotted grid lines (optional)
     * @param chco series colors (optional, default to F56991,FF9F80,FFC48C,D1F2A5,EFFAB4)
     * @param chtt chart title (optional)
     * @param chts chart title colors and font size (optional)
     * @param chxt Display values on your axis lines or change which axes are shown (optional)
     * @param chxl Custom string axis labels on any axis (optional)
     * @param chxs Font size, color for axis labels, both custom labels and default label values (optional)
     * @param chm compound charts and line fills (optional)
     * @param chls line thickness and solid/dashed style (optional)
     * @param chlps Position and style of labels on data (optional)
     * @param chma chart margins (optional)
     * @param chdlp Position of the legend and order of the legend entries (optional, default to r)
     * @param chf Background Fills (optional, default to bg,s,FFFFFF)
     * @param chbh Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don&#39;t specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width. (optional, default to 10)
     * @param chbr Bar corner radius. Display bars with rounded corner. (optional, default to 0)
     * @param chan gif configuration (optional)
     * @param chli doughnut chart inside label (optional)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icff Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API (optional)
     * @param icfs Default font style for all text (optional)
     * @param iclocale localization (ISO 639-1) (optional)
     * @param icwt (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account (optional, default to false)
     * @param icretina retina mode (optional)
     * @param icqrb Background color for QR Codes (optional, default to FFFFFF)
     * @param icqrf Foreground color for QR Codes (optional, default to 000000)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public String getChart(String cht, String chl, String chd, String chds, String choe, String chld, String chxr, String chxp, String chof, String chs, String chdl, String chdls, String chg, String chco, String chtt, String chts, String chxt, String chxl, String chxs, String chm, String chls, String chlps, String chma, String chdlp, String chf, String chbh, String chbr, String chan, String chli, String icac, String ichm, String icff, String icfs, String iclocale, Boolean icwt, String icretina, String icqrb, String icqrf) throws ApiException {
        ApiResponse<String> localVarResp = getChartWithHttpInfo(cht, chl, chd, chds, choe, chld, chxr, chxp, chof, chs, chdl, chdls, chg, chco, chtt, chts, chxt, chxl, chxs, chm, chls, chlps, chma, chdlp, chf, chbh, chbr, chan, chli, icac, ichm, icff, icfs, iclocale, icwt, icretina, icqrb, icqrf);
        return localVarResp.getData();
    }

    /**
     * Image-Charts API
     * Image-charts
     * @param cht Chart type (required)
     * @param chl bar, pie slice, doughnut slice and polar slice chart labels (required)
     * @param chd chart data (optional)
     * @param chds data format with custom scaling (optional)
     * @param choe QRCode data encoding (optional)
     * @param chld QRCode error correction level and optional margin (optional, default to L|4)
     * @param chxr Axis data-range (optional)
     * @param chxp axis label positions (optional)
     * @param chof Image output format (optional, default to .png)
     * @param chs Chart size (&lt;width&gt;x&lt;height&gt;) (optional)
     * @param chdl Text for each series, to display in the legend (optional)
     * @param chdls Chart legend text and style (optional, default to 000000)
     * @param chg Solid or dotted grid lines (optional)
     * @param chco series colors (optional, default to F56991,FF9F80,FFC48C,D1F2A5,EFFAB4)
     * @param chtt chart title (optional)
     * @param chts chart title colors and font size (optional)
     * @param chxt Display values on your axis lines or change which axes are shown (optional)
     * @param chxl Custom string axis labels on any axis (optional)
     * @param chxs Font size, color for axis labels, both custom labels and default label values (optional)
     * @param chm compound charts and line fills (optional)
     * @param chls line thickness and solid/dashed style (optional)
     * @param chlps Position and style of labels on data (optional)
     * @param chma chart margins (optional)
     * @param chdlp Position of the legend and order of the legend entries (optional, default to r)
     * @param chf Background Fills (optional, default to bg,s,FFFFFF)
     * @param chbh Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don&#39;t specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width. (optional, default to 10)
     * @param chbr Bar corner radius. Display bars with rounded corner. (optional, default to 0)
     * @param chan gif configuration (optional)
     * @param chli doughnut chart inside label (optional)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icff Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API (optional)
     * @param icfs Default font style for all text (optional)
     * @param iclocale localization (ISO 639-1) (optional)
     * @param icwt (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account (optional, default to false)
     * @param icretina retina mode (optional)
     * @param icqrb Background color for QR Codes (optional, default to FFFFFF)
     * @param icqrf Foreground color for QR Codes (optional, default to 000000)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getChartWithHttpInfo(String cht, String chl, String chd, String chds, String choe, String chld, String chxr, String chxp, String chof, String chs, String chdl, String chdls, String chg, String chco, String chtt, String chts, String chxt, String chxl, String chxs, String chm, String chls, String chlps, String chma, String chdlp, String chf, String chbh, String chbr, String chan, String chli, String icac, String ichm, String icff, String icfs, String iclocale, Boolean icwt, String icretina, String icqrb, String icqrf) throws ApiException {
        okhttp3.Call localVarCall = getChartValidateBeforeCall(cht, chl, chd, chds, choe, chld, chxr, chxp, chof, chs, chdl, chdls, chg, chco, chtt, chts, chxt, chxl, chxs, chm, chls, chlps, chma, chdlp, chf, chbh, chbr, chan, chli, icac, ichm, icff, icfs, iclocale, icwt, icretina, icqrb, icqrf, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Image-Charts API (asynchronously)
     * Image-charts
     * @param cht Chart type (required)
     * @param chl bar, pie slice, doughnut slice and polar slice chart labels (required)
     * @param chd chart data (optional)
     * @param chds data format with custom scaling (optional)
     * @param choe QRCode data encoding (optional)
     * @param chld QRCode error correction level and optional margin (optional, default to L|4)
     * @param chxr Axis data-range (optional)
     * @param chxp axis label positions (optional)
     * @param chof Image output format (optional, default to .png)
     * @param chs Chart size (&lt;width&gt;x&lt;height&gt;) (optional)
     * @param chdl Text for each series, to display in the legend (optional)
     * @param chdls Chart legend text and style (optional, default to 000000)
     * @param chg Solid or dotted grid lines (optional)
     * @param chco series colors (optional, default to F56991,FF9F80,FFC48C,D1F2A5,EFFAB4)
     * @param chtt chart title (optional)
     * @param chts chart title colors and font size (optional)
     * @param chxt Display values on your axis lines or change which axes are shown (optional)
     * @param chxl Custom string axis labels on any axis (optional)
     * @param chxs Font size, color for axis labels, both custom labels and default label values (optional)
     * @param chm compound charts and line fills (optional)
     * @param chls line thickness and solid/dashed style (optional)
     * @param chlps Position and style of labels on data (optional)
     * @param chma chart margins (optional)
     * @param chdlp Position of the legend and order of the legend entries (optional, default to r)
     * @param chf Background Fills (optional, default to bg,s,FFFFFF)
     * @param chbh Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don&#39;t specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width. (optional, default to 10)
     * @param chbr Bar corner radius. Display bars with rounded corner. (optional, default to 0)
     * @param chan gif configuration (optional)
     * @param chli doughnut chart inside label (optional)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icff Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API (optional)
     * @param icfs Default font style for all text (optional)
     * @param iclocale localization (ISO 639-1) (optional)
     * @param icwt (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account (optional, default to false)
     * @param icretina retina mode (optional)
     * @param icqrb Background color for QR Codes (optional, default to FFFFFF)
     * @param icqrf Foreground color for QR Codes (optional, default to 000000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartAsync(String cht, String chl, String chd, String chds, String choe, String chld, String chxr, String chxp, String chof, String chs, String chdl, String chdls, String chg, String chco, String chtt, String chts, String chxt, String chxl, String chxs, String chm, String chls, String chlps, String chma, String chdlp, String chf, String chbh, String chbr, String chan, String chli, String icac, String ichm, String icff, String icfs, String iclocale, Boolean icwt, String icretina, String icqrb, String icqrf, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChartValidateBeforeCall(cht, chl, chd, chds, choe, chld, chxr, chxp, chof, chs, chdl, chdls, chg, chco, chtt, chts, chxt, chxl, chxs, chm, chls, chlps, chma, chdlp, chf, chbh, chbr, chan, chli, icac, ichm, icff, icfs, iclocale, icwt, icretina, icqrb, icqrf, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
