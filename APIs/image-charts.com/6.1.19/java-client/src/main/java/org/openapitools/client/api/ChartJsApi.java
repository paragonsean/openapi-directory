/*
 * Image-Charts
 * Charts, simple as a URL. A safe and fast replacement for Google Image Charts
 *
 * The version of the OpenAPI document: 6.1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ChartJsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ChartJsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ChartJsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getChartjs280
     * @param c Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param chart Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param width Width of the chart (optional, default to 500)
     * @param height Height of the chart (optional, default to 300)
     * @param backgroundColor Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param bkg Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param encoding Encoding of your \&quot;chart\&quot; parameter. Accepted values are url and base64. (optional, default to url)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icretina retina mode (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartjs280Call(String c, String chart, Integer width, Integer height, String backgroundColor, String bkg, String encoding, String icac, String ichm, String icretina, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/chart.js/2.8.0";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (c != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("c", c));
        }

        if (chart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("chart", chart));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (backgroundColor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("backgroundColor", backgroundColor));
        }

        if (bkg != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bkg", bkg));
        }

        if (encoding != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("encoding", encoding));
        }

        if (icac != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icac", icac));
        }

        if (ichm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ichm", ichm));
        }

        if (icretina != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("icretina", icretina));
        }

        final String[] localVarAccepts = {
            "application/png",
            "application/gif",
            "image/svg+xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getChartjs280ValidateBeforeCall(String c, String chart, Integer width, Integer height, String backgroundColor, String bkg, String encoding, String icac, String ichm, String icretina, final ApiCallback _callback) throws ApiException {
        return getChartjs280Call(c, chart, width, height, backgroundColor, bkg, encoding, icac, ichm, icretina, _callback);

    }

    /**
     * Chart.js as image API
     * Image-charts
     * @param c Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param chart Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param width Width of the chart (optional, default to 500)
     * @param height Height of the chart (optional, default to 300)
     * @param backgroundColor Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param bkg Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param encoding Encoding of your \&quot;chart\&quot; parameter. Accepted values are url and base64. (optional, default to url)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icretina retina mode (optional)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public String getChartjs280(String c, String chart, Integer width, Integer height, String backgroundColor, String bkg, String encoding, String icac, String ichm, String icretina) throws ApiException {
        ApiResponse<String> localVarResp = getChartjs280WithHttpInfo(c, chart, width, height, backgroundColor, bkg, encoding, icac, ichm, icretina);
        return localVarResp.getData();
    }

    /**
     * Chart.js as image API
     * Image-charts
     * @param c Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param chart Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param width Width of the chart (optional, default to 500)
     * @param height Height of the chart (optional, default to 300)
     * @param backgroundColor Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param bkg Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param encoding Encoding of your \&quot;chart\&quot; parameter. Accepted values are url and base64. (optional, default to url)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icretina retina mode (optional)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<String> getChartjs280WithHttpInfo(String c, String chart, Integer width, Integer height, String backgroundColor, String bkg, String encoding, String icac, String ichm, String icretina) throws ApiException {
        okhttp3.Call localVarCall = getChartjs280ValidateBeforeCall(c, chart, width, height, backgroundColor, bkg, encoding, icac, ichm, icretina, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Chart.js as image API (asynchronously)
     * Image-charts
     * @param c Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param chart Javascript/JSON definition of the chart. Use a Chart.js configuration object. (optional)
     * @param width Width of the chart (optional, default to 500)
     * @param height Height of the chart (optional, default to 300)
     * @param backgroundColor Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param bkg Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \&quot;bkg\&quot; (optional)
     * @param encoding Encoding of your \&quot;chart\&quot; parameter. Accepted values are url and base64. (optional, default to url)
     * @param icac image-charts enterprise &#x60;account_id&#x60; (optional)
     * @param ichm HMAC-SHA256 signature required to activate paid features (optional)
     * @param icretina retina mode (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 0 </td><td> Successful </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getChartjs280Async(String c, String chart, Integer width, Integer height, String backgroundColor, String bkg, String encoding, String icac, String ichm, String icretina, final ApiCallback<String> _callback) throws ApiException {

        okhttp3.Call localVarCall = getChartjs280ValidateBeforeCall(c, chart, width, height, backgroundColor, bkg, encoding, icac, ichm, icretina, _callback);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
