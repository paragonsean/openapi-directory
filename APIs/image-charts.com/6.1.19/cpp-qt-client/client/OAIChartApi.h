/**
 * Image-Charts
 * Charts, simple as a URL. A safe and fast replacement for Google Image Charts
 *
 * The version of the OpenAPI document: 6.1.19
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIChartApi_H
#define OAI_OAIChartApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIChartApi : public QObject {
    Q_OBJECT

public:
    OAIChartApi(const int timeOut = 0);
    ~OAIChartApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  cht QString [required]
    * @param[in]  chl QString [required]
    * @param[in]  chd QString [optional]
    * @param[in]  chds QString [optional]
    * @param[in]  choe QString [optional]
    * @param[in]  chld QString [optional]
    * @param[in]  chxr QString [optional]
    * @param[in]  chxp QString [optional]
    * @param[in]  chof QString [optional]
    * @param[in]  chs QString [optional]
    * @param[in]  chdl QString [optional]
    * @param[in]  chdls QString [optional]
    * @param[in]  chg QString [optional]
    * @param[in]  chco QString [optional]
    * @param[in]  chtt QString [optional]
    * @param[in]  chts QString [optional]
    * @param[in]  chxt QString [optional]
    * @param[in]  chxl QString [optional]
    * @param[in]  chxs QString [optional]
    * @param[in]  chm QString [optional]
    * @param[in]  chls QString [optional]
    * @param[in]  chlps QString [optional]
    * @param[in]  chma QString [optional]
    * @param[in]  chdlp QString [optional]
    * @param[in]  chf QString [optional]
    * @param[in]  chbh QString [optional]
    * @param[in]  chbr QString [optional]
    * @param[in]  chan QString [optional]
    * @param[in]  chli QString [optional]
    * @param[in]  icac QString [optional]
    * @param[in]  ichm QString [optional]
    * @param[in]  icff QString [optional]
    * @param[in]  icfs QString [optional]
    * @param[in]  iclocale QString [optional]
    * @param[in]  icwt bool [optional]
    * @param[in]  icretina QString [optional]
    * @param[in]  icqrb QString [optional]
    * @param[in]  icqrf QString [optional]
    */
    virtual void getChart(const QString &cht, const QString &chl, const ::OpenAPI::OptionalParam<QString> &chd = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chds = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &choe = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chld = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chxr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chxp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chof = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chdl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chdls = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chg = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chco = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chtt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chts = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chxt = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chxl = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chxs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chls = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chlps = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chma = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chdlp = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chf = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chbh = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chbr = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chan = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &chli = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icac = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ichm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icff = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icfs = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &iclocale = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &icwt = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &icretina = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icqrb = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &icqrf = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getChartCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getChartSignal(QString summary);


    void getChartSignalFull(OAIHttpRequestWorker *worker, QString summary);

    Q_DECL_DEPRECATED_X("Use getChartSignalError() instead")
    void getChartSignalE(QString summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getChartSignalError(QString summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getChartSignalErrorFull() instead")
    void getChartSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getChartSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
