/**
 * Image-Charts
 * Charts, simple as a URL. A safe and fast replacement for Google Image Charts
 *
 * The version of the OpenAPI document: 6.1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Chart service.
* @module api/ChartApi
* @version 6.1.19
*/
export default class ChartApi {

    /**
    * Constructs a new ChartApi. 
    * @alias module:api/ChartApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChart operation.
     * @callback module:api/ChartApi~getChartCallback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Image-Charts API
     * Image-charts
     * @param {module:model/String} cht Chart type
     * @param {String} chl bar, pie slice, doughnut slice and polar slice chart labels
     * @param {Object} opts Optional parameters
     * @param {String} [chd] chart data
     * @param {String} [chds] data format with custom scaling
     * @param {module:model/String} [choe] QRCode data encoding
     * @param {String} [chld = 'L|4')] QRCode error correction level and optional margin
     * @param {String} [chxr] Axis data-range
     * @param {String} [chxp] axis label positions
     * @param {String} [chof = '.png')] Image output format
     * @param {String} [chs] Chart size (<width>x<height>)
     * @param {String} [chdl] Text for each series, to display in the legend
     * @param {String} [chdls = '000000')] Chart legend text and style
     * @param {String} [chg] Solid or dotted grid lines
     * @param {String} [chco = 'F56991,FF9F80,FFC48C,D1F2A5,EFFAB4')] series colors
     * @param {String} [chtt] chart title
     * @param {String} [chts] chart title colors and font size
     * @param {String} [chxt] Display values on your axis lines or change which axes are shown
     * @param {String} [chxl] Custom string axis labels on any axis
     * @param {String} [chxs] Font size, color for axis labels, both custom labels and default label values
     * @param {String} [chm] compound charts and line fills
     * @param {String} [chls] line thickness and solid/dashed style
     * @param {String} [chlps] Position and style of labels on data
     * @param {String} [chma] chart margins
     * @param {String} [chdlp = 'r')] Position of the legend and order of the legend entries
     * @param {String} [chf = 'bg,s,FFFFFF')] Background Fills
     * @param {String} [chbh = '10')] Bar Width and Spacing. (not supported)  You can optionally specify custom values for bar widths and spacing between bars and groups. You can only specify one set of width values for all bars. If you don't specify chbh, all bars will be 23 pixels wide, which means that the end bars can be clipped if the total bar + space width is wider than the chart width.
     * @param {String} [chbr = '0')] Bar corner radius. Display bars with rounded corner.
     * @param {String} [chan] gif configuration
     * @param {String} [chli] doughnut chart inside label
     * @param {String} [icac] image-charts enterprise `account_id`
     * @param {String} [ichm] HMAC-SHA256 signature required to activate paid features
     * @param {module:model/String} [icff] Default font family for all text from Google Fonts. Use same syntax as Google Font CSS API
     * @param {module:model/String} [icfs] Default font style for all text
     * @param {module:model/String} [iclocale] localization (ISO 639-1)
     * @param {Boolean} [icwt = false)] (Private) Force to display the watermark EVEN IF the chart was signed with an enterprise account
     * @param {module:model/String} [icretina] retina mode
     * @param {String} [icqrb = 'FFFFFF')] Background color for QR Codes
     * @param {String} [icqrf = '000000')] Foreground color for QR Codes
     * @param {module:api/ChartApi~getChartCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getChart(cht, chl, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'cht' is set
      if (cht === undefined || cht === null) {
        throw new Error("Missing the required parameter 'cht' when calling getChart");
      }
      // verify the required parameter 'chl' is set
      if (chl === undefined || chl === null) {
        throw new Error("Missing the required parameter 'chl' when calling getChart");
      }

      let pathParams = {
      };
      let queryParams = {
        'cht': cht,
        'chd': opts['chd'],
        'chds': opts['chds'],
        'choe': opts['choe'],
        'chld': opts['chld'],
        'chxr': opts['chxr'],
        'chxp': opts['chxp'],
        'chof': opts['chof'],
        'chs': opts['chs'],
        'chdl': opts['chdl'],
        'chdls': opts['chdls'],
        'chg': opts['chg'],
        'chco': opts['chco'],
        'chtt': opts['chtt'],
        'chts': opts['chts'],
        'chxt': opts['chxt'],
        'chxl': opts['chxl'],
        'chxs': opts['chxs'],
        'chm': opts['chm'],
        'chls': opts['chls'],
        'chl': chl,
        'chlps': opts['chlps'],
        'chma': opts['chma'],
        'chdlp': opts['chdlp'],
        'chf': opts['chf'],
        'chbh': opts['chbh'],
        'chbr': opts['chbr'],
        'chan': opts['chan'],
        'chli': opts['chli'],
        'icac': opts['icac'],
        'ichm': opts['ichm'],
        'icff': opts['icff'],
        'icfs': opts['icfs'],
        'iclocale': opts['iclocale'],
        'icwt': opts['icwt'],
        'icretina': opts['icretina'],
        'icqrb': opts['icqrb'],
        'icqrf': opts['icqrf']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/png', 'application/gif', 'image/svg+xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/chart', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
