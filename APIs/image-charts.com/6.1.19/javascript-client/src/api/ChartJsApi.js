/**
 * Image-Charts
 * Charts, simple as a URL. A safe and fast replacement for Google Image Charts
 *
 * The version of the OpenAPI document: 6.1.19
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ChartJs service.
* @module api/ChartJsApi
* @version 6.1.19
*/
export default class ChartJsApi {

    /**
    * Constructs a new ChartJsApi. 
    * @alias module:api/ChartJsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getChartjs280 operation.
     * @callback module:api/ChartJsApi~getChartjs280Callback
     * @param {String} error Error message, if any.
     * @param {String} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Chart.js as image API
     * Image-charts
     * @param {Object} opts Optional parameters
     * @param {String} [c] Javascript/JSON definition of the chart. Use a Chart.js configuration object.
     * @param {String} [chart] Javascript/JSON definition of the chart. Use a Chart.js configuration object.
     * @param {Number} [width = 500)] Width of the chart
     * @param {Number} [height = 300)] Height of the chart
     * @param {String} [backgroundColor] Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
     * @param {String} [bkg] Background of the chart canvas. Accepts rgb (rgb(255,255,120)), colors (red), and url-encoded hex values (%23ff00ff). Abbreviated as \"bkg\"
     * @param {module:model/String} [encoding = 'url')] Encoding of your \"chart\" parameter. Accepted values are url and base64.
     * @param {String} [icac] image-charts enterprise `account_id`
     * @param {String} [ichm] HMAC-SHA256 signature required to activate paid features
     * @param {module:model/String} [icretina] retina mode
     * @param {module:api/ChartJsApi~getChartjs280Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link String}
     */
    getChartjs280(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'c': opts['c'],
        'chart': opts['chart'],
        'width': opts['width'],
        'height': opts['height'],
        'backgroundColor': opts['backgroundColor'],
        'bkg': opts['bkg'],
        'encoding': opts['encoding'],
        'icac': opts['icac'],
        'ichm': opts['ichm'],
        'icretina': opts['icretina']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/png', 'application/gif', 'image/svg+xml'];
      let returnType = 'String';
      return this.apiClient.callApi(
        '/chart.js/2.8.0', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
