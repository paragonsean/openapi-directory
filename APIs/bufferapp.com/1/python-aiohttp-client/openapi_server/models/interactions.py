# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.interactions_interactions_inner import InteractionsInteractionsInner
from openapi_server import util


class Interactions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interactions: List[InteractionsInteractionsInner]=None, total: float=None):
        """Interactions - a model defined in OpenAPI

        :param interactions: The interactions of this Interactions.
        :param total: The total of this Interactions.
        """
        self.openapi_types = {
            'interactions': List[InteractionsInteractionsInner],
            'total': float
        }

        self.attribute_map = {
            'interactions': 'interactions',
            'total': 'total'
        }

        self._interactions = interactions
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Interactions':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The interactions of this Interactions.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interactions(self):
        """Gets the interactions of this Interactions.


        :return: The interactions of this Interactions.
        :rtype: List[InteractionsInteractionsInner]
        """
        return self._interactions

    @interactions.setter
    def interactions(self, interactions):
        """Sets the interactions of this Interactions.


        :param interactions: The interactions of this Interactions.
        :type interactions: List[InteractionsInteractionsInner]
        """

        self._interactions = interactions

    @property
    def total(self):
        """Gets the total of this Interactions.


        :return: The total of this Interactions.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this Interactions.


        :param total: The total of this Interactions.
        :type total: float
        """

        self._total = total
