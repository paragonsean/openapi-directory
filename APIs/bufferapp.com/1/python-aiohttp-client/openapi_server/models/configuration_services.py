# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.configuration_services_appdotnet import ConfigurationServicesAppdotnet
from openapi_server.models.configuration_services_facebook import ConfigurationServicesFacebook
from openapi_server.models.configuration_services_google import ConfigurationServicesGoogle
from openapi_server.models.configuration_services_twitter import ConfigurationServicesTwitter
from openapi_server import util


class ConfigurationServices(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appdotnet: ConfigurationServicesAppdotnet=None, facebook: ConfigurationServicesFacebook=None, google: ConfigurationServicesGoogle=None, linkedin: ConfigurationServicesFacebook=None, twitter: ConfigurationServicesTwitter=None):
        """ConfigurationServices - a model defined in OpenAPI

        :param appdotnet: The appdotnet of this ConfigurationServices.
        :param facebook: The facebook of this ConfigurationServices.
        :param google: The google of this ConfigurationServices.
        :param linkedin: The linkedin of this ConfigurationServices.
        :param twitter: The twitter of this ConfigurationServices.
        """
        self.openapi_types = {
            'appdotnet': ConfigurationServicesAppdotnet,
            'facebook': ConfigurationServicesFacebook,
            'google': ConfigurationServicesGoogle,
            'linkedin': ConfigurationServicesFacebook,
            'twitter': ConfigurationServicesTwitter
        }

        self.attribute_map = {
            'appdotnet': 'appdotnet',
            'facebook': 'facebook',
            'google': 'google',
            'linkedin': 'linkedin',
            'twitter': 'twitter'
        }

        self._appdotnet = appdotnet
        self._facebook = facebook
        self._google = google
        self._linkedin = linkedin
        self._twitter = twitter

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ConfigurationServices':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The configuration_services of this ConfigurationServices.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appdotnet(self):
        """Gets the appdotnet of this ConfigurationServices.


        :return: The appdotnet of this ConfigurationServices.
        :rtype: ConfigurationServicesAppdotnet
        """
        return self._appdotnet

    @appdotnet.setter
    def appdotnet(self, appdotnet):
        """Sets the appdotnet of this ConfigurationServices.


        :param appdotnet: The appdotnet of this ConfigurationServices.
        :type appdotnet: ConfigurationServicesAppdotnet
        """

        self._appdotnet = appdotnet

    @property
    def facebook(self):
        """Gets the facebook of this ConfigurationServices.


        :return: The facebook of this ConfigurationServices.
        :rtype: ConfigurationServicesFacebook
        """
        return self._facebook

    @facebook.setter
    def facebook(self, facebook):
        """Sets the facebook of this ConfigurationServices.


        :param facebook: The facebook of this ConfigurationServices.
        :type facebook: ConfigurationServicesFacebook
        """

        self._facebook = facebook

    @property
    def google(self):
        """Gets the google of this ConfigurationServices.


        :return: The google of this ConfigurationServices.
        :rtype: ConfigurationServicesGoogle
        """
        return self._google

    @google.setter
    def google(self, google):
        """Sets the google of this ConfigurationServices.


        :param google: The google of this ConfigurationServices.
        :type google: ConfigurationServicesGoogle
        """

        self._google = google

    @property
    def linkedin(self):
        """Gets the linkedin of this ConfigurationServices.


        :return: The linkedin of this ConfigurationServices.
        :rtype: ConfigurationServicesFacebook
        """
        return self._linkedin

    @linkedin.setter
    def linkedin(self, linkedin):
        """Sets the linkedin of this ConfigurationServices.


        :param linkedin: The linkedin of this ConfigurationServices.
        :type linkedin: ConfigurationServicesFacebook
        """

        self._linkedin = linkedin

    @property
    def twitter(self):
        """Gets the twitter of this ConfigurationServices.


        :return: The twitter of this ConfigurationServices.
        :rtype: ConfigurationServicesTwitter
        """
        return self._twitter

    @twitter.setter
    def twitter(self, twitter):
        """Sets the twitter of this ConfigurationServices.


        :param twitter: The twitter of this ConfigurationServices.
        :type twitter: ConfigurationServicesTwitter
        """

        self._twitter = twitter
