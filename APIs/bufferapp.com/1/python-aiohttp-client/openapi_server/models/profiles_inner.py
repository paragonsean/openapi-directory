# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.profiles_inner_counts import ProfilesInnerCounts
from openapi_server.models.profiles_inner_schedules_inner import ProfilesInnerSchedulesInner
from openapi_server.models.profiles_inner_shortener import ProfilesInnerShortener
from openapi_server.models.profiles_inner_statistics import ProfilesInnerStatistics
from openapi_server import util


class ProfilesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, avatar: str=None, avatar_https: str=None, counts: ProfilesInnerCounts=None, cover_photo: str=None, default: bool=None, disabled_features: List[object]=None, disconnected: str=None, formatted_service: str=None, formatted_username: str=None, has_used_suggestions: bool=None, id: str=None, schedules: List[ProfilesInnerSchedulesInner]=None, service: str=None, service_id: str=None, service_type: str=None, service_username: str=None, shortener: ProfilesInnerShortener=None, statistics: ProfilesInnerStatistics=None, timezone: str=None, user_id: str=None, utm_tracking: str=None, verb: str=None):
        """ProfilesInner - a model defined in OpenAPI

        :param id: The id of this ProfilesInner.
        :param avatar: The avatar of this ProfilesInner.
        :param avatar_https: The avatar_https of this ProfilesInner.
        :param counts: The counts of this ProfilesInner.
        :param cover_photo: The cover_photo of this ProfilesInner.
        :param default: The default of this ProfilesInner.
        :param disabled_features: The disabled_features of this ProfilesInner.
        :param disconnected: The disconnected of this ProfilesInner.
        :param formatted_service: The formatted_service of this ProfilesInner.
        :param formatted_username: The formatted_username of this ProfilesInner.
        :param has_used_suggestions: The has_used_suggestions of this ProfilesInner.
        :param id: The id of this ProfilesInner.
        :param schedules: The schedules of this ProfilesInner.
        :param service: The service of this ProfilesInner.
        :param service_id: The service_id of this ProfilesInner.
        :param service_type: The service_type of this ProfilesInner.
        :param service_username: The service_username of this ProfilesInner.
        :param shortener: The shortener of this ProfilesInner.
        :param statistics: The statistics of this ProfilesInner.
        :param timezone: The timezone of this ProfilesInner.
        :param user_id: The user_id of this ProfilesInner.
        :param utm_tracking: The utm_tracking of this ProfilesInner.
        :param verb: The verb of this ProfilesInner.
        """
        self.openapi_types = {
            'id': str,
            'avatar': str,
            'avatar_https': str,
            'counts': ProfilesInnerCounts,
            'cover_photo': str,
            'default': bool,
            'disabled_features': List[object],
            'disconnected': str,
            'formatted_service': str,
            'formatted_username': str,
            'has_used_suggestions': bool,
            'id': str,
            'schedules': List[ProfilesInnerSchedulesInner],
            'service': str,
            'service_id': str,
            'service_type': str,
            'service_username': str,
            'shortener': ProfilesInnerShortener,
            'statistics': ProfilesInnerStatistics,
            'timezone': str,
            'user_id': str,
            'utm_tracking': str,
            'verb': str
        }

        self.attribute_map = {
            'id': '_id',
            'avatar': 'avatar',
            'avatar_https': 'avatar_https',
            'counts': 'counts',
            'cover_photo': 'cover_photo',
            'default': 'default',
            'disabled_features': 'disabled_features',
            'disconnected': 'disconnected',
            'formatted_service': 'formatted_service',
            'formatted_username': 'formatted_username',
            'has_used_suggestions': 'has_used_suggestions',
            'id': 'id',
            'schedules': 'schedules',
            'service': 'service',
            'service_id': 'service_id',
            'service_type': 'service_type',
            'service_username': 'service_username',
            'shortener': 'shortener',
            'statistics': 'statistics',
            'timezone': 'timezone',
            'user_id': 'user_id',
            'utm_tracking': 'utm_tracking',
            'verb': 'verb'
        }

        self._id = id
        self._avatar = avatar
        self._avatar_https = avatar_https
        self._counts = counts
        self._cover_photo = cover_photo
        self._default = default
        self._disabled_features = disabled_features
        self._disconnected = disconnected
        self._formatted_service = formatted_service
        self._formatted_username = formatted_username
        self._has_used_suggestions = has_used_suggestions
        self._id = id
        self._schedules = schedules
        self._service = service
        self._service_id = service_id
        self._service_type = service_type
        self._service_username = service_username
        self._shortener = shortener
        self._statistics = statistics
        self._timezone = timezone
        self._user_id = user_id
        self._utm_tracking = utm_tracking
        self._verb = verb

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ProfilesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The profiles_inner of this ProfilesInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this ProfilesInner.


        :return: The id of this ProfilesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProfilesInner.


        :param id: The id of this ProfilesInner.
        :type id: str
        """

        self._id = id

    @property
    def avatar(self):
        """Gets the avatar of this ProfilesInner.


        :return: The avatar of this ProfilesInner.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this ProfilesInner.


        :param avatar: The avatar of this ProfilesInner.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def avatar_https(self):
        """Gets the avatar_https of this ProfilesInner.


        :return: The avatar_https of this ProfilesInner.
        :rtype: str
        """
        return self._avatar_https

    @avatar_https.setter
    def avatar_https(self, avatar_https):
        """Sets the avatar_https of this ProfilesInner.


        :param avatar_https: The avatar_https of this ProfilesInner.
        :type avatar_https: str
        """

        self._avatar_https = avatar_https

    @property
    def counts(self):
        """Gets the counts of this ProfilesInner.


        :return: The counts of this ProfilesInner.
        :rtype: ProfilesInnerCounts
        """
        return self._counts

    @counts.setter
    def counts(self, counts):
        """Sets the counts of this ProfilesInner.


        :param counts: The counts of this ProfilesInner.
        :type counts: ProfilesInnerCounts
        """

        self._counts = counts

    @property
    def cover_photo(self):
        """Gets the cover_photo of this ProfilesInner.


        :return: The cover_photo of this ProfilesInner.
        :rtype: str
        """
        return self._cover_photo

    @cover_photo.setter
    def cover_photo(self, cover_photo):
        """Sets the cover_photo of this ProfilesInner.


        :param cover_photo: The cover_photo of this ProfilesInner.
        :type cover_photo: str
        """

        self._cover_photo = cover_photo

    @property
    def default(self):
        """Gets the default of this ProfilesInner.


        :return: The default of this ProfilesInner.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this ProfilesInner.


        :param default: The default of this ProfilesInner.
        :type default: bool
        """

        self._default = default

    @property
    def disabled_features(self):
        """Gets the disabled_features of this ProfilesInner.


        :return: The disabled_features of this ProfilesInner.
        :rtype: List[object]
        """
        return self._disabled_features

    @disabled_features.setter
    def disabled_features(self, disabled_features):
        """Sets the disabled_features of this ProfilesInner.


        :param disabled_features: The disabled_features of this ProfilesInner.
        :type disabled_features: List[object]
        """

        self._disabled_features = disabled_features

    @property
    def disconnected(self):
        """Gets the disconnected of this ProfilesInner.


        :return: The disconnected of this ProfilesInner.
        :rtype: str
        """
        return self._disconnected

    @disconnected.setter
    def disconnected(self, disconnected):
        """Sets the disconnected of this ProfilesInner.


        :param disconnected: The disconnected of this ProfilesInner.
        :type disconnected: str
        """

        self._disconnected = disconnected

    @property
    def formatted_service(self):
        """Gets the formatted_service of this ProfilesInner.


        :return: The formatted_service of this ProfilesInner.
        :rtype: str
        """
        return self._formatted_service

    @formatted_service.setter
    def formatted_service(self, formatted_service):
        """Sets the formatted_service of this ProfilesInner.


        :param formatted_service: The formatted_service of this ProfilesInner.
        :type formatted_service: str
        """

        self._formatted_service = formatted_service

    @property
    def formatted_username(self):
        """Gets the formatted_username of this ProfilesInner.


        :return: The formatted_username of this ProfilesInner.
        :rtype: str
        """
        return self._formatted_username

    @formatted_username.setter
    def formatted_username(self, formatted_username):
        """Sets the formatted_username of this ProfilesInner.


        :param formatted_username: The formatted_username of this ProfilesInner.
        :type formatted_username: str
        """

        self._formatted_username = formatted_username

    @property
    def has_used_suggestions(self):
        """Gets the has_used_suggestions of this ProfilesInner.


        :return: The has_used_suggestions of this ProfilesInner.
        :rtype: bool
        """
        return self._has_used_suggestions

    @has_used_suggestions.setter
    def has_used_suggestions(self, has_used_suggestions):
        """Sets the has_used_suggestions of this ProfilesInner.


        :param has_used_suggestions: The has_used_suggestions of this ProfilesInner.
        :type has_used_suggestions: bool
        """

        self._has_used_suggestions = has_used_suggestions

    @property
    def id(self):
        """Gets the id of this ProfilesInner.


        :return: The id of this ProfilesInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ProfilesInner.


        :param id: The id of this ProfilesInner.
        :type id: str
        """

        self._id = id

    @property
    def schedules(self):
        """Gets the schedules of this ProfilesInner.


        :return: The schedules of this ProfilesInner.
        :rtype: List[ProfilesInnerSchedulesInner]
        """
        return self._schedules

    @schedules.setter
    def schedules(self, schedules):
        """Sets the schedules of this ProfilesInner.


        :param schedules: The schedules of this ProfilesInner.
        :type schedules: List[ProfilesInnerSchedulesInner]
        """

        self._schedules = schedules

    @property
    def service(self):
        """Gets the service of this ProfilesInner.


        :return: The service of this ProfilesInner.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service):
        """Sets the service of this ProfilesInner.


        :param service: The service of this ProfilesInner.
        :type service: str
        """

        self._service = service

    @property
    def service_id(self):
        """Gets the service_id of this ProfilesInner.


        :return: The service_id of this ProfilesInner.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id):
        """Sets the service_id of this ProfilesInner.


        :param service_id: The service_id of this ProfilesInner.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def service_type(self):
        """Gets the service_type of this ProfilesInner.


        :return: The service_type of this ProfilesInner.
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this ProfilesInner.


        :param service_type: The service_type of this ProfilesInner.
        :type service_type: str
        """

        self._service_type = service_type

    @property
    def service_username(self):
        """Gets the service_username of this ProfilesInner.


        :return: The service_username of this ProfilesInner.
        :rtype: str
        """
        return self._service_username

    @service_username.setter
    def service_username(self, service_username):
        """Sets the service_username of this ProfilesInner.


        :param service_username: The service_username of this ProfilesInner.
        :type service_username: str
        """

        self._service_username = service_username

    @property
    def shortener(self):
        """Gets the shortener of this ProfilesInner.


        :return: The shortener of this ProfilesInner.
        :rtype: ProfilesInnerShortener
        """
        return self._shortener

    @shortener.setter
    def shortener(self, shortener):
        """Sets the shortener of this ProfilesInner.


        :param shortener: The shortener of this ProfilesInner.
        :type shortener: ProfilesInnerShortener
        """

        self._shortener = shortener

    @property
    def statistics(self):
        """Gets the statistics of this ProfilesInner.


        :return: The statistics of this ProfilesInner.
        :rtype: ProfilesInnerStatistics
        """
        return self._statistics

    @statistics.setter
    def statistics(self, statistics):
        """Sets the statistics of this ProfilesInner.


        :param statistics: The statistics of this ProfilesInner.
        :type statistics: ProfilesInnerStatistics
        """

        self._statistics = statistics

    @property
    def timezone(self):
        """Gets the timezone of this ProfilesInner.


        :return: The timezone of this ProfilesInner.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone):
        """Sets the timezone of this ProfilesInner.


        :param timezone: The timezone of this ProfilesInner.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def user_id(self):
        """Gets the user_id of this ProfilesInner.


        :return: The user_id of this ProfilesInner.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this ProfilesInner.


        :param user_id: The user_id of this ProfilesInner.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def utm_tracking(self):
        """Gets the utm_tracking of this ProfilesInner.


        :return: The utm_tracking of this ProfilesInner.
        :rtype: str
        """
        return self._utm_tracking

    @utm_tracking.setter
    def utm_tracking(self, utm_tracking):
        """Sets the utm_tracking of this ProfilesInner.


        :param utm_tracking: The utm_tracking of this ProfilesInner.
        :type utm_tracking: str
        """

        self._utm_tracking = utm_tracking

    @property
    def verb(self):
        """Gets the verb of this ProfilesInner.


        :return: The verb of this ProfilesInner.
        :rtype: str
        """
        return self._verb

    @verb.setter
    def verb(self, verb):
        """Sets the verb of this ProfilesInner.


        :param verb: The verb of this ProfilesInner.
        :type verb: str
        """

        self._verb = verb
