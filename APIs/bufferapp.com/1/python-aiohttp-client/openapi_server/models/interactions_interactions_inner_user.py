# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InteractionsInteractionsInnerUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar: str=None, avatar_https: str=None, followers: float=None, twitter_id: str=None, username: str=None):
        """InteractionsInteractionsInnerUser - a model defined in OpenAPI

        :param avatar: The avatar of this InteractionsInteractionsInnerUser.
        :param avatar_https: The avatar_https of this InteractionsInteractionsInnerUser.
        :param followers: The followers of this InteractionsInteractionsInnerUser.
        :param twitter_id: The twitter_id of this InteractionsInteractionsInnerUser.
        :param username: The username of this InteractionsInteractionsInnerUser.
        """
        self.openapi_types = {
            'avatar': str,
            'avatar_https': str,
            'followers': float,
            'twitter_id': str,
            'username': str
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'avatar_https': 'avatar_https',
            'followers': 'followers',
            'twitter_id': 'twitter_id',
            'username': 'username'
        }

        self._avatar = avatar
        self._avatar_https = avatar_https
        self._followers = followers
        self._twitter_id = twitter_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InteractionsInteractionsInnerUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The interactions_interactions_inner_user of this InteractionsInteractionsInnerUser.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self):
        """Gets the avatar of this InteractionsInteractionsInnerUser.


        :return: The avatar of this InteractionsInteractionsInnerUser.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar):
        """Sets the avatar of this InteractionsInteractionsInnerUser.


        :param avatar: The avatar of this InteractionsInteractionsInnerUser.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def avatar_https(self):
        """Gets the avatar_https of this InteractionsInteractionsInnerUser.


        :return: The avatar_https of this InteractionsInteractionsInnerUser.
        :rtype: str
        """
        return self._avatar_https

    @avatar_https.setter
    def avatar_https(self, avatar_https):
        """Sets the avatar_https of this InteractionsInteractionsInnerUser.


        :param avatar_https: The avatar_https of this InteractionsInteractionsInnerUser.
        :type avatar_https: str
        """

        self._avatar_https = avatar_https

    @property
    def followers(self):
        """Gets the followers of this InteractionsInteractionsInnerUser.


        :return: The followers of this InteractionsInteractionsInnerUser.
        :rtype: float
        """
        return self._followers

    @followers.setter
    def followers(self, followers):
        """Sets the followers of this InteractionsInteractionsInnerUser.


        :param followers: The followers of this InteractionsInteractionsInnerUser.
        :type followers: float
        """

        self._followers = followers

    @property
    def twitter_id(self):
        """Gets the twitter_id of this InteractionsInteractionsInnerUser.


        :return: The twitter_id of this InteractionsInteractionsInnerUser.
        :rtype: str
        """
        return self._twitter_id

    @twitter_id.setter
    def twitter_id(self, twitter_id):
        """Sets the twitter_id of this InteractionsInteractionsInnerUser.


        :param twitter_id: The twitter_id of this InteractionsInteractionsInnerUser.
        :type twitter_id: str
        """

        self._twitter_id = twitter_id

    @property
    def username(self):
        """Gets the username of this InteractionsInteractionsInnerUser.


        :return: The username of this InteractionsInteractionsInnerUser.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this InteractionsInteractionsInnerUser.


        :param username: The username of this InteractionsInteractionsInnerUser.
        :type username: str
        """

        self._username = username
