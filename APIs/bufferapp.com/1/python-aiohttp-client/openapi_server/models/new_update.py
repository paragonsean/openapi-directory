# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.new_update_updates_inner import NewUpdateUpdatesInner
from openapi_server import util


class NewUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, buffer_count: float=None, buffer_percentage: float=None, success: bool=None, updates: List[NewUpdateUpdatesInner]=None):
        """NewUpdate - a model defined in OpenAPI

        :param buffer_count: The buffer_count of this NewUpdate.
        :param buffer_percentage: The buffer_percentage of this NewUpdate.
        :param success: The success of this NewUpdate.
        :param updates: The updates of this NewUpdate.
        """
        self.openapi_types = {
            'buffer_count': float,
            'buffer_percentage': float,
            'success': bool,
            'updates': List[NewUpdateUpdatesInner]
        }

        self.attribute_map = {
            'buffer_count': 'buffer_count',
            'buffer_percentage': 'buffer_percentage',
            'success': 'success',
            'updates': 'updates'
        }

        self._buffer_count = buffer_count
        self._buffer_percentage = buffer_percentage
        self._success = success
        self._updates = updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'NewUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The newUpdate of this NewUpdate.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def buffer_count(self):
        """Gets the buffer_count of this NewUpdate.


        :return: The buffer_count of this NewUpdate.
        :rtype: float
        """
        return self._buffer_count

    @buffer_count.setter
    def buffer_count(self, buffer_count):
        """Sets the buffer_count of this NewUpdate.


        :param buffer_count: The buffer_count of this NewUpdate.
        :type buffer_count: float
        """

        self._buffer_count = buffer_count

    @property
    def buffer_percentage(self):
        """Gets the buffer_percentage of this NewUpdate.


        :return: The buffer_percentage of this NewUpdate.
        :rtype: float
        """
        return self._buffer_percentage

    @buffer_percentage.setter
    def buffer_percentage(self, buffer_percentage):
        """Sets the buffer_percentage of this NewUpdate.


        :param buffer_percentage: The buffer_percentage of this NewUpdate.
        :type buffer_percentage: float
        """

        self._buffer_percentage = buffer_percentage

    @property
    def success(self):
        """Gets the success of this NewUpdate.


        :return: The success of this NewUpdate.
        :rtype: bool
        """
        return self._success

    @success.setter
    def success(self, success):
        """Sets the success of this NewUpdate.


        :param success: The success of this NewUpdate.
        :type success: bool
        """

        self._success = success

    @property
    def updates(self):
        """Gets the updates of this NewUpdate.


        :return: The updates of this NewUpdate.
        :rtype: List[NewUpdateUpdatesInner]
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this NewUpdate.


        :param updates: The updates of this NewUpdate.
        :type updates: List[NewUpdateUpdatesInner]
        """

        self._updates = updates
