/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguration_media.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguration_media::OAIConfiguration_media(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguration_media::OAIConfiguration_media() {
    this->initializeModel();
}

OAIConfiguration_media::~OAIConfiguration_media() {}

void OAIConfiguration_media::initializeModel() {

    m_picture_filetypes_isSet = false;
    m_picture_filetypes_isValid = false;

    m_picture_size_max_isSet = false;
    m_picture_size_max_isValid = false;

    m_picture_size_min_isSet = false;
    m_picture_size_min_isValid = false;
}

void OAIConfiguration_media::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguration_media::fromJsonObject(QJsonObject json) {

    m_picture_filetypes_isValid = ::OpenAPI::fromJsonValue(m_picture_filetypes, json[QString("picture_filetypes")]);
    m_picture_filetypes_isSet = !json[QString("picture_filetypes")].isNull() && m_picture_filetypes_isValid;

    m_picture_size_max_isValid = ::OpenAPI::fromJsonValue(m_picture_size_max, json[QString("picture_size_max")]);
    m_picture_size_max_isSet = !json[QString("picture_size_max")].isNull() && m_picture_size_max_isValid;

    m_picture_size_min_isValid = ::OpenAPI::fromJsonValue(m_picture_size_min, json[QString("picture_size_min")]);
    m_picture_size_min_isSet = !json[QString("picture_size_min")].isNull() && m_picture_size_min_isValid;
}

QString OAIConfiguration_media::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguration_media::asJsonObject() const {
    QJsonObject obj;
    if (m_picture_filetypes.size() > 0) {
        obj.insert(QString("picture_filetypes"), ::OpenAPI::toJsonValue(m_picture_filetypes));
    }
    if (m_picture_size_max_isSet) {
        obj.insert(QString("picture_size_max"), ::OpenAPI::toJsonValue(m_picture_size_max));
    }
    if (m_picture_size_min_isSet) {
        obj.insert(QString("picture_size_min"), ::OpenAPI::toJsonValue(m_picture_size_min));
    }
    return obj;
}

QList<QString> OAIConfiguration_media::getPictureFiletypes() const {
    return m_picture_filetypes;
}
void OAIConfiguration_media::setPictureFiletypes(const QList<QString> &picture_filetypes) {
    m_picture_filetypes = picture_filetypes;
    m_picture_filetypes_isSet = true;
}

bool OAIConfiguration_media::is_picture_filetypes_Set() const{
    return m_picture_filetypes_isSet;
}

bool OAIConfiguration_media::is_picture_filetypes_Valid() const{
    return m_picture_filetypes_isValid;
}

double OAIConfiguration_media::getPictureSizeMax() const {
    return m_picture_size_max;
}
void OAIConfiguration_media::setPictureSizeMax(const double &picture_size_max) {
    m_picture_size_max = picture_size_max;
    m_picture_size_max_isSet = true;
}

bool OAIConfiguration_media::is_picture_size_max_Set() const{
    return m_picture_size_max_isSet;
}

bool OAIConfiguration_media::is_picture_size_max_Valid() const{
    return m_picture_size_max_isValid;
}

double OAIConfiguration_media::getPictureSizeMin() const {
    return m_picture_size_min;
}
void OAIConfiguration_media::setPictureSizeMin(const double &picture_size_min) {
    m_picture_size_min = picture_size_min;
    m_picture_size_min_isSet = true;
}

bool OAIConfiguration_media::is_picture_size_min_Set() const{
    return m_picture_size_min_isSet;
}

bool OAIConfiguration_media::is_picture_size_min_Valid() const{
    return m_picture_size_min_isValid;
}

bool OAIConfiguration_media::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_picture_filetypes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_size_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_picture_size_min_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguration_media::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
