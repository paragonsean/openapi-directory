/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfiles_inner_counts.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfiles_inner_counts::OAIProfiles_inner_counts(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfiles_inner_counts::OAIProfiles_inner_counts() {
    this->initializeModel();
}

OAIProfiles_inner_counts::~OAIProfiles_inner_counts() {}

void OAIProfiles_inner_counts::initializeModel() {

    m_daily_suggestions_isSet = false;
    m_daily_suggestions_isValid = false;

    m_drafts_isSet = false;
    m_drafts_isValid = false;

    m_pending_isSet = false;
    m_pending_isValid = false;

    m_sent_isSet = false;
    m_sent_isValid = false;
}

void OAIProfiles_inner_counts::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfiles_inner_counts::fromJsonObject(QJsonObject json) {

    m_daily_suggestions_isValid = ::OpenAPI::fromJsonValue(m_daily_suggestions, json[QString("daily_suggestions")]);
    m_daily_suggestions_isSet = !json[QString("daily_suggestions")].isNull() && m_daily_suggestions_isValid;

    m_drafts_isValid = ::OpenAPI::fromJsonValue(m_drafts, json[QString("drafts")]);
    m_drafts_isSet = !json[QString("drafts")].isNull() && m_drafts_isValid;

    m_pending_isValid = ::OpenAPI::fromJsonValue(m_pending, json[QString("pending")]);
    m_pending_isSet = !json[QString("pending")].isNull() && m_pending_isValid;

    m_sent_isValid = ::OpenAPI::fromJsonValue(m_sent, json[QString("sent")]);
    m_sent_isSet = !json[QString("sent")].isNull() && m_sent_isValid;
}

QString OAIProfiles_inner_counts::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfiles_inner_counts::asJsonObject() const {
    QJsonObject obj;
    if (m_daily_suggestions_isSet) {
        obj.insert(QString("daily_suggestions"), ::OpenAPI::toJsonValue(m_daily_suggestions));
    }
    if (m_drafts_isSet) {
        obj.insert(QString("drafts"), ::OpenAPI::toJsonValue(m_drafts));
    }
    if (m_pending_isSet) {
        obj.insert(QString("pending"), ::OpenAPI::toJsonValue(m_pending));
    }
    if (m_sent_isSet) {
        obj.insert(QString("sent"), ::OpenAPI::toJsonValue(m_sent));
    }
    return obj;
}

double OAIProfiles_inner_counts::getDailySuggestions() const {
    return m_daily_suggestions;
}
void OAIProfiles_inner_counts::setDailySuggestions(const double &daily_suggestions) {
    m_daily_suggestions = daily_suggestions;
    m_daily_suggestions_isSet = true;
}

bool OAIProfiles_inner_counts::is_daily_suggestions_Set() const{
    return m_daily_suggestions_isSet;
}

bool OAIProfiles_inner_counts::is_daily_suggestions_Valid() const{
    return m_daily_suggestions_isValid;
}

double OAIProfiles_inner_counts::getDrafts() const {
    return m_drafts;
}
void OAIProfiles_inner_counts::setDrafts(const double &drafts) {
    m_drafts = drafts;
    m_drafts_isSet = true;
}

bool OAIProfiles_inner_counts::is_drafts_Set() const{
    return m_drafts_isSet;
}

bool OAIProfiles_inner_counts::is_drafts_Valid() const{
    return m_drafts_isValid;
}

double OAIProfiles_inner_counts::getPending() const {
    return m_pending;
}
void OAIProfiles_inner_counts::setPending(const double &pending) {
    m_pending = pending;
    m_pending_isSet = true;
}

bool OAIProfiles_inner_counts::is_pending_Set() const{
    return m_pending_isSet;
}

bool OAIProfiles_inner_counts::is_pending_Valid() const{
    return m_pending_isValid;
}

double OAIProfiles_inner_counts::getSent() const {
    return m_sent;
}
void OAIProfiles_inner_counts::setSent(const double &sent) {
    m_sent = sent;
    m_sent_isSet = true;
}

bool OAIProfiles_inner_counts::is_sent_Set() const{
    return m_sent_isSet;
}

bool OAIProfiles_inner_counts::is_sent_Valid() const{
    return m_sent_isValid;
}

bool OAIProfiles_inner_counts::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_daily_suggestions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_drafts_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_pending_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sent_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfiles_inner_counts::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
