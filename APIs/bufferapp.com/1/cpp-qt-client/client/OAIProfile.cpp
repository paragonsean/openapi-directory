/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIProfile::OAIProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIProfile::OAIProfile() {
    this->initializeModel();
}

OAIProfile::~OAIProfile() {}

void OAIProfile::initializeModel() {

    m_avatar_isSet = false;
    m_avatar_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_r_default_isSet = false;
    m_r_default_isValid = false;

    m_formatted_username_isSet = false;
    m_formatted_username_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_schedules_isSet = false;
    m_schedules_isValid = false;

    m_service_isSet = false;
    m_service_isValid = false;

    m_service_id_isSet = false;
    m_service_id_isValid = false;

    m_service_username_isSet = false;
    m_service_username_isValid = false;

    m_statistics_isSet = false;
    m_statistics_isValid = false;

    m_team_members_isSet = false;
    m_team_members_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;
}

void OAIProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIProfile::fromJsonObject(QJsonObject json) {

    m_avatar_isValid = ::OpenAPI::fromJsonValue(m_avatar, json[QString("avatar")]);
    m_avatar_isSet = !json[QString("avatar")].isNull() && m_avatar_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_r_default_isValid = ::OpenAPI::fromJsonValue(m_r_default, json[QString("default")]);
    m_r_default_isSet = !json[QString("default")].isNull() && m_r_default_isValid;

    m_formatted_username_isValid = ::OpenAPI::fromJsonValue(m_formatted_username, json[QString("formatted_username")]);
    m_formatted_username_isSet = !json[QString("formatted_username")].isNull() && m_formatted_username_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_schedules_isValid = ::OpenAPI::fromJsonValue(m_schedules, json[QString("schedules")]);
    m_schedules_isSet = !json[QString("schedules")].isNull() && m_schedules_isValid;

    m_service_isValid = ::OpenAPI::fromJsonValue(m_service, json[QString("service")]);
    m_service_isSet = !json[QString("service")].isNull() && m_service_isValid;

    m_service_id_isValid = ::OpenAPI::fromJsonValue(m_service_id, json[QString("service_id")]);
    m_service_id_isSet = !json[QString("service_id")].isNull() && m_service_id_isValid;

    m_service_username_isValid = ::OpenAPI::fromJsonValue(m_service_username, json[QString("service_username")]);
    m_service_username_isSet = !json[QString("service_username")].isNull() && m_service_username_isValid;

    m_statistics_isValid = ::OpenAPI::fromJsonValue(m_statistics, json[QString("statistics")]);
    m_statistics_isSet = !json[QString("statistics")].isNull() && m_statistics_isValid;

    m_team_members_isValid = ::OpenAPI::fromJsonValue(m_team_members, json[QString("team_members")]);
    m_team_members_isSet = !json[QString("team_members")].isNull() && m_team_members_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;
}

QString OAIProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_avatar_isSet) {
        obj.insert(QString("avatar"), ::OpenAPI::toJsonValue(m_avatar));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_r_default_isSet) {
        obj.insert(QString("default"), ::OpenAPI::toJsonValue(m_r_default));
    }
    if (m_formatted_username_isSet) {
        obj.insert(QString("formatted_username"), ::OpenAPI::toJsonValue(m_formatted_username));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_schedules.size() > 0) {
        obj.insert(QString("schedules"), ::OpenAPI::toJsonValue(m_schedules));
    }
    if (m_service_isSet) {
        obj.insert(QString("service"), ::OpenAPI::toJsonValue(m_service));
    }
    if (m_service_id_isSet) {
        obj.insert(QString("service_id"), ::OpenAPI::toJsonValue(m_service_id));
    }
    if (m_service_username_isSet) {
        obj.insert(QString("service_username"), ::OpenAPI::toJsonValue(m_service_username));
    }
    if (m_statistics.isSet()) {
        obj.insert(QString("statistics"), ::OpenAPI::toJsonValue(m_statistics));
    }
    if (m_team_members.size() > 0) {
        obj.insert(QString("team_members"), ::OpenAPI::toJsonValue(m_team_members));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    return obj;
}

QString OAIProfile::getAvatar() const {
    return m_avatar;
}
void OAIProfile::setAvatar(const QString &avatar) {
    m_avatar = avatar;
    m_avatar_isSet = true;
}

bool OAIProfile::is_avatar_Set() const{
    return m_avatar_isSet;
}

bool OAIProfile::is_avatar_Valid() const{
    return m_avatar_isValid;
}

double OAIProfile::getCreatedAt() const {
    return m_created_at;
}
void OAIProfile::setCreatedAt(const double &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIProfile::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIProfile::is_created_at_Valid() const{
    return m_created_at_isValid;
}

bool OAIProfile::isRDefault() const {
    return m_r_default;
}
void OAIProfile::setRDefault(const bool &r_default) {
    m_r_default = r_default;
    m_r_default_isSet = true;
}

bool OAIProfile::is_r_default_Set() const{
    return m_r_default_isSet;
}

bool OAIProfile::is_r_default_Valid() const{
    return m_r_default_isValid;
}

QString OAIProfile::getFormattedUsername() const {
    return m_formatted_username;
}
void OAIProfile::setFormattedUsername(const QString &formatted_username) {
    m_formatted_username = formatted_username;
    m_formatted_username_isSet = true;
}

bool OAIProfile::is_formatted_username_Set() const{
    return m_formatted_username_isSet;
}

bool OAIProfile::is_formatted_username_Valid() const{
    return m_formatted_username_isValid;
}

QString OAIProfile::getId() const {
    return m_id;
}
void OAIProfile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIProfile::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIProfile_schedules_inner> OAIProfile::getSchedules() const {
    return m_schedules;
}
void OAIProfile::setSchedules(const QList<OAIProfile_schedules_inner> &schedules) {
    m_schedules = schedules;
    m_schedules_isSet = true;
}

bool OAIProfile::is_schedules_Set() const{
    return m_schedules_isSet;
}

bool OAIProfile::is_schedules_Valid() const{
    return m_schedules_isValid;
}

QString OAIProfile::getService() const {
    return m_service;
}
void OAIProfile::setService(const QString &service) {
    m_service = service;
    m_service_isSet = true;
}

bool OAIProfile::is_service_Set() const{
    return m_service_isSet;
}

bool OAIProfile::is_service_Valid() const{
    return m_service_isValid;
}

QString OAIProfile::getServiceId() const {
    return m_service_id;
}
void OAIProfile::setServiceId(const QString &service_id) {
    m_service_id = service_id;
    m_service_id_isSet = true;
}

bool OAIProfile::is_service_id_Set() const{
    return m_service_id_isSet;
}

bool OAIProfile::is_service_id_Valid() const{
    return m_service_id_isValid;
}

QString OAIProfile::getServiceUsername() const {
    return m_service_username;
}
void OAIProfile::setServiceUsername(const QString &service_username) {
    m_service_username = service_username;
    m_service_username_isSet = true;
}

bool OAIProfile::is_service_username_Set() const{
    return m_service_username_isSet;
}

bool OAIProfile::is_service_username_Valid() const{
    return m_service_username_isValid;
}

OAIProfile_statistics OAIProfile::getStatistics() const {
    return m_statistics;
}
void OAIProfile::setStatistics(const OAIProfile_statistics &statistics) {
    m_statistics = statistics;
    m_statistics_isSet = true;
}

bool OAIProfile::is_statistics_Set() const{
    return m_statistics_isSet;
}

bool OAIProfile::is_statistics_Valid() const{
    return m_statistics_isValid;
}

QList<QString> OAIProfile::getTeamMembers() const {
    return m_team_members;
}
void OAIProfile::setTeamMembers(const QList<QString> &team_members) {
    m_team_members = team_members;
    m_team_members_isSet = true;
}

bool OAIProfile::is_team_members_Set() const{
    return m_team_members_isSet;
}

bool OAIProfile::is_team_members_Valid() const{
    return m_team_members_isValid;
}

QString OAIProfile::getTimezone() const {
    return m_timezone;
}
void OAIProfile::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIProfile::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIProfile::is_timezone_Valid() const{
    return m_timezone_isValid;
}

QString OAIProfile::getUserId() const {
    return m_user_id;
}
void OAIProfile::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIProfile::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIProfile::is_user_id_Valid() const{
    return m_user_id_isValid;
}

bool OAIProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_avatar_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_default_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formatted_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_schedules.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_service_username_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statistics.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_team_members.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
