/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdate_statistics.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdate_statistics::OAIUpdate_statistics(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdate_statistics::OAIUpdate_statistics() {
    this->initializeModel();
}

OAIUpdate_statistics::~OAIUpdate_statistics() {}

void OAIUpdate_statistics::initializeModel() {

    m_clicks_isSet = false;
    m_clicks_isValid = false;

    m_favorites_isSet = false;
    m_favorites_isValid = false;

    m_mentions_isSet = false;
    m_mentions_isValid = false;

    m_reach_isSet = false;
    m_reach_isValid = false;

    m_retweets_isSet = false;
    m_retweets_isValid = false;
}

void OAIUpdate_statistics::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdate_statistics::fromJsonObject(QJsonObject json) {

    m_clicks_isValid = ::OpenAPI::fromJsonValue(m_clicks, json[QString("clicks")]);
    m_clicks_isSet = !json[QString("clicks")].isNull() && m_clicks_isValid;

    m_favorites_isValid = ::OpenAPI::fromJsonValue(m_favorites, json[QString("favorites")]);
    m_favorites_isSet = !json[QString("favorites")].isNull() && m_favorites_isValid;

    m_mentions_isValid = ::OpenAPI::fromJsonValue(m_mentions, json[QString("mentions")]);
    m_mentions_isSet = !json[QString("mentions")].isNull() && m_mentions_isValid;

    m_reach_isValid = ::OpenAPI::fromJsonValue(m_reach, json[QString("reach")]);
    m_reach_isSet = !json[QString("reach")].isNull() && m_reach_isValid;

    m_retweets_isValid = ::OpenAPI::fromJsonValue(m_retweets, json[QString("retweets")]);
    m_retweets_isSet = !json[QString("retweets")].isNull() && m_retweets_isValid;
}

QString OAIUpdate_statistics::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdate_statistics::asJsonObject() const {
    QJsonObject obj;
    if (m_clicks_isSet) {
        obj.insert(QString("clicks"), ::OpenAPI::toJsonValue(m_clicks));
    }
    if (m_favorites_isSet) {
        obj.insert(QString("favorites"), ::OpenAPI::toJsonValue(m_favorites));
    }
    if (m_mentions_isSet) {
        obj.insert(QString("mentions"), ::OpenAPI::toJsonValue(m_mentions));
    }
    if (m_reach_isSet) {
        obj.insert(QString("reach"), ::OpenAPI::toJsonValue(m_reach));
    }
    if (m_retweets_isSet) {
        obj.insert(QString("retweets"), ::OpenAPI::toJsonValue(m_retweets));
    }
    return obj;
}

double OAIUpdate_statistics::getClicks() const {
    return m_clicks;
}
void OAIUpdate_statistics::setClicks(const double &clicks) {
    m_clicks = clicks;
    m_clicks_isSet = true;
}

bool OAIUpdate_statistics::is_clicks_Set() const{
    return m_clicks_isSet;
}

bool OAIUpdate_statistics::is_clicks_Valid() const{
    return m_clicks_isValid;
}

double OAIUpdate_statistics::getFavorites() const {
    return m_favorites;
}
void OAIUpdate_statistics::setFavorites(const double &favorites) {
    m_favorites = favorites;
    m_favorites_isSet = true;
}

bool OAIUpdate_statistics::is_favorites_Set() const{
    return m_favorites_isSet;
}

bool OAIUpdate_statistics::is_favorites_Valid() const{
    return m_favorites_isValid;
}

double OAIUpdate_statistics::getMentions() const {
    return m_mentions;
}
void OAIUpdate_statistics::setMentions(const double &mentions) {
    m_mentions = mentions;
    m_mentions_isSet = true;
}

bool OAIUpdate_statistics::is_mentions_Set() const{
    return m_mentions_isSet;
}

bool OAIUpdate_statistics::is_mentions_Valid() const{
    return m_mentions_isValid;
}

double OAIUpdate_statistics::getReach() const {
    return m_reach;
}
void OAIUpdate_statistics::setReach(const double &reach) {
    m_reach = reach;
    m_reach_isSet = true;
}

bool OAIUpdate_statistics::is_reach_Set() const{
    return m_reach_isSet;
}

bool OAIUpdate_statistics::is_reach_Valid() const{
    return m_reach_isValid;
}

double OAIUpdate_statistics::getRetweets() const {
    return m_retweets;
}
void OAIUpdate_statistics::setRetweets(const double &retweets) {
    m_retweets = retweets;
    m_retweets_isSet = true;
}

bool OAIUpdate_statistics::is_retweets_Set() const{
    return m_retweets_isSet;
}

bool OAIUpdate_statistics::is_retweets_Valid() const{
    return m_retweets_isValid;
}

bool OAIUpdate_statistics::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_clicks_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_favorites_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_mentions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reach_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_retweets_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdate_statistics::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
