/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIConfiguration_services.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIConfiguration_services::OAIConfiguration_services(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIConfiguration_services::OAIConfiguration_services() {
    this->initializeModel();
}

OAIConfiguration_services::~OAIConfiguration_services() {}

void OAIConfiguration_services::initializeModel() {

    m_appdotnet_isSet = false;
    m_appdotnet_isValid = false;

    m_facebook_isSet = false;
    m_facebook_isValid = false;

    m_google_isSet = false;
    m_google_isValid = false;

    m_linkedin_isSet = false;
    m_linkedin_isValid = false;

    m_twitter_isSet = false;
    m_twitter_isValid = false;
}

void OAIConfiguration_services::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIConfiguration_services::fromJsonObject(QJsonObject json) {

    m_appdotnet_isValid = ::OpenAPI::fromJsonValue(m_appdotnet, json[QString("appdotnet")]);
    m_appdotnet_isSet = !json[QString("appdotnet")].isNull() && m_appdotnet_isValid;

    m_facebook_isValid = ::OpenAPI::fromJsonValue(m_facebook, json[QString("facebook")]);
    m_facebook_isSet = !json[QString("facebook")].isNull() && m_facebook_isValid;

    m_google_isValid = ::OpenAPI::fromJsonValue(m_google, json[QString("google")]);
    m_google_isSet = !json[QString("google")].isNull() && m_google_isValid;

    m_linkedin_isValid = ::OpenAPI::fromJsonValue(m_linkedin, json[QString("linkedin")]);
    m_linkedin_isSet = !json[QString("linkedin")].isNull() && m_linkedin_isValid;

    m_twitter_isValid = ::OpenAPI::fromJsonValue(m_twitter, json[QString("twitter")]);
    m_twitter_isSet = !json[QString("twitter")].isNull() && m_twitter_isValid;
}

QString OAIConfiguration_services::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIConfiguration_services::asJsonObject() const {
    QJsonObject obj;
    if (m_appdotnet.isSet()) {
        obj.insert(QString("appdotnet"), ::OpenAPI::toJsonValue(m_appdotnet));
    }
    if (m_facebook.isSet()) {
        obj.insert(QString("facebook"), ::OpenAPI::toJsonValue(m_facebook));
    }
    if (m_google.isSet()) {
        obj.insert(QString("google"), ::OpenAPI::toJsonValue(m_google));
    }
    if (m_linkedin.isSet()) {
        obj.insert(QString("linkedin"), ::OpenAPI::toJsonValue(m_linkedin));
    }
    if (m_twitter.isSet()) {
        obj.insert(QString("twitter"), ::OpenAPI::toJsonValue(m_twitter));
    }
    return obj;
}

OAIConfiguration_services_appdotnet OAIConfiguration_services::getAppdotnet() const {
    return m_appdotnet;
}
void OAIConfiguration_services::setAppdotnet(const OAIConfiguration_services_appdotnet &appdotnet) {
    m_appdotnet = appdotnet;
    m_appdotnet_isSet = true;
}

bool OAIConfiguration_services::is_appdotnet_Set() const{
    return m_appdotnet_isSet;
}

bool OAIConfiguration_services::is_appdotnet_Valid() const{
    return m_appdotnet_isValid;
}

OAIConfiguration_services_facebook OAIConfiguration_services::getFacebook() const {
    return m_facebook;
}
void OAIConfiguration_services::setFacebook(const OAIConfiguration_services_facebook &facebook) {
    m_facebook = facebook;
    m_facebook_isSet = true;
}

bool OAIConfiguration_services::is_facebook_Set() const{
    return m_facebook_isSet;
}

bool OAIConfiguration_services::is_facebook_Valid() const{
    return m_facebook_isValid;
}

OAIConfiguration_services_google OAIConfiguration_services::getGoogle() const {
    return m_google;
}
void OAIConfiguration_services::setGoogle(const OAIConfiguration_services_google &google) {
    m_google = google;
    m_google_isSet = true;
}

bool OAIConfiguration_services::is_google_Set() const{
    return m_google_isSet;
}

bool OAIConfiguration_services::is_google_Valid() const{
    return m_google_isValid;
}

OAIConfiguration_services_facebook OAIConfiguration_services::getLinkedin() const {
    return m_linkedin;
}
void OAIConfiguration_services::setLinkedin(const OAIConfiguration_services_facebook &linkedin) {
    m_linkedin = linkedin;
    m_linkedin_isSet = true;
}

bool OAIConfiguration_services::is_linkedin_Set() const{
    return m_linkedin_isSet;
}

bool OAIConfiguration_services::is_linkedin_Valid() const{
    return m_linkedin_isValid;
}

OAIConfiguration_services_twitter OAIConfiguration_services::getTwitter() const {
    return m_twitter;
}
void OAIConfiguration_services::setTwitter(const OAIConfiguration_services_twitter &twitter) {
    m_twitter = twitter;
    m_twitter_isSet = true;
}

bool OAIConfiguration_services::is_twitter_Set() const{
    return m_twitter_isSet;
}

bool OAIConfiguration_services::is_twitter_Valid() const{
    return m_twitter_isValid;
}

bool OAIConfiguration_services::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_appdotnet.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_facebook.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_google.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_linkedin.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_twitter.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIConfiguration_services::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
