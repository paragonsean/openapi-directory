/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInteractions_interactions_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInteractions_interactions_inner::OAIInteractions_interactions_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInteractions_interactions_inner::OAIInteractions_interactions_inner() {
    this->initializeModel();
}

OAIInteractions_interactions_inner::~OAIInteractions_interactions_inner() {}

void OAIInteractions_interactions_inner::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_interaction_id_isSet = false;
    m_interaction_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;
}

void OAIInteractions_interactions_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInteractions_interactions_inner::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_interaction_id_isValid = ::OpenAPI::fromJsonValue(m_interaction_id, json[QString("interaction_id")]);
    m_interaction_id_isSet = !json[QString("interaction_id")].isNull() && m_interaction_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;
}

QString OAIInteractions_interactions_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInteractions_interactions_inner::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_interaction_id_isSet) {
        obj.insert(QString("interaction_id"), ::OpenAPI::toJsonValue(m_interaction_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    return obj;
}

QString OAIInteractions_interactions_inner::getId() const {
    return m__id;
}
void OAIInteractions_interactions_inner::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIInteractions_interactions_inner::is__id_Set() const{
    return m__id_isSet;
}

bool OAIInteractions_interactions_inner::is__id_Valid() const{
    return m__id_isValid;
}

double OAIInteractions_interactions_inner::getCreatedAt() const {
    return m_created_at;
}
void OAIInteractions_interactions_inner::setCreatedAt(const double &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIInteractions_interactions_inner::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIInteractions_interactions_inner::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIInteractions_interactions_inner::getEvent() const {
    return m_event;
}
void OAIInteractions_interactions_inner::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIInteractions_interactions_inner::is_event_Set() const{
    return m_event_isSet;
}

bool OAIInteractions_interactions_inner::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIInteractions_interactions_inner::getId() const {
    return m_id;
}
void OAIInteractions_interactions_inner::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIInteractions_interactions_inner::is_id_Set() const{
    return m_id_isSet;
}

bool OAIInteractions_interactions_inner::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIInteractions_interactions_inner::getInteractionId() const {
    return m_interaction_id;
}
void OAIInteractions_interactions_inner::setInteractionId(const QString &interaction_id) {
    m_interaction_id = interaction_id;
    m_interaction_id_isSet = true;
}

bool OAIInteractions_interactions_inner::is_interaction_id_Set() const{
    return m_interaction_id_isSet;
}

bool OAIInteractions_interactions_inner::is_interaction_id_Valid() const{
    return m_interaction_id_isValid;
}

OAIInteractions_interactions_inner_user OAIInteractions_interactions_inner::getUser() const {
    return m_user;
}
void OAIInteractions_interactions_inner::setUser(const OAIInteractions_interactions_inner_user &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIInteractions_interactions_inner::is_user_Set() const{
    return m_user_isSet;
}

bool OAIInteractions_interactions_inner::is_user_Valid() const{
    return m_user_isValid;
}

bool OAIInteractions_interactions_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_interaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInteractions_interactions_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
