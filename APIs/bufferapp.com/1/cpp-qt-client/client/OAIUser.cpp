/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUser.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUser::OAIUser(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUser::OAIUser() {
    this->initializeModel();
}

OAIUser::~OAIUser() {}

void OAIUser::initializeModel() {

    m__id_isSet = false;
    m__id_isValid = false;

    m_activity_at_isSet = false;
    m_activity_at_isValid = false;

    m_created_at_isSet = false;
    m_created_at_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_plan_isSet = false;
    m_plan_isValid = false;

    m_referral_link_isSet = false;
    m_referral_link_isValid = false;

    m_referral_token_isSet = false;
    m_referral_token_isValid = false;

    m_secret_email_isSet = false;
    m_secret_email_isValid = false;

    m_timezone_isSet = false;
    m_timezone_isValid = false;
}

void OAIUser::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUser::fromJsonObject(QJsonObject json) {

    m__id_isValid = ::OpenAPI::fromJsonValue(m__id, json[QString("_id")]);
    m__id_isSet = !json[QString("_id")].isNull() && m__id_isValid;

    m_activity_at_isValid = ::OpenAPI::fromJsonValue(m_activity_at, json[QString("activity_at")]);
    m_activity_at_isSet = !json[QString("activity_at")].isNull() && m_activity_at_isValid;

    m_created_at_isValid = ::OpenAPI::fromJsonValue(m_created_at, json[QString("created_at")]);
    m_created_at_isSet = !json[QString("created_at")].isNull() && m_created_at_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_plan_isValid = ::OpenAPI::fromJsonValue(m_plan, json[QString("plan")]);
    m_plan_isSet = !json[QString("plan")].isNull() && m_plan_isValid;

    m_referral_link_isValid = ::OpenAPI::fromJsonValue(m_referral_link, json[QString("referral_link")]);
    m_referral_link_isSet = !json[QString("referral_link")].isNull() && m_referral_link_isValid;

    m_referral_token_isValid = ::OpenAPI::fromJsonValue(m_referral_token, json[QString("referral_token")]);
    m_referral_token_isSet = !json[QString("referral_token")].isNull() && m_referral_token_isValid;

    m_secret_email_isValid = ::OpenAPI::fromJsonValue(m_secret_email, json[QString("secret_email")]);
    m_secret_email_isSet = !json[QString("secret_email")].isNull() && m_secret_email_isValid;

    m_timezone_isValid = ::OpenAPI::fromJsonValue(m_timezone, json[QString("timezone")]);
    m_timezone_isSet = !json[QString("timezone")].isNull() && m_timezone_isValid;
}

QString OAIUser::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUser::asJsonObject() const {
    QJsonObject obj;
    if (m__id_isSet) {
        obj.insert(QString("_id"), ::OpenAPI::toJsonValue(m__id));
    }
    if (m_activity_at_isSet) {
        obj.insert(QString("activity_at"), ::OpenAPI::toJsonValue(m_activity_at));
    }
    if (m_created_at_isSet) {
        obj.insert(QString("created_at"), ::OpenAPI::toJsonValue(m_created_at));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_plan_isSet) {
        obj.insert(QString("plan"), ::OpenAPI::toJsonValue(m_plan));
    }
    if (m_referral_link_isSet) {
        obj.insert(QString("referral_link"), ::OpenAPI::toJsonValue(m_referral_link));
    }
    if (m_referral_token_isSet) {
        obj.insert(QString("referral_token"), ::OpenAPI::toJsonValue(m_referral_token));
    }
    if (m_secret_email_isSet) {
        obj.insert(QString("secret_email"), ::OpenAPI::toJsonValue(m_secret_email));
    }
    if (m_timezone_isSet) {
        obj.insert(QString("timezone"), ::OpenAPI::toJsonValue(m_timezone));
    }
    return obj;
}

QString OAIUser::getId() const {
    return m__id;
}
void OAIUser::setId(const QString &_id) {
    m__id = _id;
    m__id_isSet = true;
}

bool OAIUser::is__id_Set() const{
    return m__id_isSet;
}

bool OAIUser::is__id_Valid() const{
    return m__id_isValid;
}

double OAIUser::getActivityAt() const {
    return m_activity_at;
}
void OAIUser::setActivityAt(const double &activity_at) {
    m_activity_at = activity_at;
    m_activity_at_isSet = true;
}

bool OAIUser::is_activity_at_Set() const{
    return m_activity_at_isSet;
}

bool OAIUser::is_activity_at_Valid() const{
    return m_activity_at_isValid;
}

double OAIUser::getCreatedAt() const {
    return m_created_at;
}
void OAIUser::setCreatedAt(const double &created_at) {
    m_created_at = created_at;
    m_created_at_isSet = true;
}

bool OAIUser::is_created_at_Set() const{
    return m_created_at_isSet;
}

bool OAIUser::is_created_at_Valid() const{
    return m_created_at_isValid;
}

QString OAIUser::getId() const {
    return m_id;
}
void OAIUser::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUser::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUser::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIUser::getPlan() const {
    return m_plan;
}
void OAIUser::setPlan(const QString &plan) {
    m_plan = plan;
    m_plan_isSet = true;
}

bool OAIUser::is_plan_Set() const{
    return m_plan_isSet;
}

bool OAIUser::is_plan_Valid() const{
    return m_plan_isValid;
}

QString OAIUser::getReferralLink() const {
    return m_referral_link;
}
void OAIUser::setReferralLink(const QString &referral_link) {
    m_referral_link = referral_link;
    m_referral_link_isSet = true;
}

bool OAIUser::is_referral_link_Set() const{
    return m_referral_link_isSet;
}

bool OAIUser::is_referral_link_Valid() const{
    return m_referral_link_isValid;
}

QString OAIUser::getReferralToken() const {
    return m_referral_token;
}
void OAIUser::setReferralToken(const QString &referral_token) {
    m_referral_token = referral_token;
    m_referral_token_isSet = true;
}

bool OAIUser::is_referral_token_Set() const{
    return m_referral_token_isSet;
}

bool OAIUser::is_referral_token_Valid() const{
    return m_referral_token_isValid;
}

QString OAIUser::getSecretEmail() const {
    return m_secret_email;
}
void OAIUser::setSecretEmail(const QString &secret_email) {
    m_secret_email = secret_email;
    m_secret_email_isSet = true;
}

bool OAIUser::is_secret_email_Set() const{
    return m_secret_email_isSet;
}

bool OAIUser::is_secret_email_Valid() const{
    return m_secret_email_isValid;
}

QString OAIUser::getTimezone() const {
    return m_timezone;
}
void OAIUser::setTimezone(const QString &timezone) {
    m_timezone = timezone;
    m_timezone_isSet = true;
}

bool OAIUser::is_timezone_Set() const{
    return m_timezone_isSet;
}

bool OAIUser::is_timezone_Valid() const{
    return m_timezone_isValid;
}

bool OAIUser::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_activity_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_at_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_plan_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_referral_token_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_secret_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timezone_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUser::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
