/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIConfiguration.h"
#include "OAIIndividual_update.h"
#include "OAIInteractions.h"
#include "OAINewUpdate.h"
#include "OAIProfile.h"
#include "OAIProfiles_inner.h"
#include "OAISchedules.h"
#include "OAIShares.h"
#include "OAIShuffle.h"
#include "OAISuccess.h"
#include "OAIUpdate.h"
#include "OAIUpdates_array.h"
#include "OAIUser.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void infoConfigurationmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  url QString [required]
    */
    virtual void linksSharesmediaTypeExtensionGet(const QString &media_type_extension, const QString &url);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void profilesIdSchedulesUpdatemediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void profilesIdSchedulesmediaTypeExtensionGet(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  since QDate [optional]
    * @param[in]  utc bool [optional]
    */
    virtual void profilesIdUpdatesPendingmediaTypeExtensionGet(const QString &id, const QString &media_type_extension, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &since = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &utc = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void profilesIdUpdatesReordermediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  count qint32 [optional]
    * @param[in]  since QDate [optional]
    * @param[in]  utc bool [optional]
    */
    virtual void profilesIdUpdatesSentmediaTypeExtensionGet(const QString &id, const QString &media_type_extension, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QDate> &since = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<bool> &utc = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void profilesIdUpdatesShufflemediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  id QString [required]
    */
    virtual void profilesIdmediaTypeExtensionGet(const QString &media_type_extension, const QString &id);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void profilesmediaTypeExtensionGet(const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void updatesCreatemediaTypeExtensionPost(const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void updatesIdDestroymediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    * @param[in]  event QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  count qint32 [optional]
    */
    virtual void updatesIdInteractionsmediaTypeExtensionGet(const QString &id, const QString &media_type_extension, const QString &event, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &count = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void updatesIdMoveToTopmediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void updatesIdSharemediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  id QString [required]
    * @param[in]  media_type_extension QString [required]
    */
    virtual void updatesIdUpdatemediaTypeExtensionPost(const QString &id, const QString &media_type_extension);

    /**
    * @param[in]  media_type_extension QString [required]
    * @param[in]  id QString [required]
    */
    virtual void updatesIdmediaTypeExtensionGet(const QString &media_type_extension, const QString &id);

    /**
    * @param[in]  media_type_extension QString [required]
    */
    virtual void usermediaTypeExtensionGet(const QString &media_type_extension);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void infoConfigurationmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void linksSharesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void profilesIdSchedulesUpdatemediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void profilesIdSchedulesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void profilesIdUpdatesPendingmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void profilesIdUpdatesReordermediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void profilesIdUpdatesSentmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void profilesIdUpdatesShufflemediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void profilesIdmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void profilesmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void updatesCreatemediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void updatesIdDestroymediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void updatesIdInteractionsmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void updatesIdMoveToTopmediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void updatesIdSharemediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void updatesIdUpdatemediaTypeExtensionPostCallback(OAIHttpRequestWorker *worker);
    void updatesIdmediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);
    void usermediaTypeExtensionGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void infoConfigurationmediaTypeExtensionGetSignal(OAIConfiguration summary);
    void linksSharesmediaTypeExtensionGetSignal(OAIShares summary);
    void profilesIdSchedulesUpdatemediaTypeExtensionPostSignal(OAISuccess summary);
    void profilesIdSchedulesmediaTypeExtensionGetSignal(OAISchedules summary);
    void profilesIdUpdatesPendingmediaTypeExtensionGetSignal(OAIUpdates_array summary);
    void profilesIdUpdatesReordermediaTypeExtensionPostSignal(OAIShuffle summary);
    void profilesIdUpdatesSentmediaTypeExtensionGetSignal(OAIUpdates_array summary);
    void profilesIdUpdatesShufflemediaTypeExtensionPostSignal(OAIShuffle summary);
    void profilesIdmediaTypeExtensionGetSignal(OAIProfile summary);
    void profilesmediaTypeExtensionGetSignal(QList<OAIProfiles_inner> summary);
    void updatesCreatemediaTypeExtensionPostSignal(OAINewUpdate summary);
    void updatesIdDestroymediaTypeExtensionPostSignal(OAISuccess summary);
    void updatesIdInteractionsmediaTypeExtensionGetSignal(OAIInteractions summary);
    void updatesIdMoveToTopmediaTypeExtensionPostSignal(OAIUpdate summary);
    void updatesIdSharemediaTypeExtensionPostSignal(OAISuccess summary);
    void updatesIdUpdatemediaTypeExtensionPostSignal(OAIIndividual_update summary);
    void updatesIdmediaTypeExtensionGetSignal(OAIUpdate summary);
    void usermediaTypeExtensionGetSignal(OAIUser summary);


    void infoConfigurationmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIConfiguration summary);
    void linksSharesmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIShares summary);
    void profilesIdSchedulesUpdatemediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void profilesIdSchedulesmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAISchedules summary);
    void profilesIdUpdatesPendingmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdates_array summary);
    void profilesIdUpdatesReordermediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAIShuffle summary);
    void profilesIdUpdatesSentmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdates_array summary);
    void profilesIdUpdatesShufflemediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAIShuffle summary);
    void profilesIdmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIProfile summary);
    void profilesmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, QList<OAIProfiles_inner> summary);
    void updatesCreatemediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAINewUpdate summary);
    void updatesIdDestroymediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void updatesIdInteractionsmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIInteractions summary);
    void updatesIdMoveToTopmediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAIUpdate summary);
    void updatesIdSharemediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAISuccess summary);
    void updatesIdUpdatemediaTypeExtensionPostSignalFull(OAIHttpRequestWorker *worker, OAIIndividual_update summary);
    void updatesIdmediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIUpdate summary);
    void usermediaTypeExtensionGetSignalFull(OAIHttpRequestWorker *worker, OAIUser summary);

    Q_DECL_DEPRECATED_X("Use infoConfigurationmediaTypeExtensionGetSignalError() instead")
    void infoConfigurationmediaTypeExtensionGetSignalE(OAIConfiguration summary, QNetworkReply::NetworkError error_type, QString error_str);
    void infoConfigurationmediaTypeExtensionGetSignalError(OAIConfiguration summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linksSharesmediaTypeExtensionGetSignalError() instead")
    void linksSharesmediaTypeExtensionGetSignalE(OAIShares summary, QNetworkReply::NetworkError error_type, QString error_str);
    void linksSharesmediaTypeExtensionGetSignalError(OAIShares summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdSchedulesUpdatemediaTypeExtensionPostSignalError() instead")
    void profilesIdSchedulesUpdatemediaTypeExtensionPostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdSchedulesUpdatemediaTypeExtensionPostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdSchedulesmediaTypeExtensionGetSignalError() instead")
    void profilesIdSchedulesmediaTypeExtensionGetSignalE(OAISchedules summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdSchedulesmediaTypeExtensionGetSignalError(OAISchedules summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesPendingmediaTypeExtensionGetSignalError() instead")
    void profilesIdUpdatesPendingmediaTypeExtensionGetSignalE(OAIUpdates_array summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesPendingmediaTypeExtensionGetSignalError(OAIUpdates_array summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesReordermediaTypeExtensionPostSignalError() instead")
    void profilesIdUpdatesReordermediaTypeExtensionPostSignalE(OAIShuffle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesReordermediaTypeExtensionPostSignalError(OAIShuffle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesSentmediaTypeExtensionGetSignalError() instead")
    void profilesIdUpdatesSentmediaTypeExtensionGetSignalE(OAIUpdates_array summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesSentmediaTypeExtensionGetSignalError(OAIUpdates_array summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesShufflemediaTypeExtensionPostSignalError() instead")
    void profilesIdUpdatesShufflemediaTypeExtensionPostSignalE(OAIShuffle summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesShufflemediaTypeExtensionPostSignalError(OAIShuffle summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdmediaTypeExtensionGetSignalError() instead")
    void profilesIdmediaTypeExtensionGetSignalE(OAIProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdmediaTypeExtensionGetSignalError(OAIProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesmediaTypeExtensionGetSignalError() instead")
    void profilesmediaTypeExtensionGetSignalE(QList<OAIProfiles_inner> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesmediaTypeExtensionGetSignalError(QList<OAIProfiles_inner> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesCreatemediaTypeExtensionPostSignalError() instead")
    void updatesCreatemediaTypeExtensionPostSignalE(OAINewUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesCreatemediaTypeExtensionPostSignalError(OAINewUpdate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdDestroymediaTypeExtensionPostSignalError() instead")
    void updatesIdDestroymediaTypeExtensionPostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdDestroymediaTypeExtensionPostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdInteractionsmediaTypeExtensionGetSignalError() instead")
    void updatesIdInteractionsmediaTypeExtensionGetSignalE(OAIInteractions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdInteractionsmediaTypeExtensionGetSignalError(OAIInteractions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdMoveToTopmediaTypeExtensionPostSignalError() instead")
    void updatesIdMoveToTopmediaTypeExtensionPostSignalE(OAIUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdMoveToTopmediaTypeExtensionPostSignalError(OAIUpdate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdSharemediaTypeExtensionPostSignalError() instead")
    void updatesIdSharemediaTypeExtensionPostSignalE(OAISuccess summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdSharemediaTypeExtensionPostSignalError(OAISuccess summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdUpdatemediaTypeExtensionPostSignalError() instead")
    void updatesIdUpdatemediaTypeExtensionPostSignalE(OAIIndividual_update summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdUpdatemediaTypeExtensionPostSignalError(OAIIndividual_update summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdmediaTypeExtensionGetSignalError() instead")
    void updatesIdmediaTypeExtensionGetSignalE(OAIUpdate summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdmediaTypeExtensionGetSignalError(OAIUpdate summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usermediaTypeExtensionGetSignalError() instead")
    void usermediaTypeExtensionGetSignalE(OAIUser summary, QNetworkReply::NetworkError error_type, QString error_str);
    void usermediaTypeExtensionGetSignalError(OAIUser summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use infoConfigurationmediaTypeExtensionGetSignalErrorFull() instead")
    void infoConfigurationmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void infoConfigurationmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use linksSharesmediaTypeExtensionGetSignalErrorFull() instead")
    void linksSharesmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void linksSharesmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdSchedulesUpdatemediaTypeExtensionPostSignalErrorFull() instead")
    void profilesIdSchedulesUpdatemediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdSchedulesUpdatemediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdSchedulesmediaTypeExtensionGetSignalErrorFull() instead")
    void profilesIdSchedulesmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdSchedulesmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesPendingmediaTypeExtensionGetSignalErrorFull() instead")
    void profilesIdUpdatesPendingmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesPendingmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesReordermediaTypeExtensionPostSignalErrorFull() instead")
    void profilesIdUpdatesReordermediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesReordermediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesSentmediaTypeExtensionGetSignalErrorFull() instead")
    void profilesIdUpdatesSentmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesSentmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdUpdatesShufflemediaTypeExtensionPostSignalErrorFull() instead")
    void profilesIdUpdatesShufflemediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdUpdatesShufflemediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesIdmediaTypeExtensionGetSignalErrorFull() instead")
    void profilesIdmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesIdmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use profilesmediaTypeExtensionGetSignalErrorFull() instead")
    void profilesmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void profilesmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesCreatemediaTypeExtensionPostSignalErrorFull() instead")
    void updatesCreatemediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesCreatemediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdDestroymediaTypeExtensionPostSignalErrorFull() instead")
    void updatesIdDestroymediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdDestroymediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdInteractionsmediaTypeExtensionGetSignalErrorFull() instead")
    void updatesIdInteractionsmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdInteractionsmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdMoveToTopmediaTypeExtensionPostSignalErrorFull() instead")
    void updatesIdMoveToTopmediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdMoveToTopmediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdSharemediaTypeExtensionPostSignalErrorFull() instead")
    void updatesIdSharemediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdSharemediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdUpdatemediaTypeExtensionPostSignalErrorFull() instead")
    void updatesIdUpdatemediaTypeExtensionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdUpdatemediaTypeExtensionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatesIdmediaTypeExtensionGetSignalErrorFull() instead")
    void updatesIdmediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatesIdmediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use usermediaTypeExtensionGetSignalErrorFull() instead")
    void usermediaTypeExtensionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void usermediaTypeExtensionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
