/*
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.IndividualUpdate;
import org.openapitools.client.model.Interactions;
import java.time.LocalDate;
import org.openapitools.client.model.ModelConfiguration;
import org.openapitools.client.model.NewUpdate;
import org.openapitools.client.model.Profile;
import org.openapitools.client.model.ProfilesInner;
import org.openapitools.client.model.Schedules;
import org.openapitools.client.model.Shares;
import org.openapitools.client.model.Shuffle;
import org.openapitools.client.model.Success;
import org.openapitools.client.model.Update;
import org.openapitools.client.model.UpdatesArray;
import org.openapitools.client.model.User;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DefaultApi
 */
@Disabled
public class DefaultApiTest {

    private final DefaultApi api = new DefaultApi();

    /**
     * Returns an object with the current configuration that Buffer is using, including supported services, their icons and the varying limits of character and schedules.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void infoConfigurationmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        ModelConfiguration response = api.infoConfigurationmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns an object with a the numbers of shares a link has had using Buffer.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void linksSharesmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String url = null;
        Shares response = api.linksSharesmediaTypeExtensionGet(mediaTypeExtension, url);
        // TODO: test validations
    }

    /**
     * \&quot;Set the posting schedules for the specified social media profile. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdSchedulesUpdatemediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Success response = api.profilesIdSchedulesUpdatemediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns details of the posting schedules associated with a social media profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdSchedulesmediaTypeExtensionGetTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Schedules response = api.profilesIdSchedulesmediaTypeExtensionGet(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * \&quot;Returns an array of updates that are currently in the buffer for an individual social media profile. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdUpdatesPendingmediaTypeExtensionGetTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Integer page = null;
        Integer count = null;
        LocalDate since = null;
        Boolean utc = null;
        UpdatesArray response = api.profilesIdUpdatesPendingmediaTypeExtensionGet(id, mediaTypeExtension, page, count, since, utc);
        // TODO: test validations
    }

    /**
     * Edit the order at which statuses for the specified social media profile will be sent out of the buffer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdUpdatesReordermediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Shuffle response = api.profilesIdUpdatesReordermediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns an array of updates that have been sent from the buffer for an individual social media profile. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdUpdatesSentmediaTypeExtensionGetTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Integer page = null;
        Integer count = null;
        LocalDate since = null;
        Boolean utc = null;
        UpdatesArray response = api.profilesIdUpdatesSentmediaTypeExtensionGet(id, mediaTypeExtension, page, count, since, utc);
        // TODO: test validations
    }

    /**
     * Randomize the order at which statuses for the specified social media profile will be sent out of the buffer. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdUpdatesShufflemediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Shuffle response = api.profilesIdUpdatesShufflemediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns details of the single specified social media profile.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesIdmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String id = null;
        Profile response = api.profilesIdmediaTypeExtensionGet(mediaTypeExtension, id);
        // TODO: test validations
    }

    /**
     * Returns an array of social media profiles connected to a users account.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void profilesmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        List<ProfilesInner> response = api.profilesmediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Create one or more new status updates. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesCreatemediaTypeExtensionPostTest() throws ApiException {
        String mediaTypeExtension = null;
        NewUpdate response = api.updatesCreatemediaTypeExtensionPost(mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Permanently delete an existing status update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesIdDestroymediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Success response = api.updatesIdDestroymediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns the detailed information on individual interactions with the social media update such as favorites, retweets and likes. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesIdInteractionsmediaTypeExtensionGetTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        String event = null;
        Integer page = null;
        Integer count = null;
        Interactions response = api.updatesIdInteractionsmediaTypeExtensionGet(id, mediaTypeExtension, event, page, count);
        // TODO: test validations
    }

    /**
     * Move an existing status update to the top of the queue and recalculate times for all updates in the queue. Returns the update with its new posting time.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesIdMoveToTopmediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Update response = api.updatesIdMoveToTopmediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Immediately shares a single pending update and recalculates times for updates remaining in the queue.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesIdSharemediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        Success response = api.updatesIdSharemediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Edit an existing, individual status update. 
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesIdUpdatemediaTypeExtensionPostTest() throws ApiException {
        String id = null;
        String mediaTypeExtension = null;
        IndividualUpdate response = api.updatesIdUpdatemediaTypeExtensionPost(id, mediaTypeExtension);
        // TODO: test validations
    }

    /**
     * Returns a single social media update.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatesIdmediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        String id = null;
        Update response = api.updatesIdmediaTypeExtensionGet(mediaTypeExtension, id);
        // TODO: test validations
    }

    /**
     * Returns a single user.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void usermediaTypeExtensionGetTest() throws ApiException {
        String mediaTypeExtension = null;
        User response = api.usermediaTypeExtensionGet(mediaTypeExtension);
        // TODO: test validations
    }

}
