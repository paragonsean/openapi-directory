/*
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ConfigurationServicesAppdotnetTypesProfileIcons;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationServicesAppdotnetTypesProfile
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:44.110075-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationServicesAppdotnetTypesProfile {
  public static final String SERIALIZED_NAME_CHARACTER_LIMIT = "character_limit";
  @SerializedName(SERIALIZED_NAME_CHARACTER_LIMIT)
  private BigDecimal characterLimit;

  public static final String SERIALIZED_NAME_ICONS = "icons";
  @SerializedName(SERIALIZED_NAME_ICONS)
  private ConfigurationServicesAppdotnetTypesProfileIcons icons;

  public static final String SERIALIZED_NAME_LINK_ATTACHMENTS = "link_attachments";
  @SerializedName(SERIALIZED_NAME_LINK_ATTACHMENTS)
  private Boolean linkAttachments;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SCHEDULE_LIMIT = "schedule_limit";
  @SerializedName(SERIALIZED_NAME_SCHEDULE_LIMIT)
  private BigDecimal scheduleLimit;

  public static final String SERIALIZED_NAME_SUPPORTED_INTERACTIONS = "supported_interactions";
  @SerializedName(SERIALIZED_NAME_SUPPORTED_INTERACTIONS)
  private List<Object> supportedInteractions = new ArrayList<>();

  public ConfigurationServicesAppdotnetTypesProfile() {
  }

  public ConfigurationServicesAppdotnetTypesProfile characterLimit(BigDecimal characterLimit) {
    this.characterLimit = characterLimit;
    return this;
  }

  /**
   * Get characterLimit
   * @return characterLimit
   */
  @javax.annotation.Nullable
  public BigDecimal getCharacterLimit() {
    return characterLimit;
  }

  public void setCharacterLimit(BigDecimal characterLimit) {
    this.characterLimit = characterLimit;
  }


  public ConfigurationServicesAppdotnetTypesProfile icons(ConfigurationServicesAppdotnetTypesProfileIcons icons) {
    this.icons = icons;
    return this;
  }

  /**
   * Get icons
   * @return icons
   */
  @javax.annotation.Nullable
  public ConfigurationServicesAppdotnetTypesProfileIcons getIcons() {
    return icons;
  }

  public void setIcons(ConfigurationServicesAppdotnetTypesProfileIcons icons) {
    this.icons = icons;
  }


  public ConfigurationServicesAppdotnetTypesProfile linkAttachments(Boolean linkAttachments) {
    this.linkAttachments = linkAttachments;
    return this;
  }

  /**
   * Get linkAttachments
   * @return linkAttachments
   */
  @javax.annotation.Nullable
  public Boolean getLinkAttachments() {
    return linkAttachments;
  }

  public void setLinkAttachments(Boolean linkAttachments) {
    this.linkAttachments = linkAttachments;
  }


  public ConfigurationServicesAppdotnetTypesProfile name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ConfigurationServicesAppdotnetTypesProfile scheduleLimit(BigDecimal scheduleLimit) {
    this.scheduleLimit = scheduleLimit;
    return this;
  }

  /**
   * Get scheduleLimit
   * @return scheduleLimit
   */
  @javax.annotation.Nullable
  public BigDecimal getScheduleLimit() {
    return scheduleLimit;
  }

  public void setScheduleLimit(BigDecimal scheduleLimit) {
    this.scheduleLimit = scheduleLimit;
  }


  public ConfigurationServicesAppdotnetTypesProfile supportedInteractions(List<Object> supportedInteractions) {
    this.supportedInteractions = supportedInteractions;
    return this;
  }

  public ConfigurationServicesAppdotnetTypesProfile addSupportedInteractionsItem(Object supportedInteractionsItem) {
    if (this.supportedInteractions == null) {
      this.supportedInteractions = new ArrayList<>();
    }
    this.supportedInteractions.add(supportedInteractionsItem);
    return this;
  }

  /**
   * Get supportedInteractions
   * @return supportedInteractions
   */
  @javax.annotation.Nullable
  public List<Object> getSupportedInteractions() {
    return supportedInteractions;
  }

  public void setSupportedInteractions(List<Object> supportedInteractions) {
    this.supportedInteractions = supportedInteractions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationServicesAppdotnetTypesProfile configurationServicesAppdotnetTypesProfile = (ConfigurationServicesAppdotnetTypesProfile) o;
    return Objects.equals(this.characterLimit, configurationServicesAppdotnetTypesProfile.characterLimit) &&
        Objects.equals(this.icons, configurationServicesAppdotnetTypesProfile.icons) &&
        Objects.equals(this.linkAttachments, configurationServicesAppdotnetTypesProfile.linkAttachments) &&
        Objects.equals(this.name, configurationServicesAppdotnetTypesProfile.name) &&
        Objects.equals(this.scheduleLimit, configurationServicesAppdotnetTypesProfile.scheduleLimit) &&
        Objects.equals(this.supportedInteractions, configurationServicesAppdotnetTypesProfile.supportedInteractions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(characterLimit, icons, linkAttachments, name, scheduleLimit, supportedInteractions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationServicesAppdotnetTypesProfile {\n");
    sb.append("    characterLimit: ").append(toIndentedString(characterLimit)).append("\n");
    sb.append("    icons: ").append(toIndentedString(icons)).append("\n");
    sb.append("    linkAttachments: ").append(toIndentedString(linkAttachments)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    scheduleLimit: ").append(toIndentedString(scheduleLimit)).append("\n");
    sb.append("    supportedInteractions: ").append(toIndentedString(supportedInteractions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("character_limit");
    openapiFields.add("icons");
    openapiFields.add("link_attachments");
    openapiFields.add("name");
    openapiFields.add("schedule_limit");
    openapiFields.add("supported_interactions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationServicesAppdotnetTypesProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationServicesAppdotnetTypesProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationServicesAppdotnetTypesProfile is not found in the empty JSON string", ConfigurationServicesAppdotnetTypesProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationServicesAppdotnetTypesProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationServicesAppdotnetTypesProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `icons`
      if (jsonObj.get("icons") != null && !jsonObj.get("icons").isJsonNull()) {
        ConfigurationServicesAppdotnetTypesProfileIcons.validateJsonElement(jsonObj.get("icons"));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("supported_interactions") != null && !jsonObj.get("supported_interactions").isJsonNull() && !jsonObj.get("supported_interactions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `supported_interactions` to be an array in the JSON string but got `%s`", jsonObj.get("supported_interactions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationServicesAppdotnetTypesProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationServicesAppdotnetTypesProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationServicesAppdotnetTypesProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationServicesAppdotnetTypesProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationServicesAppdotnetTypesProfile>() {
           @Override
           public void write(JsonWriter out, ConfigurationServicesAppdotnetTypesProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationServicesAppdotnetTypesProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationServicesAppdotnetTypesProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationServicesAppdotnetTypesProfile
   * @throws IOException if the JSON string is invalid with respect to ConfigurationServicesAppdotnetTypesProfile
   */
  public static ConfigurationServicesAppdotnetTypesProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationServicesAppdotnetTypesProfile.class);
  }

  /**
   * Convert an instance of ConfigurationServicesAppdotnetTypesProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

