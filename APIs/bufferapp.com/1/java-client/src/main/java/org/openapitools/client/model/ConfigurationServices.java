/*
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ConfigurationServicesAppdotnet;
import org.openapitools.client.model.ConfigurationServicesFacebook;
import org.openapitools.client.model.ConfigurationServicesGoogle;
import org.openapitools.client.model.ConfigurationServicesTwitter;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ConfigurationServices
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:44.110075-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ConfigurationServices {
  public static final String SERIALIZED_NAME_APPDOTNET = "appdotnet";
  @SerializedName(SERIALIZED_NAME_APPDOTNET)
  private ConfigurationServicesAppdotnet appdotnet;

  public static final String SERIALIZED_NAME_FACEBOOK = "facebook";
  @SerializedName(SERIALIZED_NAME_FACEBOOK)
  private ConfigurationServicesFacebook facebook;

  public static final String SERIALIZED_NAME_GOOGLE = "google";
  @SerializedName(SERIALIZED_NAME_GOOGLE)
  private ConfigurationServicesGoogle google;

  public static final String SERIALIZED_NAME_LINKEDIN = "linkedin";
  @SerializedName(SERIALIZED_NAME_LINKEDIN)
  private ConfigurationServicesFacebook linkedin;

  public static final String SERIALIZED_NAME_TWITTER = "twitter";
  @SerializedName(SERIALIZED_NAME_TWITTER)
  private ConfigurationServicesTwitter twitter;

  public ConfigurationServices() {
  }

  public ConfigurationServices appdotnet(ConfigurationServicesAppdotnet appdotnet) {
    this.appdotnet = appdotnet;
    return this;
  }

  /**
   * Get appdotnet
   * @return appdotnet
   */
  @javax.annotation.Nullable
  public ConfigurationServicesAppdotnet getAppdotnet() {
    return appdotnet;
  }

  public void setAppdotnet(ConfigurationServicesAppdotnet appdotnet) {
    this.appdotnet = appdotnet;
  }


  public ConfigurationServices facebook(ConfigurationServicesFacebook facebook) {
    this.facebook = facebook;
    return this;
  }

  /**
   * Get facebook
   * @return facebook
   */
  @javax.annotation.Nullable
  public ConfigurationServicesFacebook getFacebook() {
    return facebook;
  }

  public void setFacebook(ConfigurationServicesFacebook facebook) {
    this.facebook = facebook;
  }


  public ConfigurationServices google(ConfigurationServicesGoogle google) {
    this.google = google;
    return this;
  }

  /**
   * Get google
   * @return google
   */
  @javax.annotation.Nullable
  public ConfigurationServicesGoogle getGoogle() {
    return google;
  }

  public void setGoogle(ConfigurationServicesGoogle google) {
    this.google = google;
  }


  public ConfigurationServices linkedin(ConfigurationServicesFacebook linkedin) {
    this.linkedin = linkedin;
    return this;
  }

  /**
   * Get linkedin
   * @return linkedin
   */
  @javax.annotation.Nullable
  public ConfigurationServicesFacebook getLinkedin() {
    return linkedin;
  }

  public void setLinkedin(ConfigurationServicesFacebook linkedin) {
    this.linkedin = linkedin;
  }


  public ConfigurationServices twitter(ConfigurationServicesTwitter twitter) {
    this.twitter = twitter;
    return this;
  }

  /**
   * Get twitter
   * @return twitter
   */
  @javax.annotation.Nullable
  public ConfigurationServicesTwitter getTwitter() {
    return twitter;
  }

  public void setTwitter(ConfigurationServicesTwitter twitter) {
    this.twitter = twitter;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ConfigurationServices configurationServices = (ConfigurationServices) o;
    return Objects.equals(this.appdotnet, configurationServices.appdotnet) &&
        Objects.equals(this.facebook, configurationServices.facebook) &&
        Objects.equals(this.google, configurationServices.google) &&
        Objects.equals(this.linkedin, configurationServices.linkedin) &&
        Objects.equals(this.twitter, configurationServices.twitter);
  }

  @Override
  public int hashCode() {
    return Objects.hash(appdotnet, facebook, google, linkedin, twitter);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ConfigurationServices {\n");
    sb.append("    appdotnet: ").append(toIndentedString(appdotnet)).append("\n");
    sb.append("    facebook: ").append(toIndentedString(facebook)).append("\n");
    sb.append("    google: ").append(toIndentedString(google)).append("\n");
    sb.append("    linkedin: ").append(toIndentedString(linkedin)).append("\n");
    sb.append("    twitter: ").append(toIndentedString(twitter)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("appdotnet");
    openapiFields.add("facebook");
    openapiFields.add("google");
    openapiFields.add("linkedin");
    openapiFields.add("twitter");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ConfigurationServices
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ConfigurationServices.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ConfigurationServices is not found in the empty JSON string", ConfigurationServices.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ConfigurationServices.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ConfigurationServices` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `appdotnet`
      if (jsonObj.get("appdotnet") != null && !jsonObj.get("appdotnet").isJsonNull()) {
        ConfigurationServicesAppdotnet.validateJsonElement(jsonObj.get("appdotnet"));
      }
      // validate the optional field `facebook`
      if (jsonObj.get("facebook") != null && !jsonObj.get("facebook").isJsonNull()) {
        ConfigurationServicesFacebook.validateJsonElement(jsonObj.get("facebook"));
      }
      // validate the optional field `google`
      if (jsonObj.get("google") != null && !jsonObj.get("google").isJsonNull()) {
        ConfigurationServicesGoogle.validateJsonElement(jsonObj.get("google"));
      }
      // validate the optional field `linkedin`
      if (jsonObj.get("linkedin") != null && !jsonObj.get("linkedin").isJsonNull()) {
        ConfigurationServicesFacebook.validateJsonElement(jsonObj.get("linkedin"));
      }
      // validate the optional field `twitter`
      if (jsonObj.get("twitter") != null && !jsonObj.get("twitter").isJsonNull()) {
        ConfigurationServicesTwitter.validateJsonElement(jsonObj.get("twitter"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ConfigurationServices.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ConfigurationServices' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ConfigurationServices> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ConfigurationServices.class));

       return (TypeAdapter<T>) new TypeAdapter<ConfigurationServices>() {
           @Override
           public void write(JsonWriter out, ConfigurationServices value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ConfigurationServices read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ConfigurationServices given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ConfigurationServices
   * @throws IOException if the JSON string is invalid with respect to ConfigurationServices
   */
  public static ConfigurationServices fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ConfigurationServices.class);
  }

  /**
   * Convert an instance of ConfigurationServices to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

