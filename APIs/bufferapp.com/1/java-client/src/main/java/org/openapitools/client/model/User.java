/*
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:59:44.110075-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class User {
  public static final String SERIALIZED_NAME_ID = "_id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ACTIVITY_AT = "activity_at";
  @SerializedName(SERIALIZED_NAME_ACTIVITY_AT)
  private BigDecimal activityAt;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private BigDecimal createdAt;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_PLAN = "plan";
  @SerializedName(SERIALIZED_NAME_PLAN)
  private String plan;

  public static final String SERIALIZED_NAME_REFERRAL_LINK = "referral_link";
  @SerializedName(SERIALIZED_NAME_REFERRAL_LINK)
  private String referralLink;

  public static final String SERIALIZED_NAME_REFERRAL_TOKEN = "referral_token";
  @SerializedName(SERIALIZED_NAME_REFERRAL_TOKEN)
  private String referralToken;

  public static final String SERIALIZED_NAME_SECRET_EMAIL = "secret_email";
  @SerializedName(SERIALIZED_NAME_SECRET_EMAIL)
  private String secretEmail;

  public static final String SERIALIZED_NAME_TIMEZONE = "timezone";
  @SerializedName(SERIALIZED_NAME_TIMEZONE)
  private String timezone;

  public User() {
  }

  public User id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public User activityAt(BigDecimal activityAt) {
    this.activityAt = activityAt;
    return this;
  }

  /**
   * Get activityAt
   * @return activityAt
   */
  @javax.annotation.Nullable
  public BigDecimal getActivityAt() {
    return activityAt;
  }

  public void setActivityAt(BigDecimal activityAt) {
    this.activityAt = activityAt;
  }


  public User createdAt(BigDecimal createdAt) {
    this.createdAt = createdAt;
    return this;
  }

  /**
   * Get createdAt
   * @return createdAt
   */
  @javax.annotation.Nullable
  public BigDecimal getCreatedAt() {
    return createdAt;
  }

  public void setCreatedAt(BigDecimal createdAt) {
    this.createdAt = createdAt;
  }


  public User id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public User plan(String plan) {
    this.plan = plan;
    return this;
  }

  /**
   * Get plan
   * @return plan
   */
  @javax.annotation.Nullable
  public String getPlan() {
    return plan;
  }

  public void setPlan(String plan) {
    this.plan = plan;
  }


  public User referralLink(String referralLink) {
    this.referralLink = referralLink;
    return this;
  }

  /**
   * Get referralLink
   * @return referralLink
   */
  @javax.annotation.Nullable
  public String getReferralLink() {
    return referralLink;
  }

  public void setReferralLink(String referralLink) {
    this.referralLink = referralLink;
  }


  public User referralToken(String referralToken) {
    this.referralToken = referralToken;
    return this;
  }

  /**
   * Get referralToken
   * @return referralToken
   */
  @javax.annotation.Nullable
  public String getReferralToken() {
    return referralToken;
  }

  public void setReferralToken(String referralToken) {
    this.referralToken = referralToken;
  }


  public User secretEmail(String secretEmail) {
    this.secretEmail = secretEmail;
    return this;
  }

  /**
   * Get secretEmail
   * @return secretEmail
   */
  @javax.annotation.Nullable
  public String getSecretEmail() {
    return secretEmail;
  }

  public void setSecretEmail(String secretEmail) {
    this.secretEmail = secretEmail;
  }


  public User timezone(String timezone) {
    this.timezone = timezone;
    return this;
  }

  /**
   * Get timezone
   * @return timezone
   */
  @javax.annotation.Nullable
  public String getTimezone() {
    return timezone;
  }

  public void setTimezone(String timezone) {
    this.timezone = timezone;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    User user = (User) o;
    return Objects.equals(this.id, user.id) &&
        Objects.equals(this.activityAt, user.activityAt) &&
        Objects.equals(this.createdAt, user.createdAt) &&
        Objects.equals(this.id, user.id) &&
        Objects.equals(this.plan, user.plan) &&
        Objects.equals(this.referralLink, user.referralLink) &&
        Objects.equals(this.referralToken, user.referralToken) &&
        Objects.equals(this.secretEmail, user.secretEmail) &&
        Objects.equals(this.timezone, user.timezone);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, activityAt, createdAt, id, plan, referralLink, referralToken, secretEmail, timezone);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class User {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    activityAt: ").append(toIndentedString(activityAt)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    plan: ").append(toIndentedString(plan)).append("\n");
    sb.append("    referralLink: ").append(toIndentedString(referralLink)).append("\n");
    sb.append("    referralToken: ").append(toIndentedString(referralToken)).append("\n");
    sb.append("    secretEmail: ").append(toIndentedString(secretEmail)).append("\n");
    sb.append("    timezone: ").append(toIndentedString(timezone)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("_id");
    openapiFields.add("activity_at");
    openapiFields.add("created_at");
    openapiFields.add("id");
    openapiFields.add("plan");
    openapiFields.add("referral_link");
    openapiFields.add("referral_token");
    openapiFields.add("secret_email");
    openapiFields.add("timezone");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to User
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!User.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in User is not found in the empty JSON string", User.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!User.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `User` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("_id") != null && !jsonObj.get("_id").isJsonNull()) && !jsonObj.get("_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("_id").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("plan") != null && !jsonObj.get("plan").isJsonNull()) && !jsonObj.get("plan").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `plan` to be a primitive type in the JSON string but got `%s`", jsonObj.get("plan").toString()));
      }
      if ((jsonObj.get("referral_link") != null && !jsonObj.get("referral_link").isJsonNull()) && !jsonObj.get("referral_link").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referral_link` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referral_link").toString()));
      }
      if ((jsonObj.get("referral_token") != null && !jsonObj.get("referral_token").isJsonNull()) && !jsonObj.get("referral_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `referral_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("referral_token").toString()));
      }
      if ((jsonObj.get("secret_email") != null && !jsonObj.get("secret_email").isJsonNull()) && !jsonObj.get("secret_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `secret_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("secret_email").toString()));
      }
      if ((jsonObj.get("timezone") != null && !jsonObj.get("timezone").isJsonNull()) && !jsonObj.get("timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("timezone").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!User.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'User' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<User> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(User.class));

       return (TypeAdapter<T>) new TypeAdapter<User>() {
           @Override
           public void write(JsonWriter out, User value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public User read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of User given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of User
   * @throws IOException if the JSON string is invalid with respect to User
   */
  public static User fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, User.class);
  }

  /**
   * Convert an instance of User to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

