/**
 * Bufferapp
 * Social media management for marketers and agencies
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Configuration from '../model/Configuration';
import IndividualUpdate from '../model/IndividualUpdate';
import Interactions from '../model/Interactions';
import NewUpdate from '../model/NewUpdate';
import Profile from '../model/Profile';
import ProfilesInner from '../model/ProfilesInner';
import Schedules from '../model/Schedules';
import Shares from '../model/Shares';
import Shuffle from '../model/Shuffle';
import Success from '../model/Success';
import Update from '../model/Update';
import UpdatesArray from '../model/UpdatesArray';
import User from '../model/User';

/**
* Default service.
* @module api/DefaultApi
* @version 1
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the infoConfigurationmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~infoConfigurationmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Configuration} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an object with the current configuration that Buffer is using, including supported services, their icons and the varying limits of character and schedules.
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~infoConfigurationmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Configuration}
     */
    infoConfigurationmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling infoConfigurationmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Configuration;
      return this.apiClient.callApi(
        '/info/configuration{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the linksSharesmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~linksSharesmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shares} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an object with a the numbers of shares a link has had using Buffer.
     * @param {module:model/String} mediaTypeExtension 
     * @param {String} url URL-encoded URL of the page for which the number of shares is requested.
     * @param {module:api/DefaultApi~linksSharesmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shares}
     */
    linksSharesmediaTypeExtensionGet(mediaTypeExtension, url, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling linksSharesmediaTypeExtensionGet");
      }
      // verify the required parameter 'url' is set
      if (url === undefined || url === null) {
        throw new Error("Missing the required parameter 'url' when calling linksSharesmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
        'url': url
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shares;
      return this.apiClient.callApi(
        '/links/shares{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdSchedulesUpdatemediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~profilesIdSchedulesUpdatemediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Set the posting schedules for the specified social media profile. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~profilesIdSchedulesUpdatemediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    profilesIdSchedulesUpdatemediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdSchedulesUpdatemediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdSchedulesUpdatemediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/profiles/{id}/schedules/update{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdSchedulesmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~profilesIdSchedulesmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Schedules} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of the posting schedules associated with a social media profile.
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~profilesIdSchedulesmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Schedules}
     */
    profilesIdSchedulesmediaTypeExtensionGet(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdSchedulesmediaTypeExtensionGet");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdSchedulesmediaTypeExtensionGet");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Schedules;
      return this.apiClient.callApi(
        '/profiles/{id}/schedules{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdUpdatesPendingmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~profilesIdUpdatesPendingmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatesArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * \"Returns an array of updates that are currently in the buffer for an individual social media profile. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Specifies the page of status updates to receive. If not specified the first page of results will be returned.
     * @param {Number} [count] Specifies the number of status updates to receive. If provided, must be between 1 and 100.
     * @param {Date} [since] Specifies a unix timestamp which only status updates created after this time will be retrieved.
     * @param {Boolean} [utc] If utc is set times will be returned relative to UTC rather than the users associated timezone.
     * @param {module:api/DefaultApi~profilesIdUpdatesPendingmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatesArray}
     */
    profilesIdUpdatesPendingmediaTypeExtensionGet(id, mediaTypeExtension, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdUpdatesPendingmediaTypeExtensionGet");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdUpdatesPendingmediaTypeExtensionGet");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'since': opts['since'],
        'utc': opts['utc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdatesArray;
      return this.apiClient.callApi(
        '/profiles/{id}/updates/pending{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdUpdatesReordermediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~profilesIdUpdatesReordermediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shuffle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit the order at which statuses for the specified social media profile will be sent out of the buffer. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~profilesIdUpdatesReordermediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shuffle}
     */
    profilesIdUpdatesReordermediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdUpdatesReordermediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdUpdatesReordermediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shuffle;
      return this.apiClient.callApi(
        '/profiles/{id}/updates/reorder{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdUpdatesSentmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~profilesIdUpdatesSentmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatesArray} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of updates that have been sent from the buffer for an individual social media profile. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Specifies the page of status updates to receive. If not specified the first page of results will be returned.
     * @param {Number} [count] Specifies the number of status updates to receive. If provided, must be between 1 and 100.
     * @param {Date} [since] Specifies a unix timestamp which only status updates created after this time will be retrieved.
     * @param {Boolean} [utc] If utc is set times will be returned relative to UTC rather than the users associated timezone.
     * @param {module:api/DefaultApi~profilesIdUpdatesSentmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatesArray}
     */
    profilesIdUpdatesSentmediaTypeExtensionGet(id, mediaTypeExtension, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdUpdatesSentmediaTypeExtensionGet");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdUpdatesSentmediaTypeExtensionGet");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
        'page': opts['page'],
        'count': opts['count'],
        'since': opts['since'],
        'utc': opts['utc']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdatesArray;
      return this.apiClient.callApi(
        '/profiles/{id}/updates/sent{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdUpdatesShufflemediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~profilesIdUpdatesShufflemediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Shuffle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Randomize the order at which statuses for the specified social media profile will be sent out of the buffer. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~profilesIdUpdatesShufflemediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Shuffle}
     */
    profilesIdUpdatesShufflemediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdUpdatesShufflemediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdUpdatesShufflemediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Shuffle;
      return this.apiClient.callApi(
        '/profiles/{id}/updates/shuffle{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesIdmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~profilesIdmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Profile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns details of the single specified social media profile.
     * @param {module:model/String} mediaTypeExtension 
     * @param {String} id 
     * @param {module:api/DefaultApi~profilesIdmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Profile}
     */
    profilesIdmediaTypeExtensionGet(mediaTypeExtension, id, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesIdmediaTypeExtensionGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling profilesIdmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Profile;
      return this.apiClient.callApi(
        '/profiles/{id}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the profilesmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~profilesmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProfilesInner>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns an array of social media profiles connected to a users account.
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~profilesmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProfilesInner>}
     */
    profilesmediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling profilesmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [ProfilesInner];
      return this.apiClient.callApi(
        '/profiles{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesCreatemediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~updatesCreatemediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/NewUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create one or more new status updates. 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~updatesCreatemediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/NewUpdate}
     */
    updatesCreatemediaTypeExtensionPost(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesCreatemediaTypeExtensionPost");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = NewUpdate;
      return this.apiClient.callApi(
        '/updates/create{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesIdDestroymediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~updatesIdDestroymediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Permanently delete an existing status update.
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~updatesIdDestroymediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    updatesIdDestroymediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatesIdDestroymediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesIdDestroymediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/updates/{id}/destroy{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesIdInteractionsmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~updatesIdInteractionsmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Interactions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns the detailed information on individual interactions with the social media update such as favorites, retweets and likes. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {String} event Specifies a type of event to be retrieved, for example \"retweet\", \"like\", \"comment\", \"mention\" or \"reshare\". They can also be plural (e.g., \"reshares\"). Plurality has no effect other than visual semantics. See /info/configuration for more information on supported interaction events. 
     * @param {Object} opts Optional parameters
     * @param {Number} [page] Specifies the page of status updates to receive. If not specified the first page of results will be returned.
     * @param {Number} [count] Specifies the number of status updates to receive. If provided, must be between 1 and 100.
     * @param {module:api/DefaultApi~updatesIdInteractionsmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Interactions}
     */
    updatesIdInteractionsmediaTypeExtensionGet(id, mediaTypeExtension, event, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatesIdInteractionsmediaTypeExtensionGet");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesIdInteractionsmediaTypeExtensionGet");
      }
      // verify the required parameter 'event' is set
      if (event === undefined || event === null) {
        throw new Error("Missing the required parameter 'event' when calling updatesIdInteractionsmediaTypeExtensionGet");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
        'event': event,
        'page': opts['page'],
        'count': opts['count']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Interactions;
      return this.apiClient.callApi(
        '/updates/{id}/interactions{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesIdMoveToTopmediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~updatesIdMoveToTopmediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Update} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Move an existing status update to the top of the queue and recalculate times for all updates in the queue. Returns the update with its new posting time.
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~updatesIdMoveToTopmediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Update}
     */
    updatesIdMoveToTopmediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatesIdMoveToTopmediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesIdMoveToTopmediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Update;
      return this.apiClient.callApi(
        '/updates/{id}/move_to_top{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesIdSharemediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~updatesIdSharemediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Success} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Immediately shares a single pending update and recalculates times for updates remaining in the queue.
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~updatesIdSharemediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Success}
     */
    updatesIdSharemediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatesIdSharemediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesIdSharemediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Success;
      return this.apiClient.callApi(
        '/updates/{id}/share{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesIdUpdatemediaTypeExtensionPost operation.
     * @callback module:api/DefaultApi~updatesIdUpdatemediaTypeExtensionPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/IndividualUpdate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Edit an existing, individual status update. 
     * @param {String} id 
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~updatesIdUpdatemediaTypeExtensionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/IndividualUpdate}
     */
    updatesIdUpdatemediaTypeExtensionPost(id, mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatesIdUpdatemediaTypeExtensionPost");
      }
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesIdUpdatemediaTypeExtensionPost");
      }

      let pathParams = {
        'id': id,
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = IndividualUpdate;
      return this.apiClient.callApi(
        '/updates/{id}/update{mediaTypeExtension}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatesIdmediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~updatesIdmediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Update} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single social media update.
     * @param {module:model/String} mediaTypeExtension 
     * @param {String} id 
     * @param {module:api/DefaultApi~updatesIdmediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Update}
     */
    updatesIdmediaTypeExtensionGet(mediaTypeExtension, id, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling updatesIdmediaTypeExtensionGet");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling updatesIdmediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Update;
      return this.apiClient.callApi(
        '/updates/{id}{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the usermediaTypeExtensionGet operation.
     * @callback module:api/DefaultApi~usermediaTypeExtensionGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Returns a single user.
     * @param {module:model/String} mediaTypeExtension 
     * @param {module:api/DefaultApi~usermediaTypeExtensionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    usermediaTypeExtensionGet(mediaTypeExtension, callback) {
      let postBody = null;
      // verify the required parameter 'mediaTypeExtension' is set
      if (mediaTypeExtension === undefined || mediaTypeExtension === null) {
        throw new Error("Missing the required parameter 'mediaTypeExtension' when calling usermediaTypeExtensionGet");
      }

      let pathParams = {
        'mediaTypeExtension': mediaTypeExtension
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = User;
      return this.apiClient.callApi(
        '/user{mediaTypeExtension}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
