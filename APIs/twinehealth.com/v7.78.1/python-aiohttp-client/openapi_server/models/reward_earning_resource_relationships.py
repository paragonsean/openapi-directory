# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_history_resource_relationships_receiver import EmailHistoryResourceRelationshipsReceiver
from openapi_server.models.reward_earning_fulfillment_resource_relationships_patient import RewardEarningFulfillmentResourceRelationshipsPatient
from openapi_server import util


class RewardEarningResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group: RewardEarningFulfillmentResourceRelationshipsPatient=None, patient: RewardEarningFulfillmentResourceRelationshipsPatient=None, reward: EmailHistoryResourceRelationshipsReceiver=None, reward_program_activation: RewardEarningFulfillmentResourceRelationshipsPatient=None):
        """RewardEarningResourceRelationships - a model defined in OpenAPI

        :param group: The group of this RewardEarningResourceRelationships.
        :param patient: The patient of this RewardEarningResourceRelationships.
        :param reward: The reward of this RewardEarningResourceRelationships.
        :param reward_program_activation: The reward_program_activation of this RewardEarningResourceRelationships.
        """
        self.openapi_types = {
            'group': RewardEarningFulfillmentResourceRelationshipsPatient,
            'patient': RewardEarningFulfillmentResourceRelationshipsPatient,
            'reward': EmailHistoryResourceRelationshipsReceiver,
            'reward_program_activation': RewardEarningFulfillmentResourceRelationshipsPatient
        }

        self.attribute_map = {
            'group': 'group',
            'patient': 'patient',
            'reward': 'reward',
            'reward_program_activation': 'reward_program_activation'
        }

        self._group = group
        self._patient = patient
        self._reward = reward
        self._reward_program_activation = reward_program_activation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardEarningResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardEarningResource_relationships of this RewardEarningResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self):
        """Gets the group of this RewardEarningResourceRelationships.


        :return: The group of this RewardEarningResourceRelationships.
        :rtype: RewardEarningFulfillmentResourceRelationshipsPatient
        """
        return self._group

    @group.setter
    def group(self, group):
        """Sets the group of this RewardEarningResourceRelationships.


        :param group: The group of this RewardEarningResourceRelationships.
        :type group: RewardEarningFulfillmentResourceRelationshipsPatient
        """

        self._group = group

    @property
    def patient(self):
        """Gets the patient of this RewardEarningResourceRelationships.


        :return: The patient of this RewardEarningResourceRelationships.
        :rtype: RewardEarningFulfillmentResourceRelationshipsPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this RewardEarningResourceRelationships.


        :param patient: The patient of this RewardEarningResourceRelationships.
        :type patient: RewardEarningFulfillmentResourceRelationshipsPatient
        """

        self._patient = patient

    @property
    def reward(self):
        """Gets the reward of this RewardEarningResourceRelationships.


        :return: The reward of this RewardEarningResourceRelationships.
        :rtype: EmailHistoryResourceRelationshipsReceiver
        """
        return self._reward

    @reward.setter
    def reward(self, reward):
        """Sets the reward of this RewardEarningResourceRelationships.


        :param reward: The reward of this RewardEarningResourceRelationships.
        :type reward: EmailHistoryResourceRelationshipsReceiver
        """
        if reward is None:
            raise ValueError("Invalid value for `reward`, must not be `None`")

        self._reward = reward

    @property
    def reward_program_activation(self):
        """Gets the reward_program_activation of this RewardEarningResourceRelationships.


        :return: The reward_program_activation of this RewardEarningResourceRelationships.
        :rtype: RewardEarningFulfillmentResourceRelationshipsPatient
        """
        return self._reward_program_activation

    @reward_program_activation.setter
    def reward_program_activation(self, reward_program_activation):
        """Sets the reward_program_activation of this RewardEarningResourceRelationships.


        :param reward_program_activation: The reward_program_activation of this RewardEarningResourceRelationships.
        :type reward_program_activation: RewardEarningFulfillmentResourceRelationshipsPatient
        """

        self._reward_program_activation = reward_program_activation
