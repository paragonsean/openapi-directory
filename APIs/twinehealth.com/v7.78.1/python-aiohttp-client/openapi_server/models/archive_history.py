# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ArchiveHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived: bool=None, modified_at: str=None, notes: str=None, reason: str=None):
        """ArchiveHistory - a model defined in OpenAPI

        :param archived: The archived of this ArchiveHistory.
        :param modified_at: The modified_at of this ArchiveHistory.
        :param notes: The notes of this ArchiveHistory.
        :param reason: The reason of this ArchiveHistory.
        """
        self.openapi_types = {
            'archived': bool,
            'modified_at': str,
            'notes': str,
            'reason': str
        }

        self.attribute_map = {
            'archived': 'archived',
            'modified_at': 'modified_at',
            'notes': 'notes',
            'reason': 'reason'
        }

        self._archived = archived
        self._modified_at = modified_at
        self._notes = notes
        self._reason = reason

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ArchiveHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ArchiveHistory of this ArchiveHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self):
        """Gets the archived of this ArchiveHistory.


        :return: The archived of this ArchiveHistory.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived):
        """Sets the archived of this ArchiveHistory.


        :param archived: The archived of this ArchiveHistory.
        :type archived: bool
        """

        self._archived = archived

    @property
    def modified_at(self):
        """Gets the modified_at of this ArchiveHistory.


        :return: The modified_at of this ArchiveHistory.
        :rtype: str
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this ArchiveHistory.


        :param modified_at: The modified_at of this ArchiveHistory.
        :type modified_at: str
        """

        self._modified_at = modified_at

    @property
    def notes(self):
        """Gets the notes of this ArchiveHistory.


        :return: The notes of this ArchiveHistory.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes):
        """Sets the notes of this ArchiveHistory.


        :param notes: The notes of this ArchiveHistory.
        :type notes: str
        """

        self._notes = notes

    @property
    def reason(self):
        """Gets the reason of this ArchiveHistory.


        :return: The reason of this ArchiveHistory.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason):
        """Sets the reason of this ArchiveHistory.


        :param reason: The reason of this ArchiveHistory.
        :type reason: str
        """

        self._reason = reason
