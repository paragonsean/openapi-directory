# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewardResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, thread: str=None, allocated_at: str=None, allocated_unit: str=None, allocated_value: float=None, description: str=None, earned_at: str=None, earned_value: float=None, fulfilled_at: str=None, fulfilled_value: float=None, target_at: str=None):
        """RewardResourceAttributes - a model defined in OpenAPI

        :param thread: The thread of this RewardResourceAttributes.
        :param allocated_at: The allocated_at of this RewardResourceAttributes.
        :param allocated_unit: The allocated_unit of this RewardResourceAttributes.
        :param allocated_value: The allocated_value of this RewardResourceAttributes.
        :param description: The description of this RewardResourceAttributes.
        :param earned_at: The earned_at of this RewardResourceAttributes.
        :param earned_value: The earned_value of this RewardResourceAttributes.
        :param fulfilled_at: The fulfilled_at of this RewardResourceAttributes.
        :param fulfilled_value: The fulfilled_value of this RewardResourceAttributes.
        :param target_at: The target_at of this RewardResourceAttributes.
        """
        self.openapi_types = {
            'thread': str,
            'allocated_at': str,
            'allocated_unit': str,
            'allocated_value': float,
            'description': str,
            'earned_at': str,
            'earned_value': float,
            'fulfilled_at': str,
            'fulfilled_value': float,
            'target_at': str
        }

        self.attribute_map = {
            'thread': '_thread',
            'allocated_at': 'allocated_at',
            'allocated_unit': 'allocated_unit',
            'allocated_value': 'allocated_value',
            'description': 'description',
            'earned_at': 'earned_at',
            'earned_value': 'earned_value',
            'fulfilled_at': 'fulfilled_at',
            'fulfilled_value': 'fulfilled_value',
            'target_at': 'target_at'
        }

        self._thread = thread
        self._allocated_at = allocated_at
        self._allocated_unit = allocated_unit
        self._allocated_value = allocated_value
        self._description = description
        self._earned_at = earned_at
        self._earned_value = earned_value
        self._fulfilled_at = fulfilled_at
        self._fulfilled_value = fulfilled_value
        self._target_at = target_at

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardResource_attributes of this RewardResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thread(self):
        """Gets the thread of this RewardResourceAttributes.

        Unique string identifying the health action with which the reward is associated.

        :return: The thread of this RewardResourceAttributes.
        :rtype: str
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this RewardResourceAttributes.

        Unique string identifying the health action with which the reward is associated.

        :param thread: The thread of this RewardResourceAttributes.
        :type thread: str
        """

        self._thread = thread

    @property
    def allocated_at(self):
        """Gets the allocated_at of this RewardResourceAttributes.

        Date at which the reward was allocated. (Must be after the reward program is activated and before it is deactivated or expires)

        :return: The allocated_at of this RewardResourceAttributes.
        :rtype: str
        """
        return self._allocated_at

    @allocated_at.setter
    def allocated_at(self, allocated_at):
        """Sets the allocated_at of this RewardResourceAttributes.

        Date at which the reward was allocated. (Must be after the reward program is activated and before it is deactivated or expires)

        :param allocated_at: The allocated_at of this RewardResourceAttributes.
        :type allocated_at: str
        """
        if allocated_at is None:
            raise ValueError("Invalid value for `allocated_at`, must not be `None`")

        self._allocated_at = allocated_at

    @property
    def allocated_unit(self):
        """Gets the allocated_unit of this RewardResourceAttributes.

        Unit of the reward program. (Read-only property)

        :return: The allocated_unit of this RewardResourceAttributes.
        :rtype: str
        """
        return self._allocated_unit

    @allocated_unit.setter
    def allocated_unit(self, allocated_unit):
        """Sets the allocated_unit of this RewardResourceAttributes.

        Unit of the reward program. (Read-only property)

        :param allocated_unit: The allocated_unit of this RewardResourceAttributes.
        :type allocated_unit: str
        """

        self._allocated_unit = allocated_unit

    @property
    def allocated_value(self):
        """Gets the allocated_value of this RewardResourceAttributes.

        Value of the reward program budget allocated for the reward. (Must not exceed the remaining budget for the reward program activation)

        :return: The allocated_value of this RewardResourceAttributes.
        :rtype: float
        """
        return self._allocated_value

    @allocated_value.setter
    def allocated_value(self, allocated_value):
        """Sets the allocated_value of this RewardResourceAttributes.

        Value of the reward program budget allocated for the reward. (Must not exceed the remaining budget for the reward program activation)

        :param allocated_value: The allocated_value of this RewardResourceAttributes.
        :type allocated_value: float
        """
        if allocated_value is None:
            raise ValueError("Invalid value for `allocated_value`, must not be `None`")

        self._allocated_value = allocated_value

    @property
    def description(self):
        """Gets the description of this RewardResourceAttributes.

        Description of the reward.

        :return: The description of this RewardResourceAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RewardResourceAttributes.

        Description of the reward.

        :param description: The description of this RewardResourceAttributes.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def earned_at(self):
        """Gets the earned_at of this RewardResourceAttributes.

        Date at which the reward was earned. (Read-only property)

        :return: The earned_at of this RewardResourceAttributes.
        :rtype: str
        """
        return self._earned_at

    @earned_at.setter
    def earned_at(self, earned_at):
        """Sets the earned_at of this RewardResourceAttributes.

        Date at which the reward was earned. (Read-only property)

        :param earned_at: The earned_at of this RewardResourceAttributes.
        :type earned_at: str
        """

        self._earned_at = earned_at

    @property
    def earned_value(self):
        """Gets the earned_value of this RewardResourceAttributes.

        Value of the reward that has been earned. (Read-only property)

        :return: The earned_value of this RewardResourceAttributes.
        :rtype: float
        """
        return self._earned_value

    @earned_value.setter
    def earned_value(self, earned_value):
        """Sets the earned_value of this RewardResourceAttributes.

        Value of the reward that has been earned. (Read-only property)

        :param earned_value: The earned_value of this RewardResourceAttributes.
        :type earned_value: float
        """

        self._earned_value = earned_value

    @property
    def fulfilled_at(self):
        """Gets the fulfilled_at of this RewardResourceAttributes.

        Date at which the reward earning was fulfilled. (Read-only property)

        :return: The fulfilled_at of this RewardResourceAttributes.
        :rtype: str
        """
        return self._fulfilled_at

    @fulfilled_at.setter
    def fulfilled_at(self, fulfilled_at):
        """Sets the fulfilled_at of this RewardResourceAttributes.

        Date at which the reward earning was fulfilled. (Read-only property)

        :param fulfilled_at: The fulfilled_at of this RewardResourceAttributes.
        :type fulfilled_at: str
        """

        self._fulfilled_at = fulfilled_at

    @property
    def fulfilled_value(self):
        """Gets the fulfilled_value of this RewardResourceAttributes.

        Value of the earned reward that has been fulfilled. (Read-only property)

        :return: The fulfilled_value of this RewardResourceAttributes.
        :rtype: float
        """
        return self._fulfilled_value

    @fulfilled_value.setter
    def fulfilled_value(self, fulfilled_value):
        """Sets the fulfilled_value of this RewardResourceAttributes.

        Value of the earned reward that has been fulfilled. (Read-only property)

        :param fulfilled_value: The fulfilled_value of this RewardResourceAttributes.
        :type fulfilled_value: float
        """

        self._fulfilled_value = fulfilled_value

    @property
    def target_at(self):
        """Gets the target_at of this RewardResourceAttributes.

        Date at which the patient aspires to achieve the reward. (Must be the same or after the allocated_at date)

        :return: The target_at of this RewardResourceAttributes.
        :rtype: str
        """
        return self._target_at

    @target_at.setter
    def target_at(self, target_at):
        """Sets the target_at of this RewardResourceAttributes.

        Date at which the patient aspires to achieve the reward. (Must be the same or after the allocated_at date)

        :param target_at: The target_at of this RewardResourceAttributes.
        :type target_at: str
        """

        self._target_at = target_at
