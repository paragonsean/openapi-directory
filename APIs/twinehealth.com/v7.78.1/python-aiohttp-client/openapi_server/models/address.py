# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Address(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, city: str=None, country: str=None, district: str=None, lines: List[str]=None, postal_code: str=None, state: str=None, text: str=None, type: str=None, use: str=None):
        """Address - a model defined in OpenAPI

        :param city: The city of this Address.
        :param country: The country of this Address.
        :param district: The district of this Address.
        :param lines: The lines of this Address.
        :param postal_code: The postal_code of this Address.
        :param state: The state of this Address.
        :param text: The text of this Address.
        :param type: The type of this Address.
        :param use: The use of this Address.
        """
        self.openapi_types = {
            'city': str,
            'country': str,
            'district': str,
            'lines': List[str],
            'postal_code': str,
            'state': str,
            'text': str,
            'type': str,
            'use': str
        }

        self.attribute_map = {
            'city': 'city',
            'country': 'country',
            'district': 'district',
            'lines': 'lines',
            'postal_code': 'postal_code',
            'state': 'state',
            'text': 'text',
            'type': 'type',
            'use': 'use'
        }

        self._city = city
        self._country = country
        self._district = district
        self._lines = lines
        self._postal_code = postal_code
        self._state = state
        self._text = text
        self._type = type
        self._use = use

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Address':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Address of this Address.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def city(self):
        """Gets the city of this Address.


        :return: The city of this Address.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this Address.


        :param city: The city of this Address.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this Address.


        :return: The country of this Address.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Address.


        :param country: The country of this Address.
        :type country: str
        """

        self._country = country

    @property
    def district(self):
        """Gets the district of this Address.


        :return: The district of this Address.
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this Address.


        :param district: The district of this Address.
        :type district: str
        """

        self._district = district

    @property
    def lines(self):
        """Gets the lines of this Address.


        :return: The lines of this Address.
        :rtype: List[str]
        """
        return self._lines

    @lines.setter
    def lines(self, lines):
        """Sets the lines of this Address.


        :param lines: The lines of this Address.
        :type lines: List[str]
        """

        self._lines = lines

    @property
    def postal_code(self):
        """Gets the postal_code of this Address.


        :return: The postal_code of this Address.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this Address.


        :param postal_code: The postal_code of this Address.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def state(self):
        """Gets the state of this Address.


        :return: The state of this Address.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this Address.


        :param state: The state of this Address.
        :type state: str
        """

        self._state = state

    @property
    def text(self):
        """Gets the text of this Address.


        :return: The text of this Address.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Address.


        :param text: The text of this Address.
        :type text: str
        """

        self._text = text

    @property
    def type(self):
        """Gets the type of this Address.


        :return: The type of this Address.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Address.


        :param type: The type of this Address.
        :type type: str
        """

        self._type = type

    @property
    def use(self):
        """Gets the use of this Address.


        :return: The use of this Address.
        :rtype: str
        """
        return self._use

    @use.setter
    def use(self, use):
        """Sets the use of this Address.


        :param use: The use of this Address.
        :type use: str
        """

        self._use = use
