# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_history_resource_relationships_receiver import EmailHistoryResourceRelationshipsReceiver
from openapi_server import util


class RewardProgramActivationResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patient: EmailHistoryResourceRelationshipsReceiver=None, reward_program: EmailHistoryResourceRelationshipsReceiver=None):
        """RewardProgramActivationResourceRelationships - a model defined in OpenAPI

        :param patient: The patient of this RewardProgramActivationResourceRelationships.
        :param reward_program: The reward_program of this RewardProgramActivationResourceRelationships.
        """
        self.openapi_types = {
            'patient': EmailHistoryResourceRelationshipsReceiver,
            'reward_program': EmailHistoryResourceRelationshipsReceiver
        }

        self.attribute_map = {
            'patient': 'patient',
            'reward_program': 'reward_program'
        }

        self._patient = patient
        self._reward_program = reward_program

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardProgramActivationResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardProgramActivationResource_relationships of this RewardProgramActivationResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patient(self):
        """Gets the patient of this RewardProgramActivationResourceRelationships.


        :return: The patient of this RewardProgramActivationResourceRelationships.
        :rtype: EmailHistoryResourceRelationshipsReceiver
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this RewardProgramActivationResourceRelationships.


        :param patient: The patient of this RewardProgramActivationResourceRelationships.
        :type patient: EmailHistoryResourceRelationshipsReceiver
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient

    @property
    def reward_program(self):
        """Gets the reward_program of this RewardProgramActivationResourceRelationships.


        :return: The reward_program of this RewardProgramActivationResourceRelationships.
        :rtype: EmailHistoryResourceRelationshipsReceiver
        """
        return self._reward_program

    @reward_program.setter
    def reward_program(self, reward_program):
        """Sets the reward_program of this RewardProgramActivationResourceRelationships.


        :param reward_program: The reward_program of this RewardProgramActivationResourceRelationships.
        :type reward_program: EmailHistoryResourceRelationshipsReceiver
        """
        if reward_program is None:
            raise ValueError("Invalid value for `reward_program`, must not be `None`")

        self._reward_program = reward_program
