# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewardProgramResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, budget_unit: str='dollar', budget_value: float=None, description: str=None, duration_active: float=540, end_at: str=None, frozen: bool=False, fulfill_as_earned: bool=False, name: str=None, start_at: str=None, tagline: str=None):
        """RewardProgramResourceAttributes - a model defined in OpenAPI

        :param budget_unit: The budget_unit of this RewardProgramResourceAttributes.
        :param budget_value: The budget_value of this RewardProgramResourceAttributes.
        :param description: The description of this RewardProgramResourceAttributes.
        :param duration_active: The duration_active of this RewardProgramResourceAttributes.
        :param end_at: The end_at of this RewardProgramResourceAttributes.
        :param frozen: The frozen of this RewardProgramResourceAttributes.
        :param fulfill_as_earned: The fulfill_as_earned of this RewardProgramResourceAttributes.
        :param name: The name of this RewardProgramResourceAttributes.
        :param start_at: The start_at of this RewardProgramResourceAttributes.
        :param tagline: The tagline of this RewardProgramResourceAttributes.
        """
        self.openapi_types = {
            'budget_unit': str,
            'budget_value': float,
            'description': str,
            'duration_active': float,
            'end_at': str,
            'frozen': bool,
            'fulfill_as_earned': bool,
            'name': str,
            'start_at': str,
            'tagline': str
        }

        self.attribute_map = {
            'budget_unit': 'budget_unit',
            'budget_value': 'budget_value',
            'description': 'description',
            'duration_active': 'duration_active',
            'end_at': 'end_at',
            'frozen': 'frozen',
            'fulfill_as_earned': 'fulfill_as_earned',
            'name': 'name',
            'start_at': 'start_at',
            'tagline': 'tagline'
        }

        self._budget_unit = budget_unit
        self._budget_value = budget_value
        self._description = description
        self._duration_active = duration_active
        self._end_at = end_at
        self._frozen = frozen
        self._fulfill_as_earned = fulfill_as_earned
        self._name = name
        self._start_at = start_at
        self._tagline = tagline

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardProgramResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardProgramResource_attributes of this RewardProgramResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def budget_unit(self):
        """Gets the budget_unit of this RewardProgramResourceAttributes.

        Unit of the budget for the reard program.

        :return: The budget_unit of this RewardProgramResourceAttributes.
        :rtype: str
        """
        return self._budget_unit

    @budget_unit.setter
    def budget_unit(self, budget_unit):
        """Sets the budget_unit of this RewardProgramResourceAttributes.

        Unit of the budget for the reard program.

        :param budget_unit: The budget_unit of this RewardProgramResourceAttributes.
        :type budget_unit: str
        """
        allowed_values = ["dollar", "point", "credit"]  # noqa: E501
        if budget_unit not in allowed_values:
            raise ValueError(
                "Invalid value for `budget_unit` ({0}), must be one of {1}"
                .format(budget_unit, allowed_values)
            )

        self._budget_unit = budget_unit

    @property
    def budget_value(self):
        """Gets the budget_value of this RewardProgramResourceAttributes.

        Value of the budget for the reward program. (Must be greater than 0)

        :return: The budget_value of this RewardProgramResourceAttributes.
        :rtype: float
        """
        return self._budget_value

    @budget_value.setter
    def budget_value(self, budget_value):
        """Sets the budget_value of this RewardProgramResourceAttributes.

        Value of the budget for the reward program. (Must be greater than 0)

        :param budget_value: The budget_value of this RewardProgramResourceAttributes.
        :type budget_value: float
        """
        if budget_value is None:
            raise ValueError("Invalid value for `budget_value`, must not be `None`")

        self._budget_value = budget_value

    @property
    def description(self):
        """Gets the description of this RewardProgramResourceAttributes.

        Description of the reward program - designed to be a comprehensive text description

        :return: The description of this RewardProgramResourceAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this RewardProgramResourceAttributes.

        Description of the reward program - designed to be a comprehensive text description

        :param description: The description of this RewardProgramResourceAttributes.
        :type description: str
        """

        self._description = description

    @property
    def duration_active(self):
        """Gets the duration_active of this RewardProgramResourceAttributes.

        Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)

        :return: The duration_active of this RewardProgramResourceAttributes.
        :rtype: float
        """
        return self._duration_active

    @duration_active.setter
    def duration_active(self, duration_active):
        """Sets the duration_active of this RewardProgramResourceAttributes.

        Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)

        :param duration_active: The duration_active of this RewardProgramResourceAttributes.
        :type duration_active: float
        """

        self._duration_active = duration_active

    @property
    def end_at(self):
        """Gets the end_at of this RewardProgramResourceAttributes.

        Date at which the reward program ends. (Must be after the start_at)

        :return: The end_at of this RewardProgramResourceAttributes.
        :rtype: str
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this RewardProgramResourceAttributes.

        Date at which the reward program ends. (Must be after the start_at)

        :param end_at: The end_at of this RewardProgramResourceAttributes.
        :type end_at: str
        """
        if end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")

        self._end_at = end_at

    @property
    def frozen(self):
        """Gets the frozen of this RewardProgramResourceAttributes.

        If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program.

        :return: The frozen of this RewardProgramResourceAttributes.
        :rtype: bool
        """
        return self._frozen

    @frozen.setter
    def frozen(self, frozen):
        """Sets the frozen of this RewardProgramResourceAttributes.

        If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program.

        :param frozen: The frozen of this RewardProgramResourceAttributes.
        :type frozen: bool
        """

        self._frozen = frozen

    @property
    def fulfill_as_earned(self):
        """Gets the fulfill_as_earned of this RewardProgramResourceAttributes.

        If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated.

        :return: The fulfill_as_earned of this RewardProgramResourceAttributes.
        :rtype: bool
        """
        return self._fulfill_as_earned

    @fulfill_as_earned.setter
    def fulfill_as_earned(self, fulfill_as_earned):
        """Sets the fulfill_as_earned of this RewardProgramResourceAttributes.

        If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated.

        :param fulfill_as_earned: The fulfill_as_earned of this RewardProgramResourceAttributes.
        :type fulfill_as_earned: bool
        """

        self._fulfill_as_earned = fulfill_as_earned

    @property
    def name(self):
        """Gets the name of this RewardProgramResourceAttributes.

        Name of the reward program

        :return: The name of this RewardProgramResourceAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this RewardProgramResourceAttributes.

        Name of the reward program

        :param name: The name of this RewardProgramResourceAttributes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def start_at(self):
        """Gets the start_at of this RewardProgramResourceAttributes.

        Date at which the reward program starts.

        :return: The start_at of this RewardProgramResourceAttributes.
        :rtype: str
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this RewardProgramResourceAttributes.

        Date at which the reward program starts.

        :param start_at: The start_at of this RewardProgramResourceAttributes.
        :type start_at: str
        """
        if start_at is None:
            raise ValueError("Invalid value for `start_at`, must not be `None`")

        self._start_at = start_at

    @property
    def tagline(self):
        """Gets the tagline of this RewardProgramResourceAttributes.

        Tagline of the reward program - designed to be one line

        :return: The tagline of this RewardProgramResourceAttributes.
        :rtype: str
        """
        return self._tagline

    @tagline.setter
    def tagline(self, tagline):
        """Sets the tagline of this RewardProgramResourceAttributes.

        Tagline of the reward program - designed to be one line

        :param tagline: The tagline of this RewardProgramResourceAttributes.
        :type tagline: str
        """

        self._tagline = tagline
