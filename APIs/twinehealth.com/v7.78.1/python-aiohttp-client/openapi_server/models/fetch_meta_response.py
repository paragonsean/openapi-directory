# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class FetchMetaResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count: int=None, req_id: str=None):
        """FetchMetaResponse - a model defined in OpenAPI

        :param count: The count of this FetchMetaResponse.
        :param req_id: The req_id of this FetchMetaResponse.
        """
        self.openapi_types = {
            'count': int,
            'req_id': str
        }

        self.attribute_map = {
            'count': 'count',
            'req_id': 'req_id'
        }

        self._count = count
        self._req_id = req_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'FetchMetaResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The FetchMetaResponse of this FetchMetaResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self):
        """Gets the count of this FetchMetaResponse.


        :return: The count of this FetchMetaResponse.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this FetchMetaResponse.


        :param count: The count of this FetchMetaResponse.
        :type count: int
        """

        self._count = count

    @property
    def req_id(self):
        """Gets the req_id of this FetchMetaResponse.


        :return: The req_id of this FetchMetaResponse.
        :rtype: str
        """
        return self._req_id

    @req_id.setter
    def req_id(self, req_id):
        """Sets the req_id of this FetchMetaResponse.


        :param req_id: The req_id of this FetchMetaResponse.
        :type req_id: str
        """

        self._req_id = req_id
