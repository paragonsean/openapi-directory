# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_resource import PatientResource
from openapi_server.models.upsert_patient_request_meta import UpsertPatientRequestMeta
from openapi_server import util


class UpsertPatientRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: PatientResource=None, meta: UpsertPatientRequestMeta=None):
        """UpsertPatientRequest - a model defined in OpenAPI

        :param data: The data of this UpsertPatientRequest.
        :param meta: The meta of this UpsertPatientRequest.
        """
        self.openapi_types = {
            'data': PatientResource,
            'meta': UpsertPatientRequestMeta
        }

        self.attribute_map = {
            'data': 'data',
            'meta': 'meta'
        }

        self._data = data
        self._meta = meta

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpsertPatientRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpsertPatientRequest of this UpsertPatientRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this UpsertPatientRequest.


        :return: The data of this UpsertPatientRequest.
        :rtype: PatientResource
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this UpsertPatientRequest.


        :param data: The data of this UpsertPatientRequest.
        :type data: PatientResource
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def meta(self):
        """Gets the meta of this UpsertPatientRequest.


        :return: The meta of this UpsertPatientRequest.
        :rtype: UpsertPatientRequestMeta
        """
        return self._meta

    @meta.setter
    def meta(self, meta):
        """Sets the meta of this UpsertPatientRequest.


        :param meta: The meta of this UpsertPatientRequest.
        :type meta: UpsertPatientRequestMeta
        """
        if meta is None:
            raise ValueError("Invalid value for `meta`, must not be `None`")

        self._meta = meta
