# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_health_metric_resource_attributes_code import PatientHealthMetricResourceAttributesCode
from openapi_server import util


class PatientHealthMetricResourceRelationshipsPatientDataMetaQuery(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups: List[str]=None, identifier: PatientHealthMetricResourceAttributesCode=None, organization: str=None):
        """PatientHealthMetricResourceRelationshipsPatientDataMetaQuery - a model defined in OpenAPI

        :param groups: The groups of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :param identifier: The identifier of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :param organization: The organization of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        """
        self.openapi_types = {
            'groups': List[str],
            'identifier': PatientHealthMetricResourceAttributesCode,
            'organization': str
        }

        self.attribute_map = {
            'groups': 'groups',
            'identifier': 'identifier',
            'organization': 'organization'
        }

        self._groups = groups
        self._identifier = identifier
        self._organization = organization

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientHealthMetricResourceRelationshipsPatientDataMetaQuery':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientHealthMetricResource_relationships_patient_data_meta_query of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self):
        """Gets the groups of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.


        :return: The groups of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups):
        """Sets the groups of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.


        :param groups: The groups of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def identifier(self):
        """Gets the identifier of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.


        :return: The identifier of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :rtype: PatientHealthMetricResourceAttributesCode
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.


        :param identifier: The identifier of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :type identifier: PatientHealthMetricResourceAttributesCode
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")

        self._identifier = identifier

    @property
    def organization(self):
        """Gets the organization of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.


        :return: The organization of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """Sets the organization of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.


        :param organization: The organization of this PatientHealthMetricResourceRelationshipsPatientDataMetaQuery.
        :type organization: str
        """

        self._organization = organization
