# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PatientIdentifier(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label: str=None, system: str=None, unique: bool=True, value: str=None):
        """PatientIdentifier - a model defined in OpenAPI

        :param label: The label of this PatientIdentifier.
        :param system: The system of this PatientIdentifier.
        :param unique: The unique of this PatientIdentifier.
        :param value: The value of this PatientIdentifier.
        """
        self.openapi_types = {
            'label': str,
            'system': str,
            'unique': bool,
            'value': str
        }

        self.attribute_map = {
            'label': 'label',
            'system': 'system',
            'unique': 'unique',
            'value': 'value'
        }

        self._label = label
        self._system = system
        self._unique = unique
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientIdentifier':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientIdentifier of this PatientIdentifier.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label(self):
        """Gets the label of this PatientIdentifier.


        :return: The label of this PatientIdentifier.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this PatientIdentifier.


        :param label: The label of this PatientIdentifier.
        :type label: str
        """

        self._label = label

    @property
    def system(self):
        """Gets the system of this PatientIdentifier.


        :return: The system of this PatientIdentifier.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system):
        """Sets the system of this PatientIdentifier.


        :param system: The system of this PatientIdentifier.
        :type system: str
        """
        if system is None:
            raise ValueError("Invalid value for `system`, must not be `None`")

        self._system = system

    @property
    def unique(self):
        """Gets the unique of this PatientIdentifier.

        If `true`, the combination of system and value must be global unique among all patients and coaches in Fitbit Plus.

        :return: The unique of this PatientIdentifier.
        :rtype: bool
        """
        return self._unique

    @unique.setter
    def unique(self, unique):
        """Sets the unique of this PatientIdentifier.

        If `true`, the combination of system and value must be global unique among all patients and coaches in Fitbit Plus.

        :param unique: The unique of this PatientIdentifier.
        :type unique: bool
        """

        self._unique = unique

    @property
    def value(self):
        """Gets the value of this PatientIdentifier.


        :return: The value of this PatientIdentifier.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PatientIdentifier.


        :param value: The value of this PatientIdentifier.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")

        self._value = value
