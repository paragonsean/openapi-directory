# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_health_metric_resource_attributes_code import PatientHealthMetricResourceAttributesCode
from openapi_server import util


class PatientHealthMetricResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: PatientHealthMetricResourceAttributesCode=None, diastolic: float=None, occurred_at: str=None, systolic: float=None, type: str=None, unit: str=None, value: object=None):
        """PatientHealthMetricResourceAttributes - a model defined in OpenAPI

        :param code: The code of this PatientHealthMetricResourceAttributes.
        :param diastolic: The diastolic of this PatientHealthMetricResourceAttributes.
        :param occurred_at: The occurred_at of this PatientHealthMetricResourceAttributes.
        :param systolic: The systolic of this PatientHealthMetricResourceAttributes.
        :param type: The type of this PatientHealthMetricResourceAttributes.
        :param unit: The unit of this PatientHealthMetricResourceAttributes.
        :param value: The value of this PatientHealthMetricResourceAttributes.
        """
        self.openapi_types = {
            'code': PatientHealthMetricResourceAttributesCode,
            'diastolic': float,
            'occurred_at': str,
            'systolic': float,
            'type': str,
            'unit': str,
            'value': object
        }

        self.attribute_map = {
            'code': 'code',
            'diastolic': 'diastolic',
            'occurred_at': 'occurred_at',
            'systolic': 'systolic',
            'type': 'type',
            'unit': 'unit',
            'value': 'value'
        }

        self._code = code
        self._diastolic = diastolic
        self._occurred_at = occurred_at
        self._systolic = systolic
        self._type = type
        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientHealthMetricResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientHealthMetricResource_attributes of this PatientHealthMetricResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this PatientHealthMetricResourceAttributes.


        :return: The code of this PatientHealthMetricResourceAttributes.
        :rtype: PatientHealthMetricResourceAttributesCode
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PatientHealthMetricResourceAttributes.


        :param code: The code of this PatientHealthMetricResourceAttributes.
        :type code: PatientHealthMetricResourceAttributesCode
        """

        self._code = code

    @property
    def diastolic(self):
        """Gets the diastolic of this PatientHealthMetricResourceAttributes.


        :return: The diastolic of this PatientHealthMetricResourceAttributes.
        :rtype: float
        """
        return self._diastolic

    @diastolic.setter
    def diastolic(self, diastolic):
        """Sets the diastolic of this PatientHealthMetricResourceAttributes.


        :param diastolic: The diastolic of this PatientHealthMetricResourceAttributes.
        :type diastolic: float
        """

        self._diastolic = diastolic

    @property
    def occurred_at(self):
        """Gets the occurred_at of this PatientHealthMetricResourceAttributes.


        :return: The occurred_at of this PatientHealthMetricResourceAttributes.
        :rtype: str
        """
        return self._occurred_at

    @occurred_at.setter
    def occurred_at(self, occurred_at):
        """Sets the occurred_at of this PatientHealthMetricResourceAttributes.


        :param occurred_at: The occurred_at of this PatientHealthMetricResourceAttributes.
        :type occurred_at: str
        """

        self._occurred_at = occurred_at

    @property
    def systolic(self):
        """Gets the systolic of this PatientHealthMetricResourceAttributes.


        :return: The systolic of this PatientHealthMetricResourceAttributes.
        :rtype: float
        """
        return self._systolic

    @systolic.setter
    def systolic(self, systolic):
        """Sets the systolic of this PatientHealthMetricResourceAttributes.


        :param systolic: The systolic of this PatientHealthMetricResourceAttributes.
        :type systolic: float
        """

        self._systolic = systolic

    @property
    def type(self):
        """Gets the type of this PatientHealthMetricResourceAttributes.


        :return: The type of this PatientHealthMetricResourceAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PatientHealthMetricResourceAttributes.


        :param type: The type of this PatientHealthMetricResourceAttributes.
        :type type: str
        """
        allowed_values = ["blood_pressure_systolic", "blood_pressure_diastolic", "hemoglobin_a1c", "hdl_cholesterol", "ldl_cholesterol", "total_cholesterol", "triglycerides", "blood_urea_nitrogen", "creatinine", "hemoglobin", "hematocrit", "total_serum_iron", "thyroid_stimulating_hormone", "free_thyroxine", "free_triiodothyronine", "total_triiodothyronine", "cd4_cell_count", "hiv_viral_load", "inr", "free_testosterone", "total_testosterone", "c_reactive_protein", "prostate_specific_antigen", "cotinine", "c_peptide", "blood_pressure", "blood_glucose", "weight", "heart_rate", "body_fat_percentage", "body_mass_index", "body_temperature", "forced_expiratory_volume1", "forced_vital_capacity", "lean_body_mass", "nausea_level", "oxygen_saturation", "pain_level", "peak_expiratory_flow_rate", "peripheral_perfusion_index", "respiratory_rate", "inhaler_usage"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def unit(self):
        """Gets the unit of this PatientHealthMetricResourceAttributes.


        :return: The unit of this PatientHealthMetricResourceAttributes.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PatientHealthMetricResourceAttributes.


        :param unit: The unit of this PatientHealthMetricResourceAttributes.
        :type unit: str
        """

        self._unit = unit

    @property
    def value(self):
        """Gets the value of this PatientHealthMetricResourceAttributes.

        Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number.

        :return: The value of this PatientHealthMetricResourceAttributes.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this PatientHealthMetricResourceAttributes.

        Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number.

        :param value: The value of this PatientHealthMetricResourceAttributes.
        :type value: object
        """

        self._value = value
