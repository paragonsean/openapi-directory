# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewardProgramActivationResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activated_at: str=None, active: bool=True, allocated_count: float=None, budget_unit: str=None, deactivated_at: str=None, earned_count: float=None, expires_at: str=None, fulfill_as_earned: bool=None, total_allocated_value: float=None, total_earned_value: float=None):
        """RewardProgramActivationResourceAttributes - a model defined in OpenAPI

        :param activated_at: The activated_at of this RewardProgramActivationResourceAttributes.
        :param active: The active of this RewardProgramActivationResourceAttributes.
        :param allocated_count: The allocated_count of this RewardProgramActivationResourceAttributes.
        :param budget_unit: The budget_unit of this RewardProgramActivationResourceAttributes.
        :param deactivated_at: The deactivated_at of this RewardProgramActivationResourceAttributes.
        :param earned_count: The earned_count of this RewardProgramActivationResourceAttributes.
        :param expires_at: The expires_at of this RewardProgramActivationResourceAttributes.
        :param fulfill_as_earned: The fulfill_as_earned of this RewardProgramActivationResourceAttributes.
        :param total_allocated_value: The total_allocated_value of this RewardProgramActivationResourceAttributes.
        :param total_earned_value: The total_earned_value of this RewardProgramActivationResourceAttributes.
        """
        self.openapi_types = {
            'activated_at': str,
            'active': bool,
            'allocated_count': float,
            'budget_unit': str,
            'deactivated_at': str,
            'earned_count': float,
            'expires_at': str,
            'fulfill_as_earned': bool,
            'total_allocated_value': float,
            'total_earned_value': float
        }

        self.attribute_map = {
            'activated_at': 'activated_at',
            'active': 'active',
            'allocated_count': 'allocated_count',
            'budget_unit': 'budget_unit',
            'deactivated_at': 'deactivated_at',
            'earned_count': 'earned_count',
            'expires_at': 'expires_at',
            'fulfill_as_earned': 'fulfill_as_earned',
            'total_allocated_value': 'total_allocated_value',
            'total_earned_value': 'total_earned_value'
        }

        self._activated_at = activated_at
        self._active = active
        self._allocated_count = allocated_count
        self._budget_unit = budget_unit
        self._deactivated_at = deactivated_at
        self._earned_count = earned_count
        self._expires_at = expires_at
        self._fulfill_as_earned = fulfill_as_earned
        self._total_allocated_value = total_allocated_value
        self._total_earned_value = total_earned_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardProgramActivationResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardProgramActivationResource_attributes of this RewardProgramActivationResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activated_at(self):
        """Gets the activated_at of this RewardProgramActivationResourceAttributes.

        Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)

        :return: The activated_at of this RewardProgramActivationResourceAttributes.
        :rtype: str
        """
        return self._activated_at

    @activated_at.setter
    def activated_at(self, activated_at):
        """Sets the activated_at of this RewardProgramActivationResourceAttributes.

        Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)

        :param activated_at: The activated_at of this RewardProgramActivationResourceAttributes.
        :type activated_at: str
        """
        if activated_at is None:
            raise ValueError("Invalid value for `activated_at`, must not be `None`")

        self._activated_at = activated_at

    @property
    def active(self):
        """Gets the active of this RewardProgramActivationResourceAttributes.

        If true, the reward program is currently active.

        :return: The active of this RewardProgramActivationResourceAttributes.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active):
        """Sets the active of this RewardProgramActivationResourceAttributes.

        If true, the reward program is currently active.

        :param active: The active of this RewardProgramActivationResourceAttributes.
        :type active: bool
        """

        self._active = active

    @property
    def allocated_count(self):
        """Gets the allocated_count of this RewardProgramActivationResourceAttributes.

        Number of rewards allocated. (Read-only property)

        :return: The allocated_count of this RewardProgramActivationResourceAttributes.
        :rtype: float
        """
        return self._allocated_count

    @allocated_count.setter
    def allocated_count(self, allocated_count):
        """Sets the allocated_count of this RewardProgramActivationResourceAttributes.

        Number of rewards allocated. (Read-only property)

        :param allocated_count: The allocated_count of this RewardProgramActivationResourceAttributes.
        :type allocated_count: float
        """

        self._allocated_count = allocated_count

    @property
    def budget_unit(self):
        """Gets the budget_unit of this RewardProgramActivationResourceAttributes.

        Unit of the reward program budget. (Read-only property)

        :return: The budget_unit of this RewardProgramActivationResourceAttributes.
        :rtype: str
        """
        return self._budget_unit

    @budget_unit.setter
    def budget_unit(self, budget_unit):
        """Sets the budget_unit of this RewardProgramActivationResourceAttributes.

        Unit of the reward program budget. (Read-only property)

        :param budget_unit: The budget_unit of this RewardProgramActivationResourceAttributes.
        :type budget_unit: str
        """

        self._budget_unit = budget_unit

    @property
    def deactivated_at(self):
        """Gets the deactivated_at of this RewardProgramActivationResourceAttributes.

        Date at which the reward program was deactivated. (Must be after the activated_at date)

        :return: The deactivated_at of this RewardProgramActivationResourceAttributes.
        :rtype: str
        """
        return self._deactivated_at

    @deactivated_at.setter
    def deactivated_at(self, deactivated_at):
        """Sets the deactivated_at of this RewardProgramActivationResourceAttributes.

        Date at which the reward program was deactivated. (Must be after the activated_at date)

        :param deactivated_at: The deactivated_at of this RewardProgramActivationResourceAttributes.
        :type deactivated_at: str
        """

        self._deactivated_at = deactivated_at

    @property
    def earned_count(self):
        """Gets the earned_count of this RewardProgramActivationResourceAttributes.

        Number of reward earnings. (Read-only property)

        :return: The earned_count of this RewardProgramActivationResourceAttributes.
        :rtype: float
        """
        return self._earned_count

    @earned_count.setter
    def earned_count(self, earned_count):
        """Sets the earned_count of this RewardProgramActivationResourceAttributes.

        Number of reward earnings. (Read-only property)

        :param earned_count: The earned_count of this RewardProgramActivationResourceAttributes.
        :type earned_count: float
        """

        self._earned_count = earned_count

    @property
    def expires_at(self):
        """Gets the expires_at of this RewardProgramActivationResourceAttributes.

        Date at which the reward program activation expires. (Read-only property set by adding the days_active from the reward program to the activated_at date)

        :return: The expires_at of this RewardProgramActivationResourceAttributes.
        :rtype: str
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at):
        """Sets the expires_at of this RewardProgramActivationResourceAttributes.

        Date at which the reward program activation expires. (Read-only property set by adding the days_active from the reward program to the activated_at date)

        :param expires_at: The expires_at of this RewardProgramActivationResourceAttributes.
        :type expires_at: str
        """

        self._expires_at = expires_at

    @property
    def fulfill_as_earned(self):
        """Gets the fulfill_as_earned of this RewardProgramActivationResourceAttributes.

        If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated. (Read-only property denormalized from the reward program)

        :return: The fulfill_as_earned of this RewardProgramActivationResourceAttributes.
        :rtype: bool
        """
        return self._fulfill_as_earned

    @fulfill_as_earned.setter
    def fulfill_as_earned(self, fulfill_as_earned):
        """Sets the fulfill_as_earned of this RewardProgramActivationResourceAttributes.

        If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated. (Read-only property denormalized from the reward program)

        :param fulfill_as_earned: The fulfill_as_earned of this RewardProgramActivationResourceAttributes.
        :type fulfill_as_earned: bool
        """

        self._fulfill_as_earned = fulfill_as_earned

    @property
    def total_allocated_value(self):
        """Gets the total_allocated_value of this RewardProgramActivationResourceAttributes.

        Total value of reward allocated. (Read-only property)

        :return: The total_allocated_value of this RewardProgramActivationResourceAttributes.
        :rtype: float
        """
        return self._total_allocated_value

    @total_allocated_value.setter
    def total_allocated_value(self, total_allocated_value):
        """Sets the total_allocated_value of this RewardProgramActivationResourceAttributes.

        Total value of reward allocated. (Read-only property)

        :param total_allocated_value: The total_allocated_value of this RewardProgramActivationResourceAttributes.
        :type total_allocated_value: float
        """

        self._total_allocated_value = total_allocated_value

    @property
    def total_earned_value(self):
        """Gets the total_earned_value of this RewardProgramActivationResourceAttributes.

        Total value of reward earnings. (Read-only property)

        :return: The total_earned_value of this RewardProgramActivationResourceAttributes.
        :rtype: float
        """
        return self._total_earned_value

    @total_earned_value.setter
    def total_earned_value(self, total_earned_value):
        """Sets the total_earned_value of this RewardProgramActivationResourceAttributes.

        Total value of reward earnings. (Read-only property)

        :param total_earned_value: The total_earned_value of this RewardProgramActivationResourceAttributes.
        :type total_earned_value: float
        """

        self._total_earned_value = total_earned_value
