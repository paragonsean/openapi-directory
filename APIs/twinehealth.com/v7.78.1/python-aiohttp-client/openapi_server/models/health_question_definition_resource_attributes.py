# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.health_question_definition_resource_attributes_format import HealthQuestionDefinitionResourceAttributesFormat
from openapi_server.models.health_question_definition_resource_attributes_requirements_inner import HealthQuestionDefinitionResourceAttributesRequirementsInner
from openapi_server import util


class HealthQuestionDefinitionResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: str=None, format: HealthQuestionDefinitionResourceAttributesFormat=None, requirements: List[HealthQuestionDefinitionResourceAttributesRequirementsInner]=None, text: str=None):
        """HealthQuestionDefinitionResourceAttributes - a model defined in OpenAPI

        :param category: The category of this HealthQuestionDefinitionResourceAttributes.
        :param format: The format of this HealthQuestionDefinitionResourceAttributes.
        :param requirements: The requirements of this HealthQuestionDefinitionResourceAttributes.
        :param text: The text of this HealthQuestionDefinitionResourceAttributes.
        """
        self.openapi_types = {
            'category': str,
            'format': HealthQuestionDefinitionResourceAttributesFormat,
            'requirements': List[HealthQuestionDefinitionResourceAttributesRequirementsInner],
            'text': str
        }

        self.attribute_map = {
            'category': 'category',
            'format': 'format',
            'requirements': 'requirements',
            'text': 'text'
        }

        self._category = category
        self._format = format
        self._requirements = requirements
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthQuestionDefinitionResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthQuestionDefinitionResource_attributes of this HealthQuestionDefinitionResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this HealthQuestionDefinitionResourceAttributes.

        The category for the health profile definition

        :return: The category of this HealthQuestionDefinitionResourceAttributes.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HealthQuestionDefinitionResourceAttributes.

        The category for the health profile definition

        :param category: The category of this HealthQuestionDefinitionResourceAttributes.
        :type category: str
        """
        allowed_values = ["lifestyle_behaviors", "mental_wellbeing", "preventative_care"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def format(self):
        """Gets the format of this HealthQuestionDefinitionResourceAttributes.


        :return: The format of this HealthQuestionDefinitionResourceAttributes.
        :rtype: HealthQuestionDefinitionResourceAttributesFormat
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this HealthQuestionDefinitionResourceAttributes.


        :param format: The format of this HealthQuestionDefinitionResourceAttributes.
        :type format: HealthQuestionDefinitionResourceAttributesFormat
        """

        self._format = format

    @property
    def requirements(self):
        """Gets the requirements of this HealthQuestionDefinitionResourceAttributes.

        The lsit of age and gender requirements for the question to be included

        :return: The requirements of this HealthQuestionDefinitionResourceAttributes.
        :rtype: List[HealthQuestionDefinitionResourceAttributesRequirementsInner]
        """
        return self._requirements

    @requirements.setter
    def requirements(self, requirements):
        """Sets the requirements of this HealthQuestionDefinitionResourceAttributes.

        The lsit of age and gender requirements for the question to be included

        :param requirements: The requirements of this HealthQuestionDefinitionResourceAttributes.
        :type requirements: List[HealthQuestionDefinitionResourceAttributesRequirementsInner]
        """

        self._requirements = requirements

    @property
    def text(self):
        """Gets the text of this HealthQuestionDefinitionResourceAttributes.

        The question text which corresponds to the answer choices

        :return: The text of this HealthQuestionDefinitionResourceAttributes.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this HealthQuestionDefinitionResourceAttributes.

        The question text which corresponds to the answer choices

        :param text: The text of this HealthQuestionDefinitionResourceAttributes.
        :type text: str
        """

        self._text = text
