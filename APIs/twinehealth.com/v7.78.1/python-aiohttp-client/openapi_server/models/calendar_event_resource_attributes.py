# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calendar_event_resource_attributes_attendees_inner import CalendarEventResourceAttributesAttendeesInner
from openapi_server import util


class CalendarEventResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, all_day: bool=None, attendees: List[CalendarEventResourceAttributesAttendeesInner]=None, completed_at: str=None, completed_by: object=None, description: str=None, end_at: str=None, location: str=None, start_at: str=None, time_zone: str=None, title: str=None, type: str=None):
        """CalendarEventResourceAttributes - a model defined in OpenAPI

        :param all_day: The all_day of this CalendarEventResourceAttributes.
        :param attendees: The attendees of this CalendarEventResourceAttributes.
        :param completed_at: The completed_at of this CalendarEventResourceAttributes.
        :param completed_by: The completed_by of this CalendarEventResourceAttributes.
        :param description: The description of this CalendarEventResourceAttributes.
        :param end_at: The end_at of this CalendarEventResourceAttributes.
        :param location: The location of this CalendarEventResourceAttributes.
        :param start_at: The start_at of this CalendarEventResourceAttributes.
        :param time_zone: The time_zone of this CalendarEventResourceAttributes.
        :param title: The title of this CalendarEventResourceAttributes.
        :param type: The type of this CalendarEventResourceAttributes.
        """
        self.openapi_types = {
            'all_day': bool,
            'attendees': List[CalendarEventResourceAttributesAttendeesInner],
            'completed_at': str,
            'completed_by': object,
            'description': str,
            'end_at': str,
            'location': str,
            'start_at': str,
            'time_zone': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'all_day': 'all_day',
            'attendees': 'attendees',
            'completed_at': 'completed_at',
            'completed_by': 'completed_by',
            'description': 'description',
            'end_at': 'end_at',
            'location': 'location',
            'start_at': 'start_at',
            'time_zone': 'time_zone',
            'title': 'title',
            'type': 'type'
        }

        self._all_day = all_day
        self._attendees = attendees
        self._completed_at = completed_at
        self._completed_by = completed_by
        self._description = description
        self._end_at = end_at
        self._location = location
        self._start_at = start_at
        self._time_zone = time_zone
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalendarEventResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CalendarEventResource_attributes of this CalendarEventResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def all_day(self):
        """Gets the all_day of this CalendarEventResourceAttributes.

        True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.

        :return: The all_day of this CalendarEventResourceAttributes.
        :rtype: bool
        """
        return self._all_day

    @all_day.setter
    def all_day(self, all_day):
        """Sets the all_day of this CalendarEventResourceAttributes.

        True if the calendar event is an all day event, false otherwise. Must be set to true for `plan-check-in` event type. If it is true, then `start_at` and `end_at` must also be set to beginning of day, except `plan-check-in` event type does not need an `end_at` date. If it is false, then `start_at` and `end_at` must be on the same day.

        :param all_day: The all_day of this CalendarEventResourceAttributes.
        :type all_day: bool
        """

        self._all_day = all_day

    @property
    def attendees(self):
        """Gets the attendees of this CalendarEventResourceAttributes.

        List of attendees for the calendar event

        :return: The attendees of this CalendarEventResourceAttributes.
        :rtype: List[CalendarEventResourceAttributesAttendeesInner]
        """
        return self._attendees

    @attendees.setter
    def attendees(self, attendees):
        """Sets the attendees of this CalendarEventResourceAttributes.

        List of attendees for the calendar event

        :param attendees: The attendees of this CalendarEventResourceAttributes.
        :type attendees: List[CalendarEventResourceAttributesAttendeesInner]
        """

        self._attendees = attendees

    @property
    def completed_at(self):
        """Gets the completed_at of this CalendarEventResourceAttributes.

        The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.

        :return: The completed_at of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at):
        """Sets the completed_at of this CalendarEventResourceAttributes.

        The date and time when the calendar event is marked as completed. Only valid for `plan-check-in` event type.

        :param completed_at: The completed_at of this CalendarEventResourceAttributes.
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def completed_by(self):
        """Gets the completed_by of this CalendarEventResourceAttributes.

        The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.

        :return: The completed_by of this CalendarEventResourceAttributes.
        :rtype: object
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by):
        """Sets the completed_by of this CalendarEventResourceAttributes.

        The coach who marked the calendar event as completed. Only valid for `plan-check-in` event type.

        :param completed_by: The completed_by of this CalendarEventResourceAttributes.
        :type completed_by: object
        """

        self._completed_by = completed_by

    @property
    def description(self):
        """Gets the description of this CalendarEventResourceAttributes.


        :return: The description of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CalendarEventResourceAttributes.


        :param description: The description of this CalendarEventResourceAttributes.
        :type description: str
        """

        self._description = description

    @property
    def end_at(self):
        """Gets the end_at of this CalendarEventResourceAttributes.

        The date and time when the calendar event ends. Not valid for `plan-check-in` event type.

        :return: The end_at of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this CalendarEventResourceAttributes.

        The date and time when the calendar event ends. Not valid for `plan-check-in` event type.

        :param end_at: The end_at of this CalendarEventResourceAttributes.
        :type end_at: str
        """

        self._end_at = end_at

    @property
    def location(self):
        """Gets the location of this CalendarEventResourceAttributes.


        :return: The location of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this CalendarEventResourceAttributes.


        :param location: The location of this CalendarEventResourceAttributes.
        :type location: str
        """

        self._location = location

    @property
    def start_at(self):
        """Gets the start_at of this CalendarEventResourceAttributes.

        The date and time when the calendar event starts

        :return: The start_at of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at):
        """Sets the start_at of this CalendarEventResourceAttributes.

        The date and time when the calendar event starts

        :param start_at: The start_at of this CalendarEventResourceAttributes.
        :type start_at: str
        """

        self._start_at = start_at

    @property
    def time_zone(self):
        """Gets the time_zone of this CalendarEventResourceAttributes.

        The time zone in which the dates for the calendar event are specified

        :return: The time_zone of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._time_zone

    @time_zone.setter
    def time_zone(self, time_zone):
        """Sets the time_zone of this CalendarEventResourceAttributes.

        The time zone in which the dates for the calendar event are specified

        :param time_zone: The time_zone of this CalendarEventResourceAttributes.
        :type time_zone: str
        """

        self._time_zone = time_zone

    @property
    def title(self):
        """Gets the title of this CalendarEventResourceAttributes.

        The title of the calendar event. Must not be empty or null

        :return: The title of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this CalendarEventResourceAttributes.

        The title of the calendar event. Must not be empty or null

        :param title: The title of this CalendarEventResourceAttributes.
        :type title: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this CalendarEventResourceAttributes.

        The type of calendar event. Immutable after event creation.

        :return: The type of this CalendarEventResourceAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalendarEventResourceAttributes.

        The type of calendar event. Immutable after event creation.

        :param type: The type of this CalendarEventResourceAttributes.
        :type type: str
        """
        allowed_values = ["plan-check-in", "reminder", "telephone-call", "office-visit", "video-call"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
