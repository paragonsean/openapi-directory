# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.email_history_resource_relationships_receiver import EmailHistoryResourceRelationshipsReceiver
from openapi_server.models.reward_earning_fulfillment_resource_relationships_patient import RewardEarningFulfillmentResourceRelationshipsPatient
from openapi_server import util


class RewardEarningFulfillmentResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, patient: RewardEarningFulfillmentResourceRelationshipsPatient=None, reward_earning: EmailHistoryResourceRelationshipsReceiver=None):
        """RewardEarningFulfillmentResourceRelationships - a model defined in OpenAPI

        :param patient: The patient of this RewardEarningFulfillmentResourceRelationships.
        :param reward_earning: The reward_earning of this RewardEarningFulfillmentResourceRelationships.
        """
        self.openapi_types = {
            'patient': RewardEarningFulfillmentResourceRelationshipsPatient,
            'reward_earning': EmailHistoryResourceRelationshipsReceiver
        }

        self.attribute_map = {
            'patient': 'patient',
            'reward_earning': 'reward_earning'
        }

        self._patient = patient
        self._reward_earning = reward_earning

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardEarningFulfillmentResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardEarningFulfillmentResource_relationships of this RewardEarningFulfillmentResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def patient(self):
        """Gets the patient of this RewardEarningFulfillmentResourceRelationships.


        :return: The patient of this RewardEarningFulfillmentResourceRelationships.
        :rtype: RewardEarningFulfillmentResourceRelationshipsPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this RewardEarningFulfillmentResourceRelationships.


        :param patient: The patient of this RewardEarningFulfillmentResourceRelationships.
        :type patient: RewardEarningFulfillmentResourceRelationshipsPatient
        """

        self._patient = patient

    @property
    def reward_earning(self):
        """Gets the reward_earning of this RewardEarningFulfillmentResourceRelationships.


        :return: The reward_earning of this RewardEarningFulfillmentResourceRelationships.
        :rtype: EmailHistoryResourceRelationshipsReceiver
        """
        return self._reward_earning

    @reward_earning.setter
    def reward_earning(self, reward_earning):
        """Sets the reward_earning of this RewardEarningFulfillmentResourceRelationships.


        :param reward_earning: The reward_earning of this RewardEarningFulfillmentResourceRelationships.
        :type reward_earning: EmailHistoryResourceRelationshipsReceiver
        """
        if reward_earning is None:
            raise ValueError("Invalid value for `reward_earning`, must not be `None`")

        self._reward_earning = reward_earning
