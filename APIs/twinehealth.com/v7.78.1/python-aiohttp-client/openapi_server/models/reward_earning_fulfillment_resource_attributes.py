# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewardEarningFulfillmentResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fulfilled_at: str=None, fulfilled_unit: str=None, fulfilled_value: float=None):
        """RewardEarningFulfillmentResourceAttributes - a model defined in OpenAPI

        :param fulfilled_at: The fulfilled_at of this RewardEarningFulfillmentResourceAttributes.
        :param fulfilled_unit: The fulfilled_unit of this RewardEarningFulfillmentResourceAttributes.
        :param fulfilled_value: The fulfilled_value of this RewardEarningFulfillmentResourceAttributes.
        """
        self.openapi_types = {
            'fulfilled_at': str,
            'fulfilled_unit': str,
            'fulfilled_value': float
        }

        self.attribute_map = {
            'fulfilled_at': 'fulfilled_at',
            'fulfilled_unit': 'fulfilled_unit',
            'fulfilled_value': 'fulfilled_value'
        }

        self._fulfilled_at = fulfilled_at
        self._fulfilled_unit = fulfilled_unit
        self._fulfilled_value = fulfilled_value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardEarningFulfillmentResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardEarningFulfillmentResource_attributes of this RewardEarningFulfillmentResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fulfilled_at(self):
        """Gets the fulfilled_at of this RewardEarningFulfillmentResourceAttributes.

        Date at which the reward earning was fulfilled. (Must be at the same time or after the reward was earned)

        :return: The fulfilled_at of this RewardEarningFulfillmentResourceAttributes.
        :rtype: str
        """
        return self._fulfilled_at

    @fulfilled_at.setter
    def fulfilled_at(self, fulfilled_at):
        """Sets the fulfilled_at of this RewardEarningFulfillmentResourceAttributes.

        Date at which the reward earning was fulfilled. (Must be at the same time or after the reward was earned)

        :param fulfilled_at: The fulfilled_at of this RewardEarningFulfillmentResourceAttributes.
        :type fulfilled_at: str
        """
        if fulfilled_at is None:
            raise ValueError("Invalid value for `fulfilled_at`, must not be `None`")

        self._fulfilled_at = fulfilled_at

    @property
    def fulfilled_unit(self):
        """Gets the fulfilled_unit of this RewardEarningFulfillmentResourceAttributes.

        Unit of the earned reward that has been fulfilled. (Read-only property)

        :return: The fulfilled_unit of this RewardEarningFulfillmentResourceAttributes.
        :rtype: str
        """
        return self._fulfilled_unit

    @fulfilled_unit.setter
    def fulfilled_unit(self, fulfilled_unit):
        """Sets the fulfilled_unit of this RewardEarningFulfillmentResourceAttributes.

        Unit of the earned reward that has been fulfilled. (Read-only property)

        :param fulfilled_unit: The fulfilled_unit of this RewardEarningFulfillmentResourceAttributes.
        :type fulfilled_unit: str
        """

        self._fulfilled_unit = fulfilled_unit

    @property
    def fulfilled_value(self):
        """Gets the fulfilled_value of this RewardEarningFulfillmentResourceAttributes.

        Value of the earned reward that has been fulfilled. (Must be greater than or equal to 0)

        :return: The fulfilled_value of this RewardEarningFulfillmentResourceAttributes.
        :rtype: float
        """
        return self._fulfilled_value

    @fulfilled_value.setter
    def fulfilled_value(self, fulfilled_value):
        """Sets the fulfilled_value of this RewardEarningFulfillmentResourceAttributes.

        Value of the earned reward that has been fulfilled. (Must be greater than or equal to 0)

        :param fulfilled_value: The fulfilled_value of this RewardEarningFulfillmentResourceAttributes.
        :type fulfilled_value: float
        """
        if fulfilled_value is None:
            raise ValueError("Invalid value for `fulfilled_value`, must not be `None`")

        self._fulfilled_value = fulfilled_value
