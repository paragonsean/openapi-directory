# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class RewardEarningResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, earned_at: str=None, earned_unit: str=None, earned_value: float=None, fulfilled_at: str=None, fulfilled_value: float=None, ready_for_fulfillment: bool=None):
        """RewardEarningResourceAttributes - a model defined in OpenAPI

        :param earned_at: The earned_at of this RewardEarningResourceAttributes.
        :param earned_unit: The earned_unit of this RewardEarningResourceAttributes.
        :param earned_value: The earned_value of this RewardEarningResourceAttributes.
        :param fulfilled_at: The fulfilled_at of this RewardEarningResourceAttributes.
        :param fulfilled_value: The fulfilled_value of this RewardEarningResourceAttributes.
        :param ready_for_fulfillment: The ready_for_fulfillment of this RewardEarningResourceAttributes.
        """
        self.openapi_types = {
            'earned_at': str,
            'earned_unit': str,
            'earned_value': float,
            'fulfilled_at': str,
            'fulfilled_value': float,
            'ready_for_fulfillment': bool
        }

        self.attribute_map = {
            'earned_at': 'earned_at',
            'earned_unit': 'earned_unit',
            'earned_value': 'earned_value',
            'fulfilled_at': 'fulfilled_at',
            'fulfilled_value': 'fulfilled_value',
            'ready_for_fulfillment': 'ready_for_fulfillment'
        }

        self._earned_at = earned_at
        self._earned_unit = earned_unit
        self._earned_value = earned_value
        self._fulfilled_at = fulfilled_at
        self._fulfilled_value = fulfilled_value
        self._ready_for_fulfillment = ready_for_fulfillment

    @classmethod
    def from_dict(cls, dikt: dict) -> 'RewardEarningResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The RewardEarningResource_attributes of this RewardEarningResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def earned_at(self):
        """Gets the earned_at of this RewardEarningResourceAttributes.

        Date at which the reward was earned. (Must be after the reward was allocated and before the reward program activation was deactivated or expired)

        :return: The earned_at of this RewardEarningResourceAttributes.
        :rtype: str
        """
        return self._earned_at

    @earned_at.setter
    def earned_at(self, earned_at):
        """Sets the earned_at of this RewardEarningResourceAttributes.

        Date at which the reward was earned. (Must be after the reward was allocated and before the reward program activation was deactivated or expired)

        :param earned_at: The earned_at of this RewardEarningResourceAttributes.
        :type earned_at: str
        """
        if earned_at is None:
            raise ValueError("Invalid value for `earned_at`, must not be `None`")

        self._earned_at = earned_at

    @property
    def earned_unit(self):
        """Gets the earned_unit of this RewardEarningResourceAttributes.

        Unit of the reward that has been earned. (Read-only property)

        :return: The earned_unit of this RewardEarningResourceAttributes.
        :rtype: str
        """
        return self._earned_unit

    @earned_unit.setter
    def earned_unit(self, earned_unit):
        """Sets the earned_unit of this RewardEarningResourceAttributes.

        Unit of the reward that has been earned. (Read-only property)

        :param earned_unit: The earned_unit of this RewardEarningResourceAttributes.
        :type earned_unit: str
        """

        self._earned_unit = earned_unit

    @property
    def earned_value(self):
        """Gets the earned_value of this RewardEarningResourceAttributes.

        Value of the reward that has been earned. (Must not exceed the allocated value for the reward)

        :return: The earned_value of this RewardEarningResourceAttributes.
        :rtype: float
        """
        return self._earned_value

    @earned_value.setter
    def earned_value(self, earned_value):
        """Sets the earned_value of this RewardEarningResourceAttributes.

        Value of the reward that has been earned. (Must not exceed the allocated value for the reward)

        :param earned_value: The earned_value of this RewardEarningResourceAttributes.
        :type earned_value: float
        """
        if earned_value is None:
            raise ValueError("Invalid value for `earned_value`, must not be `None`")

        self._earned_value = earned_value

    @property
    def fulfilled_at(self):
        """Gets the fulfilled_at of this RewardEarningResourceAttributes.

        Date at which the reward earning was fulfilled. (Read-only property)

        :return: The fulfilled_at of this RewardEarningResourceAttributes.
        :rtype: str
        """
        return self._fulfilled_at

    @fulfilled_at.setter
    def fulfilled_at(self, fulfilled_at):
        """Sets the fulfilled_at of this RewardEarningResourceAttributes.

        Date at which the reward earning was fulfilled. (Read-only property)

        :param fulfilled_at: The fulfilled_at of this RewardEarningResourceAttributes.
        :type fulfilled_at: str
        """

        self._fulfilled_at = fulfilled_at

    @property
    def fulfilled_value(self):
        """Gets the fulfilled_value of this RewardEarningResourceAttributes.

        Value of the earned reward that has been fulfilled. (Read-only property)

        :return: The fulfilled_value of this RewardEarningResourceAttributes.
        :rtype: float
        """
        return self._fulfilled_value

    @fulfilled_value.setter
    def fulfilled_value(self, fulfilled_value):
        """Sets the fulfilled_value of this RewardEarningResourceAttributes.

        Value of the earned reward that has been fulfilled. (Read-only property)

        :param fulfilled_value: The fulfilled_value of this RewardEarningResourceAttributes.
        :type fulfilled_value: float
        """

        self._fulfilled_value = fulfilled_value

    @property
    def ready_for_fulfillment(self):
        """Gets the ready_for_fulfillment of this RewardEarningResourceAttributes.

        If true, the reward earning is ready to be fulfilled, either because the reward program activation was fulfill_as_earned or because the reward program activation has been deactivated. (Read-only property)

        :return: The ready_for_fulfillment of this RewardEarningResourceAttributes.
        :rtype: bool
        """
        return self._ready_for_fulfillment

    @ready_for_fulfillment.setter
    def ready_for_fulfillment(self, ready_for_fulfillment):
        """Sets the ready_for_fulfillment of this RewardEarningResourceAttributes.

        If true, the reward earning is ready to be fulfilled, either because the reward program activation was fulfill_as_earned or because the reward program activation has been deactivated. (Read-only property)

        :param ready_for_fulfillment: The ready_for_fulfillment of this RewardEarningResourceAttributes.
        :type ready_for_fulfillment: bool
        """

        self._ready_for_fulfillment = ready_for_fulfillment
