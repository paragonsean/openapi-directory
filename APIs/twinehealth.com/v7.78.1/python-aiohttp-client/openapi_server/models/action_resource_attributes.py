# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_metric import ActionMetric
from openapi_server.models.action_resource_attributes_adherence import ActionResourceAttributesAdherence
from openapi_server.models.action_resource_attributes_frequency_goal import ActionResourceAttributesFrequencyGoal
from openapi_server.models.action_window import ActionWindow
from openapi_server.models.identifier import Identifier
from openapi_server import util


class ActionResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, thread: str=None, adherence: ActionResourceAttributesAdherence=None, details: Dict[str, object]=None, effective_from: str=None, effective_to: str=None, frequency_goal: ActionResourceAttributesFrequencyGoal=None, identifiers: List[Identifier]=None, intake: Dict[str, object]=None, metric_required: bool=None, metrics: List[ActionMetric]=None, static_title: str=None, title: str=None, tracking: bool=None, type: str=None, windows: List[ActionWindow]=None):
        """ActionResourceAttributes - a model defined in OpenAPI

        :param thread: The thread of this ActionResourceAttributes.
        :param adherence: The adherence of this ActionResourceAttributes.
        :param details: The details of this ActionResourceAttributes.
        :param effective_from: The effective_from of this ActionResourceAttributes.
        :param effective_to: The effective_to of this ActionResourceAttributes.
        :param frequency_goal: The frequency_goal of this ActionResourceAttributes.
        :param identifiers: The identifiers of this ActionResourceAttributes.
        :param intake: The intake of this ActionResourceAttributes.
        :param metric_required: The metric_required of this ActionResourceAttributes.
        :param metrics: The metrics of this ActionResourceAttributes.
        :param static_title: The static_title of this ActionResourceAttributes.
        :param title: The title of this ActionResourceAttributes.
        :param tracking: The tracking of this ActionResourceAttributes.
        :param type: The type of this ActionResourceAttributes.
        :param windows: The windows of this ActionResourceAttributes.
        """
        self.openapi_types = {
            'thread': str,
            'adherence': ActionResourceAttributesAdherence,
            'details': Dict[str, object],
            'effective_from': str,
            'effective_to': str,
            'frequency_goal': ActionResourceAttributesFrequencyGoal,
            'identifiers': List[Identifier],
            'intake': Dict[str, object],
            'metric_required': bool,
            'metrics': List[ActionMetric],
            'static_title': str,
            'title': str,
            'tracking': bool,
            'type': str,
            'windows': List[ActionWindow]
        }

        self.attribute_map = {
            'thread': '_thread',
            'adherence': 'adherence',
            'details': 'details',
            'effective_from': 'effective_from',
            'effective_to': 'effective_to',
            'frequency_goal': 'frequency_goal',
            'identifiers': 'identifiers',
            'intake': 'intake',
            'metric_required': 'metric_required',
            'metrics': 'metrics',
            'static_title': 'static_title',
            'title': 'title',
            'tracking': 'tracking',
            'type': 'type',
            'windows': 'windows'
        }

        self._thread = thread
        self._adherence = adherence
        self._details = details
        self._effective_from = effective_from
        self._effective_to = effective_to
        self._frequency_goal = frequency_goal
        self._identifiers = identifiers
        self._intake = intake
        self._metric_required = metric_required
        self._metrics = metrics
        self._static_title = static_title
        self._title = title
        self._tracking = tracking
        self._type = type
        self._windows = windows

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionResource_attributes of this ActionResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thread(self):
        """Gets the thread of this ActionResourceAttributes.


        :return: The thread of this ActionResourceAttributes.
        :rtype: str
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this ActionResourceAttributes.


        :param thread: The thread of this ActionResourceAttributes.
        :type thread: str
        """

        self._thread = thread

    @property
    def adherence(self):
        """Gets the adherence of this ActionResourceAttributes.


        :return: The adherence of this ActionResourceAttributes.
        :rtype: ActionResourceAttributesAdherence
        """
        return self._adherence

    @adherence.setter
    def adherence(self, adherence):
        """Sets the adherence of this ActionResourceAttributes.


        :param adherence: The adherence of this ActionResourceAttributes.
        :type adherence: ActionResourceAttributesAdherence
        """

        self._adherence = adherence

    @property
    def details(self):
        """Gets the details of this ActionResourceAttributes.


        :return: The details of this ActionResourceAttributes.
        :rtype: Dict[str, object]
        """
        return self._details

    @details.setter
    def details(self, details):
        """Sets the details of this ActionResourceAttributes.


        :param details: The details of this ActionResourceAttributes.
        :type details: Dict[str, object]
        """

        self._details = details

    @property
    def effective_from(self):
        """Gets the effective_from of this ActionResourceAttributes.


        :return: The effective_from of this ActionResourceAttributes.
        :rtype: str
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from):
        """Sets the effective_from of this ActionResourceAttributes.


        :param effective_from: The effective_from of this ActionResourceAttributes.
        :type effective_from: str
        """
        if effective_from is None:
            raise ValueError("Invalid value for `effective_from`, must not be `None`")

        self._effective_from = effective_from

    @property
    def effective_to(self):
        """Gets the effective_to of this ActionResourceAttributes.


        :return: The effective_to of this ActionResourceAttributes.
        :rtype: str
        """
        return self._effective_to

    @effective_to.setter
    def effective_to(self, effective_to):
        """Sets the effective_to of this ActionResourceAttributes.


        :param effective_to: The effective_to of this ActionResourceAttributes.
        :type effective_to: str
        """

        self._effective_to = effective_to

    @property
    def frequency_goal(self):
        """Gets the frequency_goal of this ActionResourceAttributes.


        :return: The frequency_goal of this ActionResourceAttributes.
        :rtype: ActionResourceAttributesFrequencyGoal
        """
        return self._frequency_goal

    @frequency_goal.setter
    def frequency_goal(self, frequency_goal):
        """Sets the frequency_goal of this ActionResourceAttributes.


        :param frequency_goal: The frequency_goal of this ActionResourceAttributes.
        :type frequency_goal: ActionResourceAttributesFrequencyGoal
        """

        self._frequency_goal = frequency_goal

    @property
    def identifiers(self):
        """Gets the identifiers of this ActionResourceAttributes.


        :return: The identifiers of this ActionResourceAttributes.
        :rtype: List[Identifier]
        """
        return self._identifiers

    @identifiers.setter
    def identifiers(self, identifiers):
        """Sets the identifiers of this ActionResourceAttributes.


        :param identifiers: The identifiers of this ActionResourceAttributes.
        :type identifiers: List[Identifier]
        """

        self._identifiers = identifiers

    @property
    def intake(self):
        """Gets the intake of this ActionResourceAttributes.


        :return: The intake of this ActionResourceAttributes.
        :rtype: Dict[str, object]
        """
        return self._intake

    @intake.setter
    def intake(self, intake):
        """Sets the intake of this ActionResourceAttributes.


        :param intake: The intake of this ActionResourceAttributes.
        :type intake: Dict[str, object]
        """

        self._intake = intake

    @property
    def metric_required(self):
        """Gets the metric_required of this ActionResourceAttributes.


        :return: The metric_required of this ActionResourceAttributes.
        :rtype: bool
        """
        return self._metric_required

    @metric_required.setter
    def metric_required(self, metric_required):
        """Sets the metric_required of this ActionResourceAttributes.


        :param metric_required: The metric_required of this ActionResourceAttributes.
        :type metric_required: bool
        """

        self._metric_required = metric_required

    @property
    def metrics(self):
        """Gets the metrics of this ActionResourceAttributes.


        :return: The metrics of this ActionResourceAttributes.
        :rtype: List[ActionMetric]
        """
        return self._metrics

    @metrics.setter
    def metrics(self, metrics):
        """Sets the metrics of this ActionResourceAttributes.


        :param metrics: The metrics of this ActionResourceAttributes.
        :type metrics: List[ActionMetric]
        """

        self._metrics = metrics

    @property
    def static_title(self):
        """Gets the static_title of this ActionResourceAttributes.


        :return: The static_title of this ActionResourceAttributes.
        :rtype: str
        """
        return self._static_title

    @static_title.setter
    def static_title(self, static_title):
        """Sets the static_title of this ActionResourceAttributes.


        :param static_title: The static_title of this ActionResourceAttributes.
        :type static_title: str
        """

        self._static_title = static_title

    @property
    def title(self):
        """Gets the title of this ActionResourceAttributes.


        :return: The title of this ActionResourceAttributes.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this ActionResourceAttributes.


        :param title: The title of this ActionResourceAttributes.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def tracking(self):
        """Gets the tracking of this ActionResourceAttributes.


        :return: The tracking of this ActionResourceAttributes.
        :rtype: bool
        """
        return self._tracking

    @tracking.setter
    def tracking(self, tracking):
        """Sets the tracking of this ActionResourceAttributes.


        :param tracking: The tracking of this ActionResourceAttributes.
        :type tracking: bool
        """

        self._tracking = tracking

    @property
    def type(self):
        """Gets the type of this ActionResourceAttributes.


        :return: The type of this ActionResourceAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActionResourceAttributes.


        :param type: The type of this ActionResourceAttributes.
        :type type: str
        """
        allowed_values = ["other_lifestyle"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def windows(self):
        """Gets the windows of this ActionResourceAttributes.


        :return: The windows of this ActionResourceAttributes.
        :rtype: List[ActionWindow]
        """
        return self._windows

    @windows.setter
    def windows(self, windows):
        """Sets the windows of this ActionResourceAttributes.


        :param windows: The windows of this ActionResourceAttributes.
        :type windows: List[ActionWindow]
        """

        self._windows = windows
