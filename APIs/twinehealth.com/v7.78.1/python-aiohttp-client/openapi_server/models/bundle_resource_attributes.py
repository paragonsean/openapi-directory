# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class BundleResourceAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, thread: str=None, effective_from: str=None, effective_to: str=None, title: str=None, type: str=None):
        """BundleResourceAttributes - a model defined in OpenAPI

        :param thread: The thread of this BundleResourceAttributes.
        :param effective_from: The effective_from of this BundleResourceAttributes.
        :param effective_to: The effective_to of this BundleResourceAttributes.
        :param title: The title of this BundleResourceAttributes.
        :param type: The type of this BundleResourceAttributes.
        """
        self.openapi_types = {
            'thread': str,
            'effective_from': str,
            'effective_to': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'thread': '_thread',
            'effective_from': 'effective_from',
            'effective_to': 'effective_to',
            'title': 'title',
            'type': 'type'
        }

        self._thread = thread
        self._effective_from = effective_from
        self._effective_to = effective_to
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'BundleResourceAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The BundleResource_attributes of this BundleResourceAttributes.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def thread(self):
        """Gets the thread of this BundleResourceAttributes.


        :return: The thread of this BundleResourceAttributes.
        :rtype: str
        """
        return self._thread

    @thread.setter
    def thread(self, thread):
        """Sets the thread of this BundleResourceAttributes.


        :param thread: The thread of this BundleResourceAttributes.
        :type thread: str
        """

        self._thread = thread

    @property
    def effective_from(self):
        """Gets the effective_from of this BundleResourceAttributes.


        :return: The effective_from of this BundleResourceAttributes.
        :rtype: str
        """
        return self._effective_from

    @effective_from.setter
    def effective_from(self, effective_from):
        """Sets the effective_from of this BundleResourceAttributes.


        :param effective_from: The effective_from of this BundleResourceAttributes.
        :type effective_from: str
        """
        if effective_from is None:
            raise ValueError("Invalid value for `effective_from`, must not be `None`")

        self._effective_from = effective_from

    @property
    def effective_to(self):
        """Gets the effective_to of this BundleResourceAttributes.


        :return: The effective_to of this BundleResourceAttributes.
        :rtype: str
        """
        return self._effective_to

    @effective_to.setter
    def effective_to(self, effective_to):
        """Sets the effective_to of this BundleResourceAttributes.


        :param effective_to: The effective_to of this BundleResourceAttributes.
        :type effective_to: str
        """

        self._effective_to = effective_to

    @property
    def title(self):
        """Gets the title of this BundleResourceAttributes.


        :return: The title of this BundleResourceAttributes.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this BundleResourceAttributes.


        :param title: The title of this BundleResourceAttributes.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def type(self):
        """Gets the type of this BundleResourceAttributes.


        :return: The type of this BundleResourceAttributes.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this BundleResourceAttributes.


        :param type: The type of this BundleResourceAttributes.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
