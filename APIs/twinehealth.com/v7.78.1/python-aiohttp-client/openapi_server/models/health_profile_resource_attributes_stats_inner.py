# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthProfileResourceAttributesStatsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, answered: float=None, category: str=None, total: float=None):
        """HealthProfileResourceAttributesStatsInner - a model defined in OpenAPI

        :param answered: The answered of this HealthProfileResourceAttributesStatsInner.
        :param category: The category of this HealthProfileResourceAttributesStatsInner.
        :param total: The total of this HealthProfileResourceAttributesStatsInner.
        """
        self.openapi_types = {
            'answered': float,
            'category': str,
            'total': float
        }

        self.attribute_map = {
            'answered': 'answered',
            'category': 'category',
            'total': 'total'
        }

        self._answered = answered
        self._category = category
        self._total = total

    @classmethod
    def from_dict(cls, dikt: dict) -> 'HealthProfileResourceAttributesStatsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The HealthProfileResource_attributes_stats_inner of this HealthProfileResourceAttributesStatsInner.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def answered(self):
        """Gets the answered of this HealthProfileResourceAttributesStatsInner.


        :return: The answered of this HealthProfileResourceAttributesStatsInner.
        :rtype: float
        """
        return self._answered

    @answered.setter
    def answered(self, answered):
        """Sets the answered of this HealthProfileResourceAttributesStatsInner.


        :param answered: The answered of this HealthProfileResourceAttributesStatsInner.
        :type answered: float
        """

        self._answered = answered

    @property
    def category(self):
        """Gets the category of this HealthProfileResourceAttributesStatsInner.


        :return: The category of this HealthProfileResourceAttributesStatsInner.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this HealthProfileResourceAttributesStatsInner.


        :param category: The category of this HealthProfileResourceAttributesStatsInner.
        :type category: str
        """
        allowed_values = ["lifestyle_behaviors", "mental_wellbeing", "preventative_care", "overall"]  # noqa: E501
        if category not in allowed_values:
            raise ValueError(
                "Invalid value for `category` ({0}), must be one of {1}"
                .format(category, allowed_values)
            )

        self._category = category

    @property
    def total(self):
        """Gets the total of this HealthProfileResourceAttributesStatsInner.


        :return: The total of this HealthProfileResourceAttributesStatsInner.
        :rtype: float
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this HealthProfileResourceAttributesStatsInner.


        :param total: The total of this HealthProfileResourceAttributesStatsInner.
        :type total: float
        """

        self._total = total
