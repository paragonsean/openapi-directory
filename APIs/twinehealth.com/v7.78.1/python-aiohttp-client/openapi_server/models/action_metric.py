# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.action_metric_validations import ActionMetricValidations
from openapi_server import util


class ActionMetric(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, goal: object=None, metric_type: str=None, unit: str=None, validations: ActionMetricValidations=None):
        """ActionMetric - a model defined in OpenAPI

        :param goal: The goal of this ActionMetric.
        :param metric_type: The metric_type of this ActionMetric.
        :param unit: The unit of this ActionMetric.
        :param validations: The validations of this ActionMetric.
        """
        self.openapi_types = {
            'goal': object,
            'metric_type': str,
            'unit': str,
            'validations': ActionMetricValidations
        }

        self.attribute_map = {
            'goal': 'goal',
            'metric_type': 'metric_type',
            'unit': 'unit',
            'validations': 'validations'
        }

        self._goal = goal
        self._metric_type = metric_type
        self._unit = unit
        self._validations = validations

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ActionMetric':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ActionMetric of this ActionMetric.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def goal(self):
        """Gets the goal of this ActionMetric.


        :return: The goal of this ActionMetric.
        :rtype: object
        """
        return self._goal

    @goal.setter
    def goal(self, goal):
        """Sets the goal of this ActionMetric.


        :param goal: The goal of this ActionMetric.
        :type goal: object
        """

        self._goal = goal

    @property
    def metric_type(self):
        """Gets the metric_type of this ActionMetric.


        :return: The metric_type of this ActionMetric.
        :rtype: str
        """
        return self._metric_type

    @metric_type.setter
    def metric_type(self, metric_type):
        """Sets the metric_type of this ActionMetric.


        :param metric_type: The metric_type of this ActionMetric.
        :type metric_type: str
        """

        self._metric_type = metric_type

    @property
    def unit(self):
        """Gets the unit of this ActionMetric.


        :return: The unit of this ActionMetric.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this ActionMetric.


        :param unit: The unit of this ActionMetric.
        :type unit: str
        """

        self._unit = unit

    @property
    def validations(self):
        """Gets the validations of this ActionMetric.


        :return: The validations of this ActionMetric.
        :rtype: ActionMetricValidations
        """
        return self._validations

    @validations.setter
    def validations(self, validations):
        """Sets the validations of this ActionMetric.


        :param validations: The validations of this ActionMetric.
        :type validations: ActionMetricValidations
        """

        self._validations = validations
