# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.patient_plan_summary_resource_relationships_actions import PatientPlanSummaryResourceRelationshipsActions
from openapi_server.models.patient_plan_summary_resource_relationships_patient import PatientPlanSummaryResourceRelationshipsPatient
from openapi_server import util


class PatientPlanSummaryResourceRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions: PatientPlanSummaryResourceRelationshipsActions=None, bundles: PatientPlanSummaryResourceRelationshipsActions=None, current_results: PatientPlanSummaryResourceRelationshipsActions=None, patient: PatientPlanSummaryResourceRelationshipsPatient=None):
        """PatientPlanSummaryResourceRelationships - a model defined in OpenAPI

        :param actions: The actions of this PatientPlanSummaryResourceRelationships.
        :param bundles: The bundles of this PatientPlanSummaryResourceRelationships.
        :param current_results: The current_results of this PatientPlanSummaryResourceRelationships.
        :param patient: The patient of this PatientPlanSummaryResourceRelationships.
        """
        self.openapi_types = {
            'actions': PatientPlanSummaryResourceRelationshipsActions,
            'bundles': PatientPlanSummaryResourceRelationshipsActions,
            'current_results': PatientPlanSummaryResourceRelationshipsActions,
            'patient': PatientPlanSummaryResourceRelationshipsPatient
        }

        self.attribute_map = {
            'actions': 'actions',
            'bundles': 'bundles',
            'current_results': 'current_results',
            'patient': 'patient'
        }

        self._actions = actions
        self._bundles = bundles
        self._current_results = current_results
        self._patient = patient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PatientPlanSummaryResourceRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PatientPlanSummaryResource_relationships of this PatientPlanSummaryResourceRelationships.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self):
        """Gets the actions of this PatientPlanSummaryResourceRelationships.


        :return: The actions of this PatientPlanSummaryResourceRelationships.
        :rtype: PatientPlanSummaryResourceRelationshipsActions
        """
        return self._actions

    @actions.setter
    def actions(self, actions):
        """Sets the actions of this PatientPlanSummaryResourceRelationships.


        :param actions: The actions of this PatientPlanSummaryResourceRelationships.
        :type actions: PatientPlanSummaryResourceRelationshipsActions
        """
        if actions is None:
            raise ValueError("Invalid value for `actions`, must not be `None`")

        self._actions = actions

    @property
    def bundles(self):
        """Gets the bundles of this PatientPlanSummaryResourceRelationships.


        :return: The bundles of this PatientPlanSummaryResourceRelationships.
        :rtype: PatientPlanSummaryResourceRelationshipsActions
        """
        return self._bundles

    @bundles.setter
    def bundles(self, bundles):
        """Sets the bundles of this PatientPlanSummaryResourceRelationships.


        :param bundles: The bundles of this PatientPlanSummaryResourceRelationships.
        :type bundles: PatientPlanSummaryResourceRelationshipsActions
        """
        if bundles is None:
            raise ValueError("Invalid value for `bundles`, must not be `None`")

        self._bundles = bundles

    @property
    def current_results(self):
        """Gets the current_results of this PatientPlanSummaryResourceRelationships.


        :return: The current_results of this PatientPlanSummaryResourceRelationships.
        :rtype: PatientPlanSummaryResourceRelationshipsActions
        """
        return self._current_results

    @current_results.setter
    def current_results(self, current_results):
        """Sets the current_results of this PatientPlanSummaryResourceRelationships.


        :param current_results: The current_results of this PatientPlanSummaryResourceRelationships.
        :type current_results: PatientPlanSummaryResourceRelationshipsActions
        """

        self._current_results = current_results

    @property
    def patient(self):
        """Gets the patient of this PatientPlanSummaryResourceRelationships.


        :return: The patient of this PatientPlanSummaryResourceRelationships.
        :rtype: PatientPlanSummaryResourceRelationshipsPatient
        """
        return self._patient

    @patient.setter
    def patient(self, patient):
        """Sets the patient of this PatientPlanSummaryResourceRelationships.


        :param patient: The patient of this PatientPlanSummaryResourceRelationships.
        :type patient: PatientPlanSummaryResourceRelationshipsPatient
        """
        if patient is None:
            raise ValueError("Invalid value for `patient`, must not be `None`")

        self._patient = patient
