/*
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateCalendarEventRequest;
import org.openapitools.client.model.CreateCalendarEventResponse;
import org.openapitools.client.model.CreateOrUpdateErrorResponse;
import org.openapitools.client.model.FetchCalendarEventResponse;
import org.openapitools.client.model.FetchCalendarEventsResponse;
import org.openapitools.client.model.FetchErrorResponse;
import org.openapitools.client.model.UpdateCalendarEventRequest;
import org.openapitools.client.model.UpdateCalendarEventResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CalendarEventApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CalendarEventApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CalendarEventApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createCalendarEvent
     * @param createCalendarEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCalendarEventCall(CreateCalendarEventRequest createCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCalendarEventRequest;

        // create path and map variables
        String localVarPath = "/calendar_event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCalendarEventValidateBeforeCall(CreateCalendarEventRequest createCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCalendarEventRequest' is set
        if (createCalendarEventRequest == null) {
            throw new ApiException("Missing the required parameter 'createCalendarEventRequest' when calling createCalendarEvent(Async)");
        }

        return createCalendarEventCall(createCalendarEventRequest, _callback);

    }

    /**
     * Create calendar event
     * Create a calendar event for a patient. Attribute &#x60;all_day&#x60; must be set to &#x60;true&#x60; and &#x60;end_at&#x60; cannot be set for &#x60;plan-check-in&#x60; event type.
     * @param createCalendarEventRequest  (required)
     * @return CreateCalendarEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public CreateCalendarEventResponse createCalendarEvent(CreateCalendarEventRequest createCalendarEventRequest) throws ApiException {
        ApiResponse<CreateCalendarEventResponse> localVarResp = createCalendarEventWithHttpInfo(createCalendarEventRequest);
        return localVarResp.getData();
    }

    /**
     * Create calendar event
     * Create a calendar event for a patient. Attribute &#x60;all_day&#x60; must be set to &#x60;true&#x60; and &#x60;end_at&#x60; cannot be set for &#x60;plan-check-in&#x60; event type.
     * @param createCalendarEventRequest  (required)
     * @return ApiResponse&lt;CreateCalendarEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateCalendarEventResponse> createCalendarEventWithHttpInfo(CreateCalendarEventRequest createCalendarEventRequest) throws ApiException {
        okhttp3.Call localVarCall = createCalendarEventValidateBeforeCall(createCalendarEventRequest, null);
        Type localVarReturnType = new TypeToken<CreateCalendarEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create calendar event (asynchronously)
     * Create a calendar event for a patient. Attribute &#x60;all_day&#x60; must be set to &#x60;true&#x60; and &#x60;end_at&#x60; cannot be set for &#x60;plan-check-in&#x60; event type.
     * @param createCalendarEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCalendarEventAsync(CreateCalendarEventRequest createCalendarEventRequest, final ApiCallback<CreateCalendarEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCalendarEventValidateBeforeCall(createCalendarEventRequest, _callback);
        Type localVarReturnType = new TypeToken<CreateCalendarEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCalendarEvent
     * @param id Calendar event identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCalendarEventCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar_event/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCalendarEventValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteCalendarEvent(Async)");
        }

        return deleteCalendarEventCall(id, _callback);

    }

    /**
     * Delete a calendar event
     * Delete a calendar event by id
     * @param id Calendar event identifier (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCalendarEvent(String id) throws ApiException {
        deleteCalendarEventWithHttpInfo(id);
    }

    /**
     * Delete a calendar event
     * Delete a calendar event by id
     * @param id Calendar event identifier (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCalendarEventWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteCalendarEventValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete a calendar event (asynchronously)
     * Delete a calendar event by id
     * @param id Calendar event identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCalendarEventAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCalendarEventValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCalendarEvent
     * @param id Calendar event identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCalendarEventCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar_event/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCalendarEventValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchCalendarEvent(Async)");
        }

        return fetchCalendarEventCall(id, _callback);

    }

    /**
     * Get a calendar event
     * Get a calendar event by id
     * @param id Calendar event identifier (required)
     * @return FetchCalendarEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FetchCalendarEventResponse fetchCalendarEvent(String id) throws ApiException {
        ApiResponse<FetchCalendarEventResponse> localVarResp = fetchCalendarEventWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a calendar event
     * Get a calendar event by id
     * @param id Calendar event identifier (required)
     * @return ApiResponse&lt;FetchCalendarEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FetchCalendarEventResponse> fetchCalendarEventWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchCalendarEventValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FetchCalendarEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a calendar event (asynchronously)
     * Get a calendar event by id
     * @param id Calendar event identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCalendarEventAsync(String id, final ApiCallback<FetchCalendarEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCalendarEventValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FetchCalendarEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchCalendarEvents
     * @param filterPatient Patient id to fetch calendar event. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterGroups Comma-separated list of group ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterAttendees Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterType Calendar event type (optional)
     * @param filterCompleted If not specified, return all calendar events. If set to &#x60;true&#x60; return only events marked as completed, if set to &#x60;false&#x60;, return only events not marked as completed yet. (optional)
     * @param filterStartAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events starting in November 2017 (America/New_York): &#x60;filter[start_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterEndAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events ending in November 2017 (America/New_York): &#x60;filter[end_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCompletedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events completed in November 2017 (America/New_York): &#x60;filter[completed_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @param include List of related resources to include in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCalendarEventsCall(String filterPatient, String filterGroups, String filterOrganization, String filterAttendees, String filterType, Boolean filterCompleted, String filterStartAt, String filterEndAt, String filterCompletedAt, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, String include, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar_event";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterPatient != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[patient]", filterPatient));
        }

        if (filterGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[groups]", filterGroups));
        }

        if (filterOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[organization]", filterOrganization));
        }

        if (filterAttendees != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[attendees]", filterAttendees));
        }

        if (filterType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[type]", filterType));
        }

        if (filterCompleted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[completed]", filterCompleted));
        }

        if (filterStartAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[start_at]", filterStartAt));
        }

        if (filterEndAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[end_at]", filterEndAt));
        }

        if (filterCompletedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[completed_at]", filterCompletedAt));
        }

        if (filterCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at]", filterCreatedAt));
        }

        if (filterUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[updated_at]", filterUpdatedAt));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (pageLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[limit]", pageLimit));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[cursor]", pageCursor));
        }

        if (include != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("include", include));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchCalendarEventsValidateBeforeCall(String filterPatient, String filterGroups, String filterOrganization, String filterAttendees, String filterType, Boolean filterCompleted, String filterStartAt, String filterEndAt, String filterCompletedAt, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, String include, final ApiCallback _callback) throws ApiException {
        return fetchCalendarEventsCall(filterPatient, filterGroups, filterOrganization, filterAttendees, filterType, filterCompleted, filterStartAt, filterEndAt, filterCompletedAt, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, include, _callback);

    }

    /**
     * List calendar events
     * Get a list of calendar events
     * @param filterPatient Patient id to fetch calendar event. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterGroups Comma-separated list of group ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterAttendees Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterType Calendar event type (optional)
     * @param filterCompleted If not specified, return all calendar events. If set to &#x60;true&#x60; return only events marked as completed, if set to &#x60;false&#x60;, return only events not marked as completed yet. (optional)
     * @param filterStartAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events starting in November 2017 (America/New_York): &#x60;filter[start_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterEndAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events ending in November 2017 (America/New_York): &#x60;filter[end_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCompletedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events completed in November 2017 (America/New_York): &#x60;filter[completed_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @param include List of related resources to include in the response (optional)
     * @return FetchCalendarEventsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public FetchCalendarEventsResponse fetchCalendarEvents(String filterPatient, String filterGroups, String filterOrganization, String filterAttendees, String filterType, Boolean filterCompleted, String filterStartAt, String filterEndAt, String filterCompletedAt, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, String include) throws ApiException {
        ApiResponse<FetchCalendarEventsResponse> localVarResp = fetchCalendarEventsWithHttpInfo(filterPatient, filterGroups, filterOrganization, filterAttendees, filterType, filterCompleted, filterStartAt, filterEndAt, filterCompletedAt, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, include);
        return localVarResp.getData();
    }

    /**
     * List calendar events
     * Get a list of calendar events
     * @param filterPatient Patient id to fetch calendar event. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterGroups Comma-separated list of group ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterAttendees Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterType Calendar event type (optional)
     * @param filterCompleted If not specified, return all calendar events. If set to &#x60;true&#x60; return only events marked as completed, if set to &#x60;false&#x60;, return only events not marked as completed yet. (optional)
     * @param filterStartAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events starting in November 2017 (America/New_York): &#x60;filter[start_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterEndAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events ending in November 2017 (America/New_York): &#x60;filter[end_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCompletedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events completed in November 2017 (America/New_York): &#x60;filter[completed_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @param include List of related resources to include in the response (optional)
     * @return ApiResponse&lt;FetchCalendarEventsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FetchCalendarEventsResponse> fetchCalendarEventsWithHttpInfo(String filterPatient, String filterGroups, String filterOrganization, String filterAttendees, String filterType, Boolean filterCompleted, String filterStartAt, String filterEndAt, String filterCompletedAt, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, String include) throws ApiException {
        okhttp3.Call localVarCall = fetchCalendarEventsValidateBeforeCall(filterPatient, filterGroups, filterOrganization, filterAttendees, filterType, filterCompleted, filterStartAt, filterEndAt, filterCompletedAt, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, include, null);
        Type localVarReturnType = new TypeToken<FetchCalendarEventsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List calendar events (asynchronously)
     * Get a list of calendar events
     * @param filterPatient Patient id to fetch calendar event. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterGroups Comma-separated list of group ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterAttendees Comma-separated list of coach or patient ids. Note that one of the following filters must be specified: &#x60;filter[patient]&#x60;, &#x60;filter[group]&#x60;, &#x60;filter[organization]&#x60;, or &#x60;filter[attendees]&#x60;.  (optional)
     * @param filterType Calendar event type (optional)
     * @param filterCompleted If not specified, return all calendar events. If set to &#x60;true&#x60; return only events marked as completed, if set to &#x60;false&#x60;, return only events not marked as completed yet. (optional)
     * @param filterStartAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events starting in November 2017 (America/New_York): &#x60;filter[start_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterEndAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events ending in November 2017 (America/New_York): &#x60;filter[end_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCompletedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events completed in November 2017 (America/New_York): &#x60;filter[completed_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for events updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @param include List of related resources to include in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchCalendarEventsAsync(String filterPatient, String filterGroups, String filterOrganization, String filterAttendees, String filterType, Boolean filterCompleted, String filterStartAt, String filterEndAt, String filterCompletedAt, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, String include, final ApiCallback<FetchCalendarEventsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchCalendarEventsValidateBeforeCall(filterPatient, filterGroups, filterOrganization, filterAttendees, filterType, filterCompleted, filterStartAt, filterEndAt, filterCompletedAt, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, include, _callback);
        Type localVarReturnType = new TypeToken<FetchCalendarEventsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCalendarEvent
     * @param id Calendar event identifier (required)
     * @param updateCalendarEventRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCalendarEventCall(String id, UpdateCalendarEventRequest updateCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCalendarEventRequest;

        // create path and map variables
        String localVarPath = "/calendar_event/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCalendarEventValidateBeforeCall(String id, UpdateCalendarEventRequest updateCalendarEventRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updateCalendarEvent(Async)");
        }

        // verify the required parameter 'updateCalendarEventRequest' is set
        if (updateCalendarEventRequest == null) {
            throw new ApiException("Missing the required parameter 'updateCalendarEventRequest' when calling updateCalendarEvent(Async)");
        }

        return updateCalendarEventCall(id, updateCalendarEventRequest, _callback);

    }

    /**
     * Update a calendar event
     * Update a calendar event for a patient. Attribute &#x60;all_day&#x60; must be true and &#x60;end_at&#x60; cannot be specified for &#x60;plan-check-in&#x60; event type. To mark a calendar event as &#39;completed&#39;, set &#x60;completed_at&#x60; and &#x60;completed_by&#x60; to desired values.  To mark a completed calendar event as &#39;not completed&#39;, set &#x60;completed_at&#x60; and &#x60;completed_by&#x60; to &#x60;null&#x60;. Attendees can be added or removed, but response status cannot be updated. Use the calendar event response api for response status updates instead.
     * @param id Calendar event identifier (required)
     * @param updateCalendarEventRequest  (required)
     * @return UpdateCalendarEventResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdateCalendarEventResponse updateCalendarEvent(String id, UpdateCalendarEventRequest updateCalendarEventRequest) throws ApiException {
        ApiResponse<UpdateCalendarEventResponse> localVarResp = updateCalendarEventWithHttpInfo(id, updateCalendarEventRequest);
        return localVarResp.getData();
    }

    /**
     * Update a calendar event
     * Update a calendar event for a patient. Attribute &#x60;all_day&#x60; must be true and &#x60;end_at&#x60; cannot be specified for &#x60;plan-check-in&#x60; event type. To mark a calendar event as &#39;completed&#39;, set &#x60;completed_at&#x60; and &#x60;completed_by&#x60; to desired values.  To mark a completed calendar event as &#39;not completed&#39;, set &#x60;completed_at&#x60; and &#x60;completed_by&#x60; to &#x60;null&#x60;. Attendees can be added or removed, but response status cannot be updated. Use the calendar event response api for response status updates instead.
     * @param id Calendar event identifier (required)
     * @param updateCalendarEventRequest  (required)
     * @return ApiResponse&lt;UpdateCalendarEventResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateCalendarEventResponse> updateCalendarEventWithHttpInfo(String id, UpdateCalendarEventRequest updateCalendarEventRequest) throws ApiException {
        okhttp3.Call localVarCall = updateCalendarEventValidateBeforeCall(id, updateCalendarEventRequest, null);
        Type localVarReturnType = new TypeToken<UpdateCalendarEventResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a calendar event (asynchronously)
     * Update a calendar event for a patient. Attribute &#x60;all_day&#x60; must be true and &#x60;end_at&#x60; cannot be specified for &#x60;plan-check-in&#x60; event type. To mark a calendar event as &#39;completed&#39;, set &#x60;completed_at&#x60; and &#x60;completed_by&#x60; to desired values.  To mark a completed calendar event as &#39;not completed&#39;, set &#x60;completed_at&#x60; and &#x60;completed_by&#x60; to &#x60;null&#x60;. Attendees can be added or removed, but response status cannot be updated. Use the calendar event response api for response status updates instead.
     * @param id Calendar event identifier (required)
     * @param updateCalendarEventRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCalendarEventAsync(String id, UpdateCalendarEventRequest updateCalendarEventRequest, final ApiCallback<UpdateCalendarEventResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCalendarEventValidateBeforeCall(id, updateCalendarEventRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdateCalendarEventResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
