/*
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RewardProgramActivationResourceAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:16.215344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RewardProgramActivationResourceAttributes {
  public static final String SERIALIZED_NAME_ACTIVATED_AT = "activated_at";
  @SerializedName(SERIALIZED_NAME_ACTIVATED_AT)
  private String activatedAt;

  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private Boolean active = true;

  public static final String SERIALIZED_NAME_ALLOCATED_COUNT = "allocated_count";
  @SerializedName(SERIALIZED_NAME_ALLOCATED_COUNT)
  private BigDecimal allocatedCount;

  public static final String SERIALIZED_NAME_BUDGET_UNIT = "budget_unit";
  @SerializedName(SERIALIZED_NAME_BUDGET_UNIT)
  private String budgetUnit;

  public static final String SERIALIZED_NAME_DEACTIVATED_AT = "deactivated_at";
  @SerializedName(SERIALIZED_NAME_DEACTIVATED_AT)
  private String deactivatedAt;

  public static final String SERIALIZED_NAME_EARNED_COUNT = "earned_count";
  @SerializedName(SERIALIZED_NAME_EARNED_COUNT)
  private BigDecimal earnedCount;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private String expiresAt;

  public static final String SERIALIZED_NAME_FULFILL_AS_EARNED = "fulfill_as_earned";
  @SerializedName(SERIALIZED_NAME_FULFILL_AS_EARNED)
  private Boolean fulfillAsEarned;

  public static final String SERIALIZED_NAME_TOTAL_ALLOCATED_VALUE = "total_allocated_value";
  @SerializedName(SERIALIZED_NAME_TOTAL_ALLOCATED_VALUE)
  private BigDecimal totalAllocatedValue;

  public static final String SERIALIZED_NAME_TOTAL_EARNED_VALUE = "total_earned_value";
  @SerializedName(SERIALIZED_NAME_TOTAL_EARNED_VALUE)
  private BigDecimal totalEarnedValue;

  public RewardProgramActivationResourceAttributes() {
  }

  public RewardProgramActivationResourceAttributes(
     BigDecimal allocatedCount, 
     String budgetUnit, 
     BigDecimal earnedCount, 
     String expiresAt, 
     Boolean fulfillAsEarned, 
     BigDecimal totalAllocatedValue, 
     BigDecimal totalEarnedValue
  ) {
    this();
    this.allocatedCount = allocatedCount;
    this.budgetUnit = budgetUnit;
    this.earnedCount = earnedCount;
    this.expiresAt = expiresAt;
    this.fulfillAsEarned = fulfillAsEarned;
    this.totalAllocatedValue = totalAllocatedValue;
    this.totalEarnedValue = totalEarnedValue;
  }

  public RewardProgramActivationResourceAttributes activatedAt(String activatedAt) {
    this.activatedAt = activatedAt;
    return this;
  }

  /**
   * Date at which the reward program was activated for the patient. (Must be between the start_at and end_at dates for the reward program)
   * @return activatedAt
   */
  @javax.annotation.Nonnull
  public String getActivatedAt() {
    return activatedAt;
  }

  public void setActivatedAt(String activatedAt) {
    this.activatedAt = activatedAt;
  }


  public RewardProgramActivationResourceAttributes active(Boolean active) {
    this.active = active;
    return this;
  }

  /**
   * If true, the reward program is currently active.
   * @return active
   */
  @javax.annotation.Nullable
  public Boolean getActive() {
    return active;
  }

  public void setActive(Boolean active) {
    this.active = active;
  }


  /**
   * Number of rewards allocated. (Read-only property)
   * @return allocatedCount
   */
  @javax.annotation.Nullable
  public BigDecimal getAllocatedCount() {
    return allocatedCount;
  }



  /**
   * Unit of the reward program budget. (Read-only property)
   * @return budgetUnit
   */
  @javax.annotation.Nullable
  public String getBudgetUnit() {
    return budgetUnit;
  }



  public RewardProgramActivationResourceAttributes deactivatedAt(String deactivatedAt) {
    this.deactivatedAt = deactivatedAt;
    return this;
  }

  /**
   * Date at which the reward program was deactivated. (Must be after the activated_at date)
   * @return deactivatedAt
   */
  @javax.annotation.Nullable
  public String getDeactivatedAt() {
    return deactivatedAt;
  }

  public void setDeactivatedAt(String deactivatedAt) {
    this.deactivatedAt = deactivatedAt;
  }


  /**
   * Number of reward earnings. (Read-only property)
   * @return earnedCount
   */
  @javax.annotation.Nullable
  public BigDecimal getEarnedCount() {
    return earnedCount;
  }



  /**
   * Date at which the reward program activation expires. (Read-only property set by adding the days_active from the reward program to the activated_at date)
   * @return expiresAt
   */
  @javax.annotation.Nullable
  public String getExpiresAt() {
    return expiresAt;
  }



  /**
   * If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated. (Read-only property denormalized from the reward program)
   * @return fulfillAsEarned
   */
  @javax.annotation.Nullable
  public Boolean getFulfillAsEarned() {
    return fulfillAsEarned;
  }



  /**
   * Total value of reward allocated. (Read-only property)
   * @return totalAllocatedValue
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAllocatedValue() {
    return totalAllocatedValue;
  }



  /**
   * Total value of reward earnings. (Read-only property)
   * @return totalEarnedValue
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalEarnedValue() {
    return totalEarnedValue;
  }




  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RewardProgramActivationResourceAttributes rewardProgramActivationResourceAttributes = (RewardProgramActivationResourceAttributes) o;
    return Objects.equals(this.activatedAt, rewardProgramActivationResourceAttributes.activatedAt) &&
        Objects.equals(this.active, rewardProgramActivationResourceAttributes.active) &&
        Objects.equals(this.allocatedCount, rewardProgramActivationResourceAttributes.allocatedCount) &&
        Objects.equals(this.budgetUnit, rewardProgramActivationResourceAttributes.budgetUnit) &&
        Objects.equals(this.deactivatedAt, rewardProgramActivationResourceAttributes.deactivatedAt) &&
        Objects.equals(this.earnedCount, rewardProgramActivationResourceAttributes.earnedCount) &&
        Objects.equals(this.expiresAt, rewardProgramActivationResourceAttributes.expiresAt) &&
        Objects.equals(this.fulfillAsEarned, rewardProgramActivationResourceAttributes.fulfillAsEarned) &&
        Objects.equals(this.totalAllocatedValue, rewardProgramActivationResourceAttributes.totalAllocatedValue) &&
        Objects.equals(this.totalEarnedValue, rewardProgramActivationResourceAttributes.totalEarnedValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(activatedAt, active, allocatedCount, budgetUnit, deactivatedAt, earnedCount, expiresAt, fulfillAsEarned, totalAllocatedValue, totalEarnedValue);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RewardProgramActivationResourceAttributes {\n");
    sb.append("    activatedAt: ").append(toIndentedString(activatedAt)).append("\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    allocatedCount: ").append(toIndentedString(allocatedCount)).append("\n");
    sb.append("    budgetUnit: ").append(toIndentedString(budgetUnit)).append("\n");
    sb.append("    deactivatedAt: ").append(toIndentedString(deactivatedAt)).append("\n");
    sb.append("    earnedCount: ").append(toIndentedString(earnedCount)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    fulfillAsEarned: ").append(toIndentedString(fulfillAsEarned)).append("\n");
    sb.append("    totalAllocatedValue: ").append(toIndentedString(totalAllocatedValue)).append("\n");
    sb.append("    totalEarnedValue: ").append(toIndentedString(totalEarnedValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("activated_at");
    openapiFields.add("active");
    openapiFields.add("allocated_count");
    openapiFields.add("budget_unit");
    openapiFields.add("deactivated_at");
    openapiFields.add("earned_count");
    openapiFields.add("expires_at");
    openapiFields.add("fulfill_as_earned");
    openapiFields.add("total_allocated_value");
    openapiFields.add("total_earned_value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("activated_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RewardProgramActivationResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RewardProgramActivationResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RewardProgramActivationResourceAttributes is not found in the empty JSON string", RewardProgramActivationResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RewardProgramActivationResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RewardProgramActivationResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RewardProgramActivationResourceAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("activated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `activated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("activated_at").toString()));
      }
      if ((jsonObj.get("budget_unit") != null && !jsonObj.get("budget_unit").isJsonNull()) && !jsonObj.get("budget_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budget_unit").toString()));
      }
      if ((jsonObj.get("deactivated_at") != null && !jsonObj.get("deactivated_at").isJsonNull()) && !jsonObj.get("deactivated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deactivated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deactivated_at").toString()));
      }
      if ((jsonObj.get("expires_at") != null && !jsonObj.get("expires_at").isJsonNull()) && !jsonObj.get("expires_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `expires_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("expires_at").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RewardProgramActivationResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RewardProgramActivationResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RewardProgramActivationResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RewardProgramActivationResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<RewardProgramActivationResourceAttributes>() {
           @Override
           public void write(JsonWriter out, RewardProgramActivationResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RewardProgramActivationResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RewardProgramActivationResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RewardProgramActivationResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to RewardProgramActivationResourceAttributes
   */
  public static RewardProgramActivationResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RewardProgramActivationResourceAttributes.class);
  }

  /**
   * Convert an instance of RewardProgramActivationResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

