/*
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CreateOrUpdateErrorResponse;
import org.openapitools.client.model.CreatePatientRequest;
import org.openapitools.client.model.CreatePatientResponse;
import org.openapitools.client.model.FetchCoachesResponse;
import org.openapitools.client.model.FetchErrorResponse;
import org.openapitools.client.model.FetchGroupsResponse;
import org.openapitools.client.model.FetchPatientResponse;
import org.openapitools.client.model.FetchPatientsResponse;
import org.openapitools.client.model.UpdatePatientRequest;
import org.openapitools.client.model.UpdatePatientResponse;
import org.openapitools.client.model.UpsertPatientRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PatientApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PatientApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PatientApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPatient
     * @param createPatientRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPatientCall(CreatePatientRequest createPatientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createPatientRequest;

        // create path and map variables
        String localVarPath = "/patient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPatientValidateBeforeCall(CreatePatientRequest createPatientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createPatientRequest' is set
        if (createPatientRequest == null) {
            throw new ApiException("Missing the required parameter 'createPatientRequest' when calling createPatient(Async)");
        }

        return createPatientCall(createPatientRequest, _callback);

    }

    /**
     * Create a patient
     * Create a patient record.  Example for creating a patient with a group specified using &#x60;meta.query&#x60; instead of &#x60;id&#x60;:  &#x60;&#x60;&#x60;JSON {   \&quot;data\&quot;: {     \&quot;type\&quot;: \&quot;patient\&quot;,     \&quot;attributes\&quot;: {       \&quot;first_name\&quot;: \&quot;Andrew\&quot;,       \&quot;last_name\&quot;: \&quot;Smith\&quot;     },     \&quot;relationships\&quot;: {       \&quot;groups\&quot;: {         \&quot;data\&quot;: [           {             \&quot;type\&quot;: \&quot;group\&quot;,             \&quot;meta\&quot;: {               \&quot;query\&quot;: {                 \&quot;organization\&quot;: \&quot;58c88de7c93eb96357a87033\&quot;,                 \&quot;name\&quot;: \&quot;Patients Lead\&quot;               }             }           }         ]       }     }   } } &#x60;&#x60;&#x60; 
     * @param createPatientRequest  (required)
     * @return CreatePatientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public CreatePatientResponse createPatient(CreatePatientRequest createPatientRequest) throws ApiException {
        ApiResponse<CreatePatientResponse> localVarResp = createPatientWithHttpInfo(createPatientRequest);
        return localVarResp.getData();
    }

    /**
     * Create a patient
     * Create a patient record.  Example for creating a patient with a group specified using &#x60;meta.query&#x60; instead of &#x60;id&#x60;:  &#x60;&#x60;&#x60;JSON {   \&quot;data\&quot;: {     \&quot;type\&quot;: \&quot;patient\&quot;,     \&quot;attributes\&quot;: {       \&quot;first_name\&quot;: \&quot;Andrew\&quot;,       \&quot;last_name\&quot;: \&quot;Smith\&quot;     },     \&quot;relationships\&quot;: {       \&quot;groups\&quot;: {         \&quot;data\&quot;: [           {             \&quot;type\&quot;: \&quot;group\&quot;,             \&quot;meta\&quot;: {               \&quot;query\&quot;: {                 \&quot;organization\&quot;: \&quot;58c88de7c93eb96357a87033\&quot;,                 \&quot;name\&quot;: \&quot;Patients Lead\&quot;               }             }           }         ]       }     }   } } &#x60;&#x60;&#x60; 
     * @param createPatientRequest  (required)
     * @return ApiResponse&lt;CreatePatientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePatientResponse> createPatientWithHttpInfo(CreatePatientRequest createPatientRequest) throws ApiException {
        okhttp3.Call localVarCall = createPatientValidateBeforeCall(createPatientRequest, null);
        Type localVarReturnType = new TypeToken<CreatePatientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a patient (asynchronously)
     * Create a patient record.  Example for creating a patient with a group specified using &#x60;meta.query&#x60; instead of &#x60;id&#x60;:  &#x60;&#x60;&#x60;JSON {   \&quot;data\&quot;: {     \&quot;type\&quot;: \&quot;patient\&quot;,     \&quot;attributes\&quot;: {       \&quot;first_name\&quot;: \&quot;Andrew\&quot;,       \&quot;last_name\&quot;: \&quot;Smith\&quot;     },     \&quot;relationships\&quot;: {       \&quot;groups\&quot;: {         \&quot;data\&quot;: [           {             \&quot;type\&quot;: \&quot;group\&quot;,             \&quot;meta\&quot;: {               \&quot;query\&quot;: {                 \&quot;organization\&quot;: \&quot;58c88de7c93eb96357a87033\&quot;,                 \&quot;name\&quot;: \&quot;Patients Lead\&quot;               }             }           }         ]       }     }   } } &#x60;&#x60;&#x60; 
     * @param createPatientRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPatientAsync(CreatePatientRequest createPatientRequest, final ApiCallback<CreatePatientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPatientValidateBeforeCall(createPatientRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePatientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPatient
     * @param id Patient identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patient/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPatientValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchPatient(Async)");
        }

        return fetchPatientCall(id, _callback);

    }

    /**
     * Get a patient
     * Gets a patient record by id.
     * @param id Patient identifier (required)
     * @return FetchPatientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FetchPatientResponse fetchPatient(String id) throws ApiException {
        ApiResponse<FetchPatientResponse> localVarResp = fetchPatientWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get a patient
     * Gets a patient record by id.
     * @param id Patient identifier (required)
     * @return ApiResponse&lt;FetchPatientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FetchPatientResponse> fetchPatientWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchPatientValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FetchPatientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get a patient (asynchronously)
     * Gets a patient record by id.
     * @param id Patient identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientAsync(String id, final ApiCallback<FetchPatientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPatientValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FetchPatientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPatientCoaches
     * @param id Patient identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientCoachesCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patient/{id}/coaches"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPatientCoachesValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchPatientCoaches(Async)");
        }

        return fetchPatientCoachesCall(id, _callback);

    }

    /**
     * List coaches for a patient
     * Get the list of coaches for a patient.
     * @param id Patient identifier (required)
     * @return FetchCoachesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FetchCoachesResponse fetchPatientCoaches(String id) throws ApiException {
        ApiResponse<FetchCoachesResponse> localVarResp = fetchPatientCoachesWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List coaches for a patient
     * Get the list of coaches for a patient.
     * @param id Patient identifier (required)
     * @return ApiResponse&lt;FetchCoachesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FetchCoachesResponse> fetchPatientCoachesWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchPatientCoachesValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FetchCoachesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List coaches for a patient (asynchronously)
     * Get the list of coaches for a patient.
     * @param id Patient identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientCoachesAsync(String id, final ApiCallback<FetchCoachesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPatientCoachesValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FetchCoachesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPatientGroups
     * @param id Patient identifier (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientGroupsCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patient/{id}/groups"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPatientGroupsValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchPatientGroups(Async)");
        }

        return fetchPatientGroupsCall(id, _callback);

    }

    /**
     * List groups for a patient
     * Get the list of groups for a patient.
     * @param id Patient identifier (required)
     * @return FetchGroupsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FetchGroupsResponse fetchPatientGroups(String id) throws ApiException {
        ApiResponse<FetchGroupsResponse> localVarResp = fetchPatientGroupsWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * List groups for a patient
     * Get the list of groups for a patient.
     * @param id Patient identifier (required)
     * @return ApiResponse&lt;FetchGroupsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FetchGroupsResponse> fetchPatientGroupsWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = fetchPatientGroupsValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<FetchGroupsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List groups for a patient (asynchronously)
     * Get the list of groups for a patient.
     * @param id Patient identifier (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientGroupsAsync(String id, final ApiCallback<FetchGroupsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPatientGroupsValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<FetchGroupsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchPatients
     * @param filterGroups Comma-separated list of group ids. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterIdentifierSystem Identifier system (example: \&quot;MyEHR\&quot;) - requires a \&quot;filter[identifier][value]\&quot; parameter (optional)
     * @param filterIdentifierValue Identifier value (example: \&quot;12345\&quot;) - requires a \&quot;filter[identifier][system]\&quot; parameter (optional)
     * @param filterArchived If not specified, return all patients. If set to &#39;true&#39; return only archived patients, if set to &#39;false&#39;, return only patients who are not archived. (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientsCall(String filterGroups, String filterOrganization, String filterIdentifierSystem, String filterIdentifierValue, Boolean filterArchived, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/patient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterGroups != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[groups]", filterGroups));
        }

        if (filterOrganization != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[organization]", filterOrganization));
        }

        if (filterIdentifierSystem != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[identifier][system]", filterIdentifierSystem));
        }

        if (filterIdentifierValue != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[identifier][value]", filterIdentifierValue));
        }

        if (filterArchived != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[archived]", filterArchived));
        }

        if (filterCreatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[created_at]", filterCreatedAt));
        }

        if (filterUpdatedAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter[updated_at]", filterUpdatedAt));
        }

        if (pageNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[number]", pageNumber));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[size]", pageSize));
        }

        if (pageLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[limit]", pageLimit));
        }

        if (pageCursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page[cursor]", pageCursor));
        }

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchPatientsValidateBeforeCall(String filterGroups, String filterOrganization, String filterIdentifierSystem, String filterIdentifierValue, Boolean filterArchived, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, final ApiCallback _callback) throws ApiException {
        return fetchPatientsCall(filterGroups, filterOrganization, filterIdentifierSystem, filterIdentifierValue, filterArchived, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, _callback);

    }

    /**
     * List patients
     * Get a list of patients.
     * @param filterGroups Comma-separated list of group ids. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterIdentifierSystem Identifier system (example: \&quot;MyEHR\&quot;) - requires a \&quot;filter[identifier][value]\&quot; parameter (optional)
     * @param filterIdentifierValue Identifier value (example: \&quot;12345\&quot;) - requires a \&quot;filter[identifier][system]\&quot; parameter (optional)
     * @param filterArchived If not specified, return all patients. If set to &#39;true&#39; return only archived patients, if set to &#39;false&#39;, return only patients who are not archived. (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @return FetchPatientsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public FetchPatientsResponse fetchPatients(String filterGroups, String filterOrganization, String filterIdentifierSystem, String filterIdentifierValue, Boolean filterArchived, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor) throws ApiException {
        ApiResponse<FetchPatientsResponse> localVarResp = fetchPatientsWithHttpInfo(filterGroups, filterOrganization, filterIdentifierSystem, filterIdentifierValue, filterArchived, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor);
        return localVarResp.getData();
    }

    /**
     * List patients
     * Get a list of patients.
     * @param filterGroups Comma-separated list of group ids. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterIdentifierSystem Identifier system (example: \&quot;MyEHR\&quot;) - requires a \&quot;filter[identifier][value]\&quot; parameter (optional)
     * @param filterIdentifierValue Identifier value (example: \&quot;12345\&quot;) - requires a \&quot;filter[identifier][system]\&quot; parameter (optional)
     * @param filterArchived If not specified, return all patients. If set to &#39;true&#39; return only archived patients, if set to &#39;false&#39;, return only patients who are not archived. (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @return ApiResponse&lt;FetchPatientsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FetchPatientsResponse> fetchPatientsWithHttpInfo(String filterGroups, String filterOrganization, String filterIdentifierSystem, String filterIdentifierValue, Boolean filterArchived, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor) throws ApiException {
        okhttp3.Call localVarCall = fetchPatientsValidateBeforeCall(filterGroups, filterOrganization, filterIdentifierSystem, filterIdentifierValue, filterArchived, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, null);
        Type localVarReturnType = new TypeToken<FetchPatientsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List patients (asynchronously)
     * Get a list of patients.
     * @param filterGroups Comma-separated list of group ids. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterOrganization Fitbit Plus organization id. Note that either &#x60;filter[group]&#x60; or &#x60;filter[organization]&#x60; must be specified. (optional)
     * @param filterIdentifierSystem Identifier system (example: \&quot;MyEHR\&quot;) - requires a \&quot;filter[identifier][value]\&quot; parameter (optional)
     * @param filterIdentifierValue Identifier value (example: \&quot;12345\&quot;) - requires a \&quot;filter[identifier][system]\&quot; parameter (optional)
     * @param filterArchived If not specified, return all patients. If set to &#39;true&#39; return only archived patients, if set to &#39;false&#39;, return only patients who are not archived. (optional)
     * @param filterCreatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients created in November 2017 (America/New_York): &#x60;filter[created_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param filterUpdatedAt The start (inclusive) and end (exclusive) dates are ISO date and time strings separated by &#x60;..&#x60;. Example for patients updated in November 2017 (America/New_York): &#x60;filter[updated_at]&#x3D;2017-11-01T00:00:00-04:00..2017-12-01T00:00:00-05:00&#x60;  (optional)
     * @param pageNumber Page number (optional, default to 1)
     * @param pageSize Page size (optional, default to 10)
     * @param pageLimit Page limit (optional, default to 50)
     * @param pageCursor Page cursor (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchPatientsAsync(String filterGroups, String filterOrganization, String filterIdentifierSystem, String filterIdentifierValue, Boolean filterArchived, String filterCreatedAt, String filterUpdatedAt, Integer pageNumber, Integer pageSize, Integer pageLimit, String pageCursor, final ApiCallback<FetchPatientsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchPatientsValidateBeforeCall(filterGroups, filterOrganization, filterIdentifierSystem, filterIdentifierValue, filterArchived, filterCreatedAt, filterUpdatedAt, pageNumber, pageSize, pageLimit, pageCursor, _callback);
        Type localVarReturnType = new TypeToken<FetchPatientsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePatient
     * @param id Patient identifier (required)
     * @param updatePatientRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePatientCall(String id, UpdatePatientRequest updatePatientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePatientRequest;

        // create path and map variables
        String localVarPath = "/patient/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePatientValidateBeforeCall(String id, UpdatePatientRequest updatePatientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling updatePatient(Async)");
        }

        // verify the required parameter 'updatePatientRequest' is set
        if (updatePatientRequest == null) {
            throw new ApiException("Missing the required parameter 'updatePatientRequest' when calling updatePatient(Async)");
        }

        return updatePatientCall(id, updatePatientRequest, _callback);

    }

    /**
     * Update a patient
     * Update a patient record.
     * @param id Patient identifier (required)
     * @param updatePatientRequest  (required)
     * @return UpdatePatientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePatientResponse updatePatient(String id, UpdatePatientRequest updatePatientRequest) throws ApiException {
        ApiResponse<UpdatePatientResponse> localVarResp = updatePatientWithHttpInfo(id, updatePatientRequest);
        return localVarResp.getData();
    }

    /**
     * Update a patient
     * Update a patient record.
     * @param id Patient identifier (required)
     * @param updatePatientRequest  (required)
     * @return ApiResponse&lt;UpdatePatientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatePatientResponse> updatePatientWithHttpInfo(String id, UpdatePatientRequest updatePatientRequest) throws ApiException {
        okhttp3.Call localVarCall = updatePatientValidateBeforeCall(id, updatePatientRequest, null);
        Type localVarReturnType = new TypeToken<UpdatePatientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update a patient (asynchronously)
     * Update a patient record.
     * @param id Patient identifier (required)
     * @param updatePatientRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePatientAsync(String id, UpdatePatientRequest updatePatientRequest, final ApiCallback<UpdatePatientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePatientValidateBeforeCall(id, updatePatientRequest, _callback);
        Type localVarReturnType = new TypeToken<UpdatePatientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for upsertPatient
     * @param upsertPatientRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertPatientCall(UpsertPatientRequest upsertPatientRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = upsertPatientRequest;

        // create path and map variables
        String localVarPath = "/patient";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/vnd.api+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/vnd.api+json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call upsertPatientValidateBeforeCall(UpsertPatientRequest upsertPatientRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'upsertPatientRequest' is set
        if (upsertPatientRequest == null) {
            throw new ApiException("Missing the required parameter 'upsertPatientRequest' when calling upsertPatient(Async)");
        }

        return upsertPatientCall(upsertPatientRequest, _callback);

    }

    /**
     * Upsert patient
     * Create a new patient or update an existing patient
     * @param upsertPatientRequest  (required)
     * @return CreatePatientResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public CreatePatientResponse upsertPatient(UpsertPatientRequest upsertPatientRequest) throws ApiException {
        ApiResponse<CreatePatientResponse> localVarResp = upsertPatientWithHttpInfo(upsertPatientRequest);
        return localVarResp.getData();
    }

    /**
     * Upsert patient
     * Create a new patient or update an existing patient
     * @param upsertPatientRequest  (required)
     * @return ApiResponse&lt;CreatePatientResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreatePatientResponse> upsertPatientWithHttpInfo(UpsertPatientRequest upsertPatientRequest) throws ApiException {
        okhttp3.Call localVarCall = upsertPatientValidateBeforeCall(upsertPatientRequest, null);
        Type localVarReturnType = new TypeToken<CreatePatientResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upsert patient (asynchronously)
     * Create a new patient or update an existing patient
     * @param upsertPatientRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> Invalid Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call upsertPatientAsync(UpsertPatientRequest upsertPatientRequest, final ApiCallback<CreatePatientResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = upsertPatientValidateBeforeCall(upsertPatientRequest, _callback);
        Type localVarReturnType = new TypeToken<CreatePatientResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
