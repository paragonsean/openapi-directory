/*
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.PatientHealthMetricResourceAttributesCode;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatientHealthMetricResourceAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:16.215344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatientHealthMetricResourceAttributes {
  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private PatientHealthMetricResourceAttributesCode code;

  public static final String SERIALIZED_NAME_DIASTOLIC = "diastolic";
  @SerializedName(SERIALIZED_NAME_DIASTOLIC)
  private BigDecimal diastolic;

  public static final String SERIALIZED_NAME_OCCURRED_AT = "occurred_at";
  @SerializedName(SERIALIZED_NAME_OCCURRED_AT)
  private String occurredAt;

  public static final String SERIALIZED_NAME_SYSTOLIC = "systolic";
  @SerializedName(SERIALIZED_NAME_SYSTOLIC)
  private BigDecimal systolic;

  /**
   * Gets or Sets type
   */
  @JsonAdapter(TypeEnum.Adapter.class)
  public enum TypeEnum {
    BLOOD_PRESSURE_SYSTOLIC("blood_pressure_systolic"),
    
    BLOOD_PRESSURE_DIASTOLIC("blood_pressure_diastolic"),
    
    HEMOGLOBIN_A1C("hemoglobin_a1c"),
    
    HDL_CHOLESTEROL("hdl_cholesterol"),
    
    LDL_CHOLESTEROL("ldl_cholesterol"),
    
    TOTAL_CHOLESTEROL("total_cholesterol"),
    
    TRIGLYCERIDES("triglycerides"),
    
    BLOOD_UREA_NITROGEN("blood_urea_nitrogen"),
    
    CREATININE("creatinine"),
    
    HEMOGLOBIN("hemoglobin"),
    
    HEMATOCRIT("hematocrit"),
    
    TOTAL_SERUM_IRON("total_serum_iron"),
    
    THYROID_STIMULATING_HORMONE("thyroid_stimulating_hormone"),
    
    FREE_THYROXINE("free_thyroxine"),
    
    FREE_TRIIODOTHYRONINE("free_triiodothyronine"),
    
    TOTAL_TRIIODOTHYRONINE("total_triiodothyronine"),
    
    CD4_CELL_COUNT("cd4_cell_count"),
    
    HIV_VIRAL_LOAD("hiv_viral_load"),
    
    INR("inr"),
    
    FREE_TESTOSTERONE("free_testosterone"),
    
    TOTAL_TESTOSTERONE("total_testosterone"),
    
    C_REACTIVE_PROTEIN("c_reactive_protein"),
    
    PROSTATE_SPECIFIC_ANTIGEN("prostate_specific_antigen"),
    
    COTININE("cotinine"),
    
    C_PEPTIDE("c_peptide"),
    
    BLOOD_PRESSURE("blood_pressure"),
    
    BLOOD_GLUCOSE("blood_glucose"),
    
    WEIGHT("weight"),
    
    HEART_RATE("heart_rate"),
    
    BODY_FAT_PERCENTAGE("body_fat_percentage"),
    
    BODY_MASS_INDEX("body_mass_index"),
    
    BODY_TEMPERATURE("body_temperature"),
    
    FORCED_EXPIRATORY_VOLUME1("forced_expiratory_volume1"),
    
    FORCED_VITAL_CAPACITY("forced_vital_capacity"),
    
    LEAN_BODY_MASS("lean_body_mass"),
    
    NAUSEA_LEVEL("nausea_level"),
    
    OXYGEN_SATURATION("oxygen_saturation"),
    
    PAIN_LEVEL("pain_level"),
    
    PEAK_EXPIRATORY_FLOW_RATE("peak_expiratory_flow_rate"),
    
    PERIPHERAL_PERFUSION_INDEX("peripheral_perfusion_index"),
    
    RESPIRATORY_RATE("respiratory_rate"),
    
    INHALER_USAGE("inhaler_usage");

    private String value;

    TypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TypeEnum fromValue(String value) {
      for (TypeEnum b : TypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TypeEnum type;

  public static final String SERIALIZED_NAME_UNIT = "unit";
  @SerializedName(SERIALIZED_NAME_UNIT)
  private String unit;

  public static final String SERIALIZED_NAME_VALUE = "value";
  @SerializedName(SERIALIZED_NAME_VALUE)
  private Object value = null;

  public PatientHealthMetricResourceAttributes() {
  }

  public PatientHealthMetricResourceAttributes code(PatientHealthMetricResourceAttributesCode code) {
    this.code = code;
    return this;
  }

  /**
   * Get code
   * @return code
   */
  @javax.annotation.Nullable
  public PatientHealthMetricResourceAttributesCode getCode() {
    return code;
  }

  public void setCode(PatientHealthMetricResourceAttributesCode code) {
    this.code = code;
  }


  public PatientHealthMetricResourceAttributes diastolic(BigDecimal diastolic) {
    this.diastolic = diastolic;
    return this;
  }

  /**
   * Get diastolic
   * @return diastolic
   */
  @javax.annotation.Nullable
  public BigDecimal getDiastolic() {
    return diastolic;
  }

  public void setDiastolic(BigDecimal diastolic) {
    this.diastolic = diastolic;
  }


  public PatientHealthMetricResourceAttributes occurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
    return this;
  }

  /**
   * Get occurredAt
   * @return occurredAt
   */
  @javax.annotation.Nullable
  public String getOccurredAt() {
    return occurredAt;
  }

  public void setOccurredAt(String occurredAt) {
    this.occurredAt = occurredAt;
  }


  public PatientHealthMetricResourceAttributes systolic(BigDecimal systolic) {
    this.systolic = systolic;
    return this;
  }

  /**
   * Get systolic
   * @return systolic
   */
  @javax.annotation.Nullable
  public BigDecimal getSystolic() {
    return systolic;
  }

  public void setSystolic(BigDecimal systolic) {
    this.systolic = systolic;
  }


  public PatientHealthMetricResourceAttributes type(TypeEnum type) {
    this.type = type;
    return this;
  }

  /**
   * Get type
   * @return type
   */
  @javax.annotation.Nullable
  public TypeEnum getType() {
    return type;
  }

  public void setType(TypeEnum type) {
    this.type = type;
  }


  public PatientHealthMetricResourceAttributes unit(String unit) {
    this.unit = unit;
    return this;
  }

  /**
   * Get unit
   * @return unit
   */
  @javax.annotation.Nullable
  public String getUnit() {
    return unit;
  }

  public void setUnit(String unit) {
    this.unit = unit;
  }


  public PatientHealthMetricResourceAttributes value(Object value) {
    this.value = value;
    return this;
  }

  /**
   * Can be any value (number, boolean, string, object) depending on the metric type. Most values are of type number.
   * @return value
   */
  @javax.annotation.Nullable
  public Object getValue() {
    return value;
  }

  public void setValue(Object value) {
    this.value = value;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientHealthMetricResourceAttributes patientHealthMetricResourceAttributes = (PatientHealthMetricResourceAttributes) o;
    return Objects.equals(this.code, patientHealthMetricResourceAttributes.code) &&
        Objects.equals(this.diastolic, patientHealthMetricResourceAttributes.diastolic) &&
        Objects.equals(this.occurredAt, patientHealthMetricResourceAttributes.occurredAt) &&
        Objects.equals(this.systolic, patientHealthMetricResourceAttributes.systolic) &&
        Objects.equals(this.type, patientHealthMetricResourceAttributes.type) &&
        Objects.equals(this.unit, patientHealthMetricResourceAttributes.unit) &&
        Objects.equals(this.value, patientHealthMetricResourceAttributes.value);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(code, diastolic, occurredAt, systolic, type, unit, value);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientHealthMetricResourceAttributes {\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    diastolic: ").append(toIndentedString(diastolic)).append("\n");
    sb.append("    occurredAt: ").append(toIndentedString(occurredAt)).append("\n");
    sb.append("    systolic: ").append(toIndentedString(systolic)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    unit: ").append(toIndentedString(unit)).append("\n");
    sb.append("    value: ").append(toIndentedString(value)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("code");
    openapiFields.add("diastolic");
    openapiFields.add("occurred_at");
    openapiFields.add("systolic");
    openapiFields.add("type");
    openapiFields.add("unit");
    openapiFields.add("value");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientHealthMetricResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientHealthMetricResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientHealthMetricResourceAttributes is not found in the empty JSON string", PatientHealthMetricResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientHealthMetricResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientHealthMetricResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `code`
      if (jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) {
        PatientHealthMetricResourceAttributesCode.validateJsonElement(jsonObj.get("code"));
      }
      if ((jsonObj.get("occurred_at") != null && !jsonObj.get("occurred_at").isJsonNull()) && !jsonObj.get("occurred_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `occurred_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("occurred_at").toString()));
      }
      if ((jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) && !jsonObj.get("type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("type").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TypeEnum.validateJsonElement(jsonObj.get("type"));
      }
      if ((jsonObj.get("unit") != null && !jsonObj.get("unit").isJsonNull()) && !jsonObj.get("unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientHealthMetricResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientHealthMetricResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientHealthMetricResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientHealthMetricResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientHealthMetricResourceAttributes>() {
           @Override
           public void write(JsonWriter out, PatientHealthMetricResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientHealthMetricResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientHealthMetricResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientHealthMetricResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to PatientHealthMetricResourceAttributes
   */
  public static PatientHealthMetricResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientHealthMetricResourceAttributes.class);
  }

  /**
   * Convert an instance of PatientHealthMetricResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

