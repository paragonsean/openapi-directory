/*
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * RewardProgramResourceAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:16.215344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RewardProgramResourceAttributes {
  /**
   * Unit of the budget for the reard program.
   */
  @JsonAdapter(BudgetUnitEnum.Adapter.class)
  public enum BudgetUnitEnum {
    DOLLAR("dollar"),
    
    POINT("point"),
    
    CREDIT("credit");

    private String value;

    BudgetUnitEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static BudgetUnitEnum fromValue(String value) {
      for (BudgetUnitEnum b : BudgetUnitEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<BudgetUnitEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final BudgetUnitEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public BudgetUnitEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return BudgetUnitEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      BudgetUnitEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_BUDGET_UNIT = "budget_unit";
  @SerializedName(SERIALIZED_NAME_BUDGET_UNIT)
  private BudgetUnitEnum budgetUnit = BudgetUnitEnum.DOLLAR;

  public static final String SERIALIZED_NAME_BUDGET_VALUE = "budget_value";
  @SerializedName(SERIALIZED_NAME_BUDGET_VALUE)
  private BigDecimal budgetValue;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION_ACTIVE = "duration_active";
  @SerializedName(SERIALIZED_NAME_DURATION_ACTIVE)
  private BigDecimal durationActive = new BigDecimal("540");

  public static final String SERIALIZED_NAME_END_AT = "end_at";
  @SerializedName(SERIALIZED_NAME_END_AT)
  private String endAt;

  public static final String SERIALIZED_NAME_FROZEN = "frozen";
  @SerializedName(SERIALIZED_NAME_FROZEN)
  private Boolean frozen = false;

  public static final String SERIALIZED_NAME_FULFILL_AS_EARNED = "fulfill_as_earned";
  @SerializedName(SERIALIZED_NAME_FULFILL_AS_EARNED)
  private Boolean fulfillAsEarned = false;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_START_AT = "start_at";
  @SerializedName(SERIALIZED_NAME_START_AT)
  private String startAt;

  public static final String SERIALIZED_NAME_TAGLINE = "tagline";
  @SerializedName(SERIALIZED_NAME_TAGLINE)
  private String tagline;

  public RewardProgramResourceAttributes() {
  }

  public RewardProgramResourceAttributes budgetUnit(BudgetUnitEnum budgetUnit) {
    this.budgetUnit = budgetUnit;
    return this;
  }

  /**
   * Unit of the budget for the reard program.
   * @return budgetUnit
   */
  @javax.annotation.Nullable
  public BudgetUnitEnum getBudgetUnit() {
    return budgetUnit;
  }

  public void setBudgetUnit(BudgetUnitEnum budgetUnit) {
    this.budgetUnit = budgetUnit;
  }


  public RewardProgramResourceAttributes budgetValue(BigDecimal budgetValue) {
    this.budgetValue = budgetValue;
    return this;
  }

  /**
   * Value of the budget for the reward program. (Must be greater than 0)
   * @return budgetValue
   */
  @javax.annotation.Nonnull
  public BigDecimal getBudgetValue() {
    return budgetValue;
  }

  public void setBudgetValue(BigDecimal budgetValue) {
    this.budgetValue = budgetValue;
  }


  public RewardProgramResourceAttributes description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of the reward program - designed to be a comprehensive text description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public RewardProgramResourceAttributes durationActive(BigDecimal durationActive) {
    this.durationActive = durationActive;
    return this;
  }

  /**
   * Number of days that a program can be active after it has been activated for a patient. (Must be greater than 0)
   * @return durationActive
   */
  @javax.annotation.Nullable
  public BigDecimal getDurationActive() {
    return durationActive;
  }

  public void setDurationActive(BigDecimal durationActive) {
    this.durationActive = durationActive;
  }


  public RewardProgramResourceAttributes endAt(String endAt) {
    this.endAt = endAt;
    return this;
  }

  /**
   * Date at which the reward program ends. (Must be after the start_at)
   * @return endAt
   */
  @javax.annotation.Nonnull
  public String getEndAt() {
    return endAt;
  }

  public void setEndAt(String endAt) {
    this.endAt = endAt;
  }


  public RewardProgramResourceAttributes frozen(Boolean frozen) {
    this.frozen = frozen;
    return this;
  }

  /**
   * If true, the reward program cannot be activated for a patient and new rewards cannot be created for the program.
   * @return frozen
   */
  @javax.annotation.Nullable
  public Boolean getFrozen() {
    return frozen;
  }

  public void setFrozen(Boolean frozen) {
    this.frozen = frozen;
  }


  public RewardProgramResourceAttributes fulfillAsEarned(Boolean fulfillAsEarned) {
    this.fulfillAsEarned = fulfillAsEarned;
    return this;
  }

  /**
   * If true, the rewards created for a patient for the program can be fulfulled as they are earned. If false, the rewards should only be fulfilled when the program is deactivated.
   * @return fulfillAsEarned
   */
  @javax.annotation.Nullable
  public Boolean getFulfillAsEarned() {
    return fulfillAsEarned;
  }

  public void setFulfillAsEarned(Boolean fulfillAsEarned) {
    this.fulfillAsEarned = fulfillAsEarned;
  }


  public RewardProgramResourceAttributes name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the reward program
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public RewardProgramResourceAttributes startAt(String startAt) {
    this.startAt = startAt;
    return this;
  }

  /**
   * Date at which the reward program starts.
   * @return startAt
   */
  @javax.annotation.Nonnull
  public String getStartAt() {
    return startAt;
  }

  public void setStartAt(String startAt) {
    this.startAt = startAt;
  }


  public RewardProgramResourceAttributes tagline(String tagline) {
    this.tagline = tagline;
    return this;
  }

  /**
   * Tagline of the reward program - designed to be one line
   * @return tagline
   */
  @javax.annotation.Nullable
  public String getTagline() {
    return tagline;
  }

  public void setTagline(String tagline) {
    this.tagline = tagline;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RewardProgramResourceAttributes rewardProgramResourceAttributes = (RewardProgramResourceAttributes) o;
    return Objects.equals(this.budgetUnit, rewardProgramResourceAttributes.budgetUnit) &&
        Objects.equals(this.budgetValue, rewardProgramResourceAttributes.budgetValue) &&
        Objects.equals(this.description, rewardProgramResourceAttributes.description) &&
        Objects.equals(this.durationActive, rewardProgramResourceAttributes.durationActive) &&
        Objects.equals(this.endAt, rewardProgramResourceAttributes.endAt) &&
        Objects.equals(this.frozen, rewardProgramResourceAttributes.frozen) &&
        Objects.equals(this.fulfillAsEarned, rewardProgramResourceAttributes.fulfillAsEarned) &&
        Objects.equals(this.name, rewardProgramResourceAttributes.name) &&
        Objects.equals(this.startAt, rewardProgramResourceAttributes.startAt) &&
        Objects.equals(this.tagline, rewardProgramResourceAttributes.tagline);
  }

  @Override
  public int hashCode() {
    return Objects.hash(budgetUnit, budgetValue, description, durationActive, endAt, frozen, fulfillAsEarned, name, startAt, tagline);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RewardProgramResourceAttributes {\n");
    sb.append("    budgetUnit: ").append(toIndentedString(budgetUnit)).append("\n");
    sb.append("    budgetValue: ").append(toIndentedString(budgetValue)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    durationActive: ").append(toIndentedString(durationActive)).append("\n");
    sb.append("    endAt: ").append(toIndentedString(endAt)).append("\n");
    sb.append("    frozen: ").append(toIndentedString(frozen)).append("\n");
    sb.append("    fulfillAsEarned: ").append(toIndentedString(fulfillAsEarned)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    startAt: ").append(toIndentedString(startAt)).append("\n");
    sb.append("    tagline: ").append(toIndentedString(tagline)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("budget_unit");
    openapiFields.add("budget_value");
    openapiFields.add("description");
    openapiFields.add("duration_active");
    openapiFields.add("end_at");
    openapiFields.add("frozen");
    openapiFields.add("fulfill_as_earned");
    openapiFields.add("name");
    openapiFields.add("start_at");
    openapiFields.add("tagline");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("budget_value");
    openapiRequiredFields.add("end_at");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("start_at");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RewardProgramResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RewardProgramResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RewardProgramResourceAttributes is not found in the empty JSON string", RewardProgramResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RewardProgramResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RewardProgramResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RewardProgramResourceAttributes.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("budget_unit") != null && !jsonObj.get("budget_unit").isJsonNull()) && !jsonObj.get("budget_unit").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `budget_unit` to be a primitive type in the JSON string but got `%s`", jsonObj.get("budget_unit").toString()));
      }
      // validate the optional field `budget_unit`
      if (jsonObj.get("budget_unit") != null && !jsonObj.get("budget_unit").isJsonNull()) {
        BudgetUnitEnum.validateJsonElement(jsonObj.get("budget_unit"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("end_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_at").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (!jsonObj.get("start_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_at").toString()));
      }
      if ((jsonObj.get("tagline") != null && !jsonObj.get("tagline").isJsonNull()) && !jsonObj.get("tagline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tagline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tagline").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RewardProgramResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RewardProgramResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RewardProgramResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RewardProgramResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<RewardProgramResourceAttributes>() {
           @Override
           public void write(JsonWriter out, RewardProgramResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RewardProgramResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RewardProgramResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RewardProgramResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to RewardProgramResourceAttributes
   */
  public static RewardProgramResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RewardProgramResourceAttributes.class);
  }

  /**
   * Convert an instance of RewardProgramResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

