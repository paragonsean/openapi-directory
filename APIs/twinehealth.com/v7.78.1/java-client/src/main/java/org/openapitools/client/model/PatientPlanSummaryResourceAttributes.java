/*
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.openapitools.client.model.PatientPlanSummaryResourceAttributesWindowNotificationTimes;
import org.openapitools.client.model.PatientPlanSummaryResourceAttributesWindowOrderInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * PatientPlanSummaryResourceAttributes
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:04:16.215344-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PatientPlanSummaryResourceAttributes {
  public static final String SERIALIZED_NAME_ADHERENCE = "adherence";
  @SerializedName(SERIALIZED_NAME_ADHERENCE)
  private Object adherence;

  public static final String SERIALIZED_NAME_CRITICAL = "critical";
  @SerializedName(SERIALIZED_NAME_CRITICAL)
  private Map<String, Object> critical = new HashMap<>();

  public static final String SERIALIZED_NAME_EFFECTIVE_FROM = "effective_from";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_FROM)
  private String effectiveFrom;

  public static final String SERIALIZED_NAME_TIME_ZONE = "time_zone";
  @SerializedName(SERIALIZED_NAME_TIME_ZONE)
  private String timeZone;

  public static final String SERIALIZED_NAME_WINDOW_NOTIFICATION_TIMES = "window_notification_times";
  @SerializedName(SERIALIZED_NAME_WINDOW_NOTIFICATION_TIMES)
  private PatientPlanSummaryResourceAttributesWindowNotificationTimes windowNotificationTimes;

  public static final String SERIALIZED_NAME_WINDOW_ORDER = "window_order";
  @SerializedName(SERIALIZED_NAME_WINDOW_ORDER)
  private List<PatientPlanSummaryResourceAttributesWindowOrderInner> windowOrder = new ArrayList<>();

  public PatientPlanSummaryResourceAttributes() {
  }

  public PatientPlanSummaryResourceAttributes(
     Object adherence, 
     String effectiveFrom
  ) {
    this();
    this.adherence = adherence;
    this.effectiveFrom = effectiveFrom;
  }

  /**
   * Get adherence
   * @return adherence
   */
  @javax.annotation.Nullable
  public Object getAdherence() {
    return adherence;
  }



  public PatientPlanSummaryResourceAttributes critical(Map<String, Object> critical) {
    this.critical = critical;
    return this;
  }

  public PatientPlanSummaryResourceAttributes putCriticalItem(String key, Object criticalItem) {
    if (this.critical == null) {
      this.critical = new HashMap<>();
    }
    this.critical.put(key, criticalItem);
    return this;
  }

  /**
   * Get critical
   * @return critical
   */
  @javax.annotation.Nullable
  public Map<String, Object> getCritical() {
    return critical;
  }

  public void setCritical(Map<String, Object> critical) {
    this.critical = critical;
  }


  /**
   * Get effectiveFrom
   * @return effectiveFrom
   */
  @javax.annotation.Nullable
  public String getEffectiveFrom() {
    return effectiveFrom;
  }



  public PatientPlanSummaryResourceAttributes timeZone(String timeZone) {
    this.timeZone = timeZone;
    return this;
  }

  /**
   * Get timeZone
   * @return timeZone
   */
  @javax.annotation.Nullable
  public String getTimeZone() {
    return timeZone;
  }

  public void setTimeZone(String timeZone) {
    this.timeZone = timeZone;
  }


  public PatientPlanSummaryResourceAttributes windowNotificationTimes(PatientPlanSummaryResourceAttributesWindowNotificationTimes windowNotificationTimes) {
    this.windowNotificationTimes = windowNotificationTimes;
    return this;
  }

  /**
   * Get windowNotificationTimes
   * @return windowNotificationTimes
   */
  @javax.annotation.Nullable
  public PatientPlanSummaryResourceAttributesWindowNotificationTimes getWindowNotificationTimes() {
    return windowNotificationTimes;
  }

  public void setWindowNotificationTimes(PatientPlanSummaryResourceAttributesWindowNotificationTimes windowNotificationTimes) {
    this.windowNotificationTimes = windowNotificationTimes;
  }


  public PatientPlanSummaryResourceAttributes windowOrder(List<PatientPlanSummaryResourceAttributesWindowOrderInner> windowOrder) {
    this.windowOrder = windowOrder;
    return this;
  }

  public PatientPlanSummaryResourceAttributes addWindowOrderItem(PatientPlanSummaryResourceAttributesWindowOrderInner windowOrderItem) {
    if (this.windowOrder == null) {
      this.windowOrder = new ArrayList<>();
    }
    this.windowOrder.add(windowOrderItem);
    return this;
  }

  /**
   * Get windowOrder
   * @return windowOrder
   */
  @javax.annotation.Nullable
  public List<PatientPlanSummaryResourceAttributesWindowOrderInner> getWindowOrder() {
    return windowOrder;
  }

  public void setWindowOrder(List<PatientPlanSummaryResourceAttributesWindowOrderInner> windowOrder) {
    this.windowOrder = windowOrder;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PatientPlanSummaryResourceAttributes patientPlanSummaryResourceAttributes = (PatientPlanSummaryResourceAttributes) o;
    return Objects.equals(this.adherence, patientPlanSummaryResourceAttributes.adherence) &&
        Objects.equals(this.critical, patientPlanSummaryResourceAttributes.critical) &&
        Objects.equals(this.effectiveFrom, patientPlanSummaryResourceAttributes.effectiveFrom) &&
        Objects.equals(this.timeZone, patientPlanSummaryResourceAttributes.timeZone) &&
        Objects.equals(this.windowNotificationTimes, patientPlanSummaryResourceAttributes.windowNotificationTimes) &&
        Objects.equals(this.windowOrder, patientPlanSummaryResourceAttributes.windowOrder);
  }

  @Override
  public int hashCode() {
    return Objects.hash(adherence, critical, effectiveFrom, timeZone, windowNotificationTimes, windowOrder);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PatientPlanSummaryResourceAttributes {\n");
    sb.append("    adherence: ").append(toIndentedString(adherence)).append("\n");
    sb.append("    critical: ").append(toIndentedString(critical)).append("\n");
    sb.append("    effectiveFrom: ").append(toIndentedString(effectiveFrom)).append("\n");
    sb.append("    timeZone: ").append(toIndentedString(timeZone)).append("\n");
    sb.append("    windowNotificationTimes: ").append(toIndentedString(windowNotificationTimes)).append("\n");
    sb.append("    windowOrder: ").append(toIndentedString(windowOrder)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("adherence");
    openapiFields.add("critical");
    openapiFields.add("effective_from");
    openapiFields.add("time_zone");
    openapiFields.add("window_notification_times");
    openapiFields.add("window_order");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PatientPlanSummaryResourceAttributes
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PatientPlanSummaryResourceAttributes.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PatientPlanSummaryResourceAttributes is not found in the empty JSON string", PatientPlanSummaryResourceAttributes.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PatientPlanSummaryResourceAttributes.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PatientPlanSummaryResourceAttributes` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("effective_from") != null && !jsonObj.get("effective_from").isJsonNull()) && !jsonObj.get("effective_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effective_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effective_from").toString()));
      }
      if ((jsonObj.get("time_zone") != null && !jsonObj.get("time_zone").isJsonNull()) && !jsonObj.get("time_zone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `time_zone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("time_zone").toString()));
      }
      // validate the optional field `window_notification_times`
      if (jsonObj.get("window_notification_times") != null && !jsonObj.get("window_notification_times").isJsonNull()) {
        PatientPlanSummaryResourceAttributesWindowNotificationTimes.validateJsonElement(jsonObj.get("window_notification_times"));
      }
      if (jsonObj.get("window_order") != null && !jsonObj.get("window_order").isJsonNull()) {
        JsonArray jsonArraywindowOrder = jsonObj.getAsJsonArray("window_order");
        if (jsonArraywindowOrder != null) {
          // ensure the json data is an array
          if (!jsonObj.get("window_order").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `window_order` to be an array in the JSON string but got `%s`", jsonObj.get("window_order").toString()));
          }

          // validate the optional field `window_order` (array)
          for (int i = 0; i < jsonArraywindowOrder.size(); i++) {
            PatientPlanSummaryResourceAttributesWindowOrderInner.validateJsonElement(jsonArraywindowOrder.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PatientPlanSummaryResourceAttributes.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PatientPlanSummaryResourceAttributes' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PatientPlanSummaryResourceAttributes> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PatientPlanSummaryResourceAttributes.class));

       return (TypeAdapter<T>) new TypeAdapter<PatientPlanSummaryResourceAttributes>() {
           @Override
           public void write(JsonWriter out, PatientPlanSummaryResourceAttributes value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PatientPlanSummaryResourceAttributes read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PatientPlanSummaryResourceAttributes given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PatientPlanSummaryResourceAttributes
   * @throws IOException if the JSON string is invalid with respect to PatientPlanSummaryResourceAttributes
   */
  public static PatientPlanSummaryResourceAttributes fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PatientPlanSummaryResourceAttributes.class);
  }

  /**
   * Convert an instance of PatientPlanSummaryResourceAttributes to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

