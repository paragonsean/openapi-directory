/**
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIEmailHistoryResource_attributes_status_times.h
 *
 * Status of email. Multiple statuses may be defined. The current status is the one with the most recent date.
 */

#ifndef OAIEmailHistoryResource_attributes_status_times_H
#define OAIEmailHistoryResource_attributes_status_times_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIEmailHistoryResource_attributes_status_times : public OAIObject {
public:
    OAIEmailHistoryResource_attributes_status_times();
    OAIEmailHistoryResource_attributes_status_times(QString json);
    ~OAIEmailHistoryResource_attributes_status_times() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBounce() const;
    void setBounce(const QString &bounce);
    bool is_bounce_Set() const;
    bool is_bounce_Valid() const;

    QString getClick() const;
    void setClick(const QString &click);
    bool is_click_Set() const;
    bool is_click_Valid() const;

    QString getDeferred() const;
    void setDeferred(const QString &deferred);
    bool is_deferred_Set() const;
    bool is_deferred_Valid() const;

    QString getDelivered() const;
    void setDelivered(const QString &delivered);
    bool is_delivered_Set() const;
    bool is_delivered_Valid() const;

    QString getDropped() const;
    void setDropped(const QString &dropped);
    bool is_dropped_Set() const;
    bool is_dropped_Valid() const;

    QString getOpen() const;
    void setOpen(const QString &open);
    bool is_open_Set() const;
    bool is_open_Valid() const;

    QString getProcessed() const;
    void setProcessed(const QString &processed);
    bool is_processed_Set() const;
    bool is_processed_Valid() const;

    QString getSpamreport() const;
    void setSpamreport(const QString &spamreport);
    bool is_spamreport_Set() const;
    bool is_spamreport_Valid() const;

    QString getUnsubscribe() const;
    void setUnsubscribe(const QString &unsubscribe);
    bool is_unsubscribe_Set() const;
    bool is_unsubscribe_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_bounce;
    bool m_bounce_isSet;
    bool m_bounce_isValid;

    QString m_click;
    bool m_click_isSet;
    bool m_click_isValid;

    QString m_deferred;
    bool m_deferred_isSet;
    bool m_deferred_isValid;

    QString m_delivered;
    bool m_delivered_isSet;
    bool m_delivered_isValid;

    QString m_dropped;
    bool m_dropped_isSet;
    bool m_dropped_isValid;

    QString m_open;
    bool m_open_isSet;
    bool m_open_isValid;

    QString m_processed;
    bool m_processed_isSet;
    bool m_processed_isValid;

    QString m_spamreport;
    bool m_spamreport_isSet;
    bool m_spamreport_isValid;

    QString m_unsubscribe;
    bool m_unsubscribe_isSet;
    bool m_unsubscribe_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIEmailHistoryResource_attributes_status_times)

#endif // OAIEmailHistoryResource_attributes_status_times_H
