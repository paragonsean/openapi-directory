/**
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIActionResource_attributes.h
 *
 * 
 */

#ifndef OAIActionResource_attributes_H
#define OAIActionResource_attributes_H

#include <QJsonObject>

#include "OAIActionMetric.h"
#include "OAIActionResource_attributes_adherence.h"
#include "OAIActionResource_attributes_frequency_goal.h"
#include "OAIActionWindow.h"
#include "OAIIdentifier.h"
#include <QJsonValue>
#include <QList>
#include <QMap>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIActionResource_attributes_adherence;
class OAIActionResource_attributes_frequency_goal;
class OAIIdentifier;
class OAIActionMetric;
class OAIActionWindow;

class OAIActionResource_attributes : public OAIObject {
public:
    OAIActionResource_attributes();
    OAIActionResource_attributes(QString json);
    ~OAIActionResource_attributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getThread() const;
    void setThread(const QString &_thread);
    bool is__thread_Set() const;
    bool is__thread_Valid() const;

    OAIActionResource_attributes_adherence getAdherence() const;
    void setAdherence(const OAIActionResource_attributes_adherence &adherence);
    bool is_adherence_Set() const;
    bool is_adherence_Valid() const;

    QMap<QString, QJsonValue> getDetails() const;
    void setDetails(const QMap<QString, QJsonValue> &details);
    bool is_details_Set() const;
    bool is_details_Valid() const;

    QString getEffectiveFrom() const;
    void setEffectiveFrom(const QString &effective_from);
    bool is_effective_from_Set() const;
    bool is_effective_from_Valid() const;

    QString getEffectiveTo() const;
    void setEffectiveTo(const QString &effective_to);
    bool is_effective_to_Set() const;
    bool is_effective_to_Valid() const;

    OAIActionResource_attributes_frequency_goal getFrequencyGoal() const;
    void setFrequencyGoal(const OAIActionResource_attributes_frequency_goal &frequency_goal);
    bool is_frequency_goal_Set() const;
    bool is_frequency_goal_Valid() const;

    QList<OAIIdentifier> getIdentifiers() const;
    void setIdentifiers(const QList<OAIIdentifier> &identifiers);
    bool is_identifiers_Set() const;
    bool is_identifiers_Valid() const;

    QMap<QString, QJsonValue> getIntake() const;
    void setIntake(const QMap<QString, QJsonValue> &intake);
    bool is_intake_Set() const;
    bool is_intake_Valid() const;

    bool isMetricRequired() const;
    void setMetricRequired(const bool &metric_required);
    bool is_metric_required_Set() const;
    bool is_metric_required_Valid() const;

    QList<OAIActionMetric> getMetrics() const;
    void setMetrics(const QList<OAIActionMetric> &metrics);
    bool is_metrics_Set() const;
    bool is_metrics_Valid() const;

    QString getStaticTitle() const;
    void setStaticTitle(const QString &static_title);
    bool is_static_title_Set() const;
    bool is_static_title_Valid() const;

    QString getTitle() const;
    void setTitle(const QString &title);
    bool is_title_Set() const;
    bool is_title_Valid() const;

    bool isTracking() const;
    void setTracking(const bool &tracking);
    bool is_tracking_Set() const;
    bool is_tracking_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QList<OAIActionWindow> getWindows() const;
    void setWindows(const QList<OAIActionWindow> &windows);
    bool is_windows_Set() const;
    bool is_windows_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m__thread;
    bool m__thread_isSet;
    bool m__thread_isValid;

    OAIActionResource_attributes_adherence m_adherence;
    bool m_adherence_isSet;
    bool m_adherence_isValid;

    QMap<QString, QJsonValue> m_details;
    bool m_details_isSet;
    bool m_details_isValid;

    QString m_effective_from;
    bool m_effective_from_isSet;
    bool m_effective_from_isValid;

    QString m_effective_to;
    bool m_effective_to_isSet;
    bool m_effective_to_isValid;

    OAIActionResource_attributes_frequency_goal m_frequency_goal;
    bool m_frequency_goal_isSet;
    bool m_frequency_goal_isValid;

    QList<OAIIdentifier> m_identifiers;
    bool m_identifiers_isSet;
    bool m_identifiers_isValid;

    QMap<QString, QJsonValue> m_intake;
    bool m_intake_isSet;
    bool m_intake_isValid;

    bool m_metric_required;
    bool m_metric_required_isSet;
    bool m_metric_required_isValid;

    QList<OAIActionMetric> m_metrics;
    bool m_metrics_isSet;
    bool m_metrics_isValid;

    QString m_static_title;
    bool m_static_title_isSet;
    bool m_static_title_isValid;

    QString m_title;
    bool m_title_isSet;
    bool m_title_isValid;

    bool m_tracking;
    bool m_tracking_isSet;
    bool m_tracking_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QList<OAIActionWindow> m_windows;
    bool m_windows_isSet;
    bool m_windows_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIActionResource_attributes)

#endif // OAIActionResource_attributes_H
