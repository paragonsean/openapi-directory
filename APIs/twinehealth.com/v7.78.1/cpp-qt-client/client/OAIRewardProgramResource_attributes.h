/**
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIRewardProgramResource_attributes.h
 *
 * 
 */

#ifndef OAIRewardProgramResource_attributes_H
#define OAIRewardProgramResource_attributes_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIRewardProgramResource_attributes : public OAIObject {
public:
    OAIRewardProgramResource_attributes();
    OAIRewardProgramResource_attributes(QString json);
    ~OAIRewardProgramResource_attributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getBudgetUnit() const;
    void setBudgetUnit(const QString &budget_unit);
    bool is_budget_unit_Set() const;
    bool is_budget_unit_Valid() const;

    double getBudgetValue() const;
    void setBudgetValue(const double &budget_value);
    bool is_budget_value_Set() const;
    bool is_budget_value_Valid() const;

    QString getDescription() const;
    void setDescription(const QString &description);
    bool is_description_Set() const;
    bool is_description_Valid() const;

    double getDurationActive() const;
    void setDurationActive(const double &duration_active);
    bool is_duration_active_Set() const;
    bool is_duration_active_Valid() const;

    QString getEndAt() const;
    void setEndAt(const QString &end_at);
    bool is_end_at_Set() const;
    bool is_end_at_Valid() const;

    bool isFrozen() const;
    void setFrozen(const bool &frozen);
    bool is_frozen_Set() const;
    bool is_frozen_Valid() const;

    bool isFulfillAsEarned() const;
    void setFulfillAsEarned(const bool &fulfill_as_earned);
    bool is_fulfill_as_earned_Set() const;
    bool is_fulfill_as_earned_Valid() const;

    QString getName() const;
    void setName(const QString &name);
    bool is_name_Set() const;
    bool is_name_Valid() const;

    QString getStartAt() const;
    void setStartAt(const QString &start_at);
    bool is_start_at_Set() const;
    bool is_start_at_Valid() const;

    QString getTagline() const;
    void setTagline(const QString &tagline);
    bool is_tagline_Set() const;
    bool is_tagline_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_budget_unit;
    bool m_budget_unit_isSet;
    bool m_budget_unit_isValid;

    double m_budget_value;
    bool m_budget_value_isSet;
    bool m_budget_value_isValid;

    QString m_description;
    bool m_description_isSet;
    bool m_description_isValid;

    double m_duration_active;
    bool m_duration_active_isSet;
    bool m_duration_active_isValid;

    QString m_end_at;
    bool m_end_at_isSet;
    bool m_end_at_isValid;

    bool m_frozen;
    bool m_frozen_isSet;
    bool m_frozen_isValid;

    bool m_fulfill_as_earned;
    bool m_fulfill_as_earned_isSet;
    bool m_fulfill_as_earned_isValid;

    QString m_name;
    bool m_name_isSet;
    bool m_name_isValid;

    QString m_start_at;
    bool m_start_at_isSet;
    bool m_start_at_isValid;

    QString m_tagline;
    bool m_tagline_isSet;
    bool m_tagline_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIRewardProgramResource_attributes)

#endif // OAIRewardProgramResource_attributes_H
