/**
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIActionResource_attributes.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIActionResource_attributes::OAIActionResource_attributes(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIActionResource_attributes::OAIActionResource_attributes() {
    this->initializeModel();
}

OAIActionResource_attributes::~OAIActionResource_attributes() {}

void OAIActionResource_attributes::initializeModel() {

    m__thread_isSet = false;
    m__thread_isValid = false;

    m_adherence_isSet = false;
    m_adherence_isValid = false;

    m_details_isSet = false;
    m_details_isValid = false;

    m_effective_from_isSet = false;
    m_effective_from_isValid = false;

    m_effective_to_isSet = false;
    m_effective_to_isValid = false;

    m_frequency_goal_isSet = false;
    m_frequency_goal_isValid = false;

    m_identifiers_isSet = false;
    m_identifiers_isValid = false;

    m_intake_isSet = false;
    m_intake_isValid = false;

    m_metric_required_isSet = false;
    m_metric_required_isValid = false;

    m_metrics_isSet = false;
    m_metrics_isValid = false;

    m_static_title_isSet = false;
    m_static_title_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_tracking_isSet = false;
    m_tracking_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_windows_isSet = false;
    m_windows_isValid = false;
}

void OAIActionResource_attributes::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIActionResource_attributes::fromJsonObject(QJsonObject json) {

    m__thread_isValid = ::OpenAPI::fromJsonValue(m__thread, json[QString("_thread")]);
    m__thread_isSet = !json[QString("_thread")].isNull() && m__thread_isValid;

    m_adherence_isValid = ::OpenAPI::fromJsonValue(m_adherence, json[QString("adherence")]);
    m_adherence_isSet = !json[QString("adherence")].isNull() && m_adherence_isValid;

    m_details_isValid = ::OpenAPI::fromJsonValue(m_details, json[QString("details")]);
    m_details_isSet = !json[QString("details")].isNull() && m_details_isValid;

    m_effective_from_isValid = ::OpenAPI::fromJsonValue(m_effective_from, json[QString("effective_from")]);
    m_effective_from_isSet = !json[QString("effective_from")].isNull() && m_effective_from_isValid;

    m_effective_to_isValid = ::OpenAPI::fromJsonValue(m_effective_to, json[QString("effective_to")]);
    m_effective_to_isSet = !json[QString("effective_to")].isNull() && m_effective_to_isValid;

    m_frequency_goal_isValid = ::OpenAPI::fromJsonValue(m_frequency_goal, json[QString("frequency_goal")]);
    m_frequency_goal_isSet = !json[QString("frequency_goal")].isNull() && m_frequency_goal_isValid;

    m_identifiers_isValid = ::OpenAPI::fromJsonValue(m_identifiers, json[QString("identifiers")]);
    m_identifiers_isSet = !json[QString("identifiers")].isNull() && m_identifiers_isValid;

    m_intake_isValid = ::OpenAPI::fromJsonValue(m_intake, json[QString("intake")]);
    m_intake_isSet = !json[QString("intake")].isNull() && m_intake_isValid;

    m_metric_required_isValid = ::OpenAPI::fromJsonValue(m_metric_required, json[QString("metric_required")]);
    m_metric_required_isSet = !json[QString("metric_required")].isNull() && m_metric_required_isValid;

    m_metrics_isValid = ::OpenAPI::fromJsonValue(m_metrics, json[QString("metrics")]);
    m_metrics_isSet = !json[QString("metrics")].isNull() && m_metrics_isValid;

    m_static_title_isValid = ::OpenAPI::fromJsonValue(m_static_title, json[QString("static_title")]);
    m_static_title_isSet = !json[QString("static_title")].isNull() && m_static_title_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_tracking_isValid = ::OpenAPI::fromJsonValue(m_tracking, json[QString("tracking")]);
    m_tracking_isSet = !json[QString("tracking")].isNull() && m_tracking_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_windows_isValid = ::OpenAPI::fromJsonValue(m_windows, json[QString("windows")]);
    m_windows_isSet = !json[QString("windows")].isNull() && m_windows_isValid;
}

QString OAIActionResource_attributes::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIActionResource_attributes::asJsonObject() const {
    QJsonObject obj;
    if (m__thread_isSet) {
        obj.insert(QString("_thread"), ::OpenAPI::toJsonValue(m__thread));
    }
    if (m_adherence.isSet()) {
        obj.insert(QString("adherence"), ::OpenAPI::toJsonValue(m_adherence));
    }
    if (m_details.size() > 0) {
        obj.insert(QString("details"), ::OpenAPI::toJsonValue(m_details));
    }
    if (m_effective_from_isSet) {
        obj.insert(QString("effective_from"), ::OpenAPI::toJsonValue(m_effective_from));
    }
    if (m_effective_to_isSet) {
        obj.insert(QString("effective_to"), ::OpenAPI::toJsonValue(m_effective_to));
    }
    if (m_frequency_goal.isSet()) {
        obj.insert(QString("frequency_goal"), ::OpenAPI::toJsonValue(m_frequency_goal));
    }
    if (m_identifiers.size() > 0) {
        obj.insert(QString("identifiers"), ::OpenAPI::toJsonValue(m_identifiers));
    }
    if (m_intake.size() > 0) {
        obj.insert(QString("intake"), ::OpenAPI::toJsonValue(m_intake));
    }
    if (m_metric_required_isSet) {
        obj.insert(QString("metric_required"), ::OpenAPI::toJsonValue(m_metric_required));
    }
    if (m_metrics.size() > 0) {
        obj.insert(QString("metrics"), ::OpenAPI::toJsonValue(m_metrics));
    }
    if (m_static_title_isSet) {
        obj.insert(QString("static_title"), ::OpenAPI::toJsonValue(m_static_title));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_tracking_isSet) {
        obj.insert(QString("tracking"), ::OpenAPI::toJsonValue(m_tracking));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_windows.size() > 0) {
        obj.insert(QString("windows"), ::OpenAPI::toJsonValue(m_windows));
    }
    return obj;
}

QString OAIActionResource_attributes::getThread() const {
    return m__thread;
}
void OAIActionResource_attributes::setThread(const QString &_thread) {
    m__thread = _thread;
    m__thread_isSet = true;
}

bool OAIActionResource_attributes::is__thread_Set() const{
    return m__thread_isSet;
}

bool OAIActionResource_attributes::is__thread_Valid() const{
    return m__thread_isValid;
}

OAIActionResource_attributes_adherence OAIActionResource_attributes::getAdherence() const {
    return m_adherence;
}
void OAIActionResource_attributes::setAdherence(const OAIActionResource_attributes_adherence &adherence) {
    m_adherence = adherence;
    m_adherence_isSet = true;
}

bool OAIActionResource_attributes::is_adherence_Set() const{
    return m_adherence_isSet;
}

bool OAIActionResource_attributes::is_adherence_Valid() const{
    return m_adherence_isValid;
}

QMap<QString, QJsonValue> OAIActionResource_attributes::getDetails() const {
    return m_details;
}
void OAIActionResource_attributes::setDetails(const QMap<QString, QJsonValue> &details) {
    m_details = details;
    m_details_isSet = true;
}

bool OAIActionResource_attributes::is_details_Set() const{
    return m_details_isSet;
}

bool OAIActionResource_attributes::is_details_Valid() const{
    return m_details_isValid;
}

QString OAIActionResource_attributes::getEffectiveFrom() const {
    return m_effective_from;
}
void OAIActionResource_attributes::setEffectiveFrom(const QString &effective_from) {
    m_effective_from = effective_from;
    m_effective_from_isSet = true;
}

bool OAIActionResource_attributes::is_effective_from_Set() const{
    return m_effective_from_isSet;
}

bool OAIActionResource_attributes::is_effective_from_Valid() const{
    return m_effective_from_isValid;
}

QString OAIActionResource_attributes::getEffectiveTo() const {
    return m_effective_to;
}
void OAIActionResource_attributes::setEffectiveTo(const QString &effective_to) {
    m_effective_to = effective_to;
    m_effective_to_isSet = true;
}

bool OAIActionResource_attributes::is_effective_to_Set() const{
    return m_effective_to_isSet;
}

bool OAIActionResource_attributes::is_effective_to_Valid() const{
    return m_effective_to_isValid;
}

OAIActionResource_attributes_frequency_goal OAIActionResource_attributes::getFrequencyGoal() const {
    return m_frequency_goal;
}
void OAIActionResource_attributes::setFrequencyGoal(const OAIActionResource_attributes_frequency_goal &frequency_goal) {
    m_frequency_goal = frequency_goal;
    m_frequency_goal_isSet = true;
}

bool OAIActionResource_attributes::is_frequency_goal_Set() const{
    return m_frequency_goal_isSet;
}

bool OAIActionResource_attributes::is_frequency_goal_Valid() const{
    return m_frequency_goal_isValid;
}

QList<OAIIdentifier> OAIActionResource_attributes::getIdentifiers() const {
    return m_identifiers;
}
void OAIActionResource_attributes::setIdentifiers(const QList<OAIIdentifier> &identifiers) {
    m_identifiers = identifiers;
    m_identifiers_isSet = true;
}

bool OAIActionResource_attributes::is_identifiers_Set() const{
    return m_identifiers_isSet;
}

bool OAIActionResource_attributes::is_identifiers_Valid() const{
    return m_identifiers_isValid;
}

QMap<QString, QJsonValue> OAIActionResource_attributes::getIntake() const {
    return m_intake;
}
void OAIActionResource_attributes::setIntake(const QMap<QString, QJsonValue> &intake) {
    m_intake = intake;
    m_intake_isSet = true;
}

bool OAIActionResource_attributes::is_intake_Set() const{
    return m_intake_isSet;
}

bool OAIActionResource_attributes::is_intake_Valid() const{
    return m_intake_isValid;
}

bool OAIActionResource_attributes::isMetricRequired() const {
    return m_metric_required;
}
void OAIActionResource_attributes::setMetricRequired(const bool &metric_required) {
    m_metric_required = metric_required;
    m_metric_required_isSet = true;
}

bool OAIActionResource_attributes::is_metric_required_Set() const{
    return m_metric_required_isSet;
}

bool OAIActionResource_attributes::is_metric_required_Valid() const{
    return m_metric_required_isValid;
}

QList<OAIActionMetric> OAIActionResource_attributes::getMetrics() const {
    return m_metrics;
}
void OAIActionResource_attributes::setMetrics(const QList<OAIActionMetric> &metrics) {
    m_metrics = metrics;
    m_metrics_isSet = true;
}

bool OAIActionResource_attributes::is_metrics_Set() const{
    return m_metrics_isSet;
}

bool OAIActionResource_attributes::is_metrics_Valid() const{
    return m_metrics_isValid;
}

QString OAIActionResource_attributes::getStaticTitle() const {
    return m_static_title;
}
void OAIActionResource_attributes::setStaticTitle(const QString &static_title) {
    m_static_title = static_title;
    m_static_title_isSet = true;
}

bool OAIActionResource_attributes::is_static_title_Set() const{
    return m_static_title_isSet;
}

bool OAIActionResource_attributes::is_static_title_Valid() const{
    return m_static_title_isValid;
}

QString OAIActionResource_attributes::getTitle() const {
    return m_title;
}
void OAIActionResource_attributes::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIActionResource_attributes::is_title_Set() const{
    return m_title_isSet;
}

bool OAIActionResource_attributes::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIActionResource_attributes::isTracking() const {
    return m_tracking;
}
void OAIActionResource_attributes::setTracking(const bool &tracking) {
    m_tracking = tracking;
    m_tracking_isSet = true;
}

bool OAIActionResource_attributes::is_tracking_Set() const{
    return m_tracking_isSet;
}

bool OAIActionResource_attributes::is_tracking_Valid() const{
    return m_tracking_isValid;
}

QString OAIActionResource_attributes::getType() const {
    return m_type;
}
void OAIActionResource_attributes::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIActionResource_attributes::is_type_Set() const{
    return m_type_isSet;
}

bool OAIActionResource_attributes::is_type_Valid() const{
    return m_type_isValid;
}

QList<OAIActionWindow> OAIActionResource_attributes::getWindows() const {
    return m_windows;
}
void OAIActionResource_attributes::setWindows(const QList<OAIActionWindow> &windows) {
    m_windows = windows;
    m_windows_isSet = true;
}

bool OAIActionResource_attributes::is_windows_Set() const{
    return m_windows_isSet;
}

bool OAIActionResource_attributes::is_windows_Valid() const{
    return m_windows_isValid;
}

bool OAIActionResource_attributes::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m__thread_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_adherence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_details.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_effective_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_frequency_goal.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_identifiers.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_intake.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_metric_required_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metrics.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_static_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tracking_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_windows.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIActionResource_attributes::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_effective_from_isValid && m_title_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
