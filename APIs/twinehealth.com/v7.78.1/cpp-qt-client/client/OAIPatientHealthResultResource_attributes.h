/**
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPatientHealthResultResource_attributes.h
 *
 * 
 */

#ifndef OAIPatientHealthResultResource_attributes_H
#define OAIPatientHealthResultResource_attributes_H

#include <QJsonObject>

#include "OAIPatientHealthResultResource_attributes_annotations_inner.h"
#include "OAIPatientHealthResultResource_attributes_data.h"
#include "OAIPatientHealthResultResource_attributes_source.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIPatientHealthResultResource_attributes_annotations_inner;
class OAIPatientHealthResultResource_attributes_data;
class OAIPatientHealthResultResource_attributes_source;

class OAIPatientHealthResultResource_attributes : public OAIObject {
public:
    OAIPatientHealthResultResource_attributes();
    OAIPatientHealthResultResource_attributes(QString json);
    ~OAIPatientHealthResultResource_attributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getThread() const;
    void setThread(const QString &_thread);
    bool is__thread_Set() const;
    bool is__thread_Valid() const;

    QString getAggregation() const;
    void setAggregation(const QString &aggregation);
    bool is_aggregation_Set() const;
    bool is_aggregation_Valid() const;

    QList<OAIPatientHealthResultResource_attributes_annotations_inner> getAnnotations() const;
    void setAnnotations(const QList<OAIPatientHealthResultResource_attributes_annotations_inner> &annotations);
    bool is_annotations_Set() const;
    bool is_annotations_Valid() const;

    QString getChannel() const;
    void setChannel(const QString &channel);
    bool is_channel_Set() const;
    bool is_channel_Valid() const;

    OAIPatientHealthResultResource_attributes_data getData() const;
    void setData(const OAIPatientHealthResultResource_attributes_data &data);
    bool is_data_Set() const;
    bool is_data_Valid() const;

    QString getExternalId() const;
    void setExternalId(const QString &external_id);
    bool is_external_id_Set() const;
    bool is_external_id_Valid() const;

    QString getMetricType() const;
    void setMetricType(const QString &metric_type);
    bool is_metric_type_Set() const;
    bool is_metric_type_Valid() const;

    QString getOccurredAt() const;
    void setOccurredAt(const QString &occurred_at);
    bool is_occurred_at_Set() const;
    bool is_occurred_at_Valid() const;

    QString getOccurredAtTimeZone() const;
    void setOccurredAtTimeZone(const QString &occurred_at_time_zone);
    bool is_occurred_at_time_zone_Set() const;
    bool is_occurred_at_time_zone_Valid() const;

    bool isSkipped() const;
    void setSkipped(const bool &skipped);
    bool is_skipped_Set() const;
    bool is_skipped_Valid() const;

    OAIPatientHealthResultResource_attributes_source getSource() const;
    void setSource(const OAIPatientHealthResultResource_attributes_source &source);
    bool is_source_Set() const;
    bool is_source_Valid() const;

    QString getType() const;
    void setType(const QString &type);
    bool is_type_Set() const;
    bool is_type_Valid() const;

    QString getWindow() const;
    void setWindow(const QString &window);
    bool is_window_Set() const;
    bool is_window_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m__thread;
    bool m__thread_isSet;
    bool m__thread_isValid;

    QString m_aggregation;
    bool m_aggregation_isSet;
    bool m_aggregation_isValid;

    QList<OAIPatientHealthResultResource_attributes_annotations_inner> m_annotations;
    bool m_annotations_isSet;
    bool m_annotations_isValid;

    QString m_channel;
    bool m_channel_isSet;
    bool m_channel_isValid;

    OAIPatientHealthResultResource_attributes_data m_data;
    bool m_data_isSet;
    bool m_data_isValid;

    QString m_external_id;
    bool m_external_id_isSet;
    bool m_external_id_isValid;

    QString m_metric_type;
    bool m_metric_type_isSet;
    bool m_metric_type_isValid;

    QString m_occurred_at;
    bool m_occurred_at_isSet;
    bool m_occurred_at_isValid;

    QString m_occurred_at_time_zone;
    bool m_occurred_at_time_zone_isSet;
    bool m_occurred_at_time_zone_isValid;

    bool m_skipped;
    bool m_skipped_isSet;
    bool m_skipped_isValid;

    OAIPatientHealthResultResource_attributes_source m_source;
    bool m_source_isSet;
    bool m_source_isValid;

    QString m_type;
    bool m_type_isSet;
    bool m_type_isValid;

    QString m_window;
    bool m_window_isSet;
    bool m_window_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPatientHealthResultResource_attributes)

#endif // OAIPatientHealthResultResource_attributes_H
