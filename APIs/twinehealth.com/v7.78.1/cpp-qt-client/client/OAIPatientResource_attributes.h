/**
 * Fitbit Plus API
 * # Overview The Fitbit Plus API is a RESTful API. The requests and responses are formated according to the [JSON API](http://jsonapi.org/format/1.0/) specification.  In addition to this documentation, we also provide an [OpenAPI](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/2.0.md) \"yaml\" file describing the API: [Fitbit Plus API Specification](swagger.yaml).  # Authentication Authentication for the Fitbit Plus API is based on the [OAuth 2.0 Authorization Framework](https://tools.ietf.org/html/rfc6749). Fitbit Plus currently supports grant types of **client_credentials** and **refresh_token**.  See [POST /oauth/token](#operation/createToken) for details on the request and response formats. <!-- ReDoc-Inject: <security-definitions> -->  ## Building Integrations We will provide customers with unique client credentials for each application/integration they build, allowing us to enforce appropriate access controls and monitor API usage. The client credentials will be scoped to the organization, and allow full access to all patients and related data within that organization.  These credentials are appropriate for creating an integration that does one of the following:  - background reporting/analysis  - synchronizing data with another system (such as an EMR)  The API credentials and oauth flows we currently support are **not** well suited for creating a user-facing application that allows a user (patient, coach, or admin) to login and have access to data which is appropriate to that specific user. It is possible to build such an application, but it is not possible to use Fitbit Plus as a federated identity provider. You would need to have a separate means of verifying a user's identity. We do not currently support the required password-based oauth flow to make this possible.  # Paging The Fitbit Plus API supports two different pagination strategies for GET collection endpoints.  #### Skip-based paging  Skip-based paging uses the query parameters `page[size]` and `page[number]` to specify the max number of resources returned and the page number. We default to skip-based paging if there are no page parameters. The response will include a `links` object containing links to the first, last, prev, and next pages of data.  If the contents of the collection change while you are iterating through the collection, you will see duplicate or missing documents. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=1`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[size]=50&page[number]=2`, the first entry in the second response will be a duplicate of the last entry in the first response.  #### Cursor-based paging Cursor-based paging uses the query parameters `page[limit]` and `page[after]` to specify the max number of entries returned and identify where to begin the next page. Add `page[limit]` to the parameters to use cursor-based paging. The response will include a `links` object containing a link to the next page of data, if the next page exists.  Cursor-based paging is not subject to duplication if new resources are added to the collection. For example, if you are iterating through the `calender_event` resource via `GET /pub/calendar_event?sort=start_at&page[limit]=50`, and a new `calendar_event` is created that has a `start_at` value before the first `calendar_event`, you will not see a duplicate entry when you fetch the next page at `GET /pub/calendar_event?sort=start_at&page[limit]=50&page[after]=<cursor>`.  We encourage the use of cursor-based paging for performance reasons.  In either form of paging, you can determine whether any resources were missed by comparing the number of fetched resources against `meta.count`. Set `page[size]` or `page[limit]` to 0 to get only the count.  It is not valid to mix the two strategies. 
 *
 * The version of the OpenAPI document: v7.78.1
 * Contact: apiteam@twinehealth.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIPatientResource_attributes.h
 *
 * 
 */

#ifndef OAIPatientResource_attributes_H
#define OAIPatientResource_attributes_H

#include <QJsonObject>

#include "OAIAddress.h"
#include "OAIArchiveHistory.h"
#include "OAIPatientIdentifier.h"
#include "OAIPatientResource_attributes_statement.h"
#include "OAIPhoneNumber.h"
#include <QDate>
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIAddress;
class OAIArchiveHistory;
class OAIPatientIdentifier;
class OAIPhoneNumber;
class OAIPatientResource_attributes_statement;

class OAIPatientResource_attributes : public OAIObject {
public:
    OAIPatientResource_attributes();
    OAIPatientResource_attributes(QString json);
    ~OAIPatientResource_attributes() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<OAIAddress> getAddresses() const;
    void setAddresses(const QList<OAIAddress> &addresses);
    bool is_addresses_Set() const;
    bool is_addresses_Valid() const;

    QList<OAIArchiveHistory> getArchiveHistory() const;
    void setArchiveHistory(const QList<OAIArchiveHistory> &archive_history);
    bool is_archive_history_Set() const;
    bool is_archive_history_Valid() const;

    bool isArchived() const;
    void setArchived(const bool &archived);
    bool is_archived_Set() const;
    bool is_archived_Valid() const;

    QDate getBirthDate() const;
    void setBirthDate(const QDate &birth_date);
    bool is_birth_date_Set() const;
    bool is_birth_date_Valid() const;

    QString getEmailAddress() const;
    void setEmailAddress(const QString &email_address);
    bool is_email_address_Set() const;
    bool is_email_address_Valid() const;

    QString getEnrolledAt() const;
    void setEnrolledAt(const QString &enrolled_at);
    bool is_enrolled_at_Set() const;
    bool is_enrolled_at_Valid() const;

    QString getFirstAccessAt() const;
    void setFirstAccessAt(const QString &first_access_at);
    bool is_first_access_at_Set() const;
    bool is_first_access_at_Valid() const;

    QString getFirstName() const;
    void setFirstName(const QString &first_name);
    bool is_first_name_Set() const;
    bool is_first_name_Valid() const;

    QString getGender() const;
    void setGender(const QString &gender);
    bool is_gender_Set() const;
    bool is_gender_Valid() const;

    QList<OAIPatientIdentifier> getIdentifiers() const;
    void setIdentifiers(const QList<OAIPatientIdentifier> &identifiers);
    bool is_identifiers_Set() const;
    bool is_identifiers_Valid() const;

    QString getInvitedAt() const;
    void setInvitedAt(const QString &invited_at);
    bool is_invited_at_Set() const;
    bool is_invited_at_Valid() const;

    QString getLastAccessAt() const;
    void setLastAccessAt(const QString &last_access_at);
    bool is_last_access_at_Set() const;
    bool is_last_access_at_Valid() const;

    QString getLastName() const;
    void setLastName(const QString &last_name);
    bool is_last_name_Set() const;
    bool is_last_name_Valid() const;

    QString getNote() const;
    void setNote(const QString &note);
    bool is_note_Set() const;
    bool is_note_Valid() const;

    QList<OAIPhoneNumber> getPhoneNumbers() const;
    void setPhoneNumbers(const QList<OAIPhoneNumber> &phone_numbers);
    bool is_phone_numbers_Set() const;
    bool is_phone_numbers_Valid() const;

    OAIPatientResource_attributes_statement getStatement() const;
    void setStatement(const OAIPatientResource_attributes_statement &statement);
    bool is_statement_Set() const;
    bool is_statement_Valid() const;

    QString getUpdatedAt() const;
    void setUpdatedAt(const QString &updated_at);
    bool is_updated_at_Set() const;
    bool is_updated_at_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<OAIAddress> m_addresses;
    bool m_addresses_isSet;
    bool m_addresses_isValid;

    QList<OAIArchiveHistory> m_archive_history;
    bool m_archive_history_isSet;
    bool m_archive_history_isValid;

    bool m_archived;
    bool m_archived_isSet;
    bool m_archived_isValid;

    QDate m_birth_date;
    bool m_birth_date_isSet;
    bool m_birth_date_isValid;

    QString m_email_address;
    bool m_email_address_isSet;
    bool m_email_address_isValid;

    QString m_enrolled_at;
    bool m_enrolled_at_isSet;
    bool m_enrolled_at_isValid;

    QString m_first_access_at;
    bool m_first_access_at_isSet;
    bool m_first_access_at_isValid;

    QString m_first_name;
    bool m_first_name_isSet;
    bool m_first_name_isValid;

    QString m_gender;
    bool m_gender_isSet;
    bool m_gender_isValid;

    QList<OAIPatientIdentifier> m_identifiers;
    bool m_identifiers_isSet;
    bool m_identifiers_isValid;

    QString m_invited_at;
    bool m_invited_at_isSet;
    bool m_invited_at_isValid;

    QString m_last_access_at;
    bool m_last_access_at_isSet;
    bool m_last_access_at_isValid;

    QString m_last_name;
    bool m_last_name_isSet;
    bool m_last_name_isValid;

    QString m_note;
    bool m_note_isSet;
    bool m_note_isValid;

    QList<OAIPhoneNumber> m_phone_numbers;
    bool m_phone_numbers_isSet;
    bool m_phone_numbers_isValid;

    OAIPatientResource_attributes_statement m_statement;
    bool m_statement_isSet;
    bool m_statement_isValid;

    QString m_updated_at;
    bool m_updated_at_isSet;
    bool m_updated_at_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIPatientResource_attributes)

#endif // OAIPatientResource_attributes_H
