/**
 * EmailVerify
 * OTP email verification API by PayPI. <br/><br/> EmailVerify provides a simple way to verify email addresses. We send emails ourselves taking the burden of setting up email systems and tracking codes. <br/><br/> To learn more about this API, check out [EmailVerify documentation](https://emailverify.paypi.dev/) <br/><br/>  ## Authentication All requests to the EmailVerify API must be authenticated with an API Key. To get an API key, subscribe to the EmailVerify [here](https://app.paypi.dev/subscribe/c2VydmljZTo1OGQxZDNmMy05OWQ5LTQ3ZjYtOWJkNi02OWNkMTY1OGFmOWU=).  \\ Set your `Authorization` header to `Bearer YOUR-API-KEY`.  ``` curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer YOUR-API-KEY\" \\ ... ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@paypi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_checkCode_post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_checkCode_post_request::OAI_checkCode_post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_checkCode_post_request::OAI_checkCode_post_request() {
    this->initializeModel();
}

OAI_checkCode_post_request::~OAI_checkCode_post_request() {}

void OAI_checkCode_post_request::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;
}

void OAI_checkCode_post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_checkCode_post_request::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;
}

QString OAI_checkCode_post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_checkCode_post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    return obj;
}

QString OAI_checkCode_post_request::getCode() const {
    return m_code;
}
void OAI_checkCode_post_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAI_checkCode_post_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAI_checkCode_post_request::is_code_Valid() const{
    return m_code_isValid;
}

QString OAI_checkCode_post_request::getEmail() const {
    return m_email;
}
void OAI_checkCode_post_request::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAI_checkCode_post_request::is_email_Set() const{
    return m_email_isSet;
}

bool OAI_checkCode_post_request::is_email_Valid() const{
    return m_email_isValid;
}

bool OAI_checkCode_post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_checkCode_post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
