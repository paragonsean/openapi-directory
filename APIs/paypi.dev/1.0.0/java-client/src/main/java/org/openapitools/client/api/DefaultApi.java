/*
 * EmailVerify
 * OTP email verification API by PayPI. <br/><br/> EmailVerify provides a simple way to verify email addresses. We send emails ourselves taking the burden of setting up email systems and tracking codes. <br/><br/> To learn more about this API, check out [EmailVerify documentation](https://emailverify.paypi.dev/) <br/><br/>  ## Authentication All requests to the EmailVerify API must be authenticated with an API Key. To get an API key, subscribe to the EmailVerify [here](https://app.paypi.dev/subscribe/c2VydmljZTo1OGQxZDNmMy05OWQ5LTQ3ZjYtOWJkNi02OWNkMTY1OGFmOWU=).  \\ Set your `Authorization` header to `Bearer YOUR-API-KEY`.  ``` curl -H \"Content-Type: application/json\" \\ -H \"Authorization: Bearer YOUR-API-KEY\" \\ ... ``` 
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: hello@paypi.dev
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CheckCodePost200Response;
import org.openapitools.client.model.CheckCodePost401Response;
import org.openapitools.client.model.CheckCodePost403Response;
import org.openapitools.client.model.CheckCodePostRequest;
import org.openapitools.client.model.SendCodePost200Response;
import org.openapitools.client.model.SendCodePost400Response;
import org.openapitools.client.model.SendCodePostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for checkCodePost
     * @param checkCodePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If success is true, the user has given the correct code. If not the code is incorrect. \\ Check the message for more information  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> #### Invalid API key  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> #### Tries for this email exceeded.  To prevent abuse and brute forcing, we limit the number of checkCode requests for each email address to 20. \\ This means if more than 20 requests are made you will have to send another code to your user, this will reset the limit.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCodePostCall(CheckCodePostRequest checkCodePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = checkCodePostRequest;

        // create path and map variables
        String localVarPath = "/checkCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call checkCodePostValidateBeforeCall(CheckCodePostRequest checkCodePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'checkCodePostRequest' is set
        if (checkCodePostRequest == null) {
            throw new ApiException("Missing the required parameter 'checkCodePostRequest' when calling checkCodePost(Async)");
        }

        return checkCodePostCall(checkCodePostRequest, _callback);

    }

    /**
     * Check verification code
     * Checks the user&#39;s emailed code is valid.  If this returns success&#x3D;true, you can safely assume the user you are interacting with is the owner of that email address. 
     * @param checkCodePostRequest  (required)
     * @return CheckCodePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If success is true, the user has given the correct code. If not the code is incorrect. \\ Check the message for more information  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> #### Invalid API key  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> #### Tries for this email exceeded.  To prevent abuse and brute forcing, we limit the number of checkCode requests for each email address to 20. \\ This means if more than 20 requests are made you will have to send another code to your user, this will reset the limit.  </td><td>  -  </td></tr>
     </table>
     */
    public CheckCodePost200Response checkCodePost(CheckCodePostRequest checkCodePostRequest) throws ApiException {
        ApiResponse<CheckCodePost200Response> localVarResp = checkCodePostWithHttpInfo(checkCodePostRequest);
        return localVarResp.getData();
    }

    /**
     * Check verification code
     * Checks the user&#39;s emailed code is valid.  If this returns success&#x3D;true, you can safely assume the user you are interacting with is the owner of that email address. 
     * @param checkCodePostRequest  (required)
     * @return ApiResponse&lt;CheckCodePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If success is true, the user has given the correct code. If not the code is incorrect. \\ Check the message for more information  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> #### Invalid API key  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> #### Tries for this email exceeded.  To prevent abuse and brute forcing, we limit the number of checkCode requests for each email address to 20. \\ This means if more than 20 requests are made you will have to send another code to your user, this will reset the limit.  </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CheckCodePost200Response> checkCodePostWithHttpInfo(CheckCodePostRequest checkCodePostRequest) throws ApiException {
        okhttp3.Call localVarCall = checkCodePostValidateBeforeCall(checkCodePostRequest, null);
        Type localVarReturnType = new TypeToken<CheckCodePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Check verification code (asynchronously)
     * Checks the user&#39;s emailed code is valid.  If this returns success&#x3D;true, you can safely assume the user you are interacting with is the owner of that email address. 
     * @param checkCodePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> If success is true, the user has given the correct code. If not the code is incorrect. \\ Check the message for more information  </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> #### Invalid API key  </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> #### Tries for this email exceeded.  To prevent abuse and brute forcing, we limit the number of checkCode requests for each email address to 20. \\ This means if more than 20 requests are made you will have to send another code to your user, this will reset the limit.  </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call checkCodePostAsync(CheckCodePostRequest checkCodePostRequest, final ApiCallback<CheckCodePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = checkCodePostValidateBeforeCall(checkCodePostRequest, _callback);
        Type localVarReturnType = new TypeToken<CheckCodePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sendCodePost
     * @param sendCodePostRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Email sent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or incorrectly formatted email given </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendCodePostCall(SendCodePostRequest sendCodePostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = sendCodePostRequest;

        // create path and map variables
        String localVarPath = "/sendCode";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "bearerAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sendCodePostValidateBeforeCall(SendCodePostRequest sendCodePostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'sendCodePostRequest' is set
        if (sendCodePostRequest == null) {
            throw new ApiException("Missing the required parameter 'sendCodePostRequest' when calling sendCodePost(Async)");
        }

        return sendCodePostCall(sendCodePostRequest, _callback);

    }

    /**
     * Send verification code
     * This request send&#39;s a code to the given email address, which should be returned to check it is correct.
     * @param sendCodePostRequest  (required)
     * @return SendCodePost200Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Email sent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or incorrectly formatted email given </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
     </table>
     */
    public SendCodePost200Response sendCodePost(SendCodePostRequest sendCodePostRequest) throws ApiException {
        ApiResponse<SendCodePost200Response> localVarResp = sendCodePostWithHttpInfo(sendCodePostRequest);
        return localVarResp.getData();
    }

    /**
     * Send verification code
     * This request send&#39;s a code to the given email address, which should be returned to check it is correct.
     * @param sendCodePostRequest  (required)
     * @return ApiResponse&lt;SendCodePost200Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Email sent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or incorrectly formatted email given </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SendCodePost200Response> sendCodePostWithHttpInfo(SendCodePostRequest sendCodePostRequest) throws ApiException {
        okhttp3.Call localVarCall = sendCodePostValidateBeforeCall(sendCodePostRequest, null);
        Type localVarReturnType = new TypeToken<SendCodePost200Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Send verification code (asynchronously)
     * This request send&#39;s a code to the given email address, which should be returned to check it is correct.
     * @param sendCodePostRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Success - Email sent </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid or incorrectly formatted email given </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Invalid API key </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sendCodePostAsync(SendCodePostRequest sendCodePostRequest, final ApiCallback<SendCodePost200Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = sendCodePostValidateBeforeCall(sendCodePostRequest, _callback);
        Type localVarReturnType = new TypeToken<SendCodePost200Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
