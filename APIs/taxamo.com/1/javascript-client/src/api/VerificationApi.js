/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateSMSTokenIn from '../model/CreateSMSTokenIn';
import CreateSMSTokenOut from '../model/CreateSMSTokenOut';
import VerifySMSTokenOut from '../model/VerifySMSTokenOut';

/**
* Verification service.
* @module api/VerificationApi
* @version 1
*/
export default class VerificationApi {

    /**
    * Constructs a new VerificationApi. 
    * @alias module:api/VerificationApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createSMSToken operation.
     * @callback module:api/VerificationApi~createSMSTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateSMSTokenOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create SMS token
     * @param {module:model/CreateSMSTokenIn} input Input
     * @param {module:api/VerificationApi~createSMSTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateSMSTokenOut}
     */
    createSMSToken(input, callback) {
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling createSMSToken");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateSMSTokenOut;
      return this.apiClient.callApi(
        '/api/v1/verification/sms', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the verifySMSToken operation.
     * @callback module:api/VerificationApi~verifySMSTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VerifySMSTokenOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Verify SMS token
     * @param {String} token Provided token.
     * @param {module:api/VerificationApi~verifySMSTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VerifySMSTokenOut}
     */
    verifySMSToken(token, callback) {
      let postBody = null;
      // verify the required parameter 'token' is set
      if (token === undefined || token === null) {
        throw new Error("Missing the required parameter 'token' when calling verifySMSToken");
      }

      let pathParams = {
        'token': token
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VerifySMSTokenOut;
      return this.apiClient.callApi(
        '/api/v1/verification/sms/{token}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
