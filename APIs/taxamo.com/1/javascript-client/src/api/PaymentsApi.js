/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CapturePaymentOut from '../model/CapturePaymentOut';
import CreatePaymentIn from '../model/CreatePaymentIn';
import CreatePaymentOut from '../model/CreatePaymentOut';
import ListPaymentsOut from '../model/ListPaymentsOut';

/**
* Payments service.
* @module api/PaymentsApi
* @version 1
*/
export default class PaymentsApi {

    /**
    * Constructs a new PaymentsApi. 
    * @alias module:api/PaymentsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the capturePayment operation.
     * @callback module:api/PaymentsApi~capturePaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CapturePaymentOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Capture payment
     * @param {String} key Transaction key.
     * @param {module:api/PaymentsApi~capturePaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CapturePaymentOut}
     */
    capturePayment(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling capturePayment");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CapturePaymentOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/payments/capture', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPayment operation.
     * @callback module:api/PaymentsApi~createPaymentCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreatePaymentOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Register a payment
     * @param {String} key Transaction key.
     * @param {module:model/CreatePaymentIn} input Input
     * @param {module:api/PaymentsApi~createPaymentCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreatePaymentOut}
     */
    createPayment(key, input, callback) {
      let postBody = input;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createPayment");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling createPayment");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreatePaymentOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/payments', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listPayments operation.
     * @callback module:api/PaymentsApi~listPaymentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListPaymentsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List payments
     * @param {String} key Transaction key.
     * @param {Object} opts Optional parameters
     * @param {String} [limit] Max record count (no more than 100, defaults to 10).
     * @param {String} [offset] How many records need to be skipped, defaults to 0.
     * @param {module:api/PaymentsApi~listPaymentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListPaymentsOut}
     */
    listPayments(key, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling listPayments");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListPaymentsOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/payments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
