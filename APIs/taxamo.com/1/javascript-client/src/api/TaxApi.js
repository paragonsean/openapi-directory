/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalculateSimpleTaxOut from '../model/CalculateSimpleTaxOut';
import CalculateTaxIn from '../model/CalculateTaxIn';
import CalculateTaxLocationOut from '../model/CalculateTaxLocationOut';
import CalculateTaxOut from '../model/CalculateTaxOut';
import ValidateTaxNumberOut from '../model/ValidateTaxNumberOut';

/**
* Tax service.
* @module api/TaxApi
* @version 1
*/
export default class TaxApi {

    /**
    * Constructs a new TaxApi. 
    * @alias module:api/TaxApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the calculateSimpleTax operation.
     * @callback module:api/TaxApi~calculateSimpleTaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateSimpleTaxOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Simple tax
     * @param {String} currencyCode Currency code for transaction - e.g. EUR.
     * @param {Object} opts Optional parameters
     * @param {String} [productType] Product type, according to dictionary /dictionaries/product_types. 
     * @param {String} [invoiceAddressCity] Invoice address/postal_code
     * @param {String} [buyerCreditCardPrefix] First 6 digits of buyer's credit card prefix.
     * @param {String} [invoiceAddressRegion] Invoice address/region
     * @param {Number} [unitPrice] Unit price.
     * @param {Number} [quantity] Quantity Defaults to 1.
     * @param {String} [buyerTaxNumber]  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
     * @param {String} [forceCountryCode] Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
     * @param {String} [orderDate] Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
     * @param {Number} [amount] Amount. Required if total amount or both unit price and quantity are not provided.
     * @param {String} [billingCountryCode] Billing two letter ISO country code.
     * @param {String} [invoiceAddressPostalCode] Invoice address/postal_code
     * @param {Number} [totalAmount] Total amount. Required if amount or both unit price and quantity are not provided.
     * @param {Boolean} [taxDeducted] If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
     * @param {module:api/TaxApi~calculateSimpleTaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateSimpleTaxOut}
     */
    calculateSimpleTax(currencyCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'currencyCode' is set
      if (currencyCode === undefined || currencyCode === null) {
        throw new Error("Missing the required parameter 'currencyCode' when calling calculateSimpleTax");
      }

      let pathParams = {
      };
      let queryParams = {
        'product_type': opts['productType'],
        'invoice_address_city': opts['invoiceAddressCity'],
        'buyer_credit_card_prefix': opts['buyerCreditCardPrefix'],
        'currency_code': currencyCode,
        'invoice_address_region': opts['invoiceAddressRegion'],
        'unit_price': opts['unitPrice'],
        'quantity': opts['quantity'],
        'buyer_tax_number': opts['buyerTaxNumber'],
        'force_country_code': opts['forceCountryCode'],
        'order_date': opts['orderDate'],
        'amount': opts['amount'],
        'billing_country_code': opts['billingCountryCode'],
        'invoice_address_postal_code': opts['invoiceAddressPostalCode'],
        'total_amount': opts['totalAmount'],
        'tax_deducted': opts['taxDeducted']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalculateSimpleTaxOut;
      return this.apiClient.callApi(
        '/api/v1/tax/calculate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateTax operation.
     * @callback module:api/TaxApi~calculateTaxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateTaxOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate tax
     * @param {module:model/CalculateTaxIn} input Input
     * @param {module:api/TaxApi~calculateTaxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateTaxOut}
     */
    calculateTax(input, callback) {
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling calculateTax");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CalculateTaxOut;
      return this.apiClient.callApi(
        '/api/v1/tax/calculate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the calculateTaxLocation operation.
     * @callback module:api/TaxApi~calculateTaxLocationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CalculateTaxLocationOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate location
     * @param {Object} opts Optional parameters
     * @param {String} [billingCountryCode] Billing two letter ISO country code.
     * @param {String} [buyerCreditCardPrefix] First 6 digits of buyer's credit card prefix.
     * @param {module:api/TaxApi~calculateTaxLocationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CalculateTaxLocationOut}
     */
    calculateTaxLocation(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'billing_country_code': opts['billingCountryCode'],
        'buyer_credit_card_prefix': opts['buyerCreditCardPrefix']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CalculateTaxLocationOut;
      return this.apiClient.callApi(
        '/api/v1/tax/location/calculate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validateTaxNumber operation.
     * @callback module:api/TaxApi~validateTaxNumberCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidateTaxNumberOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate VAT number
     * @param {String} taxNumber Tax number
     * @param {Object} opts Optional parameters
     * @param {String} [countryCode] Two-letter ISO country code.
     * @param {module:api/TaxApi~validateTaxNumberCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidateTaxNumberOut}
     */
    validateTaxNumber(taxNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'taxNumber' is set
      if (taxNumber === undefined || taxNumber === null) {
        throw new Error("Missing the required parameter 'taxNumber' when calling validateTaxNumber");
      }

      let pathParams = {
        'tax_number': taxNumber
      };
      let queryParams = {
        'country_code': opts['countryCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ValidateTaxNumberOut;
      return this.apiClient.callApi(
        '/api/v1/tax/vat_numbers/{tax_number}/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
