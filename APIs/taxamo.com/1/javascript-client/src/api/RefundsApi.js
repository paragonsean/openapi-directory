/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateRefundIn from '../model/CreateRefundIn';
import CreateRefundOut from '../model/CreateRefundOut';
import ListRefundsOut from '../model/ListRefundsOut';

/**
* Refunds service.
* @module api/RefundsApi
* @version 1
*/
export default class RefundsApi {

    /**
    * Constructs a new RefundsApi. 
    * @alias module:api/RefundsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createRefund operation.
     * @callback module:api/RefundsApi~createRefundCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateRefundOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create a refund
     * @param {String} key Transaction key.
     * @param {module:model/CreateRefundIn} input Input
     * @param {module:api/RefundsApi~createRefundCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateRefundOut}
     */
    createRefund(key, input, callback) {
      let postBody = input;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling createRefund");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling createRefund");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateRefundOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/refunds', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listRefunds operation.
     * @callback module:api/RefundsApi~listRefundsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListRefundsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get transaction refunds
     * @param {String} key Transaction key.
     * @param {module:api/RefundsApi~listRefundsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListRefundsOut}
     */
    listRefunds(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling listRefunds");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListRefundsOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/refunds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
