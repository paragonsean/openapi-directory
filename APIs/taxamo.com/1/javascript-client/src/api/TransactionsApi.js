/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CancelTransactionOut from '../model/CancelTransactionOut';
import ConfirmTransactionIn from '../model/ConfirmTransactionIn';
import ConfirmTransactionOut from '../model/ConfirmTransactionOut';
import CreateTransactionIn from '../model/CreateTransactionIn';
import CreateTransactionOut from '../model/CreateTransactionOut';
import GetTransactionOut from '../model/GetTransactionOut';
import ListTransactionsOut from '../model/ListTransactionsOut';
import UnconfirmTransactionIn from '../model/UnconfirmTransactionIn';
import UnconfirmTransactionOut from '../model/UnconfirmTransactionOut';
import UpdateTransactionIn from '../model/UpdateTransactionIn';
import UpdateTransactionOut from '../model/UpdateTransactionOut';

/**
* Transactions service.
* @module api/TransactionsApi
* @version 1
*/
export default class TransactionsApi {

    /**
    * Constructs a new TransactionsApi. 
    * @alias module:api/TransactionsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the cancelTransaction operation.
     * @callback module:api/TransactionsApi~cancelTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CancelTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete transaction
     * @param {String} key Transaction key
     * @param {module:api/TransactionsApi~cancelTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CancelTransactionOut}
     */
    cancelTransaction(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling cancelTransaction");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CancelTransactionOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the confirmTransaction operation.
     * @callback module:api/TransactionsApi~confirmTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ConfirmTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Confirm transaction
     * @param {String} key Transaction key.
     * @param {module:model/ConfirmTransactionIn} input Input
     * @param {module:api/TransactionsApi~confirmTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ConfirmTransactionOut}
     */
    confirmTransaction(key, input, callback) {
      let postBody = input;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling confirmTransaction");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling confirmTransaction");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ConfirmTransactionOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/confirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTransaction operation.
     * @callback module:api/TransactionsApi~createTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CreateTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Store transaction
     * @param {module:model/CreateTransactionIn} input Input
     * @param {module:api/TransactionsApi~createTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CreateTransactionOut}
     */
    createTransaction(input, callback) {
      let postBody = input;
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling createTransaction");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CreateTransactionOut;
      return this.apiClient.callApi(
        '/api/v1/transactions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTransaction operation.
     * @callback module:api/TransactionsApi~getTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Retrieve transaction data.
     * @param {String} key Transaction key
     * @param {module:api/TransactionsApi~getTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetTransactionOut}
     */
    getTransaction(key, callback) {
      let postBody = null;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getTransaction");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetTransactionOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listTransactions operation.
     * @callback module:api/TransactionsApi~listTransactionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ListTransactionsOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Browse transactions
     * @param {Object} opts Optional parameters
     * @param {String} [filterText] Filtering expression
     * @param {Number} [offset] Offset
     * @param {Boolean} [hasNote] Return only transactions with a note field set.
     * @param {String} [keyOrCustomId] Taxamo provided transaction key or custom id
     * @param {String} [currencyCode] Three letter ISO currency code.
     * @param {String} [orderDateTo] Order date to in yyyy-MM-dd format.
     * @param {Boolean} [sortReverse] If true, results are sorted in descending order.
     * @param {Number} [limit] Limit (no more than 1000, defaults to 100).
     * @param {String} [invoiceNumber] Transaction invoice number.
     * @param {String} [taxCountryCodes] Comma separated list of two letter ISO tax country codes.
     * @param {String} [statuses] Comma separated list of of transaction statuses. 'N' - unconfirmed transaction, 'C' - confirmed transaction.
     * @param {String} [originalTransactionKey] Taxamo provided original transaction key
     * @param {String} [orderDateFrom] Order date from in yyyy-MM-dd format.
     * @param {String} [totalAmountGreaterThan] Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.
     * @param {String} [format] Output format - supports 'csv' value for this operation.
     * @param {String} [totalAmountLessThan] Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.
     * @param {String} [taxCountryCode] Two letter ISO tax country code.
     * @param {module:api/TransactionsApi~listTransactionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ListTransactionsOut}
     */
    listTransactions(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'filter_text': opts['filterText'],
        'offset': opts['offset'],
        'has_note': opts['hasNote'],
        'key_or_custom_id': opts['keyOrCustomId'],
        'currency_code': opts['currencyCode'],
        'order_date_to': opts['orderDateTo'],
        'sort_reverse': opts['sortReverse'],
        'limit': opts['limit'],
        'invoice_number': opts['invoiceNumber'],
        'tax_country_codes': opts['taxCountryCodes'],
        'statuses': opts['statuses'],
        'original_transaction_key': opts['originalTransactionKey'],
        'order_date_from': opts['orderDateFrom'],
        'total_amount_greater_than': opts['totalAmountGreaterThan'],
        'format': opts['format'],
        'total_amount_less_than': opts['totalAmountLessThan'],
        'tax_country_code': opts['taxCountryCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ListTransactionsOut;
      return this.apiClient.callApi(
        '/api/v1/transactions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the unconfirmTransaction operation.
     * @callback module:api/TransactionsApi~unconfirmTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UnconfirmTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Un-confirm the transaction
     * @param {String} key Transaction key.
     * @param {module:model/UnconfirmTransactionIn} input Input
     * @param {module:api/TransactionsApi~unconfirmTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UnconfirmTransactionOut}
     */
    unconfirmTransaction(key, input, callback) {
      let postBody = input;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling unconfirmTransaction");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling unconfirmTransaction");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UnconfirmTransactionOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}/unconfirm', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateTransaction operation.
     * @callback module:api/TransactionsApi~updateTransactionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateTransactionOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update transaction
     * @param {String} key Transaction key.
     * @param {module:model/UpdateTransactionIn} input Input
     * @param {module:api/TransactionsApi~updateTransactionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateTransactionOut}
     */
    updateTransaction(key, input, callback) {
      let postBody = input;
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling updateTransaction");
      }
      // verify the required parameter 'input' is set
      if (input === undefined || input === null) {
        throw new Error("Missing the required parameter 'input' when calling updateTransaction");
      }

      let pathParams = {
        'key': key
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = UpdateTransactionOut;
      return this.apiClient.callApi(
        '/api/v1/transactions/{key}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
