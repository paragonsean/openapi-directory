/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetDomesticSummaryReportOut from '../model/GetDomesticSummaryReportOut';
import GetEuViesReportOut from '../model/GetEuViesReportOut';

/**
* Reporting service.
* @module api/ReportingApi
* @version 1
*/
export default class ReportingApi {

    /**
    * Constructs a new ReportingApi. 
    * @alias module:api/ReportingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getDomesticSummaryReport operation.
     * @callback module:api/ReportingApi~getDomesticSummaryReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetDomesticSummaryReportOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate domestic summary
     * @param {String} countryCode ISO 2-letter country code which will be used for determining which country is domestic.
     * @param {String} startMonth Period start month in yyyy-MM format.
     * @param {String} endMonth Period end month in yyyy-MM format.
     * @param {Object} opts Optional parameters
     * @param {String} [format] Output format. 'xml' and 'csv' values are accepted. Default format - json
     * @param {String} [currencyCode] ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.
     * @param {String} [fxDateType] Which date should be used for FX.
     * @param {module:api/ReportingApi~getDomesticSummaryReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetDomesticSummaryReportOut}
     */
    getDomesticSummaryReport(countryCode, startMonth, endMonth, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling getDomesticSummaryReport");
      }
      // verify the required parameter 'startMonth' is set
      if (startMonth === undefined || startMonth === null) {
        throw new Error("Missing the required parameter 'startMonth' when calling getDomesticSummaryReport");
      }
      // verify the required parameter 'endMonth' is set
      if (endMonth === undefined || endMonth === null) {
        throw new Error("Missing the required parameter 'endMonth' when calling getDomesticSummaryReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'format': opts['format'],
        'country_code': countryCode,
        'currency_code': opts['currencyCode'],
        'start_month': startMonth,
        'end_month': endMonth,
        'fx_date_type': opts['fxDateType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetDomesticSummaryReportOut;
      return this.apiClient.callApi(
        '/api/v1/reports/domestic/summary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEuViesReport operation.
     * @callback module:api/ReportingApi~getEuViesReportCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetEuViesReportOut} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate EU VIES report
     * @param {String} endMonth Period end month in yyyy-MM format.
     * @param {String} startMonth Period start month in yyyy-MM format.
     * @param {String} euCountryCode ISO 2-letter country code which will be used for determining which country is domestic.
     * @param {Object} opts Optional parameters
     * @param {String} [periodLength] Length of report period. 'month', 'quarter' and 'year' values are accepted. Required only if Large Filer Format is requested.
     * @param {String} [lffSequenceNumber] Sequence number used to generate report in Large Filer Format. If not specified then '0000000001' will be used.
     * @param {String} [transformation] Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats.
     * @param {String} [currencyCode] ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.
     * @param {String} [taxId] MOSS-assigned tax ID - if not provided, merchant's national tax number will be used.
     * @param {String} [fxDateType] Which date should be used for FX.
     * @param {String} [format] Output format. 'xml', 'csv' and 'lff' (only for Ireland) values are accepted as well
     * @param {module:api/ReportingApi~getEuViesReportCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetEuViesReportOut}
     */
    getEuViesReport(endMonth, startMonth, euCountryCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'endMonth' is set
      if (endMonth === undefined || endMonth === null) {
        throw new Error("Missing the required parameter 'endMonth' when calling getEuViesReport");
      }
      // verify the required parameter 'startMonth' is set
      if (startMonth === undefined || startMonth === null) {
        throw new Error("Missing the required parameter 'startMonth' when calling getEuViesReport");
      }
      // verify the required parameter 'euCountryCode' is set
      if (euCountryCode === undefined || euCountryCode === null) {
        throw new Error("Missing the required parameter 'euCountryCode' when calling getEuViesReport");
      }

      let pathParams = {
      };
      let queryParams = {
        'period_length': opts['periodLength'],
        'lff_sequence_number': opts['lffSequenceNumber'],
        'transformation': opts['transformation'],
        'currency_code': opts['currencyCode'],
        'end_month': endMonth,
        'tax_id': opts['taxId'],
        'start_month': startMonth,
        'eu_country_code': euCountryCode,
        'fx_date_type': opts['fxDateType'],
        'format': opts['format']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GetEuViesReportOut;
      return this.apiClient.callApi(
        '/api/v1/reports/eu/vies', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
