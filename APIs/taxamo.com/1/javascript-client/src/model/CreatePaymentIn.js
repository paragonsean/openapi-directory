/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreatePaymentIn model module.
 * @module model/CreatePaymentIn
 * @version 1
 */
class CreatePaymentIn {
    /**
     * Constructs a new <code>CreatePaymentIn</code>.
     * @alias module:model/CreatePaymentIn
     * @param amount {Number} Amount that has been paid. Use negative value to register refunds.
     */
    constructor(amount) { 
        
        CreatePaymentIn.initialize(this, amount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, amount) { 
        obj['amount'] = amount;
    }

    /**
     * Constructs a <code>CreatePaymentIn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreatePaymentIn} obj Optional instance to populate.
     * @return {module:model/CreatePaymentIn} The populated <code>CreatePaymentIn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreatePaymentIn();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('payment_information')) {
                obj['payment_information'] = ApiClient.convertToType(data['payment_information'], 'String');
            }
            if (data.hasOwnProperty('payment_timestamp')) {
                obj['payment_timestamp'] = ApiClient.convertToType(data['payment_timestamp'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreatePaymentIn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreatePaymentIn</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreatePaymentIn.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['payment_information'] && !(typeof data['payment_information'] === 'string' || data['payment_information'] instanceof String)) {
            throw new Error("Expected the field `payment_information` to be a primitive type in the JSON string but got " + data['payment_information']);
        }
        // ensure the json data is a string
        if (data['payment_timestamp'] && !(typeof data['payment_timestamp'] === 'string' || data['payment_timestamp'] instanceof String)) {
            throw new Error("Expected the field `payment_timestamp` to be a primitive type in the JSON string but got " + data['payment_timestamp']);
        }

        return true;
    }


}

CreatePaymentIn.RequiredProperties = ["amount"];

/**
 * Amount that has been paid. Use negative value to register refunds.
 * @member {Number} amount
 */
CreatePaymentIn.prototype['amount'] = undefined;

/**
 * Additional payment information.
 * @member {String} payment_information
 */
CreatePaymentIn.prototype['payment_information'] = undefined;

/**
 * When the payment was received in yyyy-MM-dd'T'HH:mm:ss(.SSS)'Z' format (24 hour, UTC timezone). Defaults to current date and time.
 * @member {String} payment_timestamp
 */
CreatePaymentIn.prototype['payment_timestamp'] = undefined;






export default CreatePaymentIn;

