/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Report model module.
 * @module model/Report
 * @version 1
 */
class Report {
    /**
     * Constructs a new <code>Report</code>.
     * @alias module:model/Report
     */
    constructor() { 
        
        Report.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Report</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Report} obj Optional instance to populate.
     * @return {module:model/Report} The populated <code>Report</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Report();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('country_code')) {
                obj['country_code'] = ApiClient.convertToType(data['country_code'], 'String');
            }
            if (data.hasOwnProperty('country_name')) {
                obj['country_name'] = ApiClient.convertToType(data['country_name'], 'String');
            }
            if (data.hasOwnProperty('country_subdivision')) {
                obj['country_subdivision'] = ApiClient.convertToType(data['country_subdivision'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('skip_moss')) {
                obj['skip_moss'] = ApiClient.convertToType(data['skip_moss'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_amount')) {
                obj['tax_amount'] = ApiClient.convertToType(data['tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('tax_rate')) {
                obj['tax_rate'] = ApiClient.convertToType(data['tax_rate'], 'Number');
            }
            if (data.hasOwnProperty('tax_region')) {
                obj['tax_region'] = ApiClient.convertToType(data['tax_region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Report</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Report</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['country_code'] && !(typeof data['country_code'] === 'string' || data['country_code'] instanceof String)) {
            throw new Error("Expected the field `country_code` to be a primitive type in the JSON string but got " + data['country_code']);
        }
        // ensure the json data is a string
        if (data['country_name'] && !(typeof data['country_name'] === 'string' || data['country_name'] instanceof String)) {
            throw new Error("Expected the field `country_name` to be a primitive type in the JSON string but got " + data['country_name']);
        }
        // ensure the json data is a string
        if (data['country_subdivision'] && !(typeof data['country_subdivision'] === 'string' || data['country_subdivision'] instanceof String)) {
            throw new Error("Expected the field `country_subdivision` to be a primitive type in the JSON string but got " + data['country_subdivision']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['tax_region'] && !(typeof data['tax_region'] === 'string' || data['tax_region'] instanceof String)) {
            throw new Error("Expected the field `tax_region` to be a primitive type in the JSON string but got " + data['tax_region']);
        }

        return true;
    }


}



/**
 * Amount w/o tax
 * @member {Number} amount
 */
Report.prototype['amount'] = undefined;

/**
 * Two letter ISO country code.
 * @member {String} country_code
 */
Report.prototype['country_code'] = undefined;

/**
 * Country name
 * @member {String} country_name
 */
Report.prototype['country_name'] = undefined;

/**
 * Country subdivision (e.g. state or provice or county)
 * @member {String} country_subdivision
 */
Report.prototype['country_subdivision'] = undefined;

/**
 * Three-letter ISO currency code.
 * @member {String} currency_code
 */
Report.prototype['currency_code'] = undefined;

/**
 * If true, this line should not be entered into MOSS and is provided for informative purposes only. For example because the country is the same as MOSS registration country and merchant country.
 * @member {Boolean} skip_moss
 */
Report.prototype['skip_moss'] = undefined;

/**
 * Tax amount
 * @member {Number} tax_amount
 */
Report.prototype['tax_amount'] = undefined;

/**
 * Tax rate
 * @member {Number} tax_rate
 */
Report.prototype['tax_rate'] = undefined;

/**
 * Tax region key
 * @member {String} tax_region
 */
Report.prototype['tax_region'] = undefined;






export default Report;

