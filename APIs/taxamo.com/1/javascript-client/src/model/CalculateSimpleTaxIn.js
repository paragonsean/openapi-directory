/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CalculateSimpleTaxIn model module.
 * @module model/CalculateSimpleTaxIn
 * @version 1
 */
class CalculateSimpleTaxIn {
    /**
     * Constructs a new <code>CalculateSimpleTaxIn</code>.
     * @alias module:model/CalculateSimpleTaxIn
     * @param currencyCode {String} Currency code for transaction - e.g. EUR.
     */
    constructor(currencyCode) { 
        
        CalculateSimpleTaxIn.initialize(this, currencyCode);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currencyCode) { 
        obj['currency_code'] = currencyCode;
    }

    /**
     * Constructs a <code>CalculateSimpleTaxIn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CalculateSimpleTaxIn} obj Optional instance to populate.
     * @return {module:model/CalculateSimpleTaxIn} The populated <code>CalculateSimpleTaxIn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CalculateSimpleTaxIn();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('billing_country_code')) {
                obj['billing_country_code'] = ApiClient.convertToType(data['billing_country_code'], 'String');
            }
            if (data.hasOwnProperty('buyer_credit_card_prefix')) {
                obj['buyer_credit_card_prefix'] = ApiClient.convertToType(data['buyer_credit_card_prefix'], 'String');
            }
            if (data.hasOwnProperty('buyer_tax_number')) {
                obj['buyer_tax_number'] = ApiClient.convertToType(data['buyer_tax_number'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('force_country_code')) {
                obj['force_country_code'] = ApiClient.convertToType(data['force_country_code'], 'String');
            }
            if (data.hasOwnProperty('invoice_address_city')) {
                obj['invoice_address_city'] = ApiClient.convertToType(data['invoice_address_city'], 'String');
            }
            if (data.hasOwnProperty('invoice_address_postal_code')) {
                obj['invoice_address_postal_code'] = ApiClient.convertToType(data['invoice_address_postal_code'], 'String');
            }
            if (data.hasOwnProperty('invoice_address_region')) {
                obj['invoice_address_region'] = ApiClient.convertToType(data['invoice_address_region'], 'String');
            }
            if (data.hasOwnProperty('order_date')) {
                obj['order_date'] = ApiClient.convertToType(data['order_date'], 'String');
            }
            if (data.hasOwnProperty('product_type')) {
                obj['product_type'] = ApiClient.convertToType(data['product_type'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('tax_deducted')) {
                obj['tax_deducted'] = ApiClient.convertToType(data['tax_deducted'], 'Boolean');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('unit_price')) {
                obj['unit_price'] = ApiClient.convertToType(data['unit_price'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CalculateSimpleTaxIn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CalculateSimpleTaxIn</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CalculateSimpleTaxIn.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['billing_country_code'] && !(typeof data['billing_country_code'] === 'string' || data['billing_country_code'] instanceof String)) {
            throw new Error("Expected the field `billing_country_code` to be a primitive type in the JSON string but got " + data['billing_country_code']);
        }
        // ensure the json data is a string
        if (data['buyer_credit_card_prefix'] && !(typeof data['buyer_credit_card_prefix'] === 'string' || data['buyer_credit_card_prefix'] instanceof String)) {
            throw new Error("Expected the field `buyer_credit_card_prefix` to be a primitive type in the JSON string but got " + data['buyer_credit_card_prefix']);
        }
        // ensure the json data is a string
        if (data['buyer_tax_number'] && !(typeof data['buyer_tax_number'] === 'string' || data['buyer_tax_number'] instanceof String)) {
            throw new Error("Expected the field `buyer_tax_number` to be a primitive type in the JSON string but got " + data['buyer_tax_number']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['force_country_code'] && !(typeof data['force_country_code'] === 'string' || data['force_country_code'] instanceof String)) {
            throw new Error("Expected the field `force_country_code` to be a primitive type in the JSON string but got " + data['force_country_code']);
        }
        // ensure the json data is a string
        if (data['invoice_address_city'] && !(typeof data['invoice_address_city'] === 'string' || data['invoice_address_city'] instanceof String)) {
            throw new Error("Expected the field `invoice_address_city` to be a primitive type in the JSON string but got " + data['invoice_address_city']);
        }
        // ensure the json data is a string
        if (data['invoice_address_postal_code'] && !(typeof data['invoice_address_postal_code'] === 'string' || data['invoice_address_postal_code'] instanceof String)) {
            throw new Error("Expected the field `invoice_address_postal_code` to be a primitive type in the JSON string but got " + data['invoice_address_postal_code']);
        }
        // ensure the json data is a string
        if (data['invoice_address_region'] && !(typeof data['invoice_address_region'] === 'string' || data['invoice_address_region'] instanceof String)) {
            throw new Error("Expected the field `invoice_address_region` to be a primitive type in the JSON string but got " + data['invoice_address_region']);
        }
        // ensure the json data is a string
        if (data['order_date'] && !(typeof data['order_date'] === 'string' || data['order_date'] instanceof String)) {
            throw new Error("Expected the field `order_date` to be a primitive type in the JSON string but got " + data['order_date']);
        }
        // ensure the json data is a string
        if (data['product_type'] && !(typeof data['product_type'] === 'string' || data['product_type'] instanceof String)) {
            throw new Error("Expected the field `product_type` to be a primitive type in the JSON string but got " + data['product_type']);
        }

        return true;
    }


}

CalculateSimpleTaxIn.RequiredProperties = ["currency_code"];

/**
 * Amount. Required if total amount or both unit price and quantity are not provided.
 * @member {Number} amount
 */
CalculateSimpleTaxIn.prototype['amount'] = undefined;

/**
 * Billing two letter ISO country code.
 * @member {String} billing_country_code
 */
CalculateSimpleTaxIn.prototype['billing_country_code'] = undefined;

/**
 * First 6 digits of buyer's credit card prefix.
 * @member {String} buyer_credit_card_prefix
 */
CalculateSimpleTaxIn.prototype['buyer_credit_card_prefix'] = undefined;

/**
 *  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
 * @member {String} buyer_tax_number
 */
CalculateSimpleTaxIn.prototype['buyer_tax_number'] = undefined;

/**
 * Currency code for transaction - e.g. EUR.
 * @member {String} currency_code
 */
CalculateSimpleTaxIn.prototype['currency_code'] = undefined;

/**
 * Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
 * @member {String} force_country_code
 */
CalculateSimpleTaxIn.prototype['force_country_code'] = undefined;

/**
 * Invoice address/postal_code
 * @member {String} invoice_address_city
 */
CalculateSimpleTaxIn.prototype['invoice_address_city'] = undefined;

/**
 * Invoice address/postal_code
 * @member {String} invoice_address_postal_code
 */
CalculateSimpleTaxIn.prototype['invoice_address_postal_code'] = undefined;

/**
 * Invoice address/region
 * @member {String} invoice_address_region
 */
CalculateSimpleTaxIn.prototype['invoice_address_region'] = undefined;

/**
 * Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
 * @member {String} order_date
 */
CalculateSimpleTaxIn.prototype['order_date'] = undefined;

/**
 * Product type, according to dictionary /dictionaries/product_types. 
 * @member {String} product_type
 */
CalculateSimpleTaxIn.prototype['product_type'] = undefined;

/**
 * Quantity Defaults to 1.
 * @member {Number} quantity
 */
CalculateSimpleTaxIn.prototype['quantity'] = undefined;

/**
 * If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
 * @member {Boolean} tax_deducted
 */
CalculateSimpleTaxIn.prototype['tax_deducted'] = undefined;

/**
 * Total amount. Required if amount or both unit price and quantity are not provided.
 * @member {Number} total_amount
 */
CalculateSimpleTaxIn.prototype['total_amount'] = undefined;

/**
 * Unit price.
 * @member {Number} unit_price
 */
CalculateSimpleTaxIn.prototype['unit_price'] = undefined;






export default CalculateSimpleTaxIn;

