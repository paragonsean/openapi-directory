/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductTypeSchema from './ProductTypeSchema';

/**
 * The GetProductTypesDictOut model module.
 * @module model/GetProductTypesDictOut
 * @version 1
 */
class GetProductTypesDictOut {
    /**
     * Constructs a new <code>GetProductTypesDictOut</code>.
     * @alias module:model/GetProductTypesDictOut
     */
    constructor() { 
        
        GetProductTypesDictOut.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetProductTypesDictOut</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetProductTypesDictOut} obj Optional instance to populate.
     * @return {module:model/GetProductTypesDictOut} The populated <code>GetProductTypesDictOut</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetProductTypesDictOut();

            if (data.hasOwnProperty('dictionary')) {
                obj['dictionary'] = ApiClient.convertToType(data['dictionary'], [ProductTypeSchema]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetProductTypesDictOut</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetProductTypesDictOut</code>.
     */
    static validateJSON(data) {
        if (data['dictionary']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['dictionary'])) {
                throw new Error("Expected the field `dictionary` to be an array in the JSON data but got " + data['dictionary']);
            }
            // validate the optional field `dictionary` (array)
            for (const item of data['dictionary']) {
                ProductTypeSchema.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * Product type dictionary.
 * @member {Array.<module:model/ProductTypeSchema>} dictionary
 */
GetProductTypesDictOut.prototype['dictionary'] = undefined;






export default GetProductTypesDictOut;

