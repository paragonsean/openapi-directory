/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UsTaxExemptState from './UsTaxExemptState';
import UsTaxId from './UsTaxId';

/**
 * The UsTaxExemptionCertificateDetailsSchema model module.
 * @module model/UsTaxExemptionCertificateDetailsSchema
 * @version 1
 */
class UsTaxExemptionCertificateDetailsSchema {
    /**
     * Constructs a new <code>UsTaxExemptionCertificateDetailsSchema</code>.
     * @alias module:model/UsTaxExemptionCertificateDetailsSchema
     * @param exemptStates {Array.<module:model/UsTaxExemptState>} List of states where the certificate is valid.
     * @param purchaserAddress1 {String} Purchaser's first address line.
     * @param purchaserBusinessType {String} Purchaser business type.
     * @param purchaserCity {String} Purchaser's city.
     * @param purchaserExemptionReason {String} The reason for exemption reason.
     * @param purchaserExemptionReasonValue {String} The value of exemption reason.
     * @param purchaserFirstName {String} Purchaser's first name.
     * @param purchaserLastName {String} Purchaser's last name.
     * @param purchaserState {String} Purchaser's state.
     * @param purchaserTaxId {module:model/UsTaxId} 
     * @param purchaserZip {String} Purchaser's zip code.
     */
    constructor(exemptStates, purchaserAddress1, purchaserBusinessType, purchaserCity, purchaserExemptionReason, purchaserExemptionReasonValue, purchaserFirstName, purchaserLastName, purchaserState, purchaserTaxId, purchaserZip) { 
        
        UsTaxExemptionCertificateDetailsSchema.initialize(this, exemptStates, purchaserAddress1, purchaserBusinessType, purchaserCity, purchaserExemptionReason, purchaserExemptionReasonValue, purchaserFirstName, purchaserLastName, purchaserState, purchaserTaxId, purchaserZip);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, exemptStates, purchaserAddress1, purchaserBusinessType, purchaserCity, purchaserExemptionReason, purchaserExemptionReasonValue, purchaserFirstName, purchaserLastName, purchaserState, purchaserTaxId, purchaserZip) { 
        obj['exempt_states'] = exemptStates;
        obj['purchaser_address1'] = purchaserAddress1;
        obj['purchaser_business_type'] = purchaserBusinessType;
        obj['purchaser_city'] = purchaserCity;
        obj['purchaser_exemption_reason'] = purchaserExemptionReason;
        obj['purchaser_exemption_reason_value'] = purchaserExemptionReasonValue;
        obj['purchaser_first_name'] = purchaserFirstName;
        obj['purchaser_last_name'] = purchaserLastName;
        obj['purchaser_state'] = purchaserState;
        obj['purchaser_tax_id'] = purchaserTaxId;
        obj['purchaser_zip'] = purchaserZip;
    }

    /**
     * Constructs a <code>UsTaxExemptionCertificateDetailsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsTaxExemptionCertificateDetailsSchema} obj Optional instance to populate.
     * @return {module:model/UsTaxExemptionCertificateDetailsSchema} The populated <code>UsTaxExemptionCertificateDetailsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsTaxExemptionCertificateDetailsSchema();

            if (data.hasOwnProperty('exempt_states')) {
                obj['exempt_states'] = ApiClient.convertToType(data['exempt_states'], [UsTaxExemptState]);
            }
            if (data.hasOwnProperty('purchaser_address1')) {
                obj['purchaser_address1'] = ApiClient.convertToType(data['purchaser_address1'], 'String');
            }
            if (data.hasOwnProperty('purchaser_address2')) {
                obj['purchaser_address2'] = ApiClient.convertToType(data['purchaser_address2'], 'String');
            }
            if (data.hasOwnProperty('purchaser_business_type')) {
                obj['purchaser_business_type'] = ApiClient.convertToType(data['purchaser_business_type'], 'String');
            }
            if (data.hasOwnProperty('purchaser_business_type_other_value')) {
                obj['purchaser_business_type_other_value'] = ApiClient.convertToType(data['purchaser_business_type_other_value'], 'String');
            }
            if (data.hasOwnProperty('purchaser_city')) {
                obj['purchaser_city'] = ApiClient.convertToType(data['purchaser_city'], 'String');
            }
            if (data.hasOwnProperty('purchaser_exemption_reason')) {
                obj['purchaser_exemption_reason'] = ApiClient.convertToType(data['purchaser_exemption_reason'], 'String');
            }
            if (data.hasOwnProperty('purchaser_exemption_reason_value')) {
                obj['purchaser_exemption_reason_value'] = ApiClient.convertToType(data['purchaser_exemption_reason_value'], 'String');
            }
            if (data.hasOwnProperty('purchaser_first_name')) {
                obj['purchaser_first_name'] = ApiClient.convertToType(data['purchaser_first_name'], 'String');
            }
            if (data.hasOwnProperty('purchaser_last_name')) {
                obj['purchaser_last_name'] = ApiClient.convertToType(data['purchaser_last_name'], 'String');
            }
            if (data.hasOwnProperty('purchaser_state')) {
                obj['purchaser_state'] = ApiClient.convertToType(data['purchaser_state'], 'String');
            }
            if (data.hasOwnProperty('purchaser_tax_id')) {
                obj['purchaser_tax_id'] = UsTaxId.constructFromObject(data['purchaser_tax_id']);
            }
            if (data.hasOwnProperty('purchaser_title')) {
                obj['purchaser_title'] = ApiClient.convertToType(data['purchaser_title'], 'String');
            }
            if (data.hasOwnProperty('purchaser_zip')) {
                obj['purchaser_zip'] = ApiClient.convertToType(data['purchaser_zip'], 'String');
            }
            if (data.hasOwnProperty('single_purchase')) {
                obj['single_purchase'] = ApiClient.convertToType(data['single_purchase'], 'Boolean');
            }
            if (data.hasOwnProperty('single_purchase_order_identifier')) {
                obj['single_purchase_order_identifier'] = ApiClient.convertToType(data['single_purchase_order_identifier'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsTaxExemptionCertificateDetailsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsTaxExemptionCertificateDetailsSchema</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UsTaxExemptionCertificateDetailsSchema.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['exempt_states']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['exempt_states'])) {
                throw new Error("Expected the field `exempt_states` to be an array in the JSON data but got " + data['exempt_states']);
            }
            // validate the optional field `exempt_states` (array)
            for (const item of data['exempt_states']) {
                UsTaxExemptState.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['purchaser_address1'] && !(typeof data['purchaser_address1'] === 'string' || data['purchaser_address1'] instanceof String)) {
            throw new Error("Expected the field `purchaser_address1` to be a primitive type in the JSON string but got " + data['purchaser_address1']);
        }
        // ensure the json data is a string
        if (data['purchaser_address2'] && !(typeof data['purchaser_address2'] === 'string' || data['purchaser_address2'] instanceof String)) {
            throw new Error("Expected the field `purchaser_address2` to be a primitive type in the JSON string but got " + data['purchaser_address2']);
        }
        // ensure the json data is a string
        if (data['purchaser_business_type'] && !(typeof data['purchaser_business_type'] === 'string' || data['purchaser_business_type'] instanceof String)) {
            throw new Error("Expected the field `purchaser_business_type` to be a primitive type in the JSON string but got " + data['purchaser_business_type']);
        }
        // ensure the json data is a string
        if (data['purchaser_business_type_other_value'] && !(typeof data['purchaser_business_type_other_value'] === 'string' || data['purchaser_business_type_other_value'] instanceof String)) {
            throw new Error("Expected the field `purchaser_business_type_other_value` to be a primitive type in the JSON string but got " + data['purchaser_business_type_other_value']);
        }
        // ensure the json data is a string
        if (data['purchaser_city'] && !(typeof data['purchaser_city'] === 'string' || data['purchaser_city'] instanceof String)) {
            throw new Error("Expected the field `purchaser_city` to be a primitive type in the JSON string but got " + data['purchaser_city']);
        }
        // ensure the json data is a string
        if (data['purchaser_exemption_reason'] && !(typeof data['purchaser_exemption_reason'] === 'string' || data['purchaser_exemption_reason'] instanceof String)) {
            throw new Error("Expected the field `purchaser_exemption_reason` to be a primitive type in the JSON string but got " + data['purchaser_exemption_reason']);
        }
        // ensure the json data is a string
        if (data['purchaser_exemption_reason_value'] && !(typeof data['purchaser_exemption_reason_value'] === 'string' || data['purchaser_exemption_reason_value'] instanceof String)) {
            throw new Error("Expected the field `purchaser_exemption_reason_value` to be a primitive type in the JSON string but got " + data['purchaser_exemption_reason_value']);
        }
        // ensure the json data is a string
        if (data['purchaser_first_name'] && !(typeof data['purchaser_first_name'] === 'string' || data['purchaser_first_name'] instanceof String)) {
            throw new Error("Expected the field `purchaser_first_name` to be a primitive type in the JSON string but got " + data['purchaser_first_name']);
        }
        // ensure the json data is a string
        if (data['purchaser_last_name'] && !(typeof data['purchaser_last_name'] === 'string' || data['purchaser_last_name'] instanceof String)) {
            throw new Error("Expected the field `purchaser_last_name` to be a primitive type in the JSON string but got " + data['purchaser_last_name']);
        }
        // ensure the json data is a string
        if (data['purchaser_state'] && !(typeof data['purchaser_state'] === 'string' || data['purchaser_state'] instanceof String)) {
            throw new Error("Expected the field `purchaser_state` to be a primitive type in the JSON string but got " + data['purchaser_state']);
        }
        // validate the optional field `purchaser_tax_id`
        if (data['purchaser_tax_id']) { // data not null
          UsTaxId.validateJSON(data['purchaser_tax_id']);
        }
        // ensure the json data is a string
        if (data['purchaser_title'] && !(typeof data['purchaser_title'] === 'string' || data['purchaser_title'] instanceof String)) {
            throw new Error("Expected the field `purchaser_title` to be a primitive type in the JSON string but got " + data['purchaser_title']);
        }
        // ensure the json data is a string
        if (data['purchaser_zip'] && !(typeof data['purchaser_zip'] === 'string' || data['purchaser_zip'] instanceof String)) {
            throw new Error("Expected the field `purchaser_zip` to be a primitive type in the JSON string but got " + data['purchaser_zip']);
        }
        // ensure the json data is a string
        if (data['single_purchase_order_identifier'] && !(typeof data['single_purchase_order_identifier'] === 'string' || data['single_purchase_order_identifier'] instanceof String)) {
            throw new Error("Expected the field `single_purchase_order_identifier` to be a primitive type in the JSON string but got " + data['single_purchase_order_identifier']);
        }

        return true;
    }


}

UsTaxExemptionCertificateDetailsSchema.RequiredProperties = ["exempt_states", "purchaser_address1", "purchaser_business_type", "purchaser_city", "purchaser_exemption_reason", "purchaser_exemption_reason_value", "purchaser_first_name", "purchaser_last_name", "purchaser_state", "purchaser_tax_id", "purchaser_zip"];

/**
 * List of states where the certificate is valid.
 * @member {Array.<module:model/UsTaxExemptState>} exempt_states
 */
UsTaxExemptionCertificateDetailsSchema.prototype['exempt_states'] = undefined;

/**
 * Purchaser's first address line.
 * @member {String} purchaser_address1
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_address1'] = undefined;

/**
 * Purchaser's second address line.
 * @member {String} purchaser_address2
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_address2'] = undefined;

/**
 * Purchaser business type.
 * @member {String} purchaser_business_type
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_business_type'] = undefined;

/**
 * If business type is other, a short description must be provided.
 * @member {String} purchaser_business_type_other_value
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_business_type_other_value'] = undefined;

/**
 * Purchaser's city.
 * @member {String} purchaser_city
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_city'] = undefined;

/**
 * The reason for exemption reason.
 * @member {String} purchaser_exemption_reason
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_exemption_reason'] = undefined;

/**
 * The value of exemption reason.
 * @member {String} purchaser_exemption_reason_value
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_exemption_reason_value'] = undefined;

/**
 * Purchaser's first name.
 * @member {String} purchaser_first_name
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_first_name'] = undefined;

/**
 * Purchaser's last name.
 * @member {String} purchaser_last_name
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_last_name'] = undefined;

/**
 * Purchaser's state.
 * @member {String} purchaser_state
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_state'] = undefined;

/**
 * @member {module:model/UsTaxId} purchaser_tax_id
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_tax_id'] = undefined;

/**
 * Purchaser's title.
 * @member {String} purchaser_title
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_title'] = undefined;

/**
 * Purchaser's zip code.
 * @member {String} purchaser_zip
 */
UsTaxExemptionCertificateDetailsSchema.prototype['purchaser_zip'] = undefined;

/**
 * Set to true if this certificate is valid for single purchase only.
 * @member {Boolean} single_purchase
 */
UsTaxExemptionCertificateDetailsSchema.prototype['single_purchase'] = undefined;

/**
 * Purchase/order identifier for single purchase.
 * @member {String} single_purchase_order_identifier
 */
UsTaxExemptionCertificateDetailsSchema.prototype['single_purchase_order_identifier'] = undefined;






export default UsTaxExemptionCertificateDetailsSchema;

