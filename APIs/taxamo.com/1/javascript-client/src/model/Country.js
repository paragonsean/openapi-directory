/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Country model module.
 * @module model/Country
 * @version 1
 */
class Country {
    /**
     * Constructs a new <code>Country</code>.
     * @alias module:model/Country
     */
    constructor() { 
        
        Country.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Country</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Country} obj Optional instance to populate.
     * @return {module:model/Country} The populated <code>Country</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Country();

            if (data.hasOwnProperty('callingCode')) {
                obj['callingCode'] = ApiClient.convertToType(data['callingCode'], ['String']);
            }
            if (data.hasOwnProperty('cca2')) {
                obj['cca2'] = ApiClient.convertToType(data['cca2'], 'String');
            }
            if (data.hasOwnProperty('cca3')) {
                obj['cca3'] = ApiClient.convertToType(data['cca3'], 'String');
            }
            if (data.hasOwnProperty('ccn3')) {
                obj['ccn3'] = ApiClient.convertToType(data['ccn3'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('code_long')) {
                obj['code_long'] = ApiClient.convertToType(data['code_long'], 'String');
            }
            if (data.hasOwnProperty('codenum')) {
                obj['codenum'] = ApiClient.convertToType(data['codenum'], 'String');
            }
            if (data.hasOwnProperty('currency')) {
                obj['currency'] = ApiClient.convertToType(data['currency'], ['String']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('tax_number_country_code')) {
                obj['tax_number_country_code'] = ApiClient.convertToType(data['tax_number_country_code'], 'String');
            }
            if (data.hasOwnProperty('tax_region')) {
                obj['tax_region'] = ApiClient.convertToType(data['tax_region'], 'String');
            }
            if (data.hasOwnProperty('tax_supported')) {
                obj['tax_supported'] = ApiClient.convertToType(data['tax_supported'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Country</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Country</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['callingCode'])) {
            throw new Error("Expected the field `callingCode` to be an array in the JSON data but got " + data['callingCode']);
        }
        // ensure the json data is a string
        if (data['cca2'] && !(typeof data['cca2'] === 'string' || data['cca2'] instanceof String)) {
            throw new Error("Expected the field `cca2` to be a primitive type in the JSON string but got " + data['cca2']);
        }
        // ensure the json data is a string
        if (data['cca3'] && !(typeof data['cca3'] === 'string' || data['cca3'] instanceof String)) {
            throw new Error("Expected the field `cca3` to be a primitive type in the JSON string but got " + data['cca3']);
        }
        // ensure the json data is a string
        if (data['ccn3'] && !(typeof data['ccn3'] === 'string' || data['ccn3'] instanceof String)) {
            throw new Error("Expected the field `ccn3` to be a primitive type in the JSON string but got " + data['ccn3']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['code_long'] && !(typeof data['code_long'] === 'string' || data['code_long'] instanceof String)) {
            throw new Error("Expected the field `code_long` to be a primitive type in the JSON string but got " + data['code_long']);
        }
        // ensure the json data is a string
        if (data['codenum'] && !(typeof data['codenum'] === 'string' || data['codenum'] instanceof String)) {
            throw new Error("Expected the field `codenum` to be a primitive type in the JSON string but got " + data['codenum']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['currency'])) {
            throw new Error("Expected the field `currency` to be an array in the JSON data but got " + data['currency']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['tax_number_country_code'] && !(typeof data['tax_number_country_code'] === 'string' || data['tax_number_country_code'] instanceof String)) {
            throw new Error("Expected the field `tax_number_country_code` to be a primitive type in the JSON string but got " + data['tax_number_country_code']);
        }
        // ensure the json data is a string
        if (data['tax_region'] && !(typeof data['tax_region'] === 'string' || data['tax_region'] instanceof String)) {
            throw new Error("Expected the field `tax_region` to be a primitive type in the JSON string but got " + data['tax_region']);
        }

        return true;
    }


}



/**
 * List of phone number calling codes.
 * @member {Array.<String>} callingCode
 */
Country.prototype['callingCode'] = undefined;

/**
 * Two letter ISO country code.
 * @member {String} cca2
 */
Country.prototype['cca2'] = undefined;

/**
 * Three letter ISO country code.
 * @member {String} cca3
 */
Country.prototype['cca3'] = undefined;

/**
 * Country ISO 3-digit code.
 * @member {String} ccn3
 */
Country.prototype['ccn3'] = undefined;

/**
 * Two letter ISO country code.
 * @member {String} code
 */
Country.prototype['code'] = undefined;

/**
 * Three letter ISO country code.
 * @member {String} code_long
 */
Country.prototype['code_long'] = undefined;

/**
 * Country ISO 3-digit code.
 * @member {String} codenum
 */
Country.prototype['codenum'] = undefined;

/**
 * List of currencies.
 * @member {Array.<String>} currency
 */
Country.prototype['currency'] = undefined;

/**
 * Country name.
 * @member {String} name
 */
Country.prototype['name'] = undefined;

/**
 * VAT number country code. Important for Greece.
 * @member {String} tax_number_country_code
 */
Country.prototype['tax_number_country_code'] = undefined;

/**
 * Tax region code - e.g. EU, US, NO, JP...
 * @member {String} tax_region
 */
Country.prototype['tax_region'] = undefined;

/**
 * True if tax calculation supported for this country.
 * @member {Boolean} tax_supported
 */
Country.prototype['tax_supported'] = undefined;






export default Country;

