/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The SettlementDailyStatsSchema model module.
 * @module model/SettlementDailyStatsSchema
 * @version 1
 */
class SettlementDailyStatsSchema {
    /**
     * Constructs a new <code>SettlementDailyStatsSchema</code>.
     * @alias module:model/SettlementDailyStatsSchema
     */
    constructor() { 
        
        SettlementDailyStatsSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>SettlementDailyStatsSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SettlementDailyStatsSchema} obj Optional instance to populate.
     * @return {module:model/SettlementDailyStatsSchema} The populated <code>SettlementDailyStatsSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SettlementDailyStatsSchema();

            if (data.hasOwnProperty('b2b')) {
                obj['b2b'] = ApiClient.convertToType(data['b2b'], 'Number');
            }
            if (data.hasOwnProperty('b2c')) {
                obj['b2c'] = ApiClient.convertToType(data['b2c'], 'Number');
            }
            if (data.hasOwnProperty('count')) {
                obj['count'] = ApiClient.convertToType(data['count'], 'Number');
            }
            if (data.hasOwnProperty('day')) {
                obj['day'] = ApiClient.convertToType(data['day'], 'String');
            }
            if (data.hasOwnProperty('day_raw')) {
                obj['day_raw'] = ApiClient.convertToType(data['day_raw'], 'String');
            }
            if (data.hasOwnProperty('eu_b2b')) {
                obj['eu_b2b'] = ApiClient.convertToType(data['eu_b2b'], 'Number');
            }
            if (data.hasOwnProperty('eu_taxed')) {
                obj['eu_taxed'] = ApiClient.convertToType(data['eu_taxed'], 'Number');
            }
            if (data.hasOwnProperty('eu_total')) {
                obj['eu_total'] = ApiClient.convertToType(data['eu_total'], 'Number');
            }
            if (data.hasOwnProperty('untaxed')) {
                obj['untaxed'] = ApiClient.convertToType(data['untaxed'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SettlementDailyStatsSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SettlementDailyStatsSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['day'] && !(typeof data['day'] === 'string' || data['day'] instanceof String)) {
            throw new Error("Expected the field `day` to be a primitive type in the JSON string but got " + data['day']);
        }
        // ensure the json data is a string
        if (data['day_raw'] && !(typeof data['day_raw'] === 'string' || data['day_raw'] instanceof String)) {
            throw new Error("Expected the field `day_raw` to be a primitive type in the JSON string but got " + data['day_raw']);
        }

        return true;
    }


}



/**
 * B2B transaction count.
 * @member {Number} b2b
 */
SettlementDailyStatsSchema.prototype['b2b'] = undefined;

/**
 * B2C transaction count.
 * @member {Number} b2c
 */
SettlementDailyStatsSchema.prototype['b2c'] = undefined;

/**
 * Total transaction count.
 * @member {Number} count
 */
SettlementDailyStatsSchema.prototype['count'] = undefined;

/**
 * Date for stats in yyyy-MM-dd format.
 * @member {String} day
 */
SettlementDailyStatsSchema.prototype['day'] = undefined;

/**
 * Date for stats in yyyy-MM-dd'T'hh:mm:ss'Z' format.
 * @member {String} day_raw
 */
SettlementDailyStatsSchema.prototype['day_raw'] = undefined;

/**
 * Total EU B2B transaction count.
 * @member {Number} eu_b2b
 */
SettlementDailyStatsSchema.prototype['eu_b2b'] = undefined;

/**
 * Total EU Taxed transaction count.
 * @member {Number} eu_taxed
 */
SettlementDailyStatsSchema.prototype['eu_taxed'] = undefined;

/**
 * Total EU transaction count.
 * @member {Number} eu_total
 */
SettlementDailyStatsSchema.prototype['eu_total'] = undefined;

/**
 * Untaxed transaction count.
 * @member {Number} untaxed
 */
SettlementDailyStatsSchema.prototype['untaxed'] = undefined;






export default SettlementDailyStatsSchema;

