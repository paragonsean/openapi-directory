/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateRefundIn model module.
 * @module model/CreateRefundIn
 * @version 1
 */
class CreateRefundIn {
    /**
     * Constructs a new <code>CreateRefundIn</code>.
     * @alias module:model/CreateRefundIn
     */
    constructor() { 
        
        CreateRefundIn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CreateRefundIn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateRefundIn} obj Optional instance to populate.
     * @return {module:model/CreateRefundIn} The populated <code>CreateRefundIn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateRefundIn();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('custom_id')) {
                obj['custom_id'] = ApiClient.convertToType(data['custom_id'], 'String');
            }
            if (data.hasOwnProperty('line_key')) {
                obj['line_key'] = ApiClient.convertToType(data['line_key'], 'String');
            }
            if (data.hasOwnProperty('refund_reason')) {
                obj['refund_reason'] = ApiClient.convertToType(data['refund_reason'], 'String');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateRefundIn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateRefundIn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['custom_id'] && !(typeof data['custom_id'] === 'string' || data['custom_id'] instanceof String)) {
            throw new Error("Expected the field `custom_id` to be a primitive type in the JSON string but got " + data['custom_id']);
        }
        // ensure the json data is a string
        if (data['line_key'] && !(typeof data['line_key'] === 'string' || data['line_key'] instanceof String)) {
            throw new Error("Expected the field `line_key` to be a primitive type in the JSON string but got " + data['line_key']);
        }
        // ensure the json data is a string
        if (data['refund_reason'] && !(typeof data['refund_reason'] === 'string' || data['refund_reason'] instanceof String)) {
            throw new Error("Expected the field `refund_reason` to be a primitive type in the JSON string but got " + data['refund_reason']);
        }

        return true;
    }


}



/**
 * Amount (without tax) to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.
 * @member {Number} amount
 */
CreateRefundIn.prototype['amount'] = undefined;

/**
 * Line custom identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.
 * @member {String} custom_id
 */
CreateRefundIn.prototype['custom_id'] = undefined;

/**
 * Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.
 * @member {String} line_key
 */
CreateRefundIn.prototype['line_key'] = undefined;

/**
 * Refund reason, displayed on the credit note.
 * @member {String} refund_reason
 */
CreateRefundIn.prototype['refund_reason'] = undefined;

/**
 * Total amount, including tax, to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.
 * @member {Number} total_amount
 */
CreateRefundIn.prototype['total_amount'] = undefined;






export default CreateRefundIn;

