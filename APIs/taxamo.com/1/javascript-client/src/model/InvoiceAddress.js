/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The InvoiceAddress model module.
 * @module model/InvoiceAddress
 * @version 1
 */
class InvoiceAddress {
    /**
     * Constructs a new <code>InvoiceAddress</code>.
     * @alias module:model/InvoiceAddress
     */
    constructor() { 
        
        InvoiceAddress.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>InvoiceAddress</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InvoiceAddress} obj Optional instance to populate.
     * @return {module:model/InvoiceAddress} The populated <code>InvoiceAddress</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InvoiceAddress();

            if (data.hasOwnProperty('address_detail')) {
                obj['address_detail'] = ApiClient.convertToType(data['address_detail'], 'String');
            }
            if (data.hasOwnProperty('building_number')) {
                obj['building_number'] = ApiClient.convertToType(data['building_number'], 'String');
            }
            if (data.hasOwnProperty('city')) {
                obj['city'] = ApiClient.convertToType(data['city'], 'String');
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], 'String');
            }
            if (data.hasOwnProperty('freeform_address')) {
                obj['freeform_address'] = ApiClient.convertToType(data['freeform_address'], 'String');
            }
            if (data.hasOwnProperty('postal_code')) {
                obj['postal_code'] = ApiClient.convertToType(data['postal_code'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
            if (data.hasOwnProperty('street_name')) {
                obj['street_name'] = ApiClient.convertToType(data['street_name'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InvoiceAddress</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InvoiceAddress</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['address_detail'] && !(typeof data['address_detail'] === 'string' || data['address_detail'] instanceof String)) {
            throw new Error("Expected the field `address_detail` to be a primitive type in the JSON string but got " + data['address_detail']);
        }
        // ensure the json data is a string
        if (data['building_number'] && !(typeof data['building_number'] === 'string' || data['building_number'] instanceof String)) {
            throw new Error("Expected the field `building_number` to be a primitive type in the JSON string but got " + data['building_number']);
        }
        // ensure the json data is a string
        if (data['city'] && !(typeof data['city'] === 'string' || data['city'] instanceof String)) {
            throw new Error("Expected the field `city` to be a primitive type in the JSON string but got " + data['city']);
        }
        // ensure the json data is a string
        if (data['country'] && !(typeof data['country'] === 'string' || data['country'] instanceof String)) {
            throw new Error("Expected the field `country` to be a primitive type in the JSON string but got " + data['country']);
        }
        // ensure the json data is a string
        if (data['freeform_address'] && !(typeof data['freeform_address'] === 'string' || data['freeform_address'] instanceof String)) {
            throw new Error("Expected the field `freeform_address` to be a primitive type in the JSON string but got " + data['freeform_address']);
        }
        // ensure the json data is a string
        if (data['postal_code'] && !(typeof data['postal_code'] === 'string' || data['postal_code'] instanceof String)) {
            throw new Error("Expected the field `postal_code` to be a primitive type in the JSON string but got " + data['postal_code']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }
        // ensure the json data is a string
        if (data['street_name'] && !(typeof data['street_name'] === 'string' || data['street_name'] instanceof String)) {
            throw new Error("Expected the field `street_name` to be a primitive type in the JSON string but got " + data['street_name']);
        }

        return true;
    }


}



/**
 * Address details - for example apartament number.
 * @member {String} address_detail
 */
InvoiceAddress.prototype['address_detail'] = undefined;

/**
 * Building number.
 * @member {String} building_number
 */
InvoiceAddress.prototype['building_number'] = undefined;

/**
 * City name.
 * @member {String} city
 */
InvoiceAddress.prototype['city'] = undefined;

/**
 * 2-letter ISO country code.
 * @member {String} country
 */
InvoiceAddress.prototype['country'] = undefined;

/**
 * Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.
 * @member {String} freeform_address
 */
InvoiceAddress.prototype['freeform_address'] = undefined;

/**
 * Postal code.
 * @member {String} postal_code
 */
InvoiceAddress.prototype['postal_code'] = undefined;

/**
 * Region, for United States - state code - e.g. NJ.
 * @member {String} region
 */
InvoiceAddress.prototype['region'] = undefined;

/**
 *  Street name.
 * @member {String} street_name
 */
InvoiceAddress.prototype['street_name'] = undefined;






export default InvoiceAddress;

