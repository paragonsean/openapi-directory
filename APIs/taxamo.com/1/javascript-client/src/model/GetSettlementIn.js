/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The GetSettlementIn model module.
 * @module model/GetSettlementIn
 * @version 1
 */
class GetSettlementIn {
    /**
     * Constructs a new <code>GetSettlementIn</code>.
     * @alias module:model/GetSettlementIn
     */
    constructor() { 
        
        GetSettlementIn.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>GetSettlementIn</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/GetSettlementIn} obj Optional instance to populate.
     * @return {module:model/GetSettlementIn} The populated <code>GetSettlementIn</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new GetSettlementIn();

            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('end_month')) {
                obj['end_month'] = ApiClient.convertToType(data['end_month'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('moss_country_code')) {
                obj['moss_country_code'] = ApiClient.convertToType(data['moss_country_code'], 'String');
            }
            if (data.hasOwnProperty('moss_tax_id')) {
                obj['moss_tax_id'] = ApiClient.convertToType(data['moss_tax_id'], 'String');
            }
            if (data.hasOwnProperty('refund_date_kind_override')) {
                obj['refund_date_kind_override'] = ApiClient.convertToType(data['refund_date_kind_override'], 'String');
            }
            if (data.hasOwnProperty('start_month')) {
                obj['start_month'] = ApiClient.convertToType(data['start_month'], 'String');
            }
            if (data.hasOwnProperty('tax_country_code')) {
                obj['tax_country_code'] = ApiClient.convertToType(data['tax_country_code'], 'String');
            }
            if (data.hasOwnProperty('tax_id')) {
                obj['tax_id'] = ApiClient.convertToType(data['tax_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>GetSettlementIn</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>GetSettlementIn</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['end_month'] && !(typeof data['end_month'] === 'string' || data['end_month'] instanceof String)) {
            throw new Error("Expected the field `end_month` to be a primitive type in the JSON string but got " + data['end_month']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['moss_country_code'] && !(typeof data['moss_country_code'] === 'string' || data['moss_country_code'] instanceof String)) {
            throw new Error("Expected the field `moss_country_code` to be a primitive type in the JSON string but got " + data['moss_country_code']);
        }
        // ensure the json data is a string
        if (data['moss_tax_id'] && !(typeof data['moss_tax_id'] === 'string' || data['moss_tax_id'] instanceof String)) {
            throw new Error("Expected the field `moss_tax_id` to be a primitive type in the JSON string but got " + data['moss_tax_id']);
        }
        // ensure the json data is a string
        if (data['refund_date_kind_override'] && !(typeof data['refund_date_kind_override'] === 'string' || data['refund_date_kind_override'] instanceof String)) {
            throw new Error("Expected the field `refund_date_kind_override` to be a primitive type in the JSON string but got " + data['refund_date_kind_override']);
        }
        // ensure the json data is a string
        if (data['start_month'] && !(typeof data['start_month'] === 'string' || data['start_month'] instanceof String)) {
            throw new Error("Expected the field `start_month` to be a primitive type in the JSON string but got " + data['start_month']);
        }
        // ensure the json data is a string
        if (data['tax_country_code'] && !(typeof data['tax_country_code'] === 'string' || data['tax_country_code'] instanceof String)) {
            throw new Error("Expected the field `tax_country_code` to be a primitive type in the JSON string but got " + data['tax_country_code']);
        }
        // ensure the json data is a string
        if (data['tax_id'] && !(typeof data['tax_id'] === 'string' || data['tax_id'] instanceof String)) {
            throw new Error("Expected the field `tax_id` to be a primitive type in the JSON string but got " + data['tax_id']);
        }

        return true;
    }


}



/**
 * ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region's currency code.
 * @member {String} currency_code
 */
GetSettlementIn.prototype['currency_code'] = undefined;

/**
 * Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
 * @member {String} end_month
 */
GetSettlementIn.prototype['end_month'] = undefined;

/**
 * Output format. 'csv' value is accepted as well
 * @member {String} format
 */
GetSettlementIn.prototype['format'] = undefined;

/**
 * MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code.
 * @member {String} moss_country_code
 */
GetSettlementIn.prototype['moss_country_code'] = undefined;

/**
 * MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.
 * @member {String} moss_tax_id
 */
GetSettlementIn.prototype['moss_tax_id'] = undefined;

/**
 * Set to 'order_date' to show only refunds for the transactions in the selected reporting period. Set to 'refund_timestamp' to show refunds that were created in the selected reporting period. Do not set to use the default region's setting.
 * @member {String} refund_date_kind_override
 */
GetSettlementIn.prototype['refund_date_kind_override'] = undefined;

/**
 * Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
 * @member {String} start_month
 */
GetSettlementIn.prototype['start_month'] = undefined;

/**
 * Tax entity country code, used to determine currency/region. 
 * @member {String} tax_country_code
 */
GetSettlementIn.prototype['tax_country_code'] = undefined;

/**
 * MOSS-assigned tax ID - if not provided, merchant's national tax number will be used. Deprecated, please use tax-id.
 * @member {String} tax_id
 */
GetSettlementIn.prototype['tax_id'] = undefined;






export default GetSettlementIn;

