/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The EvidenceSchema model module.
 * @module model/EvidenceSchema
 * @version 1
 */
class EvidenceSchema {
    /**
     * Constructs a new <code>EvidenceSchema</code>.
     * @alias module:model/EvidenceSchema
     */
    constructor() { 
        
        EvidenceSchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EvidenceSchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EvidenceSchema} obj Optional instance to populate.
     * @return {module:model/EvidenceSchema} The populated <code>EvidenceSchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EvidenceSchema();

            if (data.hasOwnProperty('evidence_type')) {
                obj['evidence_type'] = ApiClient.convertToType(data['evidence_type'], 'String');
            }
            if (data.hasOwnProperty('evidence_value')) {
                obj['evidence_value'] = ApiClient.convertToType(data['evidence_value'], 'String');
            }
            if (data.hasOwnProperty('resolved_country_code')) {
                obj['resolved_country_code'] = ApiClient.convertToType(data['resolved_country_code'], 'String');
            }
            if (data.hasOwnProperty('used')) {
                obj['used'] = ApiClient.convertToType(data['used'], 'Boolean');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EvidenceSchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EvidenceSchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['evidence_type'] && !(typeof data['evidence_type'] === 'string' || data['evidence_type'] instanceof String)) {
            throw new Error("Expected the field `evidence_type` to be a primitive type in the JSON string but got " + data['evidence_type']);
        }
        // ensure the json data is a string
        if (data['evidence_value'] && !(typeof data['evidence_value'] === 'string' || data['evidence_value'] instanceof String)) {
            throw new Error("Expected the field `evidence_value` to be a primitive type in the JSON string but got " + data['evidence_value']);
        }
        // ensure the json data is a string
        if (data['resolved_country_code'] && !(typeof data['resolved_country_code'] === 'string' || data['resolved_country_code'] instanceof String)) {
            throw new Error("Expected the field `resolved_country_code` to be a primitive type in the JSON string but got " + data['resolved_country_code']);
        }

        return true;
    }


}



/**
 * Type of evidence.
 * @member {String} evidence_type
 */
EvidenceSchema.prototype['evidence_type'] = undefined;

/**
 * Value provided as evidence - for example IP address.
 * @member {String} evidence_value
 */
EvidenceSchema.prototype['evidence_value'] = undefined;

/**
 * Country code that was resolved using this evidence.
 * @member {String} resolved_country_code
 */
EvidenceSchema.prototype['resolved_country_code'] = undefined;

/**
 * If the evidence was used to match the actual country.
 * @member {Boolean} used
 */
EvidenceSchema.prototype['used'] = undefined;






export default EvidenceSchema;

