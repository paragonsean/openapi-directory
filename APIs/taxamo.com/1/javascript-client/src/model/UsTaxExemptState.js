/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The UsTaxExemptState model module.
 * @module model/UsTaxExemptState
 * @version 1
 */
class UsTaxExemptState {
    /**
     * Constructs a new <code>UsTaxExemptState</code>.
     * @alias module:model/UsTaxExemptState
     * @param stateAbbr {String} Two character state abbreviation.
     */
    constructor(stateAbbr) { 
        
        UsTaxExemptState.initialize(this, stateAbbr);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, stateAbbr) { 
        obj['state_abbr'] = stateAbbr;
    }

    /**
     * Constructs a <code>UsTaxExemptState</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UsTaxExemptState} obj Optional instance to populate.
     * @return {module:model/UsTaxExemptState} The populated <code>UsTaxExemptState</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UsTaxExemptState();

            if (data.hasOwnProperty('identifier_for_exemption_reason')) {
                obj['identifier_for_exemption_reason'] = ApiClient.convertToType(data['identifier_for_exemption_reason'], 'String');
            }
            if (data.hasOwnProperty('reason_for_exemption')) {
                obj['reason_for_exemption'] = ApiClient.convertToType(data['reason_for_exemption'], 'String');
            }
            if (data.hasOwnProperty('state_abbr')) {
                obj['state_abbr'] = ApiClient.convertToType(data['state_abbr'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UsTaxExemptState</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UsTaxExemptState</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of UsTaxExemptState.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['identifier_for_exemption_reason'] && !(typeof data['identifier_for_exemption_reason'] === 'string' || data['identifier_for_exemption_reason'] instanceof String)) {
            throw new Error("Expected the field `identifier_for_exemption_reason` to be a primitive type in the JSON string but got " + data['identifier_for_exemption_reason']);
        }
        // ensure the json data is a string
        if (data['reason_for_exemption'] && !(typeof data['reason_for_exemption'] === 'string' || data['reason_for_exemption'] instanceof String)) {
            throw new Error("Expected the field `reason_for_exemption` to be a primitive type in the JSON string but got " + data['reason_for_exemption']);
        }
        // ensure the json data is a string
        if (data['state_abbr'] && !(typeof data['state_abbr'] === 'string' || data['state_abbr'] instanceof String)) {
            throw new Error("Expected the field `state_abbr` to be a primitive type in the JSON string but got " + data['state_abbr']);
        }

        return true;
    }


}

UsTaxExemptState.RequiredProperties = ["state_abbr"];

/**
 * Identifier for exemption reason.
 * @member {String} identifier_for_exemption_reason
 */
UsTaxExemptState.prototype['identifier_for_exemption_reason'] = undefined;

/**
 * Exemption reason
 * @member {String} reason_for_exemption
 */
UsTaxExemptState.prototype['reason_for_exemption'] = undefined;

/**
 * Two character state abbreviation.
 * @member {String} state_abbr
 */
UsTaxExemptState.prototype['state_abbr'] = undefined;






export default UsTaxExemptState;

