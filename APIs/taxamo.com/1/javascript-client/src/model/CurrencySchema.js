/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CurrencySchema model module.
 * @module model/CurrencySchema
 * @version 1
 */
class CurrencySchema {
    /**
     * Constructs a new <code>CurrencySchema</code>.
     * @alias module:model/CurrencySchema
     */
    constructor() { 
        
        CurrencySchema.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>CurrencySchema</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CurrencySchema} obj Optional instance to populate.
     * @return {module:model/CurrencySchema} The populated <code>CurrencySchema</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CurrencySchema();

            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('isocode')) {
                obj['isocode'] = ApiClient.convertToType(data['isocode'], 'String');
            }
            if (data.hasOwnProperty('isonum')) {
                obj['isonum'] = ApiClient.convertToType(data['isonum'], 'Number');
            }
            if (data.hasOwnProperty('minorunits')) {
                obj['minorunits'] = ApiClient.convertToType(data['minorunits'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CurrencySchema</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CurrencySchema</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['isocode'] && !(typeof data['isocode'] === 'string' || data['isocode'] instanceof String)) {
            throw new Error("Expected the field `isocode` to be a primitive type in the JSON string but got " + data['isocode']);
        }

        return true;
    }


}



/**
 * Currency 3-letter ISO code.
 * @member {String} code
 */
CurrencySchema.prototype['code'] = undefined;

/**
 * Currency description.
 * @member {String} description
 */
CurrencySchema.prototype['description'] = undefined;

/**
 * Currency 3-letter ISO code.
 * @member {String} isocode
 */
CurrencySchema.prototype['isocode'] = undefined;

/**
 * Currency iso numeric code.
 * @member {Number} isonum
 */
CurrencySchema.prototype['isonum'] = undefined;

/**
 * Number of minor units for currency.
 * @member {Number} minorunits
 */
CurrencySchema.prototype['minorunits'] = undefined;






export default CurrencySchema;

