/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import CustomFields from './CustomFields';

/**
 * The InputTransactionLine model module.
 * @module model/InputTransactionLine
 * @version 1
 */
class InputTransactionLine {
    /**
     * Constructs a new <code>InputTransactionLine</code>.
     * @alias module:model/InputTransactionLine
     * @param customId {String} Custom id, provided by ecommerce software.
     */
    constructor(customId) { 
        
        InputTransactionLine.initialize(this, customId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, customId) { 
        obj['custom_id'] = customId;
    }

    /**
     * Constructs a <code>InputTransactionLine</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/InputTransactionLine} obj Optional instance to populate.
     * @return {module:model/InputTransactionLine} The populated <code>InputTransactionLine</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new InputTransactionLine();

            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [CustomFields]);
            }
            if (data.hasOwnProperty('custom_id')) {
                obj['custom_id'] = ApiClient.convertToType(data['custom_id'], 'String');
            }
            if (data.hasOwnProperty('deducted_tax_rate')) {
                obj['deducted_tax_rate'] = ApiClient.convertToType(data['deducted_tax_rate'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('informative')) {
                obj['informative'] = ApiClient.convertToType(data['informative'], 'Boolean');
            }
            if (data.hasOwnProperty('line_key')) {
                obj['line_key'] = ApiClient.convertToType(data['line_key'], 'String');
            }
            if (data.hasOwnProperty('product_code')) {
                obj['product_code'] = ApiClient.convertToType(data['product_code'], 'String');
            }
            if (data.hasOwnProperty('product_tax_code')) {
                obj['product_tax_code'] = ApiClient.convertToType(data['product_tax_code'], 'String');
            }
            if (data.hasOwnProperty('product_type')) {
                obj['product_type'] = ApiClient.convertToType(data['product_type'], 'String');
            }
            if (data.hasOwnProperty('quantity')) {
                obj['quantity'] = ApiClient.convertToType(data['quantity'], 'Number');
            }
            if (data.hasOwnProperty('supply_date')) {
                obj['supply_date'] = ApiClient.convertToType(data['supply_date'], 'String');
            }
            if (data.hasOwnProperty('tax_name')) {
                obj['tax_name'] = ApiClient.convertToType(data['tax_name'], 'String');
            }
            if (data.hasOwnProperty('tax_rate')) {
                obj['tax_rate'] = ApiClient.convertToType(data['tax_rate'], 'Number');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('unit_of_measure')) {
                obj['unit_of_measure'] = ApiClient.convertToType(data['unit_of_measure'], 'String');
            }
            if (data.hasOwnProperty('unit_price')) {
                obj['unit_price'] = ApiClient.convertToType(data['unit_price'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>InputTransactionLine</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>InputTransactionLine</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of InputTransactionLine.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                CustomFields.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['custom_id'] && !(typeof data['custom_id'] === 'string' || data['custom_id'] instanceof String)) {
            throw new Error("Expected the field `custom_id` to be a primitive type in the JSON string but got " + data['custom_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['line_key'] && !(typeof data['line_key'] === 'string' || data['line_key'] instanceof String)) {
            throw new Error("Expected the field `line_key` to be a primitive type in the JSON string but got " + data['line_key']);
        }
        // ensure the json data is a string
        if (data['product_code'] && !(typeof data['product_code'] === 'string' || data['product_code'] instanceof String)) {
            throw new Error("Expected the field `product_code` to be a primitive type in the JSON string but got " + data['product_code']);
        }
        // ensure the json data is a string
        if (data['product_tax_code'] && !(typeof data['product_tax_code'] === 'string' || data['product_tax_code'] instanceof String)) {
            throw new Error("Expected the field `product_tax_code` to be a primitive type in the JSON string but got " + data['product_tax_code']);
        }
        // ensure the json data is a string
        if (data['product_type'] && !(typeof data['product_type'] === 'string' || data['product_type'] instanceof String)) {
            throw new Error("Expected the field `product_type` to be a primitive type in the JSON string but got " + data['product_type']);
        }
        // ensure the json data is a string
        if (data['supply_date'] && !(typeof data['supply_date'] === 'string' || data['supply_date'] instanceof String)) {
            throw new Error("Expected the field `supply_date` to be a primitive type in the JSON string but got " + data['supply_date']);
        }
        // ensure the json data is a string
        if (data['tax_name'] && !(typeof data['tax_name'] === 'string' || data['tax_name'] instanceof String)) {
            throw new Error("Expected the field `tax_name` to be a primitive type in the JSON string but got " + data['tax_name']);
        }
        // ensure the json data is a string
        if (data['unit_of_measure'] && !(typeof data['unit_of_measure'] === 'string' || data['unit_of_measure'] instanceof String)) {
            throw new Error("Expected the field `unit_of_measure` to be a primitive type in the JSON string but got " + data['unit_of_measure']);
        }

        return true;
    }


}

InputTransactionLine.RequiredProperties = ["custom_id"];

/**
 * Amount. Required if total amount or both unit price and quantity are not provided.
 * @member {Number} amount
 */
InputTransactionLine.prototype['amount'] = undefined;

/**
 * Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
 * @member {Array.<module:model/CustomFields>} custom_fields
 */
InputTransactionLine.prototype['custom_fields'] = undefined;

/**
 * Custom id, provided by ecommerce software.
 * @member {String} custom_id
 */
InputTransactionLine.prototype['custom_id'] = undefined;

/**
 * Deducted tax rate, calculated by taxamo.
 * @member {Number} deducted_tax_rate
 */
InputTransactionLine.prototype['deducted_tax_rate'] = undefined;

/**
 * Line contents description.
 * @member {String} description
 */
InputTransactionLine.prototype['description'] = undefined;

/**
 * If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.
 * @member {Boolean} informative
 */
InputTransactionLine.prototype['informative'] = undefined;

/**
 * Generated line key.
 * @member {String} line_key
 */
InputTransactionLine.prototype['line_key'] = undefined;

/**
 * Internal product code, used for invoicing for example.
 * @member {String} product_code
 */
InputTransactionLine.prototype['product_code'] = undefined;

/**
 * External product tax code for a line, for example TIC in US Sales tax.
 * @member {String} product_tax_code
 */
InputTransactionLine.prototype['product_tax_code'] = undefined;

/**
 * Product type, according to dictionary /dictionaries/product_types. 
 * @member {String} product_type
 */
InputTransactionLine.prototype['product_type'] = undefined;

/**
 * Quantity Defaults to 1.
 * @member {Number} quantity
 */
InputTransactionLine.prototype['quantity'] = undefined;

/**
 * Date of supply in yyyy-MM-dd format.
 * @member {String} supply_date
 */
InputTransactionLine.prototype['supply_date'] = undefined;

/**
 * Tax name, calculated by taxamo.  Can be overwritten when informative field is true.
 * @member {String} tax_name
 */
InputTransactionLine.prototype['tax_name'] = undefined;

/**
 * Tax rate, calculated by taxamo. Must be provided when informative field is true.
 * @member {Number} tax_rate
 */
InputTransactionLine.prototype['tax_rate'] = undefined;

/**
 * Total amount. Required if amount or both unit price and quantity are not provided.
 * @member {Number} total_amount
 */
InputTransactionLine.prototype['total_amount'] = undefined;

/**
 * Unit of measure.
 * @member {String} unit_of_measure
 */
InputTransactionLine.prototype['unit_of_measure'] = undefined;

/**
 * Unit price.
 * @member {Number} unit_price
 */
InputTransactionLine.prototype['unit_price'] = undefined;






export default InputTransactionLine;

