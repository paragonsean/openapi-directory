/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AdditionalCurrencies from './AdditionalCurrencies';
import Countries from './Countries';
import CustomFields from './CustomFields';
import Evidence from './Evidence';
import InvoiceAddress from './InvoiceAddress';
import TaxDataSchema from './TaxDataSchema';
import TransactionLines from './TransactionLines';

/**
 * The Transaction model module.
 * @module model/Transaction
 * @version 1
 */
class Transaction {
    /**
     * Constructs a new <code>Transaction</code>.
     * @alias module:model/Transaction
     * @param currencyCode {String} Currency code for transaction - e.g. EUR.
     * @param transactionLines {Array.<module:model/TransactionLines>} Transaction lines.
     */
    constructor(currencyCode, transactionLines) { 
        
        Transaction.initialize(this, currencyCode, transactionLines);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, currencyCode, transactionLines) { 
        obj['currency_code'] = currencyCode;
        obj['transaction_lines'] = transactionLines;
    }

    /**
     * Constructs a <code>Transaction</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Transaction} obj Optional instance to populate.
     * @return {module:model/Transaction} The populated <code>Transaction</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Transaction();

            if (data.hasOwnProperty('additional_currencies')) {
                obj['additional_currencies'] = AdditionalCurrencies.constructFromObject(data['additional_currencies']);
            }
            if (data.hasOwnProperty('amount')) {
                obj['amount'] = ApiClient.convertToType(data['amount'], 'Number');
            }
            if (data.hasOwnProperty('billing_country_code')) {
                obj['billing_country_code'] = ApiClient.convertToType(data['billing_country_code'], 'String');
            }
            if (data.hasOwnProperty('buyer_credit_card_prefix')) {
                obj['buyer_credit_card_prefix'] = ApiClient.convertToType(data['buyer_credit_card_prefix'], 'String');
            }
            if (data.hasOwnProperty('buyer_email')) {
                obj['buyer_email'] = ApiClient.convertToType(data['buyer_email'], 'String');
            }
            if (data.hasOwnProperty('buyer_ip')) {
                obj['buyer_ip'] = ApiClient.convertToType(data['buyer_ip'], 'String');
            }
            if (data.hasOwnProperty('buyer_name')) {
                obj['buyer_name'] = ApiClient.convertToType(data['buyer_name'], 'String');
            }
            if (data.hasOwnProperty('buyer_tax_number')) {
                obj['buyer_tax_number'] = ApiClient.convertToType(data['buyer_tax_number'], 'String');
            }
            if (data.hasOwnProperty('buyer_tax_number_valid')) {
                obj['buyer_tax_number_valid'] = ApiClient.convertToType(data['buyer_tax_number_valid'], 'Boolean');
            }
            if (data.hasOwnProperty('comments')) {
                obj['comments'] = ApiClient.convertToType(data['comments'], 'String');
            }
            if (data.hasOwnProperty('confirm_timestamp')) {
                obj['confirm_timestamp'] = ApiClient.convertToType(data['confirm_timestamp'], 'String');
            }
            if (data.hasOwnProperty('countries')) {
                obj['countries'] = Countries.constructFromObject(data['countries']);
            }
            if (data.hasOwnProperty('create_timestamp')) {
                obj['create_timestamp'] = ApiClient.convertToType(data['create_timestamp'], 'String');
            }
            if (data.hasOwnProperty('currency_code')) {
                obj['currency_code'] = ApiClient.convertToType(data['currency_code'], 'String');
            }
            if (data.hasOwnProperty('custom_data')) {
                obj['custom_data'] = ApiClient.convertToType(data['custom_data'], 'String');
            }
            if (data.hasOwnProperty('custom_fields')) {
                obj['custom_fields'] = ApiClient.convertToType(data['custom_fields'], [CustomFields]);
            }
            if (data.hasOwnProperty('custom_id')) {
                obj['custom_id'] = ApiClient.convertToType(data['custom_id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('deducted_tax_amount')) {
                obj['deducted_tax_amount'] = ApiClient.convertToType(data['deducted_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('evidence')) {
                obj['evidence'] = Evidence.constructFromObject(data['evidence']);
            }
            if (data.hasOwnProperty('external_key')) {
                obj['external_key'] = ApiClient.convertToType(data['external_key'], 'String');
            }
            if (data.hasOwnProperty('force_country_code')) {
                obj['force_country_code'] = ApiClient.convertToType(data['force_country_code'], 'String');
            }
            if (data.hasOwnProperty('fully_informative')) {
                obj['fully_informative'] = ApiClient.convertToType(data['fully_informative'], 'Boolean');
            }
            if (data.hasOwnProperty('invoice_address')) {
                obj['invoice_address'] = InvoiceAddress.constructFromObject(data['invoice_address']);
            }
            if (data.hasOwnProperty('invoice_date')) {
                obj['invoice_date'] = ApiClient.convertToType(data['invoice_date'], 'String');
            }
            if (data.hasOwnProperty('invoice_image_url')) {
                obj['invoice_image_url'] = ApiClient.convertToType(data['invoice_image_url'], 'String');
            }
            if (data.hasOwnProperty('invoice_number')) {
                obj['invoice_number'] = ApiClient.convertToType(data['invoice_number'], 'String');
            }
            if (data.hasOwnProperty('invoice_place')) {
                obj['invoice_place'] = ApiClient.convertToType(data['invoice_place'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('kind')) {
                obj['kind'] = ApiClient.convertToType(data['kind'], 'String');
            }
            if (data.hasOwnProperty('manual')) {
                obj['manual'] = ApiClient.convertToType(data['manual'], 'Boolean');
            }
            if (data.hasOwnProperty('note')) {
                obj['note'] = ApiClient.convertToType(data['note'], 'String');
            }
            if (data.hasOwnProperty('order_date')) {
                obj['order_date'] = ApiClient.convertToType(data['order_date'], 'String');
            }
            if (data.hasOwnProperty('original_transaction_key')) {
                obj['original_transaction_key'] = ApiClient.convertToType(data['original_transaction_key'], 'String');
            }
            if (data.hasOwnProperty('refunded_tax_amount')) {
                obj['refunded_tax_amount'] = ApiClient.convertToType(data['refunded_tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('refunded_total_amount')) {
                obj['refunded_total_amount'] = ApiClient.convertToType(data['refunded_total_amount'], 'Number');
            }
            if (data.hasOwnProperty('source')) {
                obj['source'] = ApiClient.convertToType(data['source'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('sub_account_id')) {
                obj['sub_account_id'] = ApiClient.convertToType(data['sub_account_id'], 'String');
            }
            if (data.hasOwnProperty('supply_date')) {
                obj['supply_date'] = ApiClient.convertToType(data['supply_date'], 'String');
            }
            if (data.hasOwnProperty('tax_amount')) {
                obj['tax_amount'] = ApiClient.convertToType(data['tax_amount'], 'Number');
            }
            if (data.hasOwnProperty('tax_country_code')) {
                obj['tax_country_code'] = ApiClient.convertToType(data['tax_country_code'], 'String');
            }
            if (data.hasOwnProperty('tax_data')) {
                obj['tax_data'] = TaxDataSchema.constructFromObject(data['tax_data']);
            }
            if (data.hasOwnProperty('tax_deducted')) {
                obj['tax_deducted'] = ApiClient.convertToType(data['tax_deducted'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_entity_name')) {
                obj['tax_entity_name'] = ApiClient.convertToType(data['tax_entity_name'], 'String');
            }
            if (data.hasOwnProperty('tax_number_service')) {
                obj['tax_number_service'] = ApiClient.convertToType(data['tax_number_service'], 'String');
            }
            if (data.hasOwnProperty('tax_supported')) {
                obj['tax_supported'] = ApiClient.convertToType(data['tax_supported'], 'Boolean');
            }
            if (data.hasOwnProperty('tax_timezone')) {
                obj['tax_timezone'] = ApiClient.convertToType(data['tax_timezone'], 'String');
            }
            if (data.hasOwnProperty('test')) {
                obj['test'] = ApiClient.convertToType(data['test'], 'Boolean');
            }
            if (data.hasOwnProperty('total_amount')) {
                obj['total_amount'] = ApiClient.convertToType(data['total_amount'], 'Number');
            }
            if (data.hasOwnProperty('transaction_lines')) {
                obj['transaction_lines'] = ApiClient.convertToType(data['transaction_lines'], [TransactionLines]);
            }
            if (data.hasOwnProperty('verification_token')) {
                obj['verification_token'] = ApiClient.convertToType(data['verification_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Transaction</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Transaction</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Transaction.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `additional_currencies`
        if (data['additional_currencies']) { // data not null
          AdditionalCurrencies.validateJSON(data['additional_currencies']);
        }
        // ensure the json data is a string
        if (data['billing_country_code'] && !(typeof data['billing_country_code'] === 'string' || data['billing_country_code'] instanceof String)) {
            throw new Error("Expected the field `billing_country_code` to be a primitive type in the JSON string but got " + data['billing_country_code']);
        }
        // ensure the json data is a string
        if (data['buyer_credit_card_prefix'] && !(typeof data['buyer_credit_card_prefix'] === 'string' || data['buyer_credit_card_prefix'] instanceof String)) {
            throw new Error("Expected the field `buyer_credit_card_prefix` to be a primitive type in the JSON string but got " + data['buyer_credit_card_prefix']);
        }
        // ensure the json data is a string
        if (data['buyer_email'] && !(typeof data['buyer_email'] === 'string' || data['buyer_email'] instanceof String)) {
            throw new Error("Expected the field `buyer_email` to be a primitive type in the JSON string but got " + data['buyer_email']);
        }
        // ensure the json data is a string
        if (data['buyer_ip'] && !(typeof data['buyer_ip'] === 'string' || data['buyer_ip'] instanceof String)) {
            throw new Error("Expected the field `buyer_ip` to be a primitive type in the JSON string but got " + data['buyer_ip']);
        }
        // ensure the json data is a string
        if (data['buyer_name'] && !(typeof data['buyer_name'] === 'string' || data['buyer_name'] instanceof String)) {
            throw new Error("Expected the field `buyer_name` to be a primitive type in the JSON string but got " + data['buyer_name']);
        }
        // ensure the json data is a string
        if (data['buyer_tax_number'] && !(typeof data['buyer_tax_number'] === 'string' || data['buyer_tax_number'] instanceof String)) {
            throw new Error("Expected the field `buyer_tax_number` to be a primitive type in the JSON string but got " + data['buyer_tax_number']);
        }
        // ensure the json data is a string
        if (data['comments'] && !(typeof data['comments'] === 'string' || data['comments'] instanceof String)) {
            throw new Error("Expected the field `comments` to be a primitive type in the JSON string but got " + data['comments']);
        }
        // ensure the json data is a string
        if (data['confirm_timestamp'] && !(typeof data['confirm_timestamp'] === 'string' || data['confirm_timestamp'] instanceof String)) {
            throw new Error("Expected the field `confirm_timestamp` to be a primitive type in the JSON string but got " + data['confirm_timestamp']);
        }
        // validate the optional field `countries`
        if (data['countries']) { // data not null
          Countries.validateJSON(data['countries']);
        }
        // ensure the json data is a string
        if (data['create_timestamp'] && !(typeof data['create_timestamp'] === 'string' || data['create_timestamp'] instanceof String)) {
            throw new Error("Expected the field `create_timestamp` to be a primitive type in the JSON string but got " + data['create_timestamp']);
        }
        // ensure the json data is a string
        if (data['currency_code'] && !(typeof data['currency_code'] === 'string' || data['currency_code'] instanceof String)) {
            throw new Error("Expected the field `currency_code` to be a primitive type in the JSON string but got " + data['currency_code']);
        }
        // ensure the json data is a string
        if (data['custom_data'] && !(typeof data['custom_data'] === 'string' || data['custom_data'] instanceof String)) {
            throw new Error("Expected the field `custom_data` to be a primitive type in the JSON string but got " + data['custom_data']);
        }
        if (data['custom_fields']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['custom_fields'])) {
                throw new Error("Expected the field `custom_fields` to be an array in the JSON data but got " + data['custom_fields']);
            }
            // validate the optional field `custom_fields` (array)
            for (const item of data['custom_fields']) {
                CustomFields.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['custom_id'] && !(typeof data['custom_id'] === 'string' || data['custom_id'] instanceof String)) {
            throw new Error("Expected the field `custom_id` to be a primitive type in the JSON string but got " + data['custom_id']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // validate the optional field `evidence`
        if (data['evidence']) { // data not null
          Evidence.validateJSON(data['evidence']);
        }
        // ensure the json data is a string
        if (data['external_key'] && !(typeof data['external_key'] === 'string' || data['external_key'] instanceof String)) {
            throw new Error("Expected the field `external_key` to be a primitive type in the JSON string but got " + data['external_key']);
        }
        // ensure the json data is a string
        if (data['force_country_code'] && !(typeof data['force_country_code'] === 'string' || data['force_country_code'] instanceof String)) {
            throw new Error("Expected the field `force_country_code` to be a primitive type in the JSON string but got " + data['force_country_code']);
        }
        // validate the optional field `invoice_address`
        if (data['invoice_address']) { // data not null
          InvoiceAddress.validateJSON(data['invoice_address']);
        }
        // ensure the json data is a string
        if (data['invoice_date'] && !(typeof data['invoice_date'] === 'string' || data['invoice_date'] instanceof String)) {
            throw new Error("Expected the field `invoice_date` to be a primitive type in the JSON string but got " + data['invoice_date']);
        }
        // ensure the json data is a string
        if (data['invoice_image_url'] && !(typeof data['invoice_image_url'] === 'string' || data['invoice_image_url'] instanceof String)) {
            throw new Error("Expected the field `invoice_image_url` to be a primitive type in the JSON string but got " + data['invoice_image_url']);
        }
        // ensure the json data is a string
        if (data['invoice_number'] && !(typeof data['invoice_number'] === 'string' || data['invoice_number'] instanceof String)) {
            throw new Error("Expected the field `invoice_number` to be a primitive type in the JSON string but got " + data['invoice_number']);
        }
        // ensure the json data is a string
        if (data['invoice_place'] && !(typeof data['invoice_place'] === 'string' || data['invoice_place'] instanceof String)) {
            throw new Error("Expected the field `invoice_place` to be a primitive type in the JSON string but got " + data['invoice_place']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['kind'] && !(typeof data['kind'] === 'string' || data['kind'] instanceof String)) {
            throw new Error("Expected the field `kind` to be a primitive type in the JSON string but got " + data['kind']);
        }
        // ensure the json data is a string
        if (data['note'] && !(typeof data['note'] === 'string' || data['note'] instanceof String)) {
            throw new Error("Expected the field `note` to be a primitive type in the JSON string but got " + data['note']);
        }
        // ensure the json data is a string
        if (data['order_date'] && !(typeof data['order_date'] === 'string' || data['order_date'] instanceof String)) {
            throw new Error("Expected the field `order_date` to be a primitive type in the JSON string but got " + data['order_date']);
        }
        // ensure the json data is a string
        if (data['original_transaction_key'] && !(typeof data['original_transaction_key'] === 'string' || data['original_transaction_key'] instanceof String)) {
            throw new Error("Expected the field `original_transaction_key` to be a primitive type in the JSON string but got " + data['original_transaction_key']);
        }
        // ensure the json data is a string
        if (data['source'] && !(typeof data['source'] === 'string' || data['source'] instanceof String)) {
            throw new Error("Expected the field `source` to be a primitive type in the JSON string but got " + data['source']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['sub_account_id'] && !(typeof data['sub_account_id'] === 'string' || data['sub_account_id'] instanceof String)) {
            throw new Error("Expected the field `sub_account_id` to be a primitive type in the JSON string but got " + data['sub_account_id']);
        }
        // ensure the json data is a string
        if (data['supply_date'] && !(typeof data['supply_date'] === 'string' || data['supply_date'] instanceof String)) {
            throw new Error("Expected the field `supply_date` to be a primitive type in the JSON string but got " + data['supply_date']);
        }
        // ensure the json data is a string
        if (data['tax_country_code'] && !(typeof data['tax_country_code'] === 'string' || data['tax_country_code'] instanceof String)) {
            throw new Error("Expected the field `tax_country_code` to be a primitive type in the JSON string but got " + data['tax_country_code']);
        }
        // validate the optional field `tax_data`
        if (data['tax_data']) { // data not null
          TaxDataSchema.validateJSON(data['tax_data']);
        }
        // ensure the json data is a string
        if (data['tax_entity_name'] && !(typeof data['tax_entity_name'] === 'string' || data['tax_entity_name'] instanceof String)) {
            throw new Error("Expected the field `tax_entity_name` to be a primitive type in the JSON string but got " + data['tax_entity_name']);
        }
        // ensure the json data is a string
        if (data['tax_number_service'] && !(typeof data['tax_number_service'] === 'string' || data['tax_number_service'] instanceof String)) {
            throw new Error("Expected the field `tax_number_service` to be a primitive type in the JSON string but got " + data['tax_number_service']);
        }
        // ensure the json data is a string
        if (data['tax_timezone'] && !(typeof data['tax_timezone'] === 'string' || data['tax_timezone'] instanceof String)) {
            throw new Error("Expected the field `tax_timezone` to be a primitive type in the JSON string but got " + data['tax_timezone']);
        }
        if (data['transaction_lines']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['transaction_lines'])) {
                throw new Error("Expected the field `transaction_lines` to be an array in the JSON data but got " + data['transaction_lines']);
            }
            // validate the optional field `transaction_lines` (array)
            for (const item of data['transaction_lines']) {
                TransactionLines.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['verification_token'] && !(typeof data['verification_token'] === 'string' || data['verification_token'] instanceof String)) {
            throw new Error("Expected the field `verification_token` to be a primitive type in the JSON string but got " + data['verification_token']);
        }

        return true;
    }


}

Transaction.RequiredProperties = ["currency_code", "transaction_lines"];

/**
 * @member {module:model/AdditionalCurrencies} additional_currencies
 */
Transaction.prototype['additional_currencies'] = undefined;

/**
 * Amount of transaction without tax.
 * @member {Number} amount
 */
Transaction.prototype['amount'] = undefined;

/**
 * Billing two letter ISO country code.
 * @member {String} billing_country_code
 */
Transaction.prototype['billing_country_code'] = undefined;

/**
 * First 6 digits of buyer's credit card prefix.
 * @member {String} buyer_credit_card_prefix
 */
Transaction.prototype['buyer_credit_card_prefix'] = undefined;

/**
 * Buyer's declared email address.
 * @member {String} buyer_email
 */
Transaction.prototype['buyer_email'] = undefined;

/**
 * IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
 * @member {String} buyer_ip
 */
Transaction.prototype['buyer_ip'] = undefined;

/**
 * Buyer's name - first name and last name or company name.
 * @member {String} buyer_name
 */
Transaction.prototype['buyer_name'] = undefined;

/**
 *  Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
 * @member {String} buyer_tax_number
 */
Transaction.prototype['buyer_tax_number'] = undefined;

/**
 * If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.
 * @member {Boolean} buyer_tax_number_valid
 */
Transaction.prototype['buyer_tax_number_valid'] = undefined;

/**
 * Additional information about the transaction - for example if the evidence has been amended.
 * @member {String} comments
 */
Transaction.prototype['comments'] = undefined;

/**
 * Date and time of transaction confirmation.
 * @member {String} confirm_timestamp
 */
Transaction.prototype['confirm_timestamp'] = undefined;

/**
 * @member {module:model/Countries} countries
 */
Transaction.prototype['countries'] = undefined;

/**
 * Date and time of transaction creation.
 * @member {String} create_timestamp
 */
Transaction.prototype['create_timestamp'] = undefined;

/**
 * Currency code for transaction - e.g. EUR.
 * @member {String} currency_code
 */
Transaction.prototype['currency_code'] = undefined;

/**
 * Custom data related to transaction.
 * @member {String} custom_data
 */
Transaction.prototype['custom_data'] = undefined;

/**
 * Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
 * @member {Array.<module:model/CustomFields>} custom_fields
 */
Transaction.prototype['custom_fields'] = undefined;

/**
 * Custom identifier provided upon transaction creation.
 * @member {String} custom_id
 */
Transaction.prototype['custom_id'] = undefined;

/**
 * Free-form field for storing customer id.
 * @member {String} customer_id
 */
Transaction.prototype['customer_id'] = undefined;

/**
 * How much tax has been deducted.
 * @member {Number} deducted_tax_amount
 */
Transaction.prototype['deducted_tax_amount'] = undefined;

/**
 * Transaction description.
 * @member {String} description
 */
Transaction.prototype['description'] = undefined;

/**
 * @member {module:model/Evidence} evidence
 */
Transaction.prototype['evidence'] = undefined;

/**
 * Transaction external key
 * @member {String} external_key
 */
Transaction.prototype['external_key'] = undefined;

/**
 * Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
 * @member {String} force_country_code
 */
Transaction.prototype['force_country_code'] = undefined;

/**
 * Set to true if transaction has only informative lines.
 * @member {Boolean} fully_informative
 */
Transaction.prototype['fully_informative'] = undefined;

/**
 * @member {module:model/InvoiceAddress} invoice_address
 */
Transaction.prototype['invoice_address'] = undefined;

/**
 * Invoice date of issue.
 * @member {String} invoice_date
 */
Transaction.prototype['invoice_date'] = undefined;

/**
 * Invoice image URL - provided by Taxamo.
 * @member {String} invoice_image_url
 */
Transaction.prototype['invoice_image_url'] = undefined;

/**
 * Invoice number.
 * @member {String} invoice_number
 */
Transaction.prototype['invoice_number'] = undefined;

/**
 * Invoice place of issue.
 * @member {String} invoice_place
 */
Transaction.prototype['invoice_place'] = undefined;

/**
 * Id generated by taxamo.
 * @member {String} key
 */
Transaction.prototype['key'] = undefined;

/**
 * Transaction kind: eu-b2c, eu-b2b, domestic, untaxed
 * @member {String} kind
 */
Transaction.prototype['kind'] = undefined;

/**
 * Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the 'manual' flag or use false value there and provide customer's ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.
 * @member {Boolean} manual
 */
Transaction.prototype['manual'] = undefined;

/**
 * Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.
 * @member {String} note
 */
Transaction.prototype['note'] = undefined;

/**
 * Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
 * @member {String} order_date
 */
Transaction.prototype['order_date'] = undefined;

/**
 * Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.
 * @member {String} original_transaction_key
 */
Transaction.prototype['original_transaction_key'] = undefined;

/**
 * Refunded tax amount.
 * @member {Number} refunded_tax_amount
 */
Transaction.prototype['refunded_tax_amount'] = undefined;

/**
 * Total amount refunde (including tax).
 * @member {Number} refunded_total_amount
 */
Transaction.prototype['refunded_total_amount'] = undefined;

/**
 * Transaction source software - e.g. plugin
 * @member {String} source
 */
Transaction.prototype['source'] = undefined;

/**
 * Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.
 * @member {String} status
 */
Transaction.prototype['status'] = undefined;

/**
 * Sub account identifier.
 * @member {String} sub_account_id
 */
Transaction.prototype['sub_account_id'] = undefined;

/**
 * Supply date in yyyy-MM-dd format.
 * @member {String} supply_date
 */
Transaction.prototype['supply_date'] = undefined;

/**
 * Tax amount of transaction.
 * @member {Number} tax_amount
 */
Transaction.prototype['tax_amount'] = undefined;

/**
 * Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
 * @member {String} tax_country_code
 */
Transaction.prototype['tax_country_code'] = undefined;

/**
 * @member {module:model/TaxDataSchema} tax_data
 */
Transaction.prototype['tax_data'] = undefined;

/**
 * If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
 * @member {Boolean} tax_deducted
 */
Transaction.prototype['tax_deducted'] = undefined;

/**
 * To which entity is the tax due.
 * @member {String} tax_entity_name
 */
Transaction.prototype['tax_entity_name'] = undefined;

/**
 * Tax number service identifier - if available for a given region and the region is enabled.
 * @member {String} tax_number_service
 */
Transaction.prototype['tax_number_service'] = undefined;

/**
 * Is tax calculation supported for a detected tax location?
 * @member {Boolean} tax_supported
 */
Transaction.prototype['tax_supported'] = undefined;

/**
 * Timezone name for tax transaction.
 * @member {String} tax_timezone
 */
Transaction.prototype['tax_timezone'] = undefined;

/**
 * Was this transaction created in test mode?
 * @member {Boolean} test
 */
Transaction.prototype['test'] = undefined;

/**
 * Total amount of transaction.
 * @member {Number} total_amount
 */
Transaction.prototype['total_amount'] = undefined;

/**
 * Transaction lines.
 * @member {Array.<module:model/TransactionLines>} transaction_lines
 */
Transaction.prototype['transaction_lines'] = undefined;

/**
 * Verification token
 * @member {String} verification_token
 */
Transaction.prototype['verification_token'] = undefined;






export default Transaction;

