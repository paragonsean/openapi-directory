/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIListTransactionsIn.h
 *
 * 
 */

#ifndef OAIListTransactionsIn_H
#define OAIListTransactionsIn_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIListTransactionsIn : public OAIObject {
public:
    OAIListTransactionsIn();
    OAIListTransactionsIn(QString json);
    ~OAIListTransactionsIn() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    QString getFilterText() const;
    void setFilterText(const QString &filter_text);
    bool is_filter_text_Set() const;
    bool is_filter_text_Valid() const;

    QString getFormat() const;
    void setFormat(const QString &format);
    bool is_format_Set() const;
    bool is_format_Valid() const;

    bool isHasNote() const;
    void setHasNote(const bool &has_note);
    bool is_has_note_Set() const;
    bool is_has_note_Valid() const;

    QString getInvoiceNumber() const;
    void setInvoiceNumber(const QString &invoice_number);
    bool is_invoice_number_Set() const;
    bool is_invoice_number_Valid() const;

    QString getKeyOrCustomId() const;
    void setKeyOrCustomId(const QString &key_or_custom_id);
    bool is_key_or_custom_id_Set() const;
    bool is_key_or_custom_id_Valid() const;

    qint32 getLimit() const;
    void setLimit(const qint32 &limit);
    bool is_limit_Set() const;
    bool is_limit_Valid() const;

    qint32 getOffset() const;
    void setOffset(const qint32 &offset);
    bool is_offset_Set() const;
    bool is_offset_Valid() const;

    QString getOrderDateFrom() const;
    void setOrderDateFrom(const QString &order_date_from);
    bool is_order_date_from_Set() const;
    bool is_order_date_from_Valid() const;

    QString getOrderDateTo() const;
    void setOrderDateTo(const QString &order_date_to);
    bool is_order_date_to_Set() const;
    bool is_order_date_to_Valid() const;

    QString getOriginalTransactionKey() const;
    void setOriginalTransactionKey(const QString &original_transaction_key);
    bool is_original_transaction_key_Set() const;
    bool is_original_transaction_key_Valid() const;

    bool isSortReverse() const;
    void setSortReverse(const bool &sort_reverse);
    bool is_sort_reverse_Set() const;
    bool is_sort_reverse_Valid() const;

    QString getStatuses() const;
    void setStatuses(const QString &statuses);
    bool is_statuses_Set() const;
    bool is_statuses_Valid() const;

    QString getTaxCountryCode() const;
    void setTaxCountryCode(const QString &tax_country_code);
    bool is_tax_country_code_Set() const;
    bool is_tax_country_code_Valid() const;

    QString getTaxCountryCodes() const;
    void setTaxCountryCodes(const QString &tax_country_codes);
    bool is_tax_country_codes_Set() const;
    bool is_tax_country_codes_Valid() const;

    QString getTotalAmountGreaterThan() const;
    void setTotalAmountGreaterThan(const QString &total_amount_greater_than);
    bool is_total_amount_greater_than_Set() const;
    bool is_total_amount_greater_than_Valid() const;

    QString getTotalAmountLessThan() const;
    void setTotalAmountLessThan(const QString &total_amount_less_than);
    bool is_total_amount_less_than_Set() const;
    bool is_total_amount_less_than_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    QString m_filter_text;
    bool m_filter_text_isSet;
    bool m_filter_text_isValid;

    QString m_format;
    bool m_format_isSet;
    bool m_format_isValid;

    bool m_has_note;
    bool m_has_note_isSet;
    bool m_has_note_isValid;

    QString m_invoice_number;
    bool m_invoice_number_isSet;
    bool m_invoice_number_isValid;

    QString m_key_or_custom_id;
    bool m_key_or_custom_id_isSet;
    bool m_key_or_custom_id_isValid;

    qint32 m_limit;
    bool m_limit_isSet;
    bool m_limit_isValid;

    qint32 m_offset;
    bool m_offset_isSet;
    bool m_offset_isValid;

    QString m_order_date_from;
    bool m_order_date_from_isSet;
    bool m_order_date_from_isValid;

    QString m_order_date_to;
    bool m_order_date_to_isSet;
    bool m_order_date_to_isValid;

    QString m_original_transaction_key;
    bool m_original_transaction_key_isSet;
    bool m_original_transaction_key_isValid;

    bool m_sort_reverse;
    bool m_sort_reverse_isSet;
    bool m_sort_reverse_isValid;

    QString m_statuses;
    bool m_statuses_isSet;
    bool m_statuses_isValid;

    QString m_tax_country_code;
    bool m_tax_country_code_isSet;
    bool m_tax_country_code_isValid;

    QString m_tax_country_codes;
    bool m_tax_country_codes_isSet;
    bool m_tax_country_codes_isValid;

    QString m_total_amount_greater_than;
    bool m_total_amount_greater_than_isSet;
    bool m_total_amount_greater_than_isValid;

    QString m_total_amount_less_than;
    bool m_total_amount_less_than_isSet;
    bool m_total_amount_less_than_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIListTransactionsIn)

#endif // OAIListTransactionsIn_H
