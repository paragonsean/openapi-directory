/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBy_status.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBy_status::OAIBy_status(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBy_status::OAIBy_status() {
    this->initializeModel();
}

OAIBy_status::~OAIBy_status() {}

void OAIBy_status::initializeModel() {

    m_c_isSet = false;
    m_c_isValid = false;

    m_n_isSet = false;
    m_n_isValid = false;
}

void OAIBy_status::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBy_status::fromJsonObject(QJsonObject json) {

    m_c_isValid = ::OpenAPI::fromJsonValue(m_c, json[QString("C")]);
    m_c_isSet = !json[QString("C")].isNull() && m_c_isValid;

    m_n_isValid = ::OpenAPI::fromJsonValue(m_n, json[QString("N")]);
    m_n_isSet = !json[QString("N")].isNull() && m_n_isValid;
}

QString OAIBy_status::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBy_status::asJsonObject() const {
    QJsonObject obj;
    if (m_c.size() > 0) {
        obj.insert(QString("C"), ::OpenAPI::toJsonValue(m_c));
    }
    if (m_n.size() > 0) {
        obj.insert(QString("N"), ::OpenAPI::toJsonValue(m_n));
    }
    return obj;
}

QList<OAIC> OAIBy_status::getC() const {
    return m_c;
}
void OAIBy_status::setC(const QList<OAIC> &c) {
    m_c = c;
    m_c_isSet = true;
}

bool OAIBy_status::is_c_Set() const{
    return m_c_isSet;
}

bool OAIBy_status::is_c_Valid() const{
    return m_c_isValid;
}

QList<OAIN> OAIBy_status::getN() const {
    return m_n;
}
void OAIBy_status::setN(const QList<OAIN> &n) {
    m_n = n;
    m_n_isSet = true;
}

bool OAIBy_status::is_n_Set() const{
    return m_n_isSet;
}

bool OAIBy_status::is_n_Valid() const{
    return m_n_isValid;
}

bool OAIBy_status::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_c.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_n.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBy_status::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
