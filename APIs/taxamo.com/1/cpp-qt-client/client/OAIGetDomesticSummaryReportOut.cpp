/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDomesticSummaryReportOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDomesticSummaryReportOut::OAIGetDomesticSummaryReportOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDomesticSummaryReportOut::OAIGetDomesticSummaryReportOut() {
    this->initializeModel();
}

OAIGetDomesticSummaryReportOut::~OAIGetDomesticSummaryReportOut() {}

void OAIGetDomesticSummaryReportOut::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_domestic_refunds_amount_isSet = false;
    m_domestic_refunds_amount_isValid = false;

    m_domestic_refunds_tax_amount_isSet = false;
    m_domestic_refunds_tax_amount_isValid = false;

    m_domestic_sales_amount_isSet = false;
    m_domestic_sales_amount_isValid = false;

    m_domestic_tax_amount_isSet = false;
    m_domestic_tax_amount_isValid = false;

    m_end_date_isSet = false;
    m_end_date_isValid = false;

    m_eu_tax_deducted_refunds_isSet = false;
    m_eu_tax_deducted_refunds_isValid = false;

    m_eu_tax_deducted_sales_isSet = false;
    m_eu_tax_deducted_sales_isValid = false;

    m_global_refunds_amount_isSet = false;
    m_global_refunds_amount_isValid = false;

    m_global_refunds_tax_amount_isSet = false;
    m_global_refunds_tax_amount_isValid = false;

    m_global_sales_amount_isSet = false;
    m_global_sales_amount_isValid = false;

    m_global_sales_tax_amount_isSet = false;
    m_global_sales_tax_amount_isValid = false;

    m_start_date_isSet = false;
    m_start_date_isValid = false;
}

void OAIGetDomesticSummaryReportOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDomesticSummaryReportOut::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_domestic_refunds_amount_isValid = ::OpenAPI::fromJsonValue(m_domestic_refunds_amount, json[QString("domestic_refunds_amount")]);
    m_domestic_refunds_amount_isSet = !json[QString("domestic_refunds_amount")].isNull() && m_domestic_refunds_amount_isValid;

    m_domestic_refunds_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_domestic_refunds_tax_amount, json[QString("domestic_refunds_tax_amount")]);
    m_domestic_refunds_tax_amount_isSet = !json[QString("domestic_refunds_tax_amount")].isNull() && m_domestic_refunds_tax_amount_isValid;

    m_domestic_sales_amount_isValid = ::OpenAPI::fromJsonValue(m_domestic_sales_amount, json[QString("domestic_sales_amount")]);
    m_domestic_sales_amount_isSet = !json[QString("domestic_sales_amount")].isNull() && m_domestic_sales_amount_isValid;

    m_domestic_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_domestic_tax_amount, json[QString("domestic_tax_amount")]);
    m_domestic_tax_amount_isSet = !json[QString("domestic_tax_amount")].isNull() && m_domestic_tax_amount_isValid;

    m_end_date_isValid = ::OpenAPI::fromJsonValue(m_end_date, json[QString("end_date")]);
    m_end_date_isSet = !json[QString("end_date")].isNull() && m_end_date_isValid;

    m_eu_tax_deducted_refunds_isValid = ::OpenAPI::fromJsonValue(m_eu_tax_deducted_refunds, json[QString("eu_tax_deducted_refunds")]);
    m_eu_tax_deducted_refunds_isSet = !json[QString("eu_tax_deducted_refunds")].isNull() && m_eu_tax_deducted_refunds_isValid;

    m_eu_tax_deducted_sales_isValid = ::OpenAPI::fromJsonValue(m_eu_tax_deducted_sales, json[QString("eu_tax_deducted_sales")]);
    m_eu_tax_deducted_sales_isSet = !json[QString("eu_tax_deducted_sales")].isNull() && m_eu_tax_deducted_sales_isValid;

    m_global_refunds_amount_isValid = ::OpenAPI::fromJsonValue(m_global_refunds_amount, json[QString("global_refunds_amount")]);
    m_global_refunds_amount_isSet = !json[QString("global_refunds_amount")].isNull() && m_global_refunds_amount_isValid;

    m_global_refunds_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_global_refunds_tax_amount, json[QString("global_refunds_tax_amount")]);
    m_global_refunds_tax_amount_isSet = !json[QString("global_refunds_tax_amount")].isNull() && m_global_refunds_tax_amount_isValid;

    m_global_sales_amount_isValid = ::OpenAPI::fromJsonValue(m_global_sales_amount, json[QString("global_sales_amount")]);
    m_global_sales_amount_isSet = !json[QString("global_sales_amount")].isNull() && m_global_sales_amount_isValid;

    m_global_sales_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_global_sales_tax_amount, json[QString("global_sales_tax_amount")]);
    m_global_sales_tax_amount_isSet = !json[QString("global_sales_tax_amount")].isNull() && m_global_sales_tax_amount_isValid;

    m_start_date_isValid = ::OpenAPI::fromJsonValue(m_start_date, json[QString("start_date")]);
    m_start_date_isSet = !json[QString("start_date")].isNull() && m_start_date_isValid;
}

QString OAIGetDomesticSummaryReportOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDomesticSummaryReportOut::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_domestic_refunds_amount_isSet) {
        obj.insert(QString("domestic_refunds_amount"), ::OpenAPI::toJsonValue(m_domestic_refunds_amount));
    }
    if (m_domestic_refunds_tax_amount_isSet) {
        obj.insert(QString("domestic_refunds_tax_amount"), ::OpenAPI::toJsonValue(m_domestic_refunds_tax_amount));
    }
    if (m_domestic_sales_amount_isSet) {
        obj.insert(QString("domestic_sales_amount"), ::OpenAPI::toJsonValue(m_domestic_sales_amount));
    }
    if (m_domestic_tax_amount_isSet) {
        obj.insert(QString("domestic_tax_amount"), ::OpenAPI::toJsonValue(m_domestic_tax_amount));
    }
    if (m_end_date_isSet) {
        obj.insert(QString("end_date"), ::OpenAPI::toJsonValue(m_end_date));
    }
    if (m_eu_tax_deducted_refunds_isSet) {
        obj.insert(QString("eu_tax_deducted_refunds"), ::OpenAPI::toJsonValue(m_eu_tax_deducted_refunds));
    }
    if (m_eu_tax_deducted_sales_isSet) {
        obj.insert(QString("eu_tax_deducted_sales"), ::OpenAPI::toJsonValue(m_eu_tax_deducted_sales));
    }
    if (m_global_refunds_amount_isSet) {
        obj.insert(QString("global_refunds_amount"), ::OpenAPI::toJsonValue(m_global_refunds_amount));
    }
    if (m_global_refunds_tax_amount_isSet) {
        obj.insert(QString("global_refunds_tax_amount"), ::OpenAPI::toJsonValue(m_global_refunds_tax_amount));
    }
    if (m_global_sales_amount_isSet) {
        obj.insert(QString("global_sales_amount"), ::OpenAPI::toJsonValue(m_global_sales_amount));
    }
    if (m_global_sales_tax_amount_isSet) {
        obj.insert(QString("global_sales_tax_amount"), ::OpenAPI::toJsonValue(m_global_sales_tax_amount));
    }
    if (m_start_date_isSet) {
        obj.insert(QString("start_date"), ::OpenAPI::toJsonValue(m_start_date));
    }
    return obj;
}

QString OAIGetDomesticSummaryReportOut::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGetDomesticSummaryReportOut::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

double OAIGetDomesticSummaryReportOut::getDomesticRefundsAmount() const {
    return m_domestic_refunds_amount;
}
void OAIGetDomesticSummaryReportOut::setDomesticRefundsAmount(const double &domestic_refunds_amount) {
    m_domestic_refunds_amount = domestic_refunds_amount;
    m_domestic_refunds_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_refunds_amount_Set() const{
    return m_domestic_refunds_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_refunds_amount_Valid() const{
    return m_domestic_refunds_amount_isValid;
}

double OAIGetDomesticSummaryReportOut::getDomesticRefundsTaxAmount() const {
    return m_domestic_refunds_tax_amount;
}
void OAIGetDomesticSummaryReportOut::setDomesticRefundsTaxAmount(const double &domestic_refunds_tax_amount) {
    m_domestic_refunds_tax_amount = domestic_refunds_tax_amount;
    m_domestic_refunds_tax_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_refunds_tax_amount_Set() const{
    return m_domestic_refunds_tax_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_refunds_tax_amount_Valid() const{
    return m_domestic_refunds_tax_amount_isValid;
}

double OAIGetDomesticSummaryReportOut::getDomesticSalesAmount() const {
    return m_domestic_sales_amount;
}
void OAIGetDomesticSummaryReportOut::setDomesticSalesAmount(const double &domestic_sales_amount) {
    m_domestic_sales_amount = domestic_sales_amount;
    m_domestic_sales_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_sales_amount_Set() const{
    return m_domestic_sales_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_sales_amount_Valid() const{
    return m_domestic_sales_amount_isValid;
}

double OAIGetDomesticSummaryReportOut::getDomesticTaxAmount() const {
    return m_domestic_tax_amount;
}
void OAIGetDomesticSummaryReportOut::setDomesticTaxAmount(const double &domestic_tax_amount) {
    m_domestic_tax_amount = domestic_tax_amount;
    m_domestic_tax_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_tax_amount_Set() const{
    return m_domestic_tax_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_domestic_tax_amount_Valid() const{
    return m_domestic_tax_amount_isValid;
}

QString OAIGetDomesticSummaryReportOut::getEndDate() const {
    return m_end_date;
}
void OAIGetDomesticSummaryReportOut::setEndDate(const QString &end_date) {
    m_end_date = end_date;
    m_end_date_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_end_date_Set() const{
    return m_end_date_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_end_date_Valid() const{
    return m_end_date_isValid;
}

double OAIGetDomesticSummaryReportOut::getEuTaxDeductedRefunds() const {
    return m_eu_tax_deducted_refunds;
}
void OAIGetDomesticSummaryReportOut::setEuTaxDeductedRefunds(const double &eu_tax_deducted_refunds) {
    m_eu_tax_deducted_refunds = eu_tax_deducted_refunds;
    m_eu_tax_deducted_refunds_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_eu_tax_deducted_refunds_Set() const{
    return m_eu_tax_deducted_refunds_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_eu_tax_deducted_refunds_Valid() const{
    return m_eu_tax_deducted_refunds_isValid;
}

double OAIGetDomesticSummaryReportOut::getEuTaxDeductedSales() const {
    return m_eu_tax_deducted_sales;
}
void OAIGetDomesticSummaryReportOut::setEuTaxDeductedSales(const double &eu_tax_deducted_sales) {
    m_eu_tax_deducted_sales = eu_tax_deducted_sales;
    m_eu_tax_deducted_sales_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_eu_tax_deducted_sales_Set() const{
    return m_eu_tax_deducted_sales_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_eu_tax_deducted_sales_Valid() const{
    return m_eu_tax_deducted_sales_isValid;
}

double OAIGetDomesticSummaryReportOut::getGlobalRefundsAmount() const {
    return m_global_refunds_amount;
}
void OAIGetDomesticSummaryReportOut::setGlobalRefundsAmount(const double &global_refunds_amount) {
    m_global_refunds_amount = global_refunds_amount;
    m_global_refunds_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_global_refunds_amount_Set() const{
    return m_global_refunds_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_global_refunds_amount_Valid() const{
    return m_global_refunds_amount_isValid;
}

double OAIGetDomesticSummaryReportOut::getGlobalRefundsTaxAmount() const {
    return m_global_refunds_tax_amount;
}
void OAIGetDomesticSummaryReportOut::setGlobalRefundsTaxAmount(const double &global_refunds_tax_amount) {
    m_global_refunds_tax_amount = global_refunds_tax_amount;
    m_global_refunds_tax_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_global_refunds_tax_amount_Set() const{
    return m_global_refunds_tax_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_global_refunds_tax_amount_Valid() const{
    return m_global_refunds_tax_amount_isValid;
}

double OAIGetDomesticSummaryReportOut::getGlobalSalesAmount() const {
    return m_global_sales_amount;
}
void OAIGetDomesticSummaryReportOut::setGlobalSalesAmount(const double &global_sales_amount) {
    m_global_sales_amount = global_sales_amount;
    m_global_sales_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_global_sales_amount_Set() const{
    return m_global_sales_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_global_sales_amount_Valid() const{
    return m_global_sales_amount_isValid;
}

double OAIGetDomesticSummaryReportOut::getGlobalSalesTaxAmount() const {
    return m_global_sales_tax_amount;
}
void OAIGetDomesticSummaryReportOut::setGlobalSalesTaxAmount(const double &global_sales_tax_amount) {
    m_global_sales_tax_amount = global_sales_tax_amount;
    m_global_sales_tax_amount_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_global_sales_tax_amount_Set() const{
    return m_global_sales_tax_amount_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_global_sales_tax_amount_Valid() const{
    return m_global_sales_tax_amount_isValid;
}

QString OAIGetDomesticSummaryReportOut::getStartDate() const {
    return m_start_date;
}
void OAIGetDomesticSummaryReportOut::setStartDate(const QString &start_date) {
    m_start_date = start_date;
    m_start_date_isSet = true;
}

bool OAIGetDomesticSummaryReportOut::is_start_date_Set() const{
    return m_start_date_isSet;
}

bool OAIGetDomesticSummaryReportOut::is_start_date_Valid() const{
    return m_start_date_isValid;
}

bool OAIGetDomesticSummaryReportOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_refunds_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_refunds_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_sales_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_domestic_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_tax_deducted_refunds_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_tax_deducted_sales_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_refunds_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_refunds_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_sales_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_global_sales_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDomesticSummaryReportOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
