/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateSimpleTaxIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateSimpleTaxIn::OAICalculateSimpleTaxIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateSimpleTaxIn::OAICalculateSimpleTaxIn() {
    this->initializeModel();
}

OAICalculateSimpleTaxIn::~OAICalculateSimpleTaxIn() {}

void OAICalculateSimpleTaxIn::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_buyer_credit_card_prefix_isSet = false;
    m_buyer_credit_card_prefix_isValid = false;

    m_buyer_tax_number_isSet = false;
    m_buyer_tax_number_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_force_country_code_isSet = false;
    m_force_country_code_isValid = false;

    m_invoice_address_city_isSet = false;
    m_invoice_address_city_isValid = false;

    m_invoice_address_postal_code_isSet = false;
    m_invoice_address_postal_code_isValid = false;

    m_invoice_address_region_isSet = false;
    m_invoice_address_region_isValid = false;

    m_order_date_isSet = false;
    m_order_date_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_tax_deducted_isSet = false;
    m_tax_deducted_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAICalculateSimpleTaxIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateSimpleTaxIn::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("billing_country_code")]);
    m_billing_country_code_isSet = !json[QString("billing_country_code")].isNull() && m_billing_country_code_isValid;

    m_buyer_credit_card_prefix_isValid = ::OpenAPI::fromJsonValue(m_buyer_credit_card_prefix, json[QString("buyer_credit_card_prefix")]);
    m_buyer_credit_card_prefix_isSet = !json[QString("buyer_credit_card_prefix")].isNull() && m_buyer_credit_card_prefix_isValid;

    m_buyer_tax_number_isValid = ::OpenAPI::fromJsonValue(m_buyer_tax_number, json[QString("buyer_tax_number")]);
    m_buyer_tax_number_isSet = !json[QString("buyer_tax_number")].isNull() && m_buyer_tax_number_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_force_country_code_isValid = ::OpenAPI::fromJsonValue(m_force_country_code, json[QString("force_country_code")]);
    m_force_country_code_isSet = !json[QString("force_country_code")].isNull() && m_force_country_code_isValid;

    m_invoice_address_city_isValid = ::OpenAPI::fromJsonValue(m_invoice_address_city, json[QString("invoice_address_city")]);
    m_invoice_address_city_isSet = !json[QString("invoice_address_city")].isNull() && m_invoice_address_city_isValid;

    m_invoice_address_postal_code_isValid = ::OpenAPI::fromJsonValue(m_invoice_address_postal_code, json[QString("invoice_address_postal_code")]);
    m_invoice_address_postal_code_isSet = !json[QString("invoice_address_postal_code")].isNull() && m_invoice_address_postal_code_isValid;

    m_invoice_address_region_isValid = ::OpenAPI::fromJsonValue(m_invoice_address_region, json[QString("invoice_address_region")]);
    m_invoice_address_region_isSet = !json[QString("invoice_address_region")].isNull() && m_invoice_address_region_isValid;

    m_order_date_isValid = ::OpenAPI::fromJsonValue(m_order_date, json[QString("order_date")]);
    m_order_date_isSet = !json[QString("order_date")].isNull() && m_order_date_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_tax_deducted_isValid = ::OpenAPI::fromJsonValue(m_tax_deducted, json[QString("tax_deducted")]);
    m_tax_deducted_isSet = !json[QString("tax_deducted")].isNull() && m_tax_deducted_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unit_price")]);
    m_unit_price_isSet = !json[QString("unit_price")].isNull() && m_unit_price_isValid;
}

QString OAICalculateSimpleTaxIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateSimpleTaxIn::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_billing_country_code_isSet) {
        obj.insert(QString("billing_country_code"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_buyer_credit_card_prefix_isSet) {
        obj.insert(QString("buyer_credit_card_prefix"), ::OpenAPI::toJsonValue(m_buyer_credit_card_prefix));
    }
    if (m_buyer_tax_number_isSet) {
        obj.insert(QString("buyer_tax_number"), ::OpenAPI::toJsonValue(m_buyer_tax_number));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_force_country_code_isSet) {
        obj.insert(QString("force_country_code"), ::OpenAPI::toJsonValue(m_force_country_code));
    }
    if (m_invoice_address_city_isSet) {
        obj.insert(QString("invoice_address_city"), ::OpenAPI::toJsonValue(m_invoice_address_city));
    }
    if (m_invoice_address_postal_code_isSet) {
        obj.insert(QString("invoice_address_postal_code"), ::OpenAPI::toJsonValue(m_invoice_address_postal_code));
    }
    if (m_invoice_address_region_isSet) {
        obj.insert(QString("invoice_address_region"), ::OpenAPI::toJsonValue(m_invoice_address_region));
    }
    if (m_order_date_isSet) {
        obj.insert(QString("order_date"), ::OpenAPI::toJsonValue(m_order_date));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_tax_deducted_isSet) {
        obj.insert(QString("tax_deducted"), ::OpenAPI::toJsonValue(m_tax_deducted));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unit_price"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

double OAICalculateSimpleTaxIn::getAmount() const {
    return m_amount;
}
void OAICalculateSimpleTaxIn::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICalculateSimpleTaxIn::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICalculateSimpleTaxIn::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAICalculateSimpleTaxIn::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAICalculateSimpleTaxIn::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAICalculateSimpleTaxIn::getBuyerCreditCardPrefix() const {
    return m_buyer_credit_card_prefix;
}
void OAICalculateSimpleTaxIn::setBuyerCreditCardPrefix(const QString &buyer_credit_card_prefix) {
    m_buyer_credit_card_prefix = buyer_credit_card_prefix;
    m_buyer_credit_card_prefix_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_buyer_credit_card_prefix_Set() const{
    return m_buyer_credit_card_prefix_isSet;
}

bool OAICalculateSimpleTaxIn::is_buyer_credit_card_prefix_Valid() const{
    return m_buyer_credit_card_prefix_isValid;
}

QString OAICalculateSimpleTaxIn::getBuyerTaxNumber() const {
    return m_buyer_tax_number;
}
void OAICalculateSimpleTaxIn::setBuyerTaxNumber(const QString &buyer_tax_number) {
    m_buyer_tax_number = buyer_tax_number;
    m_buyer_tax_number_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_buyer_tax_number_Set() const{
    return m_buyer_tax_number_isSet;
}

bool OAICalculateSimpleTaxIn::is_buyer_tax_number_Valid() const{
    return m_buyer_tax_number_isValid;
}

QString OAICalculateSimpleTaxIn::getCurrencyCode() const {
    return m_currency_code;
}
void OAICalculateSimpleTaxIn::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAICalculateSimpleTaxIn::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAICalculateSimpleTaxIn::getForceCountryCode() const {
    return m_force_country_code;
}
void OAICalculateSimpleTaxIn::setForceCountryCode(const QString &force_country_code) {
    m_force_country_code = force_country_code;
    m_force_country_code_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_force_country_code_Set() const{
    return m_force_country_code_isSet;
}

bool OAICalculateSimpleTaxIn::is_force_country_code_Valid() const{
    return m_force_country_code_isValid;
}

QString OAICalculateSimpleTaxIn::getInvoiceAddressCity() const {
    return m_invoice_address_city;
}
void OAICalculateSimpleTaxIn::setInvoiceAddressCity(const QString &invoice_address_city) {
    m_invoice_address_city = invoice_address_city;
    m_invoice_address_city_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_invoice_address_city_Set() const{
    return m_invoice_address_city_isSet;
}

bool OAICalculateSimpleTaxIn::is_invoice_address_city_Valid() const{
    return m_invoice_address_city_isValid;
}

QString OAICalculateSimpleTaxIn::getInvoiceAddressPostalCode() const {
    return m_invoice_address_postal_code;
}
void OAICalculateSimpleTaxIn::setInvoiceAddressPostalCode(const QString &invoice_address_postal_code) {
    m_invoice_address_postal_code = invoice_address_postal_code;
    m_invoice_address_postal_code_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_invoice_address_postal_code_Set() const{
    return m_invoice_address_postal_code_isSet;
}

bool OAICalculateSimpleTaxIn::is_invoice_address_postal_code_Valid() const{
    return m_invoice_address_postal_code_isValid;
}

QString OAICalculateSimpleTaxIn::getInvoiceAddressRegion() const {
    return m_invoice_address_region;
}
void OAICalculateSimpleTaxIn::setInvoiceAddressRegion(const QString &invoice_address_region) {
    m_invoice_address_region = invoice_address_region;
    m_invoice_address_region_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_invoice_address_region_Set() const{
    return m_invoice_address_region_isSet;
}

bool OAICalculateSimpleTaxIn::is_invoice_address_region_Valid() const{
    return m_invoice_address_region_isValid;
}

QString OAICalculateSimpleTaxIn::getOrderDate() const {
    return m_order_date;
}
void OAICalculateSimpleTaxIn::setOrderDate(const QString &order_date) {
    m_order_date = order_date;
    m_order_date_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_order_date_Set() const{
    return m_order_date_isSet;
}

bool OAICalculateSimpleTaxIn::is_order_date_Valid() const{
    return m_order_date_isValid;
}

QString OAICalculateSimpleTaxIn::getProductType() const {
    return m_product_type;
}
void OAICalculateSimpleTaxIn::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAICalculateSimpleTaxIn::is_product_type_Valid() const{
    return m_product_type_isValid;
}

double OAICalculateSimpleTaxIn::getQuantity() const {
    return m_quantity;
}
void OAICalculateSimpleTaxIn::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAICalculateSimpleTaxIn::is_quantity_Valid() const{
    return m_quantity_isValid;
}

bool OAICalculateSimpleTaxIn::isTaxDeducted() const {
    return m_tax_deducted;
}
void OAICalculateSimpleTaxIn::setTaxDeducted(const bool &tax_deducted) {
    m_tax_deducted = tax_deducted;
    m_tax_deducted_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_tax_deducted_Set() const{
    return m_tax_deducted_isSet;
}

bool OAICalculateSimpleTaxIn::is_tax_deducted_Valid() const{
    return m_tax_deducted_isValid;
}

double OAICalculateSimpleTaxIn::getTotalAmount() const {
    return m_total_amount;
}
void OAICalculateSimpleTaxIn::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAICalculateSimpleTaxIn::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

double OAICalculateSimpleTaxIn::getUnitPrice() const {
    return m_unit_price;
}
void OAICalculateSimpleTaxIn::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAICalculateSimpleTaxIn::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAICalculateSimpleTaxIn::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAICalculateSimpleTaxIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_credit_card_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address_postal_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_deducted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateSimpleTaxIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && true;
}

} // namespace OpenAPI
