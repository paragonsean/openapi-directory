/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIReport.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIReport::OAIReport(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIReport::OAIReport() {
    this->initializeModel();
}

OAIReport::~OAIReport() {}

void OAIReport::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_country_name_isSet = false;
    m_country_name_isValid = false;

    m_country_subdivision_isSet = false;
    m_country_subdivision_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_skip_moss_isSet = false;
    m_skip_moss_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_tax_region_isSet = false;
    m_tax_region_isValid = false;
}

void OAIReport::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIReport::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_country_name_isValid = ::OpenAPI::fromJsonValue(m_country_name, json[QString("country_name")]);
    m_country_name_isSet = !json[QString("country_name")].isNull() && m_country_name_isValid;

    m_country_subdivision_isValid = ::OpenAPI::fromJsonValue(m_country_subdivision, json[QString("country_subdivision")]);
    m_country_subdivision_isSet = !json[QString("country_subdivision")].isNull() && m_country_subdivision_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_skip_moss_isValid = ::OpenAPI::fromJsonValue(m_skip_moss, json[QString("skip_moss")]);
    m_skip_moss_isSet = !json[QString("skip_moss")].isNull() && m_skip_moss_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("tax_rate")]);
    m_tax_rate_isSet = !json[QString("tax_rate")].isNull() && m_tax_rate_isValid;

    m_tax_region_isValid = ::OpenAPI::fromJsonValue(m_tax_region, json[QString("tax_region")]);
    m_tax_region_isSet = !json[QString("tax_region")].isNull() && m_tax_region_isValid;
}

QString OAIReport::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIReport::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_country_name_isSet) {
        obj.insert(QString("country_name"), ::OpenAPI::toJsonValue(m_country_name));
    }
    if (m_country_subdivision_isSet) {
        obj.insert(QString("country_subdivision"), ::OpenAPI::toJsonValue(m_country_subdivision));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_skip_moss_isSet) {
        obj.insert(QString("skip_moss"), ::OpenAPI::toJsonValue(m_skip_moss));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("tax_rate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_tax_region_isSet) {
        obj.insert(QString("tax_region"), ::OpenAPI::toJsonValue(m_tax_region));
    }
    return obj;
}

double OAIReport::getAmount() const {
    return m_amount;
}
void OAIReport::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIReport::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIReport::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAIReport::getCountryCode() const {
    return m_country_code;
}
void OAIReport::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAIReport::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAIReport::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAIReport::getCountryName() const {
    return m_country_name;
}
void OAIReport::setCountryName(const QString &country_name) {
    m_country_name = country_name;
    m_country_name_isSet = true;
}

bool OAIReport::is_country_name_Set() const{
    return m_country_name_isSet;
}

bool OAIReport::is_country_name_Valid() const{
    return m_country_name_isValid;
}

QString OAIReport::getCountrySubdivision() const {
    return m_country_subdivision;
}
void OAIReport::setCountrySubdivision(const QString &country_subdivision) {
    m_country_subdivision = country_subdivision;
    m_country_subdivision_isSet = true;
}

bool OAIReport::is_country_subdivision_Set() const{
    return m_country_subdivision_isSet;
}

bool OAIReport::is_country_subdivision_Valid() const{
    return m_country_subdivision_isValid;
}

QString OAIReport::getCurrencyCode() const {
    return m_currency_code;
}
void OAIReport::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIReport::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIReport::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

bool OAIReport::isSkipMoss() const {
    return m_skip_moss;
}
void OAIReport::setSkipMoss(const bool &skip_moss) {
    m_skip_moss = skip_moss;
    m_skip_moss_isSet = true;
}

bool OAIReport::is_skip_moss_Set() const{
    return m_skip_moss_isSet;
}

bool OAIReport::is_skip_moss_Valid() const{
    return m_skip_moss_isValid;
}

double OAIReport::getTaxAmount() const {
    return m_tax_amount;
}
void OAIReport::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIReport::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIReport::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAIReport::getTaxRate() const {
    return m_tax_rate;
}
void OAIReport::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAIReport::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAIReport::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

QString OAIReport::getTaxRegion() const {
    return m_tax_region;
}
void OAIReport::setTaxRegion(const QString &tax_region) {
    m_tax_region = tax_region;
    m_tax_region_isSet = true;
}

bool OAIReport::is_tax_region_Set() const{
    return m_tax_region_isSet;
}

bool OAIReport::is_tax_region_Valid() const{
    return m_tax_region_isValid;
}

bool OAIReport::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_subdivision_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_skip_moss_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIReport::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
