/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountry_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountry_schema::OAICountry_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountry_schema::OAICountry_schema() {
    this->initializeModel();
}

OAICountry_schema::~OAICountry_schema() {}

void OAICountry_schema::initializeModel() {

    m_calling_code_isSet = false;
    m_calling_code_isValid = false;

    m_cca2_isSet = false;
    m_cca2_isValid = false;

    m_cca3_isSet = false;
    m_cca3_isValid = false;

    m_ccn3_isSet = false;
    m_ccn3_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_code_long_isSet = false;
    m_code_long_isValid = false;

    m_codenum_isSet = false;
    m_codenum_isValid = false;

    m_currency_isSet = false;
    m_currency_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_tax_number_country_code_isSet = false;
    m_tax_number_country_code_isValid = false;

    m_tax_region_isSet = false;
    m_tax_region_isValid = false;

    m_tax_supported_isSet = false;
    m_tax_supported_isValid = false;
}

void OAICountry_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountry_schema::fromJsonObject(QJsonObject json) {

    m_calling_code_isValid = ::OpenAPI::fromJsonValue(m_calling_code, json[QString("callingCode")]);
    m_calling_code_isSet = !json[QString("callingCode")].isNull() && m_calling_code_isValid;

    m_cca2_isValid = ::OpenAPI::fromJsonValue(m_cca2, json[QString("cca2")]);
    m_cca2_isSet = !json[QString("cca2")].isNull() && m_cca2_isValid;

    m_cca3_isValid = ::OpenAPI::fromJsonValue(m_cca3, json[QString("cca3")]);
    m_cca3_isSet = !json[QString("cca3")].isNull() && m_cca3_isValid;

    m_ccn3_isValid = ::OpenAPI::fromJsonValue(m_ccn3, json[QString("ccn3")]);
    m_ccn3_isSet = !json[QString("ccn3")].isNull() && m_ccn3_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_code_long_isValid = ::OpenAPI::fromJsonValue(m_code_long, json[QString("code_long")]);
    m_code_long_isSet = !json[QString("code_long")].isNull() && m_code_long_isValid;

    m_codenum_isValid = ::OpenAPI::fromJsonValue(m_codenum, json[QString("codenum")]);
    m_codenum_isSet = !json[QString("codenum")].isNull() && m_codenum_isValid;

    m_currency_isValid = ::OpenAPI::fromJsonValue(m_currency, json[QString("currency")]);
    m_currency_isSet = !json[QString("currency")].isNull() && m_currency_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_tax_number_country_code_isValid = ::OpenAPI::fromJsonValue(m_tax_number_country_code, json[QString("tax_number_country_code")]);
    m_tax_number_country_code_isSet = !json[QString("tax_number_country_code")].isNull() && m_tax_number_country_code_isValid;

    m_tax_region_isValid = ::OpenAPI::fromJsonValue(m_tax_region, json[QString("tax_region")]);
    m_tax_region_isSet = !json[QString("tax_region")].isNull() && m_tax_region_isValid;

    m_tax_supported_isValid = ::OpenAPI::fromJsonValue(m_tax_supported, json[QString("tax_supported")]);
    m_tax_supported_isSet = !json[QString("tax_supported")].isNull() && m_tax_supported_isValid;
}

QString OAICountry_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountry_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_calling_code.size() > 0) {
        obj.insert(QString("callingCode"), ::OpenAPI::toJsonValue(m_calling_code));
    }
    if (m_cca2_isSet) {
        obj.insert(QString("cca2"), ::OpenAPI::toJsonValue(m_cca2));
    }
    if (m_cca3_isSet) {
        obj.insert(QString("cca3"), ::OpenAPI::toJsonValue(m_cca3));
    }
    if (m_ccn3_isSet) {
        obj.insert(QString("ccn3"), ::OpenAPI::toJsonValue(m_ccn3));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_code_long_isSet) {
        obj.insert(QString("code_long"), ::OpenAPI::toJsonValue(m_code_long));
    }
    if (m_codenum_isSet) {
        obj.insert(QString("codenum"), ::OpenAPI::toJsonValue(m_codenum));
    }
    if (m_currency.size() > 0) {
        obj.insert(QString("currency"), ::OpenAPI::toJsonValue(m_currency));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_tax_number_country_code_isSet) {
        obj.insert(QString("tax_number_country_code"), ::OpenAPI::toJsonValue(m_tax_number_country_code));
    }
    if (m_tax_region_isSet) {
        obj.insert(QString("tax_region"), ::OpenAPI::toJsonValue(m_tax_region));
    }
    if (m_tax_supported_isSet) {
        obj.insert(QString("tax_supported"), ::OpenAPI::toJsonValue(m_tax_supported));
    }
    return obj;
}

QList<QString> OAICountry_schema::getCallingCode() const {
    return m_calling_code;
}
void OAICountry_schema::setCallingCode(const QList<QString> &calling_code) {
    m_calling_code = calling_code;
    m_calling_code_isSet = true;
}

bool OAICountry_schema::is_calling_code_Set() const{
    return m_calling_code_isSet;
}

bool OAICountry_schema::is_calling_code_Valid() const{
    return m_calling_code_isValid;
}

QString OAICountry_schema::getCca2() const {
    return m_cca2;
}
void OAICountry_schema::setCca2(const QString &cca2) {
    m_cca2 = cca2;
    m_cca2_isSet = true;
}

bool OAICountry_schema::is_cca2_Set() const{
    return m_cca2_isSet;
}

bool OAICountry_schema::is_cca2_Valid() const{
    return m_cca2_isValid;
}

QString OAICountry_schema::getCca3() const {
    return m_cca3;
}
void OAICountry_schema::setCca3(const QString &cca3) {
    m_cca3 = cca3;
    m_cca3_isSet = true;
}

bool OAICountry_schema::is_cca3_Set() const{
    return m_cca3_isSet;
}

bool OAICountry_schema::is_cca3_Valid() const{
    return m_cca3_isValid;
}

QString OAICountry_schema::getCcn3() const {
    return m_ccn3;
}
void OAICountry_schema::setCcn3(const QString &ccn3) {
    m_ccn3 = ccn3;
    m_ccn3_isSet = true;
}

bool OAICountry_schema::is_ccn3_Set() const{
    return m_ccn3_isSet;
}

bool OAICountry_schema::is_ccn3_Valid() const{
    return m_ccn3_isValid;
}

QString OAICountry_schema::getCode() const {
    return m_code;
}
void OAICountry_schema::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICountry_schema::is_code_Set() const{
    return m_code_isSet;
}

bool OAICountry_schema::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICountry_schema::getCodeLong() const {
    return m_code_long;
}
void OAICountry_schema::setCodeLong(const QString &code_long) {
    m_code_long = code_long;
    m_code_long_isSet = true;
}

bool OAICountry_schema::is_code_long_Set() const{
    return m_code_long_isSet;
}

bool OAICountry_schema::is_code_long_Valid() const{
    return m_code_long_isValid;
}

QString OAICountry_schema::getCodenum() const {
    return m_codenum;
}
void OAICountry_schema::setCodenum(const QString &codenum) {
    m_codenum = codenum;
    m_codenum_isSet = true;
}

bool OAICountry_schema::is_codenum_Set() const{
    return m_codenum_isSet;
}

bool OAICountry_schema::is_codenum_Valid() const{
    return m_codenum_isValid;
}

QList<QString> OAICountry_schema::getCurrency() const {
    return m_currency;
}
void OAICountry_schema::setCurrency(const QList<QString> &currency) {
    m_currency = currency;
    m_currency_isSet = true;
}

bool OAICountry_schema::is_currency_Set() const{
    return m_currency_isSet;
}

bool OAICountry_schema::is_currency_Valid() const{
    return m_currency_isValid;
}

QString OAICountry_schema::getName() const {
    return m_name;
}
void OAICountry_schema::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICountry_schema::is_name_Set() const{
    return m_name_isSet;
}

bool OAICountry_schema::is_name_Valid() const{
    return m_name_isValid;
}

QString OAICountry_schema::getTaxNumberCountryCode() const {
    return m_tax_number_country_code;
}
void OAICountry_schema::setTaxNumberCountryCode(const QString &tax_number_country_code) {
    m_tax_number_country_code = tax_number_country_code;
    m_tax_number_country_code_isSet = true;
}

bool OAICountry_schema::is_tax_number_country_code_Set() const{
    return m_tax_number_country_code_isSet;
}

bool OAICountry_schema::is_tax_number_country_code_Valid() const{
    return m_tax_number_country_code_isValid;
}

QString OAICountry_schema::getTaxRegion() const {
    return m_tax_region;
}
void OAICountry_schema::setTaxRegion(const QString &tax_region) {
    m_tax_region = tax_region;
    m_tax_region_isSet = true;
}

bool OAICountry_schema::is_tax_region_Set() const{
    return m_tax_region_isSet;
}

bool OAICountry_schema::is_tax_region_Valid() const{
    return m_tax_region_isValid;
}

bool OAICountry_schema::isTaxSupported() const {
    return m_tax_supported;
}
void OAICountry_schema::setTaxSupported(const bool &tax_supported) {
    m_tax_supported = tax_supported;
    m_tax_supported_isSet = true;
}

bool OAICountry_schema::is_tax_supported_Set() const{
    return m_tax_supported_isSet;
}

bool OAICountry_schema::is_tax_supported_Valid() const{
    return m_tax_supported_isValid;
}

bool OAICountry_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_calling_code.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_cca2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_cca3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_ccn3_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_long_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_codenum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_number_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_region_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountry_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
