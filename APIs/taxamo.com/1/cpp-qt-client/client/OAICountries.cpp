/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICountries.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICountries::OAICountries(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICountries::OAICountries() {
    this->initializeModel();
}

OAICountries::~OAICountries() {}

void OAICountries::initializeModel() {

    m_by_2003_rules_isSet = false;
    m_by_2003_rules_isValid = false;

    m_by_billing_isSet = false;
    m_by_billing_isValid = false;

    m_by_cc_isSet = false;
    m_by_cc_isValid = false;

    m_by_ip_isSet = false;
    m_by_ip_isValid = false;

    m_by_tax_number_isSet = false;
    m_by_tax_number_isValid = false;

    m_by_token_isSet = false;
    m_by_token_isValid = false;

    m_detected_isSet = false;
    m_detected_isValid = false;

    m_forced_isSet = false;
    m_forced_isValid = false;

    m_guessed_from_ip_isSet = false;
    m_guessed_from_ip_isValid = false;

    m_other_commercially_relevant_info_isSet = false;
    m_other_commercially_relevant_info_isValid = false;

    m_self_declaration_isSet = false;
    m_self_declaration_isValid = false;
}

void OAICountries::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICountries::fromJsonObject(QJsonObject json) {

    m_by_2003_rules_isValid = ::OpenAPI::fromJsonValue(m_by_2003_rules, json[QString("by_2003_rules")]);
    m_by_2003_rules_isSet = !json[QString("by_2003_rules")].isNull() && m_by_2003_rules_isValid;

    m_by_billing_isValid = ::OpenAPI::fromJsonValue(m_by_billing, json[QString("by_billing")]);
    m_by_billing_isSet = !json[QString("by_billing")].isNull() && m_by_billing_isValid;

    m_by_cc_isValid = ::OpenAPI::fromJsonValue(m_by_cc, json[QString("by_cc")]);
    m_by_cc_isSet = !json[QString("by_cc")].isNull() && m_by_cc_isValid;

    m_by_ip_isValid = ::OpenAPI::fromJsonValue(m_by_ip, json[QString("by_ip")]);
    m_by_ip_isSet = !json[QString("by_ip")].isNull() && m_by_ip_isValid;

    m_by_tax_number_isValid = ::OpenAPI::fromJsonValue(m_by_tax_number, json[QString("by_tax_number")]);
    m_by_tax_number_isSet = !json[QString("by_tax_number")].isNull() && m_by_tax_number_isValid;

    m_by_token_isValid = ::OpenAPI::fromJsonValue(m_by_token, json[QString("by_token")]);
    m_by_token_isSet = !json[QString("by_token")].isNull() && m_by_token_isValid;

    m_detected_isValid = ::OpenAPI::fromJsonValue(m_detected, json[QString("detected")]);
    m_detected_isSet = !json[QString("detected")].isNull() && m_detected_isValid;

    m_forced_isValid = ::OpenAPI::fromJsonValue(m_forced, json[QString("forced")]);
    m_forced_isSet = !json[QString("forced")].isNull() && m_forced_isValid;

    m_guessed_from_ip_isValid = ::OpenAPI::fromJsonValue(m_guessed_from_ip, json[QString("guessed_from_ip")]);
    m_guessed_from_ip_isSet = !json[QString("guessed_from_ip")].isNull() && m_guessed_from_ip_isValid;

    m_other_commercially_relevant_info_isValid = ::OpenAPI::fromJsonValue(m_other_commercially_relevant_info, json[QString("other_commercially_relevant_info")]);
    m_other_commercially_relevant_info_isSet = !json[QString("other_commercially_relevant_info")].isNull() && m_other_commercially_relevant_info_isValid;

    m_self_declaration_isValid = ::OpenAPI::fromJsonValue(m_self_declaration, json[QString("self_declaration")]);
    m_self_declaration_isSet = !json[QString("self_declaration")].isNull() && m_self_declaration_isValid;
}

QString OAICountries::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICountries::asJsonObject() const {
    QJsonObject obj;
    if (m_by_2003_rules.isSet()) {
        obj.insert(QString("by_2003_rules"), ::OpenAPI::toJsonValue(m_by_2003_rules));
    }
    if (m_by_billing.isSet()) {
        obj.insert(QString("by_billing"), ::OpenAPI::toJsonValue(m_by_billing));
    }
    if (m_by_cc.isSet()) {
        obj.insert(QString("by_cc"), ::OpenAPI::toJsonValue(m_by_cc));
    }
    if (m_by_ip.isSet()) {
        obj.insert(QString("by_ip"), ::OpenAPI::toJsonValue(m_by_ip));
    }
    if (m_by_tax_number.isSet()) {
        obj.insert(QString("by_tax_number"), ::OpenAPI::toJsonValue(m_by_tax_number));
    }
    if (m_by_token.isSet()) {
        obj.insert(QString("by_token"), ::OpenAPI::toJsonValue(m_by_token));
    }
    if (m_detected.isSet()) {
        obj.insert(QString("detected"), ::OpenAPI::toJsonValue(m_detected));
    }
    if (m_forced.isSet()) {
        obj.insert(QString("forced"), ::OpenAPI::toJsonValue(m_forced));
    }
    if (m_guessed_from_ip.isSet()) {
        obj.insert(QString("guessed_from_ip"), ::OpenAPI::toJsonValue(m_guessed_from_ip));
    }
    if (m_other_commercially_relevant_info.isSet()) {
        obj.insert(QString("other_commercially_relevant_info"), ::OpenAPI::toJsonValue(m_other_commercially_relevant_info));
    }
    if (m_self_declaration.isSet()) {
        obj.insert(QString("self_declaration"), ::OpenAPI::toJsonValue(m_self_declaration));
    }
    return obj;
}

OAICountry_schema OAICountries::getBy2003Rules() const {
    return m_by_2003_rules;
}
void OAICountries::setBy2003Rules(const OAICountry_schema &by_2003_rules) {
    m_by_2003_rules = by_2003_rules;
    m_by_2003_rules_isSet = true;
}

bool OAICountries::is_by_2003_rules_Set() const{
    return m_by_2003_rules_isSet;
}

bool OAICountries::is_by_2003_rules_Valid() const{
    return m_by_2003_rules_isValid;
}

OAICountry_schema OAICountries::getByBilling() const {
    return m_by_billing;
}
void OAICountries::setByBilling(const OAICountry_schema &by_billing) {
    m_by_billing = by_billing;
    m_by_billing_isSet = true;
}

bool OAICountries::is_by_billing_Set() const{
    return m_by_billing_isSet;
}

bool OAICountries::is_by_billing_Valid() const{
    return m_by_billing_isValid;
}

OAICountry_schema OAICountries::getByCc() const {
    return m_by_cc;
}
void OAICountries::setByCc(const OAICountry_schema &by_cc) {
    m_by_cc = by_cc;
    m_by_cc_isSet = true;
}

bool OAICountries::is_by_cc_Set() const{
    return m_by_cc_isSet;
}

bool OAICountries::is_by_cc_Valid() const{
    return m_by_cc_isValid;
}

OAICountry_schema OAICountries::getByIp() const {
    return m_by_ip;
}
void OAICountries::setByIp(const OAICountry_schema &by_ip) {
    m_by_ip = by_ip;
    m_by_ip_isSet = true;
}

bool OAICountries::is_by_ip_Set() const{
    return m_by_ip_isSet;
}

bool OAICountries::is_by_ip_Valid() const{
    return m_by_ip_isValid;
}

OAICountry_schema OAICountries::getByTaxNumber() const {
    return m_by_tax_number;
}
void OAICountries::setByTaxNumber(const OAICountry_schema &by_tax_number) {
    m_by_tax_number = by_tax_number;
    m_by_tax_number_isSet = true;
}

bool OAICountries::is_by_tax_number_Set() const{
    return m_by_tax_number_isSet;
}

bool OAICountries::is_by_tax_number_Valid() const{
    return m_by_tax_number_isValid;
}

OAICountry_schema OAICountries::getByToken() const {
    return m_by_token;
}
void OAICountries::setByToken(const OAICountry_schema &by_token) {
    m_by_token = by_token;
    m_by_token_isSet = true;
}

bool OAICountries::is_by_token_Set() const{
    return m_by_token_isSet;
}

bool OAICountries::is_by_token_Valid() const{
    return m_by_token_isValid;
}

OAICountry_schema OAICountries::getDetected() const {
    return m_detected;
}
void OAICountries::setDetected(const OAICountry_schema &detected) {
    m_detected = detected;
    m_detected_isSet = true;
}

bool OAICountries::is_detected_Set() const{
    return m_detected_isSet;
}

bool OAICountries::is_detected_Valid() const{
    return m_detected_isValid;
}

OAICountry_schema OAICountries::getForced() const {
    return m_forced;
}
void OAICountries::setForced(const OAICountry_schema &forced) {
    m_forced = forced;
    m_forced_isSet = true;
}

bool OAICountries::is_forced_Set() const{
    return m_forced_isSet;
}

bool OAICountries::is_forced_Valid() const{
    return m_forced_isValid;
}

OAICountry_schema OAICountries::getGuessedFromIp() const {
    return m_guessed_from_ip;
}
void OAICountries::setGuessedFromIp(const OAICountry_schema &guessed_from_ip) {
    m_guessed_from_ip = guessed_from_ip;
    m_guessed_from_ip_isSet = true;
}

bool OAICountries::is_guessed_from_ip_Set() const{
    return m_guessed_from_ip_isSet;
}

bool OAICountries::is_guessed_from_ip_Valid() const{
    return m_guessed_from_ip_isValid;
}

OAICountry_schema OAICountries::getOtherCommerciallyRelevantInfo() const {
    return m_other_commercially_relevant_info;
}
void OAICountries::setOtherCommerciallyRelevantInfo(const OAICountry_schema &other_commercially_relevant_info) {
    m_other_commercially_relevant_info = other_commercially_relevant_info;
    m_other_commercially_relevant_info_isSet = true;
}

bool OAICountries::is_other_commercially_relevant_info_Set() const{
    return m_other_commercially_relevant_info_isSet;
}

bool OAICountries::is_other_commercially_relevant_info_Valid() const{
    return m_other_commercially_relevant_info_isValid;
}

OAICountry_schema OAICountries::getSelfDeclaration() const {
    return m_self_declaration;
}
void OAICountries::setSelfDeclaration(const OAICountry_schema &self_declaration) {
    m_self_declaration = self_declaration;
    m_self_declaration_isSet = true;
}

bool OAICountries::is_self_declaration_Set() const{
    return m_self_declaration_isSet;
}

bool OAICountries::is_self_declaration_Valid() const{
    return m_self_declaration_isValid;
}

bool OAICountries::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_by_2003_rules.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_billing.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_cc.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_tax_number.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_by_token.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_detected.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_forced.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_guessed_from_ip.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_other_commercially_relevant_info.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_self_declaration.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICountries::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
