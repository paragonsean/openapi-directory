/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetDetailedRefundsIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetDetailedRefundsIn::OAIGetDetailedRefundsIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetDetailedRefundsIn::OAIGetDetailedRefundsIn() {
    this->initializeModel();
}

OAIGetDetailedRefundsIn::~OAIGetDetailedRefundsIn() {}

void OAIGetDetailedRefundsIn::initializeModel() {

    m_country_codes_isSet = false;
    m_country_codes_isValid = false;

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_limit_isSet = false;
    m_limit_isValid = false;

    m_offset_isSet = false;
    m_offset_isValid = false;
}

void OAIGetDetailedRefundsIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetDetailedRefundsIn::fromJsonObject(QJsonObject json) {

    m_country_codes_isValid = ::OpenAPI::fromJsonValue(m_country_codes, json[QString("country_codes")]);
    m_country_codes_isSet = !json[QString("country_codes")].isNull() && m_country_codes_isValid;

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("date_from")]);
    m_date_from_isSet = !json[QString("date_from")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("date_to")]);
    m_date_to_isSet = !json[QString("date_to")].isNull() && m_date_to_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_limit_isValid = ::OpenAPI::fromJsonValue(m_limit, json[QString("limit")]);
    m_limit_isSet = !json[QString("limit")].isNull() && m_limit_isValid;

    m_offset_isValid = ::OpenAPI::fromJsonValue(m_offset, json[QString("offset")]);
    m_offset_isSet = !json[QString("offset")].isNull() && m_offset_isValid;
}

QString OAIGetDetailedRefundsIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetDetailedRefundsIn::asJsonObject() const {
    QJsonObject obj;
    if (m_country_codes_isSet) {
        obj.insert(QString("country_codes"), ::OpenAPI::toJsonValue(m_country_codes));
    }
    if (m_date_from_isSet) {
        obj.insert(QString("date_from"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("date_to"), ::OpenAPI::toJsonValue(m_date_to));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_limit_isSet) {
        obj.insert(QString("limit"), ::OpenAPI::toJsonValue(m_limit));
    }
    if (m_offset_isSet) {
        obj.insert(QString("offset"), ::OpenAPI::toJsonValue(m_offset));
    }
    return obj;
}

QString OAIGetDetailedRefundsIn::getCountryCodes() const {
    return m_country_codes;
}
void OAIGetDetailedRefundsIn::setCountryCodes(const QString &country_codes) {
    m_country_codes = country_codes;
    m_country_codes_isSet = true;
}

bool OAIGetDetailedRefundsIn::is_country_codes_Set() const{
    return m_country_codes_isSet;
}

bool OAIGetDetailedRefundsIn::is_country_codes_Valid() const{
    return m_country_codes_isValid;
}

QString OAIGetDetailedRefundsIn::getDateFrom() const {
    return m_date_from;
}
void OAIGetDetailedRefundsIn::setDateFrom(const QString &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAIGetDetailedRefundsIn::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIGetDetailedRefundsIn::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAIGetDetailedRefundsIn::getDateTo() const {
    return m_date_to;
}
void OAIGetDetailedRefundsIn::setDateTo(const QString &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAIGetDetailedRefundsIn::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAIGetDetailedRefundsIn::is_date_to_Valid() const{
    return m_date_to_isValid;
}

QString OAIGetDetailedRefundsIn::getFormat() const {
    return m_format;
}
void OAIGetDetailedRefundsIn::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGetDetailedRefundsIn::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGetDetailedRefundsIn::is_format_Valid() const{
    return m_format_isValid;
}

double OAIGetDetailedRefundsIn::getLimit() const {
    return m_limit;
}
void OAIGetDetailedRefundsIn::setLimit(const double &limit) {
    m_limit = limit;
    m_limit_isSet = true;
}

bool OAIGetDetailedRefundsIn::is_limit_Set() const{
    return m_limit_isSet;
}

bool OAIGetDetailedRefundsIn::is_limit_Valid() const{
    return m_limit_isValid;
}

double OAIGetDetailedRefundsIn::getOffset() const {
    return m_offset;
}
void OAIGetDetailedRefundsIn::setOffset(const double &offset) {
    m_offset = offset;
    m_offset_isSet = true;
}

bool OAIGetDetailedRefundsIn::is_offset_Set() const{
    return m_offset_isSet;
}

bool OAIGetDetailedRefundsIn::is_offset_Valid() const{
    return m_offset_isValid;
}

bool OAIGetDetailedRefundsIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country_codes_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_limit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_offset_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetDetailedRefundsIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
