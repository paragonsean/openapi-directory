/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIReportingApi_H
#define OAI_OAIReportingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIGetDomesticSummaryReportOut.h"
#include "OAIGetEuViesReportOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIReportingApi : public QObject {
    Q_OBJECT

public:
    OAIReportingApi(const int timeOut = 0);
    ~OAIReportingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  country_code QString [required]
    * @param[in]  start_month QString [required]
    * @param[in]  end_month QString [required]
    * @param[in]  format QString [optional]
    * @param[in]  currency_code QString [optional]
    * @param[in]  fx_date_type QString [optional]
    */
    virtual void getDomesticSummaryReport(const QString &country_code, const QString &start_month, const QString &end_month, const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fx_date_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  end_month QString [required]
    * @param[in]  start_month QString [required]
    * @param[in]  eu_country_code QString [required]
    * @param[in]  period_length QString [optional]
    * @param[in]  lff_sequence_number QString [optional]
    * @param[in]  transformation QString [optional]
    * @param[in]  currency_code QString [optional]
    * @param[in]  tax_id QString [optional]
    * @param[in]  fx_date_type QString [optional]
    * @param[in]  format QString [optional]
    */
    virtual void getEuViesReport(const QString &end_month, const QString &start_month, const QString &eu_country_code, const ::OpenAPI::OptionalParam<QString> &period_length = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &lff_sequence_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &transformation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tax_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fx_date_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getDomesticSummaryReportCallback(OAIHttpRequestWorker *worker);
    void getEuViesReportCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getDomesticSummaryReportSignal(OAIGetDomesticSummaryReportOut summary);
    void getEuViesReportSignal(OAIGetEuViesReportOut summary);


    void getDomesticSummaryReportSignalFull(OAIHttpRequestWorker *worker, OAIGetDomesticSummaryReportOut summary);
    void getEuViesReportSignalFull(OAIHttpRequestWorker *worker, OAIGetEuViesReportOut summary);

    Q_DECL_DEPRECATED_X("Use getDomesticSummaryReportSignalError() instead")
    void getDomesticSummaryReportSignalE(OAIGetDomesticSummaryReportOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomesticSummaryReportSignalError(OAIGetDomesticSummaryReportOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEuViesReportSignalError() instead")
    void getEuViesReportSignalE(OAIGetEuViesReportOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEuViesReportSignalError(OAIGetEuViesReportOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getDomesticSummaryReportSignalErrorFull() instead")
    void getDomesticSummaryReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getDomesticSummaryReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEuViesReportSignalErrorFull() instead")
    void getEuViesReportSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEuViesReportSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
