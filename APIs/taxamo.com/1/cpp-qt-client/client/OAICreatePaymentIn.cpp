/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreatePaymentIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreatePaymentIn::OAICreatePaymentIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreatePaymentIn::OAICreatePaymentIn() {
    this->initializeModel();
}

OAICreatePaymentIn::~OAICreatePaymentIn() {}

void OAICreatePaymentIn::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_payment_information_isSet = false;
    m_payment_information_isValid = false;

    m_payment_timestamp_isSet = false;
    m_payment_timestamp_isValid = false;
}

void OAICreatePaymentIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreatePaymentIn::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_payment_information_isValid = ::OpenAPI::fromJsonValue(m_payment_information, json[QString("payment_information")]);
    m_payment_information_isSet = !json[QString("payment_information")].isNull() && m_payment_information_isValid;

    m_payment_timestamp_isValid = ::OpenAPI::fromJsonValue(m_payment_timestamp, json[QString("payment_timestamp")]);
    m_payment_timestamp_isSet = !json[QString("payment_timestamp")].isNull() && m_payment_timestamp_isValid;
}

QString OAICreatePaymentIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreatePaymentIn::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_payment_information_isSet) {
        obj.insert(QString("payment_information"), ::OpenAPI::toJsonValue(m_payment_information));
    }
    if (m_payment_timestamp_isSet) {
        obj.insert(QString("payment_timestamp"), ::OpenAPI::toJsonValue(m_payment_timestamp));
    }
    return obj;
}

double OAICreatePaymentIn::getAmount() const {
    return m_amount;
}
void OAICreatePaymentIn::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICreatePaymentIn::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICreatePaymentIn::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICreatePaymentIn::getPaymentInformation() const {
    return m_payment_information;
}
void OAICreatePaymentIn::setPaymentInformation(const QString &payment_information) {
    m_payment_information = payment_information;
    m_payment_information_isSet = true;
}

bool OAICreatePaymentIn::is_payment_information_Set() const{
    return m_payment_information_isSet;
}

bool OAICreatePaymentIn::is_payment_information_Valid() const{
    return m_payment_information_isValid;
}

QString OAICreatePaymentIn::getPaymentTimestamp() const {
    return m_payment_timestamp;
}
void OAICreatePaymentIn::setPaymentTimestamp(const QString &payment_timestamp) {
    m_payment_timestamp = payment_timestamp;
    m_payment_timestamp_isSet = true;
}

bool OAICreatePaymentIn::is_payment_timestamp_Set() const{
    return m_payment_timestamp_isSet;
}

bool OAICreatePaymentIn::is_payment_timestamp_Valid() const{
    return m_payment_timestamp_isValid;
}

bool OAICreatePaymentIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_information_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_payment_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreatePaymentIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_amount_isValid && true;
}

} // namespace OpenAPI
