/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetRefundsIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetRefundsIn::OAIGetRefundsIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetRefundsIn::OAIGetRefundsIn() {
    this->initializeModel();
}

OAIGetRefundsIn::~OAIGetRefundsIn() {}

void OAIGetRefundsIn::initializeModel() {

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_moss_country_code_isSet = false;
    m_moss_country_code_isValid = false;

    m_tax_region_isSet = false;
    m_tax_region_isValid = false;
}

void OAIGetRefundsIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetRefundsIn::fromJsonObject(QJsonObject json) {

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("date_from")]);
    m_date_from_isSet = !json[QString("date_from")].isNull() && m_date_from_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_moss_country_code_isValid = ::OpenAPI::fromJsonValue(m_moss_country_code, json[QString("moss_country_code")]);
    m_moss_country_code_isSet = !json[QString("moss_country_code")].isNull() && m_moss_country_code_isValid;

    m_tax_region_isValid = ::OpenAPI::fromJsonValue(m_tax_region, json[QString("tax_region")]);
    m_tax_region_isSet = !json[QString("tax_region")].isNull() && m_tax_region_isValid;
}

QString OAIGetRefundsIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetRefundsIn::asJsonObject() const {
    QJsonObject obj;
    if (m_date_from_isSet) {
        obj.insert(QString("date_from"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_moss_country_code_isSet) {
        obj.insert(QString("moss_country_code"), ::OpenAPI::toJsonValue(m_moss_country_code));
    }
    if (m_tax_region_isSet) {
        obj.insert(QString("tax_region"), ::OpenAPI::toJsonValue(m_tax_region));
    }
    return obj;
}

QString OAIGetRefundsIn::getDateFrom() const {
    return m_date_from;
}
void OAIGetRefundsIn::setDateFrom(const QString &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAIGetRefundsIn::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIGetRefundsIn::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAIGetRefundsIn::getFormat() const {
    return m_format;
}
void OAIGetRefundsIn::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGetRefundsIn::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGetRefundsIn::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIGetRefundsIn::getMossCountryCode() const {
    return m_moss_country_code;
}
void OAIGetRefundsIn::setMossCountryCode(const QString &moss_country_code) {
    m_moss_country_code = moss_country_code;
    m_moss_country_code_isSet = true;
}

bool OAIGetRefundsIn::is_moss_country_code_Set() const{
    return m_moss_country_code_isSet;
}

bool OAIGetRefundsIn::is_moss_country_code_Valid() const{
    return m_moss_country_code_isValid;
}

QString OAIGetRefundsIn::getTaxRegion() const {
    return m_tax_region;
}
void OAIGetRefundsIn::setTaxRegion(const QString &tax_region) {
    m_tax_region = tax_region;
    m_tax_region_isSet = true;
}

bool OAIGetRefundsIn::is_tax_region_Set() const{
    return m_tax_region_isSet;
}

bool OAIGetRefundsIn::is_tax_region_Valid() const{
    return m_tax_region_isValid;
}

bool OAIGetRefundsIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moss_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetRefundsIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_from_isValid && true;
}

} // namespace OpenAPI
