/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUs_tax_exemption_certificate_details_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUs_tax_exemption_certificate_details_schema::OAIUs_tax_exemption_certificate_details_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUs_tax_exemption_certificate_details_schema::OAIUs_tax_exemption_certificate_details_schema() {
    this->initializeModel();
}

OAIUs_tax_exemption_certificate_details_schema::~OAIUs_tax_exemption_certificate_details_schema() {}

void OAIUs_tax_exemption_certificate_details_schema::initializeModel() {

    m_exempt_states_isSet = false;
    m_exempt_states_isValid = false;

    m_purchaser_address1_isSet = false;
    m_purchaser_address1_isValid = false;

    m_purchaser_address2_isSet = false;
    m_purchaser_address2_isValid = false;

    m_purchaser_business_type_isSet = false;
    m_purchaser_business_type_isValid = false;

    m_purchaser_business_type_other_value_isSet = false;
    m_purchaser_business_type_other_value_isValid = false;

    m_purchaser_city_isSet = false;
    m_purchaser_city_isValid = false;

    m_purchaser_exemption_reason_isSet = false;
    m_purchaser_exemption_reason_isValid = false;

    m_purchaser_exemption_reason_value_isSet = false;
    m_purchaser_exemption_reason_value_isValid = false;

    m_purchaser_first_name_isSet = false;
    m_purchaser_first_name_isValid = false;

    m_purchaser_last_name_isSet = false;
    m_purchaser_last_name_isValid = false;

    m_purchaser_state_isSet = false;
    m_purchaser_state_isValid = false;

    m_purchaser_tax_id_isSet = false;
    m_purchaser_tax_id_isValid = false;

    m_purchaser_title_isSet = false;
    m_purchaser_title_isValid = false;

    m_purchaser_zip_isSet = false;
    m_purchaser_zip_isValid = false;

    m_single_purchase_isSet = false;
    m_single_purchase_isValid = false;

    m_single_purchase_order_identifier_isSet = false;
    m_single_purchase_order_identifier_isValid = false;
}

void OAIUs_tax_exemption_certificate_details_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUs_tax_exemption_certificate_details_schema::fromJsonObject(QJsonObject json) {

    m_exempt_states_isValid = ::OpenAPI::fromJsonValue(m_exempt_states, json[QString("exempt_states")]);
    m_exempt_states_isSet = !json[QString("exempt_states")].isNull() && m_exempt_states_isValid;

    m_purchaser_address1_isValid = ::OpenAPI::fromJsonValue(m_purchaser_address1, json[QString("purchaser_address1")]);
    m_purchaser_address1_isSet = !json[QString("purchaser_address1")].isNull() && m_purchaser_address1_isValid;

    m_purchaser_address2_isValid = ::OpenAPI::fromJsonValue(m_purchaser_address2, json[QString("purchaser_address2")]);
    m_purchaser_address2_isSet = !json[QString("purchaser_address2")].isNull() && m_purchaser_address2_isValid;

    m_purchaser_business_type_isValid = ::OpenAPI::fromJsonValue(m_purchaser_business_type, json[QString("purchaser_business_type")]);
    m_purchaser_business_type_isSet = !json[QString("purchaser_business_type")].isNull() && m_purchaser_business_type_isValid;

    m_purchaser_business_type_other_value_isValid = ::OpenAPI::fromJsonValue(m_purchaser_business_type_other_value, json[QString("purchaser_business_type_other_value")]);
    m_purchaser_business_type_other_value_isSet = !json[QString("purchaser_business_type_other_value")].isNull() && m_purchaser_business_type_other_value_isValid;

    m_purchaser_city_isValid = ::OpenAPI::fromJsonValue(m_purchaser_city, json[QString("purchaser_city")]);
    m_purchaser_city_isSet = !json[QString("purchaser_city")].isNull() && m_purchaser_city_isValid;

    m_purchaser_exemption_reason_isValid = ::OpenAPI::fromJsonValue(m_purchaser_exemption_reason, json[QString("purchaser_exemption_reason")]);
    m_purchaser_exemption_reason_isSet = !json[QString("purchaser_exemption_reason")].isNull() && m_purchaser_exemption_reason_isValid;

    m_purchaser_exemption_reason_value_isValid = ::OpenAPI::fromJsonValue(m_purchaser_exemption_reason_value, json[QString("purchaser_exemption_reason_value")]);
    m_purchaser_exemption_reason_value_isSet = !json[QString("purchaser_exemption_reason_value")].isNull() && m_purchaser_exemption_reason_value_isValid;

    m_purchaser_first_name_isValid = ::OpenAPI::fromJsonValue(m_purchaser_first_name, json[QString("purchaser_first_name")]);
    m_purchaser_first_name_isSet = !json[QString("purchaser_first_name")].isNull() && m_purchaser_first_name_isValid;

    m_purchaser_last_name_isValid = ::OpenAPI::fromJsonValue(m_purchaser_last_name, json[QString("purchaser_last_name")]);
    m_purchaser_last_name_isSet = !json[QString("purchaser_last_name")].isNull() && m_purchaser_last_name_isValid;

    m_purchaser_state_isValid = ::OpenAPI::fromJsonValue(m_purchaser_state, json[QString("purchaser_state")]);
    m_purchaser_state_isSet = !json[QString("purchaser_state")].isNull() && m_purchaser_state_isValid;

    m_purchaser_tax_id_isValid = ::OpenAPI::fromJsonValue(m_purchaser_tax_id, json[QString("purchaser_tax_id")]);
    m_purchaser_tax_id_isSet = !json[QString("purchaser_tax_id")].isNull() && m_purchaser_tax_id_isValid;

    m_purchaser_title_isValid = ::OpenAPI::fromJsonValue(m_purchaser_title, json[QString("purchaser_title")]);
    m_purchaser_title_isSet = !json[QString("purchaser_title")].isNull() && m_purchaser_title_isValid;

    m_purchaser_zip_isValid = ::OpenAPI::fromJsonValue(m_purchaser_zip, json[QString("purchaser_zip")]);
    m_purchaser_zip_isSet = !json[QString("purchaser_zip")].isNull() && m_purchaser_zip_isValid;

    m_single_purchase_isValid = ::OpenAPI::fromJsonValue(m_single_purchase, json[QString("single_purchase")]);
    m_single_purchase_isSet = !json[QString("single_purchase")].isNull() && m_single_purchase_isValid;

    m_single_purchase_order_identifier_isValid = ::OpenAPI::fromJsonValue(m_single_purchase_order_identifier, json[QString("single_purchase_order_identifier")]);
    m_single_purchase_order_identifier_isSet = !json[QString("single_purchase_order_identifier")].isNull() && m_single_purchase_order_identifier_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUs_tax_exemption_certificate_details_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_exempt_states.size() > 0) {
        obj.insert(QString("exempt_states"), ::OpenAPI::toJsonValue(m_exempt_states));
    }
    if (m_purchaser_address1_isSet) {
        obj.insert(QString("purchaser_address1"), ::OpenAPI::toJsonValue(m_purchaser_address1));
    }
    if (m_purchaser_address2_isSet) {
        obj.insert(QString("purchaser_address2"), ::OpenAPI::toJsonValue(m_purchaser_address2));
    }
    if (m_purchaser_business_type_isSet) {
        obj.insert(QString("purchaser_business_type"), ::OpenAPI::toJsonValue(m_purchaser_business_type));
    }
    if (m_purchaser_business_type_other_value_isSet) {
        obj.insert(QString("purchaser_business_type_other_value"), ::OpenAPI::toJsonValue(m_purchaser_business_type_other_value));
    }
    if (m_purchaser_city_isSet) {
        obj.insert(QString("purchaser_city"), ::OpenAPI::toJsonValue(m_purchaser_city));
    }
    if (m_purchaser_exemption_reason_isSet) {
        obj.insert(QString("purchaser_exemption_reason"), ::OpenAPI::toJsonValue(m_purchaser_exemption_reason));
    }
    if (m_purchaser_exemption_reason_value_isSet) {
        obj.insert(QString("purchaser_exemption_reason_value"), ::OpenAPI::toJsonValue(m_purchaser_exemption_reason_value));
    }
    if (m_purchaser_first_name_isSet) {
        obj.insert(QString("purchaser_first_name"), ::OpenAPI::toJsonValue(m_purchaser_first_name));
    }
    if (m_purchaser_last_name_isSet) {
        obj.insert(QString("purchaser_last_name"), ::OpenAPI::toJsonValue(m_purchaser_last_name));
    }
    if (m_purchaser_state_isSet) {
        obj.insert(QString("purchaser_state"), ::OpenAPI::toJsonValue(m_purchaser_state));
    }
    if (m_purchaser_tax_id.isSet()) {
        obj.insert(QString("purchaser_tax_id"), ::OpenAPI::toJsonValue(m_purchaser_tax_id));
    }
    if (m_purchaser_title_isSet) {
        obj.insert(QString("purchaser_title"), ::OpenAPI::toJsonValue(m_purchaser_title));
    }
    if (m_purchaser_zip_isSet) {
        obj.insert(QString("purchaser_zip"), ::OpenAPI::toJsonValue(m_purchaser_zip));
    }
    if (m_single_purchase_isSet) {
        obj.insert(QString("single_purchase"), ::OpenAPI::toJsonValue(m_single_purchase));
    }
    if (m_single_purchase_order_identifier_isSet) {
        obj.insert(QString("single_purchase_order_identifier"), ::OpenAPI::toJsonValue(m_single_purchase_order_identifier));
    }
    return obj;
}

QList<OAIUs_tax_exempt_state> OAIUs_tax_exemption_certificate_details_schema::getExemptStates() const {
    return m_exempt_states;
}
void OAIUs_tax_exemption_certificate_details_schema::setExemptStates(const QList<OAIUs_tax_exempt_state> &exempt_states) {
    m_exempt_states = exempt_states;
    m_exempt_states_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_exempt_states_Set() const{
    return m_exempt_states_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_exempt_states_Valid() const{
    return m_exempt_states_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserAddress1() const {
    return m_purchaser_address1;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserAddress1(const QString &purchaser_address1) {
    m_purchaser_address1 = purchaser_address1;
    m_purchaser_address1_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_address1_Set() const{
    return m_purchaser_address1_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_address1_Valid() const{
    return m_purchaser_address1_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserAddress2() const {
    return m_purchaser_address2;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserAddress2(const QString &purchaser_address2) {
    m_purchaser_address2 = purchaser_address2;
    m_purchaser_address2_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_address2_Set() const{
    return m_purchaser_address2_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_address2_Valid() const{
    return m_purchaser_address2_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserBusinessType() const {
    return m_purchaser_business_type;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserBusinessType(const QString &purchaser_business_type) {
    m_purchaser_business_type = purchaser_business_type;
    m_purchaser_business_type_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_business_type_Set() const{
    return m_purchaser_business_type_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_business_type_Valid() const{
    return m_purchaser_business_type_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserBusinessTypeOtherValue() const {
    return m_purchaser_business_type_other_value;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserBusinessTypeOtherValue(const QString &purchaser_business_type_other_value) {
    m_purchaser_business_type_other_value = purchaser_business_type_other_value;
    m_purchaser_business_type_other_value_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_business_type_other_value_Set() const{
    return m_purchaser_business_type_other_value_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_business_type_other_value_Valid() const{
    return m_purchaser_business_type_other_value_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserCity() const {
    return m_purchaser_city;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserCity(const QString &purchaser_city) {
    m_purchaser_city = purchaser_city;
    m_purchaser_city_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_city_Set() const{
    return m_purchaser_city_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_city_Valid() const{
    return m_purchaser_city_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserExemptionReason() const {
    return m_purchaser_exemption_reason;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserExemptionReason(const QString &purchaser_exemption_reason) {
    m_purchaser_exemption_reason = purchaser_exemption_reason;
    m_purchaser_exemption_reason_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_exemption_reason_Set() const{
    return m_purchaser_exemption_reason_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_exemption_reason_Valid() const{
    return m_purchaser_exemption_reason_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserExemptionReasonValue() const {
    return m_purchaser_exemption_reason_value;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserExemptionReasonValue(const QString &purchaser_exemption_reason_value) {
    m_purchaser_exemption_reason_value = purchaser_exemption_reason_value;
    m_purchaser_exemption_reason_value_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_exemption_reason_value_Set() const{
    return m_purchaser_exemption_reason_value_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_exemption_reason_value_Valid() const{
    return m_purchaser_exemption_reason_value_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserFirstName() const {
    return m_purchaser_first_name;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserFirstName(const QString &purchaser_first_name) {
    m_purchaser_first_name = purchaser_first_name;
    m_purchaser_first_name_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_first_name_Set() const{
    return m_purchaser_first_name_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_first_name_Valid() const{
    return m_purchaser_first_name_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserLastName() const {
    return m_purchaser_last_name;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserLastName(const QString &purchaser_last_name) {
    m_purchaser_last_name = purchaser_last_name;
    m_purchaser_last_name_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_last_name_Set() const{
    return m_purchaser_last_name_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_last_name_Valid() const{
    return m_purchaser_last_name_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserState() const {
    return m_purchaser_state;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserState(const QString &purchaser_state) {
    m_purchaser_state = purchaser_state;
    m_purchaser_state_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_state_Set() const{
    return m_purchaser_state_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_state_Valid() const{
    return m_purchaser_state_isValid;
}

OAIUs_tax_id OAIUs_tax_exemption_certificate_details_schema::getPurchaserTaxId() const {
    return m_purchaser_tax_id;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserTaxId(const OAIUs_tax_id &purchaser_tax_id) {
    m_purchaser_tax_id = purchaser_tax_id;
    m_purchaser_tax_id_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_tax_id_Set() const{
    return m_purchaser_tax_id_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_tax_id_Valid() const{
    return m_purchaser_tax_id_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserTitle() const {
    return m_purchaser_title;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserTitle(const QString &purchaser_title) {
    m_purchaser_title = purchaser_title;
    m_purchaser_title_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_title_Set() const{
    return m_purchaser_title_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_title_Valid() const{
    return m_purchaser_title_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getPurchaserZip() const {
    return m_purchaser_zip;
}
void OAIUs_tax_exemption_certificate_details_schema::setPurchaserZip(const QString &purchaser_zip) {
    m_purchaser_zip = purchaser_zip;
    m_purchaser_zip_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_zip_Set() const{
    return m_purchaser_zip_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_purchaser_zip_Valid() const{
    return m_purchaser_zip_isValid;
}

bool OAIUs_tax_exemption_certificate_details_schema::isSinglePurchase() const {
    return m_single_purchase;
}
void OAIUs_tax_exemption_certificate_details_schema::setSinglePurchase(const bool &single_purchase) {
    m_single_purchase = single_purchase;
    m_single_purchase_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_single_purchase_Set() const{
    return m_single_purchase_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_single_purchase_Valid() const{
    return m_single_purchase_isValid;
}

QString OAIUs_tax_exemption_certificate_details_schema::getSinglePurchaseOrderIdentifier() const {
    return m_single_purchase_order_identifier;
}
void OAIUs_tax_exemption_certificate_details_schema::setSinglePurchaseOrderIdentifier(const QString &single_purchase_order_identifier) {
    m_single_purchase_order_identifier = single_purchase_order_identifier;
    m_single_purchase_order_identifier_isSet = true;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_single_purchase_order_identifier_Set() const{
    return m_single_purchase_order_identifier_isSet;
}

bool OAIUs_tax_exemption_certificate_details_schema::is_single_purchase_order_identifier_Valid() const{
    return m_single_purchase_order_identifier_isValid;
}

bool OAIUs_tax_exemption_certificate_details_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_exempt_states.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_address1_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_address2_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_business_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_business_type_other_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_exemption_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_exemption_reason_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_state_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_tax_id.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_purchaser_zip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_purchase_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_single_purchase_order_identifier_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUs_tax_exemption_certificate_details_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_exempt_states_isValid && m_purchaser_address1_isValid && m_purchaser_business_type_isValid && m_purchaser_city_isValid && m_purchaser_exemption_reason_isValid && m_purchaser_exemption_reason_value_isValid && m_purchaser_first_name_isValid && m_purchaser_last_name_isValid && m_purchaser_state_isValid && m_purchaser_tax_id_isValid && m_purchaser_zip_isValid && true;
}

} // namespace OpenAPI
