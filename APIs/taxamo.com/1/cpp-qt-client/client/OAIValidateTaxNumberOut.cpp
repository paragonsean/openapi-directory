/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIValidateTaxNumberOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIValidateTaxNumberOut::OAIValidateTaxNumberOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIValidateTaxNumberOut::OAIValidateTaxNumberOut() {
    this->initializeModel();
}

OAIValidateTaxNumberOut::~OAIValidateTaxNumberOut() {}

void OAIValidateTaxNumberOut::initializeModel() {

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_buyer_tax_number_isSet = false;
    m_buyer_tax_number_isValid = false;

    m_buyer_tax_number_valid_isSet = false;
    m_buyer_tax_number_valid_isValid = false;

    m_tax_deducted_isSet = false;
    m_tax_deducted_isValid = false;
}

void OAIValidateTaxNumberOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIValidateTaxNumberOut::fromJsonObject(QJsonObject json) {

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("billing_country_code")]);
    m_billing_country_code_isSet = !json[QString("billing_country_code")].isNull() && m_billing_country_code_isValid;

    m_buyer_tax_number_isValid = ::OpenAPI::fromJsonValue(m_buyer_tax_number, json[QString("buyer_tax_number")]);
    m_buyer_tax_number_isSet = !json[QString("buyer_tax_number")].isNull() && m_buyer_tax_number_isValid;

    m_buyer_tax_number_valid_isValid = ::OpenAPI::fromJsonValue(m_buyer_tax_number_valid, json[QString("buyer_tax_number_valid")]);
    m_buyer_tax_number_valid_isSet = !json[QString("buyer_tax_number_valid")].isNull() && m_buyer_tax_number_valid_isValid;

    m_tax_deducted_isValid = ::OpenAPI::fromJsonValue(m_tax_deducted, json[QString("tax_deducted")]);
    m_tax_deducted_isSet = !json[QString("tax_deducted")].isNull() && m_tax_deducted_isValid;
}

QString OAIValidateTaxNumberOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIValidateTaxNumberOut::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_country_code_isSet) {
        obj.insert(QString("billing_country_code"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_buyer_tax_number_isSet) {
        obj.insert(QString("buyer_tax_number"), ::OpenAPI::toJsonValue(m_buyer_tax_number));
    }
    if (m_buyer_tax_number_valid_isSet) {
        obj.insert(QString("buyer_tax_number_valid"), ::OpenAPI::toJsonValue(m_buyer_tax_number_valid));
    }
    if (m_tax_deducted_isSet) {
        obj.insert(QString("tax_deducted"), ::OpenAPI::toJsonValue(m_tax_deducted));
    }
    return obj;
}

QString OAIValidateTaxNumberOut::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAIValidateTaxNumberOut::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAIValidateTaxNumberOut::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAIValidateTaxNumberOut::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAIValidateTaxNumberOut::getBuyerTaxNumber() const {
    return m_buyer_tax_number;
}
void OAIValidateTaxNumberOut::setBuyerTaxNumber(const QString &buyer_tax_number) {
    m_buyer_tax_number = buyer_tax_number;
    m_buyer_tax_number_isSet = true;
}

bool OAIValidateTaxNumberOut::is_buyer_tax_number_Set() const{
    return m_buyer_tax_number_isSet;
}

bool OAIValidateTaxNumberOut::is_buyer_tax_number_Valid() const{
    return m_buyer_tax_number_isValid;
}

bool OAIValidateTaxNumberOut::isBuyerTaxNumberValid() const {
    return m_buyer_tax_number_valid;
}
void OAIValidateTaxNumberOut::setBuyerTaxNumberValid(const bool &buyer_tax_number_valid) {
    m_buyer_tax_number_valid = buyer_tax_number_valid;
    m_buyer_tax_number_valid_isSet = true;
}

bool OAIValidateTaxNumberOut::is_buyer_tax_number_valid_Set() const{
    return m_buyer_tax_number_valid_isSet;
}

bool OAIValidateTaxNumberOut::is_buyer_tax_number_valid_Valid() const{
    return m_buyer_tax_number_valid_isValid;
}

bool OAIValidateTaxNumberOut::isTaxDeducted() const {
    return m_tax_deducted;
}
void OAIValidateTaxNumberOut::setTaxDeducted(const bool &tax_deducted) {
    m_tax_deducted = tax_deducted;
    m_tax_deducted_isSet = true;
}

bool OAIValidateTaxNumberOut::is_tax_deducted_Set() const{
    return m_tax_deducted_isSet;
}

bool OAIValidateTaxNumberOut::is_tax_deducted_Valid() const{
    return m_tax_deducted_isValid;
}

bool OAIValidateTaxNumberOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_tax_number_valid_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_deducted_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIValidateTaxNumberOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
