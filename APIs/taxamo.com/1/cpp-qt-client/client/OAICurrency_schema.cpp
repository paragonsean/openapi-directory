/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICurrency_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICurrency_schema::OAICurrency_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICurrency_schema::OAICurrency_schema() {
    this->initializeModel();
}

OAICurrency_schema::~OAICurrency_schema() {}

void OAICurrency_schema::initializeModel() {

    m_code_isSet = false;
    m_code_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_isocode_isSet = false;
    m_isocode_isValid = false;

    m_isonum_isSet = false;
    m_isonum_isValid = false;

    m_minorunits_isSet = false;
    m_minorunits_isValid = false;
}

void OAICurrency_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICurrency_schema::fromJsonObject(QJsonObject json) {

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_isocode_isValid = ::OpenAPI::fromJsonValue(m_isocode, json[QString("isocode")]);
    m_isocode_isSet = !json[QString("isocode")].isNull() && m_isocode_isValid;

    m_isonum_isValid = ::OpenAPI::fromJsonValue(m_isonum, json[QString("isonum")]);
    m_isonum_isSet = !json[QString("isonum")].isNull() && m_isonum_isValid;

    m_minorunits_isValid = ::OpenAPI::fromJsonValue(m_minorunits, json[QString("minorunits")]);
    m_minorunits_isSet = !json[QString("minorunits")].isNull() && m_minorunits_isValid;
}

QString OAICurrency_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICurrency_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_isocode_isSet) {
        obj.insert(QString("isocode"), ::OpenAPI::toJsonValue(m_isocode));
    }
    if (m_isonum_isSet) {
        obj.insert(QString("isonum"), ::OpenAPI::toJsonValue(m_isonum));
    }
    if (m_minorunits_isSet) {
        obj.insert(QString("minorunits"), ::OpenAPI::toJsonValue(m_minorunits));
    }
    return obj;
}

QString OAICurrency_schema::getCode() const {
    return m_code;
}
void OAICurrency_schema::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICurrency_schema::is_code_Set() const{
    return m_code_isSet;
}

bool OAICurrency_schema::is_code_Valid() const{
    return m_code_isValid;
}

QString OAICurrency_schema::getDescription() const {
    return m_description;
}
void OAICurrency_schema::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAICurrency_schema::is_description_Set() const{
    return m_description_isSet;
}

bool OAICurrency_schema::is_description_Valid() const{
    return m_description_isValid;
}

QString OAICurrency_schema::getIsocode() const {
    return m_isocode;
}
void OAICurrency_schema::setIsocode(const QString &isocode) {
    m_isocode = isocode;
    m_isocode_isSet = true;
}

bool OAICurrency_schema::is_isocode_Set() const{
    return m_isocode_isSet;
}

bool OAICurrency_schema::is_isocode_Valid() const{
    return m_isocode_isValid;
}

qint32 OAICurrency_schema::getIsonum() const {
    return m_isonum;
}
void OAICurrency_schema::setIsonum(const qint32 &isonum) {
    m_isonum = isonum;
    m_isonum_isSet = true;
}

bool OAICurrency_schema::is_isonum_Set() const{
    return m_isonum_isSet;
}

bool OAICurrency_schema::is_isonum_Valid() const{
    return m_isonum_isValid;
}

qint32 OAICurrency_schema::getMinorunits() const {
    return m_minorunits;
}
void OAICurrency_schema::setMinorunits(const qint32 &minorunits) {
    m_minorunits = minorunits;
    m_minorunits_isSet = true;
}

bool OAICurrency_schema::is_minorunits_Set() const{
    return m_minorunits_isSet;
}

bool OAICurrency_schema::is_minorunits_Valid() const{
    return m_minorunits_isValid;
}

bool OAICurrency_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isocode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isonum_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_minorunits_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICurrency_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
