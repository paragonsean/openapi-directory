/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISettlement_daily_stats_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISettlement_daily_stats_schema::OAISettlement_daily_stats_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISettlement_daily_stats_schema::OAISettlement_daily_stats_schema() {
    this->initializeModel();
}

OAISettlement_daily_stats_schema::~OAISettlement_daily_stats_schema() {}

void OAISettlement_daily_stats_schema::initializeModel() {

    m_b2b_isSet = false;
    m_b2b_isValid = false;

    m_b2c_isSet = false;
    m_b2c_isValid = false;

    m_count_isSet = false;
    m_count_isValid = false;

    m_day_isSet = false;
    m_day_isValid = false;

    m_day_raw_isSet = false;
    m_day_raw_isValid = false;

    m_eu_b2b_isSet = false;
    m_eu_b2b_isValid = false;

    m_eu_taxed_isSet = false;
    m_eu_taxed_isValid = false;

    m_eu_total_isSet = false;
    m_eu_total_isValid = false;

    m_untaxed_isSet = false;
    m_untaxed_isValid = false;
}

void OAISettlement_daily_stats_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISettlement_daily_stats_schema::fromJsonObject(QJsonObject json) {

    m_b2b_isValid = ::OpenAPI::fromJsonValue(m_b2b, json[QString("b2b")]);
    m_b2b_isSet = !json[QString("b2b")].isNull() && m_b2b_isValid;

    m_b2c_isValid = ::OpenAPI::fromJsonValue(m_b2c, json[QString("b2c")]);
    m_b2c_isSet = !json[QString("b2c")].isNull() && m_b2c_isValid;

    m_count_isValid = ::OpenAPI::fromJsonValue(m_count, json[QString("count")]);
    m_count_isSet = !json[QString("count")].isNull() && m_count_isValid;

    m_day_isValid = ::OpenAPI::fromJsonValue(m_day, json[QString("day")]);
    m_day_isSet = !json[QString("day")].isNull() && m_day_isValid;

    m_day_raw_isValid = ::OpenAPI::fromJsonValue(m_day_raw, json[QString("day_raw")]);
    m_day_raw_isSet = !json[QString("day_raw")].isNull() && m_day_raw_isValid;

    m_eu_b2b_isValid = ::OpenAPI::fromJsonValue(m_eu_b2b, json[QString("eu_b2b")]);
    m_eu_b2b_isSet = !json[QString("eu_b2b")].isNull() && m_eu_b2b_isValid;

    m_eu_taxed_isValid = ::OpenAPI::fromJsonValue(m_eu_taxed, json[QString("eu_taxed")]);
    m_eu_taxed_isSet = !json[QString("eu_taxed")].isNull() && m_eu_taxed_isValid;

    m_eu_total_isValid = ::OpenAPI::fromJsonValue(m_eu_total, json[QString("eu_total")]);
    m_eu_total_isSet = !json[QString("eu_total")].isNull() && m_eu_total_isValid;

    m_untaxed_isValid = ::OpenAPI::fromJsonValue(m_untaxed, json[QString("untaxed")]);
    m_untaxed_isSet = !json[QString("untaxed")].isNull() && m_untaxed_isValid;
}

QString OAISettlement_daily_stats_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISettlement_daily_stats_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_b2b_isSet) {
        obj.insert(QString("b2b"), ::OpenAPI::toJsonValue(m_b2b));
    }
    if (m_b2c_isSet) {
        obj.insert(QString("b2c"), ::OpenAPI::toJsonValue(m_b2c));
    }
    if (m_count_isSet) {
        obj.insert(QString("count"), ::OpenAPI::toJsonValue(m_count));
    }
    if (m_day_isSet) {
        obj.insert(QString("day"), ::OpenAPI::toJsonValue(m_day));
    }
    if (m_day_raw_isSet) {
        obj.insert(QString("day_raw"), ::OpenAPI::toJsonValue(m_day_raw));
    }
    if (m_eu_b2b_isSet) {
        obj.insert(QString("eu_b2b"), ::OpenAPI::toJsonValue(m_eu_b2b));
    }
    if (m_eu_taxed_isSet) {
        obj.insert(QString("eu_taxed"), ::OpenAPI::toJsonValue(m_eu_taxed));
    }
    if (m_eu_total_isSet) {
        obj.insert(QString("eu_total"), ::OpenAPI::toJsonValue(m_eu_total));
    }
    if (m_untaxed_isSet) {
        obj.insert(QString("untaxed"), ::OpenAPI::toJsonValue(m_untaxed));
    }
    return obj;
}

qint32 OAISettlement_daily_stats_schema::getB2b() const {
    return m_b2b;
}
void OAISettlement_daily_stats_schema::setB2b(const qint32 &b2b) {
    m_b2b = b2b;
    m_b2b_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_b2b_Set() const{
    return m_b2b_isSet;
}

bool OAISettlement_daily_stats_schema::is_b2b_Valid() const{
    return m_b2b_isValid;
}

qint32 OAISettlement_daily_stats_schema::getB2c() const {
    return m_b2c;
}
void OAISettlement_daily_stats_schema::setB2c(const qint32 &b2c) {
    m_b2c = b2c;
    m_b2c_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_b2c_Set() const{
    return m_b2c_isSet;
}

bool OAISettlement_daily_stats_schema::is_b2c_Valid() const{
    return m_b2c_isValid;
}

qint32 OAISettlement_daily_stats_schema::getCount() const {
    return m_count;
}
void OAISettlement_daily_stats_schema::setCount(const qint32 &count) {
    m_count = count;
    m_count_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_count_Set() const{
    return m_count_isSet;
}

bool OAISettlement_daily_stats_schema::is_count_Valid() const{
    return m_count_isValid;
}

QString OAISettlement_daily_stats_schema::getDay() const {
    return m_day;
}
void OAISettlement_daily_stats_schema::setDay(const QString &day) {
    m_day = day;
    m_day_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_day_Set() const{
    return m_day_isSet;
}

bool OAISettlement_daily_stats_schema::is_day_Valid() const{
    return m_day_isValid;
}

QString OAISettlement_daily_stats_schema::getDayRaw() const {
    return m_day_raw;
}
void OAISettlement_daily_stats_schema::setDayRaw(const QString &day_raw) {
    m_day_raw = day_raw;
    m_day_raw_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_day_raw_Set() const{
    return m_day_raw_isSet;
}

bool OAISettlement_daily_stats_schema::is_day_raw_Valid() const{
    return m_day_raw_isValid;
}

qint32 OAISettlement_daily_stats_schema::getEuB2b() const {
    return m_eu_b2b;
}
void OAISettlement_daily_stats_schema::setEuB2b(const qint32 &eu_b2b) {
    m_eu_b2b = eu_b2b;
    m_eu_b2b_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_eu_b2b_Set() const{
    return m_eu_b2b_isSet;
}

bool OAISettlement_daily_stats_schema::is_eu_b2b_Valid() const{
    return m_eu_b2b_isValid;
}

qint32 OAISettlement_daily_stats_schema::getEuTaxed() const {
    return m_eu_taxed;
}
void OAISettlement_daily_stats_schema::setEuTaxed(const qint32 &eu_taxed) {
    m_eu_taxed = eu_taxed;
    m_eu_taxed_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_eu_taxed_Set() const{
    return m_eu_taxed_isSet;
}

bool OAISettlement_daily_stats_schema::is_eu_taxed_Valid() const{
    return m_eu_taxed_isValid;
}

qint32 OAISettlement_daily_stats_schema::getEuTotal() const {
    return m_eu_total;
}
void OAISettlement_daily_stats_schema::setEuTotal(const qint32 &eu_total) {
    m_eu_total = eu_total;
    m_eu_total_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_eu_total_Set() const{
    return m_eu_total_isSet;
}

bool OAISettlement_daily_stats_schema::is_eu_total_Valid() const{
    return m_eu_total_isValid;
}

qint32 OAISettlement_daily_stats_schema::getUntaxed() const {
    return m_untaxed;
}
void OAISettlement_daily_stats_schema::setUntaxed(const qint32 &untaxed) {
    m_untaxed = untaxed;
    m_untaxed_isSet = true;
}

bool OAISettlement_daily_stats_schema::is_untaxed_Set() const{
    return m_untaxed_isSet;
}

bool OAISettlement_daily_stats_schema::is_untaxed_Valid() const{
    return m_untaxed_isValid;
}

bool OAISettlement_daily_stats_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_b2b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_b2c_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_day_raw_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_b2b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_taxed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_total_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_untaxed_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISettlement_daily_stats_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
