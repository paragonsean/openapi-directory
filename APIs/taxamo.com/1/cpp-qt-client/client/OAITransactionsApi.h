/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAITransactionsApi_H
#define OAI_OAITransactionsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICancelTransactionOut.h"
#include "OAIConfirmTransactionIn.h"
#include "OAIConfirmTransactionOut.h"
#include "OAICreateTransactionIn.h"
#include "OAICreateTransactionOut.h"
#include "OAIGetTransactionOut.h"
#include "OAIListTransactionsOut.h"
#include "OAIUnconfirmTransactionIn.h"
#include "OAIUnconfirmTransactionOut.h"
#include "OAIUpdateTransactionIn.h"
#include "OAIUpdateTransactionOut.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAITransactionsApi : public QObject {
    Q_OBJECT

public:
    OAITransactionsApi(const int timeOut = 0);
    ~OAITransactionsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  key QString [required]
    */
    virtual void cancelTransaction(const QString &key);

    /**
    * @param[in]  key QString [required]
    * @param[in]  input OAIConfirmTransactionIn [required]
    */
    virtual void confirmTransaction(const QString &key, const OAIConfirmTransactionIn &input);

    /**
    * @param[in]  input OAICreateTransactionIn [required]
    */
    virtual void createTransaction(const OAICreateTransactionIn &input);

    /**
    * @param[in]  key QString [required]
    */
    virtual void getTransaction(const QString &key);

    /**
    * @param[in]  filter_text QString [optional]
    * @param[in]  offset qint32 [optional]
    * @param[in]  has_note bool [optional]
    * @param[in]  key_or_custom_id QString [optional]
    * @param[in]  currency_code QString [optional]
    * @param[in]  order_date_to QString [optional]
    * @param[in]  sort_reverse bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  invoice_number QString [optional]
    * @param[in]  tax_country_codes QString [optional]
    * @param[in]  statuses QString [optional]
    * @param[in]  original_transaction_key QString [optional]
    * @param[in]  order_date_from QString [optional]
    * @param[in]  total_amount_greater_than QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  total_amount_less_than QString [optional]
    * @param[in]  tax_country_code QString [optional]
    */
    virtual void listTransactions(const ::OpenAPI::OptionalParam<QString> &filter_text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &offset = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &has_note = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &key_or_custom_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &currency_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &sort_reverse = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &invoice_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tax_country_codes = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &statuses = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &original_transaction_key = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &order_date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &total_amount_greater_than = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &total_amount_less_than = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tax_country_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  key QString [required]
    * @param[in]  input OAIUnconfirmTransactionIn [required]
    */
    virtual void unconfirmTransaction(const QString &key, const OAIUnconfirmTransactionIn &input);

    /**
    * @param[in]  key QString [required]
    * @param[in]  input OAIUpdateTransactionIn [required]
    */
    virtual void updateTransaction(const QString &key, const OAIUpdateTransactionIn &input);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void cancelTransactionCallback(OAIHttpRequestWorker *worker);
    void confirmTransactionCallback(OAIHttpRequestWorker *worker);
    void createTransactionCallback(OAIHttpRequestWorker *worker);
    void getTransactionCallback(OAIHttpRequestWorker *worker);
    void listTransactionsCallback(OAIHttpRequestWorker *worker);
    void unconfirmTransactionCallback(OAIHttpRequestWorker *worker);
    void updateTransactionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void cancelTransactionSignal(OAICancelTransactionOut summary);
    void confirmTransactionSignal(OAIConfirmTransactionOut summary);
    void createTransactionSignal(OAICreateTransactionOut summary);
    void getTransactionSignal(OAIGetTransactionOut summary);
    void listTransactionsSignal(OAIListTransactionsOut summary);
    void unconfirmTransactionSignal(OAIUnconfirmTransactionOut summary);
    void updateTransactionSignal(OAIUpdateTransactionOut summary);


    void cancelTransactionSignalFull(OAIHttpRequestWorker *worker, OAICancelTransactionOut summary);
    void confirmTransactionSignalFull(OAIHttpRequestWorker *worker, OAIConfirmTransactionOut summary);
    void createTransactionSignalFull(OAIHttpRequestWorker *worker, OAICreateTransactionOut summary);
    void getTransactionSignalFull(OAIHttpRequestWorker *worker, OAIGetTransactionOut summary);
    void listTransactionsSignalFull(OAIHttpRequestWorker *worker, OAIListTransactionsOut summary);
    void unconfirmTransactionSignalFull(OAIHttpRequestWorker *worker, OAIUnconfirmTransactionOut summary);
    void updateTransactionSignalFull(OAIHttpRequestWorker *worker, OAIUpdateTransactionOut summary);

    Q_DECL_DEPRECATED_X("Use cancelTransactionSignalError() instead")
    void cancelTransactionSignalE(OAICancelTransactionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTransactionSignalError(OAICancelTransactionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmTransactionSignalError() instead")
    void confirmTransactionSignalE(OAIConfirmTransactionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmTransactionSignalError(OAIConfirmTransactionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTransactionSignalError() instead")
    void createTransactionSignalE(OAICreateTransactionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransactionSignalError(OAICreateTransactionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionSignalError() instead")
    void getTransactionSignalE(OAIGetTransactionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionSignalError(OAIGetTransactionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTransactionsSignalError() instead")
    void listTransactionsSignalE(OAIListTransactionsOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listTransactionsSignalError(OAIListTransactionsOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unconfirmTransactionSignalError() instead")
    void unconfirmTransactionSignalE(OAIUnconfirmTransactionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void unconfirmTransactionSignalError(OAIUnconfirmTransactionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionSignalError() instead")
    void updateTransactionSignalE(OAIUpdateTransactionOut summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionSignalError(OAIUpdateTransactionOut summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use cancelTransactionSignalErrorFull() instead")
    void cancelTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void cancelTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use confirmTransactionSignalErrorFull() instead")
    void confirmTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void confirmTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTransactionSignalErrorFull() instead")
    void createTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTransactionSignalErrorFull() instead")
    void getTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listTransactionsSignalErrorFull() instead")
    void listTransactionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listTransactionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use unconfirmTransactionSignalErrorFull() instead")
    void unconfirmTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void unconfirmTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateTransactionSignalErrorFull() instead")
    void updateTransactionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateTransactionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
