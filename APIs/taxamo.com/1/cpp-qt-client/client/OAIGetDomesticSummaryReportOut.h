/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIGetDomesticSummaryReportOut.h
 *
 * 
 */

#ifndef OAIGetDomesticSummaryReportOut_H
#define OAIGetDomesticSummaryReportOut_H

#include <QJsonObject>

#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {

class OAIGetDomesticSummaryReportOut : public OAIObject {
public:
    OAIGetDomesticSummaryReportOut();
    OAIGetDomesticSummaryReportOut(QString json);
    ~OAIGetDomesticSummaryReportOut() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QString getCurrencyCode() const;
    void setCurrencyCode(const QString &currency_code);
    bool is_currency_code_Set() const;
    bool is_currency_code_Valid() const;

    double getDomesticRefundsAmount() const;
    void setDomesticRefundsAmount(const double &domestic_refunds_amount);
    bool is_domestic_refunds_amount_Set() const;
    bool is_domestic_refunds_amount_Valid() const;

    double getDomesticRefundsTaxAmount() const;
    void setDomesticRefundsTaxAmount(const double &domestic_refunds_tax_amount);
    bool is_domestic_refunds_tax_amount_Set() const;
    bool is_domestic_refunds_tax_amount_Valid() const;

    double getDomesticSalesAmount() const;
    void setDomesticSalesAmount(const double &domestic_sales_amount);
    bool is_domestic_sales_amount_Set() const;
    bool is_domestic_sales_amount_Valid() const;

    double getDomesticTaxAmount() const;
    void setDomesticTaxAmount(const double &domestic_tax_amount);
    bool is_domestic_tax_amount_Set() const;
    bool is_domestic_tax_amount_Valid() const;

    QString getEndDate() const;
    void setEndDate(const QString &end_date);
    bool is_end_date_Set() const;
    bool is_end_date_Valid() const;

    double getEuTaxDeductedRefunds() const;
    void setEuTaxDeductedRefunds(const double &eu_tax_deducted_refunds);
    bool is_eu_tax_deducted_refunds_Set() const;
    bool is_eu_tax_deducted_refunds_Valid() const;

    double getEuTaxDeductedSales() const;
    void setEuTaxDeductedSales(const double &eu_tax_deducted_sales);
    bool is_eu_tax_deducted_sales_Set() const;
    bool is_eu_tax_deducted_sales_Valid() const;

    double getGlobalRefundsAmount() const;
    void setGlobalRefundsAmount(const double &global_refunds_amount);
    bool is_global_refunds_amount_Set() const;
    bool is_global_refunds_amount_Valid() const;

    double getGlobalRefundsTaxAmount() const;
    void setGlobalRefundsTaxAmount(const double &global_refunds_tax_amount);
    bool is_global_refunds_tax_amount_Set() const;
    bool is_global_refunds_tax_amount_Valid() const;

    double getGlobalSalesAmount() const;
    void setGlobalSalesAmount(const double &global_sales_amount);
    bool is_global_sales_amount_Set() const;
    bool is_global_sales_amount_Valid() const;

    double getGlobalSalesTaxAmount() const;
    void setGlobalSalesTaxAmount(const double &global_sales_tax_amount);
    bool is_global_sales_tax_amount_Set() const;
    bool is_global_sales_tax_amount_Valid() const;

    QString getStartDate() const;
    void setStartDate(const QString &start_date);
    bool is_start_date_Set() const;
    bool is_start_date_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QString m_currency_code;
    bool m_currency_code_isSet;
    bool m_currency_code_isValid;

    double m_domestic_refunds_amount;
    bool m_domestic_refunds_amount_isSet;
    bool m_domestic_refunds_amount_isValid;

    double m_domestic_refunds_tax_amount;
    bool m_domestic_refunds_tax_amount_isSet;
    bool m_domestic_refunds_tax_amount_isValid;

    double m_domestic_sales_amount;
    bool m_domestic_sales_amount_isSet;
    bool m_domestic_sales_amount_isValid;

    double m_domestic_tax_amount;
    bool m_domestic_tax_amount_isSet;
    bool m_domestic_tax_amount_isValid;

    QString m_end_date;
    bool m_end_date_isSet;
    bool m_end_date_isValid;

    double m_eu_tax_deducted_refunds;
    bool m_eu_tax_deducted_refunds_isSet;
    bool m_eu_tax_deducted_refunds_isValid;

    double m_eu_tax_deducted_sales;
    bool m_eu_tax_deducted_sales_isSet;
    bool m_eu_tax_deducted_sales_isValid;

    double m_global_refunds_amount;
    bool m_global_refunds_amount_isSet;
    bool m_global_refunds_amount_isValid;

    double m_global_refunds_tax_amount;
    bool m_global_refunds_tax_amount_isSet;
    bool m_global_refunds_tax_amount_isValid;

    double m_global_sales_amount;
    bool m_global_sales_amount_isSet;
    bool m_global_sales_amount_isValid;

    double m_global_sales_tax_amount;
    bool m_global_sales_tax_amount_isSet;
    bool m_global_sales_tax_amount_isValid;

    QString m_start_date;
    bool m_start_date_isSet;
    bool m_start_date_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIGetDomesticSummaryReportOut)

#endif // OAIGetDomesticSummaryReportOut_H
