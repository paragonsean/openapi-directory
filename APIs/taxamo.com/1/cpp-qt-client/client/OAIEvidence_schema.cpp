/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEvidence_schema.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEvidence_schema::OAIEvidence_schema(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEvidence_schema::OAIEvidence_schema() {
    this->initializeModel();
}

OAIEvidence_schema::~OAIEvidence_schema() {}

void OAIEvidence_schema::initializeModel() {

    m_evidence_type_isSet = false;
    m_evidence_type_isValid = false;

    m_evidence_value_isSet = false;
    m_evidence_value_isValid = false;

    m_resolved_country_code_isSet = false;
    m_resolved_country_code_isValid = false;

    m_used_isSet = false;
    m_used_isValid = false;
}

void OAIEvidence_schema::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEvidence_schema::fromJsonObject(QJsonObject json) {

    m_evidence_type_isValid = ::OpenAPI::fromJsonValue(m_evidence_type, json[QString("evidence_type")]);
    m_evidence_type_isSet = !json[QString("evidence_type")].isNull() && m_evidence_type_isValid;

    m_evidence_value_isValid = ::OpenAPI::fromJsonValue(m_evidence_value, json[QString("evidence_value")]);
    m_evidence_value_isSet = !json[QString("evidence_value")].isNull() && m_evidence_value_isValid;

    m_resolved_country_code_isValid = ::OpenAPI::fromJsonValue(m_resolved_country_code, json[QString("resolved_country_code")]);
    m_resolved_country_code_isSet = !json[QString("resolved_country_code")].isNull() && m_resolved_country_code_isValid;

    m_used_isValid = ::OpenAPI::fromJsonValue(m_used, json[QString("used")]);
    m_used_isSet = !json[QString("used")].isNull() && m_used_isValid;
}

QString OAIEvidence_schema::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEvidence_schema::asJsonObject() const {
    QJsonObject obj;
    if (m_evidence_type_isSet) {
        obj.insert(QString("evidence_type"), ::OpenAPI::toJsonValue(m_evidence_type));
    }
    if (m_evidence_value_isSet) {
        obj.insert(QString("evidence_value"), ::OpenAPI::toJsonValue(m_evidence_value));
    }
    if (m_resolved_country_code_isSet) {
        obj.insert(QString("resolved_country_code"), ::OpenAPI::toJsonValue(m_resolved_country_code));
    }
    if (m_used_isSet) {
        obj.insert(QString("used"), ::OpenAPI::toJsonValue(m_used));
    }
    return obj;
}

QString OAIEvidence_schema::getEvidenceType() const {
    return m_evidence_type;
}
void OAIEvidence_schema::setEvidenceType(const QString &evidence_type) {
    m_evidence_type = evidence_type;
    m_evidence_type_isSet = true;
}

bool OAIEvidence_schema::is_evidence_type_Set() const{
    return m_evidence_type_isSet;
}

bool OAIEvidence_schema::is_evidence_type_Valid() const{
    return m_evidence_type_isValid;
}

QString OAIEvidence_schema::getEvidenceValue() const {
    return m_evidence_value;
}
void OAIEvidence_schema::setEvidenceValue(const QString &evidence_value) {
    m_evidence_value = evidence_value;
    m_evidence_value_isSet = true;
}

bool OAIEvidence_schema::is_evidence_value_Set() const{
    return m_evidence_value_isSet;
}

bool OAIEvidence_schema::is_evidence_value_Valid() const{
    return m_evidence_value_isValid;
}

QString OAIEvidence_schema::getResolvedCountryCode() const {
    return m_resolved_country_code;
}
void OAIEvidence_schema::setResolvedCountryCode(const QString &resolved_country_code) {
    m_resolved_country_code = resolved_country_code;
    m_resolved_country_code_isSet = true;
}

bool OAIEvidence_schema::is_resolved_country_code_Set() const{
    return m_resolved_country_code_isSet;
}

bool OAIEvidence_schema::is_resolved_country_code_Valid() const{
    return m_resolved_country_code_isValid;
}

bool OAIEvidence_schema::isUsed() const {
    return m_used;
}
void OAIEvidence_schema::setUsed(const bool &used) {
    m_used = used;
    m_used_isSet = true;
}

bool OAIEvidence_schema::is_used_Set() const{
    return m_used_isSet;
}

bool OAIEvidence_schema::is_used_Valid() const{
    return m_used_isValid;
}

bool OAIEvidence_schema::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_evidence_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence_value_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_resolved_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_used_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEvidence_schema::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
