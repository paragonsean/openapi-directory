/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBy_country.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBy_country::OAIBy_country(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBy_country::OAIBy_country() {
    this->initializeModel();
}

OAIBy_country::~OAIBy_country() {}

void OAIBy_country::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_tax_country_code_isSet = false;
    m_tax_country_code_isValid = false;

    m_tax_country_name_isSet = false;
    m_tax_country_name_isValid = false;

    m_value_isSet = false;
    m_value_isValid = false;
}

void OAIBy_country::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBy_country::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_tax_country_code_isValid = ::OpenAPI::fromJsonValue(m_tax_country_code, json[QString("tax_country_code")]);
    m_tax_country_code_isSet = !json[QString("tax_country_code")].isNull() && m_tax_country_code_isValid;

    m_tax_country_name_isValid = ::OpenAPI::fromJsonValue(m_tax_country_name, json[QString("tax_country_name")]);
    m_tax_country_name_isSet = !json[QString("tax_country_name")].isNull() && m_tax_country_name_isValid;

    m_value_isValid = ::OpenAPI::fromJsonValue(m_value, json[QString("value")]);
    m_value_isSet = !json[QString("value")].isNull() && m_value_isValid;
}

QString OAIBy_country::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBy_country::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_tax_country_code_isSet) {
        obj.insert(QString("tax_country_code"), ::OpenAPI::toJsonValue(m_tax_country_code));
    }
    if (m_tax_country_name_isSet) {
        obj.insert(QString("tax_country_name"), ::OpenAPI::toJsonValue(m_tax_country_name));
    }
    if (m_value_isSet) {
        obj.insert(QString("value"), ::OpenAPI::toJsonValue(m_value));
    }
    return obj;
}

QString OAIBy_country::getCurrencyCode() const {
    return m_currency_code;
}
void OAIBy_country::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIBy_country::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIBy_country::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIBy_country::getTaxCountryCode() const {
    return m_tax_country_code;
}
void OAIBy_country::setTaxCountryCode(const QString &tax_country_code) {
    m_tax_country_code = tax_country_code;
    m_tax_country_code_isSet = true;
}

bool OAIBy_country::is_tax_country_code_Set() const{
    return m_tax_country_code_isSet;
}

bool OAIBy_country::is_tax_country_code_Valid() const{
    return m_tax_country_code_isValid;
}

QString OAIBy_country::getTaxCountryName() const {
    return m_tax_country_name;
}
void OAIBy_country::setTaxCountryName(const QString &tax_country_name) {
    m_tax_country_name = tax_country_name;
    m_tax_country_name_isSet = true;
}

bool OAIBy_country::is_tax_country_name_Set() const{
    return m_tax_country_name_isSet;
}

bool OAIBy_country::is_tax_country_name_Valid() const{
    return m_tax_country_name_isValid;
}

double OAIBy_country::getValue() const {
    return m_value;
}
void OAIBy_country::setValue(const double &value) {
    m_value = value;
    m_value_isSet = true;
}

bool OAIBy_country::is_value_Set() const{
    return m_value_isSet;
}

bool OAIBy_country::is_value_Valid() const{
    return m_value_isValid;
}

bool OAIBy_country::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_country_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_value_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBy_country::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
