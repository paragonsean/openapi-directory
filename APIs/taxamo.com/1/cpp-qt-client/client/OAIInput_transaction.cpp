/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInput_transaction.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInput_transaction::OAIInput_transaction(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInput_transaction::OAIInput_transaction() {
    this->initializeModel();
}

OAIInput_transaction::~OAIInput_transaction() {}

void OAIInput_transaction::initializeModel() {

    m_additional_currencies_isSet = false;
    m_additional_currencies_isValid = false;

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_buyer_credit_card_prefix_isSet = false;
    m_buyer_credit_card_prefix_isValid = false;

    m_buyer_email_isSet = false;
    m_buyer_email_isValid = false;

    m_buyer_ip_isSet = false;
    m_buyer_ip_isValid = false;

    m_buyer_name_isSet = false;
    m_buyer_name_isValid = false;

    m_buyer_tax_number_isSet = false;
    m_buyer_tax_number_isValid = false;

    m_comments_isSet = false;
    m_comments_isValid = false;

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_custom_data_isSet = false;
    m_custom_data_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_custom_id_isSet = false;
    m_custom_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_force_country_code_isSet = false;
    m_force_country_code_isValid = false;

    m_invoice_address_isSet = false;
    m_invoice_address_isValid = false;

    m_invoice_date_isSet = false;
    m_invoice_date_isValid = false;

    m_invoice_number_isSet = false;
    m_invoice_number_isValid = false;

    m_invoice_place_isSet = false;
    m_invoice_place_isValid = false;

    m_note_isSet = false;
    m_note_isValid = false;

    m_order_date_isSet = false;
    m_order_date_isValid = false;

    m_original_transaction_key_isSet = false;
    m_original_transaction_key_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_sub_account_id_isSet = false;
    m_sub_account_id_isValid = false;

    m_supply_date_isSet = false;
    m_supply_date_isValid = false;

    m_tax_country_code_isSet = false;
    m_tax_country_code_isValid = false;

    m_tax_data_isSet = false;
    m_tax_data_isValid = false;

    m_tax_deducted_isSet = false;
    m_tax_deducted_isValid = false;

    m_transaction_lines_isSet = false;
    m_transaction_lines_isValid = false;

    m_verification_token_isSet = false;
    m_verification_token_isValid = false;
}

void OAIInput_transaction::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInput_transaction::fromJsonObject(QJsonObject json) {

    m_additional_currencies_isValid = ::OpenAPI::fromJsonValue(m_additional_currencies, json[QString("additional_currencies")]);
    m_additional_currencies_isSet = !json[QString("additional_currencies")].isNull() && m_additional_currencies_isValid;

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("billing_country_code")]);
    m_billing_country_code_isSet = !json[QString("billing_country_code")].isNull() && m_billing_country_code_isValid;

    m_buyer_credit_card_prefix_isValid = ::OpenAPI::fromJsonValue(m_buyer_credit_card_prefix, json[QString("buyer_credit_card_prefix")]);
    m_buyer_credit_card_prefix_isSet = !json[QString("buyer_credit_card_prefix")].isNull() && m_buyer_credit_card_prefix_isValid;

    m_buyer_email_isValid = ::OpenAPI::fromJsonValue(m_buyer_email, json[QString("buyer_email")]);
    m_buyer_email_isSet = !json[QString("buyer_email")].isNull() && m_buyer_email_isValid;

    m_buyer_ip_isValid = ::OpenAPI::fromJsonValue(m_buyer_ip, json[QString("buyer_ip")]);
    m_buyer_ip_isSet = !json[QString("buyer_ip")].isNull() && m_buyer_ip_isValid;

    m_buyer_name_isValid = ::OpenAPI::fromJsonValue(m_buyer_name, json[QString("buyer_name")]);
    m_buyer_name_isSet = !json[QString("buyer_name")].isNull() && m_buyer_name_isValid;

    m_buyer_tax_number_isValid = ::OpenAPI::fromJsonValue(m_buyer_tax_number, json[QString("buyer_tax_number")]);
    m_buyer_tax_number_isSet = !json[QString("buyer_tax_number")].isNull() && m_buyer_tax_number_isValid;

    m_comments_isValid = ::OpenAPI::fromJsonValue(m_comments, json[QString("comments")]);
    m_comments_isSet = !json[QString("comments")].isNull() && m_comments_isValid;

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_custom_data_isValid = ::OpenAPI::fromJsonValue(m_custom_data, json[QString("custom_data")]);
    m_custom_data_isSet = !json[QString("custom_data")].isNull() && m_custom_data_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_custom_id_isValid = ::OpenAPI::fromJsonValue(m_custom_id, json[QString("custom_id")]);
    m_custom_id_isSet = !json[QString("custom_id")].isNull() && m_custom_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_force_country_code_isValid = ::OpenAPI::fromJsonValue(m_force_country_code, json[QString("force_country_code")]);
    m_force_country_code_isSet = !json[QString("force_country_code")].isNull() && m_force_country_code_isValid;

    m_invoice_address_isValid = ::OpenAPI::fromJsonValue(m_invoice_address, json[QString("invoice_address")]);
    m_invoice_address_isSet = !json[QString("invoice_address")].isNull() && m_invoice_address_isValid;

    m_invoice_date_isValid = ::OpenAPI::fromJsonValue(m_invoice_date, json[QString("invoice_date")]);
    m_invoice_date_isSet = !json[QString("invoice_date")].isNull() && m_invoice_date_isValid;

    m_invoice_number_isValid = ::OpenAPI::fromJsonValue(m_invoice_number, json[QString("invoice_number")]);
    m_invoice_number_isSet = !json[QString("invoice_number")].isNull() && m_invoice_number_isValid;

    m_invoice_place_isValid = ::OpenAPI::fromJsonValue(m_invoice_place, json[QString("invoice_place")]);
    m_invoice_place_isSet = !json[QString("invoice_place")].isNull() && m_invoice_place_isValid;

    m_note_isValid = ::OpenAPI::fromJsonValue(m_note, json[QString("note")]);
    m_note_isSet = !json[QString("note")].isNull() && m_note_isValid;

    m_order_date_isValid = ::OpenAPI::fromJsonValue(m_order_date, json[QString("order_date")]);
    m_order_date_isSet = !json[QString("order_date")].isNull() && m_order_date_isValid;

    m_original_transaction_key_isValid = ::OpenAPI::fromJsonValue(m_original_transaction_key, json[QString("original_transaction_key")]);
    m_original_transaction_key_isSet = !json[QString("original_transaction_key")].isNull() && m_original_transaction_key_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_sub_account_id_isValid = ::OpenAPI::fromJsonValue(m_sub_account_id, json[QString("sub_account_id")]);
    m_sub_account_id_isSet = !json[QString("sub_account_id")].isNull() && m_sub_account_id_isValid;

    m_supply_date_isValid = ::OpenAPI::fromJsonValue(m_supply_date, json[QString("supply_date")]);
    m_supply_date_isSet = !json[QString("supply_date")].isNull() && m_supply_date_isValid;

    m_tax_country_code_isValid = ::OpenAPI::fromJsonValue(m_tax_country_code, json[QString("tax_country_code")]);
    m_tax_country_code_isSet = !json[QString("tax_country_code")].isNull() && m_tax_country_code_isValid;

    m_tax_data_isValid = ::OpenAPI::fromJsonValue(m_tax_data, json[QString("tax_data")]);
    m_tax_data_isSet = !json[QString("tax_data")].isNull() && m_tax_data_isValid;

    m_tax_deducted_isValid = ::OpenAPI::fromJsonValue(m_tax_deducted, json[QString("tax_deducted")]);
    m_tax_deducted_isSet = !json[QString("tax_deducted")].isNull() && m_tax_deducted_isValid;

    m_transaction_lines_isValid = ::OpenAPI::fromJsonValue(m_transaction_lines, json[QString("transaction_lines")]);
    m_transaction_lines_isSet = !json[QString("transaction_lines")].isNull() && m_transaction_lines_isValid;

    m_verification_token_isValid = ::OpenAPI::fromJsonValue(m_verification_token, json[QString("verification_token")]);
    m_verification_token_isSet = !json[QString("verification_token")].isNull() && m_verification_token_isValid;
}

QString OAIInput_transaction::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInput_transaction::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_currencies.isSet()) {
        obj.insert(QString("additional_currencies"), ::OpenAPI::toJsonValue(m_additional_currencies));
    }
    if (m_billing_country_code_isSet) {
        obj.insert(QString("billing_country_code"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_buyer_credit_card_prefix_isSet) {
        obj.insert(QString("buyer_credit_card_prefix"), ::OpenAPI::toJsonValue(m_buyer_credit_card_prefix));
    }
    if (m_buyer_email_isSet) {
        obj.insert(QString("buyer_email"), ::OpenAPI::toJsonValue(m_buyer_email));
    }
    if (m_buyer_ip_isSet) {
        obj.insert(QString("buyer_ip"), ::OpenAPI::toJsonValue(m_buyer_ip));
    }
    if (m_buyer_name_isSet) {
        obj.insert(QString("buyer_name"), ::OpenAPI::toJsonValue(m_buyer_name));
    }
    if (m_buyer_tax_number_isSet) {
        obj.insert(QString("buyer_tax_number"), ::OpenAPI::toJsonValue(m_buyer_tax_number));
    }
    if (m_comments_isSet) {
        obj.insert(QString("comments"), ::OpenAPI::toJsonValue(m_comments));
    }
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_custom_data_isSet) {
        obj.insert(QString("custom_data"), ::OpenAPI::toJsonValue(m_custom_data));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_custom_id_isSet) {
        obj.insert(QString("custom_id"), ::OpenAPI::toJsonValue(m_custom_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_evidence.isSet()) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_force_country_code_isSet) {
        obj.insert(QString("force_country_code"), ::OpenAPI::toJsonValue(m_force_country_code));
    }
    if (m_invoice_address.isSet()) {
        obj.insert(QString("invoice_address"), ::OpenAPI::toJsonValue(m_invoice_address));
    }
    if (m_invoice_date_isSet) {
        obj.insert(QString("invoice_date"), ::OpenAPI::toJsonValue(m_invoice_date));
    }
    if (m_invoice_number_isSet) {
        obj.insert(QString("invoice_number"), ::OpenAPI::toJsonValue(m_invoice_number));
    }
    if (m_invoice_place_isSet) {
        obj.insert(QString("invoice_place"), ::OpenAPI::toJsonValue(m_invoice_place));
    }
    if (m_note_isSet) {
        obj.insert(QString("note"), ::OpenAPI::toJsonValue(m_note));
    }
    if (m_order_date_isSet) {
        obj.insert(QString("order_date"), ::OpenAPI::toJsonValue(m_order_date));
    }
    if (m_original_transaction_key_isSet) {
        obj.insert(QString("original_transaction_key"), ::OpenAPI::toJsonValue(m_original_transaction_key));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_sub_account_id_isSet) {
        obj.insert(QString("sub_account_id"), ::OpenAPI::toJsonValue(m_sub_account_id));
    }
    if (m_supply_date_isSet) {
        obj.insert(QString("supply_date"), ::OpenAPI::toJsonValue(m_supply_date));
    }
    if (m_tax_country_code_isSet) {
        obj.insert(QString("tax_country_code"), ::OpenAPI::toJsonValue(m_tax_country_code));
    }
    if (m_tax_data.isSet()) {
        obj.insert(QString("tax_data"), ::OpenAPI::toJsonValue(m_tax_data));
    }
    if (m_tax_deducted_isSet) {
        obj.insert(QString("tax_deducted"), ::OpenAPI::toJsonValue(m_tax_deducted));
    }
    if (m_transaction_lines.size() > 0) {
        obj.insert(QString("transaction_lines"), ::OpenAPI::toJsonValue(m_transaction_lines));
    }
    if (m_verification_token_isSet) {
        obj.insert(QString("verification_token"), ::OpenAPI::toJsonValue(m_verification_token));
    }
    return obj;
}

OAIAdditional_currencies OAIInput_transaction::getAdditionalCurrencies() const {
    return m_additional_currencies;
}
void OAIInput_transaction::setAdditionalCurrencies(const OAIAdditional_currencies &additional_currencies) {
    m_additional_currencies = additional_currencies;
    m_additional_currencies_isSet = true;
}

bool OAIInput_transaction::is_additional_currencies_Set() const{
    return m_additional_currencies_isSet;
}

bool OAIInput_transaction::is_additional_currencies_Valid() const{
    return m_additional_currencies_isValid;
}

QString OAIInput_transaction::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAIInput_transaction::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAIInput_transaction::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAIInput_transaction::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAIInput_transaction::getBuyerCreditCardPrefix() const {
    return m_buyer_credit_card_prefix;
}
void OAIInput_transaction::setBuyerCreditCardPrefix(const QString &buyer_credit_card_prefix) {
    m_buyer_credit_card_prefix = buyer_credit_card_prefix;
    m_buyer_credit_card_prefix_isSet = true;
}

bool OAIInput_transaction::is_buyer_credit_card_prefix_Set() const{
    return m_buyer_credit_card_prefix_isSet;
}

bool OAIInput_transaction::is_buyer_credit_card_prefix_Valid() const{
    return m_buyer_credit_card_prefix_isValid;
}

QString OAIInput_transaction::getBuyerEmail() const {
    return m_buyer_email;
}
void OAIInput_transaction::setBuyerEmail(const QString &buyer_email) {
    m_buyer_email = buyer_email;
    m_buyer_email_isSet = true;
}

bool OAIInput_transaction::is_buyer_email_Set() const{
    return m_buyer_email_isSet;
}

bool OAIInput_transaction::is_buyer_email_Valid() const{
    return m_buyer_email_isValid;
}

QString OAIInput_transaction::getBuyerIp() const {
    return m_buyer_ip;
}
void OAIInput_transaction::setBuyerIp(const QString &buyer_ip) {
    m_buyer_ip = buyer_ip;
    m_buyer_ip_isSet = true;
}

bool OAIInput_transaction::is_buyer_ip_Set() const{
    return m_buyer_ip_isSet;
}

bool OAIInput_transaction::is_buyer_ip_Valid() const{
    return m_buyer_ip_isValid;
}

QString OAIInput_transaction::getBuyerName() const {
    return m_buyer_name;
}
void OAIInput_transaction::setBuyerName(const QString &buyer_name) {
    m_buyer_name = buyer_name;
    m_buyer_name_isSet = true;
}

bool OAIInput_transaction::is_buyer_name_Set() const{
    return m_buyer_name_isSet;
}

bool OAIInput_transaction::is_buyer_name_Valid() const{
    return m_buyer_name_isValid;
}

QString OAIInput_transaction::getBuyerTaxNumber() const {
    return m_buyer_tax_number;
}
void OAIInput_transaction::setBuyerTaxNumber(const QString &buyer_tax_number) {
    m_buyer_tax_number = buyer_tax_number;
    m_buyer_tax_number_isSet = true;
}

bool OAIInput_transaction::is_buyer_tax_number_Set() const{
    return m_buyer_tax_number_isSet;
}

bool OAIInput_transaction::is_buyer_tax_number_Valid() const{
    return m_buyer_tax_number_isValid;
}

QString OAIInput_transaction::getComments() const {
    return m_comments;
}
void OAIInput_transaction::setComments(const QString &comments) {
    m_comments = comments;
    m_comments_isSet = true;
}

bool OAIInput_transaction::is_comments_Set() const{
    return m_comments_isSet;
}

bool OAIInput_transaction::is_comments_Valid() const{
    return m_comments_isValid;
}

QString OAIInput_transaction::getCurrencyCode() const {
    return m_currency_code;
}
void OAIInput_transaction::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIInput_transaction::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIInput_transaction::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIInput_transaction::getCustomData() const {
    return m_custom_data;
}
void OAIInput_transaction::setCustomData(const QString &custom_data) {
    m_custom_data = custom_data;
    m_custom_data_isSet = true;
}

bool OAIInput_transaction::is_custom_data_Set() const{
    return m_custom_data_isSet;
}

bool OAIInput_transaction::is_custom_data_Valid() const{
    return m_custom_data_isValid;
}

QList<OAICustom_fields> OAIInput_transaction::getCustomFields() const {
    return m_custom_fields;
}
void OAIInput_transaction::setCustomFields(const QList<OAICustom_fields> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAIInput_transaction::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAIInput_transaction::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAIInput_transaction::getCustomId() const {
    return m_custom_id;
}
void OAIInput_transaction::setCustomId(const QString &custom_id) {
    m_custom_id = custom_id;
    m_custom_id_isSet = true;
}

bool OAIInput_transaction::is_custom_id_Set() const{
    return m_custom_id_isSet;
}

bool OAIInput_transaction::is_custom_id_Valid() const{
    return m_custom_id_isValid;
}

QString OAIInput_transaction::getCustomerId() const {
    return m_customer_id;
}
void OAIInput_transaction::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIInput_transaction::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIInput_transaction::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIInput_transaction::getDescription() const {
    return m_description;
}
void OAIInput_transaction::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIInput_transaction::is_description_Set() const{
    return m_description_isSet;
}

bool OAIInput_transaction::is_description_Valid() const{
    return m_description_isValid;
}

OAIEvidence OAIInput_transaction::getEvidence() const {
    return m_evidence;
}
void OAIInput_transaction::setEvidence(const OAIEvidence &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAIInput_transaction::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAIInput_transaction::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QString OAIInput_transaction::getForceCountryCode() const {
    return m_force_country_code;
}
void OAIInput_transaction::setForceCountryCode(const QString &force_country_code) {
    m_force_country_code = force_country_code;
    m_force_country_code_isSet = true;
}

bool OAIInput_transaction::is_force_country_code_Set() const{
    return m_force_country_code_isSet;
}

bool OAIInput_transaction::is_force_country_code_Valid() const{
    return m_force_country_code_isValid;
}

OAIInvoice_address OAIInput_transaction::getInvoiceAddress() const {
    return m_invoice_address;
}
void OAIInput_transaction::setInvoiceAddress(const OAIInvoice_address &invoice_address) {
    m_invoice_address = invoice_address;
    m_invoice_address_isSet = true;
}

bool OAIInput_transaction::is_invoice_address_Set() const{
    return m_invoice_address_isSet;
}

bool OAIInput_transaction::is_invoice_address_Valid() const{
    return m_invoice_address_isValid;
}

QString OAIInput_transaction::getInvoiceDate() const {
    return m_invoice_date;
}
void OAIInput_transaction::setInvoiceDate(const QString &invoice_date) {
    m_invoice_date = invoice_date;
    m_invoice_date_isSet = true;
}

bool OAIInput_transaction::is_invoice_date_Set() const{
    return m_invoice_date_isSet;
}

bool OAIInput_transaction::is_invoice_date_Valid() const{
    return m_invoice_date_isValid;
}

QString OAIInput_transaction::getInvoiceNumber() const {
    return m_invoice_number;
}
void OAIInput_transaction::setInvoiceNumber(const QString &invoice_number) {
    m_invoice_number = invoice_number;
    m_invoice_number_isSet = true;
}

bool OAIInput_transaction::is_invoice_number_Set() const{
    return m_invoice_number_isSet;
}

bool OAIInput_transaction::is_invoice_number_Valid() const{
    return m_invoice_number_isValid;
}

QString OAIInput_transaction::getInvoicePlace() const {
    return m_invoice_place;
}
void OAIInput_transaction::setInvoicePlace(const QString &invoice_place) {
    m_invoice_place = invoice_place;
    m_invoice_place_isSet = true;
}

bool OAIInput_transaction::is_invoice_place_Set() const{
    return m_invoice_place_isSet;
}

bool OAIInput_transaction::is_invoice_place_Valid() const{
    return m_invoice_place_isValid;
}

QString OAIInput_transaction::getNote() const {
    return m_note;
}
void OAIInput_transaction::setNote(const QString &note) {
    m_note = note;
    m_note_isSet = true;
}

bool OAIInput_transaction::is_note_Set() const{
    return m_note_isSet;
}

bool OAIInput_transaction::is_note_Valid() const{
    return m_note_isValid;
}

QString OAIInput_transaction::getOrderDate() const {
    return m_order_date;
}
void OAIInput_transaction::setOrderDate(const QString &order_date) {
    m_order_date = order_date;
    m_order_date_isSet = true;
}

bool OAIInput_transaction::is_order_date_Set() const{
    return m_order_date_isSet;
}

bool OAIInput_transaction::is_order_date_Valid() const{
    return m_order_date_isValid;
}

QString OAIInput_transaction::getOriginalTransactionKey() const {
    return m_original_transaction_key;
}
void OAIInput_transaction::setOriginalTransactionKey(const QString &original_transaction_key) {
    m_original_transaction_key = original_transaction_key;
    m_original_transaction_key_isSet = true;
}

bool OAIInput_transaction::is_original_transaction_key_Set() const{
    return m_original_transaction_key_isSet;
}

bool OAIInput_transaction::is_original_transaction_key_Valid() const{
    return m_original_transaction_key_isValid;
}

QString OAIInput_transaction::getStatus() const {
    return m_status;
}
void OAIInput_transaction::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIInput_transaction::is_status_Set() const{
    return m_status_isSet;
}

bool OAIInput_transaction::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIInput_transaction::getSubAccountId() const {
    return m_sub_account_id;
}
void OAIInput_transaction::setSubAccountId(const QString &sub_account_id) {
    m_sub_account_id = sub_account_id;
    m_sub_account_id_isSet = true;
}

bool OAIInput_transaction::is_sub_account_id_Set() const{
    return m_sub_account_id_isSet;
}

bool OAIInput_transaction::is_sub_account_id_Valid() const{
    return m_sub_account_id_isValid;
}

QString OAIInput_transaction::getSupplyDate() const {
    return m_supply_date;
}
void OAIInput_transaction::setSupplyDate(const QString &supply_date) {
    m_supply_date = supply_date;
    m_supply_date_isSet = true;
}

bool OAIInput_transaction::is_supply_date_Set() const{
    return m_supply_date_isSet;
}

bool OAIInput_transaction::is_supply_date_Valid() const{
    return m_supply_date_isValid;
}

QString OAIInput_transaction::getTaxCountryCode() const {
    return m_tax_country_code;
}
void OAIInput_transaction::setTaxCountryCode(const QString &tax_country_code) {
    m_tax_country_code = tax_country_code;
    m_tax_country_code_isSet = true;
}

bool OAIInput_transaction::is_tax_country_code_Set() const{
    return m_tax_country_code_isSet;
}

bool OAIInput_transaction::is_tax_country_code_Valid() const{
    return m_tax_country_code_isValid;
}

OAITax_data_schema OAIInput_transaction::getTaxData() const {
    return m_tax_data;
}
void OAIInput_transaction::setTaxData(const OAITax_data_schema &tax_data) {
    m_tax_data = tax_data;
    m_tax_data_isSet = true;
}

bool OAIInput_transaction::is_tax_data_Set() const{
    return m_tax_data_isSet;
}

bool OAIInput_transaction::is_tax_data_Valid() const{
    return m_tax_data_isValid;
}

bool OAIInput_transaction::isTaxDeducted() const {
    return m_tax_deducted;
}
void OAIInput_transaction::setTaxDeducted(const bool &tax_deducted) {
    m_tax_deducted = tax_deducted;
    m_tax_deducted_isSet = true;
}

bool OAIInput_transaction::is_tax_deducted_Set() const{
    return m_tax_deducted_isSet;
}

bool OAIInput_transaction::is_tax_deducted_Valid() const{
    return m_tax_deducted_isValid;
}

QList<OAIInput_transaction_line> OAIInput_transaction::getTransactionLines() const {
    return m_transaction_lines;
}
void OAIInput_transaction::setTransactionLines(const QList<OAIInput_transaction_line> &transaction_lines) {
    m_transaction_lines = transaction_lines;
    m_transaction_lines_isSet = true;
}

bool OAIInput_transaction::is_transaction_lines_Set() const{
    return m_transaction_lines_isSet;
}

bool OAIInput_transaction::is_transaction_lines_Valid() const{
    return m_transaction_lines_isValid;
}

QString OAIInput_transaction::getVerificationToken() const {
    return m_verification_token;
}
void OAIInput_transaction::setVerificationToken(const QString &verification_token) {
    m_verification_token = verification_token;
    m_verification_token_isSet = true;
}

bool OAIInput_transaction::is_verification_token_Set() const{
    return m_verification_token_isSet;
}

bool OAIInput_transaction::is_verification_token_Valid() const{
    return m_verification_token_isValid;
}

bool OAIInput_transaction::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_currencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_credit_card_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_tax_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_comments_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_data_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_force_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_address.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_invoice_place_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_order_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_transaction_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sub_account_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_data.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_deducted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_lines.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInput_transaction::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_currency_code_isValid && m_transaction_lines_isValid && true;
}

} // namespace OpenAPI
