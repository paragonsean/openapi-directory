/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICountries.h
 *
 * 
 */

#ifndef OAICountries_H
#define OAICountries_H

#include <QJsonObject>

#include "OAICountry_schema.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICountry_schema;

class OAICountries : public OAIObject {
public:
    OAICountries();
    OAICountries(QString json);
    ~OAICountries() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAICountry_schema getBy2003Rules() const;
    void setBy2003Rules(const OAICountry_schema &by_2003_rules);
    bool is_by_2003_rules_Set() const;
    bool is_by_2003_rules_Valid() const;

    OAICountry_schema getByBilling() const;
    void setByBilling(const OAICountry_schema &by_billing);
    bool is_by_billing_Set() const;
    bool is_by_billing_Valid() const;

    OAICountry_schema getByCc() const;
    void setByCc(const OAICountry_schema &by_cc);
    bool is_by_cc_Set() const;
    bool is_by_cc_Valid() const;

    OAICountry_schema getByIp() const;
    void setByIp(const OAICountry_schema &by_ip);
    bool is_by_ip_Set() const;
    bool is_by_ip_Valid() const;

    OAICountry_schema getByTaxNumber() const;
    void setByTaxNumber(const OAICountry_schema &by_tax_number);
    bool is_by_tax_number_Set() const;
    bool is_by_tax_number_Valid() const;

    OAICountry_schema getByToken() const;
    void setByToken(const OAICountry_schema &by_token);
    bool is_by_token_Set() const;
    bool is_by_token_Valid() const;

    OAICountry_schema getDetected() const;
    void setDetected(const OAICountry_schema &detected);
    bool is_detected_Set() const;
    bool is_detected_Valid() const;

    OAICountry_schema getForced() const;
    void setForced(const OAICountry_schema &forced);
    bool is_forced_Set() const;
    bool is_forced_Valid() const;

    OAICountry_schema getGuessedFromIp() const;
    void setGuessedFromIp(const OAICountry_schema &guessed_from_ip);
    bool is_guessed_from_ip_Set() const;
    bool is_guessed_from_ip_Valid() const;

    OAICountry_schema getOtherCommerciallyRelevantInfo() const;
    void setOtherCommerciallyRelevantInfo(const OAICountry_schema &other_commercially_relevant_info);
    bool is_other_commercially_relevant_info_Set() const;
    bool is_other_commercially_relevant_info_Valid() const;

    OAICountry_schema getSelfDeclaration() const;
    void setSelfDeclaration(const OAICountry_schema &self_declaration);
    bool is_self_declaration_Set() const;
    bool is_self_declaration_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAICountry_schema m_by_2003_rules;
    bool m_by_2003_rules_isSet;
    bool m_by_2003_rules_isValid;

    OAICountry_schema m_by_billing;
    bool m_by_billing_isSet;
    bool m_by_billing_isValid;

    OAICountry_schema m_by_cc;
    bool m_by_cc_isSet;
    bool m_by_cc_isValid;

    OAICountry_schema m_by_ip;
    bool m_by_ip_isSet;
    bool m_by_ip_isValid;

    OAICountry_schema m_by_tax_number;
    bool m_by_tax_number_isSet;
    bool m_by_tax_number_isValid;

    OAICountry_schema m_by_token;
    bool m_by_token_isSet;
    bool m_by_token_isValid;

    OAICountry_schema m_detected;
    bool m_detected_isSet;
    bool m_detected_isValid;

    OAICountry_schema m_forced;
    bool m_forced_isSet;
    bool m_forced_isValid;

    OAICountry_schema m_guessed_from_ip;
    bool m_guessed_from_ip_isSet;
    bool m_guessed_from_ip_isValid;

    OAICountry_schema m_other_commercially_relevant_info;
    bool m_other_commercially_relevant_info_isSet;
    bool m_other_commercially_relevant_info_isValid;

    OAICountry_schema m_self_declaration;
    bool m_self_declaration_isSet;
    bool m_self_declaration_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICountries)

#endif // OAICountries_H
