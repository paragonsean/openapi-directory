/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateRefundIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateRefundIn::OAICreateRefundIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateRefundIn::OAICreateRefundIn() {
    this->initializeModel();
}

OAICreateRefundIn::~OAICreateRefundIn() {}

void OAICreateRefundIn::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_custom_id_isSet = false;
    m_custom_id_isValid = false;

    m_line_key_isSet = false;
    m_line_key_isValid = false;

    m_refund_reason_isSet = false;
    m_refund_reason_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAICreateRefundIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateRefundIn::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_custom_id_isValid = ::OpenAPI::fromJsonValue(m_custom_id, json[QString("custom_id")]);
    m_custom_id_isSet = !json[QString("custom_id")].isNull() && m_custom_id_isValid;

    m_line_key_isValid = ::OpenAPI::fromJsonValue(m_line_key, json[QString("line_key")]);
    m_line_key_isSet = !json[QString("line_key")].isNull() && m_line_key_isValid;

    m_refund_reason_isValid = ::OpenAPI::fromJsonValue(m_refund_reason, json[QString("refund_reason")]);
    m_refund_reason_isSet = !json[QString("refund_reason")].isNull() && m_refund_reason_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;
}

QString OAICreateRefundIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateRefundIn::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_custom_id_isSet) {
        obj.insert(QString("custom_id"), ::OpenAPI::toJsonValue(m_custom_id));
    }
    if (m_line_key_isSet) {
        obj.insert(QString("line_key"), ::OpenAPI::toJsonValue(m_line_key));
    }
    if (m_refund_reason_isSet) {
        obj.insert(QString("refund_reason"), ::OpenAPI::toJsonValue(m_refund_reason));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

double OAICreateRefundIn::getAmount() const {
    return m_amount;
}
void OAICreateRefundIn::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAICreateRefundIn::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAICreateRefundIn::is_amount_Valid() const{
    return m_amount_isValid;
}

QString OAICreateRefundIn::getCustomId() const {
    return m_custom_id;
}
void OAICreateRefundIn::setCustomId(const QString &custom_id) {
    m_custom_id = custom_id;
    m_custom_id_isSet = true;
}

bool OAICreateRefundIn::is_custom_id_Set() const{
    return m_custom_id_isSet;
}

bool OAICreateRefundIn::is_custom_id_Valid() const{
    return m_custom_id_isValid;
}

QString OAICreateRefundIn::getLineKey() const {
    return m_line_key;
}
void OAICreateRefundIn::setLineKey(const QString &line_key) {
    m_line_key = line_key;
    m_line_key_isSet = true;
}

bool OAICreateRefundIn::is_line_key_Set() const{
    return m_line_key_isSet;
}

bool OAICreateRefundIn::is_line_key_Valid() const{
    return m_line_key_isValid;
}

QString OAICreateRefundIn::getRefundReason() const {
    return m_refund_reason;
}
void OAICreateRefundIn::setRefundReason(const QString &refund_reason) {
    m_refund_reason = refund_reason;
    m_refund_reason_isSet = true;
}

bool OAICreateRefundIn::is_refund_reason_Set() const{
    return m_refund_reason_isSet;
}

bool OAICreateRefundIn::is_refund_reason_Valid() const{
    return m_refund_reason_isValid;
}

double OAICreateRefundIn::getTotalAmount() const {
    return m_total_amount;
}
void OAICreateRefundIn::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAICreateRefundIn::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAICreateRefundIn::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAICreateRefundIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateRefundIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
