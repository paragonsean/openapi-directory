/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUs_tax_exempt_state.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUs_tax_exempt_state::OAIUs_tax_exempt_state(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUs_tax_exempt_state::OAIUs_tax_exempt_state() {
    this->initializeModel();
}

OAIUs_tax_exempt_state::~OAIUs_tax_exempt_state() {}

void OAIUs_tax_exempt_state::initializeModel() {

    m_identifier_for_exemption_reason_isSet = false;
    m_identifier_for_exemption_reason_isValid = false;

    m_reason_for_exemption_isSet = false;
    m_reason_for_exemption_isValid = false;

    m_state_abbr_isSet = false;
    m_state_abbr_isValid = false;
}

void OAIUs_tax_exempt_state::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUs_tax_exempt_state::fromJsonObject(QJsonObject json) {

    m_identifier_for_exemption_reason_isValid = ::OpenAPI::fromJsonValue(m_identifier_for_exemption_reason, json[QString("identifier_for_exemption_reason")]);
    m_identifier_for_exemption_reason_isSet = !json[QString("identifier_for_exemption_reason")].isNull() && m_identifier_for_exemption_reason_isValid;

    m_reason_for_exemption_isValid = ::OpenAPI::fromJsonValue(m_reason_for_exemption, json[QString("reason_for_exemption")]);
    m_reason_for_exemption_isSet = !json[QString("reason_for_exemption")].isNull() && m_reason_for_exemption_isValid;

    m_state_abbr_isValid = ::OpenAPI::fromJsonValue(m_state_abbr, json[QString("state_abbr")]);
    m_state_abbr_isSet = !json[QString("state_abbr")].isNull() && m_state_abbr_isValid;
}

QString OAIUs_tax_exempt_state::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUs_tax_exempt_state::asJsonObject() const {
    QJsonObject obj;
    if (m_identifier_for_exemption_reason_isSet) {
        obj.insert(QString("identifier_for_exemption_reason"), ::OpenAPI::toJsonValue(m_identifier_for_exemption_reason));
    }
    if (m_reason_for_exemption_isSet) {
        obj.insert(QString("reason_for_exemption"), ::OpenAPI::toJsonValue(m_reason_for_exemption));
    }
    if (m_state_abbr_isSet) {
        obj.insert(QString("state_abbr"), ::OpenAPI::toJsonValue(m_state_abbr));
    }
    return obj;
}

QString OAIUs_tax_exempt_state::getIdentifierForExemptionReason() const {
    return m_identifier_for_exemption_reason;
}
void OAIUs_tax_exempt_state::setIdentifierForExemptionReason(const QString &identifier_for_exemption_reason) {
    m_identifier_for_exemption_reason = identifier_for_exemption_reason;
    m_identifier_for_exemption_reason_isSet = true;
}

bool OAIUs_tax_exempt_state::is_identifier_for_exemption_reason_Set() const{
    return m_identifier_for_exemption_reason_isSet;
}

bool OAIUs_tax_exempt_state::is_identifier_for_exemption_reason_Valid() const{
    return m_identifier_for_exemption_reason_isValid;
}

QString OAIUs_tax_exempt_state::getReasonForExemption() const {
    return m_reason_for_exemption;
}
void OAIUs_tax_exempt_state::setReasonForExemption(const QString &reason_for_exemption) {
    m_reason_for_exemption = reason_for_exemption;
    m_reason_for_exemption_isSet = true;
}

bool OAIUs_tax_exempt_state::is_reason_for_exemption_Set() const{
    return m_reason_for_exemption_isSet;
}

bool OAIUs_tax_exempt_state::is_reason_for_exemption_Valid() const{
    return m_reason_for_exemption_isValid;
}

QString OAIUs_tax_exempt_state::getStateAbbr() const {
    return m_state_abbr;
}
void OAIUs_tax_exempt_state::setStateAbbr(const QString &state_abbr) {
    m_state_abbr = state_abbr;
    m_state_abbr_isSet = true;
}

bool OAIUs_tax_exempt_state::is_state_abbr_Set() const{
    return m_state_abbr_isSet;
}

bool OAIUs_tax_exempt_state::is_state_abbr_Valid() const{
    return m_state_abbr_isValid;
}

bool OAIUs_tax_exempt_state::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_identifier_for_exemption_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_reason_for_exemption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_state_abbr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUs_tax_exempt_state::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_state_abbr_isValid && true;
}

} // namespace OpenAPI
