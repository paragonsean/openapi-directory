/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITransaction_lines.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITransaction_lines::OAITransaction_lines(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITransaction_lines::OAITransaction_lines() {
    this->initializeModel();
}

OAITransaction_lines::~OAITransaction_lines() {}

void OAITransaction_lines::initializeModel() {

    m_additional_currencies_isSet = false;
    m_additional_currencies_isValid = false;

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_custom_fields_isSet = false;
    m_custom_fields_isValid = false;

    m_custom_id_isSet = false;
    m_custom_id_isValid = false;

    m_deducted_tax_amount_isSet = false;
    m_deducted_tax_amount_isValid = false;

    m_deducted_tax_rate_isSet = false;
    m_deducted_tax_rate_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_informative_isSet = false;
    m_informative_isValid = false;

    m_line_key_isSet = false;
    m_line_key_isValid = false;

    m_product_code_isSet = false;
    m_product_code_isValid = false;

    m_product_tax_code_isSet = false;
    m_product_tax_code_isValid = false;

    m_product_type_isSet = false;
    m_product_type_isValid = false;

    m_quantity_isSet = false;
    m_quantity_isValid = false;

    m_refunded_tax_amount_isSet = false;
    m_refunded_tax_amount_isValid = false;

    m_refunded_total_amount_isSet = false;
    m_refunded_total_amount_isValid = false;

    m_supply_date_isSet = false;
    m_supply_date_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_name_isSet = false;
    m_tax_name_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;

    m_unit_of_measure_isSet = false;
    m_unit_of_measure_isValid = false;

    m_unit_price_isSet = false;
    m_unit_price_isValid = false;
}

void OAITransaction_lines::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITransaction_lines::fromJsonObject(QJsonObject json) {

    m_additional_currencies_isValid = ::OpenAPI::fromJsonValue(m_additional_currencies, json[QString("additional_currencies")]);
    m_additional_currencies_isSet = !json[QString("additional_currencies")].isNull() && m_additional_currencies_isValid;

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_custom_fields_isValid = ::OpenAPI::fromJsonValue(m_custom_fields, json[QString("custom_fields")]);
    m_custom_fields_isSet = !json[QString("custom_fields")].isNull() && m_custom_fields_isValid;

    m_custom_id_isValid = ::OpenAPI::fromJsonValue(m_custom_id, json[QString("custom_id")]);
    m_custom_id_isSet = !json[QString("custom_id")].isNull() && m_custom_id_isValid;

    m_deducted_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_deducted_tax_amount, json[QString("deducted_tax_amount")]);
    m_deducted_tax_amount_isSet = !json[QString("deducted_tax_amount")].isNull() && m_deducted_tax_amount_isValid;

    m_deducted_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_deducted_tax_rate, json[QString("deducted_tax_rate")]);
    m_deducted_tax_rate_isSet = !json[QString("deducted_tax_rate")].isNull() && m_deducted_tax_rate_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_informative_isValid = ::OpenAPI::fromJsonValue(m_informative, json[QString("informative")]);
    m_informative_isSet = !json[QString("informative")].isNull() && m_informative_isValid;

    m_line_key_isValid = ::OpenAPI::fromJsonValue(m_line_key, json[QString("line_key")]);
    m_line_key_isSet = !json[QString("line_key")].isNull() && m_line_key_isValid;

    m_product_code_isValid = ::OpenAPI::fromJsonValue(m_product_code, json[QString("product_code")]);
    m_product_code_isSet = !json[QString("product_code")].isNull() && m_product_code_isValid;

    m_product_tax_code_isValid = ::OpenAPI::fromJsonValue(m_product_tax_code, json[QString("product_tax_code")]);
    m_product_tax_code_isSet = !json[QString("product_tax_code")].isNull() && m_product_tax_code_isValid;

    m_product_type_isValid = ::OpenAPI::fromJsonValue(m_product_type, json[QString("product_type")]);
    m_product_type_isSet = !json[QString("product_type")].isNull() && m_product_type_isValid;

    m_quantity_isValid = ::OpenAPI::fromJsonValue(m_quantity, json[QString("quantity")]);
    m_quantity_isSet = !json[QString("quantity")].isNull() && m_quantity_isValid;

    m_refunded_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_refunded_tax_amount, json[QString("refunded_tax_amount")]);
    m_refunded_tax_amount_isSet = !json[QString("refunded_tax_amount")].isNull() && m_refunded_tax_amount_isValid;

    m_refunded_total_amount_isValid = ::OpenAPI::fromJsonValue(m_refunded_total_amount, json[QString("refunded_total_amount")]);
    m_refunded_total_amount_isSet = !json[QString("refunded_total_amount")].isNull() && m_refunded_total_amount_isValid;

    m_supply_date_isValid = ::OpenAPI::fromJsonValue(m_supply_date, json[QString("supply_date")]);
    m_supply_date_isSet = !json[QString("supply_date")].isNull() && m_supply_date_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_tax_name_isValid = ::OpenAPI::fromJsonValue(m_tax_name, json[QString("tax_name")]);
    m_tax_name_isSet = !json[QString("tax_name")].isNull() && m_tax_name_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("tax_rate")]);
    m_tax_rate_isSet = !json[QString("tax_rate")].isNull() && m_tax_rate_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;

    m_unit_of_measure_isValid = ::OpenAPI::fromJsonValue(m_unit_of_measure, json[QString("unit_of_measure")]);
    m_unit_of_measure_isSet = !json[QString("unit_of_measure")].isNull() && m_unit_of_measure_isValid;

    m_unit_price_isValid = ::OpenAPI::fromJsonValue(m_unit_price, json[QString("unit_price")]);
    m_unit_price_isSet = !json[QString("unit_price")].isNull() && m_unit_price_isValid;
}

QString OAITransaction_lines::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITransaction_lines::asJsonObject() const {
    QJsonObject obj;
    if (m_additional_currencies.isSet()) {
        obj.insert(QString("additional_currencies"), ::OpenAPI::toJsonValue(m_additional_currencies));
    }
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_custom_fields.size() > 0) {
        obj.insert(QString("custom_fields"), ::OpenAPI::toJsonValue(m_custom_fields));
    }
    if (m_custom_id_isSet) {
        obj.insert(QString("custom_id"), ::OpenAPI::toJsonValue(m_custom_id));
    }
    if (m_deducted_tax_amount_isSet) {
        obj.insert(QString("deducted_tax_amount"), ::OpenAPI::toJsonValue(m_deducted_tax_amount));
    }
    if (m_deducted_tax_rate_isSet) {
        obj.insert(QString("deducted_tax_rate"), ::OpenAPI::toJsonValue(m_deducted_tax_rate));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_informative_isSet) {
        obj.insert(QString("informative"), ::OpenAPI::toJsonValue(m_informative));
    }
    if (m_line_key_isSet) {
        obj.insert(QString("line_key"), ::OpenAPI::toJsonValue(m_line_key));
    }
    if (m_product_code_isSet) {
        obj.insert(QString("product_code"), ::OpenAPI::toJsonValue(m_product_code));
    }
    if (m_product_tax_code_isSet) {
        obj.insert(QString("product_tax_code"), ::OpenAPI::toJsonValue(m_product_tax_code));
    }
    if (m_product_type_isSet) {
        obj.insert(QString("product_type"), ::OpenAPI::toJsonValue(m_product_type));
    }
    if (m_quantity_isSet) {
        obj.insert(QString("quantity"), ::OpenAPI::toJsonValue(m_quantity));
    }
    if (m_refunded_tax_amount_isSet) {
        obj.insert(QString("refunded_tax_amount"), ::OpenAPI::toJsonValue(m_refunded_tax_amount));
    }
    if (m_refunded_total_amount_isSet) {
        obj.insert(QString("refunded_total_amount"), ::OpenAPI::toJsonValue(m_refunded_total_amount));
    }
    if (m_supply_date_isSet) {
        obj.insert(QString("supply_date"), ::OpenAPI::toJsonValue(m_supply_date));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_name_isSet) {
        obj.insert(QString("tax_name"), ::OpenAPI::toJsonValue(m_tax_name));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("tax_rate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    if (m_unit_of_measure_isSet) {
        obj.insert(QString("unit_of_measure"), ::OpenAPI::toJsonValue(m_unit_of_measure));
    }
    if (m_unit_price_isSet) {
        obj.insert(QString("unit_price"), ::OpenAPI::toJsonValue(m_unit_price));
    }
    return obj;
}

OAIAdditional_currencies OAITransaction_lines::getAdditionalCurrencies() const {
    return m_additional_currencies;
}
void OAITransaction_lines::setAdditionalCurrencies(const OAIAdditional_currencies &additional_currencies) {
    m_additional_currencies = additional_currencies;
    m_additional_currencies_isSet = true;
}

bool OAITransaction_lines::is_additional_currencies_Set() const{
    return m_additional_currencies_isSet;
}

bool OAITransaction_lines::is_additional_currencies_Valid() const{
    return m_additional_currencies_isValid;
}

double OAITransaction_lines::getAmount() const {
    return m_amount;
}
void OAITransaction_lines::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAITransaction_lines::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAITransaction_lines::is_amount_Valid() const{
    return m_amount_isValid;
}

QList<OAICustom_fields> OAITransaction_lines::getCustomFields() const {
    return m_custom_fields;
}
void OAITransaction_lines::setCustomFields(const QList<OAICustom_fields> &custom_fields) {
    m_custom_fields = custom_fields;
    m_custom_fields_isSet = true;
}

bool OAITransaction_lines::is_custom_fields_Set() const{
    return m_custom_fields_isSet;
}

bool OAITransaction_lines::is_custom_fields_Valid() const{
    return m_custom_fields_isValid;
}

QString OAITransaction_lines::getCustomId() const {
    return m_custom_id;
}
void OAITransaction_lines::setCustomId(const QString &custom_id) {
    m_custom_id = custom_id;
    m_custom_id_isSet = true;
}

bool OAITransaction_lines::is_custom_id_Set() const{
    return m_custom_id_isSet;
}

bool OAITransaction_lines::is_custom_id_Valid() const{
    return m_custom_id_isValid;
}

double OAITransaction_lines::getDeductedTaxAmount() const {
    return m_deducted_tax_amount;
}
void OAITransaction_lines::setDeductedTaxAmount(const double &deducted_tax_amount) {
    m_deducted_tax_amount = deducted_tax_amount;
    m_deducted_tax_amount_isSet = true;
}

bool OAITransaction_lines::is_deducted_tax_amount_Set() const{
    return m_deducted_tax_amount_isSet;
}

bool OAITransaction_lines::is_deducted_tax_amount_Valid() const{
    return m_deducted_tax_amount_isValid;
}

double OAITransaction_lines::getDeductedTaxRate() const {
    return m_deducted_tax_rate;
}
void OAITransaction_lines::setDeductedTaxRate(const double &deducted_tax_rate) {
    m_deducted_tax_rate = deducted_tax_rate;
    m_deducted_tax_rate_isSet = true;
}

bool OAITransaction_lines::is_deducted_tax_rate_Set() const{
    return m_deducted_tax_rate_isSet;
}

bool OAITransaction_lines::is_deducted_tax_rate_Valid() const{
    return m_deducted_tax_rate_isValid;
}

QString OAITransaction_lines::getDescription() const {
    return m_description;
}
void OAITransaction_lines::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAITransaction_lines::is_description_Set() const{
    return m_description_isSet;
}

bool OAITransaction_lines::is_description_Valid() const{
    return m_description_isValid;
}

double OAITransaction_lines::getId() const {
    return m_id;
}
void OAITransaction_lines::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAITransaction_lines::is_id_Set() const{
    return m_id_isSet;
}

bool OAITransaction_lines::is_id_Valid() const{
    return m_id_isValid;
}

bool OAITransaction_lines::isInformative() const {
    return m_informative;
}
void OAITransaction_lines::setInformative(const bool &informative) {
    m_informative = informative;
    m_informative_isSet = true;
}

bool OAITransaction_lines::is_informative_Set() const{
    return m_informative_isSet;
}

bool OAITransaction_lines::is_informative_Valid() const{
    return m_informative_isValid;
}

QString OAITransaction_lines::getLineKey() const {
    return m_line_key;
}
void OAITransaction_lines::setLineKey(const QString &line_key) {
    m_line_key = line_key;
    m_line_key_isSet = true;
}

bool OAITransaction_lines::is_line_key_Set() const{
    return m_line_key_isSet;
}

bool OAITransaction_lines::is_line_key_Valid() const{
    return m_line_key_isValid;
}

QString OAITransaction_lines::getProductCode() const {
    return m_product_code;
}
void OAITransaction_lines::setProductCode(const QString &product_code) {
    m_product_code = product_code;
    m_product_code_isSet = true;
}

bool OAITransaction_lines::is_product_code_Set() const{
    return m_product_code_isSet;
}

bool OAITransaction_lines::is_product_code_Valid() const{
    return m_product_code_isValid;
}

QString OAITransaction_lines::getProductTaxCode() const {
    return m_product_tax_code;
}
void OAITransaction_lines::setProductTaxCode(const QString &product_tax_code) {
    m_product_tax_code = product_tax_code;
    m_product_tax_code_isSet = true;
}

bool OAITransaction_lines::is_product_tax_code_Set() const{
    return m_product_tax_code_isSet;
}

bool OAITransaction_lines::is_product_tax_code_Valid() const{
    return m_product_tax_code_isValid;
}

QString OAITransaction_lines::getProductType() const {
    return m_product_type;
}
void OAITransaction_lines::setProductType(const QString &product_type) {
    m_product_type = product_type;
    m_product_type_isSet = true;
}

bool OAITransaction_lines::is_product_type_Set() const{
    return m_product_type_isSet;
}

bool OAITransaction_lines::is_product_type_Valid() const{
    return m_product_type_isValid;
}

double OAITransaction_lines::getQuantity() const {
    return m_quantity;
}
void OAITransaction_lines::setQuantity(const double &quantity) {
    m_quantity = quantity;
    m_quantity_isSet = true;
}

bool OAITransaction_lines::is_quantity_Set() const{
    return m_quantity_isSet;
}

bool OAITransaction_lines::is_quantity_Valid() const{
    return m_quantity_isValid;
}

double OAITransaction_lines::getRefundedTaxAmount() const {
    return m_refunded_tax_amount;
}
void OAITransaction_lines::setRefundedTaxAmount(const double &refunded_tax_amount) {
    m_refunded_tax_amount = refunded_tax_amount;
    m_refunded_tax_amount_isSet = true;
}

bool OAITransaction_lines::is_refunded_tax_amount_Set() const{
    return m_refunded_tax_amount_isSet;
}

bool OAITransaction_lines::is_refunded_tax_amount_Valid() const{
    return m_refunded_tax_amount_isValid;
}

double OAITransaction_lines::getRefundedTotalAmount() const {
    return m_refunded_total_amount;
}
void OAITransaction_lines::setRefundedTotalAmount(const double &refunded_total_amount) {
    m_refunded_total_amount = refunded_total_amount;
    m_refunded_total_amount_isSet = true;
}

bool OAITransaction_lines::is_refunded_total_amount_Set() const{
    return m_refunded_total_amount_isSet;
}

bool OAITransaction_lines::is_refunded_total_amount_Valid() const{
    return m_refunded_total_amount_isValid;
}

QString OAITransaction_lines::getSupplyDate() const {
    return m_supply_date;
}
void OAITransaction_lines::setSupplyDate(const QString &supply_date) {
    m_supply_date = supply_date;
    m_supply_date_isSet = true;
}

bool OAITransaction_lines::is_supply_date_Set() const{
    return m_supply_date_isSet;
}

bool OAITransaction_lines::is_supply_date_Valid() const{
    return m_supply_date_isValid;
}

double OAITransaction_lines::getTaxAmount() const {
    return m_tax_amount;
}
void OAITransaction_lines::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAITransaction_lines::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAITransaction_lines::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

QString OAITransaction_lines::getTaxName() const {
    return m_tax_name;
}
void OAITransaction_lines::setTaxName(const QString &tax_name) {
    m_tax_name = tax_name;
    m_tax_name_isSet = true;
}

bool OAITransaction_lines::is_tax_name_Set() const{
    return m_tax_name_isSet;
}

bool OAITransaction_lines::is_tax_name_Valid() const{
    return m_tax_name_isValid;
}

double OAITransaction_lines::getTaxRate() const {
    return m_tax_rate;
}
void OAITransaction_lines::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAITransaction_lines::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAITransaction_lines::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

double OAITransaction_lines::getTotalAmount() const {
    return m_total_amount;
}
void OAITransaction_lines::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAITransaction_lines::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAITransaction_lines::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

QString OAITransaction_lines::getUnitOfMeasure() const {
    return m_unit_of_measure;
}
void OAITransaction_lines::setUnitOfMeasure(const QString &unit_of_measure) {
    m_unit_of_measure = unit_of_measure;
    m_unit_of_measure_isSet = true;
}

bool OAITransaction_lines::is_unit_of_measure_Set() const{
    return m_unit_of_measure_isSet;
}

bool OAITransaction_lines::is_unit_of_measure_Valid() const{
    return m_unit_of_measure_isValid;
}

double OAITransaction_lines::getUnitPrice() const {
    return m_unit_price;
}
void OAITransaction_lines::setUnitPrice(const double &unit_price) {
    m_unit_price = unit_price;
    m_unit_price_isSet = true;
}

bool OAITransaction_lines::is_unit_price_Set() const{
    return m_unit_price_isSet;
}

bool OAITransaction_lines::is_unit_price_Valid() const{
    return m_unit_price_isValid;
}

bool OAITransaction_lines::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_additional_currencies.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_fields.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_custom_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deducted_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_deducted_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_informative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_tax_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_product_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_quantity_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refunded_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supply_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_of_measure_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_unit_price_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITransaction_lines::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_custom_id_isValid && true;
}

} // namespace OpenAPI
