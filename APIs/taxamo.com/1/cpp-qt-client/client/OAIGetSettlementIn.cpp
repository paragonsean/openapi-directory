/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSettlementIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSettlementIn::OAIGetSettlementIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSettlementIn::OAIGetSettlementIn() {
    this->initializeModel();
}

OAIGetSettlementIn::~OAIGetSettlementIn() {}

void OAIGetSettlementIn::initializeModel() {

    m_currency_code_isSet = false;
    m_currency_code_isValid = false;

    m_end_month_isSet = false;
    m_end_month_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_moss_country_code_isSet = false;
    m_moss_country_code_isValid = false;

    m_moss_tax_id_isSet = false;
    m_moss_tax_id_isValid = false;

    m_refund_date_kind_override_isSet = false;
    m_refund_date_kind_override_isValid = false;

    m_start_month_isSet = false;
    m_start_month_isValid = false;

    m_tax_country_code_isSet = false;
    m_tax_country_code_isValid = false;

    m_tax_id_isSet = false;
    m_tax_id_isValid = false;
}

void OAIGetSettlementIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSettlementIn::fromJsonObject(QJsonObject json) {

    m_currency_code_isValid = ::OpenAPI::fromJsonValue(m_currency_code, json[QString("currency_code")]);
    m_currency_code_isSet = !json[QString("currency_code")].isNull() && m_currency_code_isValid;

    m_end_month_isValid = ::OpenAPI::fromJsonValue(m_end_month, json[QString("end_month")]);
    m_end_month_isSet = !json[QString("end_month")].isNull() && m_end_month_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_moss_country_code_isValid = ::OpenAPI::fromJsonValue(m_moss_country_code, json[QString("moss_country_code")]);
    m_moss_country_code_isSet = !json[QString("moss_country_code")].isNull() && m_moss_country_code_isValid;

    m_moss_tax_id_isValid = ::OpenAPI::fromJsonValue(m_moss_tax_id, json[QString("moss_tax_id")]);
    m_moss_tax_id_isSet = !json[QString("moss_tax_id")].isNull() && m_moss_tax_id_isValid;

    m_refund_date_kind_override_isValid = ::OpenAPI::fromJsonValue(m_refund_date_kind_override, json[QString("refund_date_kind_override")]);
    m_refund_date_kind_override_isSet = !json[QString("refund_date_kind_override")].isNull() && m_refund_date_kind_override_isValid;

    m_start_month_isValid = ::OpenAPI::fromJsonValue(m_start_month, json[QString("start_month")]);
    m_start_month_isSet = !json[QString("start_month")].isNull() && m_start_month_isValid;

    m_tax_country_code_isValid = ::OpenAPI::fromJsonValue(m_tax_country_code, json[QString("tax_country_code")]);
    m_tax_country_code_isSet = !json[QString("tax_country_code")].isNull() && m_tax_country_code_isValid;

    m_tax_id_isValid = ::OpenAPI::fromJsonValue(m_tax_id, json[QString("tax_id")]);
    m_tax_id_isSet = !json[QString("tax_id")].isNull() && m_tax_id_isValid;
}

QString OAIGetSettlementIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSettlementIn::asJsonObject() const {
    QJsonObject obj;
    if (m_currency_code_isSet) {
        obj.insert(QString("currency_code"), ::OpenAPI::toJsonValue(m_currency_code));
    }
    if (m_end_month_isSet) {
        obj.insert(QString("end_month"), ::OpenAPI::toJsonValue(m_end_month));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_moss_country_code_isSet) {
        obj.insert(QString("moss_country_code"), ::OpenAPI::toJsonValue(m_moss_country_code));
    }
    if (m_moss_tax_id_isSet) {
        obj.insert(QString("moss_tax_id"), ::OpenAPI::toJsonValue(m_moss_tax_id));
    }
    if (m_refund_date_kind_override_isSet) {
        obj.insert(QString("refund_date_kind_override"), ::OpenAPI::toJsonValue(m_refund_date_kind_override));
    }
    if (m_start_month_isSet) {
        obj.insert(QString("start_month"), ::OpenAPI::toJsonValue(m_start_month));
    }
    if (m_tax_country_code_isSet) {
        obj.insert(QString("tax_country_code"), ::OpenAPI::toJsonValue(m_tax_country_code));
    }
    if (m_tax_id_isSet) {
        obj.insert(QString("tax_id"), ::OpenAPI::toJsonValue(m_tax_id));
    }
    return obj;
}

QString OAIGetSettlementIn::getCurrencyCode() const {
    return m_currency_code;
}
void OAIGetSettlementIn::setCurrencyCode(const QString &currency_code) {
    m_currency_code = currency_code;
    m_currency_code_isSet = true;
}

bool OAIGetSettlementIn::is_currency_code_Set() const{
    return m_currency_code_isSet;
}

bool OAIGetSettlementIn::is_currency_code_Valid() const{
    return m_currency_code_isValid;
}

QString OAIGetSettlementIn::getEndMonth() const {
    return m_end_month;
}
void OAIGetSettlementIn::setEndMonth(const QString &end_month) {
    m_end_month = end_month;
    m_end_month_isSet = true;
}

bool OAIGetSettlementIn::is_end_month_Set() const{
    return m_end_month_isSet;
}

bool OAIGetSettlementIn::is_end_month_Valid() const{
    return m_end_month_isValid;
}

QString OAIGetSettlementIn::getFormat() const {
    return m_format;
}
void OAIGetSettlementIn::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIGetSettlementIn::is_format_Set() const{
    return m_format_isSet;
}

bool OAIGetSettlementIn::is_format_Valid() const{
    return m_format_isValid;
}

QString OAIGetSettlementIn::getMossCountryCode() const {
    return m_moss_country_code;
}
void OAIGetSettlementIn::setMossCountryCode(const QString &moss_country_code) {
    m_moss_country_code = moss_country_code;
    m_moss_country_code_isSet = true;
}

bool OAIGetSettlementIn::is_moss_country_code_Set() const{
    return m_moss_country_code_isSet;
}

bool OAIGetSettlementIn::is_moss_country_code_Valid() const{
    return m_moss_country_code_isValid;
}

QString OAIGetSettlementIn::getMossTaxId() const {
    return m_moss_tax_id;
}
void OAIGetSettlementIn::setMossTaxId(const QString &moss_tax_id) {
    m_moss_tax_id = moss_tax_id;
    m_moss_tax_id_isSet = true;
}

bool OAIGetSettlementIn::is_moss_tax_id_Set() const{
    return m_moss_tax_id_isSet;
}

bool OAIGetSettlementIn::is_moss_tax_id_Valid() const{
    return m_moss_tax_id_isValid;
}

QString OAIGetSettlementIn::getRefundDateKindOverride() const {
    return m_refund_date_kind_override;
}
void OAIGetSettlementIn::setRefundDateKindOverride(const QString &refund_date_kind_override) {
    m_refund_date_kind_override = refund_date_kind_override;
    m_refund_date_kind_override_isSet = true;
}

bool OAIGetSettlementIn::is_refund_date_kind_override_Set() const{
    return m_refund_date_kind_override_isSet;
}

bool OAIGetSettlementIn::is_refund_date_kind_override_Valid() const{
    return m_refund_date_kind_override_isValid;
}

QString OAIGetSettlementIn::getStartMonth() const {
    return m_start_month;
}
void OAIGetSettlementIn::setStartMonth(const QString &start_month) {
    m_start_month = start_month;
    m_start_month_isSet = true;
}

bool OAIGetSettlementIn::is_start_month_Set() const{
    return m_start_month_isSet;
}

bool OAIGetSettlementIn::is_start_month_Valid() const{
    return m_start_month_isValid;
}

QString OAIGetSettlementIn::getTaxCountryCode() const {
    return m_tax_country_code;
}
void OAIGetSettlementIn::setTaxCountryCode(const QString &tax_country_code) {
    m_tax_country_code = tax_country_code;
    m_tax_country_code_isSet = true;
}

bool OAIGetSettlementIn::is_tax_country_code_Set() const{
    return m_tax_country_code_isSet;
}

bool OAIGetSettlementIn::is_tax_country_code_Valid() const{
    return m_tax_country_code_isValid;
}

QString OAIGetSettlementIn::getTaxId() const {
    return m_tax_id;
}
void OAIGetSettlementIn::setTaxId(const QString &tax_id) {
    m_tax_id = tax_id;
    m_tax_id_isSet = true;
}

bool OAIGetSettlementIn::is_tax_id_Set() const{
    return m_tax_id_isSet;
}

bool OAIGetSettlementIn::is_tax_id_Valid() const{
    return m_tax_id_isValid;
}

bool OAIGetSettlementIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_currency_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moss_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_moss_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_date_kind_override_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_start_month_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSettlementIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
