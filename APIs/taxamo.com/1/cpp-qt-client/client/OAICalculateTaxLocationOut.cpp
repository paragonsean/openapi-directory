/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateTaxLocationOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateTaxLocationOut::OAICalculateTaxLocationOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateTaxLocationOut::OAICalculateTaxLocationOut() {
    this->initializeModel();
}

OAICalculateTaxLocationOut::~OAICalculateTaxLocationOut() {}

void OAICalculateTaxLocationOut::initializeModel() {

    m_billing_country_code_isSet = false;
    m_billing_country_code_isValid = false;

    m_buyer_credit_card_prefix_isSet = false;
    m_buyer_credit_card_prefix_isValid = false;

    m_buyer_ip_isSet = false;
    m_buyer_ip_isValid = false;

    m_countries_isSet = false;
    m_countries_isValid = false;

    m_evidence_isSet = false;
    m_evidence_isValid = false;

    m_tax_country_code_isSet = false;
    m_tax_country_code_isValid = false;

    m_tax_deducted_isSet = false;
    m_tax_deducted_isValid = false;

    m_tax_supported_isSet = false;
    m_tax_supported_isValid = false;
}

void OAICalculateTaxLocationOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateTaxLocationOut::fromJsonObject(QJsonObject json) {

    m_billing_country_code_isValid = ::OpenAPI::fromJsonValue(m_billing_country_code, json[QString("billing_country_code")]);
    m_billing_country_code_isSet = !json[QString("billing_country_code")].isNull() && m_billing_country_code_isValid;

    m_buyer_credit_card_prefix_isValid = ::OpenAPI::fromJsonValue(m_buyer_credit_card_prefix, json[QString("buyer_credit_card_prefix")]);
    m_buyer_credit_card_prefix_isSet = !json[QString("buyer_credit_card_prefix")].isNull() && m_buyer_credit_card_prefix_isValid;

    m_buyer_ip_isValid = ::OpenAPI::fromJsonValue(m_buyer_ip, json[QString("buyer_ip")]);
    m_buyer_ip_isSet = !json[QString("buyer_ip")].isNull() && m_buyer_ip_isValid;

    m_countries_isValid = ::OpenAPI::fromJsonValue(m_countries, json[QString("countries")]);
    m_countries_isSet = !json[QString("countries")].isNull() && m_countries_isValid;

    m_evidence_isValid = ::OpenAPI::fromJsonValue(m_evidence, json[QString("evidence")]);
    m_evidence_isSet = !json[QString("evidence")].isNull() && m_evidence_isValid;

    m_tax_country_code_isValid = ::OpenAPI::fromJsonValue(m_tax_country_code, json[QString("tax_country_code")]);
    m_tax_country_code_isSet = !json[QString("tax_country_code")].isNull() && m_tax_country_code_isValid;

    m_tax_deducted_isValid = ::OpenAPI::fromJsonValue(m_tax_deducted, json[QString("tax_deducted")]);
    m_tax_deducted_isSet = !json[QString("tax_deducted")].isNull() && m_tax_deducted_isValid;

    m_tax_supported_isValid = ::OpenAPI::fromJsonValue(m_tax_supported, json[QString("tax_supported")]);
    m_tax_supported_isSet = !json[QString("tax_supported")].isNull() && m_tax_supported_isValid;
}

QString OAICalculateTaxLocationOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateTaxLocationOut::asJsonObject() const {
    QJsonObject obj;
    if (m_billing_country_code_isSet) {
        obj.insert(QString("billing_country_code"), ::OpenAPI::toJsonValue(m_billing_country_code));
    }
    if (m_buyer_credit_card_prefix_isSet) {
        obj.insert(QString("buyer_credit_card_prefix"), ::OpenAPI::toJsonValue(m_buyer_credit_card_prefix));
    }
    if (m_buyer_ip_isSet) {
        obj.insert(QString("buyer_ip"), ::OpenAPI::toJsonValue(m_buyer_ip));
    }
    if (m_countries.isSet()) {
        obj.insert(QString("countries"), ::OpenAPI::toJsonValue(m_countries));
    }
    if (m_evidence.isSet()) {
        obj.insert(QString("evidence"), ::OpenAPI::toJsonValue(m_evidence));
    }
    if (m_tax_country_code_isSet) {
        obj.insert(QString("tax_country_code"), ::OpenAPI::toJsonValue(m_tax_country_code));
    }
    if (m_tax_deducted_isSet) {
        obj.insert(QString("tax_deducted"), ::OpenAPI::toJsonValue(m_tax_deducted));
    }
    if (m_tax_supported_isSet) {
        obj.insert(QString("tax_supported"), ::OpenAPI::toJsonValue(m_tax_supported));
    }
    return obj;
}

QString OAICalculateTaxLocationOut::getBillingCountryCode() const {
    return m_billing_country_code;
}
void OAICalculateTaxLocationOut::setBillingCountryCode(const QString &billing_country_code) {
    m_billing_country_code = billing_country_code;
    m_billing_country_code_isSet = true;
}

bool OAICalculateTaxLocationOut::is_billing_country_code_Set() const{
    return m_billing_country_code_isSet;
}

bool OAICalculateTaxLocationOut::is_billing_country_code_Valid() const{
    return m_billing_country_code_isValid;
}

QString OAICalculateTaxLocationOut::getBuyerCreditCardPrefix() const {
    return m_buyer_credit_card_prefix;
}
void OAICalculateTaxLocationOut::setBuyerCreditCardPrefix(const QString &buyer_credit_card_prefix) {
    m_buyer_credit_card_prefix = buyer_credit_card_prefix;
    m_buyer_credit_card_prefix_isSet = true;
}

bool OAICalculateTaxLocationOut::is_buyer_credit_card_prefix_Set() const{
    return m_buyer_credit_card_prefix_isSet;
}

bool OAICalculateTaxLocationOut::is_buyer_credit_card_prefix_Valid() const{
    return m_buyer_credit_card_prefix_isValid;
}

QString OAICalculateTaxLocationOut::getBuyerIp() const {
    return m_buyer_ip;
}
void OAICalculateTaxLocationOut::setBuyerIp(const QString &buyer_ip) {
    m_buyer_ip = buyer_ip;
    m_buyer_ip_isSet = true;
}

bool OAICalculateTaxLocationOut::is_buyer_ip_Set() const{
    return m_buyer_ip_isSet;
}

bool OAICalculateTaxLocationOut::is_buyer_ip_Valid() const{
    return m_buyer_ip_isValid;
}

OAICountries OAICalculateTaxLocationOut::getCountries() const {
    return m_countries;
}
void OAICalculateTaxLocationOut::setCountries(const OAICountries &countries) {
    m_countries = countries;
    m_countries_isSet = true;
}

bool OAICalculateTaxLocationOut::is_countries_Set() const{
    return m_countries_isSet;
}

bool OAICalculateTaxLocationOut::is_countries_Valid() const{
    return m_countries_isValid;
}

OAIEvidence OAICalculateTaxLocationOut::getEvidence() const {
    return m_evidence;
}
void OAICalculateTaxLocationOut::setEvidence(const OAIEvidence &evidence) {
    m_evidence = evidence;
    m_evidence_isSet = true;
}

bool OAICalculateTaxLocationOut::is_evidence_Set() const{
    return m_evidence_isSet;
}

bool OAICalculateTaxLocationOut::is_evidence_Valid() const{
    return m_evidence_isValid;
}

QString OAICalculateTaxLocationOut::getTaxCountryCode() const {
    return m_tax_country_code;
}
void OAICalculateTaxLocationOut::setTaxCountryCode(const QString &tax_country_code) {
    m_tax_country_code = tax_country_code;
    m_tax_country_code_isSet = true;
}

bool OAICalculateTaxLocationOut::is_tax_country_code_Set() const{
    return m_tax_country_code_isSet;
}

bool OAICalculateTaxLocationOut::is_tax_country_code_Valid() const{
    return m_tax_country_code_isValid;
}

bool OAICalculateTaxLocationOut::isTaxDeducted() const {
    return m_tax_deducted;
}
void OAICalculateTaxLocationOut::setTaxDeducted(const bool &tax_deducted) {
    m_tax_deducted = tax_deducted;
    m_tax_deducted_isSet = true;
}

bool OAICalculateTaxLocationOut::is_tax_deducted_Set() const{
    return m_tax_deducted_isSet;
}

bool OAICalculateTaxLocationOut::is_tax_deducted_Valid() const{
    return m_tax_deducted_isValid;
}

bool OAICalculateTaxLocationOut::isTaxSupported() const {
    return m_tax_supported;
}
void OAICalculateTaxLocationOut::setTaxSupported(const bool &tax_supported) {
    m_tax_supported = tax_supported;
    m_tax_supported_isSet = true;
}

bool OAICalculateTaxLocationOut::is_tax_supported_Set() const{
    return m_tax_supported_isSet;
}

bool OAICalculateTaxLocationOut::is_tax_supported_Valid() const{
    return m_tax_supported_isValid;
}

bool OAICalculateTaxLocationOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_billing_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_credit_card_prefix_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_buyer_ip_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_countries.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_evidence.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_deducted_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_supported_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateTaxLocationOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
