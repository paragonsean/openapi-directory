/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetSettlementStatsByTaxationTypeIn.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetSettlementStatsByTaxationTypeIn::OAIGetSettlementStatsByTaxationTypeIn(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetSettlementStatsByTaxationTypeIn::OAIGetSettlementStatsByTaxationTypeIn() {
    this->initializeModel();
}

OAIGetSettlementStatsByTaxationTypeIn::~OAIGetSettlementStatsByTaxationTypeIn() {}

void OAIGetSettlementStatsByTaxationTypeIn::initializeModel() {

    m_date_from_isSet = false;
    m_date_from_isValid = false;

    m_date_to_isSet = false;
    m_date_to_isValid = false;
}

void OAIGetSettlementStatsByTaxationTypeIn::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetSettlementStatsByTaxationTypeIn::fromJsonObject(QJsonObject json) {

    m_date_from_isValid = ::OpenAPI::fromJsonValue(m_date_from, json[QString("date_from")]);
    m_date_from_isSet = !json[QString("date_from")].isNull() && m_date_from_isValid;

    m_date_to_isValid = ::OpenAPI::fromJsonValue(m_date_to, json[QString("date_to")]);
    m_date_to_isSet = !json[QString("date_to")].isNull() && m_date_to_isValid;
}

QString OAIGetSettlementStatsByTaxationTypeIn::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetSettlementStatsByTaxationTypeIn::asJsonObject() const {
    QJsonObject obj;
    if (m_date_from_isSet) {
        obj.insert(QString("date_from"), ::OpenAPI::toJsonValue(m_date_from));
    }
    if (m_date_to_isSet) {
        obj.insert(QString("date_to"), ::OpenAPI::toJsonValue(m_date_to));
    }
    return obj;
}

QString OAIGetSettlementStatsByTaxationTypeIn::getDateFrom() const {
    return m_date_from;
}
void OAIGetSettlementStatsByTaxationTypeIn::setDateFrom(const QString &date_from) {
    m_date_from = date_from;
    m_date_from_isSet = true;
}

bool OAIGetSettlementStatsByTaxationTypeIn::is_date_from_Set() const{
    return m_date_from_isSet;
}

bool OAIGetSettlementStatsByTaxationTypeIn::is_date_from_Valid() const{
    return m_date_from_isValid;
}

QString OAIGetSettlementStatsByTaxationTypeIn::getDateTo() const {
    return m_date_to;
}
void OAIGetSettlementStatsByTaxationTypeIn::setDateTo(const QString &date_to) {
    m_date_to = date_to;
    m_date_to_isSet = true;
}

bool OAIGetSettlementStatsByTaxationTypeIn::is_date_to_Set() const{
    return m_date_to_isSet;
}

bool OAIGetSettlementStatsByTaxationTypeIn::is_date_to_Valid() const{
    return m_date_to_isValid;
}

bool OAIGetSettlementStatsByTaxationTypeIn::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_date_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetSettlementStatsByTaxationTypeIn::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_date_from_isValid && m_date_to_isValid && true;
}

} // namespace OpenAPI
