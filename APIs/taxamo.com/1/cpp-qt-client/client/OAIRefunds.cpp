/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRefunds.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRefunds::OAIRefunds(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRefunds::OAIRefunds() {
    this->initializeModel();
}

OAIRefunds::~OAIRefunds() {}

void OAIRefunds::initializeModel() {

    m_amount_isSet = false;
    m_amount_isValid = false;

    m_informative_isSet = false;
    m_informative_isValid = false;

    m_line_key_isSet = false;
    m_line_key_isValid = false;

    m_refund_note_number_isSet = false;
    m_refund_note_number_isValid = false;

    m_refund_note_url_isSet = false;
    m_refund_note_url_isValid = false;

    m_refund_reason_isSet = false;
    m_refund_reason_isValid = false;

    m_refund_timestamp_isSet = false;
    m_refund_timestamp_isValid = false;

    m_tax_amount_isSet = false;
    m_tax_amount_isValid = false;

    m_tax_rate_isSet = false;
    m_tax_rate_isValid = false;

    m_total_amount_isSet = false;
    m_total_amount_isValid = false;
}

void OAIRefunds::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRefunds::fromJsonObject(QJsonObject json) {

    m_amount_isValid = ::OpenAPI::fromJsonValue(m_amount, json[QString("amount")]);
    m_amount_isSet = !json[QString("amount")].isNull() && m_amount_isValid;

    m_informative_isValid = ::OpenAPI::fromJsonValue(m_informative, json[QString("informative")]);
    m_informative_isSet = !json[QString("informative")].isNull() && m_informative_isValid;

    m_line_key_isValid = ::OpenAPI::fromJsonValue(m_line_key, json[QString("line_key")]);
    m_line_key_isSet = !json[QString("line_key")].isNull() && m_line_key_isValid;

    m_refund_note_number_isValid = ::OpenAPI::fromJsonValue(m_refund_note_number, json[QString("refund_note_number")]);
    m_refund_note_number_isSet = !json[QString("refund_note_number")].isNull() && m_refund_note_number_isValid;

    m_refund_note_url_isValid = ::OpenAPI::fromJsonValue(m_refund_note_url, json[QString("refund_note_url")]);
    m_refund_note_url_isSet = !json[QString("refund_note_url")].isNull() && m_refund_note_url_isValid;

    m_refund_reason_isValid = ::OpenAPI::fromJsonValue(m_refund_reason, json[QString("refund_reason")]);
    m_refund_reason_isSet = !json[QString("refund_reason")].isNull() && m_refund_reason_isValid;

    m_refund_timestamp_isValid = ::OpenAPI::fromJsonValue(m_refund_timestamp, json[QString("refund_timestamp")]);
    m_refund_timestamp_isSet = !json[QString("refund_timestamp")].isNull() && m_refund_timestamp_isValid;

    m_tax_amount_isValid = ::OpenAPI::fromJsonValue(m_tax_amount, json[QString("tax_amount")]);
    m_tax_amount_isSet = !json[QString("tax_amount")].isNull() && m_tax_amount_isValid;

    m_tax_rate_isValid = ::OpenAPI::fromJsonValue(m_tax_rate, json[QString("tax_rate")]);
    m_tax_rate_isSet = !json[QString("tax_rate")].isNull() && m_tax_rate_isValid;

    m_total_amount_isValid = ::OpenAPI::fromJsonValue(m_total_amount, json[QString("total_amount")]);
    m_total_amount_isSet = !json[QString("total_amount")].isNull() && m_total_amount_isValid;
}

QString OAIRefunds::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRefunds::asJsonObject() const {
    QJsonObject obj;
    if (m_amount_isSet) {
        obj.insert(QString("amount"), ::OpenAPI::toJsonValue(m_amount));
    }
    if (m_informative_isSet) {
        obj.insert(QString("informative"), ::OpenAPI::toJsonValue(m_informative));
    }
    if (m_line_key_isSet) {
        obj.insert(QString("line_key"), ::OpenAPI::toJsonValue(m_line_key));
    }
    if (m_refund_note_number_isSet) {
        obj.insert(QString("refund_note_number"), ::OpenAPI::toJsonValue(m_refund_note_number));
    }
    if (m_refund_note_url_isSet) {
        obj.insert(QString("refund_note_url"), ::OpenAPI::toJsonValue(m_refund_note_url));
    }
    if (m_refund_reason_isSet) {
        obj.insert(QString("refund_reason"), ::OpenAPI::toJsonValue(m_refund_reason));
    }
    if (m_refund_timestamp_isSet) {
        obj.insert(QString("refund_timestamp"), ::OpenAPI::toJsonValue(m_refund_timestamp));
    }
    if (m_tax_amount_isSet) {
        obj.insert(QString("tax_amount"), ::OpenAPI::toJsonValue(m_tax_amount));
    }
    if (m_tax_rate_isSet) {
        obj.insert(QString("tax_rate"), ::OpenAPI::toJsonValue(m_tax_rate));
    }
    if (m_total_amount_isSet) {
        obj.insert(QString("total_amount"), ::OpenAPI::toJsonValue(m_total_amount));
    }
    return obj;
}

double OAIRefunds::getAmount() const {
    return m_amount;
}
void OAIRefunds::setAmount(const double &amount) {
    m_amount = amount;
    m_amount_isSet = true;
}

bool OAIRefunds::is_amount_Set() const{
    return m_amount_isSet;
}

bool OAIRefunds::is_amount_Valid() const{
    return m_amount_isValid;
}

bool OAIRefunds::isInformative() const {
    return m_informative;
}
void OAIRefunds::setInformative(const bool &informative) {
    m_informative = informative;
    m_informative_isSet = true;
}

bool OAIRefunds::is_informative_Set() const{
    return m_informative_isSet;
}

bool OAIRefunds::is_informative_Valid() const{
    return m_informative_isValid;
}

QString OAIRefunds::getLineKey() const {
    return m_line_key;
}
void OAIRefunds::setLineKey(const QString &line_key) {
    m_line_key = line_key;
    m_line_key_isSet = true;
}

bool OAIRefunds::is_line_key_Set() const{
    return m_line_key_isSet;
}

bool OAIRefunds::is_line_key_Valid() const{
    return m_line_key_isValid;
}

QString OAIRefunds::getRefundNoteNumber() const {
    return m_refund_note_number;
}
void OAIRefunds::setRefundNoteNumber(const QString &refund_note_number) {
    m_refund_note_number = refund_note_number;
    m_refund_note_number_isSet = true;
}

bool OAIRefunds::is_refund_note_number_Set() const{
    return m_refund_note_number_isSet;
}

bool OAIRefunds::is_refund_note_number_Valid() const{
    return m_refund_note_number_isValid;
}

QString OAIRefunds::getRefundNoteUrl() const {
    return m_refund_note_url;
}
void OAIRefunds::setRefundNoteUrl(const QString &refund_note_url) {
    m_refund_note_url = refund_note_url;
    m_refund_note_url_isSet = true;
}

bool OAIRefunds::is_refund_note_url_Set() const{
    return m_refund_note_url_isSet;
}

bool OAIRefunds::is_refund_note_url_Valid() const{
    return m_refund_note_url_isValid;
}

QString OAIRefunds::getRefundReason() const {
    return m_refund_reason;
}
void OAIRefunds::setRefundReason(const QString &refund_reason) {
    m_refund_reason = refund_reason;
    m_refund_reason_isSet = true;
}

bool OAIRefunds::is_refund_reason_Set() const{
    return m_refund_reason_isSet;
}

bool OAIRefunds::is_refund_reason_Valid() const{
    return m_refund_reason_isValid;
}

QString OAIRefunds::getRefundTimestamp() const {
    return m_refund_timestamp;
}
void OAIRefunds::setRefundTimestamp(const QString &refund_timestamp) {
    m_refund_timestamp = refund_timestamp;
    m_refund_timestamp_isSet = true;
}

bool OAIRefunds::is_refund_timestamp_Set() const{
    return m_refund_timestamp_isSet;
}

bool OAIRefunds::is_refund_timestamp_Valid() const{
    return m_refund_timestamp_isValid;
}

double OAIRefunds::getTaxAmount() const {
    return m_tax_amount;
}
void OAIRefunds::setTaxAmount(const double &tax_amount) {
    m_tax_amount = tax_amount;
    m_tax_amount_isSet = true;
}

bool OAIRefunds::is_tax_amount_Set() const{
    return m_tax_amount_isSet;
}

bool OAIRefunds::is_tax_amount_Valid() const{
    return m_tax_amount_isValid;
}

double OAIRefunds::getTaxRate() const {
    return m_tax_rate;
}
void OAIRefunds::setTaxRate(const double &tax_rate) {
    m_tax_rate = tax_rate;
    m_tax_rate_isSet = true;
}

bool OAIRefunds::is_tax_rate_Set() const{
    return m_tax_rate_isSet;
}

bool OAIRefunds::is_tax_rate_Valid() const{
    return m_tax_rate_isValid;
}

double OAIRefunds::getTotalAmount() const {
    return m_total_amount;
}
void OAIRefunds::setTotalAmount(const double &total_amount) {
    m_total_amount = total_amount;
    m_total_amount_isSet = true;
}

bool OAIRefunds::is_total_amount_Set() const{
    return m_total_amount_isSet;
}

bool OAIRefunds::is_total_amount_Valid() const{
    return m_total_amount_isValid;
}

bool OAIRefunds::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_informative_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_line_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_note_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_note_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_reason_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refund_timestamp_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_amount_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tax_rate_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_amount_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRefunds::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
