/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILocateMyIPOut.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILocateMyIPOut::OAILocateMyIPOut(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILocateMyIPOut::OAILocateMyIPOut() {
    this->initializeModel();
}

OAILocateMyIPOut::~OAILocateMyIPOut() {}

void OAILocateMyIPOut::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_country_code_isSet = false;
    m_country_code_isValid = false;

    m_remote_addr_isSet = false;
    m_remote_addr_isValid = false;
}

void OAILocateMyIPOut::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILocateMyIPOut::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_country_code_isValid = ::OpenAPI::fromJsonValue(m_country_code, json[QString("country_code")]);
    m_country_code_isSet = !json[QString("country_code")].isNull() && m_country_code_isValid;

    m_remote_addr_isValid = ::OpenAPI::fromJsonValue(m_remote_addr, json[QString("remote_addr")]);
    m_remote_addr_isSet = !json[QString("remote_addr")].isNull() && m_remote_addr_isValid;
}

QString OAILocateMyIPOut::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILocateMyIPOut::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_country_code_isSet) {
        obj.insert(QString("country_code"), ::OpenAPI::toJsonValue(m_country_code));
    }
    if (m_remote_addr_isSet) {
        obj.insert(QString("remote_addr"), ::OpenAPI::toJsonValue(m_remote_addr));
    }
    return obj;
}

OAICountry OAILocateMyIPOut::getCountry() const {
    return m_country;
}
void OAILocateMyIPOut::setCountry(const OAICountry &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILocateMyIPOut::is_country_Set() const{
    return m_country_isSet;
}

bool OAILocateMyIPOut::is_country_Valid() const{
    return m_country_isValid;
}

QString OAILocateMyIPOut::getCountryCode() const {
    return m_country_code;
}
void OAILocateMyIPOut::setCountryCode(const QString &country_code) {
    m_country_code = country_code;
    m_country_code_isSet = true;
}

bool OAILocateMyIPOut::is_country_code_Set() const{
    return m_country_code_isSet;
}

bool OAILocateMyIPOut::is_country_code_Valid() const{
    return m_country_code_isValid;
}

QString OAILocateMyIPOut::getRemoteAddr() const {
    return m_remote_addr;
}
void OAILocateMyIPOut::setRemoteAddr(const QString &remote_addr) {
    m_remote_addr = remote_addr;
    m_remote_addr_isSet = true;
}

bool OAILocateMyIPOut::is_remote_addr_Set() const{
    return m_remote_addr_isSet;
}

bool OAILocateMyIPOut::is_remote_addr_Valid() const{
    return m_remote_addr_isValid;
}

bool OAILocateMyIPOut::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_remote_addr_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILocateMyIPOut::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
