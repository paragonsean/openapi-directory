/**
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBy_taxation_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBy_taxation_type::OAIBy_taxation_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBy_taxation_type::OAIBy_taxation_type() {
    this->initializeModel();
}

OAIBy_taxation_type::~OAIBy_taxation_type() {}

void OAIBy_taxation_type::initializeModel() {

    m_deducted_count_isSet = false;
    m_deducted_count_isValid = false;

    m_eu_b2b_isSet = false;
    m_eu_b2b_isValid = false;

    m_eu_taxed_isSet = false;
    m_eu_taxed_isValid = false;

    m_taxed_count_isSet = false;
    m_taxed_count_isValid = false;

    m_transactions_count_isSet = false;
    m_transactions_count_isValid = false;
}

void OAIBy_taxation_type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBy_taxation_type::fromJsonObject(QJsonObject json) {

    m_deducted_count_isValid = ::OpenAPI::fromJsonValue(m_deducted_count, json[QString("deducted_count")]);
    m_deducted_count_isSet = !json[QString("deducted_count")].isNull() && m_deducted_count_isValid;

    m_eu_b2b_isValid = ::OpenAPI::fromJsonValue(m_eu_b2b, json[QString("eu_b2b")]);
    m_eu_b2b_isSet = !json[QString("eu_b2b")].isNull() && m_eu_b2b_isValid;

    m_eu_taxed_isValid = ::OpenAPI::fromJsonValue(m_eu_taxed, json[QString("eu_taxed")]);
    m_eu_taxed_isSet = !json[QString("eu_taxed")].isNull() && m_eu_taxed_isValid;

    m_taxed_count_isValid = ::OpenAPI::fromJsonValue(m_taxed_count, json[QString("taxed_count")]);
    m_taxed_count_isSet = !json[QString("taxed_count")].isNull() && m_taxed_count_isValid;

    m_transactions_count_isValid = ::OpenAPI::fromJsonValue(m_transactions_count, json[QString("transactions_count")]);
    m_transactions_count_isSet = !json[QString("transactions_count")].isNull() && m_transactions_count_isValid;
}

QString OAIBy_taxation_type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBy_taxation_type::asJsonObject() const {
    QJsonObject obj;
    if (m_deducted_count_isSet) {
        obj.insert(QString("deducted_count"), ::OpenAPI::toJsonValue(m_deducted_count));
    }
    if (m_eu_b2b_isSet) {
        obj.insert(QString("eu_b2b"), ::OpenAPI::toJsonValue(m_eu_b2b));
    }
    if (m_eu_taxed_isSet) {
        obj.insert(QString("eu_taxed"), ::OpenAPI::toJsonValue(m_eu_taxed));
    }
    if (m_taxed_count_isSet) {
        obj.insert(QString("taxed_count"), ::OpenAPI::toJsonValue(m_taxed_count));
    }
    if (m_transactions_count_isSet) {
        obj.insert(QString("transactions_count"), ::OpenAPI::toJsonValue(m_transactions_count));
    }
    return obj;
}

double OAIBy_taxation_type::getDeductedCount() const {
    return m_deducted_count;
}
void OAIBy_taxation_type::setDeductedCount(const double &deducted_count) {
    m_deducted_count = deducted_count;
    m_deducted_count_isSet = true;
}

bool OAIBy_taxation_type::is_deducted_count_Set() const{
    return m_deducted_count_isSet;
}

bool OAIBy_taxation_type::is_deducted_count_Valid() const{
    return m_deducted_count_isValid;
}

qint32 OAIBy_taxation_type::getEuB2b() const {
    return m_eu_b2b;
}
void OAIBy_taxation_type::setEuB2b(const qint32 &eu_b2b) {
    m_eu_b2b = eu_b2b;
    m_eu_b2b_isSet = true;
}

bool OAIBy_taxation_type::is_eu_b2b_Set() const{
    return m_eu_b2b_isSet;
}

bool OAIBy_taxation_type::is_eu_b2b_Valid() const{
    return m_eu_b2b_isValid;
}

qint32 OAIBy_taxation_type::getEuTaxed() const {
    return m_eu_taxed;
}
void OAIBy_taxation_type::setEuTaxed(const qint32 &eu_taxed) {
    m_eu_taxed = eu_taxed;
    m_eu_taxed_isSet = true;
}

bool OAIBy_taxation_type::is_eu_taxed_Set() const{
    return m_eu_taxed_isSet;
}

bool OAIBy_taxation_type::is_eu_taxed_Valid() const{
    return m_eu_taxed_isValid;
}

double OAIBy_taxation_type::getTaxedCount() const {
    return m_taxed_count;
}
void OAIBy_taxation_type::setTaxedCount(const double &taxed_count) {
    m_taxed_count = taxed_count;
    m_taxed_count_isSet = true;
}

bool OAIBy_taxation_type::is_taxed_count_Set() const{
    return m_taxed_count_isSet;
}

bool OAIBy_taxation_type::is_taxed_count_Valid() const{
    return m_taxed_count_isValid;
}

double OAIBy_taxation_type::getTransactionsCount() const {
    return m_transactions_count;
}
void OAIBy_taxation_type::setTransactionsCount(const double &transactions_count) {
    m_transactions_count = transactions_count;
    m_transactions_count_isSet = true;
}

bool OAIBy_taxation_type::is_transactions_count_Set() const{
    return m_transactions_count_isSet;
}

bool OAIBy_taxation_type::is_transactions_count_Valid() const{
    return m_transactions_count_isValid;
}

bool OAIBy_taxation_type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_deducted_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_b2b_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_eu_taxed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_taxed_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_transactions_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBy_taxation_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
