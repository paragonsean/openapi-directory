# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_currencies import AdditionalCurrencies
from openapi_server.models.countries import Countries
from openapi_server.models.custom_fields import CustomFields
from openapi_server.models.evidence import Evidence
from openapi_server.models.invoice_address import InvoiceAddress
from openapi_server.models.tax_data_schema import TaxDataSchema
from openapi_server.models.transaction_lines import TransactionLines
from openapi_server import util


class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_currencies: AdditionalCurrencies=None, amount: float=None, billing_country_code: str=None, buyer_credit_card_prefix: str=None, buyer_email: str=None, buyer_ip: str=None, buyer_name: str=None, buyer_tax_number: str=None, buyer_tax_number_valid: bool=None, comments: str=None, confirm_timestamp: str=None, countries: Countries=None, create_timestamp: str=None, currency_code: str=None, custom_data: str=None, custom_fields: List[CustomFields]=None, custom_id: str=None, customer_id: str=None, deducted_tax_amount: float=None, description: str=None, evidence: Evidence=None, external_key: str=None, force_country_code: str=None, fully_informative: bool=None, invoice_address: InvoiceAddress=None, invoice_date: str=None, invoice_image_url: str=None, invoice_number: str=None, invoice_place: str=None, key: str=None, kind: str=None, manual: bool=None, note: str=None, order_date: str=None, original_transaction_key: str=None, refunded_tax_amount: float=None, refunded_total_amount: float=None, source: str=None, status: str=None, sub_account_id: str=None, supply_date: str=None, tax_amount: float=None, tax_country_code: str=None, tax_data: TaxDataSchema=None, tax_deducted: bool=None, tax_entity_name: str=None, tax_number_service: str=None, tax_supported: bool=None, tax_timezone: str=None, test: bool=None, total_amount: float=None, transaction_lines: List[TransactionLines]=None, verification_token: str=None):
        """Transaction - a model defined in OpenAPI

        :param additional_currencies: The additional_currencies of this Transaction.
        :param amount: The amount of this Transaction.
        :param billing_country_code: The billing_country_code of this Transaction.
        :param buyer_credit_card_prefix: The buyer_credit_card_prefix of this Transaction.
        :param buyer_email: The buyer_email of this Transaction.
        :param buyer_ip: The buyer_ip of this Transaction.
        :param buyer_name: The buyer_name of this Transaction.
        :param buyer_tax_number: The buyer_tax_number of this Transaction.
        :param buyer_tax_number_valid: The buyer_tax_number_valid of this Transaction.
        :param comments: The comments of this Transaction.
        :param confirm_timestamp: The confirm_timestamp of this Transaction.
        :param countries: The countries of this Transaction.
        :param create_timestamp: The create_timestamp of this Transaction.
        :param currency_code: The currency_code of this Transaction.
        :param custom_data: The custom_data of this Transaction.
        :param custom_fields: The custom_fields of this Transaction.
        :param custom_id: The custom_id of this Transaction.
        :param customer_id: The customer_id of this Transaction.
        :param deducted_tax_amount: The deducted_tax_amount of this Transaction.
        :param description: The description of this Transaction.
        :param evidence: The evidence of this Transaction.
        :param external_key: The external_key of this Transaction.
        :param force_country_code: The force_country_code of this Transaction.
        :param fully_informative: The fully_informative of this Transaction.
        :param invoice_address: The invoice_address of this Transaction.
        :param invoice_date: The invoice_date of this Transaction.
        :param invoice_image_url: The invoice_image_url of this Transaction.
        :param invoice_number: The invoice_number of this Transaction.
        :param invoice_place: The invoice_place of this Transaction.
        :param key: The key of this Transaction.
        :param kind: The kind of this Transaction.
        :param manual: The manual of this Transaction.
        :param note: The note of this Transaction.
        :param order_date: The order_date of this Transaction.
        :param original_transaction_key: The original_transaction_key of this Transaction.
        :param refunded_tax_amount: The refunded_tax_amount of this Transaction.
        :param refunded_total_amount: The refunded_total_amount of this Transaction.
        :param source: The source of this Transaction.
        :param status: The status of this Transaction.
        :param sub_account_id: The sub_account_id of this Transaction.
        :param supply_date: The supply_date of this Transaction.
        :param tax_amount: The tax_amount of this Transaction.
        :param tax_country_code: The tax_country_code of this Transaction.
        :param tax_data: The tax_data of this Transaction.
        :param tax_deducted: The tax_deducted of this Transaction.
        :param tax_entity_name: The tax_entity_name of this Transaction.
        :param tax_number_service: The tax_number_service of this Transaction.
        :param tax_supported: The tax_supported of this Transaction.
        :param tax_timezone: The tax_timezone of this Transaction.
        :param test: The test of this Transaction.
        :param total_amount: The total_amount of this Transaction.
        :param transaction_lines: The transaction_lines of this Transaction.
        :param verification_token: The verification_token of this Transaction.
        """
        self.openapi_types = {
            'additional_currencies': AdditionalCurrencies,
            'amount': float,
            'billing_country_code': str,
            'buyer_credit_card_prefix': str,
            'buyer_email': str,
            'buyer_ip': str,
            'buyer_name': str,
            'buyer_tax_number': str,
            'buyer_tax_number_valid': bool,
            'comments': str,
            'confirm_timestamp': str,
            'countries': Countries,
            'create_timestamp': str,
            'currency_code': str,
            'custom_data': str,
            'custom_fields': List[CustomFields],
            'custom_id': str,
            'customer_id': str,
            'deducted_tax_amount': float,
            'description': str,
            'evidence': Evidence,
            'external_key': str,
            'force_country_code': str,
            'fully_informative': bool,
            'invoice_address': InvoiceAddress,
            'invoice_date': str,
            'invoice_image_url': str,
            'invoice_number': str,
            'invoice_place': str,
            'key': str,
            'kind': str,
            'manual': bool,
            'note': str,
            'order_date': str,
            'original_transaction_key': str,
            'refunded_tax_amount': float,
            'refunded_total_amount': float,
            'source': str,
            'status': str,
            'sub_account_id': str,
            'supply_date': str,
            'tax_amount': float,
            'tax_country_code': str,
            'tax_data': TaxDataSchema,
            'tax_deducted': bool,
            'tax_entity_name': str,
            'tax_number_service': str,
            'tax_supported': bool,
            'tax_timezone': str,
            'test': bool,
            'total_amount': float,
            'transaction_lines': List[TransactionLines],
            'verification_token': str
        }

        self.attribute_map = {
            'additional_currencies': 'additional_currencies',
            'amount': 'amount',
            'billing_country_code': 'billing_country_code',
            'buyer_credit_card_prefix': 'buyer_credit_card_prefix',
            'buyer_email': 'buyer_email',
            'buyer_ip': 'buyer_ip',
            'buyer_name': 'buyer_name',
            'buyer_tax_number': 'buyer_tax_number',
            'buyer_tax_number_valid': 'buyer_tax_number_valid',
            'comments': 'comments',
            'confirm_timestamp': 'confirm_timestamp',
            'countries': 'countries',
            'create_timestamp': 'create_timestamp',
            'currency_code': 'currency_code',
            'custom_data': 'custom_data',
            'custom_fields': 'custom_fields',
            'custom_id': 'custom_id',
            'customer_id': 'customer_id',
            'deducted_tax_amount': 'deducted_tax_amount',
            'description': 'description',
            'evidence': 'evidence',
            'external_key': 'external_key',
            'force_country_code': 'force_country_code',
            'fully_informative': 'fully_informative',
            'invoice_address': 'invoice_address',
            'invoice_date': 'invoice_date',
            'invoice_image_url': 'invoice_image_url',
            'invoice_number': 'invoice_number',
            'invoice_place': 'invoice_place',
            'key': 'key',
            'kind': 'kind',
            'manual': 'manual',
            'note': 'note',
            'order_date': 'order_date',
            'original_transaction_key': 'original_transaction_key',
            'refunded_tax_amount': 'refunded_tax_amount',
            'refunded_total_amount': 'refunded_total_amount',
            'source': 'source',
            'status': 'status',
            'sub_account_id': 'sub_account_id',
            'supply_date': 'supply_date',
            'tax_amount': 'tax_amount',
            'tax_country_code': 'tax_country_code',
            'tax_data': 'tax_data',
            'tax_deducted': 'tax_deducted',
            'tax_entity_name': 'tax_entity_name',
            'tax_number_service': 'tax_number_service',
            'tax_supported': 'tax_supported',
            'tax_timezone': 'tax_timezone',
            'test': 'test',
            'total_amount': 'total_amount',
            'transaction_lines': 'transaction_lines',
            'verification_token': 'verification_token'
        }

        self._additional_currencies = additional_currencies
        self._amount = amount
        self._billing_country_code = billing_country_code
        self._buyer_credit_card_prefix = buyer_credit_card_prefix
        self._buyer_email = buyer_email
        self._buyer_ip = buyer_ip
        self._buyer_name = buyer_name
        self._buyer_tax_number = buyer_tax_number
        self._buyer_tax_number_valid = buyer_tax_number_valid
        self._comments = comments
        self._confirm_timestamp = confirm_timestamp
        self._countries = countries
        self._create_timestamp = create_timestamp
        self._currency_code = currency_code
        self._custom_data = custom_data
        self._custom_fields = custom_fields
        self._custom_id = custom_id
        self._customer_id = customer_id
        self._deducted_tax_amount = deducted_tax_amount
        self._description = description
        self._evidence = evidence
        self._external_key = external_key
        self._force_country_code = force_country_code
        self._fully_informative = fully_informative
        self._invoice_address = invoice_address
        self._invoice_date = invoice_date
        self._invoice_image_url = invoice_image_url
        self._invoice_number = invoice_number
        self._invoice_place = invoice_place
        self._key = key
        self._kind = kind
        self._manual = manual
        self._note = note
        self._order_date = order_date
        self._original_transaction_key = original_transaction_key
        self._refunded_tax_amount = refunded_tax_amount
        self._refunded_total_amount = refunded_total_amount
        self._source = source
        self._status = status
        self._sub_account_id = sub_account_id
        self._supply_date = supply_date
        self._tax_amount = tax_amount
        self._tax_country_code = tax_country_code
        self._tax_data = tax_data
        self._tax_deducted = tax_deducted
        self._tax_entity_name = tax_entity_name
        self._tax_number_service = tax_number_service
        self._tax_supported = tax_supported
        self._tax_timezone = tax_timezone
        self._test = test
        self._total_amount = total_amount
        self._transaction_lines = transaction_lines
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The transaction of this Transaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_currencies(self):
        """Gets the additional_currencies of this Transaction.


        :return: The additional_currencies of this Transaction.
        :rtype: AdditionalCurrencies
        """
        return self._additional_currencies

    @additional_currencies.setter
    def additional_currencies(self, additional_currencies):
        """Sets the additional_currencies of this Transaction.


        :param additional_currencies: The additional_currencies of this Transaction.
        :type additional_currencies: AdditionalCurrencies
        """

        self._additional_currencies = additional_currencies

    @property
    def amount(self):
        """Gets the amount of this Transaction.

        Amount of transaction without tax.

        :return: The amount of this Transaction.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Transaction.

        Amount of transaction without tax.

        :param amount: The amount of this Transaction.
        :type amount: float
        """

        self._amount = amount

    @property
    def billing_country_code(self):
        """Gets the billing_country_code of this Transaction.

        Billing two letter ISO country code.

        :return: The billing_country_code of this Transaction.
        :rtype: str
        """
        return self._billing_country_code

    @billing_country_code.setter
    def billing_country_code(self, billing_country_code):
        """Sets the billing_country_code of this Transaction.

        Billing two letter ISO country code.

        :param billing_country_code: The billing_country_code of this Transaction.
        :type billing_country_code: str
        """

        self._billing_country_code = billing_country_code

    @property
    def buyer_credit_card_prefix(self):
        """Gets the buyer_credit_card_prefix of this Transaction.

        First 6 digits of buyer's credit card prefix.

        :return: The buyer_credit_card_prefix of this Transaction.
        :rtype: str
        """
        return self._buyer_credit_card_prefix

    @buyer_credit_card_prefix.setter
    def buyer_credit_card_prefix(self, buyer_credit_card_prefix):
        """Sets the buyer_credit_card_prefix of this Transaction.

        First 6 digits of buyer's credit card prefix.

        :param buyer_credit_card_prefix: The buyer_credit_card_prefix of this Transaction.
        :type buyer_credit_card_prefix: str
        """

        self._buyer_credit_card_prefix = buyer_credit_card_prefix

    @property
    def buyer_email(self):
        """Gets the buyer_email of this Transaction.

        Buyer's declared email address.

        :return: The buyer_email of this Transaction.
        :rtype: str
        """
        return self._buyer_email

    @buyer_email.setter
    def buyer_email(self, buyer_email):
        """Sets the buyer_email of this Transaction.

        Buyer's declared email address.

        :param buyer_email: The buyer_email of this Transaction.
        :type buyer_email: str
        """

        self._buyer_email = buyer_email

    @property
    def buyer_ip(self):
        """Gets the buyer_ip of this Transaction.

        IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).

        :return: The buyer_ip of this Transaction.
        :rtype: str
        """
        return self._buyer_ip

    @buyer_ip.setter
    def buyer_ip(self, buyer_ip):
        """Sets the buyer_ip of this Transaction.

        IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).

        :param buyer_ip: The buyer_ip of this Transaction.
        :type buyer_ip: str
        """

        self._buyer_ip = buyer_ip

    @property
    def buyer_name(self):
        """Gets the buyer_name of this Transaction.

        Buyer's name - first name and last name or company name.

        :return: The buyer_name of this Transaction.
        :rtype: str
        """
        return self._buyer_name

    @buyer_name.setter
    def buyer_name(self, buyer_name):
        """Sets the buyer_name of this Transaction.

        Buyer's name - first name and last name or company name.

        :param buyer_name: The buyer_name of this Transaction.
        :type buyer_name: str
        """

        self._buyer_name = buyer_name

    @property
    def buyer_tax_number(self):
        """Gets the buyer_tax_number of this Transaction.

         Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.

        :return: The buyer_tax_number of this Transaction.
        :rtype: str
        """
        return self._buyer_tax_number

    @buyer_tax_number.setter
    def buyer_tax_number(self, buyer_tax_number):
        """Sets the buyer_tax_number of this Transaction.

         Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.

        :param buyer_tax_number: The buyer_tax_number of this Transaction.
        :type buyer_tax_number: str
        """

        self._buyer_tax_number = buyer_tax_number

    @property
    def buyer_tax_number_valid(self):
        """Gets the buyer_tax_number_valid of this Transaction.

        If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.

        :return: The buyer_tax_number_valid of this Transaction.
        :rtype: bool
        """
        return self._buyer_tax_number_valid

    @buyer_tax_number_valid.setter
    def buyer_tax_number_valid(self, buyer_tax_number_valid):
        """Sets the buyer_tax_number_valid of this Transaction.

        If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.

        :param buyer_tax_number_valid: The buyer_tax_number_valid of this Transaction.
        :type buyer_tax_number_valid: bool
        """

        self._buyer_tax_number_valid = buyer_tax_number_valid

    @property
    def comments(self):
        """Gets the comments of this Transaction.

        Additional information about the transaction - for example if the evidence has been amended.

        :return: The comments of this Transaction.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this Transaction.

        Additional information about the transaction - for example if the evidence has been amended.

        :param comments: The comments of this Transaction.
        :type comments: str
        """

        self._comments = comments

    @property
    def confirm_timestamp(self):
        """Gets the confirm_timestamp of this Transaction.

        Date and time of transaction confirmation.

        :return: The confirm_timestamp of this Transaction.
        :rtype: str
        """
        return self._confirm_timestamp

    @confirm_timestamp.setter
    def confirm_timestamp(self, confirm_timestamp):
        """Sets the confirm_timestamp of this Transaction.

        Date and time of transaction confirmation.

        :param confirm_timestamp: The confirm_timestamp of this Transaction.
        :type confirm_timestamp: str
        """

        self._confirm_timestamp = confirm_timestamp

    @property
    def countries(self):
        """Gets the countries of this Transaction.


        :return: The countries of this Transaction.
        :rtype: Countries
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this Transaction.


        :param countries: The countries of this Transaction.
        :type countries: Countries
        """

        self._countries = countries

    @property
    def create_timestamp(self):
        """Gets the create_timestamp of this Transaction.

        Date and time of transaction creation.

        :return: The create_timestamp of this Transaction.
        :rtype: str
        """
        return self._create_timestamp

    @create_timestamp.setter
    def create_timestamp(self, create_timestamp):
        """Sets the create_timestamp of this Transaction.

        Date and time of transaction creation.

        :param create_timestamp: The create_timestamp of this Transaction.
        :type create_timestamp: str
        """

        self._create_timestamp = create_timestamp

    @property
    def currency_code(self):
        """Gets the currency_code of this Transaction.

        Currency code for transaction - e.g. EUR.

        :return: The currency_code of this Transaction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Transaction.

        Currency code for transaction - e.g. EUR.

        :param currency_code: The currency_code of this Transaction.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def custom_data(self):
        """Gets the custom_data of this Transaction.

        Custom data related to transaction.

        :return: The custom_data of this Transaction.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this Transaction.

        Custom data related to transaction.

        :param custom_data: The custom_data of this Transaction.
        :type custom_data: str
        """

        self._custom_data = custom_data

    @property
    def custom_fields(self):
        """Gets the custom_fields of this Transaction.

        Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.

        :return: The custom_fields of this Transaction.
        :rtype: List[CustomFields]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this Transaction.

        Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.

        :param custom_fields: The custom_fields of this Transaction.
        :type custom_fields: List[CustomFields]
        """

        self._custom_fields = custom_fields

    @property
    def custom_id(self):
        """Gets the custom_id of this Transaction.

        Custom identifier provided upon transaction creation.

        :return: The custom_id of this Transaction.
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this Transaction.

        Custom identifier provided upon transaction creation.

        :param custom_id: The custom_id of this Transaction.
        :type custom_id: str
        """

        self._custom_id = custom_id

    @property
    def customer_id(self):
        """Gets the customer_id of this Transaction.

        Free-form field for storing customer id.

        :return: The customer_id of this Transaction.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Transaction.

        Free-form field for storing customer id.

        :param customer_id: The customer_id of this Transaction.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def deducted_tax_amount(self):
        """Gets the deducted_tax_amount of this Transaction.

        How much tax has been deducted.

        :return: The deducted_tax_amount of this Transaction.
        :rtype: float
        """
        return self._deducted_tax_amount

    @deducted_tax_amount.setter
    def deducted_tax_amount(self, deducted_tax_amount):
        """Sets the deducted_tax_amount of this Transaction.

        How much tax has been deducted.

        :param deducted_tax_amount: The deducted_tax_amount of this Transaction.
        :type deducted_tax_amount: float
        """

        self._deducted_tax_amount = deducted_tax_amount

    @property
    def description(self):
        """Gets the description of this Transaction.

        Transaction description.

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Transaction.

        Transaction description.

        :param description: The description of this Transaction.
        :type description: str
        """

        self._description = description

    @property
    def evidence(self):
        """Gets the evidence of this Transaction.


        :return: The evidence of this Transaction.
        :rtype: Evidence
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this Transaction.


        :param evidence: The evidence of this Transaction.
        :type evidence: Evidence
        """

        self._evidence = evidence

    @property
    def external_key(self):
        """Gets the external_key of this Transaction.

        Transaction external key

        :return: The external_key of this Transaction.
        :rtype: str
        """
        return self._external_key

    @external_key.setter
    def external_key(self, external_key):
        """Sets the external_key of this Transaction.

        Transaction external key

        :param external_key: The external_key of this Transaction.
        :type external_key: str
        """

        self._external_key = external_key

    @property
    def force_country_code(self):
        """Gets the force_country_code of this Transaction.

        Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.

        :return: The force_country_code of this Transaction.
        :rtype: str
        """
        return self._force_country_code

    @force_country_code.setter
    def force_country_code(self, force_country_code):
        """Sets the force_country_code of this Transaction.

        Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.

        :param force_country_code: The force_country_code of this Transaction.
        :type force_country_code: str
        """

        self._force_country_code = force_country_code

    @property
    def fully_informative(self):
        """Gets the fully_informative of this Transaction.

        Set to true if transaction has only informative lines.

        :return: The fully_informative of this Transaction.
        :rtype: bool
        """
        return self._fully_informative

    @fully_informative.setter
    def fully_informative(self, fully_informative):
        """Sets the fully_informative of this Transaction.

        Set to true if transaction has only informative lines.

        :param fully_informative: The fully_informative of this Transaction.
        :type fully_informative: bool
        """

        self._fully_informative = fully_informative

    @property
    def invoice_address(self):
        """Gets the invoice_address of this Transaction.


        :return: The invoice_address of this Transaction.
        :rtype: InvoiceAddress
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this Transaction.


        :param invoice_address: The invoice_address of this Transaction.
        :type invoice_address: InvoiceAddress
        """

        self._invoice_address = invoice_address

    @property
    def invoice_date(self):
        """Gets the invoice_date of this Transaction.

        Invoice date of issue.

        :return: The invoice_date of this Transaction.
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this Transaction.

        Invoice date of issue.

        :param invoice_date: The invoice_date of this Transaction.
        :type invoice_date: str
        """

        self._invoice_date = invoice_date

    @property
    def invoice_image_url(self):
        """Gets the invoice_image_url of this Transaction.

        Invoice image URL - provided by Taxamo.

        :return: The invoice_image_url of this Transaction.
        :rtype: str
        """
        return self._invoice_image_url

    @invoice_image_url.setter
    def invoice_image_url(self, invoice_image_url):
        """Sets the invoice_image_url of this Transaction.

        Invoice image URL - provided by Taxamo.

        :param invoice_image_url: The invoice_image_url of this Transaction.
        :type invoice_image_url: str
        """

        self._invoice_image_url = invoice_image_url

    @property
    def invoice_number(self):
        """Gets the invoice_number of this Transaction.

        Invoice number.

        :return: The invoice_number of this Transaction.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this Transaction.

        Invoice number.

        :param invoice_number: The invoice_number of this Transaction.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def invoice_place(self):
        """Gets the invoice_place of this Transaction.

        Invoice place of issue.

        :return: The invoice_place of this Transaction.
        :rtype: str
        """
        return self._invoice_place

    @invoice_place.setter
    def invoice_place(self, invoice_place):
        """Sets the invoice_place of this Transaction.

        Invoice place of issue.

        :param invoice_place: The invoice_place of this Transaction.
        :type invoice_place: str
        """

        self._invoice_place = invoice_place

    @property
    def key(self):
        """Gets the key of this Transaction.

        Id generated by taxamo.

        :return: The key of this Transaction.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Transaction.

        Id generated by taxamo.

        :param key: The key of this Transaction.
        :type key: str
        """

        self._key = key

    @property
    def kind(self):
        """Gets the kind of this Transaction.

        Transaction kind: eu-b2c, eu-b2b, domestic, untaxed

        :return: The kind of this Transaction.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Transaction.

        Transaction kind: eu-b2c, eu-b2b, domestic, untaxed

        :param kind: The kind of this Transaction.
        :type kind: str
        """

        self._kind = kind

    @property
    def manual(self):
        """Gets the manual of this Transaction.

        Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the 'manual' flag or use false value there and provide customer's ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.

        :return: The manual of this Transaction.
        :rtype: bool
        """
        return self._manual

    @manual.setter
    def manual(self, manual):
        """Sets the manual of this Transaction.

        Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the 'manual' flag or use false value there and provide customer's ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.

        :param manual: The manual of this Transaction.
        :type manual: bool
        """

        self._manual = manual

    @property
    def note(self):
        """Gets the note of this Transaction.

        Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.

        :return: The note of this Transaction.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this Transaction.

        Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.

        :param note: The note of this Transaction.
        :type note: str
        """

        self._note = note

    @property
    def order_date(self):
        """Gets the order_date of this Transaction.

        Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.

        :return: The order_date of this Transaction.
        :rtype: str
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this Transaction.

        Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.

        :param order_date: The order_date of this Transaction.
        :type order_date: str
        """

        self._order_date = order_date

    @property
    def original_transaction_key(self):
        """Gets the original_transaction_key of this Transaction.

        Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.

        :return: The original_transaction_key of this Transaction.
        :rtype: str
        """
        return self._original_transaction_key

    @original_transaction_key.setter
    def original_transaction_key(self, original_transaction_key):
        """Sets the original_transaction_key of this Transaction.

        Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.

        :param original_transaction_key: The original_transaction_key of this Transaction.
        :type original_transaction_key: str
        """

        self._original_transaction_key = original_transaction_key

    @property
    def refunded_tax_amount(self):
        """Gets the refunded_tax_amount of this Transaction.

        Refunded tax amount.

        :return: The refunded_tax_amount of this Transaction.
        :rtype: float
        """
        return self._refunded_tax_amount

    @refunded_tax_amount.setter
    def refunded_tax_amount(self, refunded_tax_amount):
        """Sets the refunded_tax_amount of this Transaction.

        Refunded tax amount.

        :param refunded_tax_amount: The refunded_tax_amount of this Transaction.
        :type refunded_tax_amount: float
        """

        self._refunded_tax_amount = refunded_tax_amount

    @property
    def refunded_total_amount(self):
        """Gets the refunded_total_amount of this Transaction.

        Total amount refunde (including tax).

        :return: The refunded_total_amount of this Transaction.
        :rtype: float
        """
        return self._refunded_total_amount

    @refunded_total_amount.setter
    def refunded_total_amount(self, refunded_total_amount):
        """Sets the refunded_total_amount of this Transaction.

        Total amount refunde (including tax).

        :param refunded_total_amount: The refunded_total_amount of this Transaction.
        :type refunded_total_amount: float
        """

        self._refunded_total_amount = refunded_total_amount

    @property
    def source(self):
        """Gets the source of this Transaction.

        Transaction source software - e.g. plugin

        :return: The source of this Transaction.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this Transaction.

        Transaction source software - e.g. plugin

        :param source: The source of this Transaction.
        :type source: str
        """

        self._source = source

    @property
    def status(self):
        """Gets the status of this Transaction.

        Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.

        :return: The status of this Transaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Transaction.

        Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.

        :param status: The status of this Transaction.
        :type status: str
        """

        self._status = status

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this Transaction.

        Sub account identifier.

        :return: The sub_account_id of this Transaction.
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this Transaction.

        Sub account identifier.

        :param sub_account_id: The sub_account_id of this Transaction.
        :type sub_account_id: str
        """

        self._sub_account_id = sub_account_id

    @property
    def supply_date(self):
        """Gets the supply_date of this Transaction.

        Supply date in yyyy-MM-dd format.

        :return: The supply_date of this Transaction.
        :rtype: str
        """
        return self._supply_date

    @supply_date.setter
    def supply_date(self, supply_date):
        """Sets the supply_date of this Transaction.

        Supply date in yyyy-MM-dd format.

        :param supply_date: The supply_date of this Transaction.
        :type supply_date: str
        """

        self._supply_date = supply_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Transaction.

        Tax amount of transaction.

        :return: The tax_amount of this Transaction.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Transaction.

        Tax amount of transaction.

        :param tax_amount: The tax_amount of this Transaction.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_country_code(self):
        """Gets the tax_country_code of this Transaction.

        Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.

        :return: The tax_country_code of this Transaction.
        :rtype: str
        """
        return self._tax_country_code

    @tax_country_code.setter
    def tax_country_code(self, tax_country_code):
        """Sets the tax_country_code of this Transaction.

        Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.

        :param tax_country_code: The tax_country_code of this Transaction.
        :type tax_country_code: str
        """

        self._tax_country_code = tax_country_code

    @property
    def tax_data(self):
        """Gets the tax_data of this Transaction.


        :return: The tax_data of this Transaction.
        :rtype: TaxDataSchema
        """
        return self._tax_data

    @tax_data.setter
    def tax_data(self, tax_data):
        """Sets the tax_data of this Transaction.


        :param tax_data: The tax_data of this Transaction.
        :type tax_data: TaxDataSchema
        """

        self._tax_data = tax_data

    @property
    def tax_deducted(self):
        """Gets the tax_deducted of this Transaction.

        If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.

        :return: The tax_deducted of this Transaction.
        :rtype: bool
        """
        return self._tax_deducted

    @tax_deducted.setter
    def tax_deducted(self, tax_deducted):
        """Sets the tax_deducted of this Transaction.

        If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.

        :param tax_deducted: The tax_deducted of this Transaction.
        :type tax_deducted: bool
        """

        self._tax_deducted = tax_deducted

    @property
    def tax_entity_name(self):
        """Gets the tax_entity_name of this Transaction.

        To which entity is the tax due.

        :return: The tax_entity_name of this Transaction.
        :rtype: str
        """
        return self._tax_entity_name

    @tax_entity_name.setter
    def tax_entity_name(self, tax_entity_name):
        """Sets the tax_entity_name of this Transaction.

        To which entity is the tax due.

        :param tax_entity_name: The tax_entity_name of this Transaction.
        :type tax_entity_name: str
        """

        self._tax_entity_name = tax_entity_name

    @property
    def tax_number_service(self):
        """Gets the tax_number_service of this Transaction.

        Tax number service identifier - if available for a given region and the region is enabled.

        :return: The tax_number_service of this Transaction.
        :rtype: str
        """
        return self._tax_number_service

    @tax_number_service.setter
    def tax_number_service(self, tax_number_service):
        """Sets the tax_number_service of this Transaction.

        Tax number service identifier - if available for a given region and the region is enabled.

        :param tax_number_service: The tax_number_service of this Transaction.
        :type tax_number_service: str
        """

        self._tax_number_service = tax_number_service

    @property
    def tax_supported(self):
        """Gets the tax_supported of this Transaction.

        Is tax calculation supported for a detected tax location?

        :return: The tax_supported of this Transaction.
        :rtype: bool
        """
        return self._tax_supported

    @tax_supported.setter
    def tax_supported(self, tax_supported):
        """Sets the tax_supported of this Transaction.

        Is tax calculation supported for a detected tax location?

        :param tax_supported: The tax_supported of this Transaction.
        :type tax_supported: bool
        """

        self._tax_supported = tax_supported

    @property
    def tax_timezone(self):
        """Gets the tax_timezone of this Transaction.

        Timezone name for tax transaction.

        :return: The tax_timezone of this Transaction.
        :rtype: str
        """
        return self._tax_timezone

    @tax_timezone.setter
    def tax_timezone(self, tax_timezone):
        """Sets the tax_timezone of this Transaction.

        Timezone name for tax transaction.

        :param tax_timezone: The tax_timezone of this Transaction.
        :type tax_timezone: str
        """

        self._tax_timezone = tax_timezone

    @property
    def test(self):
        """Gets the test of this Transaction.

        Was this transaction created in test mode?

        :return: The test of this Transaction.
        :rtype: bool
        """
        return self._test

    @test.setter
    def test(self, test):
        """Sets the test of this Transaction.

        Was this transaction created in test mode?

        :param test: The test of this Transaction.
        :type test: bool
        """

        self._test = test

    @property
    def total_amount(self):
        """Gets the total_amount of this Transaction.

        Total amount of transaction.

        :return: The total_amount of this Transaction.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Transaction.

        Total amount of transaction.

        :param total_amount: The total_amount of this Transaction.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def transaction_lines(self):
        """Gets the transaction_lines of this Transaction.

        Transaction lines.

        :return: The transaction_lines of this Transaction.
        :rtype: List[TransactionLines]
        """
        return self._transaction_lines

    @transaction_lines.setter
    def transaction_lines(self, transaction_lines):
        """Sets the transaction_lines of this Transaction.

        Transaction lines.

        :param transaction_lines: The transaction_lines of this Transaction.
        :type transaction_lines: List[TransactionLines]
        """
        if transaction_lines is None:
            raise ValueError("Invalid value for `transaction_lines`, must not be `None`")

        self._transaction_lines = transaction_lines

    @property
    def verification_token(self):
        """Gets the verification_token of this Transaction.

        Verification token

        :return: The verification_token of this Transaction.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this Transaction.

        Verification token

        :param verification_token: The verification_token of this Transaction.
        :type verification_token: str
        """

        self._verification_token = verification_token
