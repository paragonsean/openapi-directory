# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.input_transaction import InputTransaction
from openapi_server import util


class CreateTransactionIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, manual_mode: bool=None, transaction: InputTransaction=None):
        """CreateTransactionIn - a model defined in OpenAPI

        :param manual_mode: The manual_mode of this CreateTransactionIn.
        :param transaction: The transaction of this CreateTransactionIn.
        """
        self.openapi_types = {
            'manual_mode': bool,
            'transaction': InputTransaction
        }

        self.attribute_map = {
            'manual_mode': 'manual_mode',
            'transaction': 'transaction'
        }

        self._manual_mode = manual_mode
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateTransactionIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createTransactionIn of this CreateTransactionIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def manual_mode(self):
        """Gets the manual_mode of this CreateTransactionIn.

        Use manual mode, bypassing country detection. Only allowed with private token. This flag allows to use original_transaction_key field

        :return: The manual_mode of this CreateTransactionIn.
        :rtype: bool
        """
        return self._manual_mode

    @manual_mode.setter
    def manual_mode(self, manual_mode):
        """Sets the manual_mode of this CreateTransactionIn.

        Use manual mode, bypassing country detection. Only allowed with private token. This flag allows to use original_transaction_key field

        :param manual_mode: The manual_mode of this CreateTransactionIn.
        :type manual_mode: bool
        """

        self._manual_mode = manual_mode

    @property
    def transaction(self):
        """Gets the transaction of this CreateTransactionIn.


        :return: The transaction of this CreateTransactionIn.
        :rtype: InputTransaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this CreateTransactionIn.


        :param transaction: The transaction of this CreateTransactionIn.
        :type transaction: InputTransaction
        """
        if transaction is None:
            raise ValueError("Invalid value for `transaction`, must not be `None`")

        self._transaction = transaction
