# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsTaxId(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, state_of_issue: str=None, tax_id: str=None, tax_id_type: str=None):
        """UsTaxId - a model defined in OpenAPI

        :param state_of_issue: The state_of_issue of this UsTaxId.
        :param tax_id: The tax_id of this UsTaxId.
        :param tax_id_type: The tax_id_type of this UsTaxId.
        """
        self.openapi_types = {
            'state_of_issue': str,
            'tax_id': str,
            'tax_id_type': str
        }

        self.attribute_map = {
            'state_of_issue': 'state_of_issue',
            'tax_id': 'tax_id',
            'tax_id_type': 'tax_id_type'
        }

        self._state_of_issue = state_of_issue
        self._tax_id = tax_id
        self._tax_id_type = tax_id_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsTaxId':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The us_tax_id of this UsTaxId.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def state_of_issue(self):
        """Gets the state_of_issue of this UsTaxId.

        State of issue

        :return: The state_of_issue of this UsTaxId.
        :rtype: str
        """
        return self._state_of_issue

    @state_of_issue.setter
    def state_of_issue(self, state_of_issue):
        """Sets the state_of_issue of this UsTaxId.

        State of issue

        :param state_of_issue: The state_of_issue of this UsTaxId.
        :type state_of_issue: str
        """

        self._state_of_issue = state_of_issue

    @property
    def tax_id(self):
        """Gets the tax_id of this UsTaxId.

        Tax ID

        :return: The tax_id of this UsTaxId.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this UsTaxId.

        Tax ID

        :param tax_id: The tax_id of this UsTaxId.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def tax_id_type(self):
        """Gets the tax_id_type of this UsTaxId.

        Tax id type.

        :return: The tax_id_type of this UsTaxId.
        :rtype: str
        """
        return self._tax_id_type

    @tax_id_type.setter
    def tax_id_type(self, tax_id_type):
        """Sets the tax_id_type of this UsTaxId.

        Tax id type.

        :param tax_id_type: The tax_id_type of this UsTaxId.
        :type tax_id_type: str
        """
        if tax_id_type is None:
            raise ValueError("Invalid value for `tax_id_type`, must not be `None`")

        self._tax_id_type = tax_id_type
