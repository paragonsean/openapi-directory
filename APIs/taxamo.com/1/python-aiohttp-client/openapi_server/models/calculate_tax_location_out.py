# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.countries import Countries
from openapi_server.models.evidence import Evidence
from openapi_server import util


class CalculateTaxLocationOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_country_code: str=None, buyer_credit_card_prefix: str=None, buyer_ip: str=None, countries: Countries=None, evidence: Evidence=None, tax_country_code: str=None, tax_deducted: bool=None, tax_supported: bool=None):
        """CalculateTaxLocationOut - a model defined in OpenAPI

        :param billing_country_code: The billing_country_code of this CalculateTaxLocationOut.
        :param buyer_credit_card_prefix: The buyer_credit_card_prefix of this CalculateTaxLocationOut.
        :param buyer_ip: The buyer_ip of this CalculateTaxLocationOut.
        :param countries: The countries of this CalculateTaxLocationOut.
        :param evidence: The evidence of this CalculateTaxLocationOut.
        :param tax_country_code: The tax_country_code of this CalculateTaxLocationOut.
        :param tax_deducted: The tax_deducted of this CalculateTaxLocationOut.
        :param tax_supported: The tax_supported of this CalculateTaxLocationOut.
        """
        self.openapi_types = {
            'billing_country_code': str,
            'buyer_credit_card_prefix': str,
            'buyer_ip': str,
            'countries': Countries,
            'evidence': Evidence,
            'tax_country_code': str,
            'tax_deducted': bool,
            'tax_supported': bool
        }

        self.attribute_map = {
            'billing_country_code': 'billing_country_code',
            'buyer_credit_card_prefix': 'buyer_credit_card_prefix',
            'buyer_ip': 'buyer_ip',
            'countries': 'countries',
            'evidence': 'evidence',
            'tax_country_code': 'tax_country_code',
            'tax_deducted': 'tax_deducted',
            'tax_supported': 'tax_supported'
        }

        self._billing_country_code = billing_country_code
        self._buyer_credit_card_prefix = buyer_credit_card_prefix
        self._buyer_ip = buyer_ip
        self._countries = countries
        self._evidence = evidence
        self._tax_country_code = tax_country_code
        self._tax_deducted = tax_deducted
        self._tax_supported = tax_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateTaxLocationOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The calculateTaxLocationOut of this CalculateTaxLocationOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_country_code(self):
        """Gets the billing_country_code of this CalculateTaxLocationOut.

        Billing two letter ISO country code.

        :return: The billing_country_code of this CalculateTaxLocationOut.
        :rtype: str
        """
        return self._billing_country_code

    @billing_country_code.setter
    def billing_country_code(self, billing_country_code):
        """Sets the billing_country_code of this CalculateTaxLocationOut.

        Billing two letter ISO country code.

        :param billing_country_code: The billing_country_code of this CalculateTaxLocationOut.
        :type billing_country_code: str
        """

        self._billing_country_code = billing_country_code

    @property
    def buyer_credit_card_prefix(self):
        """Gets the buyer_credit_card_prefix of this CalculateTaxLocationOut.

        First 6 digits of buyer's credit card prefix.

        :return: The buyer_credit_card_prefix of this CalculateTaxLocationOut.
        :rtype: str
        """
        return self._buyer_credit_card_prefix

    @buyer_credit_card_prefix.setter
    def buyer_credit_card_prefix(self, buyer_credit_card_prefix):
        """Sets the buyer_credit_card_prefix of this CalculateTaxLocationOut.

        First 6 digits of buyer's credit card prefix.

        :param buyer_credit_card_prefix: The buyer_credit_card_prefix of this CalculateTaxLocationOut.
        :type buyer_credit_card_prefix: str
        """

        self._buyer_credit_card_prefix = buyer_credit_card_prefix

    @property
    def buyer_ip(self):
        """Gets the buyer_ip of this CalculateTaxLocationOut.

        IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).

        :return: The buyer_ip of this CalculateTaxLocationOut.
        :rtype: str
        """
        return self._buyer_ip

    @buyer_ip.setter
    def buyer_ip(self, buyer_ip):
        """Sets the buyer_ip of this CalculateTaxLocationOut.

        IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).

        :param buyer_ip: The buyer_ip of this CalculateTaxLocationOut.
        :type buyer_ip: str
        """

        self._buyer_ip = buyer_ip

    @property
    def countries(self):
        """Gets the countries of this CalculateTaxLocationOut.


        :return: The countries of this CalculateTaxLocationOut.
        :rtype: Countries
        """
        return self._countries

    @countries.setter
    def countries(self, countries):
        """Sets the countries of this CalculateTaxLocationOut.


        :param countries: The countries of this CalculateTaxLocationOut.
        :type countries: Countries
        """

        self._countries = countries

    @property
    def evidence(self):
        """Gets the evidence of this CalculateTaxLocationOut.


        :return: The evidence of this CalculateTaxLocationOut.
        :rtype: Evidence
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this CalculateTaxLocationOut.


        :param evidence: The evidence of this CalculateTaxLocationOut.
        :type evidence: Evidence
        """

        self._evidence = evidence

    @property
    def tax_country_code(self):
        """Gets the tax_country_code of this CalculateTaxLocationOut.

        Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.

        :return: The tax_country_code of this CalculateTaxLocationOut.
        :rtype: str
        """
        return self._tax_country_code

    @tax_country_code.setter
    def tax_country_code(self, tax_country_code):
        """Sets the tax_country_code of this CalculateTaxLocationOut.

        Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.

        :param tax_country_code: The tax_country_code of this CalculateTaxLocationOut.
        :type tax_country_code: str
        """

        self._tax_country_code = tax_country_code

    @property
    def tax_deducted(self):
        """Gets the tax_deducted of this CalculateTaxLocationOut.

        If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.

        :return: The tax_deducted of this CalculateTaxLocationOut.
        :rtype: bool
        """
        return self._tax_deducted

    @tax_deducted.setter
    def tax_deducted(self, tax_deducted):
        """Sets the tax_deducted of this CalculateTaxLocationOut.

        If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.

        :param tax_deducted: The tax_deducted of this CalculateTaxLocationOut.
        :type tax_deducted: bool
        """

        self._tax_deducted = tax_deducted

    @property
    def tax_supported(self):
        """Gets the tax_supported of this CalculateTaxLocationOut.

        Is tax calculation supported for a detected tax location?

        :return: The tax_supported of this CalculateTaxLocationOut.
        :rtype: bool
        """
        return self._tax_supported

    @tax_supported.setter
    def tax_supported(self, tax_supported):
        """Sets the tax_supported of this CalculateTaxLocationOut.

        Is tax calculation supported for a detected tax location?

        :param tax_supported: The tax_supported of this CalculateTaxLocationOut.
        :type tax_supported: bool
        """

        self._tax_supported = tax_supported
