# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateRefundIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, custom_id: str=None, line_key: str=None, refund_reason: str=None, total_amount: float=None):
        """CreateRefundIn - a model defined in OpenAPI

        :param amount: The amount of this CreateRefundIn.
        :param custom_id: The custom_id of this CreateRefundIn.
        :param line_key: The line_key of this CreateRefundIn.
        :param refund_reason: The refund_reason of this CreateRefundIn.
        :param total_amount: The total_amount of this CreateRefundIn.
        """
        self.openapi_types = {
            'amount': float,
            'custom_id': str,
            'line_key': str,
            'refund_reason': str,
            'total_amount': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'custom_id': 'custom_id',
            'line_key': 'line_key',
            'refund_reason': 'refund_reason',
            'total_amount': 'total_amount'
        }

        self._amount = amount
        self._custom_id = custom_id
        self._line_key = line_key
        self._refund_reason = refund_reason
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateRefundIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createRefundIn of this CreateRefundIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this CreateRefundIn.

        Amount (without tax) to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.

        :return: The amount of this CreateRefundIn.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this CreateRefundIn.

        Amount (without tax) to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.

        :param amount: The amount of this CreateRefundIn.
        :type amount: float
        """

        self._amount = amount

    @property
    def custom_id(self):
        """Gets the custom_id of this CreateRefundIn.

        Line custom identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.

        :return: The custom_id of this CreateRefundIn.
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this CreateRefundIn.

        Line custom identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.

        :param custom_id: The custom_id of this CreateRefundIn.
        :type custom_id: str
        """

        self._custom_id = custom_id

    @property
    def line_key(self):
        """Gets the line_key of this CreateRefundIn.

        Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.

        :return: The line_key of this CreateRefundIn.
        :rtype: str
        """
        return self._line_key

    @line_key.setter
    def line_key(self, line_key):
        """Sets the line_key of this CreateRefundIn.

        Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.

        :param line_key: The line_key of this CreateRefundIn.
        :type line_key: str
        """

        self._line_key = line_key

    @property
    def refund_reason(self):
        """Gets the refund_reason of this CreateRefundIn.

        Refund reason, displayed on the credit note.

        :return: The refund_reason of this CreateRefundIn.
        :rtype: str
        """
        return self._refund_reason

    @refund_reason.setter
    def refund_reason(self, refund_reason):
        """Sets the refund_reason of this CreateRefundIn.

        Refund reason, displayed on the credit note.

        :param refund_reason: The refund_reason of this CreateRefundIn.
        :type refund_reason: str
        """

        self._refund_reason = refund_reason

    @property
    def total_amount(self):
        """Gets the total_amount of this CreateRefundIn.

        Total amount, including tax, to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.

        :return: The total_amount of this CreateRefundIn.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this CreateRefundIn.

        Total amount, including tax, to be refunded. Either amount or total amount is required. In case of line key and custom id missing, only total_amount can be used.

        :param total_amount: The total_amount of this CreateRefundIn.
        :type total_amount: float
        """

        self._total_amount = total_amount
