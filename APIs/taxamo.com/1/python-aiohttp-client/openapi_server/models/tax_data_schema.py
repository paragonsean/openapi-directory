# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.us_tax_exemption_certificate_schema import UsTaxExemptionCertificateSchema
from openapi_server import util


class TaxDataSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, us_tax_exemption_certificate: UsTaxExemptionCertificateSchema=None):
        """TaxDataSchema - a model defined in OpenAPI

        :param us_tax_exemption_certificate: The us_tax_exemption_certificate of this TaxDataSchema.
        """
        self.openapi_types = {
            'us_tax_exemption_certificate': UsTaxExemptionCertificateSchema
        }

        self.attribute_map = {
            'us_tax_exemption_certificate': 'us_tax_exemption_certificate'
        }

        self._us_tax_exemption_certificate = us_tax_exemption_certificate

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TaxDataSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The tax_data_schema of this TaxDataSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def us_tax_exemption_certificate(self):
        """Gets the us_tax_exemption_certificate of this TaxDataSchema.


        :return: The us_tax_exemption_certificate of this TaxDataSchema.
        :rtype: UsTaxExemptionCertificateSchema
        """
        return self._us_tax_exemption_certificate

    @us_tax_exemption_certificate.setter
    def us_tax_exemption_certificate(self, us_tax_exemption_certificate):
        """Sets the us_tax_exemption_certificate of this TaxDataSchema.


        :param us_tax_exemption_certificate: The us_tax_exemption_certificate of this TaxDataSchema.
        :type us_tax_exemption_certificate: UsTaxExemptionCertificateSchema
        """

        self._us_tax_exemption_certificate = us_tax_exemption_certificate
