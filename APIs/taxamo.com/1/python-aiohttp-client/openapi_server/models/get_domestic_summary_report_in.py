# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetDomesticSummaryReportIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, currency_code: str=None, end_month: str=None, format: str=None, fx_date_type: str=None, start_month: str=None):
        """GetDomesticSummaryReportIn - a model defined in OpenAPI

        :param country_code: The country_code of this GetDomesticSummaryReportIn.
        :param currency_code: The currency_code of this GetDomesticSummaryReportIn.
        :param end_month: The end_month of this GetDomesticSummaryReportIn.
        :param format: The format of this GetDomesticSummaryReportIn.
        :param fx_date_type: The fx_date_type of this GetDomesticSummaryReportIn.
        :param start_month: The start_month of this GetDomesticSummaryReportIn.
        """
        self.openapi_types = {
            'country_code': str,
            'currency_code': str,
            'end_month': str,
            'format': str,
            'fx_date_type': str,
            'start_month': str
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'currency_code': 'currency_code',
            'end_month': 'end_month',
            'format': 'format',
            'fx_date_type': 'fx_date_type',
            'start_month': 'start_month'
        }

        self._country_code = country_code
        self._currency_code = currency_code
        self._end_month = end_month
        self._format = format
        self._fx_date_type = fx_date_type
        self._start_month = start_month

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetDomesticSummaryReportIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getDomesticSummaryReportIn of this GetDomesticSummaryReportIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this GetDomesticSummaryReportIn.

        ISO 2-letter country code which will be used for determining which country is domestic.

        :return: The country_code of this GetDomesticSummaryReportIn.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this GetDomesticSummaryReportIn.

        ISO 2-letter country code which will be used for determining which country is domestic.

        :param country_code: The country_code of this GetDomesticSummaryReportIn.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def currency_code(self):
        """Gets the currency_code of this GetDomesticSummaryReportIn.

        ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.

        :return: The currency_code of this GetDomesticSummaryReportIn.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GetDomesticSummaryReportIn.

        ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.

        :param currency_code: The currency_code of this GetDomesticSummaryReportIn.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def end_month(self):
        """Gets the end_month of this GetDomesticSummaryReportIn.

        Period end month in yyyy-MM format.

        :return: The end_month of this GetDomesticSummaryReportIn.
        :rtype: str
        """
        return self._end_month

    @end_month.setter
    def end_month(self, end_month):
        """Sets the end_month of this GetDomesticSummaryReportIn.

        Period end month in yyyy-MM format.

        :param end_month: The end_month of this GetDomesticSummaryReportIn.
        :type end_month: str
        """
        if end_month is None:
            raise ValueError("Invalid value for `end_month`, must not be `None`")

        self._end_month = end_month

    @property
    def format(self):
        """Gets the format of this GetDomesticSummaryReportIn.

        Output format. 'xml' and 'csv' values are accepted. Default format - json

        :return: The format of this GetDomesticSummaryReportIn.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GetDomesticSummaryReportIn.

        Output format. 'xml' and 'csv' values are accepted. Default format - json

        :param format: The format of this GetDomesticSummaryReportIn.
        :type format: str
        """

        self._format = format

    @property
    def fx_date_type(self):
        """Gets the fx_date_type of this GetDomesticSummaryReportIn.

        Which date should be used for FX.

        :return: The fx_date_type of this GetDomesticSummaryReportIn.
        :rtype: str
        """
        return self._fx_date_type

    @fx_date_type.setter
    def fx_date_type(self, fx_date_type):
        """Sets the fx_date_type of this GetDomesticSummaryReportIn.

        Which date should be used for FX.

        :param fx_date_type: The fx_date_type of this GetDomesticSummaryReportIn.
        :type fx_date_type: str
        """

        self._fx_date_type = fx_date_type

    @property
    def start_month(self):
        """Gets the start_month of this GetDomesticSummaryReportIn.

        Period start month in yyyy-MM format.

        :return: The start_month of this GetDomesticSummaryReportIn.
        :rtype: str
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this GetDomesticSummaryReportIn.

        Period start month in yyyy-MM format.

        :param start_month: The start_month of this GetDomesticSummaryReportIn.
        :type start_month: str
        """
        if start_month is None:
            raise ValueError("Invalid value for `start_month`, must not be `None`")

        self._start_month = start_month
