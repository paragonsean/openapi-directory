# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Country(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, calling_code: List[str]=None, cca2: str=None, cca3: str=None, ccn3: str=None, code: str=None, code_long: str=None, codenum: str=None, currency: List[str]=None, name: str=None, tax_number_country_code: str=None, tax_region: str=None, tax_supported: bool=None):
        """Country - a model defined in OpenAPI

        :param calling_code: The calling_code of this Country.
        :param cca2: The cca2 of this Country.
        :param cca3: The cca3 of this Country.
        :param ccn3: The ccn3 of this Country.
        :param code: The code of this Country.
        :param code_long: The code_long of this Country.
        :param codenum: The codenum of this Country.
        :param currency: The currency of this Country.
        :param name: The name of this Country.
        :param tax_number_country_code: The tax_number_country_code of this Country.
        :param tax_region: The tax_region of this Country.
        :param tax_supported: The tax_supported of this Country.
        """
        self.openapi_types = {
            'calling_code': List[str],
            'cca2': str,
            'cca3': str,
            'ccn3': str,
            'code': str,
            'code_long': str,
            'codenum': str,
            'currency': List[str],
            'name': str,
            'tax_number_country_code': str,
            'tax_region': str,
            'tax_supported': bool
        }

        self.attribute_map = {
            'calling_code': 'callingCode',
            'cca2': 'cca2',
            'cca3': 'cca3',
            'ccn3': 'ccn3',
            'code': 'code',
            'code_long': 'code_long',
            'codenum': 'codenum',
            'currency': 'currency',
            'name': 'name',
            'tax_number_country_code': 'tax_number_country_code',
            'tax_region': 'tax_region',
            'tax_supported': 'tax_supported'
        }

        self._calling_code = calling_code
        self._cca2 = cca2
        self._cca3 = cca3
        self._ccn3 = ccn3
        self._code = code
        self._code_long = code_long
        self._codenum = codenum
        self._currency = currency
        self._name = name
        self._tax_number_country_code = tax_number_country_code
        self._tax_region = tax_region
        self._tax_supported = tax_supported

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The country of this Country.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def calling_code(self):
        """Gets the calling_code of this Country.

        List of phone number calling codes.

        :return: The calling_code of this Country.
        :rtype: List[str]
        """
        return self._calling_code

    @calling_code.setter
    def calling_code(self, calling_code):
        """Sets the calling_code of this Country.

        List of phone number calling codes.

        :param calling_code: The calling_code of this Country.
        :type calling_code: List[str]
        """

        self._calling_code = calling_code

    @property
    def cca2(self):
        """Gets the cca2 of this Country.

        Two letter ISO country code.

        :return: The cca2 of this Country.
        :rtype: str
        """
        return self._cca2

    @cca2.setter
    def cca2(self, cca2):
        """Sets the cca2 of this Country.

        Two letter ISO country code.

        :param cca2: The cca2 of this Country.
        :type cca2: str
        """

        self._cca2 = cca2

    @property
    def cca3(self):
        """Gets the cca3 of this Country.

        Three letter ISO country code.

        :return: The cca3 of this Country.
        :rtype: str
        """
        return self._cca3

    @cca3.setter
    def cca3(self, cca3):
        """Sets the cca3 of this Country.

        Three letter ISO country code.

        :param cca3: The cca3 of this Country.
        :type cca3: str
        """

        self._cca3 = cca3

    @property
    def ccn3(self):
        """Gets the ccn3 of this Country.

        Country ISO 3-digit code.

        :return: The ccn3 of this Country.
        :rtype: str
        """
        return self._ccn3

    @ccn3.setter
    def ccn3(self, ccn3):
        """Sets the ccn3 of this Country.

        Country ISO 3-digit code.

        :param ccn3: The ccn3 of this Country.
        :type ccn3: str
        """

        self._ccn3 = ccn3

    @property
    def code(self):
        """Gets the code of this Country.

        Two letter ISO country code.

        :return: The code of this Country.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Country.

        Two letter ISO country code.

        :param code: The code of this Country.
        :type code: str
        """

        self._code = code

    @property
    def code_long(self):
        """Gets the code_long of this Country.

        Three letter ISO country code.

        :return: The code_long of this Country.
        :rtype: str
        """
        return self._code_long

    @code_long.setter
    def code_long(self, code_long):
        """Sets the code_long of this Country.

        Three letter ISO country code.

        :param code_long: The code_long of this Country.
        :type code_long: str
        """

        self._code_long = code_long

    @property
    def codenum(self):
        """Gets the codenum of this Country.

        Country ISO 3-digit code.

        :return: The codenum of this Country.
        :rtype: str
        """
        return self._codenum

    @codenum.setter
    def codenum(self, codenum):
        """Sets the codenum of this Country.

        Country ISO 3-digit code.

        :param codenum: The codenum of this Country.
        :type codenum: str
        """

        self._codenum = codenum

    @property
    def currency(self):
        """Gets the currency of this Country.

        List of currencies.

        :return: The currency of this Country.
        :rtype: List[str]
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this Country.

        List of currencies.

        :param currency: The currency of this Country.
        :type currency: List[str]
        """

        self._currency = currency

    @property
    def name(self):
        """Gets the name of this Country.

        Country name.

        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Country.

        Country name.

        :param name: The name of this Country.
        :type name: str
        """

        self._name = name

    @property
    def tax_number_country_code(self):
        """Gets the tax_number_country_code of this Country.

        VAT number country code. Important for Greece.

        :return: The tax_number_country_code of this Country.
        :rtype: str
        """
        return self._tax_number_country_code

    @tax_number_country_code.setter
    def tax_number_country_code(self, tax_number_country_code):
        """Sets the tax_number_country_code of this Country.

        VAT number country code. Important for Greece.

        :param tax_number_country_code: The tax_number_country_code of this Country.
        :type tax_number_country_code: str
        """

        self._tax_number_country_code = tax_number_country_code

    @property
    def tax_region(self):
        """Gets the tax_region of this Country.

        Tax region code - e.g. EU, US, NO, JP...

        :return: The tax_region of this Country.
        :rtype: str
        """
        return self._tax_region

    @tax_region.setter
    def tax_region(self, tax_region):
        """Sets the tax_region of this Country.

        Tax region code - e.g. EU, US, NO, JP...

        :param tax_region: The tax_region of this Country.
        :type tax_region: str
        """

        self._tax_region = tax_region

    @property
    def tax_supported(self):
        """Gets the tax_supported of this Country.

        True if tax calculation supported for this country.

        :return: The tax_supported of this Country.
        :rtype: bool
        """
        return self._tax_supported

    @tax_supported.setter
    def tax_supported(self, tax_supported):
        """Sets the tax_supported of this Country.

        True if tax calculation supported for this country.

        :param tax_supported: The tax_supported of this Country.
        :type tax_supported: bool
        """

        self._tax_supported = tax_supported
