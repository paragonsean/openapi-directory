# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ListTransactionsIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, filter_text: str=None, format: str=None, has_note: bool=None, invoice_number: str=None, key_or_custom_id: str=None, limit: int=None, offset: int=None, order_date_from: str=None, order_date_to: str=None, original_transaction_key: str=None, sort_reverse: bool=None, statuses: str=None, tax_country_code: str=None, tax_country_codes: str=None, total_amount_greater_than: str=None, total_amount_less_than: str=None):
        """ListTransactionsIn - a model defined in OpenAPI

        :param currency_code: The currency_code of this ListTransactionsIn.
        :param filter_text: The filter_text of this ListTransactionsIn.
        :param format: The format of this ListTransactionsIn.
        :param has_note: The has_note of this ListTransactionsIn.
        :param invoice_number: The invoice_number of this ListTransactionsIn.
        :param key_or_custom_id: The key_or_custom_id of this ListTransactionsIn.
        :param limit: The limit of this ListTransactionsIn.
        :param offset: The offset of this ListTransactionsIn.
        :param order_date_from: The order_date_from of this ListTransactionsIn.
        :param order_date_to: The order_date_to of this ListTransactionsIn.
        :param original_transaction_key: The original_transaction_key of this ListTransactionsIn.
        :param sort_reverse: The sort_reverse of this ListTransactionsIn.
        :param statuses: The statuses of this ListTransactionsIn.
        :param tax_country_code: The tax_country_code of this ListTransactionsIn.
        :param tax_country_codes: The tax_country_codes of this ListTransactionsIn.
        :param total_amount_greater_than: The total_amount_greater_than of this ListTransactionsIn.
        :param total_amount_less_than: The total_amount_less_than of this ListTransactionsIn.
        """
        self.openapi_types = {
            'currency_code': str,
            'filter_text': str,
            'format': str,
            'has_note': bool,
            'invoice_number': str,
            'key_or_custom_id': str,
            'limit': int,
            'offset': int,
            'order_date_from': str,
            'order_date_to': str,
            'original_transaction_key': str,
            'sort_reverse': bool,
            'statuses': str,
            'tax_country_code': str,
            'tax_country_codes': str,
            'total_amount_greater_than': str,
            'total_amount_less_than': str
        }

        self.attribute_map = {
            'currency_code': 'currency_code',
            'filter_text': 'filter_text',
            'format': 'format',
            'has_note': 'has_note',
            'invoice_number': 'invoice_number',
            'key_or_custom_id': 'key_or_custom_id',
            'limit': 'limit',
            'offset': 'offset',
            'order_date_from': 'order_date_from',
            'order_date_to': 'order_date_to',
            'original_transaction_key': 'original_transaction_key',
            'sort_reverse': 'sort_reverse',
            'statuses': 'statuses',
            'tax_country_code': 'tax_country_code',
            'tax_country_codes': 'tax_country_codes',
            'total_amount_greater_than': 'total_amount_greater_than',
            'total_amount_less_than': 'total_amount_less_than'
        }

        self._currency_code = currency_code
        self._filter_text = filter_text
        self._format = format
        self._has_note = has_note
        self._invoice_number = invoice_number
        self._key_or_custom_id = key_or_custom_id
        self._limit = limit
        self._offset = offset
        self._order_date_from = order_date_from
        self._order_date_to = order_date_to
        self._original_transaction_key = original_transaction_key
        self._sort_reverse = sort_reverse
        self._statuses = statuses
        self._tax_country_code = tax_country_code
        self._tax_country_codes = tax_country_codes
        self._total_amount_greater_than = total_amount_greater_than
        self._total_amount_less_than = total_amount_less_than

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ListTransactionsIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The listTransactionsIn of this ListTransactionsIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this ListTransactionsIn.

        Three letter ISO currency code.

        :return: The currency_code of this ListTransactionsIn.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ListTransactionsIn.

        Three letter ISO currency code.

        :param currency_code: The currency_code of this ListTransactionsIn.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def filter_text(self):
        """Gets the filter_text of this ListTransactionsIn.

        Filtering expression

        :return: The filter_text of this ListTransactionsIn.
        :rtype: str
        """
        return self._filter_text

    @filter_text.setter
    def filter_text(self, filter_text):
        """Sets the filter_text of this ListTransactionsIn.

        Filtering expression

        :param filter_text: The filter_text of this ListTransactionsIn.
        :type filter_text: str
        """

        self._filter_text = filter_text

    @property
    def format(self):
        """Gets the format of this ListTransactionsIn.

        Output format - supports 'csv' value for this operation.

        :return: The format of this ListTransactionsIn.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ListTransactionsIn.

        Output format - supports 'csv' value for this operation.

        :param format: The format of this ListTransactionsIn.
        :type format: str
        """

        self._format = format

    @property
    def has_note(self):
        """Gets the has_note of this ListTransactionsIn.

        Return only transactions with a note field set.

        :return: The has_note of this ListTransactionsIn.
        :rtype: bool
        """
        return self._has_note

    @has_note.setter
    def has_note(self, has_note):
        """Sets the has_note of this ListTransactionsIn.

        Return only transactions with a note field set.

        :param has_note: The has_note of this ListTransactionsIn.
        :type has_note: bool
        """

        self._has_note = has_note

    @property
    def invoice_number(self):
        """Gets the invoice_number of this ListTransactionsIn.

        Transaction invoice number.

        :return: The invoice_number of this ListTransactionsIn.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this ListTransactionsIn.

        Transaction invoice number.

        :param invoice_number: The invoice_number of this ListTransactionsIn.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def key_or_custom_id(self):
        """Gets the key_or_custom_id of this ListTransactionsIn.

        Taxamo provided transaction key or custom id

        :return: The key_or_custom_id of this ListTransactionsIn.
        :rtype: str
        """
        return self._key_or_custom_id

    @key_or_custom_id.setter
    def key_or_custom_id(self, key_or_custom_id):
        """Sets the key_or_custom_id of this ListTransactionsIn.

        Taxamo provided transaction key or custom id

        :param key_or_custom_id: The key_or_custom_id of this ListTransactionsIn.
        :type key_or_custom_id: str
        """

        self._key_or_custom_id = key_or_custom_id

    @property
    def limit(self):
        """Gets the limit of this ListTransactionsIn.

        Limit (no more than 1000, defaults to 100).

        :return: The limit of this ListTransactionsIn.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit):
        """Sets the limit of this ListTransactionsIn.

        Limit (no more than 1000, defaults to 100).

        :param limit: The limit of this ListTransactionsIn.
        :type limit: int
        """

        self._limit = limit

    @property
    def offset(self):
        """Gets the offset of this ListTransactionsIn.

        Offset

        :return: The offset of this ListTransactionsIn.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this ListTransactionsIn.

        Offset

        :param offset: The offset of this ListTransactionsIn.
        :type offset: int
        """

        self._offset = offset

    @property
    def order_date_from(self):
        """Gets the order_date_from of this ListTransactionsIn.

        Order date from in yyyy-MM-dd format.

        :return: The order_date_from of this ListTransactionsIn.
        :rtype: str
        """
        return self._order_date_from

    @order_date_from.setter
    def order_date_from(self, order_date_from):
        """Sets the order_date_from of this ListTransactionsIn.

        Order date from in yyyy-MM-dd format.

        :param order_date_from: The order_date_from of this ListTransactionsIn.
        :type order_date_from: str
        """

        self._order_date_from = order_date_from

    @property
    def order_date_to(self):
        """Gets the order_date_to of this ListTransactionsIn.

        Order date to in yyyy-MM-dd format.

        :return: The order_date_to of this ListTransactionsIn.
        :rtype: str
        """
        return self._order_date_to

    @order_date_to.setter
    def order_date_to(self, order_date_to):
        """Sets the order_date_to of this ListTransactionsIn.

        Order date to in yyyy-MM-dd format.

        :param order_date_to: The order_date_to of this ListTransactionsIn.
        :type order_date_to: str
        """

        self._order_date_to = order_date_to

    @property
    def original_transaction_key(self):
        """Gets the original_transaction_key of this ListTransactionsIn.

        Taxamo provided original transaction key

        :return: The original_transaction_key of this ListTransactionsIn.
        :rtype: str
        """
        return self._original_transaction_key

    @original_transaction_key.setter
    def original_transaction_key(self, original_transaction_key):
        """Sets the original_transaction_key of this ListTransactionsIn.

        Taxamo provided original transaction key

        :param original_transaction_key: The original_transaction_key of this ListTransactionsIn.
        :type original_transaction_key: str
        """

        self._original_transaction_key = original_transaction_key

    @property
    def sort_reverse(self):
        """Gets the sort_reverse of this ListTransactionsIn.

        If true, results are sorted in descending order.

        :return: The sort_reverse of this ListTransactionsIn.
        :rtype: bool
        """
        return self._sort_reverse

    @sort_reverse.setter
    def sort_reverse(self, sort_reverse):
        """Sets the sort_reverse of this ListTransactionsIn.

        If true, results are sorted in descending order.

        :param sort_reverse: The sort_reverse of this ListTransactionsIn.
        :type sort_reverse: bool
        """

        self._sort_reverse = sort_reverse

    @property
    def statuses(self):
        """Gets the statuses of this ListTransactionsIn.

        Comma separated list of of transaction statuses. 'N' - unconfirmed transaction, 'C' - confirmed transaction.

        :return: The statuses of this ListTransactionsIn.
        :rtype: str
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this ListTransactionsIn.

        Comma separated list of of transaction statuses. 'N' - unconfirmed transaction, 'C' - confirmed transaction.

        :param statuses: The statuses of this ListTransactionsIn.
        :type statuses: str
        """

        self._statuses = statuses

    @property
    def tax_country_code(self):
        """Gets the tax_country_code of this ListTransactionsIn.

        Two letter ISO tax country code.

        :return: The tax_country_code of this ListTransactionsIn.
        :rtype: str
        """
        return self._tax_country_code

    @tax_country_code.setter
    def tax_country_code(self, tax_country_code):
        """Sets the tax_country_code of this ListTransactionsIn.

        Two letter ISO tax country code.

        :param tax_country_code: The tax_country_code of this ListTransactionsIn.
        :type tax_country_code: str
        """

        self._tax_country_code = tax_country_code

    @property
    def tax_country_codes(self):
        """Gets the tax_country_codes of this ListTransactionsIn.

        Comma separated list of two letter ISO tax country codes.

        :return: The tax_country_codes of this ListTransactionsIn.
        :rtype: str
        """
        return self._tax_country_codes

    @tax_country_codes.setter
    def tax_country_codes(self, tax_country_codes):
        """Sets the tax_country_codes of this ListTransactionsIn.

        Comma separated list of two letter ISO tax country codes.

        :param tax_country_codes: The tax_country_codes of this ListTransactionsIn.
        :type tax_country_codes: str
        """

        self._tax_country_codes = tax_country_codes

    @property
    def total_amount_greater_than(self):
        """Gets the total_amount_greater_than of this ListTransactionsIn.

        Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.

        :return: The total_amount_greater_than of this ListTransactionsIn.
        :rtype: str
        """
        return self._total_amount_greater_than

    @total_amount_greater_than.setter
    def total_amount_greater_than(self, total_amount_greater_than):
        """Sets the total_amount_greater_than of this ListTransactionsIn.

        Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.

        :param total_amount_greater_than: The total_amount_greater_than of this ListTransactionsIn.
        :type total_amount_greater_than: str
        """

        self._total_amount_greater_than = total_amount_greater_than

    @property
    def total_amount_less_than(self):
        """Gets the total_amount_less_than of this ListTransactionsIn.

        Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.

        :return: The total_amount_less_than of this ListTransactionsIn.
        :rtype: str
        """
        return self._total_amount_less_than

    @total_amount_less_than.setter
    def total_amount_less_than(self, total_amount_less_than):
        """Sets the total_amount_less_than of this ListTransactionsIn.

        Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.

        :param total_amount_less_than: The total_amount_less_than of this ListTransactionsIn.
        :type total_amount_less_than: str
        """

        self._total_amount_less_than = total_amount_less_than
