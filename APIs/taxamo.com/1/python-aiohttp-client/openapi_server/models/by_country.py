# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ByCountry(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, tax_country_code: str=None, tax_country_name: str=None, value: float=None):
        """ByCountry - a model defined in OpenAPI

        :param currency_code: The currency_code of this ByCountry.
        :param tax_country_code: The tax_country_code of this ByCountry.
        :param tax_country_name: The tax_country_name of this ByCountry.
        :param value: The value of this ByCountry.
        """
        self.openapi_types = {
            'currency_code': str,
            'tax_country_code': str,
            'tax_country_name': str,
            'value': float
        }

        self.attribute_map = {
            'currency_code': 'currency_code',
            'tax_country_code': 'tax_country_code',
            'tax_country_name': 'tax_country_name',
            'value': 'value'
        }

        self._currency_code = currency_code
        self._tax_country_code = tax_country_code
        self._tax_country_name = tax_country_name
        self._value = value

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ByCountry':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The by_country of this ByCountry.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this ByCountry.

        Three-letter ISO currency code.

        :return: The currency_code of this ByCountry.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this ByCountry.

        Three-letter ISO currency code.

        :param currency_code: The currency_code of this ByCountry.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def tax_country_code(self):
        """Gets the tax_country_code of this ByCountry.

        Two letter ISO country code.

        :return: The tax_country_code of this ByCountry.
        :rtype: str
        """
        return self._tax_country_code

    @tax_country_code.setter
    def tax_country_code(self, tax_country_code):
        """Sets the tax_country_code of this ByCountry.

        Two letter ISO country code.

        :param tax_country_code: The tax_country_code of this ByCountry.
        :type tax_country_code: str
        """

        self._tax_country_code = tax_country_code

    @property
    def tax_country_name(self):
        """Gets the tax_country_name of this ByCountry.

        Country name

        :return: The tax_country_name of this ByCountry.
        :rtype: str
        """
        return self._tax_country_name

    @tax_country_name.setter
    def tax_country_name(self, tax_country_name):
        """Sets the tax_country_name of this ByCountry.

        Country name

        :param tax_country_name: The tax_country_name of this ByCountry.
        :type tax_country_name: str
        """

        self._tax_country_name = tax_country_name

    @property
    def value(self):
        """Gets the value of this ByCountry.

        Tax amount

        :return: The value of this ByCountry.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this ByCountry.

        Tax amount

        :param value: The value of this ByCountry.
        :type value: float
        """

        self._value = value
