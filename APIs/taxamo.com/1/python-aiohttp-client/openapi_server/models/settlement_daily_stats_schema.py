# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class SettlementDailyStatsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, b2b: int=None, b2c: int=None, count: int=None, day: str=None, day_raw: str=None, eu_b2b: int=None, eu_taxed: int=None, eu_total: int=None, untaxed: int=None):
        """SettlementDailyStatsSchema - a model defined in OpenAPI

        :param b2b: The b2b of this SettlementDailyStatsSchema.
        :param b2c: The b2c of this SettlementDailyStatsSchema.
        :param count: The count of this SettlementDailyStatsSchema.
        :param day: The day of this SettlementDailyStatsSchema.
        :param day_raw: The day_raw of this SettlementDailyStatsSchema.
        :param eu_b2b: The eu_b2b of this SettlementDailyStatsSchema.
        :param eu_taxed: The eu_taxed of this SettlementDailyStatsSchema.
        :param eu_total: The eu_total of this SettlementDailyStatsSchema.
        :param untaxed: The untaxed of this SettlementDailyStatsSchema.
        """
        self.openapi_types = {
            'b2b': int,
            'b2c': int,
            'count': int,
            'day': str,
            'day_raw': str,
            'eu_b2b': int,
            'eu_taxed': int,
            'eu_total': int,
            'untaxed': int
        }

        self.attribute_map = {
            'b2b': 'b2b',
            'b2c': 'b2c',
            'count': 'count',
            'day': 'day',
            'day_raw': 'day_raw',
            'eu_b2b': 'eu_b2b',
            'eu_taxed': 'eu_taxed',
            'eu_total': 'eu_total',
            'untaxed': 'untaxed'
        }

        self._b2b = b2b
        self._b2c = b2c
        self._count = count
        self._day = day
        self._day_raw = day_raw
        self._eu_b2b = eu_b2b
        self._eu_taxed = eu_taxed
        self._eu_total = eu_total
        self._untaxed = untaxed

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SettlementDailyStatsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The settlement_daily_stats_schema of this SettlementDailyStatsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def b2b(self):
        """Gets the b2b of this SettlementDailyStatsSchema.

        B2B transaction count.

        :return: The b2b of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._b2b

    @b2b.setter
    def b2b(self, b2b):
        """Sets the b2b of this SettlementDailyStatsSchema.

        B2B transaction count.

        :param b2b: The b2b of this SettlementDailyStatsSchema.
        :type b2b: int
        """

        self._b2b = b2b

    @property
    def b2c(self):
        """Gets the b2c of this SettlementDailyStatsSchema.

        B2C transaction count.

        :return: The b2c of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._b2c

    @b2c.setter
    def b2c(self, b2c):
        """Sets the b2c of this SettlementDailyStatsSchema.

        B2C transaction count.

        :param b2c: The b2c of this SettlementDailyStatsSchema.
        :type b2c: int
        """

        self._b2c = b2c

    @property
    def count(self):
        """Gets the count of this SettlementDailyStatsSchema.

        Total transaction count.

        :return: The count of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count):
        """Sets the count of this SettlementDailyStatsSchema.

        Total transaction count.

        :param count: The count of this SettlementDailyStatsSchema.
        :type count: int
        """

        self._count = count

    @property
    def day(self):
        """Gets the day of this SettlementDailyStatsSchema.

        Date for stats in yyyy-MM-dd format.

        :return: The day of this SettlementDailyStatsSchema.
        :rtype: str
        """
        return self._day

    @day.setter
    def day(self, day):
        """Sets the day of this SettlementDailyStatsSchema.

        Date for stats in yyyy-MM-dd format.

        :param day: The day of this SettlementDailyStatsSchema.
        :type day: str
        """

        self._day = day

    @property
    def day_raw(self):
        """Gets the day_raw of this SettlementDailyStatsSchema.

        Date for stats in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :return: The day_raw of this SettlementDailyStatsSchema.
        :rtype: str
        """
        return self._day_raw

    @day_raw.setter
    def day_raw(self, day_raw):
        """Sets the day_raw of this SettlementDailyStatsSchema.

        Date for stats in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :param day_raw: The day_raw of this SettlementDailyStatsSchema.
        :type day_raw: str
        """

        self._day_raw = day_raw

    @property
    def eu_b2b(self):
        """Gets the eu_b2b of this SettlementDailyStatsSchema.

        Total EU B2B transaction count.

        :return: The eu_b2b of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._eu_b2b

    @eu_b2b.setter
    def eu_b2b(self, eu_b2b):
        """Sets the eu_b2b of this SettlementDailyStatsSchema.

        Total EU B2B transaction count.

        :param eu_b2b: The eu_b2b of this SettlementDailyStatsSchema.
        :type eu_b2b: int
        """

        self._eu_b2b = eu_b2b

    @property
    def eu_taxed(self):
        """Gets the eu_taxed of this SettlementDailyStatsSchema.

        Total EU Taxed transaction count.

        :return: The eu_taxed of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._eu_taxed

    @eu_taxed.setter
    def eu_taxed(self, eu_taxed):
        """Sets the eu_taxed of this SettlementDailyStatsSchema.

        Total EU Taxed transaction count.

        :param eu_taxed: The eu_taxed of this SettlementDailyStatsSchema.
        :type eu_taxed: int
        """

        self._eu_taxed = eu_taxed

    @property
    def eu_total(self):
        """Gets the eu_total of this SettlementDailyStatsSchema.

        Total EU transaction count.

        :return: The eu_total of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._eu_total

    @eu_total.setter
    def eu_total(self, eu_total):
        """Sets the eu_total of this SettlementDailyStatsSchema.

        Total EU transaction count.

        :param eu_total: The eu_total of this SettlementDailyStatsSchema.
        :type eu_total: int
        """

        self._eu_total = eu_total

    @property
    def untaxed(self):
        """Gets the untaxed of this SettlementDailyStatsSchema.

        Untaxed transaction count.

        :return: The untaxed of this SettlementDailyStatsSchema.
        :rtype: int
        """
        return self._untaxed

    @untaxed.setter
    def untaxed(self, untaxed):
        """Sets the untaxed of this SettlementDailyStatsSchema.

        Untaxed transaction count.

        :param untaxed: The untaxed of this SettlementDailyStatsSchema.
        :type untaxed: int
        """

        self._untaxed = untaxed
