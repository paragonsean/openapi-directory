# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Report(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, country_code: str=None, country_name: str=None, country_subdivision: str=None, currency_code: str=None, skip_moss: bool=None, tax_amount: float=None, tax_rate: float=None, tax_region: str=None):
        """Report - a model defined in OpenAPI

        :param amount: The amount of this Report.
        :param country_code: The country_code of this Report.
        :param country_name: The country_name of this Report.
        :param country_subdivision: The country_subdivision of this Report.
        :param currency_code: The currency_code of this Report.
        :param skip_moss: The skip_moss of this Report.
        :param tax_amount: The tax_amount of this Report.
        :param tax_rate: The tax_rate of this Report.
        :param tax_region: The tax_region of this Report.
        """
        self.openapi_types = {
            'amount': float,
            'country_code': str,
            'country_name': str,
            'country_subdivision': str,
            'currency_code': str,
            'skip_moss': bool,
            'tax_amount': float,
            'tax_rate': float,
            'tax_region': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'country_code': 'country_code',
            'country_name': 'country_name',
            'country_subdivision': 'country_subdivision',
            'currency_code': 'currency_code',
            'skip_moss': 'skip_moss',
            'tax_amount': 'tax_amount',
            'tax_rate': 'tax_rate',
            'tax_region': 'tax_region'
        }

        self._amount = amount
        self._country_code = country_code
        self._country_name = country_name
        self._country_subdivision = country_subdivision
        self._currency_code = currency_code
        self._skip_moss = skip_moss
        self._tax_amount = tax_amount
        self._tax_rate = tax_rate
        self._tax_region = tax_region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Report':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The report of this Report.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Report.

        Amount w/o tax

        :return: The amount of this Report.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Report.

        Amount w/o tax

        :param amount: The amount of this Report.
        :type amount: float
        """

        self._amount = amount

    @property
    def country_code(self):
        """Gets the country_code of this Report.

        Two letter ISO country code.

        :return: The country_code of this Report.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this Report.

        Two letter ISO country code.

        :param country_code: The country_code of this Report.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def country_name(self):
        """Gets the country_name of this Report.

        Country name

        :return: The country_name of this Report.
        :rtype: str
        """
        return self._country_name

    @country_name.setter
    def country_name(self, country_name):
        """Sets the country_name of this Report.

        Country name

        :param country_name: The country_name of this Report.
        :type country_name: str
        """

        self._country_name = country_name

    @property
    def country_subdivision(self):
        """Gets the country_subdivision of this Report.

        Country subdivision (e.g. state or provice or county)

        :return: The country_subdivision of this Report.
        :rtype: str
        """
        return self._country_subdivision

    @country_subdivision.setter
    def country_subdivision(self, country_subdivision):
        """Sets the country_subdivision of this Report.

        Country subdivision (e.g. state or provice or county)

        :param country_subdivision: The country_subdivision of this Report.
        :type country_subdivision: str
        """

        self._country_subdivision = country_subdivision

    @property
    def currency_code(self):
        """Gets the currency_code of this Report.

        Three-letter ISO currency code.

        :return: The currency_code of this Report.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Report.

        Three-letter ISO currency code.

        :param currency_code: The currency_code of this Report.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def skip_moss(self):
        """Gets the skip_moss of this Report.

        If true, this line should not be entered into MOSS and is provided for informative purposes only. For example because the country is the same as MOSS registration country and merchant country.

        :return: The skip_moss of this Report.
        :rtype: bool
        """
        return self._skip_moss

    @skip_moss.setter
    def skip_moss(self, skip_moss):
        """Sets the skip_moss of this Report.

        If true, this line should not be entered into MOSS and is provided for informative purposes only. For example because the country is the same as MOSS registration country and merchant country.

        :param skip_moss: The skip_moss of this Report.
        :type skip_moss: bool
        """

        self._skip_moss = skip_moss

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Report.

        Tax amount

        :return: The tax_amount of this Report.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Report.

        Tax amount

        :param tax_amount: The tax_amount of this Report.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Report.

        Tax rate

        :return: The tax_rate of this Report.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Report.

        Tax rate

        :param tax_rate: The tax_rate of this Report.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def tax_region(self):
        """Gets the tax_region of this Report.

        Tax region key

        :return: The tax_region of this Report.
        :rtype: str
        """
        return self._tax_region

    @tax_region.setter
    def tax_region(self, tax_region):
        """Sets the tax_region of this Report.

        Tax region key

        :param tax_region: The tax_region of this Report.
        :type tax_region: str
        """

        self._tax_region = tax_region
