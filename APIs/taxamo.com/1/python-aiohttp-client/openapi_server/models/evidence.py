# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.evidence_schema import EvidenceSchema
from openapi_server import util


class Evidence(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, by_2003_rules: EvidenceSchema=None, by_billing: EvidenceSchema=None, by_cc: EvidenceSchema=None, by_ip: EvidenceSchema=None, by_payment_method: EvidenceSchema=None, by_tax_number: EvidenceSchema=None, by_token: EvidenceSchema=None, forced: EvidenceSchema=None, guessed_from_ip: EvidenceSchema=None, other_commercially_relevant_info: EvidenceSchema=None, self_declaration: EvidenceSchema=None):
        """Evidence - a model defined in OpenAPI

        :param by_2003_rules: The by_2003_rules of this Evidence.
        :param by_billing: The by_billing of this Evidence.
        :param by_cc: The by_cc of this Evidence.
        :param by_ip: The by_ip of this Evidence.
        :param by_payment_method: The by_payment_method of this Evidence.
        :param by_tax_number: The by_tax_number of this Evidence.
        :param by_token: The by_token of this Evidence.
        :param forced: The forced of this Evidence.
        :param guessed_from_ip: The guessed_from_ip of this Evidence.
        :param other_commercially_relevant_info: The other_commercially_relevant_info of this Evidence.
        :param self_declaration: The self_declaration of this Evidence.
        """
        self.openapi_types = {
            'by_2003_rules': EvidenceSchema,
            'by_billing': EvidenceSchema,
            'by_cc': EvidenceSchema,
            'by_ip': EvidenceSchema,
            'by_payment_method': EvidenceSchema,
            'by_tax_number': EvidenceSchema,
            'by_token': EvidenceSchema,
            'forced': EvidenceSchema,
            'guessed_from_ip': EvidenceSchema,
            'other_commercially_relevant_info': EvidenceSchema,
            'self_declaration': EvidenceSchema
        }

        self.attribute_map = {
            'by_2003_rules': 'by_2003_rules',
            'by_billing': 'by_billing',
            'by_cc': 'by_cc',
            'by_ip': 'by_ip',
            'by_payment_method': 'by_payment_method',
            'by_tax_number': 'by_tax_number',
            'by_token': 'by_token',
            'forced': 'forced',
            'guessed_from_ip': 'guessed_from_ip',
            'other_commercially_relevant_info': 'other_commercially_relevant_info',
            'self_declaration': 'self_declaration'
        }

        self._by_2003_rules = by_2003_rules
        self._by_billing = by_billing
        self._by_cc = by_cc
        self._by_ip = by_ip
        self._by_payment_method = by_payment_method
        self._by_tax_number = by_tax_number
        self._by_token = by_token
        self._forced = forced
        self._guessed_from_ip = guessed_from_ip
        self._other_commercially_relevant_info = other_commercially_relevant_info
        self._self_declaration = self_declaration

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Evidence':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The evidence of this Evidence.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def by_2003_rules(self):
        """Gets the by_2003_rules of this Evidence.


        :return: The by_2003_rules of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_2003_rules

    @by_2003_rules.setter
    def by_2003_rules(self, by_2003_rules):
        """Sets the by_2003_rules of this Evidence.


        :param by_2003_rules: The by_2003_rules of this Evidence.
        :type by_2003_rules: EvidenceSchema
        """

        self._by_2003_rules = by_2003_rules

    @property
    def by_billing(self):
        """Gets the by_billing of this Evidence.


        :return: The by_billing of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_billing

    @by_billing.setter
    def by_billing(self, by_billing):
        """Sets the by_billing of this Evidence.


        :param by_billing: The by_billing of this Evidence.
        :type by_billing: EvidenceSchema
        """

        self._by_billing = by_billing

    @property
    def by_cc(self):
        """Gets the by_cc of this Evidence.


        :return: The by_cc of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_cc

    @by_cc.setter
    def by_cc(self, by_cc):
        """Sets the by_cc of this Evidence.


        :param by_cc: The by_cc of this Evidence.
        :type by_cc: EvidenceSchema
        """

        self._by_cc = by_cc

    @property
    def by_ip(self):
        """Gets the by_ip of this Evidence.


        :return: The by_ip of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_ip

    @by_ip.setter
    def by_ip(self, by_ip):
        """Sets the by_ip of this Evidence.


        :param by_ip: The by_ip of this Evidence.
        :type by_ip: EvidenceSchema
        """

        self._by_ip = by_ip

    @property
    def by_payment_method(self):
        """Gets the by_payment_method of this Evidence.


        :return: The by_payment_method of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_payment_method

    @by_payment_method.setter
    def by_payment_method(self, by_payment_method):
        """Sets the by_payment_method of this Evidence.


        :param by_payment_method: The by_payment_method of this Evidence.
        :type by_payment_method: EvidenceSchema
        """

        self._by_payment_method = by_payment_method

    @property
    def by_tax_number(self):
        """Gets the by_tax_number of this Evidence.


        :return: The by_tax_number of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_tax_number

    @by_tax_number.setter
    def by_tax_number(self, by_tax_number):
        """Sets the by_tax_number of this Evidence.


        :param by_tax_number: The by_tax_number of this Evidence.
        :type by_tax_number: EvidenceSchema
        """

        self._by_tax_number = by_tax_number

    @property
    def by_token(self):
        """Gets the by_token of this Evidence.


        :return: The by_token of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._by_token

    @by_token.setter
    def by_token(self, by_token):
        """Sets the by_token of this Evidence.


        :param by_token: The by_token of this Evidence.
        :type by_token: EvidenceSchema
        """

        self._by_token = by_token

    @property
    def forced(self):
        """Gets the forced of this Evidence.


        :return: The forced of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._forced

    @forced.setter
    def forced(self, forced):
        """Sets the forced of this Evidence.


        :param forced: The forced of this Evidence.
        :type forced: EvidenceSchema
        """

        self._forced = forced

    @property
    def guessed_from_ip(self):
        """Gets the guessed_from_ip of this Evidence.


        :return: The guessed_from_ip of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._guessed_from_ip

    @guessed_from_ip.setter
    def guessed_from_ip(self, guessed_from_ip):
        """Sets the guessed_from_ip of this Evidence.


        :param guessed_from_ip: The guessed_from_ip of this Evidence.
        :type guessed_from_ip: EvidenceSchema
        """

        self._guessed_from_ip = guessed_from_ip

    @property
    def other_commercially_relevant_info(self):
        """Gets the other_commercially_relevant_info of this Evidence.


        :return: The other_commercially_relevant_info of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._other_commercially_relevant_info

    @other_commercially_relevant_info.setter
    def other_commercially_relevant_info(self, other_commercially_relevant_info):
        """Sets the other_commercially_relevant_info of this Evidence.


        :param other_commercially_relevant_info: The other_commercially_relevant_info of this Evidence.
        :type other_commercially_relevant_info: EvidenceSchema
        """

        self._other_commercially_relevant_info = other_commercially_relevant_info

    @property
    def self_declaration(self):
        """Gets the self_declaration of this Evidence.


        :return: The self_declaration of this Evidence.
        :rtype: EvidenceSchema
        """
        return self._self_declaration

    @self_declaration.setter
    def self_declaration(self, self_declaration):
        """Sets the self_declaration of this Evidence.


        :param self_declaration: The self_declaration of this Evidence.
        :type self_declaration: EvidenceSchema
        """

        self._self_declaration = self_declaration
