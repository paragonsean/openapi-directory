# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CurrencySchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, description: str=None, isocode: str=None, isonum: int=None, minorunits: int=None):
        """CurrencySchema - a model defined in OpenAPI

        :param code: The code of this CurrencySchema.
        :param description: The description of this CurrencySchema.
        :param isocode: The isocode of this CurrencySchema.
        :param isonum: The isonum of this CurrencySchema.
        :param minorunits: The minorunits of this CurrencySchema.
        """
        self.openapi_types = {
            'code': str,
            'description': str,
            'isocode': str,
            'isonum': int,
            'minorunits': int
        }

        self.attribute_map = {
            'code': 'code',
            'description': 'description',
            'isocode': 'isocode',
            'isonum': 'isonum',
            'minorunits': 'minorunits'
        }

        self._code = code
        self._description = description
        self._isocode = isocode
        self._isonum = isonum
        self._minorunits = minorunits

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CurrencySchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The currency_schema of this CurrencySchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this CurrencySchema.

        Currency 3-letter ISO code.

        :return: The code of this CurrencySchema.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CurrencySchema.

        Currency 3-letter ISO code.

        :param code: The code of this CurrencySchema.
        :type code: str
        """

        self._code = code

    @property
    def description(self):
        """Gets the description of this CurrencySchema.

        Currency description.

        :return: The description of this CurrencySchema.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CurrencySchema.

        Currency description.

        :param description: The description of this CurrencySchema.
        :type description: str
        """

        self._description = description

    @property
    def isocode(self):
        """Gets the isocode of this CurrencySchema.

        Currency 3-letter ISO code.

        :return: The isocode of this CurrencySchema.
        :rtype: str
        """
        return self._isocode

    @isocode.setter
    def isocode(self, isocode):
        """Sets the isocode of this CurrencySchema.

        Currency 3-letter ISO code.

        :param isocode: The isocode of this CurrencySchema.
        :type isocode: str
        """

        self._isocode = isocode

    @property
    def isonum(self):
        """Gets the isonum of this CurrencySchema.

        Currency iso numeric code.

        :return: The isonum of this CurrencySchema.
        :rtype: int
        """
        return self._isonum

    @isonum.setter
    def isonum(self, isonum):
        """Sets the isonum of this CurrencySchema.

        Currency iso numeric code.

        :param isonum: The isonum of this CurrencySchema.
        :type isonum: int
        """

        self._isonum = isonum

    @property
    def minorunits(self):
        """Gets the minorunits of this CurrencySchema.

        Number of minor units for currency.

        :return: The minorunits of this CurrencySchema.
        :rtype: int
        """
        return self._minorunits

    @minorunits.setter
    def minorunits(self, minorunits):
        """Sets the minorunits of this CurrencySchema.

        Number of minor units for currency.

        :param minorunits: The minorunits of this CurrencySchema.
        :type minorunits: int
        """

        self._minorunits = minorunits
