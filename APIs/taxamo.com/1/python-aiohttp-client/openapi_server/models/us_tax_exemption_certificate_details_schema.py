# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.us_tax_exempt_state import UsTaxExemptState
from openapi_server.models.us_tax_id import UsTaxId
from openapi_server import util


class UsTaxExemptionCertificateDetailsSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, exempt_states: List[UsTaxExemptState]=None, purchaser_address1: str=None, purchaser_address2: str=None, purchaser_business_type: str=None, purchaser_business_type_other_value: str=None, purchaser_city: str=None, purchaser_exemption_reason: str=None, purchaser_exemption_reason_value: str=None, purchaser_first_name: str=None, purchaser_last_name: str=None, purchaser_state: str=None, purchaser_tax_id: UsTaxId=None, purchaser_title: str=None, purchaser_zip: str=None, single_purchase: bool=None, single_purchase_order_identifier: str=None):
        """UsTaxExemptionCertificateDetailsSchema - a model defined in OpenAPI

        :param exempt_states: The exempt_states of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_address1: The purchaser_address1 of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_address2: The purchaser_address2 of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_business_type: The purchaser_business_type of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_business_type_other_value: The purchaser_business_type_other_value of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_city: The purchaser_city of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_exemption_reason: The purchaser_exemption_reason of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_exemption_reason_value: The purchaser_exemption_reason_value of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_first_name: The purchaser_first_name of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_last_name: The purchaser_last_name of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_state: The purchaser_state of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_tax_id: The purchaser_tax_id of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_title: The purchaser_title of this UsTaxExemptionCertificateDetailsSchema.
        :param purchaser_zip: The purchaser_zip of this UsTaxExemptionCertificateDetailsSchema.
        :param single_purchase: The single_purchase of this UsTaxExemptionCertificateDetailsSchema.
        :param single_purchase_order_identifier: The single_purchase_order_identifier of this UsTaxExemptionCertificateDetailsSchema.
        """
        self.openapi_types = {
            'exempt_states': List[UsTaxExemptState],
            'purchaser_address1': str,
            'purchaser_address2': str,
            'purchaser_business_type': str,
            'purchaser_business_type_other_value': str,
            'purchaser_city': str,
            'purchaser_exemption_reason': str,
            'purchaser_exemption_reason_value': str,
            'purchaser_first_name': str,
            'purchaser_last_name': str,
            'purchaser_state': str,
            'purchaser_tax_id': UsTaxId,
            'purchaser_title': str,
            'purchaser_zip': str,
            'single_purchase': bool,
            'single_purchase_order_identifier': str
        }

        self.attribute_map = {
            'exempt_states': 'exempt_states',
            'purchaser_address1': 'purchaser_address1',
            'purchaser_address2': 'purchaser_address2',
            'purchaser_business_type': 'purchaser_business_type',
            'purchaser_business_type_other_value': 'purchaser_business_type_other_value',
            'purchaser_city': 'purchaser_city',
            'purchaser_exemption_reason': 'purchaser_exemption_reason',
            'purchaser_exemption_reason_value': 'purchaser_exemption_reason_value',
            'purchaser_first_name': 'purchaser_first_name',
            'purchaser_last_name': 'purchaser_last_name',
            'purchaser_state': 'purchaser_state',
            'purchaser_tax_id': 'purchaser_tax_id',
            'purchaser_title': 'purchaser_title',
            'purchaser_zip': 'purchaser_zip',
            'single_purchase': 'single_purchase',
            'single_purchase_order_identifier': 'single_purchase_order_identifier'
        }

        self._exempt_states = exempt_states
        self._purchaser_address1 = purchaser_address1
        self._purchaser_address2 = purchaser_address2
        self._purchaser_business_type = purchaser_business_type
        self._purchaser_business_type_other_value = purchaser_business_type_other_value
        self._purchaser_city = purchaser_city
        self._purchaser_exemption_reason = purchaser_exemption_reason
        self._purchaser_exemption_reason_value = purchaser_exemption_reason_value
        self._purchaser_first_name = purchaser_first_name
        self._purchaser_last_name = purchaser_last_name
        self._purchaser_state = purchaser_state
        self._purchaser_tax_id = purchaser_tax_id
        self._purchaser_title = purchaser_title
        self._purchaser_zip = purchaser_zip
        self._single_purchase = single_purchase
        self._single_purchase_order_identifier = single_purchase_order_identifier

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsTaxExemptionCertificateDetailsSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The us_tax_exemption_certificate_details_schema of this UsTaxExemptionCertificateDetailsSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def exempt_states(self):
        """Gets the exempt_states of this UsTaxExemptionCertificateDetailsSchema.

        List of states where the certificate is valid.

        :return: The exempt_states of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: List[UsTaxExemptState]
        """
        return self._exempt_states

    @exempt_states.setter
    def exempt_states(self, exempt_states):
        """Sets the exempt_states of this UsTaxExemptionCertificateDetailsSchema.

        List of states where the certificate is valid.

        :param exempt_states: The exempt_states of this UsTaxExemptionCertificateDetailsSchema.
        :type exempt_states: List[UsTaxExemptState]
        """
        if exempt_states is None:
            raise ValueError("Invalid value for `exempt_states`, must not be `None`")

        self._exempt_states = exempt_states

    @property
    def purchaser_address1(self):
        """Gets the purchaser_address1 of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's first address line.

        :return: The purchaser_address1 of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_address1

    @purchaser_address1.setter
    def purchaser_address1(self, purchaser_address1):
        """Sets the purchaser_address1 of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's first address line.

        :param purchaser_address1: The purchaser_address1 of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_address1: str
        """
        if purchaser_address1 is None:
            raise ValueError("Invalid value for `purchaser_address1`, must not be `None`")

        self._purchaser_address1 = purchaser_address1

    @property
    def purchaser_address2(self):
        """Gets the purchaser_address2 of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's second address line.

        :return: The purchaser_address2 of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_address2

    @purchaser_address2.setter
    def purchaser_address2(self, purchaser_address2):
        """Sets the purchaser_address2 of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's second address line.

        :param purchaser_address2: The purchaser_address2 of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_address2: str
        """

        self._purchaser_address2 = purchaser_address2

    @property
    def purchaser_business_type(self):
        """Gets the purchaser_business_type of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser business type.

        :return: The purchaser_business_type of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_business_type

    @purchaser_business_type.setter
    def purchaser_business_type(self, purchaser_business_type):
        """Sets the purchaser_business_type of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser business type.

        :param purchaser_business_type: The purchaser_business_type of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_business_type: str
        """
        if purchaser_business_type is None:
            raise ValueError("Invalid value for `purchaser_business_type`, must not be `None`")

        self._purchaser_business_type = purchaser_business_type

    @property
    def purchaser_business_type_other_value(self):
        """Gets the purchaser_business_type_other_value of this UsTaxExemptionCertificateDetailsSchema.

        If business type is other, a short description must be provided.

        :return: The purchaser_business_type_other_value of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_business_type_other_value

    @purchaser_business_type_other_value.setter
    def purchaser_business_type_other_value(self, purchaser_business_type_other_value):
        """Sets the purchaser_business_type_other_value of this UsTaxExemptionCertificateDetailsSchema.

        If business type is other, a short description must be provided.

        :param purchaser_business_type_other_value: The purchaser_business_type_other_value of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_business_type_other_value: str
        """

        self._purchaser_business_type_other_value = purchaser_business_type_other_value

    @property
    def purchaser_city(self):
        """Gets the purchaser_city of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's city.

        :return: The purchaser_city of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_city

    @purchaser_city.setter
    def purchaser_city(self, purchaser_city):
        """Sets the purchaser_city of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's city.

        :param purchaser_city: The purchaser_city of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_city: str
        """
        if purchaser_city is None:
            raise ValueError("Invalid value for `purchaser_city`, must not be `None`")

        self._purchaser_city = purchaser_city

    @property
    def purchaser_exemption_reason(self):
        """Gets the purchaser_exemption_reason of this UsTaxExemptionCertificateDetailsSchema.

        The reason for exemption reason.

        :return: The purchaser_exemption_reason of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_exemption_reason

    @purchaser_exemption_reason.setter
    def purchaser_exemption_reason(self, purchaser_exemption_reason):
        """Sets the purchaser_exemption_reason of this UsTaxExemptionCertificateDetailsSchema.

        The reason for exemption reason.

        :param purchaser_exemption_reason: The purchaser_exemption_reason of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_exemption_reason: str
        """
        if purchaser_exemption_reason is None:
            raise ValueError("Invalid value for `purchaser_exemption_reason`, must not be `None`")

        self._purchaser_exemption_reason = purchaser_exemption_reason

    @property
    def purchaser_exemption_reason_value(self):
        """Gets the purchaser_exemption_reason_value of this UsTaxExemptionCertificateDetailsSchema.

        The value of exemption reason.

        :return: The purchaser_exemption_reason_value of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_exemption_reason_value

    @purchaser_exemption_reason_value.setter
    def purchaser_exemption_reason_value(self, purchaser_exemption_reason_value):
        """Sets the purchaser_exemption_reason_value of this UsTaxExemptionCertificateDetailsSchema.

        The value of exemption reason.

        :param purchaser_exemption_reason_value: The purchaser_exemption_reason_value of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_exemption_reason_value: str
        """
        if purchaser_exemption_reason_value is None:
            raise ValueError("Invalid value for `purchaser_exemption_reason_value`, must not be `None`")

        self._purchaser_exemption_reason_value = purchaser_exemption_reason_value

    @property
    def purchaser_first_name(self):
        """Gets the purchaser_first_name of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's first name.

        :return: The purchaser_first_name of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_first_name

    @purchaser_first_name.setter
    def purchaser_first_name(self, purchaser_first_name):
        """Sets the purchaser_first_name of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's first name.

        :param purchaser_first_name: The purchaser_first_name of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_first_name: str
        """
        if purchaser_first_name is None:
            raise ValueError("Invalid value for `purchaser_first_name`, must not be `None`")

        self._purchaser_first_name = purchaser_first_name

    @property
    def purchaser_last_name(self):
        """Gets the purchaser_last_name of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's last name.

        :return: The purchaser_last_name of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_last_name

    @purchaser_last_name.setter
    def purchaser_last_name(self, purchaser_last_name):
        """Sets the purchaser_last_name of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's last name.

        :param purchaser_last_name: The purchaser_last_name of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_last_name: str
        """
        if purchaser_last_name is None:
            raise ValueError("Invalid value for `purchaser_last_name`, must not be `None`")

        self._purchaser_last_name = purchaser_last_name

    @property
    def purchaser_state(self):
        """Gets the purchaser_state of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's state.

        :return: The purchaser_state of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_state

    @purchaser_state.setter
    def purchaser_state(self, purchaser_state):
        """Sets the purchaser_state of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's state.

        :param purchaser_state: The purchaser_state of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_state: str
        """
        if purchaser_state is None:
            raise ValueError("Invalid value for `purchaser_state`, must not be `None`")

        self._purchaser_state = purchaser_state

    @property
    def purchaser_tax_id(self):
        """Gets the purchaser_tax_id of this UsTaxExemptionCertificateDetailsSchema.


        :return: The purchaser_tax_id of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: UsTaxId
        """
        return self._purchaser_tax_id

    @purchaser_tax_id.setter
    def purchaser_tax_id(self, purchaser_tax_id):
        """Sets the purchaser_tax_id of this UsTaxExemptionCertificateDetailsSchema.


        :param purchaser_tax_id: The purchaser_tax_id of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_tax_id: UsTaxId
        """
        if purchaser_tax_id is None:
            raise ValueError("Invalid value for `purchaser_tax_id`, must not be `None`")

        self._purchaser_tax_id = purchaser_tax_id

    @property
    def purchaser_title(self):
        """Gets the purchaser_title of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's title.

        :return: The purchaser_title of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_title

    @purchaser_title.setter
    def purchaser_title(self, purchaser_title):
        """Sets the purchaser_title of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's title.

        :param purchaser_title: The purchaser_title of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_title: str
        """

        self._purchaser_title = purchaser_title

    @property
    def purchaser_zip(self):
        """Gets the purchaser_zip of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's zip code.

        :return: The purchaser_zip of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._purchaser_zip

    @purchaser_zip.setter
    def purchaser_zip(self, purchaser_zip):
        """Sets the purchaser_zip of this UsTaxExemptionCertificateDetailsSchema.

        Purchaser's zip code.

        :param purchaser_zip: The purchaser_zip of this UsTaxExemptionCertificateDetailsSchema.
        :type purchaser_zip: str
        """
        if purchaser_zip is None:
            raise ValueError("Invalid value for `purchaser_zip`, must not be `None`")

        self._purchaser_zip = purchaser_zip

    @property
    def single_purchase(self):
        """Gets the single_purchase of this UsTaxExemptionCertificateDetailsSchema.

        Set to true if this certificate is valid for single purchase only.

        :return: The single_purchase of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: bool
        """
        return self._single_purchase

    @single_purchase.setter
    def single_purchase(self, single_purchase):
        """Sets the single_purchase of this UsTaxExemptionCertificateDetailsSchema.

        Set to true if this certificate is valid for single purchase only.

        :param single_purchase: The single_purchase of this UsTaxExemptionCertificateDetailsSchema.
        :type single_purchase: bool
        """

        self._single_purchase = single_purchase

    @property
    def single_purchase_order_identifier(self):
        """Gets the single_purchase_order_identifier of this UsTaxExemptionCertificateDetailsSchema.

        Purchase/order identifier for single purchase.

        :return: The single_purchase_order_identifier of this UsTaxExemptionCertificateDetailsSchema.
        :rtype: str
        """
        return self._single_purchase_order_identifier

    @single_purchase_order_identifier.setter
    def single_purchase_order_identifier(self, single_purchase_order_identifier):
        """Sets the single_purchase_order_identifier of this UsTaxExemptionCertificateDetailsSchema.

        Purchase/order identifier for single purchase.

        :param single_purchase_order_identifier: The single_purchase_order_identifier of this UsTaxExemptionCertificateDetailsSchema.
        :type single_purchase_order_identifier: str
        """

        self._single_purchase_order_identifier = single_purchase_order_identifier
