# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UsTaxExemptState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier_for_exemption_reason: str=None, reason_for_exemption: str=None, state_abbr: str=None):
        """UsTaxExemptState - a model defined in OpenAPI

        :param identifier_for_exemption_reason: The identifier_for_exemption_reason of this UsTaxExemptState.
        :param reason_for_exemption: The reason_for_exemption of this UsTaxExemptState.
        :param state_abbr: The state_abbr of this UsTaxExemptState.
        """
        self.openapi_types = {
            'identifier_for_exemption_reason': str,
            'reason_for_exemption': str,
            'state_abbr': str
        }

        self.attribute_map = {
            'identifier_for_exemption_reason': 'identifier_for_exemption_reason',
            'reason_for_exemption': 'reason_for_exemption',
            'state_abbr': 'state_abbr'
        }

        self._identifier_for_exemption_reason = identifier_for_exemption_reason
        self._reason_for_exemption = reason_for_exemption
        self._state_abbr = state_abbr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UsTaxExemptState':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The us_tax_exempt_state of this UsTaxExemptState.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier_for_exemption_reason(self):
        """Gets the identifier_for_exemption_reason of this UsTaxExemptState.

        Identifier for exemption reason.

        :return: The identifier_for_exemption_reason of this UsTaxExemptState.
        :rtype: str
        """
        return self._identifier_for_exemption_reason

    @identifier_for_exemption_reason.setter
    def identifier_for_exemption_reason(self, identifier_for_exemption_reason):
        """Sets the identifier_for_exemption_reason of this UsTaxExemptState.

        Identifier for exemption reason.

        :param identifier_for_exemption_reason: The identifier_for_exemption_reason of this UsTaxExemptState.
        :type identifier_for_exemption_reason: str
        """

        self._identifier_for_exemption_reason = identifier_for_exemption_reason

    @property
    def reason_for_exemption(self):
        """Gets the reason_for_exemption of this UsTaxExemptState.

        Exemption reason

        :return: The reason_for_exemption of this UsTaxExemptState.
        :rtype: str
        """
        return self._reason_for_exemption

    @reason_for_exemption.setter
    def reason_for_exemption(self, reason_for_exemption):
        """Sets the reason_for_exemption of this UsTaxExemptState.

        Exemption reason

        :param reason_for_exemption: The reason_for_exemption of this UsTaxExemptState.
        :type reason_for_exemption: str
        """

        self._reason_for_exemption = reason_for_exemption

    @property
    def state_abbr(self):
        """Gets the state_abbr of this UsTaxExemptState.

        Two character state abbreviation.

        :return: The state_abbr of this UsTaxExemptState.
        :rtype: str
        """
        return self._state_abbr

    @state_abbr.setter
    def state_abbr(self, state_abbr):
        """Sets the state_abbr of this UsTaxExemptState.

        Two character state abbreviation.

        :param state_abbr: The state_abbr of this UsTaxExemptState.
        :type state_abbr: str
        """
        if state_abbr is None:
            raise ValueError("Invalid value for `state_abbr`, must not be `None`")

        self._state_abbr = state_abbr
