# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.storage_required_fields import StorageRequiredFields
from openapi_server.models.tax_required_fields import TaxRequiredFields
from openapi_server.models.transaction import Transaction
from openapi_server import util


class GetTransactionOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, storage_required_fields: List[StorageRequiredFields]=None, tax_required_fields: List[TaxRequiredFields]=None, transaction: Transaction=None):
        """GetTransactionOut - a model defined in OpenAPI

        :param storage_required_fields: The storage_required_fields of this GetTransactionOut.
        :param tax_required_fields: The tax_required_fields of this GetTransactionOut.
        :param transaction: The transaction of this GetTransactionOut.
        """
        self.openapi_types = {
            'storage_required_fields': List[StorageRequiredFields],
            'tax_required_fields': List[TaxRequiredFields],
            'transaction': Transaction
        }

        self.attribute_map = {
            'storage_required_fields': 'storage_required_fields',
            'tax_required_fields': 'tax_required_fields',
            'transaction': 'transaction'
        }

        self._storage_required_fields = storage_required_fields
        self._tax_required_fields = tax_required_fields
        self._transaction = transaction

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTransactionOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getTransactionOut of this GetTransactionOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def storage_required_fields(self):
        """Gets the storage_required_fields of this GetTransactionOut.

        Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.

        :return: The storage_required_fields of this GetTransactionOut.
        :rtype: List[StorageRequiredFields]
        """
        return self._storage_required_fields

    @storage_required_fields.setter
    def storage_required_fields(self, storage_required_fields):
        """Sets the storage_required_fields of this GetTransactionOut.

        Fields required for transaction storage (can be added later - it's up to merchant software). Depends on the region/transaction type.

        :param storage_required_fields: The storage_required_fields of this GetTransactionOut.
        :type storage_required_fields: List[StorageRequiredFields]
        """

        self._storage_required_fields = storage_required_fields

    @property
    def tax_required_fields(self):
        """Gets the tax_required_fields of this GetTransactionOut.

        Fields required for tax calculation. Depends on the region/transaction type.

        :return: The tax_required_fields of this GetTransactionOut.
        :rtype: List[TaxRequiredFields]
        """
        return self._tax_required_fields

    @tax_required_fields.setter
    def tax_required_fields(self, tax_required_fields):
        """Sets the tax_required_fields of this GetTransactionOut.

        Fields required for tax calculation. Depends on the region/transaction type.

        :param tax_required_fields: The tax_required_fields of this GetTransactionOut.
        :type tax_required_fields: List[TaxRequiredFields]
        """

        self._tax_required_fields = tax_required_fields

    @property
    def transaction(self):
        """Gets the transaction of this GetTransactionOut.


        :return: The transaction of this GetTransactionOut.
        :rtype: Transaction
        """
        return self._transaction

    @transaction.setter
    def transaction(self, transaction):
        """Sets the transaction of this GetTransactionOut.


        :param transaction: The transaction of this GetTransactionOut.
        :type transaction: Transaction
        """

        self._transaction = transaction
