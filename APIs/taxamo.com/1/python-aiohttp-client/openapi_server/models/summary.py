# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Summary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, end_date: str=None, fx_rate_date: str=None, indicative: bool=None, quarter: str=None, start_date: str=None, tax_amount: float=None, tax_entity_name: str=None):
        """Summary - a model defined in OpenAPI

        :param currency_code: The currency_code of this Summary.
        :param end_date: The end_date of this Summary.
        :param fx_rate_date: The fx_rate_date of this Summary.
        :param indicative: The indicative of this Summary.
        :param quarter: The quarter of this Summary.
        :param start_date: The start_date of this Summary.
        :param tax_amount: The tax_amount of this Summary.
        :param tax_entity_name: The tax_entity_name of this Summary.
        """
        self.openapi_types = {
            'currency_code': str,
            'end_date': str,
            'fx_rate_date': str,
            'indicative': bool,
            'quarter': str,
            'start_date': str,
            'tax_amount': float,
            'tax_entity_name': str
        }

        self.attribute_map = {
            'currency_code': 'currency_code',
            'end_date': 'end_date',
            'fx_rate_date': 'fx_rate_date',
            'indicative': 'indicative',
            'quarter': 'quarter',
            'start_date': 'start_date',
            'tax_amount': 'tax_amount',
            'tax_entity_name': 'tax_entity_name'
        }

        self._currency_code = currency_code
        self._end_date = end_date
        self._fx_rate_date = fx_rate_date
        self._indicative = indicative
        self._quarter = quarter
        self._start_date = start_date
        self._tax_amount = tax_amount
        self._tax_entity_name = tax_entity_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Summary':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The summary of this Summary.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this Summary.

        In which currency code the settlement was calculated.

        :return: The currency_code of this Summary.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this Summary.

        In which currency code the settlement was calculated.

        :param currency_code: The currency_code of this Summary.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def end_date(self):
        """Gets the end_date of this Summary.

        Period end date in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :return: The end_date of this Summary.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date):
        """Sets the end_date of this Summary.

        Period end date in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :param end_date: The end_date of this Summary.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def fx_rate_date(self):
        """Gets the fx_rate_date of this Summary.

        Date of ECB FX rate used for conversions in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :return: The fx_rate_date of this Summary.
        :rtype: str
        """
        return self._fx_rate_date

    @fx_rate_date.setter
    def fx_rate_date(self, fx_rate_date):
        """Sets the fx_rate_date of this Summary.

        Date of ECB FX rate used for conversions in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :param fx_rate_date: The fx_rate_date of this Summary.
        :type fx_rate_date: str
        """

        self._fx_rate_date = fx_rate_date

    @property
    def indicative(self):
        """Gets the indicative of this Summary.

        If the quarter isn't closed yet, tax amount is indicative, as we cannot determine FX rate or all transactions yet.

        :return: The indicative of this Summary.
        :rtype: bool
        """
        return self._indicative

    @indicative.setter
    def indicative(self, indicative):
        """Sets the indicative of this Summary.

        If the quarter isn't closed yet, tax amount is indicative, as we cannot determine FX rate or all transactions yet.

        :param indicative: The indicative of this Summary.
        :type indicative: bool
        """

        self._indicative = indicative

    @property
    def quarter(self):
        """Gets the quarter of this Summary.

        Quarter that this summary applies to.

        :return: The quarter of this Summary.
        :rtype: str
        """
        return self._quarter

    @quarter.setter
    def quarter(self, quarter):
        """Sets the quarter of this Summary.

        Quarter that this summary applies to.

        :param quarter: The quarter of this Summary.
        :type quarter: str
        """

        self._quarter = quarter

    @property
    def start_date(self):
        """Gets the start_date of this Summary.

        Period start date in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :return: The start_date of this Summary.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date):
        """Sets the start_date of this Summary.

        Period start date in yyyy-MM-dd'T'hh:mm:ss'Z' format.

        :param start_date: The start_date of this Summary.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Summary.

        Tax amount due in this quarter.

        :return: The tax_amount of this Summary.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Summary.

        Tax amount due in this quarter.

        :param tax_amount: The tax_amount of this Summary.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_entity_name(self):
        """Gets the tax_entity_name of this Summary.

        Tax entity that the tax is due.

        :return: The tax_entity_name of this Summary.
        :rtype: str
        """
        return self._tax_entity_name

    @tax_entity_name.setter
    def tax_entity_name(self, tax_entity_name):
        """Sets the tax_entity_name of this Summary.

        Tax entity that the tax is due.

        :param tax_entity_name: The tax_entity_name of this Summary.
        :type tax_entity_name: str
        """

        self._tax_entity_name = tax_entity_name
