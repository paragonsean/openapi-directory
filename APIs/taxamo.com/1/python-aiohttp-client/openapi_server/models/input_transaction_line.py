# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.custom_fields import CustomFields
from openapi_server import util


class InputTransactionLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, custom_fields: List[CustomFields]=None, custom_id: str=None, deducted_tax_rate: float=None, description: str=None, informative: bool=None, line_key: str=None, product_code: str=None, product_tax_code: str=None, product_type: str=None, quantity: float=None, supply_date: str=None, tax_name: str=None, tax_rate: float=None, total_amount: float=None, unit_of_measure: str=None, unit_price: float=None):
        """InputTransactionLine - a model defined in OpenAPI

        :param amount: The amount of this InputTransactionLine.
        :param custom_fields: The custom_fields of this InputTransactionLine.
        :param custom_id: The custom_id of this InputTransactionLine.
        :param deducted_tax_rate: The deducted_tax_rate of this InputTransactionLine.
        :param description: The description of this InputTransactionLine.
        :param informative: The informative of this InputTransactionLine.
        :param line_key: The line_key of this InputTransactionLine.
        :param product_code: The product_code of this InputTransactionLine.
        :param product_tax_code: The product_tax_code of this InputTransactionLine.
        :param product_type: The product_type of this InputTransactionLine.
        :param quantity: The quantity of this InputTransactionLine.
        :param supply_date: The supply_date of this InputTransactionLine.
        :param tax_name: The tax_name of this InputTransactionLine.
        :param tax_rate: The tax_rate of this InputTransactionLine.
        :param total_amount: The total_amount of this InputTransactionLine.
        :param unit_of_measure: The unit_of_measure of this InputTransactionLine.
        :param unit_price: The unit_price of this InputTransactionLine.
        """
        self.openapi_types = {
            'amount': float,
            'custom_fields': List[CustomFields],
            'custom_id': str,
            'deducted_tax_rate': float,
            'description': str,
            'informative': bool,
            'line_key': str,
            'product_code': str,
            'product_tax_code': str,
            'product_type': str,
            'quantity': float,
            'supply_date': str,
            'tax_name': str,
            'tax_rate': float,
            'total_amount': float,
            'unit_of_measure': str,
            'unit_price': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'custom_fields': 'custom_fields',
            'custom_id': 'custom_id',
            'deducted_tax_rate': 'deducted_tax_rate',
            'description': 'description',
            'informative': 'informative',
            'line_key': 'line_key',
            'product_code': 'product_code',
            'product_tax_code': 'product_tax_code',
            'product_type': 'product_type',
            'quantity': 'quantity',
            'supply_date': 'supply_date',
            'tax_name': 'tax_name',
            'tax_rate': 'tax_rate',
            'total_amount': 'total_amount',
            'unit_of_measure': 'unit_of_measure',
            'unit_price': 'unit_price'
        }

        self._amount = amount
        self._custom_fields = custom_fields
        self._custom_id = custom_id
        self._deducted_tax_rate = deducted_tax_rate
        self._description = description
        self._informative = informative
        self._line_key = line_key
        self._product_code = product_code
        self._product_tax_code = product_tax_code
        self._product_type = product_type
        self._quantity = quantity
        self._supply_date = supply_date
        self._tax_name = tax_name
        self._tax_rate = tax_rate
        self._total_amount = total_amount
        self._unit_of_measure = unit_of_measure
        self._unit_price = unit_price

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTransactionLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The input_transaction_line of this InputTransactionLine.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this InputTransactionLine.

        Amount. Required if total amount or both unit price and quantity are not provided.

        :return: The amount of this InputTransactionLine.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this InputTransactionLine.

        Amount. Required if total amount or both unit price and quantity are not provided.

        :param amount: The amount of this InputTransactionLine.
        :type amount: float
        """

        self._amount = amount

    @property
    def custom_fields(self):
        """Gets the custom_fields of this InputTransactionLine.

        Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.

        :return: The custom_fields of this InputTransactionLine.
        :rtype: List[CustomFields]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this InputTransactionLine.

        Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.

        :param custom_fields: The custom_fields of this InputTransactionLine.
        :type custom_fields: List[CustomFields]
        """

        self._custom_fields = custom_fields

    @property
    def custom_id(self):
        """Gets the custom_id of this InputTransactionLine.

        Custom id, provided by ecommerce software.

        :return: The custom_id of this InputTransactionLine.
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this InputTransactionLine.

        Custom id, provided by ecommerce software.

        :param custom_id: The custom_id of this InputTransactionLine.
        :type custom_id: str
        """
        if custom_id is None:
            raise ValueError("Invalid value for `custom_id`, must not be `None`")

        self._custom_id = custom_id

    @property
    def deducted_tax_rate(self):
        """Gets the deducted_tax_rate of this InputTransactionLine.

        Deducted tax rate, calculated by taxamo.

        :return: The deducted_tax_rate of this InputTransactionLine.
        :rtype: float
        """
        return self._deducted_tax_rate

    @deducted_tax_rate.setter
    def deducted_tax_rate(self, deducted_tax_rate):
        """Sets the deducted_tax_rate of this InputTransactionLine.

        Deducted tax rate, calculated by taxamo.

        :param deducted_tax_rate: The deducted_tax_rate of this InputTransactionLine.
        :type deducted_tax_rate: float
        """

        self._deducted_tax_rate = deducted_tax_rate

    @property
    def description(self):
        """Gets the description of this InputTransactionLine.

        Line contents description.

        :return: The description of this InputTransactionLine.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InputTransactionLine.

        Line contents description.

        :param description: The description of this InputTransactionLine.
        :type description: str
        """

        self._description = description

    @property
    def informative(self):
        """Gets the informative of this InputTransactionLine.

        If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.

        :return: The informative of this InputTransactionLine.
        :rtype: bool
        """
        return self._informative

    @informative.setter
    def informative(self, informative):
        """Sets the informative of this InputTransactionLine.

        If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.

        :param informative: The informative of this InputTransactionLine.
        :type informative: bool
        """

        self._informative = informative

    @property
    def line_key(self):
        """Gets the line_key of this InputTransactionLine.

        Generated line key.

        :return: The line_key of this InputTransactionLine.
        :rtype: str
        """
        return self._line_key

    @line_key.setter
    def line_key(self, line_key):
        """Sets the line_key of this InputTransactionLine.

        Generated line key.

        :param line_key: The line_key of this InputTransactionLine.
        :type line_key: str
        """

        self._line_key = line_key

    @property
    def product_code(self):
        """Gets the product_code of this InputTransactionLine.

        Internal product code, used for invoicing for example.

        :return: The product_code of this InputTransactionLine.
        :rtype: str
        """
        return self._product_code

    @product_code.setter
    def product_code(self, product_code):
        """Sets the product_code of this InputTransactionLine.

        Internal product code, used for invoicing for example.

        :param product_code: The product_code of this InputTransactionLine.
        :type product_code: str
        """

        self._product_code = product_code

    @property
    def product_tax_code(self):
        """Gets the product_tax_code of this InputTransactionLine.

        External product tax code for a line, for example TIC in US Sales tax.

        :return: The product_tax_code of this InputTransactionLine.
        :rtype: str
        """
        return self._product_tax_code

    @product_tax_code.setter
    def product_tax_code(self, product_tax_code):
        """Sets the product_tax_code of this InputTransactionLine.

        External product tax code for a line, for example TIC in US Sales tax.

        :param product_tax_code: The product_tax_code of this InputTransactionLine.
        :type product_tax_code: str
        """

        self._product_tax_code = product_tax_code

    @property
    def product_type(self):
        """Gets the product_type of this InputTransactionLine.

        Product type, according to dictionary /dictionaries/product_types. 

        :return: The product_type of this InputTransactionLine.
        :rtype: str
        """
        return self._product_type

    @product_type.setter
    def product_type(self, product_type):
        """Sets the product_type of this InputTransactionLine.

        Product type, according to dictionary /dictionaries/product_types. 

        :param product_type: The product_type of this InputTransactionLine.
        :type product_type: str
        """

        self._product_type = product_type

    @property
    def quantity(self):
        """Gets the quantity of this InputTransactionLine.

        Quantity Defaults to 1.

        :return: The quantity of this InputTransactionLine.
        :rtype: float
        """
        return self._quantity

    @quantity.setter
    def quantity(self, quantity):
        """Sets the quantity of this InputTransactionLine.

        Quantity Defaults to 1.

        :param quantity: The quantity of this InputTransactionLine.
        :type quantity: float
        """

        self._quantity = quantity

    @property
    def supply_date(self):
        """Gets the supply_date of this InputTransactionLine.

        Date of supply in yyyy-MM-dd format.

        :return: The supply_date of this InputTransactionLine.
        :rtype: str
        """
        return self._supply_date

    @supply_date.setter
    def supply_date(self, supply_date):
        """Sets the supply_date of this InputTransactionLine.

        Date of supply in yyyy-MM-dd format.

        :param supply_date: The supply_date of this InputTransactionLine.
        :type supply_date: str
        """

        self._supply_date = supply_date

    @property
    def tax_name(self):
        """Gets the tax_name of this InputTransactionLine.

        Tax name, calculated by taxamo.  Can be overwritten when informative field is true.

        :return: The tax_name of this InputTransactionLine.
        :rtype: str
        """
        return self._tax_name

    @tax_name.setter
    def tax_name(self, tax_name):
        """Sets the tax_name of this InputTransactionLine.

        Tax name, calculated by taxamo.  Can be overwritten when informative field is true.

        :param tax_name: The tax_name of this InputTransactionLine.
        :type tax_name: str
        """

        self._tax_name = tax_name

    @property
    def tax_rate(self):
        """Gets the tax_rate of this InputTransactionLine.

        Tax rate, calculated by taxamo. Must be provided when informative field is true.

        :return: The tax_rate of this InputTransactionLine.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this InputTransactionLine.

        Tax rate, calculated by taxamo. Must be provided when informative field is true.

        :param tax_rate: The tax_rate of this InputTransactionLine.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def total_amount(self):
        """Gets the total_amount of this InputTransactionLine.

        Total amount. Required if amount or both unit price and quantity are not provided.

        :return: The total_amount of this InputTransactionLine.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this InputTransactionLine.

        Total amount. Required if amount or both unit price and quantity are not provided.

        :param total_amount: The total_amount of this InputTransactionLine.
        :type total_amount: float
        """

        self._total_amount = total_amount

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this InputTransactionLine.

        Unit of measure.

        :return: The unit_of_measure of this InputTransactionLine.
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this InputTransactionLine.

        Unit of measure.

        :param unit_of_measure: The unit_of_measure of this InputTransactionLine.
        :type unit_of_measure: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def unit_price(self):
        """Gets the unit_price of this InputTransactionLine.

        Unit price.

        :return: The unit_price of this InputTransactionLine.
        :rtype: float
        """
        return self._unit_price

    @unit_price.setter
    def unit_price(self, unit_price):
        """Sets the unit_price of this InputTransactionLine.

        Unit price.

        :param unit_price: The unit_price of this InputTransactionLine.
        :type unit_price: float
        """

        self._unit_price = unit_price
