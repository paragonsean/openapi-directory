# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetEuViesReportIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency_code: str=None, end_month: str=None, eu_country_code: str=None, format: str=None, fx_date_type: str=None, lff_sequence_number: str=None, period_length: str=None, start_month: str=None, tax_id: str=None, transformation: str=None):
        """GetEuViesReportIn - a model defined in OpenAPI

        :param currency_code: The currency_code of this GetEuViesReportIn.
        :param end_month: The end_month of this GetEuViesReportIn.
        :param eu_country_code: The eu_country_code of this GetEuViesReportIn.
        :param format: The format of this GetEuViesReportIn.
        :param fx_date_type: The fx_date_type of this GetEuViesReportIn.
        :param lff_sequence_number: The lff_sequence_number of this GetEuViesReportIn.
        :param period_length: The period_length of this GetEuViesReportIn.
        :param start_month: The start_month of this GetEuViesReportIn.
        :param tax_id: The tax_id of this GetEuViesReportIn.
        :param transformation: The transformation of this GetEuViesReportIn.
        """
        self.openapi_types = {
            'currency_code': str,
            'end_month': str,
            'eu_country_code': str,
            'format': str,
            'fx_date_type': str,
            'lff_sequence_number': str,
            'period_length': str,
            'start_month': str,
            'tax_id': str,
            'transformation': str
        }

        self.attribute_map = {
            'currency_code': 'currency_code',
            'end_month': 'end_month',
            'eu_country_code': 'eu_country_code',
            'format': 'format',
            'fx_date_type': 'fx_date_type',
            'lff_sequence_number': 'lff_sequence_number',
            'period_length': 'period_length',
            'start_month': 'start_month',
            'tax_id': 'tax_id',
            'transformation': 'transformation'
        }

        self._currency_code = currency_code
        self._end_month = end_month
        self._eu_country_code = eu_country_code
        self._format = format
        self._fx_date_type = fx_date_type
        self._lff_sequence_number = lff_sequence_number
        self._period_length = period_length
        self._start_month = start_month
        self._tax_id = tax_id
        self._transformation = transformation

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetEuViesReportIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getEuViesReportIn of this GetEuViesReportIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency_code(self):
        """Gets the currency_code of this GetEuViesReportIn.

        ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.

        :return: The currency_code of this GetEuViesReportIn.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this GetEuViesReportIn.

        ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.

        :param currency_code: The currency_code of this GetEuViesReportIn.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def end_month(self):
        """Gets the end_month of this GetEuViesReportIn.

        Period end month in yyyy-MM format.

        :return: The end_month of this GetEuViesReportIn.
        :rtype: str
        """
        return self._end_month

    @end_month.setter
    def end_month(self, end_month):
        """Sets the end_month of this GetEuViesReportIn.

        Period end month in yyyy-MM format.

        :param end_month: The end_month of this GetEuViesReportIn.
        :type end_month: str
        """
        if end_month is None:
            raise ValueError("Invalid value for `end_month`, must not be `None`")

        self._end_month = end_month

    @property
    def eu_country_code(self):
        """Gets the eu_country_code of this GetEuViesReportIn.

        ISO 2-letter country code which will be used for determining which country is domestic.

        :return: The eu_country_code of this GetEuViesReportIn.
        :rtype: str
        """
        return self._eu_country_code

    @eu_country_code.setter
    def eu_country_code(self, eu_country_code):
        """Sets the eu_country_code of this GetEuViesReportIn.

        ISO 2-letter country code which will be used for determining which country is domestic.

        :param eu_country_code: The eu_country_code of this GetEuViesReportIn.
        :type eu_country_code: str
        """
        if eu_country_code is None:
            raise ValueError("Invalid value for `eu_country_code`, must not be `None`")

        self._eu_country_code = eu_country_code

    @property
    def format(self):
        """Gets the format of this GetEuViesReportIn.

        Output format. 'xml', 'csv' and 'lff' (only for Ireland) values are accepted as well

        :return: The format of this GetEuViesReportIn.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this GetEuViesReportIn.

        Output format. 'xml', 'csv' and 'lff' (only for Ireland) values are accepted as well

        :param format: The format of this GetEuViesReportIn.
        :type format: str
        """

        self._format = format

    @property
    def fx_date_type(self):
        """Gets the fx_date_type of this GetEuViesReportIn.

        Which date should be used for FX.

        :return: The fx_date_type of this GetEuViesReportIn.
        :rtype: str
        """
        return self._fx_date_type

    @fx_date_type.setter
    def fx_date_type(self, fx_date_type):
        """Sets the fx_date_type of this GetEuViesReportIn.

        Which date should be used for FX.

        :param fx_date_type: The fx_date_type of this GetEuViesReportIn.
        :type fx_date_type: str
        """

        self._fx_date_type = fx_date_type

    @property
    def lff_sequence_number(self):
        """Gets the lff_sequence_number of this GetEuViesReportIn.

        Sequence number used to generate report in Large Filer Format. If not specified then '0000000001' will be used.

        :return: The lff_sequence_number of this GetEuViesReportIn.
        :rtype: str
        """
        return self._lff_sequence_number

    @lff_sequence_number.setter
    def lff_sequence_number(self, lff_sequence_number):
        """Sets the lff_sequence_number of this GetEuViesReportIn.

        Sequence number used to generate report in Large Filer Format. If not specified then '0000000001' will be used.

        :param lff_sequence_number: The lff_sequence_number of this GetEuViesReportIn.
        :type lff_sequence_number: str
        """

        self._lff_sequence_number = lff_sequence_number

    @property
    def period_length(self):
        """Gets the period_length of this GetEuViesReportIn.

        Length of report period. 'month', 'quarter' and 'year' values are accepted. Required only if Large Filer Format is requested.

        :return: The period_length of this GetEuViesReportIn.
        :rtype: str
        """
        return self._period_length

    @period_length.setter
    def period_length(self, period_length):
        """Sets the period_length of this GetEuViesReportIn.

        Length of report period. 'month', 'quarter' and 'year' values are accepted. Required only if Large Filer Format is requested.

        :param period_length: The period_length of this GetEuViesReportIn.
        :type period_length: str
        """

        self._period_length = period_length

    @property
    def start_month(self):
        """Gets the start_month of this GetEuViesReportIn.

        Period start month in yyyy-MM format.

        :return: The start_month of this GetEuViesReportIn.
        :rtype: str
        """
        return self._start_month

    @start_month.setter
    def start_month(self, start_month):
        """Sets the start_month of this GetEuViesReportIn.

        Period start month in yyyy-MM format.

        :param start_month: The start_month of this GetEuViesReportIn.
        :type start_month: str
        """
        if start_month is None:
            raise ValueError("Invalid value for `start_month`, must not be `None`")

        self._start_month = start_month

    @property
    def tax_id(self):
        """Gets the tax_id of this GetEuViesReportIn.

        MOSS-assigned tax ID - if not provided, merchant's national tax number will be used.

        :return: The tax_id of this GetEuViesReportIn.
        :rtype: str
        """
        return self._tax_id

    @tax_id.setter
    def tax_id(self, tax_id):
        """Sets the tax_id of this GetEuViesReportIn.

        MOSS-assigned tax ID - if not provided, merchant's national tax number will be used.

        :param tax_id: The tax_id of this GetEuViesReportIn.
        :type tax_id: str
        """

        self._tax_id = tax_id

    @property
    def transformation(self):
        """Gets the transformation of this GetEuViesReportIn.

        Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats.

        :return: The transformation of this GetEuViesReportIn.
        :rtype: str
        """
        return self._transformation

    @transformation.setter
    def transformation(self, transformation):
        """Sets the transformation of this GetEuViesReportIn.

        Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats.

        :param transformation: The transformation of this GetEuViesReportIn.
        :type transformation: str
        """

        self._transformation = transformation
