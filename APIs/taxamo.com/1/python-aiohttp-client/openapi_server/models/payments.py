# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Payments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, payment_information: str=None, payment_timestamp: str=None):
        """Payments - a model defined in OpenAPI

        :param amount: The amount of this Payments.
        :param payment_information: The payment_information of this Payments.
        :param payment_timestamp: The payment_timestamp of this Payments.
        """
        self.openapi_types = {
            'amount': float,
            'payment_information': str,
            'payment_timestamp': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'payment_information': 'payment_information',
            'payment_timestamp': 'payment_timestamp'
        }

        self._amount = amount
        self._payment_information = payment_information
        self._payment_timestamp = payment_timestamp

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Payments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The payments of this Payments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Payments.

        Amount that has been paid. Use negative value to register refunds.

        :return: The amount of this Payments.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Payments.

        Amount that has been paid. Use negative value to register refunds.

        :param amount: The amount of this Payments.
        :type amount: float
        """

        self._amount = amount

    @property
    def payment_information(self):
        """Gets the payment_information of this Payments.

        Additional payment information.

        :return: The payment_information of this Payments.
        :rtype: str
        """
        return self._payment_information

    @payment_information.setter
    def payment_information(self, payment_information):
        """Sets the payment_information of this Payments.

        Additional payment information.

        :param payment_information: The payment_information of this Payments.
        :type payment_information: str
        """

        self._payment_information = payment_information

    @property
    def payment_timestamp(self):
        """Gets the payment_timestamp of this Payments.

        When the payment was received in yyyy-MM-dd HH:mm:ss (24 hour format, UTC+0 timezone).

        :return: The payment_timestamp of this Payments.
        :rtype: str
        """
        return self._payment_timestamp

    @payment_timestamp.setter
    def payment_timestamp(self, payment_timestamp):
        """Sets the payment_timestamp of this Payments.

        When the payment was received in yyyy-MM-dd HH:mm:ss (24 hour format, UTC+0 timezone).

        :param payment_timestamp: The payment_timestamp of this Payments.
        :type payment_timestamp: str
        """

        self._payment_timestamp = payment_timestamp
