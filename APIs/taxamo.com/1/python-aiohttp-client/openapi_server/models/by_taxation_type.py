# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ByTaxationType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deducted_count: float=None, eu_b2b: int=None, eu_taxed: int=None, taxed_count: float=None, transactions_count: float=None):
        """ByTaxationType - a model defined in OpenAPI

        :param deducted_count: The deducted_count of this ByTaxationType.
        :param eu_b2b: The eu_b2b of this ByTaxationType.
        :param eu_taxed: The eu_taxed of this ByTaxationType.
        :param taxed_count: The taxed_count of this ByTaxationType.
        :param transactions_count: The transactions_count of this ByTaxationType.
        """
        self.openapi_types = {
            'deducted_count': float,
            'eu_b2b': int,
            'eu_taxed': int,
            'taxed_count': float,
            'transactions_count': float
        }

        self.attribute_map = {
            'deducted_count': 'deducted_count',
            'eu_b2b': 'eu_b2b',
            'eu_taxed': 'eu_taxed',
            'taxed_count': 'taxed_count',
            'transactions_count': 'transactions_count'
        }

        self._deducted_count = deducted_count
        self._eu_b2b = eu_b2b
        self._eu_taxed = eu_taxed
        self._taxed_count = taxed_count
        self._transactions_count = transactions_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ByTaxationType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The by_taxation_type of this ByTaxationType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deducted_count(self):
        """Gets the deducted_count of this ByTaxationType.

        Number of tax deducted transactions.

        :return: The deducted_count of this ByTaxationType.
        :rtype: float
        """
        return self._deducted_count

    @deducted_count.setter
    def deducted_count(self, deducted_count):
        """Sets the deducted_count of this ByTaxationType.

        Number of tax deducted transactions.

        :param deducted_count: The deducted_count of this ByTaxationType.
        :type deducted_count: float
        """

        self._deducted_count = deducted_count

    @property
    def eu_b2b(self):
        """Gets the eu_b2b of this ByTaxationType.

        Total EU B2B transaction count.

        :return: The eu_b2b of this ByTaxationType.
        :rtype: int
        """
        return self._eu_b2b

    @eu_b2b.setter
    def eu_b2b(self, eu_b2b):
        """Sets the eu_b2b of this ByTaxationType.

        Total EU B2B transaction count.

        :param eu_b2b: The eu_b2b of this ByTaxationType.
        :type eu_b2b: int
        """

        self._eu_b2b = eu_b2b

    @property
    def eu_taxed(self):
        """Gets the eu_taxed of this ByTaxationType.

        Total EU Taxed transaction count.

        :return: The eu_taxed of this ByTaxationType.
        :rtype: int
        """
        return self._eu_taxed

    @eu_taxed.setter
    def eu_taxed(self, eu_taxed):
        """Sets the eu_taxed of this ByTaxationType.

        Total EU Taxed transaction count.

        :param eu_taxed: The eu_taxed of this ByTaxationType.
        :type eu_taxed: int
        """

        self._eu_taxed = eu_taxed

    @property
    def taxed_count(self):
        """Gets the taxed_count of this ByTaxationType.

        Number of taxed transactions.

        :return: The taxed_count of this ByTaxationType.
        :rtype: float
        """
        return self._taxed_count

    @taxed_count.setter
    def taxed_count(self, taxed_count):
        """Sets the taxed_count of this ByTaxationType.

        Number of taxed transactions.

        :param taxed_count: The taxed_count of this ByTaxationType.
        :type taxed_count: float
        """

        self._taxed_count = taxed_count

    @property
    def transactions_count(self):
        """Gets the transactions_count of this ByTaxationType.

        Total number of transactions

        :return: The transactions_count of this ByTaxationType.
        :rtype: float
        """
        return self._transactions_count

    @transactions_count.setter
    def transactions_count(self, transactions_count):
        """Sets the transactions_count of this ByTaxationType.

        Total number of transactions

        :param transactions_count: The transactions_count of this ByTaxationType.
        :type transactions_count: float
        """

        self._transactions_count = transactions_count
