# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class EvidenceSchema(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, evidence_type: str=None, evidence_value: str=None, resolved_country_code: str=None, used: bool=None):
        """EvidenceSchema - a model defined in OpenAPI

        :param evidence_type: The evidence_type of this EvidenceSchema.
        :param evidence_value: The evidence_value of this EvidenceSchema.
        :param resolved_country_code: The resolved_country_code of this EvidenceSchema.
        :param used: The used of this EvidenceSchema.
        """
        self.openapi_types = {
            'evidence_type': str,
            'evidence_value': str,
            'resolved_country_code': str,
            'used': bool
        }

        self.attribute_map = {
            'evidence_type': 'evidence_type',
            'evidence_value': 'evidence_value',
            'resolved_country_code': 'resolved_country_code',
            'used': 'used'
        }

        self._evidence_type = evidence_type
        self._evidence_value = evidence_value
        self._resolved_country_code = resolved_country_code
        self._used = used

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EvidenceSchema':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The evidence_schema of this EvidenceSchema.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def evidence_type(self):
        """Gets the evidence_type of this EvidenceSchema.

        Type of evidence.

        :return: The evidence_type of this EvidenceSchema.
        :rtype: str
        """
        return self._evidence_type

    @evidence_type.setter
    def evidence_type(self, evidence_type):
        """Sets the evidence_type of this EvidenceSchema.

        Type of evidence.

        :param evidence_type: The evidence_type of this EvidenceSchema.
        :type evidence_type: str
        """

        self._evidence_type = evidence_type

    @property
    def evidence_value(self):
        """Gets the evidence_value of this EvidenceSchema.

        Value provided as evidence - for example IP address.

        :return: The evidence_value of this EvidenceSchema.
        :rtype: str
        """
        return self._evidence_value

    @evidence_value.setter
    def evidence_value(self, evidence_value):
        """Sets the evidence_value of this EvidenceSchema.

        Value provided as evidence - for example IP address.

        :param evidence_value: The evidence_value of this EvidenceSchema.
        :type evidence_value: str
        """

        self._evidence_value = evidence_value

    @property
    def resolved_country_code(self):
        """Gets the resolved_country_code of this EvidenceSchema.

        Country code that was resolved using this evidence.

        :return: The resolved_country_code of this EvidenceSchema.
        :rtype: str
        """
        return self._resolved_country_code

    @resolved_country_code.setter
    def resolved_country_code(self, resolved_country_code):
        """Sets the resolved_country_code of this EvidenceSchema.

        Country code that was resolved using this evidence.

        :param resolved_country_code: The resolved_country_code of this EvidenceSchema.
        :type resolved_country_code: str
        """

        self._resolved_country_code = resolved_country_code

    @property
    def used(self):
        """Gets the used of this EvidenceSchema.

        If the evidence was used to match the actual country.

        :return: The used of this EvidenceSchema.
        :rtype: bool
        """
        return self._used

    @used.setter
    def used(self, used):
        """Sets the used of this EvidenceSchema.

        If the evidence was used to match the actual country.

        :param used: The used of this EvidenceSchema.
        :type used: bool
        """

        self._used = used
