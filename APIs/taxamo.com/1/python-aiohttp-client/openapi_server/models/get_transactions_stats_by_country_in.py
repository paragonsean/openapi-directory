# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class GetTransactionsStatsByCountryIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_from: str=None, date_to: str=None, global_currency_code: str=None):
        """GetTransactionsStatsByCountryIn - a model defined in OpenAPI

        :param date_from: The date_from of this GetTransactionsStatsByCountryIn.
        :param date_to: The date_to of this GetTransactionsStatsByCountryIn.
        :param global_currency_code: The global_currency_code of this GetTransactionsStatsByCountryIn.
        """
        self.openapi_types = {
            'date_from': str,
            'date_to': str,
            'global_currency_code': str
        }

        self.attribute_map = {
            'date_from': 'date_from',
            'date_to': 'date_to',
            'global_currency_code': 'global_currency_code'
        }

        self._date_from = date_from
        self._date_to = date_to
        self._global_currency_code = global_currency_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'GetTransactionsStatsByCountryIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The getTransactionsStatsByCountryIn of this GetTransactionsStatsByCountryIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_from(self):
        """Gets the date_from of this GetTransactionsStatsByCountryIn.

        Date from in yyyy-MM format.

        :return: The date_from of this GetTransactionsStatsByCountryIn.
        :rtype: str
        """
        return self._date_from

    @date_from.setter
    def date_from(self, date_from):
        """Sets the date_from of this GetTransactionsStatsByCountryIn.

        Date from in yyyy-MM format.

        :param date_from: The date_from of this GetTransactionsStatsByCountryIn.
        :type date_from: str
        """
        if date_from is None:
            raise ValueError("Invalid value for `date_from`, must not be `None`")

        self._date_from = date_from

    @property
    def date_to(self):
        """Gets the date_to of this GetTransactionsStatsByCountryIn.

        Date to in yyyy-MM format.

        :return: The date_to of this GetTransactionsStatsByCountryIn.
        :rtype: str
        """
        return self._date_to

    @date_to.setter
    def date_to(self, date_to):
        """Sets the date_to of this GetTransactionsStatsByCountryIn.

        Date to in yyyy-MM format.

        :param date_to: The date_to of this GetTransactionsStatsByCountryIn.
        :type date_to: str
        """
        if date_to is None:
            raise ValueError("Invalid value for `date_to`, must not be `None`")

        self._date_to = date_to

    @property
    def global_currency_code(self):
        """Gets the global_currency_code of this GetTransactionsStatsByCountryIn.

        Global currency code to use for conversion - in addition to country's currency if rate is available. Conversion is indicative and based on most-recent rate from ECB.

        :return: The global_currency_code of this GetTransactionsStatsByCountryIn.
        :rtype: str
        """
        return self._global_currency_code

    @global_currency_code.setter
    def global_currency_code(self, global_currency_code):
        """Sets the global_currency_code of this GetTransactionsStatsByCountryIn.

        Global currency code to use for conversion - in addition to country's currency if rate is available. Conversion is indicative and based on most-recent rate from ECB.

        :param global_currency_code: The global_currency_code of this GetTransactionsStatsByCountryIn.
        :type global_currency_code: str
        """

        self._global_currency_code = global_currency_code
