# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateSMSTokenIn(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code: str=None, recipient: str=None):
        """CreateSMSTokenIn - a model defined in OpenAPI

        :param country_code: The country_code of this CreateSMSTokenIn.
        :param recipient: The recipient of this CreateSMSTokenIn.
        """
        self.openapi_types = {
            'country_code': str,
            'recipient': str
        }

        self.attribute_map = {
            'country_code': 'country_code',
            'recipient': 'recipient'
        }

        self._country_code = country_code
        self._recipient = recipient

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateSMSTokenIn':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createSMSTokenIn of this CreateSMSTokenIn.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self):
        """Gets the country_code of this CreateSMSTokenIn.

        Two letter ISO country code.

        :return: The country_code of this CreateSMSTokenIn.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this CreateSMSTokenIn.

        Two letter ISO country code.

        :param country_code: The country_code of this CreateSMSTokenIn.
        :type country_code: str
        """
        if country_code is None:
            raise ValueError("Invalid value for `country_code`, must not be `None`")

        self._country_code = country_code

    @property
    def recipient(self):
        """Gets the recipient of this CreateSMSTokenIn.

        Recipient phone number.

        :return: The recipient of this CreateSMSTokenIn.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient):
        """Sets the recipient of this CreateSMSTokenIn.

        Recipient phone number.

        :param recipient: The recipient of this CreateSMSTokenIn.
        :type recipient: str
        """
        if recipient is None:
            raise ValueError("Invalid value for `recipient`, must not be `None`")

        self._recipient = recipient
