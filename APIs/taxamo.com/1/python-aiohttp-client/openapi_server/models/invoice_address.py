# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class InvoiceAddress(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, address_detail: str=None, building_number: str=None, city: str=None, country: str=None, freeform_address: str=None, postal_code: str=None, region: str=None, street_name: str=None):
        """InvoiceAddress - a model defined in OpenAPI

        :param address_detail: The address_detail of this InvoiceAddress.
        :param building_number: The building_number of this InvoiceAddress.
        :param city: The city of this InvoiceAddress.
        :param country: The country of this InvoiceAddress.
        :param freeform_address: The freeform_address of this InvoiceAddress.
        :param postal_code: The postal_code of this InvoiceAddress.
        :param region: The region of this InvoiceAddress.
        :param street_name: The street_name of this InvoiceAddress.
        """
        self.openapi_types = {
            'address_detail': str,
            'building_number': str,
            'city': str,
            'country': str,
            'freeform_address': str,
            'postal_code': str,
            'region': str,
            'street_name': str
        }

        self.attribute_map = {
            'address_detail': 'address_detail',
            'building_number': 'building_number',
            'city': 'city',
            'country': 'country',
            'freeform_address': 'freeform_address',
            'postal_code': 'postal_code',
            'region': 'region',
            'street_name': 'street_name'
        }

        self._address_detail = address_detail
        self._building_number = building_number
        self._city = city
        self._country = country
        self._freeform_address = freeform_address
        self._postal_code = postal_code
        self._region = region
        self._street_name = street_name

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InvoiceAddress':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The invoice_address of this InvoiceAddress.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def address_detail(self):
        """Gets the address_detail of this InvoiceAddress.

        Address details - for example apartament number.

        :return: The address_detail of this InvoiceAddress.
        :rtype: str
        """
        return self._address_detail

    @address_detail.setter
    def address_detail(self, address_detail):
        """Sets the address_detail of this InvoiceAddress.

        Address details - for example apartament number.

        :param address_detail: The address_detail of this InvoiceAddress.
        :type address_detail: str
        """

        self._address_detail = address_detail

    @property
    def building_number(self):
        """Gets the building_number of this InvoiceAddress.

        Building number.

        :return: The building_number of this InvoiceAddress.
        :rtype: str
        """
        return self._building_number

    @building_number.setter
    def building_number(self, building_number):
        """Sets the building_number of this InvoiceAddress.

        Building number.

        :param building_number: The building_number of this InvoiceAddress.
        :type building_number: str
        """

        self._building_number = building_number

    @property
    def city(self):
        """Gets the city of this InvoiceAddress.

        City name.

        :return: The city of this InvoiceAddress.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this InvoiceAddress.

        City name.

        :param city: The city of this InvoiceAddress.
        :type city: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this InvoiceAddress.

        2-letter ISO country code.

        :return: The country of this InvoiceAddress.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InvoiceAddress.

        2-letter ISO country code.

        :param country: The country of this InvoiceAddress.
        :type country: str
        """

        self._country = country

    @property
    def freeform_address(self):
        """Gets the freeform_address of this InvoiceAddress.

        Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.

        :return: The freeform_address of this InvoiceAddress.
        :rtype: str
        """
        return self._freeform_address

    @freeform_address.setter
    def freeform_address(self, freeform_address):
        """Sets the freeform_address of this InvoiceAddress.

        Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.

        :param freeform_address: The freeform_address of this InvoiceAddress.
        :type freeform_address: str
        """

        self._freeform_address = freeform_address

    @property
    def postal_code(self):
        """Gets the postal_code of this InvoiceAddress.

        Postal code.

        :return: The postal_code of this InvoiceAddress.
        :rtype: str
        """
        return self._postal_code

    @postal_code.setter
    def postal_code(self, postal_code):
        """Sets the postal_code of this InvoiceAddress.

        Postal code.

        :param postal_code: The postal_code of this InvoiceAddress.
        :type postal_code: str
        """

        self._postal_code = postal_code

    @property
    def region(self):
        """Gets the region of this InvoiceAddress.

        Region, for United States - state code - e.g. NJ.

        :return: The region of this InvoiceAddress.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InvoiceAddress.

        Region, for United States - state code - e.g. NJ.

        :param region: The region of this InvoiceAddress.
        :type region: str
        """

        self._region = region

    @property
    def street_name(self):
        """Gets the street_name of this InvoiceAddress.

         Street name.

        :return: The street_name of this InvoiceAddress.
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this InvoiceAddress.

         Street name.

        :param street_name: The street_name of this InvoiceAddress.
        :type street_name: str
        """

        self._street_name = street_name
