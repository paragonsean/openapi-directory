# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server import util


class LocateMyIPOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: Country=None, country_code: str=None, remote_addr: str=None):
        """LocateMyIPOut - a model defined in OpenAPI

        :param country: The country of this LocateMyIPOut.
        :param country_code: The country_code of this LocateMyIPOut.
        :param remote_addr: The remote_addr of this LocateMyIPOut.
        """
        self.openapi_types = {
            'country': Country,
            'country_code': str,
            'remote_addr': str
        }

        self.attribute_map = {
            'country': 'country',
            'country_code': 'country_code',
            'remote_addr': 'remote_addr'
        }

        self._country = country
        self._country_code = country_code
        self._remote_addr = remote_addr

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LocateMyIPOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The locateMyIPOut of this LocateMyIPOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this LocateMyIPOut.


        :return: The country of this LocateMyIPOut.
        :rtype: Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LocateMyIPOut.


        :param country: The country of this LocateMyIPOut.
        :type country: Country
        """

        self._country = country

    @property
    def country_code(self):
        """Gets the country_code of this LocateMyIPOut.

        Detected country code.

        :return: The country_code of this LocateMyIPOut.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code):
        """Sets the country_code of this LocateMyIPOut.

        Detected country code.

        :param country_code: The country_code of this LocateMyIPOut.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def remote_addr(self):
        """Gets the remote_addr of this LocateMyIPOut.

        Remote IP address.

        :return: The remote_addr of this LocateMyIPOut.
        :rtype: str
        """
        return self._remote_addr

    @remote_addr.setter
    def remote_addr(self, remote_addr):
        """Sets the remote_addr of this LocateMyIPOut.

        Remote IP address.

        :param remote_addr: The remote_addr of this LocateMyIPOut.
        :type remote_addr: str
        """

        self._remote_addr = remote_addr
