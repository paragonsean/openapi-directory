# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Refunds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, informative: bool=None, line_key: str=None, refund_note_number: str=None, refund_note_url: str=None, refund_reason: str=None, refund_timestamp: str=None, tax_amount: float=None, tax_rate: float=None, total_amount: float=None):
        """Refunds - a model defined in OpenAPI

        :param amount: The amount of this Refunds.
        :param informative: The informative of this Refunds.
        :param line_key: The line_key of this Refunds.
        :param refund_note_number: The refund_note_number of this Refunds.
        :param refund_note_url: The refund_note_url of this Refunds.
        :param refund_reason: The refund_reason of this Refunds.
        :param refund_timestamp: The refund_timestamp of this Refunds.
        :param tax_amount: The tax_amount of this Refunds.
        :param tax_rate: The tax_rate of this Refunds.
        :param total_amount: The total_amount of this Refunds.
        """
        self.openapi_types = {
            'amount': float,
            'informative': bool,
            'line_key': str,
            'refund_note_number': str,
            'refund_note_url': str,
            'refund_reason': str,
            'refund_timestamp': str,
            'tax_amount': float,
            'tax_rate': float,
            'total_amount': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'informative': 'informative',
            'line_key': 'line_key',
            'refund_note_number': 'refund_note_number',
            'refund_note_url': 'refund_note_url',
            'refund_reason': 'refund_reason',
            'refund_timestamp': 'refund_timestamp',
            'tax_amount': 'tax_amount',
            'tax_rate': 'tax_rate',
            'total_amount': 'total_amount'
        }

        self._amount = amount
        self._informative = informative
        self._line_key = line_key
        self._refund_note_number = refund_note_number
        self._refund_note_url = refund_note_url
        self._refund_reason = refund_reason
        self._refund_timestamp = refund_timestamp
        self._tax_amount = tax_amount
        self._tax_rate = tax_rate
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Refunds':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The refunds of this Refunds.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this Refunds.

        Amount, excluding tax, that was refunded.

        :return: The amount of this Refunds.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Refunds.

        Amount, excluding tax, that was refunded.

        :param amount: The amount of this Refunds.
        :type amount: float
        """

        self._amount = amount

    @property
    def informative(self):
        """Gets the informative of this Refunds.

        Was this refund applied to an informative line?

        :return: The informative of this Refunds.
        :rtype: bool
        """
        return self._informative

    @informative.setter
    def informative(self, informative):
        """Sets the informative of this Refunds.

        Was this refund applied to an informative line?

        :param informative: The informative of this Refunds.
        :type informative: bool
        """

        self._informative = informative

    @property
    def line_key(self):
        """Gets the line_key of this Refunds.

        Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.

        :return: The line_key of this Refunds.
        :rtype: str
        """
        return self._line_key

    @line_key.setter
    def line_key(self, line_key):
        """Sets the line_key of this Refunds.

        Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.

        :param line_key: The line_key of this Refunds.
        :type line_key: str
        """

        self._line_key = line_key

    @property
    def refund_note_number(self):
        """Gets the refund_note_number of this Refunds.

        Sequential refund note number.

        :return: The refund_note_number of this Refunds.
        :rtype: str
        """
        return self._refund_note_number

    @refund_note_number.setter
    def refund_note_number(self, refund_note_number):
        """Sets the refund_note_number of this Refunds.

        Sequential refund note number.

        :param refund_note_number: The refund_note_number of this Refunds.
        :type refund_note_number: str
        """

        self._refund_note_number = refund_note_number

    @property
    def refund_note_url(self):
        """Gets the refund_note_url of this Refunds.

        Refund note image url.

        :return: The refund_note_url of this Refunds.
        :rtype: str
        """
        return self._refund_note_url

    @refund_note_url.setter
    def refund_note_url(self, refund_note_url):
        """Sets the refund_note_url of this Refunds.

        Refund note image url.

        :param refund_note_url: The refund_note_url of this Refunds.
        :type refund_note_url: str
        """

        self._refund_note_url = refund_note_url

    @property
    def refund_reason(self):
        """Gets the refund_reason of this Refunds.

        Refund reason, displayed on the credit note.

        :return: The refund_reason of this Refunds.
        :rtype: str
        """
        return self._refund_reason

    @refund_reason.setter
    def refund_reason(self, refund_reason):
        """Sets the refund_reason of this Refunds.

        Refund reason, displayed on the credit note.

        :param refund_reason: The refund_reason of this Refunds.
        :type refund_reason: str
        """

        self._refund_reason = refund_reason

    @property
    def refund_timestamp(self):
        """Gets the refund_timestamp of this Refunds.

        Refund timestamp in UTC timezone.

        :return: The refund_timestamp of this Refunds.
        :rtype: str
        """
        return self._refund_timestamp

    @refund_timestamp.setter
    def refund_timestamp(self, refund_timestamp):
        """Sets the refund_timestamp of this Refunds.

        Refund timestamp in UTC timezone.

        :param refund_timestamp: The refund_timestamp of this Refunds.
        :type refund_timestamp: str
        """

        self._refund_timestamp = refund_timestamp

    @property
    def tax_amount(self):
        """Gets the tax_amount of this Refunds.

        Calculated tax amount, that was refunded.

        :return: The tax_amount of this Refunds.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this Refunds.

        Calculated tax amount, that was refunded.

        :param tax_amount: The tax_amount of this Refunds.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def tax_rate(self):
        """Gets the tax_rate of this Refunds.

        Tax rate for the line that was used for the refund calculation.

        :return: The tax_rate of this Refunds.
        :rtype: float
        """
        return self._tax_rate

    @tax_rate.setter
    def tax_rate(self, tax_rate):
        """Sets the tax_rate of this Refunds.

        Tax rate for the line that was used for the refund calculation.

        :param tax_rate: The tax_rate of this Refunds.
        :type tax_rate: float
        """

        self._tax_rate = tax_rate

    @property
    def total_amount(self):
        """Gets the total_amount of this Refunds.

        Total amount, including tax, that was refunded.

        :return: The total_amount of this Refunds.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this Refunds.

        Total amount, including tax, that was refunded.

        :param total_amount: The total_amount of this Refunds.
        :type total_amount: float
        """

        self._total_amount = total_amount
