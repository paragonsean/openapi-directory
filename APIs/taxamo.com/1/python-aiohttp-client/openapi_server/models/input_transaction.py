# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.additional_currencies import AdditionalCurrencies
from openapi_server.models.custom_fields import CustomFields
from openapi_server.models.evidence import Evidence
from openapi_server.models.input_transaction_line import InputTransactionLine
from openapi_server.models.invoice_address import InvoiceAddress
from openapi_server.models.tax_data_schema import TaxDataSchema
from openapi_server import util


class InputTransaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_currencies: AdditionalCurrencies=None, billing_country_code: str=None, buyer_credit_card_prefix: str=None, buyer_email: str=None, buyer_ip: str=None, buyer_name: str=None, buyer_tax_number: str=None, comments: str=None, currency_code: str=None, custom_data: str=None, custom_fields: List[CustomFields]=None, custom_id: str=None, customer_id: str=None, description: str=None, evidence: Evidence=None, force_country_code: str=None, invoice_address: InvoiceAddress=None, invoice_date: str=None, invoice_number: str=None, invoice_place: str=None, note: str=None, order_date: str=None, original_transaction_key: str=None, status: str=None, sub_account_id: str=None, supply_date: str=None, tax_country_code: str=None, tax_data: TaxDataSchema=None, tax_deducted: bool=None, transaction_lines: List[InputTransactionLine]=None, verification_token: str=None):
        """InputTransaction - a model defined in OpenAPI

        :param additional_currencies: The additional_currencies of this InputTransaction.
        :param billing_country_code: The billing_country_code of this InputTransaction.
        :param buyer_credit_card_prefix: The buyer_credit_card_prefix of this InputTransaction.
        :param buyer_email: The buyer_email of this InputTransaction.
        :param buyer_ip: The buyer_ip of this InputTransaction.
        :param buyer_name: The buyer_name of this InputTransaction.
        :param buyer_tax_number: The buyer_tax_number of this InputTransaction.
        :param comments: The comments of this InputTransaction.
        :param currency_code: The currency_code of this InputTransaction.
        :param custom_data: The custom_data of this InputTransaction.
        :param custom_fields: The custom_fields of this InputTransaction.
        :param custom_id: The custom_id of this InputTransaction.
        :param customer_id: The customer_id of this InputTransaction.
        :param description: The description of this InputTransaction.
        :param evidence: The evidence of this InputTransaction.
        :param force_country_code: The force_country_code of this InputTransaction.
        :param invoice_address: The invoice_address of this InputTransaction.
        :param invoice_date: The invoice_date of this InputTransaction.
        :param invoice_number: The invoice_number of this InputTransaction.
        :param invoice_place: The invoice_place of this InputTransaction.
        :param note: The note of this InputTransaction.
        :param order_date: The order_date of this InputTransaction.
        :param original_transaction_key: The original_transaction_key of this InputTransaction.
        :param status: The status of this InputTransaction.
        :param sub_account_id: The sub_account_id of this InputTransaction.
        :param supply_date: The supply_date of this InputTransaction.
        :param tax_country_code: The tax_country_code of this InputTransaction.
        :param tax_data: The tax_data of this InputTransaction.
        :param tax_deducted: The tax_deducted of this InputTransaction.
        :param transaction_lines: The transaction_lines of this InputTransaction.
        :param verification_token: The verification_token of this InputTransaction.
        """
        self.openapi_types = {
            'additional_currencies': AdditionalCurrencies,
            'billing_country_code': str,
            'buyer_credit_card_prefix': str,
            'buyer_email': str,
            'buyer_ip': str,
            'buyer_name': str,
            'buyer_tax_number': str,
            'comments': str,
            'currency_code': str,
            'custom_data': str,
            'custom_fields': List[CustomFields],
            'custom_id': str,
            'customer_id': str,
            'description': str,
            'evidence': Evidence,
            'force_country_code': str,
            'invoice_address': InvoiceAddress,
            'invoice_date': str,
            'invoice_number': str,
            'invoice_place': str,
            'note': str,
            'order_date': str,
            'original_transaction_key': str,
            'status': str,
            'sub_account_id': str,
            'supply_date': str,
            'tax_country_code': str,
            'tax_data': TaxDataSchema,
            'tax_deducted': bool,
            'transaction_lines': List[InputTransactionLine],
            'verification_token': str
        }

        self.attribute_map = {
            'additional_currencies': 'additional_currencies',
            'billing_country_code': 'billing_country_code',
            'buyer_credit_card_prefix': 'buyer_credit_card_prefix',
            'buyer_email': 'buyer_email',
            'buyer_ip': 'buyer_ip',
            'buyer_name': 'buyer_name',
            'buyer_tax_number': 'buyer_tax_number',
            'comments': 'comments',
            'currency_code': 'currency_code',
            'custom_data': 'custom_data',
            'custom_fields': 'custom_fields',
            'custom_id': 'custom_id',
            'customer_id': 'customer_id',
            'description': 'description',
            'evidence': 'evidence',
            'force_country_code': 'force_country_code',
            'invoice_address': 'invoice_address',
            'invoice_date': 'invoice_date',
            'invoice_number': 'invoice_number',
            'invoice_place': 'invoice_place',
            'note': 'note',
            'order_date': 'order_date',
            'original_transaction_key': 'original_transaction_key',
            'status': 'status',
            'sub_account_id': 'sub_account_id',
            'supply_date': 'supply_date',
            'tax_country_code': 'tax_country_code',
            'tax_data': 'tax_data',
            'tax_deducted': 'tax_deducted',
            'transaction_lines': 'transaction_lines',
            'verification_token': 'verification_token'
        }

        self._additional_currencies = additional_currencies
        self._billing_country_code = billing_country_code
        self._buyer_credit_card_prefix = buyer_credit_card_prefix
        self._buyer_email = buyer_email
        self._buyer_ip = buyer_ip
        self._buyer_name = buyer_name
        self._buyer_tax_number = buyer_tax_number
        self._comments = comments
        self._currency_code = currency_code
        self._custom_data = custom_data
        self._custom_fields = custom_fields
        self._custom_id = custom_id
        self._customer_id = customer_id
        self._description = description
        self._evidence = evidence
        self._force_country_code = force_country_code
        self._invoice_address = invoice_address
        self._invoice_date = invoice_date
        self._invoice_number = invoice_number
        self._invoice_place = invoice_place
        self._note = note
        self._order_date = order_date
        self._original_transaction_key = original_transaction_key
        self._status = status
        self._sub_account_id = sub_account_id
        self._supply_date = supply_date
        self._tax_country_code = tax_country_code
        self._tax_data = tax_data
        self._tax_deducted = tax_deducted
        self._transaction_lines = transaction_lines
        self._verification_token = verification_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'InputTransaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The input_transaction of this InputTransaction.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_currencies(self):
        """Gets the additional_currencies of this InputTransaction.


        :return: The additional_currencies of this InputTransaction.
        :rtype: AdditionalCurrencies
        """
        return self._additional_currencies

    @additional_currencies.setter
    def additional_currencies(self, additional_currencies):
        """Sets the additional_currencies of this InputTransaction.


        :param additional_currencies: The additional_currencies of this InputTransaction.
        :type additional_currencies: AdditionalCurrencies
        """

        self._additional_currencies = additional_currencies

    @property
    def billing_country_code(self):
        """Gets the billing_country_code of this InputTransaction.

        Billing two letter ISO country code.

        :return: The billing_country_code of this InputTransaction.
        :rtype: str
        """
        return self._billing_country_code

    @billing_country_code.setter
    def billing_country_code(self, billing_country_code):
        """Sets the billing_country_code of this InputTransaction.

        Billing two letter ISO country code.

        :param billing_country_code: The billing_country_code of this InputTransaction.
        :type billing_country_code: str
        """

        self._billing_country_code = billing_country_code

    @property
    def buyer_credit_card_prefix(self):
        """Gets the buyer_credit_card_prefix of this InputTransaction.

        First 6 digits of buyer's credit card prefix.

        :return: The buyer_credit_card_prefix of this InputTransaction.
        :rtype: str
        """
        return self._buyer_credit_card_prefix

    @buyer_credit_card_prefix.setter
    def buyer_credit_card_prefix(self, buyer_credit_card_prefix):
        """Sets the buyer_credit_card_prefix of this InputTransaction.

        First 6 digits of buyer's credit card prefix.

        :param buyer_credit_card_prefix: The buyer_credit_card_prefix of this InputTransaction.
        :type buyer_credit_card_prefix: str
        """

        self._buyer_credit_card_prefix = buyer_credit_card_prefix

    @property
    def buyer_email(self):
        """Gets the buyer_email of this InputTransaction.

        Buyer's declared email address.

        :return: The buyer_email of this InputTransaction.
        :rtype: str
        """
        return self._buyer_email

    @buyer_email.setter
    def buyer_email(self, buyer_email):
        """Sets the buyer_email of this InputTransaction.

        Buyer's declared email address.

        :param buyer_email: The buyer_email of this InputTransaction.
        :type buyer_email: str
        """

        self._buyer_email = buyer_email

    @property
    def buyer_ip(self):
        """Gets the buyer_ip of this InputTransaction.

        IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).

        :return: The buyer_ip of this InputTransaction.
        :rtype: str
        """
        return self._buyer_ip

    @buyer_ip.setter
    def buyer_ip(self, buyer_ip):
        """Sets the buyer_ip of this InputTransaction.

        IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).

        :param buyer_ip: The buyer_ip of this InputTransaction.
        :type buyer_ip: str
        """

        self._buyer_ip = buyer_ip

    @property
    def buyer_name(self):
        """Gets the buyer_name of this InputTransaction.

        Buyer's name - first name and last name or company name.

        :return: The buyer_name of this InputTransaction.
        :rtype: str
        """
        return self._buyer_name

    @buyer_name.setter
    def buyer_name(self, buyer_name):
        """Sets the buyer_name of this InputTransaction.

        Buyer's name - first name and last name or company name.

        :param buyer_name: The buyer_name of this InputTransaction.
        :type buyer_name: str
        """

        self._buyer_name = buyer_name

    @property
    def buyer_tax_number(self):
        """Gets the buyer_tax_number of this InputTransaction.

         Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.

        :return: The buyer_tax_number of this InputTransaction.
        :rtype: str
        """
        return self._buyer_tax_number

    @buyer_tax_number.setter
    def buyer_tax_number(self, buyer_tax_number):
        """Sets the buyer_tax_number of this InputTransaction.

         Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.

        :param buyer_tax_number: The buyer_tax_number of this InputTransaction.
        :type buyer_tax_number: str
        """

        self._buyer_tax_number = buyer_tax_number

    @property
    def comments(self):
        """Gets the comments of this InputTransaction.

        Additional information about the transaction - for example if the evidence has been amended.

        :return: The comments of this InputTransaction.
        :rtype: str
        """
        return self._comments

    @comments.setter
    def comments(self, comments):
        """Sets the comments of this InputTransaction.

        Additional information about the transaction - for example if the evidence has been amended.

        :param comments: The comments of this InputTransaction.
        :type comments: str
        """

        self._comments = comments

    @property
    def currency_code(self):
        """Gets the currency_code of this InputTransaction.

        Currency code for transaction - e.g. EUR.

        :return: The currency_code of this InputTransaction.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this InputTransaction.

        Currency code for transaction - e.g. EUR.

        :param currency_code: The currency_code of this InputTransaction.
        :type currency_code: str
        """
        if currency_code is None:
            raise ValueError("Invalid value for `currency_code`, must not be `None`")

        self._currency_code = currency_code

    @property
    def custom_data(self):
        """Gets the custom_data of this InputTransaction.

        Custom data related to transaction.

        :return: The custom_data of this InputTransaction.
        :rtype: str
        """
        return self._custom_data

    @custom_data.setter
    def custom_data(self, custom_data):
        """Sets the custom_data of this InputTransaction.

        Custom data related to transaction.

        :param custom_data: The custom_data of this InputTransaction.
        :type custom_data: str
        """

        self._custom_data = custom_data

    @property
    def custom_fields(self):
        """Gets the custom_fields of this InputTransaction.

        Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.

        :return: The custom_fields of this InputTransaction.
        :rtype: List[CustomFields]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields):
        """Sets the custom_fields of this InputTransaction.

        Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.

        :param custom_fields: The custom_fields of this InputTransaction.
        :type custom_fields: List[CustomFields]
        """

        self._custom_fields = custom_fields

    @property
    def custom_id(self):
        """Gets the custom_id of this InputTransaction.

        Custom identifier provided upon transaction creation.

        :return: The custom_id of this InputTransaction.
        :rtype: str
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id):
        """Sets the custom_id of this InputTransaction.

        Custom identifier provided upon transaction creation.

        :param custom_id: The custom_id of this InputTransaction.
        :type custom_id: str
        """

        self._custom_id = custom_id

    @property
    def customer_id(self):
        """Gets the customer_id of this InputTransaction.

        Free-form field for storing customer id.

        :return: The customer_id of this InputTransaction.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this InputTransaction.

        Free-form field for storing customer id.

        :param customer_id: The customer_id of this InputTransaction.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def description(self):
        """Gets the description of this InputTransaction.

        Transaction description.

        :return: The description of this InputTransaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InputTransaction.

        Transaction description.

        :param description: The description of this InputTransaction.
        :type description: str
        """

        self._description = description

    @property
    def evidence(self):
        """Gets the evidence of this InputTransaction.


        :return: The evidence of this InputTransaction.
        :rtype: Evidence
        """
        return self._evidence

    @evidence.setter
    def evidence(self, evidence):
        """Sets the evidence of this InputTransaction.


        :param evidence: The evidence of this InputTransaction.
        :type evidence: Evidence
        """

        self._evidence = evidence

    @property
    def force_country_code(self):
        """Gets the force_country_code of this InputTransaction.

        Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.

        :return: The force_country_code of this InputTransaction.
        :rtype: str
        """
        return self._force_country_code

    @force_country_code.setter
    def force_country_code(self, force_country_code):
        """Sets the force_country_code of this InputTransaction.

        Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.

        :param force_country_code: The force_country_code of this InputTransaction.
        :type force_country_code: str
        """

        self._force_country_code = force_country_code

    @property
    def invoice_address(self):
        """Gets the invoice_address of this InputTransaction.


        :return: The invoice_address of this InputTransaction.
        :rtype: InvoiceAddress
        """
        return self._invoice_address

    @invoice_address.setter
    def invoice_address(self, invoice_address):
        """Sets the invoice_address of this InputTransaction.


        :param invoice_address: The invoice_address of this InputTransaction.
        :type invoice_address: InvoiceAddress
        """

        self._invoice_address = invoice_address

    @property
    def invoice_date(self):
        """Gets the invoice_date of this InputTransaction.

        Invoice date of issue.

        :return: The invoice_date of this InputTransaction.
        :rtype: str
        """
        return self._invoice_date

    @invoice_date.setter
    def invoice_date(self, invoice_date):
        """Sets the invoice_date of this InputTransaction.

        Invoice date of issue.

        :param invoice_date: The invoice_date of this InputTransaction.
        :type invoice_date: str
        """

        self._invoice_date = invoice_date

    @property
    def invoice_number(self):
        """Gets the invoice_number of this InputTransaction.

        Invoice number.

        :return: The invoice_number of this InputTransaction.
        :rtype: str
        """
        return self._invoice_number

    @invoice_number.setter
    def invoice_number(self, invoice_number):
        """Sets the invoice_number of this InputTransaction.

        Invoice number.

        :param invoice_number: The invoice_number of this InputTransaction.
        :type invoice_number: str
        """

        self._invoice_number = invoice_number

    @property
    def invoice_place(self):
        """Gets the invoice_place of this InputTransaction.

        Invoice place of issue.

        :return: The invoice_place of this InputTransaction.
        :rtype: str
        """
        return self._invoice_place

    @invoice_place.setter
    def invoice_place(self, invoice_place):
        """Sets the invoice_place of this InputTransaction.

        Invoice place of issue.

        :param invoice_place: The invoice_place of this InputTransaction.
        :type invoice_place: str
        """

        self._invoice_place = invoice_place

    @property
    def note(self):
        """Gets the note of this InputTransaction.

        Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.

        :return: The note of this InputTransaction.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note):
        """Sets the note of this InputTransaction.

        Additional note related to transaction state - for example if the transaction was created in a 'catch-all' mode or the VAT number re-check for subscriptions has failed.

        :param note: The note of this InputTransaction.
        :type note: str
        """

        self._note = note

    @property
    def order_date(self):
        """Gets the order_date of this InputTransaction.

        Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.

        :return: The order_date of this InputTransaction.
        :rtype: str
        """
        return self._order_date

    @order_date.setter
    def order_date(self, order_date):
        """Sets the order_date of this InputTransaction.

        Order date in yyyy-MM-dd format, in merchant's timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.

        :param order_date: The order_date of this InputTransaction.
        :type order_date: str
        """

        self._order_date = order_date

    @property
    def original_transaction_key(self):
        """Gets the original_transaction_key of this InputTransaction.

        Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.

        :return: The original_transaction_key of this InputTransaction.
        :rtype: str
        """
        return self._original_transaction_key

    @original_transaction_key.setter
    def original_transaction_key(self, original_transaction_key):
        """Sets the original_transaction_key of this InputTransaction.

        Use data and evidence from original transaction. Tax will be re-calculated, but evidence won't be re-checked. This parameter is taken into account only when 'manual' flag is raised.

        :param original_transaction_key: The original_transaction_key of this InputTransaction.
        :type original_transaction_key: str
        """

        self._original_transaction_key = original_transaction_key

    @property
    def status(self):
        """Gets the status of this InputTransaction.

        Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.

        :return: The status of this InputTransaction.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InputTransaction.

        Transaction status: 'N' - new, 'C' - confirmed. Can use 'C' in store-transaction! with private-token to create confirmed transaction, otherwise 'N' is default status. Not applicable for update-transaction!.

        :param status: The status of this InputTransaction.
        :type status: str
        """

        self._status = status

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this InputTransaction.

        Sub account identifier.

        :return: The sub_account_id of this InputTransaction.
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this InputTransaction.

        Sub account identifier.

        :param sub_account_id: The sub_account_id of this InputTransaction.
        :type sub_account_id: str
        """

        self._sub_account_id = sub_account_id

    @property
    def supply_date(self):
        """Gets the supply_date of this InputTransaction.

        Supply date in yyyy-MM-dd format.

        :return: The supply_date of this InputTransaction.
        :rtype: str
        """
        return self._supply_date

    @supply_date.setter
    def supply_date(self, supply_date):
        """Sets the supply_date of this InputTransaction.

        Supply date in yyyy-MM-dd format.

        :param supply_date: The supply_date of this InputTransaction.
        :type supply_date: str
        """

        self._supply_date = supply_date

    @property
    def tax_country_code(self):
        """Gets the tax_country_code of this InputTransaction.

        Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.

        :return: The tax_country_code of this InputTransaction.
        :rtype: str
        """
        return self._tax_country_code

    @tax_country_code.setter
    def tax_country_code(self, tax_country_code):
        """Sets the tax_country_code of this InputTransaction.

        Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.

        :param tax_country_code: The tax_country_code of this InputTransaction.
        :type tax_country_code: str
        """

        self._tax_country_code = tax_country_code

    @property
    def tax_data(self):
        """Gets the tax_data of this InputTransaction.


        :return: The tax_data of this InputTransaction.
        :rtype: TaxDataSchema
        """
        return self._tax_data

    @tax_data.setter
    def tax_data(self, tax_data):
        """Sets the tax_data of this InputTransaction.


        :param tax_data: The tax_data of this InputTransaction.
        :type tax_data: TaxDataSchema
        """

        self._tax_data = tax_data

    @property
    def tax_deducted(self):
        """Gets the tax_deducted of this InputTransaction.

        True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.

        :return: The tax_deducted of this InputTransaction.
        :rtype: bool
        """
        return self._tax_deducted

    @tax_deducted.setter
    def tax_deducted(self, tax_deducted):
        """Sets the tax_deducted of this InputTransaction.

        True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.

        :param tax_deducted: The tax_deducted of this InputTransaction.
        :type tax_deducted: bool
        """

        self._tax_deducted = tax_deducted

    @property
    def transaction_lines(self):
        """Gets the transaction_lines of this InputTransaction.

        Transaction lines.

        :return: The transaction_lines of this InputTransaction.
        :rtype: List[InputTransactionLine]
        """
        return self._transaction_lines

    @transaction_lines.setter
    def transaction_lines(self, transaction_lines):
        """Sets the transaction_lines of this InputTransaction.

        Transaction lines.

        :param transaction_lines: The transaction_lines of this InputTransaction.
        :type transaction_lines: List[InputTransactionLine]
        """
        if transaction_lines is None:
            raise ValueError("Invalid value for `transaction_lines`, must not be `None`")

        self._transaction_lines = transaction_lines

    @property
    def verification_token(self):
        """Gets the verification_token of this InputTransaction.

        Verification token

        :return: The verification_token of this InputTransaction.
        :rtype: str
        """
        return self._verification_token

    @verification_token.setter
    def verification_token(self, verification_token):
        """Sets the verification_token of this InputTransaction.

        Verification token

        :param verification_token: The verification_token of this InputTransaction.
        :type verification_token: str
        """

        self._verification_token = verification_token
