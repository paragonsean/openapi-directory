# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ValidateTaxNumberOut(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, billing_country_code: str=None, buyer_tax_number: str=None, buyer_tax_number_valid: bool=None, tax_deducted: bool=None):
        """ValidateTaxNumberOut - a model defined in OpenAPI

        :param billing_country_code: The billing_country_code of this ValidateTaxNumberOut.
        :param buyer_tax_number: The buyer_tax_number of this ValidateTaxNumberOut.
        :param buyer_tax_number_valid: The buyer_tax_number_valid of this ValidateTaxNumberOut.
        :param tax_deducted: The tax_deducted of this ValidateTaxNumberOut.
        """
        self.openapi_types = {
            'billing_country_code': str,
            'buyer_tax_number': str,
            'buyer_tax_number_valid': bool,
            'tax_deducted': bool
        }

        self.attribute_map = {
            'billing_country_code': 'billing_country_code',
            'buyer_tax_number': 'buyer_tax_number',
            'buyer_tax_number_valid': 'buyer_tax_number_valid',
            'tax_deducted': 'tax_deducted'
        }

        self._billing_country_code = billing_country_code
        self._buyer_tax_number = buyer_tax_number
        self._buyer_tax_number_valid = buyer_tax_number_valid
        self._tax_deducted = tax_deducted

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ValidateTaxNumberOut':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The validateTaxNumberOut of this ValidateTaxNumberOut.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def billing_country_code(self):
        """Gets the billing_country_code of this ValidateTaxNumberOut.

        Billing two letter ISO country code.

        :return: The billing_country_code of this ValidateTaxNumberOut.
        :rtype: str
        """
        return self._billing_country_code

    @billing_country_code.setter
    def billing_country_code(self, billing_country_code):
        """Sets the billing_country_code of this ValidateTaxNumberOut.

        Billing two letter ISO country code.

        :param billing_country_code: The billing_country_code of this ValidateTaxNumberOut.
        :type billing_country_code: str
        """

        self._billing_country_code = billing_country_code

    @property
    def buyer_tax_number(self):
        """Gets the buyer_tax_number of this ValidateTaxNumberOut.

         Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.

        :return: The buyer_tax_number of this ValidateTaxNumberOut.
        :rtype: str
        """
        return self._buyer_tax_number

    @buyer_tax_number.setter
    def buyer_tax_number(self, buyer_tax_number):
        """Sets the buyer_tax_number of this ValidateTaxNumberOut.

         Buyer's tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.

        :param buyer_tax_number: The buyer_tax_number of this ValidateTaxNumberOut.
        :type buyer_tax_number: str
        """

        self._buyer_tax_number = buyer_tax_number

    @property
    def buyer_tax_number_valid(self):
        """Gets the buyer_tax_number_valid of this ValidateTaxNumberOut.

        If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.

        :return: The buyer_tax_number_valid of this ValidateTaxNumberOut.
        :rtype: bool
        """
        return self._buyer_tax_number_valid

    @buyer_tax_number_valid.setter
    def buyer_tax_number_valid(self, buyer_tax_number_valid):
        """Sets the buyer_tax_number_valid of this ValidateTaxNumberOut.

        If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant's country), tax number doesn't get validated in that case.

        :param buyer_tax_number_valid: The buyer_tax_number_valid of this ValidateTaxNumberOut.
        :type buyer_tax_number_valid: bool
        """

        self._buyer_tax_number_valid = buyer_tax_number_valid

    @property
    def tax_deducted(self):
        """Gets the tax_deducted of this ValidateTaxNumberOut.

        If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.

        :return: The tax_deducted of this ValidateTaxNumberOut.
        :rtype: bool
        """
        return self._tax_deducted

    @tax_deducted.setter
    def tax_deducted(self, tax_deducted):
        """Sets the tax_deducted of this ValidateTaxNumberOut.

        If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.

        :param tax_deducted: The tax_deducted of this ValidateTaxNumberOut.
        :type tax_deducted: bool
        """

        self._tax_deducted = tax_deducted
