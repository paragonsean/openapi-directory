# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AdditionalCurrency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount: float=None, currency_code: str=None, fx_rate: float=None, tax_amount: float=None, total_amount: float=None):
        """AdditionalCurrency - a model defined in OpenAPI

        :param amount: The amount of this AdditionalCurrency.
        :param currency_code: The currency_code of this AdditionalCurrency.
        :param fx_rate: The fx_rate of this AdditionalCurrency.
        :param tax_amount: The tax_amount of this AdditionalCurrency.
        :param total_amount: The total_amount of this AdditionalCurrency.
        """
        self.openapi_types = {
            'amount': float,
            'currency_code': str,
            'fx_rate': float,
            'tax_amount': float,
            'total_amount': float
        }

        self.attribute_map = {
            'amount': 'amount',
            'currency_code': 'currency_code',
            'fx_rate': 'fx_rate',
            'tax_amount': 'tax_amount',
            'total_amount': 'total_amount'
        }

        self._amount = amount
        self._currency_code = currency_code
        self._fx_rate = fx_rate
        self._tax_amount = tax_amount
        self._total_amount = total_amount

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AdditionalCurrency':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The additional_currency of this AdditionalCurrency.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self):
        """Gets the amount of this AdditionalCurrency.

        Amount (w/o TAX) in designated currency.

        :return: The amount of this AdditionalCurrency.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this AdditionalCurrency.

        Amount (w/o TAX) in designated currency.

        :param amount: The amount of this AdditionalCurrency.
        :type amount: float
        """

        self._amount = amount

    @property
    def currency_code(self):
        """Gets the currency_code of this AdditionalCurrency.

        3-letter ISO currency code.

        :return: The currency_code of this AdditionalCurrency.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code):
        """Sets the currency_code of this AdditionalCurrency.

        3-letter ISO currency code.

        :param currency_code: The currency_code of this AdditionalCurrency.
        :type currency_code: str
        """

        self._currency_code = currency_code

    @property
    def fx_rate(self):
        """Gets the fx_rate of this AdditionalCurrency.

        Foreign exchange rate used in calculation

        :return: The fx_rate of this AdditionalCurrency.
        :rtype: float
        """
        return self._fx_rate

    @fx_rate.setter
    def fx_rate(self, fx_rate):
        """Sets the fx_rate of this AdditionalCurrency.

        Foreign exchange rate used in calculation

        :param fx_rate: The fx_rate of this AdditionalCurrency.
        :type fx_rate: float
        """

        self._fx_rate = fx_rate

    @property
    def tax_amount(self):
        """Gets the tax_amount of this AdditionalCurrency.

        Tax amount in designated currency.

        :return: The tax_amount of this AdditionalCurrency.
        :rtype: float
        """
        return self._tax_amount

    @tax_amount.setter
    def tax_amount(self, tax_amount):
        """Sets the tax_amount of this AdditionalCurrency.

        Tax amount in designated currency.

        :param tax_amount: The tax_amount of this AdditionalCurrency.
        :type tax_amount: float
        """

        self._tax_amount = tax_amount

    @property
    def total_amount(self):
        """Gets the total_amount of this AdditionalCurrency.

        Total amount in designated currency.

        :return: The total_amount of this AdditionalCurrency.
        :rtype: float
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """Sets the total_amount of this AdditionalCurrency.

        Total amount in designated currency.

        :param total_amount: The total_amount of this AdditionalCurrency.
        :type total_amount: float
        """

        self._total_amount = total_amount
