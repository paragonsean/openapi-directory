/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.CountrySchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Countries
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Countries {
  public static final String SERIALIZED_NAME_BY2003_RULES = "by_2003_rules";
  @SerializedName(SERIALIZED_NAME_BY2003_RULES)
  private CountrySchema by2003Rules;

  public static final String SERIALIZED_NAME_BY_BILLING = "by_billing";
  @SerializedName(SERIALIZED_NAME_BY_BILLING)
  private CountrySchema byBilling;

  public static final String SERIALIZED_NAME_BY_CC = "by_cc";
  @SerializedName(SERIALIZED_NAME_BY_CC)
  private CountrySchema byCc;

  public static final String SERIALIZED_NAME_BY_IP = "by_ip";
  @SerializedName(SERIALIZED_NAME_BY_IP)
  private CountrySchema byIp;

  public static final String SERIALIZED_NAME_BY_TAX_NUMBER = "by_tax_number";
  @SerializedName(SERIALIZED_NAME_BY_TAX_NUMBER)
  private CountrySchema byTaxNumber;

  public static final String SERIALIZED_NAME_BY_TOKEN = "by_token";
  @SerializedName(SERIALIZED_NAME_BY_TOKEN)
  private CountrySchema byToken;

  public static final String SERIALIZED_NAME_DETECTED = "detected";
  @SerializedName(SERIALIZED_NAME_DETECTED)
  private CountrySchema detected;

  public static final String SERIALIZED_NAME_FORCED = "forced";
  @SerializedName(SERIALIZED_NAME_FORCED)
  private CountrySchema forced;

  public static final String SERIALIZED_NAME_GUESSED_FROM_IP = "guessed_from_ip";
  @SerializedName(SERIALIZED_NAME_GUESSED_FROM_IP)
  private CountrySchema guessedFromIp;

  public static final String SERIALIZED_NAME_OTHER_COMMERCIALLY_RELEVANT_INFO = "other_commercially_relevant_info";
  @SerializedName(SERIALIZED_NAME_OTHER_COMMERCIALLY_RELEVANT_INFO)
  private CountrySchema otherCommerciallyRelevantInfo;

  public static final String SERIALIZED_NAME_SELF_DECLARATION = "self_declaration";
  @SerializedName(SERIALIZED_NAME_SELF_DECLARATION)
  private CountrySchema selfDeclaration;

  public Countries() {
  }

  public Countries by2003Rules(CountrySchema by2003Rules) {
    this.by2003Rules = by2003Rules;
    return this;
  }

  /**
   * Get by2003Rules
   * @return by2003Rules
   */
  @javax.annotation.Nullable
  public CountrySchema getBy2003Rules() {
    return by2003Rules;
  }

  public void setBy2003Rules(CountrySchema by2003Rules) {
    this.by2003Rules = by2003Rules;
  }


  public Countries byBilling(CountrySchema byBilling) {
    this.byBilling = byBilling;
    return this;
  }

  /**
   * Get byBilling
   * @return byBilling
   */
  @javax.annotation.Nullable
  public CountrySchema getByBilling() {
    return byBilling;
  }

  public void setByBilling(CountrySchema byBilling) {
    this.byBilling = byBilling;
  }


  public Countries byCc(CountrySchema byCc) {
    this.byCc = byCc;
    return this;
  }

  /**
   * Get byCc
   * @return byCc
   */
  @javax.annotation.Nullable
  public CountrySchema getByCc() {
    return byCc;
  }

  public void setByCc(CountrySchema byCc) {
    this.byCc = byCc;
  }


  public Countries byIp(CountrySchema byIp) {
    this.byIp = byIp;
    return this;
  }

  /**
   * Get byIp
   * @return byIp
   */
  @javax.annotation.Nullable
  public CountrySchema getByIp() {
    return byIp;
  }

  public void setByIp(CountrySchema byIp) {
    this.byIp = byIp;
  }


  public Countries byTaxNumber(CountrySchema byTaxNumber) {
    this.byTaxNumber = byTaxNumber;
    return this;
  }

  /**
   * Get byTaxNumber
   * @return byTaxNumber
   */
  @javax.annotation.Nullable
  public CountrySchema getByTaxNumber() {
    return byTaxNumber;
  }

  public void setByTaxNumber(CountrySchema byTaxNumber) {
    this.byTaxNumber = byTaxNumber;
  }


  public Countries byToken(CountrySchema byToken) {
    this.byToken = byToken;
    return this;
  }

  /**
   * Get byToken
   * @return byToken
   */
  @javax.annotation.Nullable
  public CountrySchema getByToken() {
    return byToken;
  }

  public void setByToken(CountrySchema byToken) {
    this.byToken = byToken;
  }


  public Countries detected(CountrySchema detected) {
    this.detected = detected;
    return this;
  }

  /**
   * Get detected
   * @return detected
   */
  @javax.annotation.Nullable
  public CountrySchema getDetected() {
    return detected;
  }

  public void setDetected(CountrySchema detected) {
    this.detected = detected;
  }


  public Countries forced(CountrySchema forced) {
    this.forced = forced;
    return this;
  }

  /**
   * Get forced
   * @return forced
   */
  @javax.annotation.Nullable
  public CountrySchema getForced() {
    return forced;
  }

  public void setForced(CountrySchema forced) {
    this.forced = forced;
  }


  public Countries guessedFromIp(CountrySchema guessedFromIp) {
    this.guessedFromIp = guessedFromIp;
    return this;
  }

  /**
   * Get guessedFromIp
   * @return guessedFromIp
   */
  @javax.annotation.Nullable
  public CountrySchema getGuessedFromIp() {
    return guessedFromIp;
  }

  public void setGuessedFromIp(CountrySchema guessedFromIp) {
    this.guessedFromIp = guessedFromIp;
  }


  public Countries otherCommerciallyRelevantInfo(CountrySchema otherCommerciallyRelevantInfo) {
    this.otherCommerciallyRelevantInfo = otherCommerciallyRelevantInfo;
    return this;
  }

  /**
   * Get otherCommerciallyRelevantInfo
   * @return otherCommerciallyRelevantInfo
   */
  @javax.annotation.Nullable
  public CountrySchema getOtherCommerciallyRelevantInfo() {
    return otherCommerciallyRelevantInfo;
  }

  public void setOtherCommerciallyRelevantInfo(CountrySchema otherCommerciallyRelevantInfo) {
    this.otherCommerciallyRelevantInfo = otherCommerciallyRelevantInfo;
  }


  public Countries selfDeclaration(CountrySchema selfDeclaration) {
    this.selfDeclaration = selfDeclaration;
    return this;
  }

  /**
   * Get selfDeclaration
   * @return selfDeclaration
   */
  @javax.annotation.Nullable
  public CountrySchema getSelfDeclaration() {
    return selfDeclaration;
  }

  public void setSelfDeclaration(CountrySchema selfDeclaration) {
    this.selfDeclaration = selfDeclaration;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Countries countries = (Countries) o;
    return Objects.equals(this.by2003Rules, countries.by2003Rules) &&
        Objects.equals(this.byBilling, countries.byBilling) &&
        Objects.equals(this.byCc, countries.byCc) &&
        Objects.equals(this.byIp, countries.byIp) &&
        Objects.equals(this.byTaxNumber, countries.byTaxNumber) &&
        Objects.equals(this.byToken, countries.byToken) &&
        Objects.equals(this.detected, countries.detected) &&
        Objects.equals(this.forced, countries.forced) &&
        Objects.equals(this.guessedFromIp, countries.guessedFromIp) &&
        Objects.equals(this.otherCommerciallyRelevantInfo, countries.otherCommerciallyRelevantInfo) &&
        Objects.equals(this.selfDeclaration, countries.selfDeclaration);
  }

  @Override
  public int hashCode() {
    return Objects.hash(by2003Rules, byBilling, byCc, byIp, byTaxNumber, byToken, detected, forced, guessedFromIp, otherCommerciallyRelevantInfo, selfDeclaration);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Countries {\n");
    sb.append("    by2003Rules: ").append(toIndentedString(by2003Rules)).append("\n");
    sb.append("    byBilling: ").append(toIndentedString(byBilling)).append("\n");
    sb.append("    byCc: ").append(toIndentedString(byCc)).append("\n");
    sb.append("    byIp: ").append(toIndentedString(byIp)).append("\n");
    sb.append("    byTaxNumber: ").append(toIndentedString(byTaxNumber)).append("\n");
    sb.append("    byToken: ").append(toIndentedString(byToken)).append("\n");
    sb.append("    detected: ").append(toIndentedString(detected)).append("\n");
    sb.append("    forced: ").append(toIndentedString(forced)).append("\n");
    sb.append("    guessedFromIp: ").append(toIndentedString(guessedFromIp)).append("\n");
    sb.append("    otherCommerciallyRelevantInfo: ").append(toIndentedString(otherCommerciallyRelevantInfo)).append("\n");
    sb.append("    selfDeclaration: ").append(toIndentedString(selfDeclaration)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("by_2003_rules");
    openapiFields.add("by_billing");
    openapiFields.add("by_cc");
    openapiFields.add("by_ip");
    openapiFields.add("by_tax_number");
    openapiFields.add("by_token");
    openapiFields.add("detected");
    openapiFields.add("forced");
    openapiFields.add("guessed_from_ip");
    openapiFields.add("other_commercially_relevant_info");
    openapiFields.add("self_declaration");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Countries
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Countries.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Countries is not found in the empty JSON string", Countries.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Countries.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Countries` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `by_2003_rules`
      if (jsonObj.get("by_2003_rules") != null && !jsonObj.get("by_2003_rules").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("by_2003_rules"));
      }
      // validate the optional field `by_billing`
      if (jsonObj.get("by_billing") != null && !jsonObj.get("by_billing").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("by_billing"));
      }
      // validate the optional field `by_cc`
      if (jsonObj.get("by_cc") != null && !jsonObj.get("by_cc").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("by_cc"));
      }
      // validate the optional field `by_ip`
      if (jsonObj.get("by_ip") != null && !jsonObj.get("by_ip").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("by_ip"));
      }
      // validate the optional field `by_tax_number`
      if (jsonObj.get("by_tax_number") != null && !jsonObj.get("by_tax_number").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("by_tax_number"));
      }
      // validate the optional field `by_token`
      if (jsonObj.get("by_token") != null && !jsonObj.get("by_token").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("by_token"));
      }
      // validate the optional field `detected`
      if (jsonObj.get("detected") != null && !jsonObj.get("detected").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("detected"));
      }
      // validate the optional field `forced`
      if (jsonObj.get("forced") != null && !jsonObj.get("forced").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("forced"));
      }
      // validate the optional field `guessed_from_ip`
      if (jsonObj.get("guessed_from_ip") != null && !jsonObj.get("guessed_from_ip").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("guessed_from_ip"));
      }
      // validate the optional field `other_commercially_relevant_info`
      if (jsonObj.get("other_commercially_relevant_info") != null && !jsonObj.get("other_commercially_relevant_info").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("other_commercially_relevant_info"));
      }
      // validate the optional field `self_declaration`
      if (jsonObj.get("self_declaration") != null && !jsonObj.get("self_declaration").isJsonNull()) {
        CountrySchema.validateJsonElement(jsonObj.get("self_declaration"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Countries.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Countries' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Countries> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Countries.class));

       return (TypeAdapter<T>) new TypeAdapter<Countries>() {
           @Override
           public void write(JsonWriter out, Countries value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Countries read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Countries given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Countries
   * @throws IOException if the JSON string is invalid with respect to Countries
   */
  public static Countries fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Countries.class);
  }

  /**
   * Convert an instance of Countries to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

