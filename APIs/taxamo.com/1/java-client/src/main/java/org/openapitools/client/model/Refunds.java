/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Refunds
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Refunds {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_INFORMATIVE = "informative";
  @SerializedName(SERIALIZED_NAME_INFORMATIVE)
  private Boolean informative;

  public static final String SERIALIZED_NAME_LINE_KEY = "line_key";
  @SerializedName(SERIALIZED_NAME_LINE_KEY)
  private String lineKey;

  public static final String SERIALIZED_NAME_REFUND_NOTE_NUMBER = "refund_note_number";
  @SerializedName(SERIALIZED_NAME_REFUND_NOTE_NUMBER)
  private String refundNoteNumber;

  public static final String SERIALIZED_NAME_REFUND_NOTE_URL = "refund_note_url";
  @SerializedName(SERIALIZED_NAME_REFUND_NOTE_URL)
  private String refundNoteUrl;

  public static final String SERIALIZED_NAME_REFUND_REASON = "refund_reason";
  @SerializedName(SERIALIZED_NAME_REFUND_REASON)
  private String refundReason;

  public static final String SERIALIZED_NAME_REFUND_TIMESTAMP = "refund_timestamp";
  @SerializedName(SERIALIZED_NAME_REFUND_TIMESTAMP)
  private String refundTimestamp;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public Refunds() {
  }

  public Refunds amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount, excluding tax, that was refunded.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Refunds informative(Boolean informative) {
    this.informative = informative;
    return this;
  }

  /**
   * Was this refund applied to an informative line?
   * @return informative
   */
  @javax.annotation.Nullable
  public Boolean getInformative() {
    return informative;
  }

  public void setInformative(Boolean informative) {
    this.informative = informative;
  }


  public Refunds lineKey(String lineKey) {
    this.lineKey = lineKey;
    return this;
  }

  /**
   * Line identifier. If neither line key or custom id is provided, the refund amount will be assigned to lines in order.
   * @return lineKey
   */
  @javax.annotation.Nullable
  public String getLineKey() {
    return lineKey;
  }

  public void setLineKey(String lineKey) {
    this.lineKey = lineKey;
  }


  public Refunds refundNoteNumber(String refundNoteNumber) {
    this.refundNoteNumber = refundNoteNumber;
    return this;
  }

  /**
   * Sequential refund note number.
   * @return refundNoteNumber
   */
  @javax.annotation.Nullable
  public String getRefundNoteNumber() {
    return refundNoteNumber;
  }

  public void setRefundNoteNumber(String refundNoteNumber) {
    this.refundNoteNumber = refundNoteNumber;
  }


  public Refunds refundNoteUrl(String refundNoteUrl) {
    this.refundNoteUrl = refundNoteUrl;
    return this;
  }

  /**
   * Refund note image url.
   * @return refundNoteUrl
   */
  @javax.annotation.Nullable
  public String getRefundNoteUrl() {
    return refundNoteUrl;
  }

  public void setRefundNoteUrl(String refundNoteUrl) {
    this.refundNoteUrl = refundNoteUrl;
  }


  public Refunds refundReason(String refundReason) {
    this.refundReason = refundReason;
    return this;
  }

  /**
   * Refund reason, displayed on the credit note.
   * @return refundReason
   */
  @javax.annotation.Nullable
  public String getRefundReason() {
    return refundReason;
  }

  public void setRefundReason(String refundReason) {
    this.refundReason = refundReason;
  }


  public Refunds refundTimestamp(String refundTimestamp) {
    this.refundTimestamp = refundTimestamp;
    return this;
  }

  /**
   * Refund timestamp in UTC timezone.
   * @return refundTimestamp
   */
  @javax.annotation.Nullable
  public String getRefundTimestamp() {
    return refundTimestamp;
  }

  public void setRefundTimestamp(String refundTimestamp) {
    this.refundTimestamp = refundTimestamp;
  }


  public Refunds taxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Calculated tax amount, that was refunded.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public Refunds taxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Tax rate for the line that was used for the refund calculation.
   * @return taxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public Refunds totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount, including tax, that was refunded.
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Refunds refunds = (Refunds) o;
    return Objects.equals(this.amount, refunds.amount) &&
        Objects.equals(this.informative, refunds.informative) &&
        Objects.equals(this.lineKey, refunds.lineKey) &&
        Objects.equals(this.refundNoteNumber, refunds.refundNoteNumber) &&
        Objects.equals(this.refundNoteUrl, refunds.refundNoteUrl) &&
        Objects.equals(this.refundReason, refunds.refundReason) &&
        Objects.equals(this.refundTimestamp, refunds.refundTimestamp) &&
        Objects.equals(this.taxAmount, refunds.taxAmount) &&
        Objects.equals(this.taxRate, refunds.taxRate) &&
        Objects.equals(this.totalAmount, refunds.totalAmount);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, informative, lineKey, refundNoteNumber, refundNoteUrl, refundReason, refundTimestamp, taxAmount, taxRate, totalAmount);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Refunds {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    informative: ").append(toIndentedString(informative)).append("\n");
    sb.append("    lineKey: ").append(toIndentedString(lineKey)).append("\n");
    sb.append("    refundNoteNumber: ").append(toIndentedString(refundNoteNumber)).append("\n");
    sb.append("    refundNoteUrl: ").append(toIndentedString(refundNoteUrl)).append("\n");
    sb.append("    refundReason: ").append(toIndentedString(refundReason)).append("\n");
    sb.append("    refundTimestamp: ").append(toIndentedString(refundTimestamp)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("informative");
    openapiFields.add("line_key");
    openapiFields.add("refund_note_number");
    openapiFields.add("refund_note_url");
    openapiFields.add("refund_reason");
    openapiFields.add("refund_timestamp");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_rate");
    openapiFields.add("total_amount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Refunds
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Refunds.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Refunds is not found in the empty JSON string", Refunds.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Refunds.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Refunds` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("line_key") != null && !jsonObj.get("line_key").isJsonNull()) && !jsonObj.get("line_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_key").toString()));
      }
      if ((jsonObj.get("refund_note_number") != null && !jsonObj.get("refund_note_number").isJsonNull()) && !jsonObj.get("refund_note_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_note_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_note_number").toString()));
      }
      if ((jsonObj.get("refund_note_url") != null && !jsonObj.get("refund_note_url").isJsonNull()) && !jsonObj.get("refund_note_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_note_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_note_url").toString()));
      }
      if ((jsonObj.get("refund_reason") != null && !jsonObj.get("refund_reason").isJsonNull()) && !jsonObj.get("refund_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_reason").toString()));
      }
      if ((jsonObj.get("refund_timestamp") != null && !jsonObj.get("refund_timestamp").isJsonNull()) && !jsonObj.get("refund_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refund_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refund_timestamp").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Refunds.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Refunds' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Refunds> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Refunds.class));

       return (TypeAdapter<T>) new TypeAdapter<Refunds>() {
           @Override
           public void write(JsonWriter out, Refunds value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Refunds read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Refunds given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Refunds
   * @throws IOException if the JSON string is invalid with respect to Refunds
   */
  public static Refunds fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Refunds.class);
  }

  /**
   * Convert an instance of Refunds to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

