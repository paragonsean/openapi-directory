/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Countries;
import org.openapitools.client.model.Evidence;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalculateTaxLocationOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculateTaxLocationOut {
  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "billing_country_code";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX = "buyer_credit_card_prefix";
  @SerializedName(SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX)
  private String buyerCreditCardPrefix;

  public static final String SERIALIZED_NAME_BUYER_IP = "buyer_ip";
  @SerializedName(SERIALIZED_NAME_BUYER_IP)
  private String buyerIp;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private Countries countries;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private Evidence evidence;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_CODE = "tax_country_code";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_CODE)
  private String taxCountryCode;

  public static final String SERIALIZED_NAME_TAX_DEDUCTED = "tax_deducted";
  @SerializedName(SERIALIZED_NAME_TAX_DEDUCTED)
  private Boolean taxDeducted;

  public static final String SERIALIZED_NAME_TAX_SUPPORTED = "tax_supported";
  @SerializedName(SERIALIZED_NAME_TAX_SUPPORTED)
  private Boolean taxSupported;

  public CalculateTaxLocationOut() {
  }

  public CalculateTaxLocationOut billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Billing two letter ISO country code.
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public CalculateTaxLocationOut buyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
    return this;
  }

  /**
   * First 6 digits of buyer&#39;s credit card prefix.
   * @return buyerCreditCardPrefix
   */
  @javax.annotation.Nullable
  public String getBuyerCreditCardPrefix() {
    return buyerCreditCardPrefix;
  }

  public void setBuyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
  }


  public CalculateTaxLocationOut buyerIp(String buyerIp) {
    this.buyerIp = buyerIp;
    return this;
  }

  /**
   * IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
   * @return buyerIp
   */
  @javax.annotation.Nullable
  public String getBuyerIp() {
    return buyerIp;
  }

  public void setBuyerIp(String buyerIp) {
    this.buyerIp = buyerIp;
  }


  public CalculateTaxLocationOut countries(Countries countries) {
    this.countries = countries;
    return this;
  }

  /**
   * Get countries
   * @return countries
   */
  @javax.annotation.Nullable
  public Countries getCountries() {
    return countries;
  }

  public void setCountries(Countries countries) {
    this.countries = countries;
  }


  public CalculateTaxLocationOut evidence(Evidence evidence) {
    this.evidence = evidence;
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public Evidence getEvidence() {
    return evidence;
  }

  public void setEvidence(Evidence evidence) {
    this.evidence = evidence;
  }


  public CalculateTaxLocationOut taxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
    return this;
  }

  /**
   * Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
   * @return taxCountryCode
   */
  @javax.annotation.Nullable
  public String getTaxCountryCode() {
    return taxCountryCode;
  }

  public void setTaxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
  }


  public CalculateTaxLocationOut taxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
    return this;
  }

  /**
   * If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
   * @return taxDeducted
   */
  @javax.annotation.Nullable
  public Boolean getTaxDeducted() {
    return taxDeducted;
  }

  public void setTaxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
  }


  public CalculateTaxLocationOut taxSupported(Boolean taxSupported) {
    this.taxSupported = taxSupported;
    return this;
  }

  /**
   * Is tax calculation supported for a detected tax location?
   * @return taxSupported
   */
  @javax.annotation.Nullable
  public Boolean getTaxSupported() {
    return taxSupported;
  }

  public void setTaxSupported(Boolean taxSupported) {
    this.taxSupported = taxSupported;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateTaxLocationOut calculateTaxLocationOut = (CalculateTaxLocationOut) o;
    return Objects.equals(this.billingCountryCode, calculateTaxLocationOut.billingCountryCode) &&
        Objects.equals(this.buyerCreditCardPrefix, calculateTaxLocationOut.buyerCreditCardPrefix) &&
        Objects.equals(this.buyerIp, calculateTaxLocationOut.buyerIp) &&
        Objects.equals(this.countries, calculateTaxLocationOut.countries) &&
        Objects.equals(this.evidence, calculateTaxLocationOut.evidence) &&
        Objects.equals(this.taxCountryCode, calculateTaxLocationOut.taxCountryCode) &&
        Objects.equals(this.taxDeducted, calculateTaxLocationOut.taxDeducted) &&
        Objects.equals(this.taxSupported, calculateTaxLocationOut.taxSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingCountryCode, buyerCreditCardPrefix, buyerIp, countries, evidence, taxCountryCode, taxDeducted, taxSupported);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateTaxLocationOut {\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    buyerCreditCardPrefix: ").append(toIndentedString(buyerCreditCardPrefix)).append("\n");
    sb.append("    buyerIp: ").append(toIndentedString(buyerIp)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    taxCountryCode: ").append(toIndentedString(taxCountryCode)).append("\n");
    sb.append("    taxDeducted: ").append(toIndentedString(taxDeducted)).append("\n");
    sb.append("    taxSupported: ").append(toIndentedString(taxSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_country_code");
    openapiFields.add("buyer_credit_card_prefix");
    openapiFields.add("buyer_ip");
    openapiFields.add("countries");
    openapiFields.add("evidence");
    openapiFields.add("tax_country_code");
    openapiFields.add("tax_deducted");
    openapiFields.add("tax_supported");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculateTaxLocationOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculateTaxLocationOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateTaxLocationOut is not found in the empty JSON string", CalculateTaxLocationOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculateTaxLocationOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateTaxLocationOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_country_code") != null && !jsonObj.get("billing_country_code").isJsonNull()) && !jsonObj.get("billing_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_country_code").toString()));
      }
      if ((jsonObj.get("buyer_credit_card_prefix") != null && !jsonObj.get("buyer_credit_card_prefix").isJsonNull()) && !jsonObj.get("buyer_credit_card_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_credit_card_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_credit_card_prefix").toString()));
      }
      if ((jsonObj.get("buyer_ip") != null && !jsonObj.get("buyer_ip").isJsonNull()) && !jsonObj.get("buyer_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_ip").toString()));
      }
      // validate the optional field `countries`
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) {
        Countries.validateJsonElement(jsonObj.get("countries"));
      }
      // validate the optional field `evidence`
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        Evidence.validateJsonElement(jsonObj.get("evidence"));
      }
      if ((jsonObj.get("tax_country_code") != null && !jsonObj.get("tax_country_code").isJsonNull()) && !jsonObj.get("tax_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateTaxLocationOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateTaxLocationOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateTaxLocationOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateTaxLocationOut.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateTaxLocationOut>() {
           @Override
           public void write(JsonWriter out, CalculateTaxLocationOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateTaxLocationOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculateTaxLocationOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculateTaxLocationOut
   * @throws IOException if the JSON string is invalid with respect to CalculateTaxLocationOut
   */
  public static CalculateTaxLocationOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateTaxLocationOut.class);
  }

  /**
   * Convert an instance of CalculateTaxLocationOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

