/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetDomesticSummaryReportOut;
import org.openapitools.client.model.GetEuViesReportOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReportingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReportingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReportingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDomesticSummaryReport
     * @param countryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param format Output format. &#39;xml&#39; and &#39;csv&#39; values are accepted. Default format - json (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomesticSummaryReportCall(String countryCode, String startMonth, String endMonth, String format, String currencyCode, String fxDateType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/reports/domestic/summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_code", currencyCode));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (fxDateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fx_date_type", fxDateType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDomesticSummaryReportValidateBeforeCall(String countryCode, String startMonth, String endMonth, String format, String currencyCode, String fxDateType, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getDomesticSummaryReport(Async)");
        }

        // verify the required parameter 'startMonth' is set
        if (startMonth == null) {
            throw new ApiException("Missing the required parameter 'startMonth' when calling getDomesticSummaryReport(Async)");
        }

        // verify the required parameter 'endMonth' is set
        if (endMonth == null) {
            throw new ApiException("Missing the required parameter 'endMonth' when calling getDomesticSummaryReport(Async)");
        }

        return getDomesticSummaryReportCall(countryCode, startMonth, endMonth, format, currencyCode, fxDateType, _callback);

    }

    /**
     * Calculate domestic summary
     * 
     * @param countryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param format Output format. &#39;xml&#39; and &#39;csv&#39; values are accepted. Default format - json (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @return GetDomesticSummaryReportOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetDomesticSummaryReportOut getDomesticSummaryReport(String countryCode, String startMonth, String endMonth, String format, String currencyCode, String fxDateType) throws ApiException {
        ApiResponse<GetDomesticSummaryReportOut> localVarResp = getDomesticSummaryReportWithHttpInfo(countryCode, startMonth, endMonth, format, currencyCode, fxDateType);
        return localVarResp.getData();
    }

    /**
     * Calculate domestic summary
     * 
     * @param countryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param format Output format. &#39;xml&#39; and &#39;csv&#39; values are accepted. Default format - json (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @return ApiResponse&lt;GetDomesticSummaryReportOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDomesticSummaryReportOut> getDomesticSummaryReportWithHttpInfo(String countryCode, String startMonth, String endMonth, String format, String currencyCode, String fxDateType) throws ApiException {
        okhttp3.Call localVarCall = getDomesticSummaryReportValidateBeforeCall(countryCode, startMonth, endMonth, format, currencyCode, fxDateType, null);
        Type localVarReturnType = new TypeToken<GetDomesticSummaryReportOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate domestic summary (asynchronously)
     * 
     * @param countryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param format Output format. &#39;xml&#39; and &#39;csv&#39; values are accepted. Default format - json (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDomesticSummaryReportAsync(String countryCode, String startMonth, String endMonth, String format, String currencyCode, String fxDateType, final ApiCallback<GetDomesticSummaryReportOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDomesticSummaryReportValidateBeforeCall(countryCode, startMonth, endMonth, format, currencyCode, fxDateType, _callback);
        Type localVarReturnType = new TypeToken<GetDomesticSummaryReportOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEuViesReport
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param euCountryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param periodLength Length of report period. &#39;month&#39;, &#39;quarter&#39; and &#39;year&#39; values are accepted. Required only if Large Filer Format is requested. (optional)
     * @param lffSequenceNumber Sequence number used to generate report in Large Filer Format. If not specified then &#39;0000000001&#39; will be used. (optional)
     * @param transformation Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @param format Output format. &#39;xml&#39;, &#39;csv&#39; and &#39;lff&#39; (only for Ireland) values are accepted as well (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEuViesReportCall(String endMonth, String startMonth, String euCountryCode, String periodLength, String lffSequenceNumber, String transformation, String currencyCode, String taxId, String fxDateType, String format, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/reports/eu/vies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (periodLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("period_length", periodLength));
        }

        if (lffSequenceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lff_sequence_number", lffSequenceNumber));
        }

        if (transformation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("transformation", transformation));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_code", currencyCode));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (taxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_id", taxId));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (euCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("eu_country_code", euCountryCode));
        }

        if (fxDateType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fx_date_type", fxDateType));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEuViesReportValidateBeforeCall(String endMonth, String startMonth, String euCountryCode, String periodLength, String lffSequenceNumber, String transformation, String currencyCode, String taxId, String fxDateType, String format, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'endMonth' is set
        if (endMonth == null) {
            throw new ApiException("Missing the required parameter 'endMonth' when calling getEuViesReport(Async)");
        }

        // verify the required parameter 'startMonth' is set
        if (startMonth == null) {
            throw new ApiException("Missing the required parameter 'startMonth' when calling getEuViesReport(Async)");
        }

        // verify the required parameter 'euCountryCode' is set
        if (euCountryCode == null) {
            throw new ApiException("Missing the required parameter 'euCountryCode' when calling getEuViesReport(Async)");
        }

        return getEuViesReportCall(endMonth, startMonth, euCountryCode, periodLength, lffSequenceNumber, transformation, currencyCode, taxId, fxDateType, format, _callback);

    }

    /**
     * Calculate EU VIES report
     * 
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param euCountryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param periodLength Length of report period. &#39;month&#39;, &#39;quarter&#39; and &#39;year&#39; values are accepted. Required only if Large Filer Format is requested. (optional)
     * @param lffSequenceNumber Sequence number used to generate report in Large Filer Format. If not specified then &#39;0000000001&#39; will be used. (optional)
     * @param transformation Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @param format Output format. &#39;xml&#39;, &#39;csv&#39; and &#39;lff&#39; (only for Ireland) values are accepted as well (optional)
     * @return GetEuViesReportOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetEuViesReportOut getEuViesReport(String endMonth, String startMonth, String euCountryCode, String periodLength, String lffSequenceNumber, String transformation, String currencyCode, String taxId, String fxDateType, String format) throws ApiException {
        ApiResponse<GetEuViesReportOut> localVarResp = getEuViesReportWithHttpInfo(endMonth, startMonth, euCountryCode, periodLength, lffSequenceNumber, transformation, currencyCode, taxId, fxDateType, format);
        return localVarResp.getData();
    }

    /**
     * Calculate EU VIES report
     * 
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param euCountryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param periodLength Length of report period. &#39;month&#39;, &#39;quarter&#39; and &#39;year&#39; values are accepted. Required only if Large Filer Format is requested. (optional)
     * @param lffSequenceNumber Sequence number used to generate report in Large Filer Format. If not specified then &#39;0000000001&#39; will be used. (optional)
     * @param transformation Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @param format Output format. &#39;xml&#39;, &#39;csv&#39; and &#39;lff&#39; (only for Ireland) values are accepted as well (optional)
     * @return ApiResponse&lt;GetEuViesReportOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetEuViesReportOut> getEuViesReportWithHttpInfo(String endMonth, String startMonth, String euCountryCode, String periodLength, String lffSequenceNumber, String transformation, String currencyCode, String taxId, String fxDateType, String format) throws ApiException {
        okhttp3.Call localVarCall = getEuViesReportValidateBeforeCall(endMonth, startMonth, euCountryCode, periodLength, lffSequenceNumber, transformation, currencyCode, taxId, fxDateType, format, null);
        Type localVarReturnType = new TypeToken<GetEuViesReportOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate EU VIES report (asynchronously)
     * 
     * @param endMonth Period end month in yyyy-MM format. (required)
     * @param startMonth Period start month in yyyy-MM format. (required)
     * @param euCountryCode ISO 2-letter country code which will be used for determining which country is domestic. (required)
     * @param periodLength Length of report period. &#39;month&#39;, &#39;quarter&#39; and &#39;year&#39; values are accepted. Required only if Large Filer Format is requested. (optional)
     * @param lffSequenceNumber Sequence number used to generate report in Large Filer Format. If not specified then &#39;0000000001&#39; will be used. (optional)
     * @param transformation Which transformation should be applied. Please note that transformation will be applied only for xml and csv formats. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. (optional)
     * @param fxDateType Which date should be used for FX. (optional)
     * @param format Output format. &#39;xml&#39;, &#39;csv&#39; and &#39;lff&#39; (only for Ireland) values are accepted as well (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEuViesReportAsync(String endMonth, String startMonth, String euCountryCode, String periodLength, String lffSequenceNumber, String transformation, String currencyCode, String taxId, String fxDateType, String format, final ApiCallback<GetEuViesReportOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEuViesReportValidateBeforeCall(endMonth, startMonth, euCountryCode, periodLength, lffSequenceNumber, transformation, currencyCode, taxId, fxDateType, format, _callback);
        Type localVarReturnType = new TypeToken<GetEuViesReportOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
