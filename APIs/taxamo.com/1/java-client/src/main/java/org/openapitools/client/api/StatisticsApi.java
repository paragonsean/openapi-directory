/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.GetDailySettlementStatsOut;
import org.openapitools.client.model.GetSettlementStatsByCountryOut;
import org.openapitools.client.model.GetSettlementStatsByTaxationTypeOut;
import org.openapitools.client.model.GetTransactionsStatsByCountryOut;
import org.openapitools.client.model.GetTransactionsStatsOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class StatisticsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public StatisticsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public StatisticsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDailySettlementStats
     * @param interval Interval type - day, week, month. (required)
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailySettlementStatsCall(String interval, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/stats/settlement/daily";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDailySettlementStatsValidateBeforeCall(String interval, String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'interval' is set
        if (interval == null) {
            throw new ApiException("Missing the required parameter 'interval' when calling getDailySettlementStats(Async)");
        }

        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getDailySettlementStats(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getDailySettlementStats(Async)");
        }

        return getDailySettlementStatsCall(interval, dateFrom, dateTo, _callback);

    }

    /**
     * Settlement stats over time
     * 
     * @param interval Interval type - day, week, month. (required)
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @return GetDailySettlementStatsOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetDailySettlementStatsOut getDailySettlementStats(String interval, String dateFrom, String dateTo) throws ApiException {
        ApiResponse<GetDailySettlementStatsOut> localVarResp = getDailySettlementStatsWithHttpInfo(interval, dateFrom, dateTo);
        return localVarResp.getData();
    }

    /**
     * Settlement stats over time
     * 
     * @param interval Interval type - day, week, month. (required)
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @return ApiResponse&lt;GetDailySettlementStatsOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDailySettlementStatsOut> getDailySettlementStatsWithHttpInfo(String interval, String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = getDailySettlementStatsValidateBeforeCall(interval, dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<GetDailySettlementStatsOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Settlement stats over time (asynchronously)
     * 
     * @param interval Interval type - day, week, month. (required)
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDailySettlementStatsAsync(String interval, String dateFrom, String dateTo, final ApiCallback<GetDailySettlementStatsOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDailySettlementStatsValidateBeforeCall(interval, dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<GetDailySettlementStatsOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettlementStatsByCountry
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementStatsByCountryCall(String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/stats/settlement/by_country";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettlementStatsByCountryValidateBeforeCall(String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getSettlementStatsByCountry(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getSettlementStatsByCountry(Async)");
        }

        return getSettlementStatsByCountryCall(dateFrom, dateTo, _callback);

    }

    /**
     * Settlement by country
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @return GetSettlementStatsByCountryOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetSettlementStatsByCountryOut getSettlementStatsByCountry(String dateFrom, String dateTo) throws ApiException {
        ApiResponse<GetSettlementStatsByCountryOut> localVarResp = getSettlementStatsByCountryWithHttpInfo(dateFrom, dateTo);
        return localVarResp.getData();
    }

    /**
     * Settlement by country
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @return ApiResponse&lt;GetSettlementStatsByCountryOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettlementStatsByCountryOut> getSettlementStatsByCountryWithHttpInfo(String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = getSettlementStatsByCountryValidateBeforeCall(dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<GetSettlementStatsByCountryOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Settlement by country (asynchronously)
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementStatsByCountryAsync(String dateFrom, String dateTo, final ApiCallback<GetSettlementStatsByCountryOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettlementStatsByCountryValidateBeforeCall(dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<GetSettlementStatsByCountryOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettlementStatsByTaxationType
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementStatsByTaxationTypeCall(String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/stats/settlement/by_taxation_type";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettlementStatsByTaxationTypeValidateBeforeCall(String dateFrom, String dateTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getSettlementStatsByTaxationType(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getSettlementStatsByTaxationType(Async)");
        }

        return getSettlementStatsByTaxationTypeCall(dateFrom, dateTo, _callback);

    }

    /**
     * Settlement by tax type
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @return GetSettlementStatsByTaxationTypeOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetSettlementStatsByTaxationTypeOut getSettlementStatsByTaxationType(String dateFrom, String dateTo) throws ApiException {
        ApiResponse<GetSettlementStatsByTaxationTypeOut> localVarResp = getSettlementStatsByTaxationTypeWithHttpInfo(dateFrom, dateTo);
        return localVarResp.getData();
    }

    /**
     * Settlement by tax type
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @return ApiResponse&lt;GetSettlementStatsByTaxationTypeOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettlementStatsByTaxationTypeOut> getSettlementStatsByTaxationTypeWithHttpInfo(String dateFrom, String dateTo) throws ApiException {
        okhttp3.Call localVarCall = getSettlementStatsByTaxationTypeValidateBeforeCall(dateFrom, dateTo, null);
        Type localVarReturnType = new TypeToken<GetSettlementStatsByTaxationTypeOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Settlement by tax type (asynchronously)
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementStatsByTaxationTypeAsync(String dateFrom, String dateTo, final ApiCallback<GetSettlementStatsByTaxationTypeOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettlementStatsByTaxationTypeValidateBeforeCall(dateFrom, dateTo, _callback);
        Type localVarReturnType = new TypeToken<GetSettlementStatsByTaxationTypeOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsStats
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param interval Interval. Accepted values are &#39;day&#39;, &#39;week&#39; and &#39;month&#39;. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsStatsCall(String dateFrom, String dateTo, String interval, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/stats/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsStatsValidateBeforeCall(String dateFrom, String dateTo, String interval, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getTransactionsStats(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getTransactionsStats(Async)");
        }

        return getTransactionsStatsCall(dateFrom, dateTo, interval, _callback);

    }

    /**
     * Transaction stats
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param interval Interval. Accepted values are &#39;day&#39;, &#39;week&#39; and &#39;month&#39;. (optional)
     * @return GetTransactionsStatsOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionsStatsOut getTransactionsStats(String dateFrom, String dateTo, String interval) throws ApiException {
        ApiResponse<GetTransactionsStatsOut> localVarResp = getTransactionsStatsWithHttpInfo(dateFrom, dateTo, interval);
        return localVarResp.getData();
    }

    /**
     * Transaction stats
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param interval Interval. Accepted values are &#39;day&#39;, &#39;week&#39; and &#39;month&#39;. (optional)
     * @return ApiResponse&lt;GetTransactionsStatsOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionsStatsOut> getTransactionsStatsWithHttpInfo(String dateFrom, String dateTo, String interval) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsStatsValidateBeforeCall(dateFrom, dateTo, interval, null);
        Type localVarReturnType = new TypeToken<GetTransactionsStatsOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Transaction stats (asynchronously)
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param interval Interval. Accepted values are &#39;day&#39;, &#39;week&#39; and &#39;month&#39;. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsStatsAsync(String dateFrom, String dateTo, String interval, final ApiCallback<GetTransactionsStatsOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsStatsValidateBeforeCall(dateFrom, dateTo, interval, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionsStatsOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransactionsStatsByCountry
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param globalCurrencyCode Global currency code to use for conversion - in addition to country&#39;s currency if rate is available. Conversion is indicative and based on most-recent rate from ECB. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsStatsByCountryCall(String dateFrom, String dateTo, String globalCurrencyCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/stats/transactions/by_country";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (globalCurrencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("global_currency_code", globalCurrencyCode));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionsStatsByCountryValidateBeforeCall(String dateFrom, String dateTo, String globalCurrencyCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getTransactionsStatsByCountry(Async)");
        }

        // verify the required parameter 'dateTo' is set
        if (dateTo == null) {
            throw new ApiException("Missing the required parameter 'dateTo' when calling getTransactionsStatsByCountry(Async)");
        }

        return getTransactionsStatsByCountryCall(dateFrom, dateTo, globalCurrencyCode, _callback);

    }

    /**
     * Settlement by country
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param globalCurrencyCode Global currency code to use for conversion - in addition to country&#39;s currency if rate is available. Conversion is indicative and based on most-recent rate from ECB. (optional)
     * @return GetTransactionsStatsByCountryOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionsStatsByCountryOut getTransactionsStatsByCountry(String dateFrom, String dateTo, String globalCurrencyCode) throws ApiException {
        ApiResponse<GetTransactionsStatsByCountryOut> localVarResp = getTransactionsStatsByCountryWithHttpInfo(dateFrom, dateTo, globalCurrencyCode);
        return localVarResp.getData();
    }

    /**
     * Settlement by country
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param globalCurrencyCode Global currency code to use for conversion - in addition to country&#39;s currency if rate is available. Conversion is indicative and based on most-recent rate from ECB. (optional)
     * @return ApiResponse&lt;GetTransactionsStatsByCountryOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionsStatsByCountryOut> getTransactionsStatsByCountryWithHttpInfo(String dateFrom, String dateTo, String globalCurrencyCode) throws ApiException {
        okhttp3.Call localVarCall = getTransactionsStatsByCountryValidateBeforeCall(dateFrom, dateTo, globalCurrencyCode, null);
        Type localVarReturnType = new TypeToken<GetTransactionsStatsByCountryOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Settlement by country (asynchronously)
     * 
     * @param dateFrom Date from in yyyy-MM format. (required)
     * @param dateTo Date to in yyyy-MM format. (required)
     * @param globalCurrencyCode Global currency code to use for conversion - in addition to country&#39;s currency if rate is available. Conversion is indicative and based on most-recent rate from ECB. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionsStatsByCountryAsync(String dateFrom, String dateTo, String globalCurrencyCode, final ApiCallback<GetTransactionsStatsByCountryOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionsStatsByCountryValidateBeforeCall(dateFrom, dateTo, globalCurrencyCode, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionsStatsByCountryOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
