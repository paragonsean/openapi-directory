/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Summary
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Summary {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_FX_RATE_DATE = "fx_rate_date";
  @SerializedName(SERIALIZED_NAME_FX_RATE_DATE)
  private String fxRateDate;

  public static final String SERIALIZED_NAME_INDICATIVE = "indicative";
  @SerializedName(SERIALIZED_NAME_INDICATIVE)
  private Boolean indicative;

  public static final String SERIALIZED_NAME_QUARTER = "quarter";
  @SerializedName(SERIALIZED_NAME_QUARTER)
  private String quarter;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TAX_ENTITY_NAME = "tax_entity_name";
  @SerializedName(SERIALIZED_NAME_TAX_ENTITY_NAME)
  private String taxEntityName;

  public Summary() {
  }

  public Summary currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * In which currency code the settlement was calculated.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Summary endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Period end date in yyyy-MM-dd&#39;T&#39;hh:mm:ss&#39;Z&#39; format.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public Summary fxRateDate(String fxRateDate) {
    this.fxRateDate = fxRateDate;
    return this;
  }

  /**
   * Date of ECB FX rate used for conversions in yyyy-MM-dd&#39;T&#39;hh:mm:ss&#39;Z&#39; format.
   * @return fxRateDate
   */
  @javax.annotation.Nullable
  public String getFxRateDate() {
    return fxRateDate;
  }

  public void setFxRateDate(String fxRateDate) {
    this.fxRateDate = fxRateDate;
  }


  public Summary indicative(Boolean indicative) {
    this.indicative = indicative;
    return this;
  }

  /**
   * If the quarter isn&#39;t closed yet, tax amount is indicative, as we cannot determine FX rate or all transactions yet.
   * @return indicative
   */
  @javax.annotation.Nullable
  public Boolean getIndicative() {
    return indicative;
  }

  public void setIndicative(Boolean indicative) {
    this.indicative = indicative;
  }


  public Summary quarter(String quarter) {
    this.quarter = quarter;
    return this;
  }

  /**
   * Quarter that this summary applies to.
   * @return quarter
   */
  @javax.annotation.Nullable
  public String getQuarter() {
    return quarter;
  }

  public void setQuarter(String quarter) {
    this.quarter = quarter;
  }


  public Summary startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Period start date in yyyy-MM-dd&#39;T&#39;hh:mm:ss&#39;Z&#39; format.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }


  public Summary taxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Tax amount due in this quarter.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public Summary taxEntityName(String taxEntityName) {
    this.taxEntityName = taxEntityName;
    return this;
  }

  /**
   * Tax entity that the tax is due.
   * @return taxEntityName
   */
  @javax.annotation.Nullable
  public String getTaxEntityName() {
    return taxEntityName;
  }

  public void setTaxEntityName(String taxEntityName) {
    this.taxEntityName = taxEntityName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Summary summary = (Summary) o;
    return Objects.equals(this.currencyCode, summary.currencyCode) &&
        Objects.equals(this.endDate, summary.endDate) &&
        Objects.equals(this.fxRateDate, summary.fxRateDate) &&
        Objects.equals(this.indicative, summary.indicative) &&
        Objects.equals(this.quarter, summary.quarter) &&
        Objects.equals(this.startDate, summary.startDate) &&
        Objects.equals(this.taxAmount, summary.taxAmount) &&
        Objects.equals(this.taxEntityName, summary.taxEntityName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, endDate, fxRateDate, indicative, quarter, startDate, taxAmount, taxEntityName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Summary {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    fxRateDate: ").append(toIndentedString(fxRateDate)).append("\n");
    sb.append("    indicative: ").append(toIndentedString(indicative)).append("\n");
    sb.append("    quarter: ").append(toIndentedString(quarter)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxEntityName: ").append(toIndentedString(taxEntityName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency_code");
    openapiFields.add("end_date");
    openapiFields.add("fx_rate_date");
    openapiFields.add("indicative");
    openapiFields.add("quarter");
    openapiFields.add("start_date");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_entity_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Summary
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Summary.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Summary is not found in the empty JSON string", Summary.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Summary.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Summary` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("end_date") != null && !jsonObj.get("end_date").isJsonNull()) && !jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if ((jsonObj.get("fx_rate_date") != null && !jsonObj.get("fx_rate_date").isJsonNull()) && !jsonObj.get("fx_rate_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fx_rate_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fx_rate_date").toString()));
      }
      if ((jsonObj.get("quarter") != null && !jsonObj.get("quarter").isJsonNull()) && !jsonObj.get("quarter").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `quarter` to be a primitive type in the JSON string but got `%s`", jsonObj.get("quarter").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("tax_entity_name") != null && !jsonObj.get("tax_entity_name").isJsonNull()) && !jsonObj.get("tax_entity_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_entity_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_entity_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Summary.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Summary' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Summary> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Summary.class));

       return (TypeAdapter<T>) new TypeAdapter<Summary>() {
           @Override
           public void write(JsonWriter out, Summary value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Summary read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Summary given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Summary
   * @throws IOException if the JSON string is invalid with respect to Summary
   */
  public static Summary fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Summary.class);
  }

  /**
   * Convert an instance of Summary to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

