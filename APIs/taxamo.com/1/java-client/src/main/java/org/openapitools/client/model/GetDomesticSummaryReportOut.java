/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDomesticSummaryReportOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDomesticSummaryReportOut {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_DOMESTIC_REFUNDS_AMOUNT = "domestic_refunds_amount";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_REFUNDS_AMOUNT)
  private BigDecimal domesticRefundsAmount;

  public static final String SERIALIZED_NAME_DOMESTIC_REFUNDS_TAX_AMOUNT = "domestic_refunds_tax_amount";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_REFUNDS_TAX_AMOUNT)
  private BigDecimal domesticRefundsTaxAmount;

  public static final String SERIALIZED_NAME_DOMESTIC_SALES_AMOUNT = "domestic_sales_amount";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_SALES_AMOUNT)
  private BigDecimal domesticSalesAmount;

  public static final String SERIALIZED_NAME_DOMESTIC_TAX_AMOUNT = "domestic_tax_amount";
  @SerializedName(SERIALIZED_NAME_DOMESTIC_TAX_AMOUNT)
  private BigDecimal domesticTaxAmount;

  public static final String SERIALIZED_NAME_END_DATE = "end_date";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private String endDate;

  public static final String SERIALIZED_NAME_EU_TAX_DEDUCTED_REFUNDS = "eu_tax_deducted_refunds";
  @SerializedName(SERIALIZED_NAME_EU_TAX_DEDUCTED_REFUNDS)
  private BigDecimal euTaxDeductedRefunds;

  public static final String SERIALIZED_NAME_EU_TAX_DEDUCTED_SALES = "eu_tax_deducted_sales";
  @SerializedName(SERIALIZED_NAME_EU_TAX_DEDUCTED_SALES)
  private BigDecimal euTaxDeductedSales;

  public static final String SERIALIZED_NAME_GLOBAL_REFUNDS_AMOUNT = "global_refunds_amount";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFUNDS_AMOUNT)
  private BigDecimal globalRefundsAmount;

  public static final String SERIALIZED_NAME_GLOBAL_REFUNDS_TAX_AMOUNT = "global_refunds_tax_amount";
  @SerializedName(SERIALIZED_NAME_GLOBAL_REFUNDS_TAX_AMOUNT)
  private BigDecimal globalRefundsTaxAmount;

  public static final String SERIALIZED_NAME_GLOBAL_SALES_AMOUNT = "global_sales_amount";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SALES_AMOUNT)
  private BigDecimal globalSalesAmount;

  public static final String SERIALIZED_NAME_GLOBAL_SALES_TAX_AMOUNT = "global_sales_tax_amount";
  @SerializedName(SERIALIZED_NAME_GLOBAL_SALES_TAX_AMOUNT)
  private BigDecimal globalSalesTaxAmount;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public GetDomesticSummaryReportOut() {
  }

  public GetDomesticSummaryReportOut currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Three-letter ISO currency code.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GetDomesticSummaryReportOut domesticRefundsAmount(BigDecimal domesticRefundsAmount) {
    this.domesticRefundsAmount = domesticRefundsAmount;
    return this;
  }

  /**
   * Domestic sales refunds amount.
   * @return domesticRefundsAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDomesticRefundsAmount() {
    return domesticRefundsAmount;
  }

  public void setDomesticRefundsAmount(BigDecimal domesticRefundsAmount) {
    this.domesticRefundsAmount = domesticRefundsAmount;
  }


  public GetDomesticSummaryReportOut domesticRefundsTaxAmount(BigDecimal domesticRefundsTaxAmount) {
    this.domesticRefundsTaxAmount = domesticRefundsTaxAmount;
    return this;
  }

  /**
   * Domestic sales refunds tax amout.
   * @return domesticRefundsTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDomesticRefundsTaxAmount() {
    return domesticRefundsTaxAmount;
  }

  public void setDomesticRefundsTaxAmount(BigDecimal domesticRefundsTaxAmount) {
    this.domesticRefundsTaxAmount = domesticRefundsTaxAmount;
  }


  public GetDomesticSummaryReportOut domesticSalesAmount(BigDecimal domesticSalesAmount) {
    this.domesticSalesAmount = domesticSalesAmount;
    return this;
  }

  /**
   * Domestic sales amount.
   * @return domesticSalesAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDomesticSalesAmount() {
    return domesticSalesAmount;
  }

  public void setDomesticSalesAmount(BigDecimal domesticSalesAmount) {
    this.domesticSalesAmount = domesticSalesAmount;
  }


  public GetDomesticSummaryReportOut domesticTaxAmount(BigDecimal domesticTaxAmount) {
    this.domesticTaxAmount = domesticTaxAmount;
    return this;
  }

  /**
   * Domestic sales tax amout.
   * @return domesticTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDomesticTaxAmount() {
    return domesticTaxAmount;
  }

  public void setDomesticTaxAmount(BigDecimal domesticTaxAmount) {
    this.domesticTaxAmount = domesticTaxAmount;
  }


  public GetDomesticSummaryReportOut endDate(String endDate) {
    this.endDate = endDate;
    return this;
  }

  /**
   * Period end date in yyyy-MM-dd&#39;T&#39;hh:mm:ss&#39;Z&#39; format.
   * @return endDate
   */
  @javax.annotation.Nullable
  public String getEndDate() {
    return endDate;
  }

  public void setEndDate(String endDate) {
    this.endDate = endDate;
  }


  public GetDomesticSummaryReportOut euTaxDeductedRefunds(BigDecimal euTaxDeductedRefunds) {
    this.euTaxDeductedRefunds = euTaxDeductedRefunds;
    return this;
  }

  /**
   * EU deducted tax sales.
   * @return euTaxDeductedRefunds
   */
  @javax.annotation.Nullable
  public BigDecimal getEuTaxDeductedRefunds() {
    return euTaxDeductedRefunds;
  }

  public void setEuTaxDeductedRefunds(BigDecimal euTaxDeductedRefunds) {
    this.euTaxDeductedRefunds = euTaxDeductedRefunds;
  }


  public GetDomesticSummaryReportOut euTaxDeductedSales(BigDecimal euTaxDeductedSales) {
    this.euTaxDeductedSales = euTaxDeductedSales;
    return this;
  }

  /**
   * EU deducted tax sales.
   * @return euTaxDeductedSales
   */
  @javax.annotation.Nullable
  public BigDecimal getEuTaxDeductedSales() {
    return euTaxDeductedSales;
  }

  public void setEuTaxDeductedSales(BigDecimal euTaxDeductedSales) {
    this.euTaxDeductedSales = euTaxDeductedSales;
  }


  public GetDomesticSummaryReportOut globalRefundsAmount(BigDecimal globalRefundsAmount) {
    this.globalRefundsAmount = globalRefundsAmount;
    return this;
  }

  /**
   * Global sales refunds amount. This includes refunds from domestic country too.
   * @return globalRefundsAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getGlobalRefundsAmount() {
    return globalRefundsAmount;
  }

  public void setGlobalRefundsAmount(BigDecimal globalRefundsAmount) {
    this.globalRefundsAmount = globalRefundsAmount;
  }


  public GetDomesticSummaryReportOut globalRefundsTaxAmount(BigDecimal globalRefundsTaxAmount) {
    this.globalRefundsTaxAmount = globalRefundsTaxAmount;
    return this;
  }

  /**
   * Global sales refunds amount. This includes refunds from domestic country too.
   * @return globalRefundsTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getGlobalRefundsTaxAmount() {
    return globalRefundsTaxAmount;
  }

  public void setGlobalRefundsTaxAmount(BigDecimal globalRefundsTaxAmount) {
    this.globalRefundsTaxAmount = globalRefundsTaxAmount;
  }


  public GetDomesticSummaryReportOut globalSalesAmount(BigDecimal globalSalesAmount) {
    this.globalSalesAmount = globalSalesAmount;
    return this;
  }

  /**
   * Global sales amount. This includes sales from domestic country too.
   * @return globalSalesAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getGlobalSalesAmount() {
    return globalSalesAmount;
  }

  public void setGlobalSalesAmount(BigDecimal globalSalesAmount) {
    this.globalSalesAmount = globalSalesAmount;
  }


  public GetDomesticSummaryReportOut globalSalesTaxAmount(BigDecimal globalSalesTaxAmount) {
    this.globalSalesTaxAmount = globalSalesTaxAmount;
    return this;
  }

  /**
   * Global sales amount. This includes sales from domestic country too.
   * @return globalSalesTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getGlobalSalesTaxAmount() {
    return globalSalesTaxAmount;
  }

  public void setGlobalSalesTaxAmount(BigDecimal globalSalesTaxAmount) {
    this.globalSalesTaxAmount = globalSalesTaxAmount;
  }


  public GetDomesticSummaryReportOut startDate(String startDate) {
    this.startDate = startDate;
    return this;
  }

  /**
   * Period start date in yyyy-MM-dd&#39;T&#39;hh:mm:ss&#39;Z&#39; format.
   * @return startDate
   */
  @javax.annotation.Nullable
  public String getStartDate() {
    return startDate;
  }

  public void setStartDate(String startDate) {
    this.startDate = startDate;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDomesticSummaryReportOut getDomesticSummaryReportOut = (GetDomesticSummaryReportOut) o;
    return Objects.equals(this.currencyCode, getDomesticSummaryReportOut.currencyCode) &&
        Objects.equals(this.domesticRefundsAmount, getDomesticSummaryReportOut.domesticRefundsAmount) &&
        Objects.equals(this.domesticRefundsTaxAmount, getDomesticSummaryReportOut.domesticRefundsTaxAmount) &&
        Objects.equals(this.domesticSalesAmount, getDomesticSummaryReportOut.domesticSalesAmount) &&
        Objects.equals(this.domesticTaxAmount, getDomesticSummaryReportOut.domesticTaxAmount) &&
        Objects.equals(this.endDate, getDomesticSummaryReportOut.endDate) &&
        Objects.equals(this.euTaxDeductedRefunds, getDomesticSummaryReportOut.euTaxDeductedRefunds) &&
        Objects.equals(this.euTaxDeductedSales, getDomesticSummaryReportOut.euTaxDeductedSales) &&
        Objects.equals(this.globalRefundsAmount, getDomesticSummaryReportOut.globalRefundsAmount) &&
        Objects.equals(this.globalRefundsTaxAmount, getDomesticSummaryReportOut.globalRefundsTaxAmount) &&
        Objects.equals(this.globalSalesAmount, getDomesticSummaryReportOut.globalSalesAmount) &&
        Objects.equals(this.globalSalesTaxAmount, getDomesticSummaryReportOut.globalSalesTaxAmount) &&
        Objects.equals(this.startDate, getDomesticSummaryReportOut.startDate);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, domesticRefundsAmount, domesticRefundsTaxAmount, domesticSalesAmount, domesticTaxAmount, endDate, euTaxDeductedRefunds, euTaxDeductedSales, globalRefundsAmount, globalRefundsTaxAmount, globalSalesAmount, globalSalesTaxAmount, startDate);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDomesticSummaryReportOut {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    domesticRefundsAmount: ").append(toIndentedString(domesticRefundsAmount)).append("\n");
    sb.append("    domesticRefundsTaxAmount: ").append(toIndentedString(domesticRefundsTaxAmount)).append("\n");
    sb.append("    domesticSalesAmount: ").append(toIndentedString(domesticSalesAmount)).append("\n");
    sb.append("    domesticTaxAmount: ").append(toIndentedString(domesticTaxAmount)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    euTaxDeductedRefunds: ").append(toIndentedString(euTaxDeductedRefunds)).append("\n");
    sb.append("    euTaxDeductedSales: ").append(toIndentedString(euTaxDeductedSales)).append("\n");
    sb.append("    globalRefundsAmount: ").append(toIndentedString(globalRefundsAmount)).append("\n");
    sb.append("    globalRefundsTaxAmount: ").append(toIndentedString(globalRefundsTaxAmount)).append("\n");
    sb.append("    globalSalesAmount: ").append(toIndentedString(globalSalesAmount)).append("\n");
    sb.append("    globalSalesTaxAmount: ").append(toIndentedString(globalSalesTaxAmount)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency_code");
    openapiFields.add("domestic_refunds_amount");
    openapiFields.add("domestic_refunds_tax_amount");
    openapiFields.add("domestic_sales_amount");
    openapiFields.add("domestic_tax_amount");
    openapiFields.add("end_date");
    openapiFields.add("eu_tax_deducted_refunds");
    openapiFields.add("eu_tax_deducted_sales");
    openapiFields.add("global_refunds_amount");
    openapiFields.add("global_refunds_tax_amount");
    openapiFields.add("global_sales_amount");
    openapiFields.add("global_sales_tax_amount");
    openapiFields.add("start_date");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDomesticSummaryReportOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDomesticSummaryReportOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDomesticSummaryReportOut is not found in the empty JSON string", GetDomesticSummaryReportOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDomesticSummaryReportOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDomesticSummaryReportOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("end_date") != null && !jsonObj.get("end_date").isJsonNull()) && !jsonObj.get("end_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_date").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDomesticSummaryReportOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDomesticSummaryReportOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDomesticSummaryReportOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDomesticSummaryReportOut.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDomesticSummaryReportOut>() {
           @Override
           public void write(JsonWriter out, GetDomesticSummaryReportOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDomesticSummaryReportOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDomesticSummaryReportOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDomesticSummaryReportOut
   * @throws IOException if the JSON string is invalid with respect to GetDomesticSummaryReportOut
   */
  public static GetDomesticSummaryReportOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDomesticSummaryReportOut.class);
  }

  /**
   * Convert an instance of GetDomesticSummaryReportOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

