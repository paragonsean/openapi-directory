/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InvoiceAddress
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InvoiceAddress {
  public static final String SERIALIZED_NAME_ADDRESS_DETAIL = "address_detail";
  @SerializedName(SERIALIZED_NAME_ADDRESS_DETAIL)
  private String addressDetail;

  public static final String SERIALIZED_NAME_BUILDING_NUMBER = "building_number";
  @SerializedName(SERIALIZED_NAME_BUILDING_NUMBER)
  private String buildingNumber;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_FREEFORM_ADDRESS = "freeform_address";
  @SerializedName(SERIALIZED_NAME_FREEFORM_ADDRESS)
  private String freeformAddress;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postal_code";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private String region;

  public static final String SERIALIZED_NAME_STREET_NAME = "street_name";
  @SerializedName(SERIALIZED_NAME_STREET_NAME)
  private String streetName;

  public InvoiceAddress() {
  }

  public InvoiceAddress addressDetail(String addressDetail) {
    this.addressDetail = addressDetail;
    return this;
  }

  /**
   * Address details - for example apartament number.
   * @return addressDetail
   */
  @javax.annotation.Nullable
  public String getAddressDetail() {
    return addressDetail;
  }

  public void setAddressDetail(String addressDetail) {
    this.addressDetail = addressDetail;
  }


  public InvoiceAddress buildingNumber(String buildingNumber) {
    this.buildingNumber = buildingNumber;
    return this;
  }

  /**
   * Building number.
   * @return buildingNumber
   */
  @javax.annotation.Nullable
  public String getBuildingNumber() {
    return buildingNumber;
  }

  public void setBuildingNumber(String buildingNumber) {
    this.buildingNumber = buildingNumber;
  }


  public InvoiceAddress city(String city) {
    this.city = city;
    return this;
  }

  /**
   * City name.
   * @return city
   */
  @javax.annotation.Nullable
  public String getCity() {
    return city;
  }

  public void setCity(String city) {
    this.city = city;
  }


  public InvoiceAddress country(String country) {
    this.country = country;
    return this;
  }

  /**
   * 2-letter ISO country code.
   * @return country
   */
  @javax.annotation.Nullable
  public String getCountry() {
    return country;
  }

  public void setCountry(String country) {
    this.country = country;
  }


  public InvoiceAddress freeformAddress(String freeformAddress) {
    this.freeformAddress = freeformAddress;
    return this;
  }

  /**
   * Freeform address. Use when structured data is not available. Will be used in SAF-MOSS file if other fields are not provided.
   * @return freeformAddress
   */
  @javax.annotation.Nullable
  public String getFreeformAddress() {
    return freeformAddress;
  }

  public void setFreeformAddress(String freeformAddress) {
    this.freeformAddress = freeformAddress;
  }


  public InvoiceAddress postalCode(String postalCode) {
    this.postalCode = postalCode;
    return this;
  }

  /**
   * Postal code.
   * @return postalCode
   */
  @javax.annotation.Nullable
  public String getPostalCode() {
    return postalCode;
  }

  public void setPostalCode(String postalCode) {
    this.postalCode = postalCode;
  }


  public InvoiceAddress region(String region) {
    this.region = region;
    return this;
  }

  /**
   * Region, for United States - state code - e.g. NJ.
   * @return region
   */
  @javax.annotation.Nullable
  public String getRegion() {
    return region;
  }

  public void setRegion(String region) {
    this.region = region;
  }


  public InvoiceAddress streetName(String streetName) {
    this.streetName = streetName;
    return this;
  }

  /**
   *  Street name.
   * @return streetName
   */
  @javax.annotation.Nullable
  public String getStreetName() {
    return streetName;
  }

  public void setStreetName(String streetName) {
    this.streetName = streetName;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InvoiceAddress invoiceAddress = (InvoiceAddress) o;
    return Objects.equals(this.addressDetail, invoiceAddress.addressDetail) &&
        Objects.equals(this.buildingNumber, invoiceAddress.buildingNumber) &&
        Objects.equals(this.city, invoiceAddress.city) &&
        Objects.equals(this.country, invoiceAddress.country) &&
        Objects.equals(this.freeformAddress, invoiceAddress.freeformAddress) &&
        Objects.equals(this.postalCode, invoiceAddress.postalCode) &&
        Objects.equals(this.region, invoiceAddress.region) &&
        Objects.equals(this.streetName, invoiceAddress.streetName);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addressDetail, buildingNumber, city, country, freeformAddress, postalCode, region, streetName);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InvoiceAddress {\n");
    sb.append("    addressDetail: ").append(toIndentedString(addressDetail)).append("\n");
    sb.append("    buildingNumber: ").append(toIndentedString(buildingNumber)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    freeformAddress: ").append(toIndentedString(freeformAddress)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("    streetName: ").append(toIndentedString(streetName)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("address_detail");
    openapiFields.add("building_number");
    openapiFields.add("city");
    openapiFields.add("country");
    openapiFields.add("freeform_address");
    openapiFields.add("postal_code");
    openapiFields.add("region");
    openapiFields.add("street_name");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InvoiceAddress
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InvoiceAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InvoiceAddress is not found in the empty JSON string", InvoiceAddress.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InvoiceAddress.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InvoiceAddress` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address_detail") != null && !jsonObj.get("address_detail").isJsonNull()) && !jsonObj.get("address_detail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address_detail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address_detail").toString()));
      }
      if ((jsonObj.get("building_number") != null && !jsonObj.get("building_number").isJsonNull()) && !jsonObj.get("building_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `building_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("building_number").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("freeform_address") != null && !jsonObj.get("freeform_address").isJsonNull()) && !jsonObj.get("freeform_address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `freeform_address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("freeform_address").toString()));
      }
      if ((jsonObj.get("postal_code") != null && !jsonObj.get("postal_code").isJsonNull()) && !jsonObj.get("postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postal_code").toString()));
      }
      if ((jsonObj.get("region") != null && !jsonObj.get("region").isJsonNull()) && !jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      if ((jsonObj.get("street_name") != null && !jsonObj.get("street_name").isJsonNull()) && !jsonObj.get("street_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `street_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("street_name").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InvoiceAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InvoiceAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InvoiceAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InvoiceAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<InvoiceAddress>() {
           @Override
           public void write(JsonWriter out, InvoiceAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InvoiceAddress read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InvoiceAddress given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InvoiceAddress
   * @throws IOException if the JSON string is invalid with respect to InvoiceAddress
   */
  public static InvoiceAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InvoiceAddress.class);
  }

  /**
   * Convert an instance of InvoiceAddress to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

