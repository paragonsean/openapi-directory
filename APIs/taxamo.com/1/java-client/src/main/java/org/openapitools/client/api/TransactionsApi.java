/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CancelTransactionOut;
import org.openapitools.client.model.ConfirmTransactionIn;
import org.openapitools.client.model.ConfirmTransactionOut;
import org.openapitools.client.model.CreateTransactionIn;
import org.openapitools.client.model.CreateTransactionOut;
import org.openapitools.client.model.GetTransactionOut;
import org.openapitools.client.model.ListTransactionsOut;
import org.openapitools.client.model.UnconfirmTransactionIn;
import org.openapitools.client.model.UnconfirmTransactionOut;
import org.openapitools.client.model.UpdateTransactionIn;
import org.openapitools.client.model.UpdateTransactionOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TransactionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TransactionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TransactionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for cancelTransaction
     * @param key Transaction key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTransactionCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/transactions/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call cancelTransactionValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling cancelTransaction(Async)");
        }

        return cancelTransactionCall(key, _callback);

    }

    /**
     * Delete transaction
     * 
     * @param key Transaction key (required)
     * @return CancelTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public CancelTransactionOut cancelTransaction(String key) throws ApiException {
        ApiResponse<CancelTransactionOut> localVarResp = cancelTransactionWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Delete transaction
     * 
     * @param key Transaction key (required)
     * @return ApiResponse&lt;CancelTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CancelTransactionOut> cancelTransactionWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = cancelTransactionValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<CancelTransactionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete transaction (asynchronously)
     * 
     * @param key Transaction key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call cancelTransactionAsync(String key, final ApiCallback<CancelTransactionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = cancelTransactionValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<CancelTransactionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for confirmTransaction
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmTransactionCall(String key, ConfirmTransactionIn input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/api/v1/transactions/{key}/confirm"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call confirmTransactionValidateBeforeCall(String key, ConfirmTransactionIn input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling confirmTransaction(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling confirmTransaction(Async)");
        }

        return confirmTransactionCall(key, input, _callback);

    }

    /**
     * Confirm transaction
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @return ConfirmTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ConfirmTransactionOut confirmTransaction(String key, ConfirmTransactionIn input) throws ApiException {
        ApiResponse<ConfirmTransactionOut> localVarResp = confirmTransactionWithHttpInfo(key, input);
        return localVarResp.getData();
    }

    /**
     * Confirm transaction
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @return ApiResponse&lt;ConfirmTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ConfirmTransactionOut> confirmTransactionWithHttpInfo(String key, ConfirmTransactionIn input) throws ApiException {
        okhttp3.Call localVarCall = confirmTransactionValidateBeforeCall(key, input, null);
        Type localVarReturnType = new TypeToken<ConfirmTransactionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Confirm transaction (asynchronously)
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call confirmTransactionAsync(String key, ConfirmTransactionIn input, final ApiCallback<ConfirmTransactionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = confirmTransactionValidateBeforeCall(key, input, _callback);
        Type localVarReturnType = new TypeToken<ConfirmTransactionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTransaction
     * @param input Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionCall(CreateTransactionIn input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/api/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTransactionValidateBeforeCall(CreateTransactionIn input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling createTransaction(Async)");
        }

        return createTransactionCall(input, _callback);

    }

    /**
     * Store transaction
     * 
     * @param input Input (required)
     * @return CreateTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public CreateTransactionOut createTransaction(CreateTransactionIn input) throws ApiException {
        ApiResponse<CreateTransactionOut> localVarResp = createTransactionWithHttpInfo(input);
        return localVarResp.getData();
    }

    /**
     * Store transaction
     * 
     * @param input Input (required)
     * @return ApiResponse&lt;CreateTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CreateTransactionOut> createTransactionWithHttpInfo(CreateTransactionIn input) throws ApiException {
        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(input, null);
        Type localVarReturnType = new TypeToken<CreateTransactionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Store transaction (asynchronously)
     * 
     * @param input Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTransactionAsync(CreateTransactionIn input, final ApiCallback<CreateTransactionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTransactionValidateBeforeCall(input, _callback);
        Type localVarReturnType = new TypeToken<CreateTransactionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTransaction
     * @param key Transaction key (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionCall(String key, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/transactions/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTransactionValidateBeforeCall(String key, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling getTransaction(Async)");
        }

        return getTransactionCall(key, _callback);

    }

    /**
     * Retrieve transaction data.
     * 
     * @param key Transaction key (required)
     * @return GetTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetTransactionOut getTransaction(String key) throws ApiException {
        ApiResponse<GetTransactionOut> localVarResp = getTransactionWithHttpInfo(key);
        return localVarResp.getData();
    }

    /**
     * Retrieve transaction data.
     * 
     * @param key Transaction key (required)
     * @return ApiResponse&lt;GetTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetTransactionOut> getTransactionWithHttpInfo(String key) throws ApiException {
        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(key, null);
        Type localVarReturnType = new TypeToken<GetTransactionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Retrieve transaction data. (asynchronously)
     * 
     * @param key Transaction key (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getTransactionAsync(String key, final ApiCallback<GetTransactionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTransactionValidateBeforeCall(key, _callback);
        Type localVarReturnType = new TypeToken<GetTransactionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTransactions
     * @param filterText Filtering expression (optional)
     * @param offset Offset (optional)
     * @param hasNote Return only transactions with a note field set. (optional)
     * @param keyOrCustomId Taxamo provided transaction key or custom id (optional)
     * @param currencyCode Three letter ISO currency code. (optional)
     * @param orderDateTo Order date to in yyyy-MM-dd format. (optional)
     * @param sortReverse If true, results are sorted in descending order. (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param invoiceNumber Transaction invoice number. (optional)
     * @param taxCountryCodes Comma separated list of two letter ISO tax country codes. (optional)
     * @param statuses Comma separated list of of transaction statuses. &#39;N&#39; - unconfirmed transaction, &#39;C&#39; - confirmed transaction. (optional)
     * @param originalTransactionKey Taxamo provided original transaction key (optional)
     * @param orderDateFrom Order date from in yyyy-MM-dd format. (optional)
     * @param totalAmountGreaterThan Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned. (optional)
     * @param format Output format - supports &#39;csv&#39; value for this operation. (optional)
     * @param totalAmountLessThan Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned. (optional)
     * @param taxCountryCode Two letter ISO tax country code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsCall(String filterText, Integer offset, Boolean hasNote, String keyOrCustomId, String currencyCode, String orderDateTo, Boolean sortReverse, Integer limit, String invoiceNumber, String taxCountryCodes, String statuses, String originalTransactionKey, String orderDateFrom, String totalAmountGreaterThan, String format, String totalAmountLessThan, String taxCountryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (filterText != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter_text", filterText));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        if (hasNote != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("has_note", hasNote));
        }

        if (keyOrCustomId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("key_or_custom_id", keyOrCustomId));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_code", currencyCode));
        }

        if (orderDateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_date_to", orderDateTo));
        }

        if (sortReverse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort_reverse", sortReverse));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (invoiceNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_number", invoiceNumber));
        }

        if (taxCountryCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_country_codes", taxCountryCodes));
        }

        if (statuses != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statuses", statuses));
        }

        if (originalTransactionKey != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("original_transaction_key", originalTransactionKey));
        }

        if (orderDateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_date_from", orderDateFrom));
        }

        if (totalAmountGreaterThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_amount_greater_than", totalAmountGreaterThan));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (totalAmountLessThan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_amount_less_than", totalAmountLessThan));
        }

        if (taxCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_country_code", taxCountryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTransactionsValidateBeforeCall(String filterText, Integer offset, Boolean hasNote, String keyOrCustomId, String currencyCode, String orderDateTo, Boolean sortReverse, Integer limit, String invoiceNumber, String taxCountryCodes, String statuses, String originalTransactionKey, String orderDateFrom, String totalAmountGreaterThan, String format, String totalAmountLessThan, String taxCountryCode, final ApiCallback _callback) throws ApiException {
        return listTransactionsCall(filterText, offset, hasNote, keyOrCustomId, currencyCode, orderDateTo, sortReverse, limit, invoiceNumber, taxCountryCodes, statuses, originalTransactionKey, orderDateFrom, totalAmountGreaterThan, format, totalAmountLessThan, taxCountryCode, _callback);

    }

    /**
     * Browse transactions
     * 
     * @param filterText Filtering expression (optional)
     * @param offset Offset (optional)
     * @param hasNote Return only transactions with a note field set. (optional)
     * @param keyOrCustomId Taxamo provided transaction key or custom id (optional)
     * @param currencyCode Three letter ISO currency code. (optional)
     * @param orderDateTo Order date to in yyyy-MM-dd format. (optional)
     * @param sortReverse If true, results are sorted in descending order. (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param invoiceNumber Transaction invoice number. (optional)
     * @param taxCountryCodes Comma separated list of two letter ISO tax country codes. (optional)
     * @param statuses Comma separated list of of transaction statuses. &#39;N&#39; - unconfirmed transaction, &#39;C&#39; - confirmed transaction. (optional)
     * @param originalTransactionKey Taxamo provided original transaction key (optional)
     * @param orderDateFrom Order date from in yyyy-MM-dd format. (optional)
     * @param totalAmountGreaterThan Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned. (optional)
     * @param format Output format - supports &#39;csv&#39; value for this operation. (optional)
     * @param totalAmountLessThan Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned. (optional)
     * @param taxCountryCode Two letter ISO tax country code. (optional)
     * @return ListTransactionsOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ListTransactionsOut listTransactions(String filterText, Integer offset, Boolean hasNote, String keyOrCustomId, String currencyCode, String orderDateTo, Boolean sortReverse, Integer limit, String invoiceNumber, String taxCountryCodes, String statuses, String originalTransactionKey, String orderDateFrom, String totalAmountGreaterThan, String format, String totalAmountLessThan, String taxCountryCode) throws ApiException {
        ApiResponse<ListTransactionsOut> localVarResp = listTransactionsWithHttpInfo(filterText, offset, hasNote, keyOrCustomId, currencyCode, orderDateTo, sortReverse, limit, invoiceNumber, taxCountryCodes, statuses, originalTransactionKey, orderDateFrom, totalAmountGreaterThan, format, totalAmountLessThan, taxCountryCode);
        return localVarResp.getData();
    }

    /**
     * Browse transactions
     * 
     * @param filterText Filtering expression (optional)
     * @param offset Offset (optional)
     * @param hasNote Return only transactions with a note field set. (optional)
     * @param keyOrCustomId Taxamo provided transaction key or custom id (optional)
     * @param currencyCode Three letter ISO currency code. (optional)
     * @param orderDateTo Order date to in yyyy-MM-dd format. (optional)
     * @param sortReverse If true, results are sorted in descending order. (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param invoiceNumber Transaction invoice number. (optional)
     * @param taxCountryCodes Comma separated list of two letter ISO tax country codes. (optional)
     * @param statuses Comma separated list of of transaction statuses. &#39;N&#39; - unconfirmed transaction, &#39;C&#39; - confirmed transaction. (optional)
     * @param originalTransactionKey Taxamo provided original transaction key (optional)
     * @param orderDateFrom Order date from in yyyy-MM-dd format. (optional)
     * @param totalAmountGreaterThan Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned. (optional)
     * @param format Output format - supports &#39;csv&#39; value for this operation. (optional)
     * @param totalAmountLessThan Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned. (optional)
     * @param taxCountryCode Two letter ISO tax country code. (optional)
     * @return ApiResponse&lt;ListTransactionsOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ListTransactionsOut> listTransactionsWithHttpInfo(String filterText, Integer offset, Boolean hasNote, String keyOrCustomId, String currencyCode, String orderDateTo, Boolean sortReverse, Integer limit, String invoiceNumber, String taxCountryCodes, String statuses, String originalTransactionKey, String orderDateFrom, String totalAmountGreaterThan, String format, String totalAmountLessThan, String taxCountryCode) throws ApiException {
        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(filterText, offset, hasNote, keyOrCustomId, currencyCode, orderDateTo, sortReverse, limit, invoiceNumber, taxCountryCodes, statuses, originalTransactionKey, orderDateFrom, totalAmountGreaterThan, format, totalAmountLessThan, taxCountryCode, null);
        Type localVarReturnType = new TypeToken<ListTransactionsOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Browse transactions (asynchronously)
     * 
     * @param filterText Filtering expression (optional)
     * @param offset Offset (optional)
     * @param hasNote Return only transactions with a note field set. (optional)
     * @param keyOrCustomId Taxamo provided transaction key or custom id (optional)
     * @param currencyCode Three letter ISO currency code. (optional)
     * @param orderDateTo Order date to in yyyy-MM-dd format. (optional)
     * @param sortReverse If true, results are sorted in descending order. (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param invoiceNumber Transaction invoice number. (optional)
     * @param taxCountryCodes Comma separated list of two letter ISO tax country codes. (optional)
     * @param statuses Comma separated list of of transaction statuses. &#39;N&#39; - unconfirmed transaction, &#39;C&#39; - confirmed transaction. (optional)
     * @param originalTransactionKey Taxamo provided original transaction key (optional)
     * @param orderDateFrom Order date from in yyyy-MM-dd format. (optional)
     * @param totalAmountGreaterThan Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned. (optional)
     * @param format Output format - supports &#39;csv&#39; value for this operation. (optional)
     * @param totalAmountLessThan Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned. (optional)
     * @param taxCountryCode Two letter ISO tax country code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTransactionsAsync(String filterText, Integer offset, Boolean hasNote, String keyOrCustomId, String currencyCode, String orderDateTo, Boolean sortReverse, Integer limit, String invoiceNumber, String taxCountryCodes, String statuses, String originalTransactionKey, String orderDateFrom, String totalAmountGreaterThan, String format, String totalAmountLessThan, String taxCountryCode, final ApiCallback<ListTransactionsOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTransactionsValidateBeforeCall(filterText, offset, hasNote, keyOrCustomId, currencyCode, orderDateTo, sortReverse, limit, invoiceNumber, taxCountryCodes, statuses, originalTransactionKey, orderDateFrom, totalAmountGreaterThan, format, totalAmountLessThan, taxCountryCode, _callback);
        Type localVarReturnType = new TypeToken<ListTransactionsOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for unconfirmTransaction
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unconfirmTransactionCall(String key, UnconfirmTransactionIn input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/api/v1/transactions/{key}/unconfirm"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call unconfirmTransactionValidateBeforeCall(String key, UnconfirmTransactionIn input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling unconfirmTransaction(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling unconfirmTransaction(Async)");
        }

        return unconfirmTransactionCall(key, input, _callback);

    }

    /**
     * Un-confirm the transaction
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @return UnconfirmTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public UnconfirmTransactionOut unconfirmTransaction(String key, UnconfirmTransactionIn input) throws ApiException {
        ApiResponse<UnconfirmTransactionOut> localVarResp = unconfirmTransactionWithHttpInfo(key, input);
        return localVarResp.getData();
    }

    /**
     * Un-confirm the transaction
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @return ApiResponse&lt;UnconfirmTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UnconfirmTransactionOut> unconfirmTransactionWithHttpInfo(String key, UnconfirmTransactionIn input) throws ApiException {
        okhttp3.Call localVarCall = unconfirmTransactionValidateBeforeCall(key, input, null);
        Type localVarReturnType = new TypeToken<UnconfirmTransactionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Un-confirm the transaction (asynchronously)
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call unconfirmTransactionAsync(String key, UnconfirmTransactionIn input, final ApiCallback<UnconfirmTransactionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = unconfirmTransactionValidateBeforeCall(key, input, _callback);
        Type localVarReturnType = new TypeToken<UnconfirmTransactionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTransaction
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionCall(String key, UpdateTransactionIn input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/api/v1/transactions/{key}"
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTransactionValidateBeforeCall(String key, UpdateTransactionIn input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling updateTransaction(Async)");
        }

        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling updateTransaction(Async)");
        }

        return updateTransactionCall(key, input, _callback);

    }

    /**
     * Update transaction
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @return UpdateTransactionOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public UpdateTransactionOut updateTransaction(String key, UpdateTransactionIn input) throws ApiException {
        ApiResponse<UpdateTransactionOut> localVarResp = updateTransactionWithHttpInfo(key, input);
        return localVarResp.getData();
    }

    /**
     * Update transaction
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @return ApiResponse&lt;UpdateTransactionOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdateTransactionOut> updateTransactionWithHttpInfo(String key, UpdateTransactionIn input) throws ApiException {
        okhttp3.Call localVarCall = updateTransactionValidateBeforeCall(key, input, null);
        Type localVarReturnType = new TypeToken<UpdateTransactionOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update transaction (asynchronously)
     * 
     * @param key Transaction key. (required)
     * @param input Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateTransactionAsync(String key, UpdateTransactionIn input, final ApiCallback<UpdateTransactionOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTransactionValidateBeforeCall(key, input, _callback);
        Type localVarReturnType = new TypeToken<UpdateTransactionOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
