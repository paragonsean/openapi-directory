/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetSettlementSummaryIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetSettlementSummaryIn {
  public static final String SERIALIZED_NAME_END_MONTH = "end_month";
  @SerializedName(SERIALIZED_NAME_END_MONTH)
  private String endMonth;

  public static final String SERIALIZED_NAME_MOSS_COUNTRY_CODE = "moss_country_code";
  @SerializedName(SERIALIZED_NAME_MOSS_COUNTRY_CODE)
  private String mossCountryCode;

  public static final String SERIALIZED_NAME_START_MONTH = "start_month";
  @SerializedName(SERIALIZED_NAME_START_MONTH)
  private String startMonth;

  public static final String SERIALIZED_NAME_TAX_REGION = "tax_region";
  @SerializedName(SERIALIZED_NAME_TAX_REGION)
  private String taxRegion;

  public GetSettlementSummaryIn() {
  }

  public GetSettlementSummaryIn endMonth(String endMonth) {
    this.endMonth = endMonth;
    return this;
  }

  /**
   * Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
   * @return endMonth
   */
  @javax.annotation.Nullable
  public String getEndMonth() {
    return endMonth;
  }

  public void setEndMonth(String endMonth) {
    this.endMonth = endMonth;
  }


  public GetSettlementSummaryIn mossCountryCode(String mossCountryCode) {
    this.mossCountryCode = mossCountryCode;
    return this;
  }

  /**
   * MOSS country code, used to determine currency. If ommited, merchant default setting is used.
   * @return mossCountryCode
   */
  @javax.annotation.Nullable
  public String getMossCountryCode() {
    return mossCountryCode;
  }

  public void setMossCountryCode(String mossCountryCode) {
    this.mossCountryCode = mossCountryCode;
  }


  public GetSettlementSummaryIn startMonth(String startMonth) {
    this.startMonth = startMonth;
    return this;
  }

  /**
   * Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided.
   * @return startMonth
   */
  @javax.annotation.Nullable
  public String getStartMonth() {
    return startMonth;
  }

  public void setStartMonth(String startMonth) {
    this.startMonth = startMonth;
  }


  public GetSettlementSummaryIn taxRegion(String taxRegion) {
    this.taxRegion = taxRegion;
    return this;
  }

  /**
   * Tax region key
   * @return taxRegion
   */
  @javax.annotation.Nullable
  public String getTaxRegion() {
    return taxRegion;
  }

  public void setTaxRegion(String taxRegion) {
    this.taxRegion = taxRegion;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetSettlementSummaryIn getSettlementSummaryIn = (GetSettlementSummaryIn) o;
    return Objects.equals(this.endMonth, getSettlementSummaryIn.endMonth) &&
        Objects.equals(this.mossCountryCode, getSettlementSummaryIn.mossCountryCode) &&
        Objects.equals(this.startMonth, getSettlementSummaryIn.startMonth) &&
        Objects.equals(this.taxRegion, getSettlementSummaryIn.taxRegion);
  }

  @Override
  public int hashCode() {
    return Objects.hash(endMonth, mossCountryCode, startMonth, taxRegion);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetSettlementSummaryIn {\n");
    sb.append("    endMonth: ").append(toIndentedString(endMonth)).append("\n");
    sb.append("    mossCountryCode: ").append(toIndentedString(mossCountryCode)).append("\n");
    sb.append("    startMonth: ").append(toIndentedString(startMonth)).append("\n");
    sb.append("    taxRegion: ").append(toIndentedString(taxRegion)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("end_month");
    openapiFields.add("moss_country_code");
    openapiFields.add("start_month");
    openapiFields.add("tax_region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetSettlementSummaryIn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetSettlementSummaryIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetSettlementSummaryIn is not found in the empty JSON string", GetSettlementSummaryIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetSettlementSummaryIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetSettlementSummaryIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("end_month") != null && !jsonObj.get("end_month").isJsonNull()) && !jsonObj.get("end_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_month").toString()));
      }
      if ((jsonObj.get("moss_country_code") != null && !jsonObj.get("moss_country_code").isJsonNull()) && !jsonObj.get("moss_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `moss_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("moss_country_code").toString()));
      }
      if ((jsonObj.get("start_month") != null && !jsonObj.get("start_month").isJsonNull()) && !jsonObj.get("start_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_month").toString()));
      }
      if ((jsonObj.get("tax_region") != null && !jsonObj.get("tax_region").isJsonNull()) && !jsonObj.get("tax_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetSettlementSummaryIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetSettlementSummaryIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetSettlementSummaryIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetSettlementSummaryIn.class));

       return (TypeAdapter<T>) new TypeAdapter<GetSettlementSummaryIn>() {
           @Override
           public void write(JsonWriter out, GetSettlementSummaryIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetSettlementSummaryIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetSettlementSummaryIn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetSettlementSummaryIn
   * @throws IOException if the JSON string is invalid with respect to GetSettlementSummaryIn
   */
  public static GetSettlementSummaryIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetSettlementSummaryIn.class);
  }

  /**
   * Convert an instance of GetSettlementSummaryIn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

