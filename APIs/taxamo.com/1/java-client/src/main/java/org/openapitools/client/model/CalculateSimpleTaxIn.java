/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalculateSimpleTaxIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculateSimpleTaxIn {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "billing_country_code";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX = "buyer_credit_card_prefix";
  @SerializedName(SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX)
  private String buyerCreditCardPrefix;

  public static final String SERIALIZED_NAME_BUYER_TAX_NUMBER = "buyer_tax_number";
  @SerializedName(SERIALIZED_NAME_BUYER_TAX_NUMBER)
  private String buyerTaxNumber;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_FORCE_COUNTRY_CODE = "force_country_code";
  @SerializedName(SERIALIZED_NAME_FORCE_COUNTRY_CODE)
  private String forceCountryCode;

  public static final String SERIALIZED_NAME_INVOICE_ADDRESS_CITY = "invoice_address_city";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADDRESS_CITY)
  private String invoiceAddressCity;

  public static final String SERIALIZED_NAME_INVOICE_ADDRESS_POSTAL_CODE = "invoice_address_postal_code";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADDRESS_POSTAL_CODE)
  private String invoiceAddressPostalCode;

  public static final String SERIALIZED_NAME_INVOICE_ADDRESS_REGION = "invoice_address_region";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADDRESS_REGION)
  private String invoiceAddressRegion;

  public static final String SERIALIZED_NAME_ORDER_DATE = "order_date";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE)
  private String orderDate;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_TAX_DEDUCTED = "tax_deducted";
  @SerializedName(SERIALIZED_NAME_TAX_DEDUCTED)
  private Boolean taxDeducted;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public CalculateSimpleTaxIn() {
  }

  public CalculateSimpleTaxIn amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount. Required if total amount or both unit price and quantity are not provided.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public CalculateSimpleTaxIn billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Billing two letter ISO country code.
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public CalculateSimpleTaxIn buyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
    return this;
  }

  /**
   * First 6 digits of buyer&#39;s credit card prefix.
   * @return buyerCreditCardPrefix
   */
  @javax.annotation.Nullable
  public String getBuyerCreditCardPrefix() {
    return buyerCreditCardPrefix;
  }

  public void setBuyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
  }


  public CalculateSimpleTaxIn buyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
    return this;
  }

  /**
   *  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
   * @return buyerTaxNumber
   */
  @javax.annotation.Nullable
  public String getBuyerTaxNumber() {
    return buyerTaxNumber;
  }

  public void setBuyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
  }


  public CalculateSimpleTaxIn currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Currency code for transaction - e.g. EUR.
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public CalculateSimpleTaxIn forceCountryCode(String forceCountryCode) {
    this.forceCountryCode = forceCountryCode;
    return this;
  }

  /**
   * Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
   * @return forceCountryCode
   */
  @javax.annotation.Nullable
  public String getForceCountryCode() {
    return forceCountryCode;
  }

  public void setForceCountryCode(String forceCountryCode) {
    this.forceCountryCode = forceCountryCode;
  }


  public CalculateSimpleTaxIn invoiceAddressCity(String invoiceAddressCity) {
    this.invoiceAddressCity = invoiceAddressCity;
    return this;
  }

  /**
   * Invoice address/postal_code
   * @return invoiceAddressCity
   */
  @javax.annotation.Nullable
  public String getInvoiceAddressCity() {
    return invoiceAddressCity;
  }

  public void setInvoiceAddressCity(String invoiceAddressCity) {
    this.invoiceAddressCity = invoiceAddressCity;
  }


  public CalculateSimpleTaxIn invoiceAddressPostalCode(String invoiceAddressPostalCode) {
    this.invoiceAddressPostalCode = invoiceAddressPostalCode;
    return this;
  }

  /**
   * Invoice address/postal_code
   * @return invoiceAddressPostalCode
   */
  @javax.annotation.Nullable
  public String getInvoiceAddressPostalCode() {
    return invoiceAddressPostalCode;
  }

  public void setInvoiceAddressPostalCode(String invoiceAddressPostalCode) {
    this.invoiceAddressPostalCode = invoiceAddressPostalCode;
  }


  public CalculateSimpleTaxIn invoiceAddressRegion(String invoiceAddressRegion) {
    this.invoiceAddressRegion = invoiceAddressRegion;
    return this;
  }

  /**
   * Invoice address/region
   * @return invoiceAddressRegion
   */
  @javax.annotation.Nullable
  public String getInvoiceAddressRegion() {
    return invoiceAddressRegion;
  }

  public void setInvoiceAddressRegion(String invoiceAddressRegion) {
    this.invoiceAddressRegion = invoiceAddressRegion;
  }


  public CalculateSimpleTaxIn orderDate(String orderDate) {
    this.orderDate = orderDate;
    return this;
  }

  /**
   * Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
   * @return orderDate
   */
  @javax.annotation.Nullable
  public String getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(String orderDate) {
    this.orderDate = orderDate;
  }


  public CalculateSimpleTaxIn productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Product type, according to dictionary /dictionaries/product_types. 
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }


  public CalculateSimpleTaxIn quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity Defaults to 1.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public CalculateSimpleTaxIn taxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
    return this;
  }

  /**
   * If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
   * @return taxDeducted
   */
  @javax.annotation.Nullable
  public Boolean getTaxDeducted() {
    return taxDeducted;
  }

  public void setTaxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
  }


  public CalculateSimpleTaxIn totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount. Required if amount or both unit price and quantity are not provided.
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public CalculateSimpleTaxIn unitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Unit price.
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateSimpleTaxIn calculateSimpleTaxIn = (CalculateSimpleTaxIn) o;
    return Objects.equals(this.amount, calculateSimpleTaxIn.amount) &&
        Objects.equals(this.billingCountryCode, calculateSimpleTaxIn.billingCountryCode) &&
        Objects.equals(this.buyerCreditCardPrefix, calculateSimpleTaxIn.buyerCreditCardPrefix) &&
        Objects.equals(this.buyerTaxNumber, calculateSimpleTaxIn.buyerTaxNumber) &&
        Objects.equals(this.currencyCode, calculateSimpleTaxIn.currencyCode) &&
        Objects.equals(this.forceCountryCode, calculateSimpleTaxIn.forceCountryCode) &&
        Objects.equals(this.invoiceAddressCity, calculateSimpleTaxIn.invoiceAddressCity) &&
        Objects.equals(this.invoiceAddressPostalCode, calculateSimpleTaxIn.invoiceAddressPostalCode) &&
        Objects.equals(this.invoiceAddressRegion, calculateSimpleTaxIn.invoiceAddressRegion) &&
        Objects.equals(this.orderDate, calculateSimpleTaxIn.orderDate) &&
        Objects.equals(this.productType, calculateSimpleTaxIn.productType) &&
        Objects.equals(this.quantity, calculateSimpleTaxIn.quantity) &&
        Objects.equals(this.taxDeducted, calculateSimpleTaxIn.taxDeducted) &&
        Objects.equals(this.totalAmount, calculateSimpleTaxIn.totalAmount) &&
        Objects.equals(this.unitPrice, calculateSimpleTaxIn.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, billingCountryCode, buyerCreditCardPrefix, buyerTaxNumber, currencyCode, forceCountryCode, invoiceAddressCity, invoiceAddressPostalCode, invoiceAddressRegion, orderDate, productType, quantity, taxDeducted, totalAmount, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateSimpleTaxIn {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    buyerCreditCardPrefix: ").append(toIndentedString(buyerCreditCardPrefix)).append("\n");
    sb.append("    buyerTaxNumber: ").append(toIndentedString(buyerTaxNumber)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    forceCountryCode: ").append(toIndentedString(forceCountryCode)).append("\n");
    sb.append("    invoiceAddressCity: ").append(toIndentedString(invoiceAddressCity)).append("\n");
    sb.append("    invoiceAddressPostalCode: ").append(toIndentedString(invoiceAddressPostalCode)).append("\n");
    sb.append("    invoiceAddressRegion: ").append(toIndentedString(invoiceAddressRegion)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    taxDeducted: ").append(toIndentedString(taxDeducted)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("billing_country_code");
    openapiFields.add("buyer_credit_card_prefix");
    openapiFields.add("buyer_tax_number");
    openapiFields.add("currency_code");
    openapiFields.add("force_country_code");
    openapiFields.add("invoice_address_city");
    openapiFields.add("invoice_address_postal_code");
    openapiFields.add("invoice_address_region");
    openapiFields.add("order_date");
    openapiFields.add("product_type");
    openapiFields.add("quantity");
    openapiFields.add("tax_deducted");
    openapiFields.add("total_amount");
    openapiFields.add("unit_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency_code");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculateSimpleTaxIn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculateSimpleTaxIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateSimpleTaxIn is not found in the empty JSON string", CalculateSimpleTaxIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculateSimpleTaxIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateSimpleTaxIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : CalculateSimpleTaxIn.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_country_code") != null && !jsonObj.get("billing_country_code").isJsonNull()) && !jsonObj.get("billing_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_country_code").toString()));
      }
      if ((jsonObj.get("buyer_credit_card_prefix") != null && !jsonObj.get("buyer_credit_card_prefix").isJsonNull()) && !jsonObj.get("buyer_credit_card_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_credit_card_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_credit_card_prefix").toString()));
      }
      if ((jsonObj.get("buyer_tax_number") != null && !jsonObj.get("buyer_tax_number").isJsonNull()) && !jsonObj.get("buyer_tax_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_tax_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_tax_number").toString()));
      }
      if (!jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("force_country_code") != null && !jsonObj.get("force_country_code").isJsonNull()) && !jsonObj.get("force_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_country_code").toString()));
      }
      if ((jsonObj.get("invoice_address_city") != null && !jsonObj.get("invoice_address_city").isJsonNull()) && !jsonObj.get("invoice_address_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_address_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_address_city").toString()));
      }
      if ((jsonObj.get("invoice_address_postal_code") != null && !jsonObj.get("invoice_address_postal_code").isJsonNull()) && !jsonObj.get("invoice_address_postal_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_address_postal_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_address_postal_code").toString()));
      }
      if ((jsonObj.get("invoice_address_region") != null && !jsonObj.get("invoice_address_region").isJsonNull()) && !jsonObj.get("invoice_address_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_address_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_address_region").toString()));
      }
      if ((jsonObj.get("order_date") != null && !jsonObj.get("order_date").isJsonNull()) && !jsonObj.get("order_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_date").toString()));
      }
      if ((jsonObj.get("product_type") != null && !jsonObj.get("product_type").isJsonNull()) && !jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateSimpleTaxIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateSimpleTaxIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateSimpleTaxIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateSimpleTaxIn.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateSimpleTaxIn>() {
           @Override
           public void write(JsonWriter out, CalculateSimpleTaxIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateSimpleTaxIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculateSimpleTaxIn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculateSimpleTaxIn
   * @throws IOException if the JSON string is invalid with respect to CalculateSimpleTaxIn
   */
  public static CalculateSimpleTaxIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateSimpleTaxIn.class);
  }

  /**
   * Convert an instance of CalculateSimpleTaxIn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

