/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ValidateTaxNumberOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ValidateTaxNumberOut {
  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "billing_country_code";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_BUYER_TAX_NUMBER = "buyer_tax_number";
  @SerializedName(SERIALIZED_NAME_BUYER_TAX_NUMBER)
  private String buyerTaxNumber;

  public static final String SERIALIZED_NAME_BUYER_TAX_NUMBER_VALID = "buyer_tax_number_valid";
  @SerializedName(SERIALIZED_NAME_BUYER_TAX_NUMBER_VALID)
  private Boolean buyerTaxNumberValid;

  public static final String SERIALIZED_NAME_TAX_DEDUCTED = "tax_deducted";
  @SerializedName(SERIALIZED_NAME_TAX_DEDUCTED)
  private Boolean taxDeducted;

  public ValidateTaxNumberOut() {
  }

  public ValidateTaxNumberOut billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Billing two letter ISO country code.
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public ValidateTaxNumberOut buyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
    return this;
  }

  /**
   *  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
   * @return buyerTaxNumber
   */
  @javax.annotation.Nullable
  public String getBuyerTaxNumber() {
    return buyerTaxNumber;
  }

  public void setBuyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
  }


  public ValidateTaxNumberOut buyerTaxNumberValid(Boolean buyerTaxNumberValid) {
    this.buyerTaxNumberValid = buyerTaxNumberValid;
    return this;
  }

  /**
   * If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant&#39;s country), tax number doesn&#39;t get validated in that case.
   * @return buyerTaxNumberValid
   */
  @javax.annotation.Nullable
  public Boolean getBuyerTaxNumberValid() {
    return buyerTaxNumberValid;
  }

  public void setBuyerTaxNumberValid(Boolean buyerTaxNumberValid) {
    this.buyerTaxNumberValid = buyerTaxNumberValid;
  }


  public ValidateTaxNumberOut taxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
    return this;
  }

  /**
   * If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
   * @return taxDeducted
   */
  @javax.annotation.Nullable
  public Boolean getTaxDeducted() {
    return taxDeducted;
  }

  public void setTaxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ValidateTaxNumberOut validateTaxNumberOut = (ValidateTaxNumberOut) o;
    return Objects.equals(this.billingCountryCode, validateTaxNumberOut.billingCountryCode) &&
        Objects.equals(this.buyerTaxNumber, validateTaxNumberOut.buyerTaxNumber) &&
        Objects.equals(this.buyerTaxNumberValid, validateTaxNumberOut.buyerTaxNumberValid) &&
        Objects.equals(this.taxDeducted, validateTaxNumberOut.taxDeducted);
  }

  @Override
  public int hashCode() {
    return Objects.hash(billingCountryCode, buyerTaxNumber, buyerTaxNumberValid, taxDeducted);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ValidateTaxNumberOut {\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    buyerTaxNumber: ").append(toIndentedString(buyerTaxNumber)).append("\n");
    sb.append("    buyerTaxNumberValid: ").append(toIndentedString(buyerTaxNumberValid)).append("\n");
    sb.append("    taxDeducted: ").append(toIndentedString(taxDeducted)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("billing_country_code");
    openapiFields.add("buyer_tax_number");
    openapiFields.add("buyer_tax_number_valid");
    openapiFields.add("tax_deducted");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ValidateTaxNumberOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ValidateTaxNumberOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ValidateTaxNumberOut is not found in the empty JSON string", ValidateTaxNumberOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ValidateTaxNumberOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ValidateTaxNumberOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("billing_country_code") != null && !jsonObj.get("billing_country_code").isJsonNull()) && !jsonObj.get("billing_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_country_code").toString()));
      }
      if ((jsonObj.get("buyer_tax_number") != null && !jsonObj.get("buyer_tax_number").isJsonNull()) && !jsonObj.get("buyer_tax_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_tax_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_tax_number").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ValidateTaxNumberOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ValidateTaxNumberOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ValidateTaxNumberOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ValidateTaxNumberOut.class));

       return (TypeAdapter<T>) new TypeAdapter<ValidateTaxNumberOut>() {
           @Override
           public void write(JsonWriter out, ValidateTaxNumberOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ValidateTaxNumberOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ValidateTaxNumberOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ValidateTaxNumberOut
   * @throws IOException if the JSON string is invalid with respect to ValidateTaxNumberOut
   */
  public static ValidateTaxNumberOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ValidateTaxNumberOut.class);
  }

  /**
   * Convert an instance of ValidateTaxNumberOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

