/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalCurrencies;
import org.openapitools.client.model.Countries;
import org.openapitools.client.model.CustomFields;
import org.openapitools.client.model.Evidence;
import org.openapitools.client.model.InvoiceAddress;
import org.openapitools.client.model.TaxDataSchema;
import org.openapitools.client.model.TransactionLines;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Transactions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Transactions {
  public static final String SERIALIZED_NAME_ADDITIONAL_CURRENCIES = "additional_currencies";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CURRENCIES)
  private AdditionalCurrencies additionalCurrencies;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "billing_country_code";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX = "buyer_credit_card_prefix";
  @SerializedName(SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX)
  private String buyerCreditCardPrefix;

  public static final String SERIALIZED_NAME_BUYER_EMAIL = "buyer_email";
  @SerializedName(SERIALIZED_NAME_BUYER_EMAIL)
  private String buyerEmail;

  public static final String SERIALIZED_NAME_BUYER_IP = "buyer_ip";
  @SerializedName(SERIALIZED_NAME_BUYER_IP)
  private String buyerIp;

  public static final String SERIALIZED_NAME_BUYER_NAME = "buyer_name";
  @SerializedName(SERIALIZED_NAME_BUYER_NAME)
  private String buyerName;

  public static final String SERIALIZED_NAME_BUYER_TAX_NUMBER = "buyer_tax_number";
  @SerializedName(SERIALIZED_NAME_BUYER_TAX_NUMBER)
  private String buyerTaxNumber;

  public static final String SERIALIZED_NAME_BUYER_TAX_NUMBER_VALID = "buyer_tax_number_valid";
  @SerializedName(SERIALIZED_NAME_BUYER_TAX_NUMBER_VALID)
  private Boolean buyerTaxNumberValid;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CONFIRM_TIMESTAMP = "confirm_timestamp";
  @SerializedName(SERIALIZED_NAME_CONFIRM_TIMESTAMP)
  private String confirmTimestamp;

  public static final String SERIALIZED_NAME_COUNTRIES = "countries";
  @SerializedName(SERIALIZED_NAME_COUNTRIES)
  private Countries countries;

  public static final String SERIALIZED_NAME_CREATE_TIMESTAMP = "create_timestamp";
  @SerializedName(SERIALIZED_NAME_CREATE_TIMESTAMP)
  private String createTimestamp;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "custom_data";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private String customData;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFields> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ID = "custom_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DEDUCTED_TAX_AMOUNT = "deducted_tax_amount";
  @SerializedName(SERIALIZED_NAME_DEDUCTED_TAX_AMOUNT)
  private BigDecimal deductedTaxAmount;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private Evidence evidence;

  public static final String SERIALIZED_NAME_EXTERNAL_KEY = "external_key";
  @SerializedName(SERIALIZED_NAME_EXTERNAL_KEY)
  private String externalKey;

  public static final String SERIALIZED_NAME_FORCE_COUNTRY_CODE = "force_country_code";
  @SerializedName(SERIALIZED_NAME_FORCE_COUNTRY_CODE)
  private String forceCountryCode;

  public static final String SERIALIZED_NAME_FULLY_INFORMATIVE = "fully_informative";
  @SerializedName(SERIALIZED_NAME_FULLY_INFORMATIVE)
  private Boolean fullyInformative;

  public static final String SERIALIZED_NAME_INVOICE_ADDRESS = "invoice_address";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADDRESS)
  private InvoiceAddress invoiceAddress;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private String invoiceDate;

  public static final String SERIALIZED_NAME_INVOICE_IMAGE_URL = "invoice_image_url";
  @SerializedName(SERIALIZED_NAME_INVOICE_IMAGE_URL)
  private String invoiceImageUrl;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE_PLACE = "invoice_place";
  @SerializedName(SERIALIZED_NAME_INVOICE_PLACE)
  private String invoicePlace;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private String key;

  public static final String SERIALIZED_NAME_KIND = "kind";
  @SerializedName(SERIALIZED_NAME_KIND)
  private String kind;

  public static final String SERIALIZED_NAME_MANUAL = "manual";
  @SerializedName(SERIALIZED_NAME_MANUAL)
  private Boolean manual;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_DATE = "order_date";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE)
  private String orderDate;

  public static final String SERIALIZED_NAME_ORIGINAL_TRANSACTION_KEY = "original_transaction_key";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TRANSACTION_KEY)
  private String originalTransactionKey;

  public static final String SERIALIZED_NAME_REFUNDED_TAX_AMOUNT = "refunded_tax_amount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_TAX_AMOUNT)
  private BigDecimal refundedTaxAmount;

  public static final String SERIALIZED_NAME_REFUNDED_TOTAL_AMOUNT = "refunded_total_amount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_TOTAL_AMOUNT)
  private BigDecimal refundedTotalAmount;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_ID = "sub_account_id";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_ID)
  private String subAccountId;

  public static final String SERIALIZED_NAME_SUPPLY_DATE = "supply_date";
  @SerializedName(SERIALIZED_NAME_SUPPLY_DATE)
  private String supplyDate;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_CODE = "tax_country_code";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_CODE)
  private String taxCountryCode;

  public static final String SERIALIZED_NAME_TAX_DATA = "tax_data";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private TaxDataSchema taxData;

  public static final String SERIALIZED_NAME_TAX_DEDUCTED = "tax_deducted";
  @SerializedName(SERIALIZED_NAME_TAX_DEDUCTED)
  private Boolean taxDeducted;

  public static final String SERIALIZED_NAME_TAX_ENTITY_NAME = "tax_entity_name";
  @SerializedName(SERIALIZED_NAME_TAX_ENTITY_NAME)
  private String taxEntityName;

  public static final String SERIALIZED_NAME_TAX_NUMBER_SERVICE = "tax_number_service";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER_SERVICE)
  private String taxNumberService;

  public static final String SERIALIZED_NAME_TAX_SUPPORTED = "tax_supported";
  @SerializedName(SERIALIZED_NAME_TAX_SUPPORTED)
  private Boolean taxSupported;

  public static final String SERIALIZED_NAME_TAX_TIMEZONE = "tax_timezone";
  @SerializedName(SERIALIZED_NAME_TAX_TIMEZONE)
  private String taxTimezone;

  public static final String SERIALIZED_NAME_TEST = "test";
  @SerializedName(SERIALIZED_NAME_TEST)
  private Boolean test;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_TRANSACTION_LINES = "transaction_lines";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LINES)
  private List<TransactionLines> transactionLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verification_token";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  private String verificationToken;

  public Transactions() {
  }

  public Transactions additionalCurrencies(AdditionalCurrencies additionalCurrencies) {
    this.additionalCurrencies = additionalCurrencies;
    return this;
  }

  /**
   * Get additionalCurrencies
   * @return additionalCurrencies
   */
  @javax.annotation.Nullable
  public AdditionalCurrencies getAdditionalCurrencies() {
    return additionalCurrencies;
  }

  public void setAdditionalCurrencies(AdditionalCurrencies additionalCurrencies) {
    this.additionalCurrencies = additionalCurrencies;
  }


  public Transactions amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount of transaction without tax.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public Transactions billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Billing two letter ISO country code.
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public Transactions buyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
    return this;
  }

  /**
   * First 6 digits of buyer&#39;s credit card prefix.
   * @return buyerCreditCardPrefix
   */
  @javax.annotation.Nullable
  public String getBuyerCreditCardPrefix() {
    return buyerCreditCardPrefix;
  }

  public void setBuyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
  }


  public Transactions buyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
    return this;
  }

  /**
   * Buyer&#39;s declared email address.
   * @return buyerEmail
   */
  @javax.annotation.Nullable
  public String getBuyerEmail() {
    return buyerEmail;
  }

  public void setBuyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
  }


  public Transactions buyerIp(String buyerIp) {
    this.buyerIp = buyerIp;
    return this;
  }

  /**
   * IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
   * @return buyerIp
   */
  @javax.annotation.Nullable
  public String getBuyerIp() {
    return buyerIp;
  }

  public void setBuyerIp(String buyerIp) {
    this.buyerIp = buyerIp;
  }


  public Transactions buyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  /**
   * Buyer&#39;s name - first name and last name or company name.
   * @return buyerName
   */
  @javax.annotation.Nullable
  public String getBuyerName() {
    return buyerName;
  }

  public void setBuyerName(String buyerName) {
    this.buyerName = buyerName;
  }


  public Transactions buyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
    return this;
  }

  /**
   *  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
   * @return buyerTaxNumber
   */
  @javax.annotation.Nullable
  public String getBuyerTaxNumber() {
    return buyerTaxNumber;
  }

  public void setBuyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
  }


  public Transactions buyerTaxNumberValid(Boolean buyerTaxNumberValid) {
    this.buyerTaxNumberValid = buyerTaxNumberValid;
    return this;
  }

  /**
   * If the buyer tax number has been provided and was validated successfully. Always true for domestic transactions (billing country same as merchant&#39;s country), tax number doesn&#39;t get validated in that case.
   * @return buyerTaxNumberValid
   */
  @javax.annotation.Nullable
  public Boolean getBuyerTaxNumberValid() {
    return buyerTaxNumberValid;
  }

  public void setBuyerTaxNumberValid(Boolean buyerTaxNumberValid) {
    this.buyerTaxNumberValid = buyerTaxNumberValid;
  }


  public Transactions comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Additional information about the transaction - for example if the evidence has been amended.
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public Transactions confirmTimestamp(String confirmTimestamp) {
    this.confirmTimestamp = confirmTimestamp;
    return this;
  }

  /**
   * Date and time of transaction confirmation.
   * @return confirmTimestamp
   */
  @javax.annotation.Nullable
  public String getConfirmTimestamp() {
    return confirmTimestamp;
  }

  public void setConfirmTimestamp(String confirmTimestamp) {
    this.confirmTimestamp = confirmTimestamp;
  }


  public Transactions countries(Countries countries) {
    this.countries = countries;
    return this;
  }

  /**
   * Get countries
   * @return countries
   */
  @javax.annotation.Nullable
  public Countries getCountries() {
    return countries;
  }

  public void setCountries(Countries countries) {
    this.countries = countries;
  }


  public Transactions createTimestamp(String createTimestamp) {
    this.createTimestamp = createTimestamp;
    return this;
  }

  /**
   * Date and time of transaction creation.
   * @return createTimestamp
   */
  @javax.annotation.Nullable
  public String getCreateTimestamp() {
    return createTimestamp;
  }

  public void setCreateTimestamp(String createTimestamp) {
    this.createTimestamp = createTimestamp;
  }


  public Transactions currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Currency code for transaction - e.g. EUR.
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public Transactions customData(String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * Custom data related to transaction.
   * @return customData
   */
  @javax.annotation.Nullable
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(String customData) {
    this.customData = customData;
  }


  public Transactions customFields(List<CustomFields> customFields) {
    this.customFields = customFields;
    return this;
  }

  public Transactions addCustomFieldsItem(CustomFields customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFields> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomFields> customFields) {
    this.customFields = customFields;
  }


  public Transactions customId(String customId) {
    this.customId = customId;
    return this;
  }

  /**
   * Custom identifier provided upon transaction creation.
   * @return customId
   */
  @javax.annotation.Nullable
  public String getCustomId() {
    return customId;
  }

  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public Transactions customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Free-form field for storing customer id.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public Transactions deductedTaxAmount(BigDecimal deductedTaxAmount) {
    this.deductedTaxAmount = deductedTaxAmount;
    return this;
  }

  /**
   * How much tax has been deducted.
   * @return deductedTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDeductedTaxAmount() {
    return deductedTaxAmount;
  }

  public void setDeductedTaxAmount(BigDecimal deductedTaxAmount) {
    this.deductedTaxAmount = deductedTaxAmount;
  }


  public Transactions description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Transaction description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Transactions evidence(Evidence evidence) {
    this.evidence = evidence;
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public Evidence getEvidence() {
    return evidence;
  }

  public void setEvidence(Evidence evidence) {
    this.evidence = evidence;
  }


  public Transactions externalKey(String externalKey) {
    this.externalKey = externalKey;
    return this;
  }

  /**
   * Transaction external key
   * @return externalKey
   */
  @javax.annotation.Nullable
  public String getExternalKey() {
    return externalKey;
  }

  public void setExternalKey(String externalKey) {
    this.externalKey = externalKey;
  }


  public Transactions forceCountryCode(String forceCountryCode) {
    this.forceCountryCode = forceCountryCode;
    return this;
  }

  /**
   * Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
   * @return forceCountryCode
   */
  @javax.annotation.Nullable
  public String getForceCountryCode() {
    return forceCountryCode;
  }

  public void setForceCountryCode(String forceCountryCode) {
    this.forceCountryCode = forceCountryCode;
  }


  public Transactions fullyInformative(Boolean fullyInformative) {
    this.fullyInformative = fullyInformative;
    return this;
  }

  /**
   * Set to true if transaction has only informative lines.
   * @return fullyInformative
   */
  @javax.annotation.Nullable
  public Boolean getFullyInformative() {
    return fullyInformative;
  }

  public void setFullyInformative(Boolean fullyInformative) {
    this.fullyInformative = fullyInformative;
  }


  public Transactions invoiceAddress(InvoiceAddress invoiceAddress) {
    this.invoiceAddress = invoiceAddress;
    return this;
  }

  /**
   * Get invoiceAddress
   * @return invoiceAddress
   */
  @javax.annotation.Nullable
  public InvoiceAddress getInvoiceAddress() {
    return invoiceAddress;
  }

  public void setInvoiceAddress(InvoiceAddress invoiceAddress) {
    this.invoiceAddress = invoiceAddress;
  }


  public Transactions invoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Invoice date of issue.
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public String getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public Transactions invoiceImageUrl(String invoiceImageUrl) {
    this.invoiceImageUrl = invoiceImageUrl;
    return this;
  }

  /**
   * Invoice image URL - provided by Taxamo.
   * @return invoiceImageUrl
   */
  @javax.annotation.Nullable
  public String getInvoiceImageUrl() {
    return invoiceImageUrl;
  }

  public void setInvoiceImageUrl(String invoiceImageUrl) {
    this.invoiceImageUrl = invoiceImageUrl;
  }


  public Transactions invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Invoice number.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public Transactions invoicePlace(String invoicePlace) {
    this.invoicePlace = invoicePlace;
    return this;
  }

  /**
   * Invoice place of issue.
   * @return invoicePlace
   */
  @javax.annotation.Nullable
  public String getInvoicePlace() {
    return invoicePlace;
  }

  public void setInvoicePlace(String invoicePlace) {
    this.invoicePlace = invoicePlace;
  }


  public Transactions key(String key) {
    this.key = key;
    return this;
  }

  /**
   * Id generated by taxamo.
   * @return key
   */
  @javax.annotation.Nullable
  public String getKey() {
    return key;
  }

  public void setKey(String key) {
    this.key = key;
  }


  public Transactions kind(String kind) {
    this.kind = kind;
    return this;
  }

  /**
   * Transaction kind: eu-b2c, eu-b2b, domestic, untaxed
   * @return kind
   */
  @javax.annotation.Nullable
  public String getKind() {
    return kind;
  }

  public void setKind(String kind) {
    this.kind = kind;
  }


  public Transactions manual(Boolean manual) {
    this.manual = manual;
    return this;
  }

  /**
   * Is the transaction created manually - using private token. In manual mode, it is the merchant who calculates tax country and validates evidence. If you need API to do that when accessing the API with private token, just skip the &#39;manual&#39; flag or use false value there and provide customer&#39;s ip address through buyer_ip field. Manual mode is also used when using original_transaction_key field.
   * @return manual
   */
  @javax.annotation.Nullable
  public Boolean getManual() {
    return manual;
  }

  public void setManual(Boolean manual) {
    this.manual = manual;
  }


  public Transactions note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Additional note related to transaction state - for example if the transaction was created in a &#39;catch-all&#39; mode or the VAT number re-check for subscriptions has failed.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public Transactions orderDate(String orderDate) {
    this.orderDate = orderDate;
    return this;
  }

  /**
   * Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
   * @return orderDate
   */
  @javax.annotation.Nullable
  public String getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(String orderDate) {
    this.orderDate = orderDate;
  }


  public Transactions originalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
    return this;
  }

  /**
   * Use data and evidence from original transaction. Tax will be re-calculated, but evidence won&#39;t be re-checked. This parameter is taken into account only when &#39;manual&#39; flag is raised.
   * @return originalTransactionKey
   */
  @javax.annotation.Nullable
  public String getOriginalTransactionKey() {
    return originalTransactionKey;
  }

  public void setOriginalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
  }


  public Transactions refundedTaxAmount(BigDecimal refundedTaxAmount) {
    this.refundedTaxAmount = refundedTaxAmount;
    return this;
  }

  /**
   * Refunded tax amount.
   * @return refundedTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedTaxAmount() {
    return refundedTaxAmount;
  }

  public void setRefundedTaxAmount(BigDecimal refundedTaxAmount) {
    this.refundedTaxAmount = refundedTaxAmount;
  }


  public Transactions refundedTotalAmount(BigDecimal refundedTotalAmount) {
    this.refundedTotalAmount = refundedTotalAmount;
    return this;
  }

  /**
   * Total amount refunde (including tax).
   * @return refundedTotalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedTotalAmount() {
    return refundedTotalAmount;
  }

  public void setRefundedTotalAmount(BigDecimal refundedTotalAmount) {
    this.refundedTotalAmount = refundedTotalAmount;
  }


  public Transactions source(String source) {
    this.source = source;
    return this;
  }

  /**
   * Transaction source software - e.g. plugin
   * @return source
   */
  @javax.annotation.Nullable
  public String getSource() {
    return source;
  }

  public void setSource(String source) {
    this.source = source;
  }


  public Transactions status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Transaction status: &#39;N&#39; - new, &#39;C&#39; - confirmed. Can use &#39;C&#39; in store-transaction! with private-token to create confirmed transaction, otherwise &#39;N&#39; is default status. Not applicable for update-transaction!.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public Transactions subAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
    return this;
  }

  /**
   * Sub account identifier.
   * @return subAccountId
   */
  @javax.annotation.Nullable
  public String getSubAccountId() {
    return subAccountId;
  }

  public void setSubAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
  }


  public Transactions supplyDate(String supplyDate) {
    this.supplyDate = supplyDate;
    return this;
  }

  /**
   * Supply date in yyyy-MM-dd format.
   * @return supplyDate
   */
  @javax.annotation.Nullable
  public String getSupplyDate() {
    return supplyDate;
  }

  public void setSupplyDate(String supplyDate) {
    this.supplyDate = supplyDate;
  }


  public Transactions taxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Tax amount of transaction.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public Transactions taxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
    return this;
  }

  /**
   * Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
   * @return taxCountryCode
   */
  @javax.annotation.Nullable
  public String getTaxCountryCode() {
    return taxCountryCode;
  }

  public void setTaxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
  }


  public Transactions taxData(TaxDataSchema taxData) {
    this.taxData = taxData;
    return this;
  }

  /**
   * Get taxData
   * @return taxData
   */
  @javax.annotation.Nullable
  public TaxDataSchema getTaxData() {
    return taxData;
  }

  public void setTaxData(TaxDataSchema taxData) {
    this.taxData = taxData;
  }


  public Transactions taxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
    return this;
  }

  /**
   * If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example.
   * @return taxDeducted
   */
  @javax.annotation.Nullable
  public Boolean getTaxDeducted() {
    return taxDeducted;
  }

  public void setTaxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
  }


  public Transactions taxEntityName(String taxEntityName) {
    this.taxEntityName = taxEntityName;
    return this;
  }

  /**
   * To which entity is the tax due.
   * @return taxEntityName
   */
  @javax.annotation.Nullable
  public String getTaxEntityName() {
    return taxEntityName;
  }

  public void setTaxEntityName(String taxEntityName) {
    this.taxEntityName = taxEntityName;
  }


  public Transactions taxNumberService(String taxNumberService) {
    this.taxNumberService = taxNumberService;
    return this;
  }

  /**
   * Tax number service identifier - if available for a given region and the region is enabled.
   * @return taxNumberService
   */
  @javax.annotation.Nullable
  public String getTaxNumberService() {
    return taxNumberService;
  }

  public void setTaxNumberService(String taxNumberService) {
    this.taxNumberService = taxNumberService;
  }


  public Transactions taxSupported(Boolean taxSupported) {
    this.taxSupported = taxSupported;
    return this;
  }

  /**
   * Is tax calculation supported for a detected tax location?
   * @return taxSupported
   */
  @javax.annotation.Nullable
  public Boolean getTaxSupported() {
    return taxSupported;
  }

  public void setTaxSupported(Boolean taxSupported) {
    this.taxSupported = taxSupported;
  }


  public Transactions taxTimezone(String taxTimezone) {
    this.taxTimezone = taxTimezone;
    return this;
  }

  /**
   * Timezone name for tax transaction.
   * @return taxTimezone
   */
  @javax.annotation.Nullable
  public String getTaxTimezone() {
    return taxTimezone;
  }

  public void setTaxTimezone(String taxTimezone) {
    this.taxTimezone = taxTimezone;
  }


  public Transactions test(Boolean test) {
    this.test = test;
    return this;
  }

  /**
   * Was this transaction created in test mode?
   * @return test
   */
  @javax.annotation.Nullable
  public Boolean getTest() {
    return test;
  }

  public void setTest(Boolean test) {
    this.test = test;
  }


  public Transactions totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount of transaction.
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public Transactions transactionLines(List<TransactionLines> transactionLines) {
    this.transactionLines = transactionLines;
    return this;
  }

  public Transactions addTransactionLinesItem(TransactionLines transactionLinesItem) {
    if (this.transactionLines == null) {
      this.transactionLines = new ArrayList<>();
    }
    this.transactionLines.add(transactionLinesItem);
    return this;
  }

  /**
   * Transaction lines.
   * @return transactionLines
   */
  @javax.annotation.Nonnull
  public List<TransactionLines> getTransactionLines() {
    return transactionLines;
  }

  public void setTransactionLines(List<TransactionLines> transactionLines) {
    this.transactionLines = transactionLines;
  }


  public Transactions verificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

  /**
   * Verification token
   * @return verificationToken
   */
  @javax.annotation.Nullable
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Transactions transactions = (Transactions) o;
    return Objects.equals(this.additionalCurrencies, transactions.additionalCurrencies) &&
        Objects.equals(this.amount, transactions.amount) &&
        Objects.equals(this.billingCountryCode, transactions.billingCountryCode) &&
        Objects.equals(this.buyerCreditCardPrefix, transactions.buyerCreditCardPrefix) &&
        Objects.equals(this.buyerEmail, transactions.buyerEmail) &&
        Objects.equals(this.buyerIp, transactions.buyerIp) &&
        Objects.equals(this.buyerName, transactions.buyerName) &&
        Objects.equals(this.buyerTaxNumber, transactions.buyerTaxNumber) &&
        Objects.equals(this.buyerTaxNumberValid, transactions.buyerTaxNumberValid) &&
        Objects.equals(this.comments, transactions.comments) &&
        Objects.equals(this.confirmTimestamp, transactions.confirmTimestamp) &&
        Objects.equals(this.countries, transactions.countries) &&
        Objects.equals(this.createTimestamp, transactions.createTimestamp) &&
        Objects.equals(this.currencyCode, transactions.currencyCode) &&
        Objects.equals(this.customData, transactions.customData) &&
        Objects.equals(this.customFields, transactions.customFields) &&
        Objects.equals(this.customId, transactions.customId) &&
        Objects.equals(this.customerId, transactions.customerId) &&
        Objects.equals(this.deductedTaxAmount, transactions.deductedTaxAmount) &&
        Objects.equals(this.description, transactions.description) &&
        Objects.equals(this.evidence, transactions.evidence) &&
        Objects.equals(this.externalKey, transactions.externalKey) &&
        Objects.equals(this.forceCountryCode, transactions.forceCountryCode) &&
        Objects.equals(this.fullyInformative, transactions.fullyInformative) &&
        Objects.equals(this.invoiceAddress, transactions.invoiceAddress) &&
        Objects.equals(this.invoiceDate, transactions.invoiceDate) &&
        Objects.equals(this.invoiceImageUrl, transactions.invoiceImageUrl) &&
        Objects.equals(this.invoiceNumber, transactions.invoiceNumber) &&
        Objects.equals(this.invoicePlace, transactions.invoicePlace) &&
        Objects.equals(this.key, transactions.key) &&
        Objects.equals(this.kind, transactions.kind) &&
        Objects.equals(this.manual, transactions.manual) &&
        Objects.equals(this.note, transactions.note) &&
        Objects.equals(this.orderDate, transactions.orderDate) &&
        Objects.equals(this.originalTransactionKey, transactions.originalTransactionKey) &&
        Objects.equals(this.refundedTaxAmount, transactions.refundedTaxAmount) &&
        Objects.equals(this.refundedTotalAmount, transactions.refundedTotalAmount) &&
        Objects.equals(this.source, transactions.source) &&
        Objects.equals(this.status, transactions.status) &&
        Objects.equals(this.subAccountId, transactions.subAccountId) &&
        Objects.equals(this.supplyDate, transactions.supplyDate) &&
        Objects.equals(this.taxAmount, transactions.taxAmount) &&
        Objects.equals(this.taxCountryCode, transactions.taxCountryCode) &&
        Objects.equals(this.taxData, transactions.taxData) &&
        Objects.equals(this.taxDeducted, transactions.taxDeducted) &&
        Objects.equals(this.taxEntityName, transactions.taxEntityName) &&
        Objects.equals(this.taxNumberService, transactions.taxNumberService) &&
        Objects.equals(this.taxSupported, transactions.taxSupported) &&
        Objects.equals(this.taxTimezone, transactions.taxTimezone) &&
        Objects.equals(this.test, transactions.test) &&
        Objects.equals(this.totalAmount, transactions.totalAmount) &&
        Objects.equals(this.transactionLines, transactions.transactionLines) &&
        Objects.equals(this.verificationToken, transactions.verificationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCurrencies, amount, billingCountryCode, buyerCreditCardPrefix, buyerEmail, buyerIp, buyerName, buyerTaxNumber, buyerTaxNumberValid, comments, confirmTimestamp, countries, createTimestamp, currencyCode, customData, customFields, customId, customerId, deductedTaxAmount, description, evidence, externalKey, forceCountryCode, fullyInformative, invoiceAddress, invoiceDate, invoiceImageUrl, invoiceNumber, invoicePlace, key, kind, manual, note, orderDate, originalTransactionKey, refundedTaxAmount, refundedTotalAmount, source, status, subAccountId, supplyDate, taxAmount, taxCountryCode, taxData, taxDeducted, taxEntityName, taxNumberService, taxSupported, taxTimezone, test, totalAmount, transactionLines, verificationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Transactions {\n");
    sb.append("    additionalCurrencies: ").append(toIndentedString(additionalCurrencies)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    buyerCreditCardPrefix: ").append(toIndentedString(buyerCreditCardPrefix)).append("\n");
    sb.append("    buyerEmail: ").append(toIndentedString(buyerEmail)).append("\n");
    sb.append("    buyerIp: ").append(toIndentedString(buyerIp)).append("\n");
    sb.append("    buyerName: ").append(toIndentedString(buyerName)).append("\n");
    sb.append("    buyerTaxNumber: ").append(toIndentedString(buyerTaxNumber)).append("\n");
    sb.append("    buyerTaxNumberValid: ").append(toIndentedString(buyerTaxNumberValid)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    confirmTimestamp: ").append(toIndentedString(confirmTimestamp)).append("\n");
    sb.append("    countries: ").append(toIndentedString(countries)).append("\n");
    sb.append("    createTimestamp: ").append(toIndentedString(createTimestamp)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    deductedTaxAmount: ").append(toIndentedString(deductedTaxAmount)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    externalKey: ").append(toIndentedString(externalKey)).append("\n");
    sb.append("    forceCountryCode: ").append(toIndentedString(forceCountryCode)).append("\n");
    sb.append("    fullyInformative: ").append(toIndentedString(fullyInformative)).append("\n");
    sb.append("    invoiceAddress: ").append(toIndentedString(invoiceAddress)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoiceImageUrl: ").append(toIndentedString(invoiceImageUrl)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoicePlace: ").append(toIndentedString(invoicePlace)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    kind: ").append(toIndentedString(kind)).append("\n");
    sb.append("    manual: ").append(toIndentedString(manual)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    originalTransactionKey: ").append(toIndentedString(originalTransactionKey)).append("\n");
    sb.append("    refundedTaxAmount: ").append(toIndentedString(refundedTaxAmount)).append("\n");
    sb.append("    refundedTotalAmount: ").append(toIndentedString(refundedTotalAmount)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subAccountId: ").append(toIndentedString(subAccountId)).append("\n");
    sb.append("    supplyDate: ").append(toIndentedString(supplyDate)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxCountryCode: ").append(toIndentedString(taxCountryCode)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    taxDeducted: ").append(toIndentedString(taxDeducted)).append("\n");
    sb.append("    taxEntityName: ").append(toIndentedString(taxEntityName)).append("\n");
    sb.append("    taxNumberService: ").append(toIndentedString(taxNumberService)).append("\n");
    sb.append("    taxSupported: ").append(toIndentedString(taxSupported)).append("\n");
    sb.append("    taxTimezone: ").append(toIndentedString(taxTimezone)).append("\n");
    sb.append("    test: ").append(toIndentedString(test)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    transactionLines: ").append(toIndentedString(transactionLines)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_currencies");
    openapiFields.add("amount");
    openapiFields.add("billing_country_code");
    openapiFields.add("buyer_credit_card_prefix");
    openapiFields.add("buyer_email");
    openapiFields.add("buyer_ip");
    openapiFields.add("buyer_name");
    openapiFields.add("buyer_tax_number");
    openapiFields.add("buyer_tax_number_valid");
    openapiFields.add("comments");
    openapiFields.add("confirm_timestamp");
    openapiFields.add("countries");
    openapiFields.add("create_timestamp");
    openapiFields.add("currency_code");
    openapiFields.add("custom_data");
    openapiFields.add("custom_fields");
    openapiFields.add("custom_id");
    openapiFields.add("customer_id");
    openapiFields.add("deducted_tax_amount");
    openapiFields.add("description");
    openapiFields.add("evidence");
    openapiFields.add("external_key");
    openapiFields.add("force_country_code");
    openapiFields.add("fully_informative");
    openapiFields.add("invoice_address");
    openapiFields.add("invoice_date");
    openapiFields.add("invoice_image_url");
    openapiFields.add("invoice_number");
    openapiFields.add("invoice_place");
    openapiFields.add("key");
    openapiFields.add("kind");
    openapiFields.add("manual");
    openapiFields.add("note");
    openapiFields.add("order_date");
    openapiFields.add("original_transaction_key");
    openapiFields.add("refunded_tax_amount");
    openapiFields.add("refunded_total_amount");
    openapiFields.add("source");
    openapiFields.add("status");
    openapiFields.add("sub_account_id");
    openapiFields.add("supply_date");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_country_code");
    openapiFields.add("tax_data");
    openapiFields.add("tax_deducted");
    openapiFields.add("tax_entity_name");
    openapiFields.add("tax_number_service");
    openapiFields.add("tax_supported");
    openapiFields.add("tax_timezone");
    openapiFields.add("test");
    openapiFields.add("total_amount");
    openapiFields.add("transaction_lines");
    openapiFields.add("verification_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency_code");
    openapiRequiredFields.add("transaction_lines");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Transactions
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Transactions.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Transactions is not found in the empty JSON string", Transactions.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Transactions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Transactions` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Transactions.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additional_currencies`
      if (jsonObj.get("additional_currencies") != null && !jsonObj.get("additional_currencies").isJsonNull()) {
        AdditionalCurrencies.validateJsonElement(jsonObj.get("additional_currencies"));
      }
      if ((jsonObj.get("billing_country_code") != null && !jsonObj.get("billing_country_code").isJsonNull()) && !jsonObj.get("billing_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_country_code").toString()));
      }
      if ((jsonObj.get("buyer_credit_card_prefix") != null && !jsonObj.get("buyer_credit_card_prefix").isJsonNull()) && !jsonObj.get("buyer_credit_card_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_credit_card_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_credit_card_prefix").toString()));
      }
      if ((jsonObj.get("buyer_email") != null && !jsonObj.get("buyer_email").isJsonNull()) && !jsonObj.get("buyer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_email").toString()));
      }
      if ((jsonObj.get("buyer_ip") != null && !jsonObj.get("buyer_ip").isJsonNull()) && !jsonObj.get("buyer_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_ip").toString()));
      }
      if ((jsonObj.get("buyer_name") != null && !jsonObj.get("buyer_name").isJsonNull()) && !jsonObj.get("buyer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_name").toString()));
      }
      if ((jsonObj.get("buyer_tax_number") != null && !jsonObj.get("buyer_tax_number").isJsonNull()) && !jsonObj.get("buyer_tax_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_tax_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_tax_number").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if ((jsonObj.get("confirm_timestamp") != null && !jsonObj.get("confirm_timestamp").isJsonNull()) && !jsonObj.get("confirm_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `confirm_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("confirm_timestamp").toString()));
      }
      // validate the optional field `countries`
      if (jsonObj.get("countries") != null && !jsonObj.get("countries").isJsonNull()) {
        Countries.validateJsonElement(jsonObj.get("countries"));
      }
      if ((jsonObj.get("create_timestamp") != null && !jsonObj.get("create_timestamp").isJsonNull()) && !jsonObj.get("create_timestamp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `create_timestamp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("create_timestamp").toString()));
      }
      if (!jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("custom_data") != null && !jsonObj.get("custom_data").isJsonNull()) && !jsonObj.get("custom_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_data").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomFields.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      if ((jsonObj.get("custom_id") != null && !jsonObj.get("custom_id").isJsonNull()) && !jsonObj.get("custom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_id").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `evidence`
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        Evidence.validateJsonElement(jsonObj.get("evidence"));
      }
      if ((jsonObj.get("external_key") != null && !jsonObj.get("external_key").isJsonNull()) && !jsonObj.get("external_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `external_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("external_key").toString()));
      }
      if ((jsonObj.get("force_country_code") != null && !jsonObj.get("force_country_code").isJsonNull()) && !jsonObj.get("force_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_country_code").toString()));
      }
      // validate the optional field `invoice_address`
      if (jsonObj.get("invoice_address") != null && !jsonObj.get("invoice_address").isJsonNull()) {
        InvoiceAddress.validateJsonElement(jsonObj.get("invoice_address"));
      }
      if ((jsonObj.get("invoice_date") != null && !jsonObj.get("invoice_date").isJsonNull()) && !jsonObj.get("invoice_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_date").toString()));
      }
      if ((jsonObj.get("invoice_image_url") != null && !jsonObj.get("invoice_image_url").isJsonNull()) && !jsonObj.get("invoice_image_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_image_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_image_url").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("invoice_place") != null && !jsonObj.get("invoice_place").isJsonNull()) && !jsonObj.get("invoice_place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_place").toString()));
      }
      if ((jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) && !jsonObj.get("key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key").toString()));
      }
      if ((jsonObj.get("kind") != null && !jsonObj.get("kind").isJsonNull()) && !jsonObj.get("kind").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `kind` to be a primitive type in the JSON string but got `%s`", jsonObj.get("kind").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("order_date") != null && !jsonObj.get("order_date").isJsonNull()) && !jsonObj.get("order_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_date").toString()));
      }
      if ((jsonObj.get("original_transaction_key") != null && !jsonObj.get("original_transaction_key").isJsonNull()) && !jsonObj.get("original_transaction_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_transaction_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_transaction_key").toString()));
      }
      if ((jsonObj.get("source") != null && !jsonObj.get("source").isJsonNull()) && !jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("sub_account_id") != null && !jsonObj.get("sub_account_id").isJsonNull()) && !jsonObj.get("sub_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_account_id").toString()));
      }
      if ((jsonObj.get("supply_date") != null && !jsonObj.get("supply_date").isJsonNull()) && !jsonObj.get("supply_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supply_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supply_date").toString()));
      }
      if ((jsonObj.get("tax_country_code") != null && !jsonObj.get("tax_country_code").isJsonNull()) && !jsonObj.get("tax_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_code").toString()));
      }
      // validate the optional field `tax_data`
      if (jsonObj.get("tax_data") != null && !jsonObj.get("tax_data").isJsonNull()) {
        TaxDataSchema.validateJsonElement(jsonObj.get("tax_data"));
      }
      if ((jsonObj.get("tax_entity_name") != null && !jsonObj.get("tax_entity_name").isJsonNull()) && !jsonObj.get("tax_entity_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_entity_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_entity_name").toString()));
      }
      if ((jsonObj.get("tax_number_service") != null && !jsonObj.get("tax_number_service").isJsonNull()) && !jsonObj.get("tax_number_service").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_number_service` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_number_service").toString()));
      }
      if ((jsonObj.get("tax_timezone") != null && !jsonObj.get("tax_timezone").isJsonNull()) && !jsonObj.get("tax_timezone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_timezone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_timezone").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("transaction_lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_lines` to be an array in the JSON string but got `%s`", jsonObj.get("transaction_lines").toString()));
      }

      JsonArray jsonArraytransactionLines = jsonObj.getAsJsonArray("transaction_lines");
      // validate the required field `transaction_lines` (array)
      for (int i = 0; i < jsonArraytransactionLines.size(); i++) {
        TransactionLines.validateJsonElement(jsonArraytransactionLines.get(i));
      };
      if ((jsonObj.get("verification_token") != null && !jsonObj.get("verification_token").isJsonNull()) && !jsonObj.get("verification_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Transactions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Transactions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Transactions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Transactions.class));

       return (TypeAdapter<T>) new TypeAdapter<Transactions>() {
           @Override
           public void write(JsonWriter out, Transactions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Transactions read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Transactions given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Transactions
   * @throws IOException if the JSON string is invalid with respect to Transactions
   */
  public static Transactions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Transactions.class);
  }

  /**
   * Convert an instance of Transactions to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

