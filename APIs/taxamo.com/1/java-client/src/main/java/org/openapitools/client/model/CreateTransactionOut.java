/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.StorageRequiredFields;
import org.openapitools.client.model.TaxRequiredFields;
import org.openapitools.client.model.Transaction;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CreateTransactionOut
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CreateTransactionOut {
  public static final String SERIALIZED_NAME_STORAGE_REQUIRED_FIELDS = "storage_required_fields";
  @SerializedName(SERIALIZED_NAME_STORAGE_REQUIRED_FIELDS)
  private List<StorageRequiredFields> storageRequiredFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAX_REQUIRED_FIELDS = "tax_required_fields";
  @SerializedName(SERIALIZED_NAME_TAX_REQUIRED_FIELDS)
  private List<TaxRequiredFields> taxRequiredFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_TRANSACTION = "transaction";
  @SerializedName(SERIALIZED_NAME_TRANSACTION)
  private Transaction transaction;

  public CreateTransactionOut() {
  }

  public CreateTransactionOut storageRequiredFields(List<StorageRequiredFields> storageRequiredFields) {
    this.storageRequiredFields = storageRequiredFields;
    return this;
  }

  public CreateTransactionOut addStorageRequiredFieldsItem(StorageRequiredFields storageRequiredFieldsItem) {
    if (this.storageRequiredFields == null) {
      this.storageRequiredFields = new ArrayList<>();
    }
    this.storageRequiredFields.add(storageRequiredFieldsItem);
    return this;
  }

  /**
   * Fields required for transaction storage (can be added later - it&#39;s up to merchant software). Depends on the region/transaction type.
   * @return storageRequiredFields
   */
  @javax.annotation.Nullable
  public List<StorageRequiredFields> getStorageRequiredFields() {
    return storageRequiredFields;
  }

  public void setStorageRequiredFields(List<StorageRequiredFields> storageRequiredFields) {
    this.storageRequiredFields = storageRequiredFields;
  }


  public CreateTransactionOut taxRequiredFields(List<TaxRequiredFields> taxRequiredFields) {
    this.taxRequiredFields = taxRequiredFields;
    return this;
  }

  public CreateTransactionOut addTaxRequiredFieldsItem(TaxRequiredFields taxRequiredFieldsItem) {
    if (this.taxRequiredFields == null) {
      this.taxRequiredFields = new ArrayList<>();
    }
    this.taxRequiredFields.add(taxRequiredFieldsItem);
    return this;
  }

  /**
   * Fields required for tax calculation. Depends on the region/transaction type.
   * @return taxRequiredFields
   */
  @javax.annotation.Nullable
  public List<TaxRequiredFields> getTaxRequiredFields() {
    return taxRequiredFields;
  }

  public void setTaxRequiredFields(List<TaxRequiredFields> taxRequiredFields) {
    this.taxRequiredFields = taxRequiredFields;
  }


  public CreateTransactionOut transaction(Transaction transaction) {
    this.transaction = transaction;
    return this;
  }

  /**
   * Get transaction
   * @return transaction
   */
  @javax.annotation.Nullable
  public Transaction getTransaction() {
    return transaction;
  }

  public void setTransaction(Transaction transaction) {
    this.transaction = transaction;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CreateTransactionOut createTransactionOut = (CreateTransactionOut) o;
    return Objects.equals(this.storageRequiredFields, createTransactionOut.storageRequiredFields) &&
        Objects.equals(this.taxRequiredFields, createTransactionOut.taxRequiredFields) &&
        Objects.equals(this.transaction, createTransactionOut.transaction);
  }

  @Override
  public int hashCode() {
    return Objects.hash(storageRequiredFields, taxRequiredFields, transaction);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CreateTransactionOut {\n");
    sb.append("    storageRequiredFields: ").append(toIndentedString(storageRequiredFields)).append("\n");
    sb.append("    taxRequiredFields: ").append(toIndentedString(taxRequiredFields)).append("\n");
    sb.append("    transaction: ").append(toIndentedString(transaction)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("storage_required_fields");
    openapiFields.add("tax_required_fields");
    openapiFields.add("transaction");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CreateTransactionOut
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CreateTransactionOut.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CreateTransactionOut is not found in the empty JSON string", CreateTransactionOut.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CreateTransactionOut.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CreateTransactionOut` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("storage_required_fields") != null && !jsonObj.get("storage_required_fields").isJsonNull()) {
        JsonArray jsonArraystorageRequiredFields = jsonObj.getAsJsonArray("storage_required_fields");
        if (jsonArraystorageRequiredFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("storage_required_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `storage_required_fields` to be an array in the JSON string but got `%s`", jsonObj.get("storage_required_fields").toString()));
          }

          // validate the optional field `storage_required_fields` (array)
          for (int i = 0; i < jsonArraystorageRequiredFields.size(); i++) {
            StorageRequiredFields.validateJsonElement(jsonArraystorageRequiredFields.get(i));
          };
        }
      }
      if (jsonObj.get("tax_required_fields") != null && !jsonObj.get("tax_required_fields").isJsonNull()) {
        JsonArray jsonArraytaxRequiredFields = jsonObj.getAsJsonArray("tax_required_fields");
        if (jsonArraytaxRequiredFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tax_required_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tax_required_fields` to be an array in the JSON string but got `%s`", jsonObj.get("tax_required_fields").toString()));
          }

          // validate the optional field `tax_required_fields` (array)
          for (int i = 0; i < jsonArraytaxRequiredFields.size(); i++) {
            TaxRequiredFields.validateJsonElement(jsonArraytaxRequiredFields.get(i));
          };
        }
      }
      // validate the optional field `transaction`
      if (jsonObj.get("transaction") != null && !jsonObj.get("transaction").isJsonNull()) {
        Transaction.validateJsonElement(jsonObj.get("transaction"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CreateTransactionOut.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CreateTransactionOut' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CreateTransactionOut> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CreateTransactionOut.class));

       return (TypeAdapter<T>) new TypeAdapter<CreateTransactionOut>() {
           @Override
           public void write(JsonWriter out, CreateTransactionOut value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CreateTransactionOut read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CreateTransactionOut given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CreateTransactionOut
   * @throws IOException if the JSON string is invalid with respect to CreateTransactionOut
   */
  public static CreateTransactionOut fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CreateTransactionOut.class);
  }

  /**
   * Convert an instance of CreateTransactionOut to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

