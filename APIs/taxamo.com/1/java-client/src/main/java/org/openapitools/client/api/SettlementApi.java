/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.GetDetailedRefundsOut;
import org.openapitools.client.model.GetRefundsOut;
import org.openapitools.client.model.GetSettlementOut;
import org.openapitools.client.model.GetSettlementSummaryOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SettlementApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SettlementApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SettlementApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDetailedRefunds
     * @param format Output format. &#39;json&#39; or &#39;csv&#39;. Default value is &#39;json&#39; (optional)
     * @param countryCodes Comma separated list of 2-letter country codes (optional)
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (optional)
     * @param dateTo Take only refunds issued at or before the date. Format: yyyy-MM-dd (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param offset Offset. Defaults to 0 (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedRefundsCall(String format, String countryCodes, String dateFrom, String dateTo, BigDecimal limit, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/settlement/detailed_refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (countryCodes != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_codes", countryCodes));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        if (dateTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_to", dateTo));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailedRefundsValidateBeforeCall(String format, String countryCodes, String dateFrom, String dateTo, BigDecimal limit, BigDecimal offset, final ApiCallback _callback) throws ApiException {
        return getDetailedRefundsCall(format, countryCodes, dateFrom, dateTo, limit, offset, _callback);

    }

    /**
     * Detailed refunds
     * 
     * @param format Output format. &#39;json&#39; or &#39;csv&#39;. Default value is &#39;json&#39; (optional)
     * @param countryCodes Comma separated list of 2-letter country codes (optional)
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (optional)
     * @param dateTo Take only refunds issued at or before the date. Format: yyyy-MM-dd (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param offset Offset. Defaults to 0 (optional)
     * @return GetDetailedRefundsOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailedRefundsOut getDetailedRefunds(String format, String countryCodes, String dateFrom, String dateTo, BigDecimal limit, BigDecimal offset) throws ApiException {
        ApiResponse<GetDetailedRefundsOut> localVarResp = getDetailedRefundsWithHttpInfo(format, countryCodes, dateFrom, dateTo, limit, offset);
        return localVarResp.getData();
    }

    /**
     * Detailed refunds
     * 
     * @param format Output format. &#39;json&#39; or &#39;csv&#39;. Default value is &#39;json&#39; (optional)
     * @param countryCodes Comma separated list of 2-letter country codes (optional)
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (optional)
     * @param dateTo Take only refunds issued at or before the date. Format: yyyy-MM-dd (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param offset Offset. Defaults to 0 (optional)
     * @return ApiResponse&lt;GetDetailedRefundsOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetDetailedRefundsOut> getDetailedRefundsWithHttpInfo(String format, String countryCodes, String dateFrom, String dateTo, BigDecimal limit, BigDecimal offset) throws ApiException {
        okhttp3.Call localVarCall = getDetailedRefundsValidateBeforeCall(format, countryCodes, dateFrom, dateTo, limit, offset, null);
        Type localVarReturnType = new TypeToken<GetDetailedRefundsOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Detailed refunds (asynchronously)
     * 
     * @param format Output format. &#39;json&#39; or &#39;csv&#39;. Default value is &#39;json&#39; (optional)
     * @param countryCodes Comma separated list of 2-letter country codes (optional)
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (optional)
     * @param dateTo Take only refunds issued at or before the date. Format: yyyy-MM-dd (optional)
     * @param limit Limit (no more than 1000, defaults to 100). (optional)
     * @param offset Offset. Defaults to 0 (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getDetailedRefundsAsync(String format, String countryCodes, String dateFrom, String dateTo, BigDecimal limit, BigDecimal offset, final ApiCallback<GetDetailedRefundsOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailedRefundsValidateBeforeCall(format, countryCodes, dateFrom, dateTo, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<GetDetailedRefundsOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getRefunds
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (required)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key, defaults to EU for backwards compatibility. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundsCall(String dateFrom, String format, String mossCountryCode, String taxRegion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/settlement/refunds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (mossCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moss_country_code", mossCountryCode));
        }

        if (taxRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_region", taxRegion));
        }

        if (dateFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_from", dateFrom));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getRefundsValidateBeforeCall(String dateFrom, String format, String mossCountryCode, String taxRegion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'dateFrom' is set
        if (dateFrom == null) {
            throw new ApiException("Missing the required parameter 'dateFrom' when calling getRefunds(Async)");
        }

        return getRefundsCall(dateFrom, format, mossCountryCode, taxRegion, _callback);

    }

    /**
     * Fetch refunds
     * 
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (required)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key, defaults to EU for backwards compatibility. (optional)
     * @return GetRefundsOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetRefundsOut getRefunds(String dateFrom, String format, String mossCountryCode, String taxRegion) throws ApiException {
        ApiResponse<GetRefundsOut> localVarResp = getRefundsWithHttpInfo(dateFrom, format, mossCountryCode, taxRegion);
        return localVarResp.getData();
    }

    /**
     * Fetch refunds
     * 
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (required)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key, defaults to EU for backwards compatibility. (optional)
     * @return ApiResponse&lt;GetRefundsOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetRefundsOut> getRefundsWithHttpInfo(String dateFrom, String format, String mossCountryCode, String taxRegion) throws ApiException {
        okhttp3.Call localVarCall = getRefundsValidateBeforeCall(dateFrom, format, mossCountryCode, taxRegion, null);
        Type localVarReturnType = new TypeToken<GetRefundsOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch refunds (asynchronously)
     * 
     * @param dateFrom Take only refunds issued at or after the date. Format: yyyy-MM-dd (required)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key, defaults to EU for backwards compatibility. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getRefundsAsync(String dateFrom, String format, String mossCountryCode, String taxRegion, final ApiCallback<GetRefundsOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getRefundsValidateBeforeCall(dateFrom, format, mossCountryCode, taxRegion, _callback);
        Type localVarReturnType = new TypeToken<GetRefundsOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettlement
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossTaxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region&#39;s currency code. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param refundDateKindOverride Set to &#39;order_date&#39; to show only refunds for the transactions in the selected reporting period. Set to &#39;refund_timestamp&#39; to show refunds that were created in the selected reporting period. Do not set to use the default region&#39;s setting. (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param mossCountryCode MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code. (optional)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param taxCountryCode Tax entity country code, used to determine currency/region.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementCall(String quarter, String mossTaxId, String currencyCode, String endMonth, String taxId, String refundDateKindOverride, String startMonth, String mossCountryCode, String format, String taxCountryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/settlement/{quarter}"
            .replace("{" + "quarter" + "}", localVarApiClient.escapeString(quarter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mossTaxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moss_tax_id", mossTaxId));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_code", currencyCode));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        if (taxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_id", taxId));
        }

        if (refundDateKindOverride != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("refund_date_kind_override", refundDateKindOverride));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (mossCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moss_country_code", mossCountryCode));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (taxCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_country_code", taxCountryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettlementValidateBeforeCall(String quarter, String mossTaxId, String currencyCode, String endMonth, String taxId, String refundDateKindOverride, String startMonth, String mossCountryCode, String format, String taxCountryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quarter' is set
        if (quarter == null) {
            throw new ApiException("Missing the required parameter 'quarter' when calling getSettlement(Async)");
        }

        return getSettlementCall(quarter, mossTaxId, currencyCode, endMonth, taxId, refundDateKindOverride, startMonth, mossCountryCode, format, taxCountryCode, _callback);

    }

    /**
     * Fetch settlement
     * 
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossTaxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region&#39;s currency code. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param refundDateKindOverride Set to &#39;order_date&#39; to show only refunds for the transactions in the selected reporting period. Set to &#39;refund_timestamp&#39; to show refunds that were created in the selected reporting period. Do not set to use the default region&#39;s setting. (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param mossCountryCode MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code. (optional)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param taxCountryCode Tax entity country code, used to determine currency/region.  (optional)
     * @return GetSettlementOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetSettlementOut getSettlement(String quarter, String mossTaxId, String currencyCode, String endMonth, String taxId, String refundDateKindOverride, String startMonth, String mossCountryCode, String format, String taxCountryCode) throws ApiException {
        ApiResponse<GetSettlementOut> localVarResp = getSettlementWithHttpInfo(quarter, mossTaxId, currencyCode, endMonth, taxId, refundDateKindOverride, startMonth, mossCountryCode, format, taxCountryCode);
        return localVarResp.getData();
    }

    /**
     * Fetch settlement
     * 
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossTaxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region&#39;s currency code. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param refundDateKindOverride Set to &#39;order_date&#39; to show only refunds for the transactions in the selected reporting period. Set to &#39;refund_timestamp&#39; to show refunds that were created in the selected reporting period. Do not set to use the default region&#39;s setting. (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param mossCountryCode MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code. (optional)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param taxCountryCode Tax entity country code, used to determine currency/region.  (optional)
     * @return ApiResponse&lt;GetSettlementOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettlementOut> getSettlementWithHttpInfo(String quarter, String mossTaxId, String currencyCode, String endMonth, String taxId, String refundDateKindOverride, String startMonth, String mossCountryCode, String format, String taxCountryCode) throws ApiException {
        okhttp3.Call localVarCall = getSettlementValidateBeforeCall(quarter, mossTaxId, currencyCode, endMonth, taxId, refundDateKindOverride, startMonth, mossCountryCode, format, taxCountryCode, null);
        Type localVarReturnType = new TypeToken<GetSettlementOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch settlement (asynchronously)
     * 
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossTaxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param currencyCode ISO 3-letter currency code, e.g. EUR or USD. If provided, all amounts will be coerced for this currency. Defaults to region&#39;s currency code. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param taxId MOSS-assigned tax ID - if not provided, merchant&#39;s national tax number will be used. Deprecated, please use tax-id. (optional)
     * @param refundDateKindOverride Set to &#39;order_date&#39; to show only refunds for the transactions in the selected reporting period. Set to &#39;refund_timestamp&#39; to show refunds that were created in the selected reporting period. Do not set to use the default region&#39;s setting. (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param mossCountryCode MOSS country code, used to determine currency/region. If ommited, merchant default setting is used. Deprecated: please use tax-country-code. (optional)
     * @param format Output format. &#39;csv&#39; value is accepted as well (optional)
     * @param taxCountryCode Tax entity country code, used to determine currency/region.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementAsync(String quarter, String mossTaxId, String currencyCode, String endMonth, String taxId, String refundDateKindOverride, String startMonth, String mossCountryCode, String format, String taxCountryCode, final ApiCallback<GetSettlementOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettlementValidateBeforeCall(quarter, mossTaxId, currencyCode, endMonth, taxId, refundDateKindOverride, startMonth, mossCountryCode, format, taxCountryCode, _callback);
        Type localVarReturnType = new TypeToken<GetSettlementOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSettlementSummary
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementSummaryCall(String quarter, String mossCountryCode, String taxRegion, String startMonth, String endMonth, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/settlement/summary/{quarter}"
            .replace("{" + "quarter" + "}", localVarApiClient.escapeString(quarter.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (mossCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("moss_country_code", mossCountryCode));
        }

        if (taxRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_region", taxRegion));
        }

        if (startMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_month", startMonth));
        }

        if (endMonth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_month", endMonth));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSettlementSummaryValidateBeforeCall(String quarter, String mossCountryCode, String taxRegion, String startMonth, String endMonth, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'quarter' is set
        if (quarter == null) {
            throw new ApiException("Missing the required parameter 'quarter' when calling getSettlementSummary(Async)");
        }

        return getSettlementSummaryCall(quarter, mossCountryCode, taxRegion, startMonth, endMonth, _callback);

    }

    /**
     * Fetch summary
     * 
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @return GetSettlementSummaryOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public GetSettlementSummaryOut getSettlementSummary(String quarter, String mossCountryCode, String taxRegion, String startMonth, String endMonth) throws ApiException {
        ApiResponse<GetSettlementSummaryOut> localVarResp = getSettlementSummaryWithHttpInfo(quarter, mossCountryCode, taxRegion, startMonth, endMonth);
        return localVarResp.getData();
    }

    /**
     * Fetch summary
     * 
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @return ApiResponse&lt;GetSettlementSummaryOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<GetSettlementSummaryOut> getSettlementSummaryWithHttpInfo(String quarter, String mossCountryCode, String taxRegion, String startMonth, String endMonth) throws ApiException {
        okhttp3.Call localVarCall = getSettlementSummaryValidateBeforeCall(quarter, mossCountryCode, taxRegion, startMonth, endMonth, null);
        Type localVarReturnType = new TypeToken<GetSettlementSummaryOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Fetch summary (asynchronously)
     * 
     * @param quarter Quarter in yyyy-MM format. If start-date and end-date are provided, quarter is ignored and should be set to &#39;range&#39;. (required)
     * @param mossCountryCode MOSS country code, used to determine currency. If ommited, merchant default setting is used. (optional)
     * @param taxRegion Tax region key (optional)
     * @param startMonth Period start month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param endMonth Period end month in yyyy-MM format. Either quarter or start-month and end-month have to be provided. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSettlementSummaryAsync(String quarter, String mossCountryCode, String taxRegion, String startMonth, String endMonth, final ApiCallback<GetSettlementSummaryOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSettlementSummaryValidateBeforeCall(quarter, mossCountryCode, taxRegion, startMonth, endMonth, _callback);
        Type localVarReturnType = new TypeToken<GetSettlementSummaryOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
