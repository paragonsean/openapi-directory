/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetDomesticSummaryReportIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetDomesticSummaryReportIn {
  public static final String SERIALIZED_NAME_COUNTRY_CODE = "country_code";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_END_MONTH = "end_month";
  @SerializedName(SERIALIZED_NAME_END_MONTH)
  private String endMonth;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_FX_DATE_TYPE = "fx_date_type";
  @SerializedName(SERIALIZED_NAME_FX_DATE_TYPE)
  private String fxDateType;

  public static final String SERIALIZED_NAME_START_MONTH = "start_month";
  @SerializedName(SERIALIZED_NAME_START_MONTH)
  private String startMonth;

  public GetDomesticSummaryReportIn() {
  }

  public GetDomesticSummaryReportIn countryCode(String countryCode) {
    this.countryCode = countryCode;
    return this;
  }

  /**
   * ISO 2-letter country code which will be used for determining which country is domestic.
   * @return countryCode
   */
  @javax.annotation.Nonnull
  public String getCountryCode() {
    return countryCode;
  }

  public void setCountryCode(String countryCode) {
    this.countryCode = countryCode;
  }


  public GetDomesticSummaryReportIn currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * ISO 3-letter currency code, e.g. EUR or USD. Defaults to the one assigned to MOSS calculations for a given country code.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public GetDomesticSummaryReportIn endMonth(String endMonth) {
    this.endMonth = endMonth;
    return this;
  }

  /**
   * Period end month in yyyy-MM format.
   * @return endMonth
   */
  @javax.annotation.Nonnull
  public String getEndMonth() {
    return endMonth;
  }

  public void setEndMonth(String endMonth) {
    this.endMonth = endMonth;
  }


  public GetDomesticSummaryReportIn format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Output format. &#39;xml&#39; and &#39;csv&#39; values are accepted. Default format - json
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public GetDomesticSummaryReportIn fxDateType(String fxDateType) {
    this.fxDateType = fxDateType;
    return this;
  }

  /**
   * Which date should be used for FX.
   * @return fxDateType
   */
  @javax.annotation.Nullable
  public String getFxDateType() {
    return fxDateType;
  }

  public void setFxDateType(String fxDateType) {
    this.fxDateType = fxDateType;
  }


  public GetDomesticSummaryReportIn startMonth(String startMonth) {
    this.startMonth = startMonth;
    return this;
  }

  /**
   * Period start month in yyyy-MM format.
   * @return startMonth
   */
  @javax.annotation.Nonnull
  public String getStartMonth() {
    return startMonth;
  }

  public void setStartMonth(String startMonth) {
    this.startMonth = startMonth;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetDomesticSummaryReportIn getDomesticSummaryReportIn = (GetDomesticSummaryReportIn) o;
    return Objects.equals(this.countryCode, getDomesticSummaryReportIn.countryCode) &&
        Objects.equals(this.currencyCode, getDomesticSummaryReportIn.currencyCode) &&
        Objects.equals(this.endMonth, getDomesticSummaryReportIn.endMonth) &&
        Objects.equals(this.format, getDomesticSummaryReportIn.format) &&
        Objects.equals(this.fxDateType, getDomesticSummaryReportIn.fxDateType) &&
        Objects.equals(this.startMonth, getDomesticSummaryReportIn.startMonth);
  }

  @Override
  public int hashCode() {
    return Objects.hash(countryCode, currencyCode, endMonth, format, fxDateType, startMonth);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetDomesticSummaryReportIn {\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    endMonth: ").append(toIndentedString(endMonth)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    fxDateType: ").append(toIndentedString(fxDateType)).append("\n");
    sb.append("    startMonth: ").append(toIndentedString(startMonth)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("country_code");
    openapiFields.add("currency_code");
    openapiFields.add("end_month");
    openapiFields.add("format");
    openapiFields.add("fx_date_type");
    openapiFields.add("start_month");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("country_code");
    openapiRequiredFields.add("end_month");
    openapiRequiredFields.add("start_month");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetDomesticSummaryReportIn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetDomesticSummaryReportIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetDomesticSummaryReportIn is not found in the empty JSON string", GetDomesticSummaryReportIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetDomesticSummaryReportIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetDomesticSummaryReportIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetDomesticSummaryReportIn.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country_code").toString()));
      }
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if (!jsonObj.get("end_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `end_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("end_month").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("fx_date_type") != null && !jsonObj.get("fx_date_type").isJsonNull()) && !jsonObj.get("fx_date_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fx_date_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fx_date_type").toString()));
      }
      if (!jsonObj.get("start_month").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_month` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_month").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetDomesticSummaryReportIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetDomesticSummaryReportIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetDomesticSummaryReportIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetDomesticSummaryReportIn.class));

       return (TypeAdapter<T>) new TypeAdapter<GetDomesticSummaryReportIn>() {
           @Override
           public void write(JsonWriter out, GetDomesticSummaryReportIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetDomesticSummaryReportIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetDomesticSummaryReportIn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetDomesticSummaryReportIn
   * @throws IOException if the JSON string is invalid with respect to GetDomesticSummaryReportIn
   */
  public static GetDomesticSummaryReportIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetDomesticSummaryReportIn.class);
  }

  /**
   * Convert an instance of GetDomesticSummaryReportIn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

