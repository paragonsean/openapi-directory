/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalCurrencies;
import org.openapitools.client.model.CustomFields;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * TransactionLines
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class TransactionLines {
  public static final String SERIALIZED_NAME_ADDITIONAL_CURRENCIES = "additional_currencies";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CURRENCIES)
  private AdditionalCurrencies additionalCurrencies;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFields> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ID = "custom_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_DEDUCTED_TAX_AMOUNT = "deducted_tax_amount";
  @SerializedName(SERIALIZED_NAME_DEDUCTED_TAX_AMOUNT)
  private BigDecimal deductedTaxAmount;

  public static final String SERIALIZED_NAME_DEDUCTED_TAX_RATE = "deducted_tax_rate";
  @SerializedName(SERIALIZED_NAME_DEDUCTED_TAX_RATE)
  private BigDecimal deductedTaxRate;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_INFORMATIVE = "informative";
  @SerializedName(SERIALIZED_NAME_INFORMATIVE)
  private Boolean informative;

  public static final String SERIALIZED_NAME_LINE_KEY = "line_key";
  @SerializedName(SERIALIZED_NAME_LINE_KEY)
  private String lineKey;

  public static final String SERIALIZED_NAME_PRODUCT_CODE = "product_code";
  @SerializedName(SERIALIZED_NAME_PRODUCT_CODE)
  private String productCode;

  public static final String SERIALIZED_NAME_PRODUCT_TAX_CODE = "product_tax_code";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TAX_CODE)
  private String productTaxCode;

  public static final String SERIALIZED_NAME_PRODUCT_TYPE = "product_type";
  @SerializedName(SERIALIZED_NAME_PRODUCT_TYPE)
  private String productType;

  public static final String SERIALIZED_NAME_QUANTITY = "quantity";
  @SerializedName(SERIALIZED_NAME_QUANTITY)
  private BigDecimal quantity;

  public static final String SERIALIZED_NAME_REFUNDED_TAX_AMOUNT = "refunded_tax_amount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_TAX_AMOUNT)
  private BigDecimal refundedTaxAmount;

  public static final String SERIALIZED_NAME_REFUNDED_TOTAL_AMOUNT = "refunded_total_amount";
  @SerializedName(SERIALIZED_NAME_REFUNDED_TOTAL_AMOUNT)
  private BigDecimal refundedTotalAmount;

  public static final String SERIALIZED_NAME_SUPPLY_DATE = "supply_date";
  @SerializedName(SERIALIZED_NAME_SUPPLY_DATE)
  private String supplyDate;

  public static final String SERIALIZED_NAME_TAX_AMOUNT = "tax_amount";
  @SerializedName(SERIALIZED_NAME_TAX_AMOUNT)
  private BigDecimal taxAmount;

  public static final String SERIALIZED_NAME_TAX_NAME = "tax_name";
  @SerializedName(SERIALIZED_NAME_TAX_NAME)
  private String taxName;

  public static final String SERIALIZED_NAME_TAX_RATE = "tax_rate";
  @SerializedName(SERIALIZED_NAME_TAX_RATE)
  private BigDecimal taxRate;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT = "total_amount";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT)
  private BigDecimal totalAmount;

  public static final String SERIALIZED_NAME_UNIT_OF_MEASURE = "unit_of_measure";
  @SerializedName(SERIALIZED_NAME_UNIT_OF_MEASURE)
  private String unitOfMeasure;

  public static final String SERIALIZED_NAME_UNIT_PRICE = "unit_price";
  @SerializedName(SERIALIZED_NAME_UNIT_PRICE)
  private BigDecimal unitPrice;

  public TransactionLines() {
  }

  public TransactionLines additionalCurrencies(AdditionalCurrencies additionalCurrencies) {
    this.additionalCurrencies = additionalCurrencies;
    return this;
  }

  /**
   * Get additionalCurrencies
   * @return additionalCurrencies
   */
  @javax.annotation.Nullable
  public AdditionalCurrencies getAdditionalCurrencies() {
    return additionalCurrencies;
  }

  public void setAdditionalCurrencies(AdditionalCurrencies additionalCurrencies) {
    this.additionalCurrencies = additionalCurrencies;
  }


  public TransactionLines amount(BigDecimal amount) {
    this.amount = amount;
    return this;
  }

  /**
   * Amount. Required if total amount or both unit price and quantity are not provided.
   * @return amount
   */
  @javax.annotation.Nullable
  public BigDecimal getAmount() {
    return amount;
  }

  public void setAmount(BigDecimal amount) {
    this.amount = amount;
  }


  public TransactionLines customFields(List<CustomFields> customFields) {
    this.customFields = customFields;
    return this;
  }

  public TransactionLines addCustomFieldsItem(CustomFields customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFields> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomFields> customFields) {
    this.customFields = customFields;
  }


  public TransactionLines customId(String customId) {
    this.customId = customId;
    return this;
  }

  /**
   * Custom id, provided by ecommerce software.
   * @return customId
   */
  @javax.annotation.Nonnull
  public String getCustomId() {
    return customId;
  }

  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public TransactionLines deductedTaxAmount(BigDecimal deductedTaxAmount) {
    this.deductedTaxAmount = deductedTaxAmount;
    return this;
  }

  /**
   * Deducted tax amount, calculated by taxmo.
   * @return deductedTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getDeductedTaxAmount() {
    return deductedTaxAmount;
  }

  public void setDeductedTaxAmount(BigDecimal deductedTaxAmount) {
    this.deductedTaxAmount = deductedTaxAmount;
  }


  public TransactionLines deductedTaxRate(BigDecimal deductedTaxRate) {
    this.deductedTaxRate = deductedTaxRate;
    return this;
  }

  /**
   * Deducted tax rate, calculated by taxamo.
   * @return deductedTaxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getDeductedTaxRate() {
    return deductedTaxRate;
  }

  public void setDeductedTaxRate(BigDecimal deductedTaxRate) {
    this.deductedTaxRate = deductedTaxRate;
  }


  public TransactionLines description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Line contents description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public TransactionLines id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * Generated id.
   * @return id
   */
  @javax.annotation.Nullable
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public TransactionLines informative(Boolean informative) {
    this.informative = informative;
    return this;
  }

  /**
   * If the line is provided for informative purposes. Such line must have :tax-rate and optionally :tax-name - if not, API validation will fail for this line.
   * @return informative
   */
  @javax.annotation.Nullable
  public Boolean getInformative() {
    return informative;
  }

  public void setInformative(Boolean informative) {
    this.informative = informative;
  }


  public TransactionLines lineKey(String lineKey) {
    this.lineKey = lineKey;
    return this;
  }

  /**
   * Generated line key.
   * @return lineKey
   */
  @javax.annotation.Nullable
  public String getLineKey() {
    return lineKey;
  }

  public void setLineKey(String lineKey) {
    this.lineKey = lineKey;
  }


  public TransactionLines productCode(String productCode) {
    this.productCode = productCode;
    return this;
  }

  /**
   * Internal product code, used for invoicing for example.
   * @return productCode
   */
  @javax.annotation.Nullable
  public String getProductCode() {
    return productCode;
  }

  public void setProductCode(String productCode) {
    this.productCode = productCode;
  }


  public TransactionLines productTaxCode(String productTaxCode) {
    this.productTaxCode = productTaxCode;
    return this;
  }

  /**
   * External product tax code for a line, for example TIC in US Sales tax.
   * @return productTaxCode
   */
  @javax.annotation.Nullable
  public String getProductTaxCode() {
    return productTaxCode;
  }

  public void setProductTaxCode(String productTaxCode) {
    this.productTaxCode = productTaxCode;
  }


  public TransactionLines productType(String productType) {
    this.productType = productType;
    return this;
  }

  /**
   * Product type, according to dictionary /dictionaries/product_types. 
   * @return productType
   */
  @javax.annotation.Nullable
  public String getProductType() {
    return productType;
  }

  public void setProductType(String productType) {
    this.productType = productType;
  }


  public TransactionLines quantity(BigDecimal quantity) {
    this.quantity = quantity;
    return this;
  }

  /**
   * Quantity Defaults to 1.
   * @return quantity
   */
  @javax.annotation.Nullable
  public BigDecimal getQuantity() {
    return quantity;
  }

  public void setQuantity(BigDecimal quantity) {
    this.quantity = quantity;
  }


  public TransactionLines refundedTaxAmount(BigDecimal refundedTaxAmount) {
    this.refundedTaxAmount = refundedTaxAmount;
    return this;
  }

  /**
   * Refunded tax amount, calculated by taxmo.
   * @return refundedTaxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedTaxAmount() {
    return refundedTaxAmount;
  }

  public void setRefundedTaxAmount(BigDecimal refundedTaxAmount) {
    this.refundedTaxAmount = refundedTaxAmount;
  }


  public TransactionLines refundedTotalAmount(BigDecimal refundedTotalAmount) {
    this.refundedTotalAmount = refundedTotalAmount;
    return this;
  }

  /**
   * Refunded total amount, calculated by taxmo.
   * @return refundedTotalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getRefundedTotalAmount() {
    return refundedTotalAmount;
  }

  public void setRefundedTotalAmount(BigDecimal refundedTotalAmount) {
    this.refundedTotalAmount = refundedTotalAmount;
  }


  public TransactionLines supplyDate(String supplyDate) {
    this.supplyDate = supplyDate;
    return this;
  }

  /**
   * Date of supply in yyyy-MM-dd format.
   * @return supplyDate
   */
  @javax.annotation.Nullable
  public String getSupplyDate() {
    return supplyDate;
  }

  public void setSupplyDate(String supplyDate) {
    this.supplyDate = supplyDate;
  }


  public TransactionLines taxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
    return this;
  }

  /**
   * Tax amount, calculated by taxamo.
   * @return taxAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxAmount() {
    return taxAmount;
  }

  public void setTaxAmount(BigDecimal taxAmount) {
    this.taxAmount = taxAmount;
  }


  public TransactionLines taxName(String taxName) {
    this.taxName = taxName;
    return this;
  }

  /**
   * Tax name, calculated by taxamo.  Can be overwritten when informative field is true.
   * @return taxName
   */
  @javax.annotation.Nullable
  public String getTaxName() {
    return taxName;
  }

  public void setTaxName(String taxName) {
    this.taxName = taxName;
  }


  public TransactionLines taxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
    return this;
  }

  /**
   * Tax rate, calculated by taxamo. Must be provided when informative field is true.
   * @return taxRate
   */
  @javax.annotation.Nullable
  public BigDecimal getTaxRate() {
    return taxRate;
  }

  public void setTaxRate(BigDecimal taxRate) {
    this.taxRate = taxRate;
  }


  public TransactionLines totalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
    return this;
  }

  /**
   * Total amount. Required if amount or both unit price and quantity are not provided.
   * @return totalAmount
   */
  @javax.annotation.Nullable
  public BigDecimal getTotalAmount() {
    return totalAmount;
  }

  public void setTotalAmount(BigDecimal totalAmount) {
    this.totalAmount = totalAmount;
  }


  public TransactionLines unitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
    return this;
  }

  /**
   * Unit of measure.
   * @return unitOfMeasure
   */
  @javax.annotation.Nullable
  public String getUnitOfMeasure() {
    return unitOfMeasure;
  }

  public void setUnitOfMeasure(String unitOfMeasure) {
    this.unitOfMeasure = unitOfMeasure;
  }


  public TransactionLines unitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
    return this;
  }

  /**
   * Unit price.
   * @return unitPrice
   */
  @javax.annotation.Nullable
  public BigDecimal getUnitPrice() {
    return unitPrice;
  }

  public void setUnitPrice(BigDecimal unitPrice) {
    this.unitPrice = unitPrice;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TransactionLines transactionLines = (TransactionLines) o;
    return Objects.equals(this.additionalCurrencies, transactionLines.additionalCurrencies) &&
        Objects.equals(this.amount, transactionLines.amount) &&
        Objects.equals(this.customFields, transactionLines.customFields) &&
        Objects.equals(this.customId, transactionLines.customId) &&
        Objects.equals(this.deductedTaxAmount, transactionLines.deductedTaxAmount) &&
        Objects.equals(this.deductedTaxRate, transactionLines.deductedTaxRate) &&
        Objects.equals(this.description, transactionLines.description) &&
        Objects.equals(this.id, transactionLines.id) &&
        Objects.equals(this.informative, transactionLines.informative) &&
        Objects.equals(this.lineKey, transactionLines.lineKey) &&
        Objects.equals(this.productCode, transactionLines.productCode) &&
        Objects.equals(this.productTaxCode, transactionLines.productTaxCode) &&
        Objects.equals(this.productType, transactionLines.productType) &&
        Objects.equals(this.quantity, transactionLines.quantity) &&
        Objects.equals(this.refundedTaxAmount, transactionLines.refundedTaxAmount) &&
        Objects.equals(this.refundedTotalAmount, transactionLines.refundedTotalAmount) &&
        Objects.equals(this.supplyDate, transactionLines.supplyDate) &&
        Objects.equals(this.taxAmount, transactionLines.taxAmount) &&
        Objects.equals(this.taxName, transactionLines.taxName) &&
        Objects.equals(this.taxRate, transactionLines.taxRate) &&
        Objects.equals(this.totalAmount, transactionLines.totalAmount) &&
        Objects.equals(this.unitOfMeasure, transactionLines.unitOfMeasure) &&
        Objects.equals(this.unitPrice, transactionLines.unitPrice);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCurrencies, amount, customFields, customId, deductedTaxAmount, deductedTaxRate, description, id, informative, lineKey, productCode, productTaxCode, productType, quantity, refundedTaxAmount, refundedTotalAmount, supplyDate, taxAmount, taxName, taxRate, totalAmount, unitOfMeasure, unitPrice);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TransactionLines {\n");
    sb.append("    additionalCurrencies: ").append(toIndentedString(additionalCurrencies)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    deductedTaxAmount: ").append(toIndentedString(deductedTaxAmount)).append("\n");
    sb.append("    deductedTaxRate: ").append(toIndentedString(deductedTaxRate)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    informative: ").append(toIndentedString(informative)).append("\n");
    sb.append("    lineKey: ").append(toIndentedString(lineKey)).append("\n");
    sb.append("    productCode: ").append(toIndentedString(productCode)).append("\n");
    sb.append("    productTaxCode: ").append(toIndentedString(productTaxCode)).append("\n");
    sb.append("    productType: ").append(toIndentedString(productType)).append("\n");
    sb.append("    quantity: ").append(toIndentedString(quantity)).append("\n");
    sb.append("    refundedTaxAmount: ").append(toIndentedString(refundedTaxAmount)).append("\n");
    sb.append("    refundedTotalAmount: ").append(toIndentedString(refundedTotalAmount)).append("\n");
    sb.append("    supplyDate: ").append(toIndentedString(supplyDate)).append("\n");
    sb.append("    taxAmount: ").append(toIndentedString(taxAmount)).append("\n");
    sb.append("    taxName: ").append(toIndentedString(taxName)).append("\n");
    sb.append("    taxRate: ").append(toIndentedString(taxRate)).append("\n");
    sb.append("    totalAmount: ").append(toIndentedString(totalAmount)).append("\n");
    sb.append("    unitOfMeasure: ").append(toIndentedString(unitOfMeasure)).append("\n");
    sb.append("    unitPrice: ").append(toIndentedString(unitPrice)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_currencies");
    openapiFields.add("amount");
    openapiFields.add("custom_fields");
    openapiFields.add("custom_id");
    openapiFields.add("deducted_tax_amount");
    openapiFields.add("deducted_tax_rate");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("informative");
    openapiFields.add("line_key");
    openapiFields.add("product_code");
    openapiFields.add("product_tax_code");
    openapiFields.add("product_type");
    openapiFields.add("quantity");
    openapiFields.add("refunded_tax_amount");
    openapiFields.add("refunded_total_amount");
    openapiFields.add("supply_date");
    openapiFields.add("tax_amount");
    openapiFields.add("tax_name");
    openapiFields.add("tax_rate");
    openapiFields.add("total_amount");
    openapiFields.add("unit_of_measure");
    openapiFields.add("unit_price");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("custom_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to TransactionLines
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!TransactionLines.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TransactionLines is not found in the empty JSON string", TransactionLines.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!TransactionLines.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `TransactionLines` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : TransactionLines.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additional_currencies`
      if (jsonObj.get("additional_currencies") != null && !jsonObj.get("additional_currencies").isJsonNull()) {
        AdditionalCurrencies.validateJsonElement(jsonObj.get("additional_currencies"));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomFields.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      if (!jsonObj.get("custom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("line_key") != null && !jsonObj.get("line_key").isJsonNull()) && !jsonObj.get("line_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line_key").toString()));
      }
      if ((jsonObj.get("product_code") != null && !jsonObj.get("product_code").isJsonNull()) && !jsonObj.get("product_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_code").toString()));
      }
      if ((jsonObj.get("product_tax_code") != null && !jsonObj.get("product_tax_code").isJsonNull()) && !jsonObj.get("product_tax_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_tax_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_tax_code").toString()));
      }
      if ((jsonObj.get("product_type") != null && !jsonObj.get("product_type").isJsonNull()) && !jsonObj.get("product_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `product_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("product_type").toString()));
      }
      if ((jsonObj.get("supply_date") != null && !jsonObj.get("supply_date").isJsonNull()) && !jsonObj.get("supply_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supply_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supply_date").toString()));
      }
      if ((jsonObj.get("tax_name") != null && !jsonObj.get("tax_name").isJsonNull()) && !jsonObj.get("tax_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_name").toString()));
      }
      if ((jsonObj.get("unit_of_measure") != null && !jsonObj.get("unit_of_measure").isJsonNull()) && !jsonObj.get("unit_of_measure").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `unit_of_measure` to be a primitive type in the JSON string but got `%s`", jsonObj.get("unit_of_measure").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TransactionLines.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TransactionLines' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TransactionLines> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TransactionLines.class));

       return (TypeAdapter<T>) new TypeAdapter<TransactionLines>() {
           @Override
           public void write(JsonWriter out, TransactionLines value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public TransactionLines read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of TransactionLines given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of TransactionLines
   * @throws IOException if the JSON string is invalid with respect to TransactionLines
   */
  public static TransactionLines fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TransactionLines.class);
  }

  /**
   * Convert an instance of TransactionLines to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

