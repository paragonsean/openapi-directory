/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.UsTaxExemptState;
import org.openapitools.client.model.UsTaxId;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * UsTaxExemptionCertificateDetailsSchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UsTaxExemptionCertificateDetailsSchema {
  public static final String SERIALIZED_NAME_EXEMPT_STATES = "exempt_states";
  @SerializedName(SERIALIZED_NAME_EXEMPT_STATES)
  private List<UsTaxExemptState> exemptStates = new ArrayList<>();

  public static final String SERIALIZED_NAME_PURCHASER_ADDRESS1 = "purchaser_address1";
  @SerializedName(SERIALIZED_NAME_PURCHASER_ADDRESS1)
  private String purchaserAddress1;

  public static final String SERIALIZED_NAME_PURCHASER_ADDRESS2 = "purchaser_address2";
  @SerializedName(SERIALIZED_NAME_PURCHASER_ADDRESS2)
  private String purchaserAddress2;

  public static final String SERIALIZED_NAME_PURCHASER_BUSINESS_TYPE = "purchaser_business_type";
  @SerializedName(SERIALIZED_NAME_PURCHASER_BUSINESS_TYPE)
  private String purchaserBusinessType;

  public static final String SERIALIZED_NAME_PURCHASER_BUSINESS_TYPE_OTHER_VALUE = "purchaser_business_type_other_value";
  @SerializedName(SERIALIZED_NAME_PURCHASER_BUSINESS_TYPE_OTHER_VALUE)
  private String purchaserBusinessTypeOtherValue;

  public static final String SERIALIZED_NAME_PURCHASER_CITY = "purchaser_city";
  @SerializedName(SERIALIZED_NAME_PURCHASER_CITY)
  private String purchaserCity;

  public static final String SERIALIZED_NAME_PURCHASER_EXEMPTION_REASON = "purchaser_exemption_reason";
  @SerializedName(SERIALIZED_NAME_PURCHASER_EXEMPTION_REASON)
  private String purchaserExemptionReason;

  public static final String SERIALIZED_NAME_PURCHASER_EXEMPTION_REASON_VALUE = "purchaser_exemption_reason_value";
  @SerializedName(SERIALIZED_NAME_PURCHASER_EXEMPTION_REASON_VALUE)
  private String purchaserExemptionReasonValue;

  public static final String SERIALIZED_NAME_PURCHASER_FIRST_NAME = "purchaser_first_name";
  @SerializedName(SERIALIZED_NAME_PURCHASER_FIRST_NAME)
  private String purchaserFirstName;

  public static final String SERIALIZED_NAME_PURCHASER_LAST_NAME = "purchaser_last_name";
  @SerializedName(SERIALIZED_NAME_PURCHASER_LAST_NAME)
  private String purchaserLastName;

  public static final String SERIALIZED_NAME_PURCHASER_STATE = "purchaser_state";
  @SerializedName(SERIALIZED_NAME_PURCHASER_STATE)
  private String purchaserState;

  public static final String SERIALIZED_NAME_PURCHASER_TAX_ID = "purchaser_tax_id";
  @SerializedName(SERIALIZED_NAME_PURCHASER_TAX_ID)
  private UsTaxId purchaserTaxId;

  public static final String SERIALIZED_NAME_PURCHASER_TITLE = "purchaser_title";
  @SerializedName(SERIALIZED_NAME_PURCHASER_TITLE)
  private String purchaserTitle;

  public static final String SERIALIZED_NAME_PURCHASER_ZIP = "purchaser_zip";
  @SerializedName(SERIALIZED_NAME_PURCHASER_ZIP)
  private String purchaserZip;

  public static final String SERIALIZED_NAME_SINGLE_PURCHASE = "single_purchase";
  @SerializedName(SERIALIZED_NAME_SINGLE_PURCHASE)
  private Boolean singlePurchase;

  public static final String SERIALIZED_NAME_SINGLE_PURCHASE_ORDER_IDENTIFIER = "single_purchase_order_identifier";
  @SerializedName(SERIALIZED_NAME_SINGLE_PURCHASE_ORDER_IDENTIFIER)
  private String singlePurchaseOrderIdentifier;

  public UsTaxExemptionCertificateDetailsSchema() {
  }

  public UsTaxExemptionCertificateDetailsSchema exemptStates(List<UsTaxExemptState> exemptStates) {
    this.exemptStates = exemptStates;
    return this;
  }

  public UsTaxExemptionCertificateDetailsSchema addExemptStatesItem(UsTaxExemptState exemptStatesItem) {
    if (this.exemptStates == null) {
      this.exemptStates = new ArrayList<>();
    }
    this.exemptStates.add(exemptStatesItem);
    return this;
  }

  /**
   * List of states where the certificate is valid.
   * @return exemptStates
   */
  @javax.annotation.Nonnull
  public List<UsTaxExemptState> getExemptStates() {
    return exemptStates;
  }

  public void setExemptStates(List<UsTaxExemptState> exemptStates) {
    this.exemptStates = exemptStates;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserAddress1(String purchaserAddress1) {
    this.purchaserAddress1 = purchaserAddress1;
    return this;
  }

  /**
   * Purchaser&#39;s first address line.
   * @return purchaserAddress1
   */
  @javax.annotation.Nonnull
  public String getPurchaserAddress1() {
    return purchaserAddress1;
  }

  public void setPurchaserAddress1(String purchaserAddress1) {
    this.purchaserAddress1 = purchaserAddress1;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserAddress2(String purchaserAddress2) {
    this.purchaserAddress2 = purchaserAddress2;
    return this;
  }

  /**
   * Purchaser&#39;s second address line.
   * @return purchaserAddress2
   */
  @javax.annotation.Nullable
  public String getPurchaserAddress2() {
    return purchaserAddress2;
  }

  public void setPurchaserAddress2(String purchaserAddress2) {
    this.purchaserAddress2 = purchaserAddress2;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserBusinessType(String purchaserBusinessType) {
    this.purchaserBusinessType = purchaserBusinessType;
    return this;
  }

  /**
   * Purchaser business type.
   * @return purchaserBusinessType
   */
  @javax.annotation.Nonnull
  public String getPurchaserBusinessType() {
    return purchaserBusinessType;
  }

  public void setPurchaserBusinessType(String purchaserBusinessType) {
    this.purchaserBusinessType = purchaserBusinessType;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserBusinessTypeOtherValue(String purchaserBusinessTypeOtherValue) {
    this.purchaserBusinessTypeOtherValue = purchaserBusinessTypeOtherValue;
    return this;
  }

  /**
   * If business type is other, a short description must be provided.
   * @return purchaserBusinessTypeOtherValue
   */
  @javax.annotation.Nullable
  public String getPurchaserBusinessTypeOtherValue() {
    return purchaserBusinessTypeOtherValue;
  }

  public void setPurchaserBusinessTypeOtherValue(String purchaserBusinessTypeOtherValue) {
    this.purchaserBusinessTypeOtherValue = purchaserBusinessTypeOtherValue;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserCity(String purchaserCity) {
    this.purchaserCity = purchaserCity;
    return this;
  }

  /**
   * Purchaser&#39;s city.
   * @return purchaserCity
   */
  @javax.annotation.Nonnull
  public String getPurchaserCity() {
    return purchaserCity;
  }

  public void setPurchaserCity(String purchaserCity) {
    this.purchaserCity = purchaserCity;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserExemptionReason(String purchaserExemptionReason) {
    this.purchaserExemptionReason = purchaserExemptionReason;
    return this;
  }

  /**
   * The reason for exemption reason.
   * @return purchaserExemptionReason
   */
  @javax.annotation.Nonnull
  public String getPurchaserExemptionReason() {
    return purchaserExemptionReason;
  }

  public void setPurchaserExemptionReason(String purchaserExemptionReason) {
    this.purchaserExemptionReason = purchaserExemptionReason;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserExemptionReasonValue(String purchaserExemptionReasonValue) {
    this.purchaserExemptionReasonValue = purchaserExemptionReasonValue;
    return this;
  }

  /**
   * The value of exemption reason.
   * @return purchaserExemptionReasonValue
   */
  @javax.annotation.Nonnull
  public String getPurchaserExemptionReasonValue() {
    return purchaserExemptionReasonValue;
  }

  public void setPurchaserExemptionReasonValue(String purchaserExemptionReasonValue) {
    this.purchaserExemptionReasonValue = purchaserExemptionReasonValue;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserFirstName(String purchaserFirstName) {
    this.purchaserFirstName = purchaserFirstName;
    return this;
  }

  /**
   * Purchaser&#39;s first name.
   * @return purchaserFirstName
   */
  @javax.annotation.Nonnull
  public String getPurchaserFirstName() {
    return purchaserFirstName;
  }

  public void setPurchaserFirstName(String purchaserFirstName) {
    this.purchaserFirstName = purchaserFirstName;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserLastName(String purchaserLastName) {
    this.purchaserLastName = purchaserLastName;
    return this;
  }

  /**
   * Purchaser&#39;s last name.
   * @return purchaserLastName
   */
  @javax.annotation.Nonnull
  public String getPurchaserLastName() {
    return purchaserLastName;
  }

  public void setPurchaserLastName(String purchaserLastName) {
    this.purchaserLastName = purchaserLastName;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserState(String purchaserState) {
    this.purchaserState = purchaserState;
    return this;
  }

  /**
   * Purchaser&#39;s state.
   * @return purchaserState
   */
  @javax.annotation.Nonnull
  public String getPurchaserState() {
    return purchaserState;
  }

  public void setPurchaserState(String purchaserState) {
    this.purchaserState = purchaserState;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserTaxId(UsTaxId purchaserTaxId) {
    this.purchaserTaxId = purchaserTaxId;
    return this;
  }

  /**
   * Get purchaserTaxId
   * @return purchaserTaxId
   */
  @javax.annotation.Nonnull
  public UsTaxId getPurchaserTaxId() {
    return purchaserTaxId;
  }

  public void setPurchaserTaxId(UsTaxId purchaserTaxId) {
    this.purchaserTaxId = purchaserTaxId;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserTitle(String purchaserTitle) {
    this.purchaserTitle = purchaserTitle;
    return this;
  }

  /**
   * Purchaser&#39;s title.
   * @return purchaserTitle
   */
  @javax.annotation.Nullable
  public String getPurchaserTitle() {
    return purchaserTitle;
  }

  public void setPurchaserTitle(String purchaserTitle) {
    this.purchaserTitle = purchaserTitle;
  }


  public UsTaxExemptionCertificateDetailsSchema purchaserZip(String purchaserZip) {
    this.purchaserZip = purchaserZip;
    return this;
  }

  /**
   * Purchaser&#39;s zip code.
   * @return purchaserZip
   */
  @javax.annotation.Nonnull
  public String getPurchaserZip() {
    return purchaserZip;
  }

  public void setPurchaserZip(String purchaserZip) {
    this.purchaserZip = purchaserZip;
  }


  public UsTaxExemptionCertificateDetailsSchema singlePurchase(Boolean singlePurchase) {
    this.singlePurchase = singlePurchase;
    return this;
  }

  /**
   * Set to true if this certificate is valid for single purchase only.
   * @return singlePurchase
   */
  @javax.annotation.Nullable
  public Boolean getSinglePurchase() {
    return singlePurchase;
  }

  public void setSinglePurchase(Boolean singlePurchase) {
    this.singlePurchase = singlePurchase;
  }


  public UsTaxExemptionCertificateDetailsSchema singlePurchaseOrderIdentifier(String singlePurchaseOrderIdentifier) {
    this.singlePurchaseOrderIdentifier = singlePurchaseOrderIdentifier;
    return this;
  }

  /**
   * Purchase/order identifier for single purchase.
   * @return singlePurchaseOrderIdentifier
   */
  @javax.annotation.Nullable
  public String getSinglePurchaseOrderIdentifier() {
    return singlePurchaseOrderIdentifier;
  }

  public void setSinglePurchaseOrderIdentifier(String singlePurchaseOrderIdentifier) {
    this.singlePurchaseOrderIdentifier = singlePurchaseOrderIdentifier;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UsTaxExemptionCertificateDetailsSchema usTaxExemptionCertificateDetailsSchema = (UsTaxExemptionCertificateDetailsSchema) o;
    return Objects.equals(this.exemptStates, usTaxExemptionCertificateDetailsSchema.exemptStates) &&
        Objects.equals(this.purchaserAddress1, usTaxExemptionCertificateDetailsSchema.purchaserAddress1) &&
        Objects.equals(this.purchaserAddress2, usTaxExemptionCertificateDetailsSchema.purchaserAddress2) &&
        Objects.equals(this.purchaserBusinessType, usTaxExemptionCertificateDetailsSchema.purchaserBusinessType) &&
        Objects.equals(this.purchaserBusinessTypeOtherValue, usTaxExemptionCertificateDetailsSchema.purchaserBusinessTypeOtherValue) &&
        Objects.equals(this.purchaserCity, usTaxExemptionCertificateDetailsSchema.purchaserCity) &&
        Objects.equals(this.purchaserExemptionReason, usTaxExemptionCertificateDetailsSchema.purchaserExemptionReason) &&
        Objects.equals(this.purchaserExemptionReasonValue, usTaxExemptionCertificateDetailsSchema.purchaserExemptionReasonValue) &&
        Objects.equals(this.purchaserFirstName, usTaxExemptionCertificateDetailsSchema.purchaserFirstName) &&
        Objects.equals(this.purchaserLastName, usTaxExemptionCertificateDetailsSchema.purchaserLastName) &&
        Objects.equals(this.purchaserState, usTaxExemptionCertificateDetailsSchema.purchaserState) &&
        Objects.equals(this.purchaserTaxId, usTaxExemptionCertificateDetailsSchema.purchaserTaxId) &&
        Objects.equals(this.purchaserTitle, usTaxExemptionCertificateDetailsSchema.purchaserTitle) &&
        Objects.equals(this.purchaserZip, usTaxExemptionCertificateDetailsSchema.purchaserZip) &&
        Objects.equals(this.singlePurchase, usTaxExemptionCertificateDetailsSchema.singlePurchase) &&
        Objects.equals(this.singlePurchaseOrderIdentifier, usTaxExemptionCertificateDetailsSchema.singlePurchaseOrderIdentifier);
  }

  @Override
  public int hashCode() {
    return Objects.hash(exemptStates, purchaserAddress1, purchaserAddress2, purchaserBusinessType, purchaserBusinessTypeOtherValue, purchaserCity, purchaserExemptionReason, purchaserExemptionReasonValue, purchaserFirstName, purchaserLastName, purchaserState, purchaserTaxId, purchaserTitle, purchaserZip, singlePurchase, singlePurchaseOrderIdentifier);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UsTaxExemptionCertificateDetailsSchema {\n");
    sb.append("    exemptStates: ").append(toIndentedString(exemptStates)).append("\n");
    sb.append("    purchaserAddress1: ").append(toIndentedString(purchaserAddress1)).append("\n");
    sb.append("    purchaserAddress2: ").append(toIndentedString(purchaserAddress2)).append("\n");
    sb.append("    purchaserBusinessType: ").append(toIndentedString(purchaserBusinessType)).append("\n");
    sb.append("    purchaserBusinessTypeOtherValue: ").append(toIndentedString(purchaserBusinessTypeOtherValue)).append("\n");
    sb.append("    purchaserCity: ").append(toIndentedString(purchaserCity)).append("\n");
    sb.append("    purchaserExemptionReason: ").append(toIndentedString(purchaserExemptionReason)).append("\n");
    sb.append("    purchaserExemptionReasonValue: ").append(toIndentedString(purchaserExemptionReasonValue)).append("\n");
    sb.append("    purchaserFirstName: ").append(toIndentedString(purchaserFirstName)).append("\n");
    sb.append("    purchaserLastName: ").append(toIndentedString(purchaserLastName)).append("\n");
    sb.append("    purchaserState: ").append(toIndentedString(purchaserState)).append("\n");
    sb.append("    purchaserTaxId: ").append(toIndentedString(purchaserTaxId)).append("\n");
    sb.append("    purchaserTitle: ").append(toIndentedString(purchaserTitle)).append("\n");
    sb.append("    purchaserZip: ").append(toIndentedString(purchaserZip)).append("\n");
    sb.append("    singlePurchase: ").append(toIndentedString(singlePurchase)).append("\n");
    sb.append("    singlePurchaseOrderIdentifier: ").append(toIndentedString(singlePurchaseOrderIdentifier)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("exempt_states");
    openapiFields.add("purchaser_address1");
    openapiFields.add("purchaser_address2");
    openapiFields.add("purchaser_business_type");
    openapiFields.add("purchaser_business_type_other_value");
    openapiFields.add("purchaser_city");
    openapiFields.add("purchaser_exemption_reason");
    openapiFields.add("purchaser_exemption_reason_value");
    openapiFields.add("purchaser_first_name");
    openapiFields.add("purchaser_last_name");
    openapiFields.add("purchaser_state");
    openapiFields.add("purchaser_tax_id");
    openapiFields.add("purchaser_title");
    openapiFields.add("purchaser_zip");
    openapiFields.add("single_purchase");
    openapiFields.add("single_purchase_order_identifier");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("exempt_states");
    openapiRequiredFields.add("purchaser_address1");
    openapiRequiredFields.add("purchaser_business_type");
    openapiRequiredFields.add("purchaser_city");
    openapiRequiredFields.add("purchaser_exemption_reason");
    openapiRequiredFields.add("purchaser_exemption_reason_value");
    openapiRequiredFields.add("purchaser_first_name");
    openapiRequiredFields.add("purchaser_last_name");
    openapiRequiredFields.add("purchaser_state");
    openapiRequiredFields.add("purchaser_tax_id");
    openapiRequiredFields.add("purchaser_zip");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UsTaxExemptionCertificateDetailsSchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UsTaxExemptionCertificateDetailsSchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UsTaxExemptionCertificateDetailsSchema is not found in the empty JSON string", UsTaxExemptionCertificateDetailsSchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UsTaxExemptionCertificateDetailsSchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UsTaxExemptionCertificateDetailsSchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UsTaxExemptionCertificateDetailsSchema.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the json data is an array
      if (!jsonObj.get("exempt_states").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `exempt_states` to be an array in the JSON string but got `%s`", jsonObj.get("exempt_states").toString()));
      }

      JsonArray jsonArrayexemptStates = jsonObj.getAsJsonArray("exempt_states");
      // validate the required field `exempt_states` (array)
      for (int i = 0; i < jsonArrayexemptStates.size(); i++) {
        UsTaxExemptState.validateJsonElement(jsonArrayexemptStates.get(i));
      };
      if (!jsonObj.get("purchaser_address1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_address1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_address1").toString()));
      }
      if ((jsonObj.get("purchaser_address2") != null && !jsonObj.get("purchaser_address2").isJsonNull()) && !jsonObj.get("purchaser_address2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_address2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_address2").toString()));
      }
      if (!jsonObj.get("purchaser_business_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_business_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_business_type").toString()));
      }
      if ((jsonObj.get("purchaser_business_type_other_value") != null && !jsonObj.get("purchaser_business_type_other_value").isJsonNull()) && !jsonObj.get("purchaser_business_type_other_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_business_type_other_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_business_type_other_value").toString()));
      }
      if (!jsonObj.get("purchaser_city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_city").toString()));
      }
      if (!jsonObj.get("purchaser_exemption_reason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_exemption_reason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_exemption_reason").toString()));
      }
      if (!jsonObj.get("purchaser_exemption_reason_value").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_exemption_reason_value` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_exemption_reason_value").toString()));
      }
      if (!jsonObj.get("purchaser_first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_first_name").toString()));
      }
      if (!jsonObj.get("purchaser_last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_last_name").toString()));
      }
      if (!jsonObj.get("purchaser_state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_state").toString()));
      }
      // validate the required field `purchaser_tax_id`
      UsTaxId.validateJsonElement(jsonObj.get("purchaser_tax_id"));
      if ((jsonObj.get("purchaser_title") != null && !jsonObj.get("purchaser_title").isJsonNull()) && !jsonObj.get("purchaser_title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_title").toString()));
      }
      if (!jsonObj.get("purchaser_zip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `purchaser_zip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("purchaser_zip").toString()));
      }
      if ((jsonObj.get("single_purchase_order_identifier") != null && !jsonObj.get("single_purchase_order_identifier").isJsonNull()) && !jsonObj.get("single_purchase_order_identifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `single_purchase_order_identifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("single_purchase_order_identifier").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UsTaxExemptionCertificateDetailsSchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UsTaxExemptionCertificateDetailsSchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UsTaxExemptionCertificateDetailsSchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UsTaxExemptionCertificateDetailsSchema.class));

       return (TypeAdapter<T>) new TypeAdapter<UsTaxExemptionCertificateDetailsSchema>() {
           @Override
           public void write(JsonWriter out, UsTaxExemptionCertificateDetailsSchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UsTaxExemptionCertificateDetailsSchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UsTaxExemptionCertificateDetailsSchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UsTaxExemptionCertificateDetailsSchema
   * @throws IOException if the JSON string is invalid with respect to UsTaxExemptionCertificateDetailsSchema
   */
  public static UsTaxExemptionCertificateDetailsSchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UsTaxExemptionCertificateDetailsSchema.class);
  }

  /**
   * Convert an instance of UsTaxExemptionCertificateDetailsSchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

