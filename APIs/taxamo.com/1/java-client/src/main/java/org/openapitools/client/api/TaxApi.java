/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CalculateSimpleTaxOut;
import org.openapitools.client.model.CalculateTaxIn;
import org.openapitools.client.model.CalculateTaxLocationOut;
import org.openapitools.client.model.CalculateTaxOut;
import org.openapitools.client.model.ValidateTaxNumberOut;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TaxApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TaxApi() {
        this(Configuration.getDefaultApiClient());
    }

    public TaxApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for calculateSimpleTax
     * @param currencyCode Currency code for transaction - e.g. EUR. (required)
     * @param productType Product type, according to dictionary /dictionaries/product_types.  (optional)
     * @param invoiceAddressCity Invoice address/postal_code (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @param invoiceAddressRegion Invoice address/region (optional)
     * @param unitPrice Unit price. (optional)
     * @param quantity Quantity Defaults to 1. (optional)
     * @param buyerTaxNumber  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly. (optional)
     * @param forceCountryCode Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation. (optional)
     * @param orderDate Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used. (optional)
     * @param amount Amount. Required if total amount or both unit price and quantity are not provided. (optional)
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param invoiceAddressPostalCode Invoice address/postal_code (optional)
     * @param totalAmount Total amount. Required if amount or both unit price and quantity are not provided. (optional)
     * @param taxDeducted If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSimpleTaxCall(String currencyCode, String productType, String invoiceAddressCity, String buyerCreditCardPrefix, String invoiceAddressRegion, BigDecimal unitPrice, BigDecimal quantity, String buyerTaxNumber, String forceCountryCode, String orderDate, BigDecimal amount, String billingCountryCode, String invoiceAddressPostalCode, BigDecimal totalAmount, Boolean taxDeducted, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tax/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (productType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("product_type", productType));
        }

        if (invoiceAddressCity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_address_city", invoiceAddressCity));
        }

        if (buyerCreditCardPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_credit_card_prefix", buyerCreditCardPrefix));
        }

        if (currencyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currency_code", currencyCode));
        }

        if (invoiceAddressRegion != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_address_region", invoiceAddressRegion));
        }

        if (unitPrice != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("unit_price", unitPrice));
        }

        if (quantity != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("quantity", quantity));
        }

        if (buyerTaxNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_tax_number", buyerTaxNumber));
        }

        if (forceCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("force_country_code", forceCountryCode));
        }

        if (orderDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("order_date", orderDate));
        }

        if (amount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("amount", amount));
        }

        if (billingCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billing_country_code", billingCountryCode));
        }

        if (invoiceAddressPostalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("invoice_address_postal_code", invoiceAddressPostalCode));
        }

        if (totalAmount != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("total_amount", totalAmount));
        }

        if (taxDeducted != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tax_deducted", taxDeducted));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateSimpleTaxValidateBeforeCall(String currencyCode, String productType, String invoiceAddressCity, String buyerCreditCardPrefix, String invoiceAddressRegion, BigDecimal unitPrice, BigDecimal quantity, String buyerTaxNumber, String forceCountryCode, String orderDate, BigDecimal amount, String billingCountryCode, String invoiceAddressPostalCode, BigDecimal totalAmount, Boolean taxDeducted, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'currencyCode' is set
        if (currencyCode == null) {
            throw new ApiException("Missing the required parameter 'currencyCode' when calling calculateSimpleTax(Async)");
        }

        return calculateSimpleTaxCall(currencyCode, productType, invoiceAddressCity, buyerCreditCardPrefix, invoiceAddressRegion, unitPrice, quantity, buyerTaxNumber, forceCountryCode, orderDate, amount, billingCountryCode, invoiceAddressPostalCode, totalAmount, taxDeducted, _callback);

    }

    /**
     * Simple tax
     * 
     * @param currencyCode Currency code for transaction - e.g. EUR. (required)
     * @param productType Product type, according to dictionary /dictionaries/product_types.  (optional)
     * @param invoiceAddressCity Invoice address/postal_code (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @param invoiceAddressRegion Invoice address/region (optional)
     * @param unitPrice Unit price. (optional)
     * @param quantity Quantity Defaults to 1. (optional)
     * @param buyerTaxNumber  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly. (optional)
     * @param forceCountryCode Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation. (optional)
     * @param orderDate Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used. (optional)
     * @param amount Amount. Required if total amount or both unit price and quantity are not provided. (optional)
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param invoiceAddressPostalCode Invoice address/postal_code (optional)
     * @param totalAmount Total amount. Required if amount or both unit price and quantity are not provided. (optional)
     * @param taxDeducted If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example. (optional)
     * @return CalculateSimpleTaxOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public CalculateSimpleTaxOut calculateSimpleTax(String currencyCode, String productType, String invoiceAddressCity, String buyerCreditCardPrefix, String invoiceAddressRegion, BigDecimal unitPrice, BigDecimal quantity, String buyerTaxNumber, String forceCountryCode, String orderDate, BigDecimal amount, String billingCountryCode, String invoiceAddressPostalCode, BigDecimal totalAmount, Boolean taxDeducted) throws ApiException {
        ApiResponse<CalculateSimpleTaxOut> localVarResp = calculateSimpleTaxWithHttpInfo(currencyCode, productType, invoiceAddressCity, buyerCreditCardPrefix, invoiceAddressRegion, unitPrice, quantity, buyerTaxNumber, forceCountryCode, orderDate, amount, billingCountryCode, invoiceAddressPostalCode, totalAmount, taxDeducted);
        return localVarResp.getData();
    }

    /**
     * Simple tax
     * 
     * @param currencyCode Currency code for transaction - e.g. EUR. (required)
     * @param productType Product type, according to dictionary /dictionaries/product_types.  (optional)
     * @param invoiceAddressCity Invoice address/postal_code (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @param invoiceAddressRegion Invoice address/region (optional)
     * @param unitPrice Unit price. (optional)
     * @param quantity Quantity Defaults to 1. (optional)
     * @param buyerTaxNumber  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly. (optional)
     * @param forceCountryCode Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation. (optional)
     * @param orderDate Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used. (optional)
     * @param amount Amount. Required if total amount or both unit price and quantity are not provided. (optional)
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param invoiceAddressPostalCode Invoice address/postal_code (optional)
     * @param totalAmount Total amount. Required if amount or both unit price and quantity are not provided. (optional)
     * @param taxDeducted If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example. (optional)
     * @return ApiResponse&lt;CalculateSimpleTaxOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalculateSimpleTaxOut> calculateSimpleTaxWithHttpInfo(String currencyCode, String productType, String invoiceAddressCity, String buyerCreditCardPrefix, String invoiceAddressRegion, BigDecimal unitPrice, BigDecimal quantity, String buyerTaxNumber, String forceCountryCode, String orderDate, BigDecimal amount, String billingCountryCode, String invoiceAddressPostalCode, BigDecimal totalAmount, Boolean taxDeducted) throws ApiException {
        okhttp3.Call localVarCall = calculateSimpleTaxValidateBeforeCall(currencyCode, productType, invoiceAddressCity, buyerCreditCardPrefix, invoiceAddressRegion, unitPrice, quantity, buyerTaxNumber, forceCountryCode, orderDate, amount, billingCountryCode, invoiceAddressPostalCode, totalAmount, taxDeducted, null);
        Type localVarReturnType = new TypeToken<CalculateSimpleTaxOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Simple tax (asynchronously)
     * 
     * @param currencyCode Currency code for transaction - e.g. EUR. (required)
     * @param productType Product type, according to dictionary /dictionaries/product_types.  (optional)
     * @param invoiceAddressCity Invoice address/postal_code (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @param invoiceAddressRegion Invoice address/region (optional)
     * @param unitPrice Unit price. (optional)
     * @param quantity Quantity Defaults to 1. (optional)
     * @param buyerTaxNumber  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly. (optional)
     * @param forceCountryCode Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation. (optional)
     * @param orderDate Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used. (optional)
     * @param amount Amount. Required if total amount or both unit price and quantity are not provided. (optional)
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param invoiceAddressPostalCode Invoice address/postal_code (optional)
     * @param totalAmount Total amount. Required if amount or both unit price and quantity are not provided. (optional)
     * @param taxDeducted If the transaction is in a country supported by Taxamo, but the tax is not calculated due to merchant settings or EU B2B transaction for example. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateSimpleTaxAsync(String currencyCode, String productType, String invoiceAddressCity, String buyerCreditCardPrefix, String invoiceAddressRegion, BigDecimal unitPrice, BigDecimal quantity, String buyerTaxNumber, String forceCountryCode, String orderDate, BigDecimal amount, String billingCountryCode, String invoiceAddressPostalCode, BigDecimal totalAmount, Boolean taxDeducted, final ApiCallback<CalculateSimpleTaxOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateSimpleTaxValidateBeforeCall(currencyCode, productType, invoiceAddressCity, buyerCreditCardPrefix, invoiceAddressRegion, unitPrice, quantity, buyerTaxNumber, forceCountryCode, orderDate, amount, billingCountryCode, invoiceAddressPostalCode, totalAmount, taxDeducted, _callback);
        Type localVarReturnType = new TypeToken<CalculateSimpleTaxOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateTax
     * @param input Input (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateTaxCall(CalculateTaxIn input, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = input;

        // create path and map variables
        String localVarPath = "/api/v1/tax/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateTaxValidateBeforeCall(CalculateTaxIn input, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'input' is set
        if (input == null) {
            throw new ApiException("Missing the required parameter 'input' when calling calculateTax(Async)");
        }

        return calculateTaxCall(input, _callback);

    }

    /**
     * Calculate tax
     * 
     * @param input Input (required)
     * @return CalculateTaxOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public CalculateTaxOut calculateTax(CalculateTaxIn input) throws ApiException {
        ApiResponse<CalculateTaxOut> localVarResp = calculateTaxWithHttpInfo(input);
        return localVarResp.getData();
    }

    /**
     * Calculate tax
     * 
     * @param input Input (required)
     * @return ApiResponse&lt;CalculateTaxOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalculateTaxOut> calculateTaxWithHttpInfo(CalculateTaxIn input) throws ApiException {
        okhttp3.Call localVarCall = calculateTaxValidateBeforeCall(input, null);
        Type localVarReturnType = new TypeToken<CalculateTaxOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate tax (asynchronously)
     * 
     * @param input Input (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateTaxAsync(CalculateTaxIn input, final ApiCallback<CalculateTaxOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateTaxValidateBeforeCall(input, _callback);
        Type localVarReturnType = new TypeToken<CalculateTaxOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calculateTaxLocation
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateTaxLocationCall(String billingCountryCode, String buyerCreditCardPrefix, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tax/location/calculate";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (billingCountryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("billing_country_code", billingCountryCode));
        }

        if (buyerCreditCardPrefix != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("buyer_credit_card_prefix", buyerCreditCardPrefix));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calculateTaxLocationValidateBeforeCall(String billingCountryCode, String buyerCreditCardPrefix, final ApiCallback _callback) throws ApiException {
        return calculateTaxLocationCall(billingCountryCode, buyerCreditCardPrefix, _callback);

    }

    /**
     * Calculate location
     * 
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @return CalculateTaxLocationOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public CalculateTaxLocationOut calculateTaxLocation(String billingCountryCode, String buyerCreditCardPrefix) throws ApiException {
        ApiResponse<CalculateTaxLocationOut> localVarResp = calculateTaxLocationWithHttpInfo(billingCountryCode, buyerCreditCardPrefix);
        return localVarResp.getData();
    }

    /**
     * Calculate location
     * 
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @return ApiResponse&lt;CalculateTaxLocationOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalculateTaxLocationOut> calculateTaxLocationWithHttpInfo(String billingCountryCode, String buyerCreditCardPrefix) throws ApiException {
        okhttp3.Call localVarCall = calculateTaxLocationValidateBeforeCall(billingCountryCode, buyerCreditCardPrefix, null);
        Type localVarReturnType = new TypeToken<CalculateTaxLocationOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Calculate location (asynchronously)
     * 
     * @param billingCountryCode Billing two letter ISO country code. (optional)
     * @param buyerCreditCardPrefix First 6 digits of buyer&#39;s credit card prefix. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calculateTaxLocationAsync(String billingCountryCode, String buyerCreditCardPrefix, final ApiCallback<CalculateTaxLocationOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = calculateTaxLocationValidateBeforeCall(billingCountryCode, buyerCreditCardPrefix, _callback);
        Type localVarReturnType = new TypeToken<CalculateTaxLocationOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for validateTaxNumber
     * @param taxNumber Tax number (required)
     * @param countryCode Two-letter ISO country code. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateTaxNumberCall(String taxNumber, String countryCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v1/tax/vat_numbers/{tax_number}/validate"
            .replace("{" + "tax_number" + "}", localVarApiClient.escapeString(taxNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country_code", countryCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call validateTaxNumberValidateBeforeCall(String taxNumber, String countryCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'taxNumber' is set
        if (taxNumber == null) {
            throw new ApiException("Missing the required parameter 'taxNumber' when calling validateTaxNumber(Async)");
        }

        return validateTaxNumberCall(taxNumber, countryCode, _callback);

    }

    /**
     * Validate VAT number
     * 
     * @param taxNumber Tax number (required)
     * @param countryCode Two-letter ISO country code. (optional)
     * @return ValidateTaxNumberOut
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ValidateTaxNumberOut validateTaxNumber(String taxNumber, String countryCode) throws ApiException {
        ApiResponse<ValidateTaxNumberOut> localVarResp = validateTaxNumberWithHttpInfo(taxNumber, countryCode);
        return localVarResp.getData();
    }

    /**
     * Validate VAT number
     * 
     * @param taxNumber Tax number (required)
     * @param countryCode Two-letter ISO country code. (optional)
     * @return ApiResponse&lt;ValidateTaxNumberOut&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ValidateTaxNumberOut> validateTaxNumberWithHttpInfo(String taxNumber, String countryCode) throws ApiException {
        okhttp3.Call localVarCall = validateTaxNumberValidateBeforeCall(taxNumber, countryCode, null);
        Type localVarReturnType = new TypeToken<ValidateTaxNumberOut>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Validate VAT number (asynchronously)
     * 
     * @param taxNumber Tax number (required)
     * @param countryCode Two-letter ISO country code. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Validation failed, see JSON body response for details. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Incorrect token </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call validateTaxNumberAsync(String taxNumber, String countryCode, final ApiCallback<ValidateTaxNumberOut> _callback) throws ApiException {

        okhttp3.Call localVarCall = validateTaxNumberValidateBeforeCall(taxNumber, countryCode, _callback);
        Type localVarReturnType = new TypeToken<ValidateTaxNumberOut>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
