/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AdditionalCurrencies;
import org.openapitools.client.model.CustomFields;
import org.openapitools.client.model.Evidence;
import org.openapitools.client.model.InputTransactionLine;
import org.openapitools.client.model.InvoiceAddress;
import org.openapitools.client.model.TaxDataSchema;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * InputTransaction
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class InputTransaction {
  public static final String SERIALIZED_NAME_ADDITIONAL_CURRENCIES = "additional_currencies";
  @SerializedName(SERIALIZED_NAME_ADDITIONAL_CURRENCIES)
  private AdditionalCurrencies additionalCurrencies;

  public static final String SERIALIZED_NAME_BILLING_COUNTRY_CODE = "billing_country_code";
  @SerializedName(SERIALIZED_NAME_BILLING_COUNTRY_CODE)
  private String billingCountryCode;

  public static final String SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX = "buyer_credit_card_prefix";
  @SerializedName(SERIALIZED_NAME_BUYER_CREDIT_CARD_PREFIX)
  private String buyerCreditCardPrefix;

  public static final String SERIALIZED_NAME_BUYER_EMAIL = "buyer_email";
  @SerializedName(SERIALIZED_NAME_BUYER_EMAIL)
  private String buyerEmail;

  public static final String SERIALIZED_NAME_BUYER_IP = "buyer_ip";
  @SerializedName(SERIALIZED_NAME_BUYER_IP)
  private String buyerIp;

  public static final String SERIALIZED_NAME_BUYER_NAME = "buyer_name";
  @SerializedName(SERIALIZED_NAME_BUYER_NAME)
  private String buyerName;

  public static final String SERIALIZED_NAME_BUYER_TAX_NUMBER = "buyer_tax_number";
  @SerializedName(SERIALIZED_NAME_BUYER_TAX_NUMBER)
  private String buyerTaxNumber;

  public static final String SERIALIZED_NAME_COMMENTS = "comments";
  @SerializedName(SERIALIZED_NAME_COMMENTS)
  private String comments;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_CUSTOM_DATA = "custom_data";
  @SerializedName(SERIALIZED_NAME_CUSTOM_DATA)
  private String customData;

  public static final String SERIALIZED_NAME_CUSTOM_FIELDS = "custom_fields";
  @SerializedName(SERIALIZED_NAME_CUSTOM_FIELDS)
  private List<CustomFields> customFields = new ArrayList<>();

  public static final String SERIALIZED_NAME_CUSTOM_ID = "custom_id";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_EVIDENCE = "evidence";
  @SerializedName(SERIALIZED_NAME_EVIDENCE)
  private Evidence evidence;

  public static final String SERIALIZED_NAME_FORCE_COUNTRY_CODE = "force_country_code";
  @SerializedName(SERIALIZED_NAME_FORCE_COUNTRY_CODE)
  private String forceCountryCode;

  public static final String SERIALIZED_NAME_INVOICE_ADDRESS = "invoice_address";
  @SerializedName(SERIALIZED_NAME_INVOICE_ADDRESS)
  private InvoiceAddress invoiceAddress;

  public static final String SERIALIZED_NAME_INVOICE_DATE = "invoice_date";
  @SerializedName(SERIALIZED_NAME_INVOICE_DATE)
  private String invoiceDate;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_INVOICE_PLACE = "invoice_place";
  @SerializedName(SERIALIZED_NAME_INVOICE_PLACE)
  private String invoicePlace;

  public static final String SERIALIZED_NAME_NOTE = "note";
  @SerializedName(SERIALIZED_NAME_NOTE)
  private String note;

  public static final String SERIALIZED_NAME_ORDER_DATE = "order_date";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE)
  private String orderDate;

  public static final String SERIALIZED_NAME_ORIGINAL_TRANSACTION_KEY = "original_transaction_key";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TRANSACTION_KEY)
  private String originalTransactionKey;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_SUB_ACCOUNT_ID = "sub_account_id";
  @SerializedName(SERIALIZED_NAME_SUB_ACCOUNT_ID)
  private String subAccountId;

  public static final String SERIALIZED_NAME_SUPPLY_DATE = "supply_date";
  @SerializedName(SERIALIZED_NAME_SUPPLY_DATE)
  private String supplyDate;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_CODE = "tax_country_code";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_CODE)
  private String taxCountryCode;

  public static final String SERIALIZED_NAME_TAX_DATA = "tax_data";
  @SerializedName(SERIALIZED_NAME_TAX_DATA)
  private TaxDataSchema taxData;

  public static final String SERIALIZED_NAME_TAX_DEDUCTED = "tax_deducted";
  @SerializedName(SERIALIZED_NAME_TAX_DEDUCTED)
  private Boolean taxDeducted;

  public static final String SERIALIZED_NAME_TRANSACTION_LINES = "transaction_lines";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_LINES)
  private List<InputTransactionLine> transactionLines = new ArrayList<>();

  public static final String SERIALIZED_NAME_VERIFICATION_TOKEN = "verification_token";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_TOKEN)
  private String verificationToken;

  public InputTransaction() {
  }

  public InputTransaction additionalCurrencies(AdditionalCurrencies additionalCurrencies) {
    this.additionalCurrencies = additionalCurrencies;
    return this;
  }

  /**
   * Get additionalCurrencies
   * @return additionalCurrencies
   */
  @javax.annotation.Nullable
  public AdditionalCurrencies getAdditionalCurrencies() {
    return additionalCurrencies;
  }

  public void setAdditionalCurrencies(AdditionalCurrencies additionalCurrencies) {
    this.additionalCurrencies = additionalCurrencies;
  }


  public InputTransaction billingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
    return this;
  }

  /**
   * Billing two letter ISO country code.
   * @return billingCountryCode
   */
  @javax.annotation.Nullable
  public String getBillingCountryCode() {
    return billingCountryCode;
  }

  public void setBillingCountryCode(String billingCountryCode) {
    this.billingCountryCode = billingCountryCode;
  }


  public InputTransaction buyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
    return this;
  }

  /**
   * First 6 digits of buyer&#39;s credit card prefix.
   * @return buyerCreditCardPrefix
   */
  @javax.annotation.Nullable
  public String getBuyerCreditCardPrefix() {
    return buyerCreditCardPrefix;
  }

  public void setBuyerCreditCardPrefix(String buyerCreditCardPrefix) {
    this.buyerCreditCardPrefix = buyerCreditCardPrefix;
  }


  public InputTransaction buyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
    return this;
  }

  /**
   * Buyer&#39;s declared email address.
   * @return buyerEmail
   */
  @javax.annotation.Nullable
  public String getBuyerEmail() {
    return buyerEmail;
  }

  public void setBuyerEmail(String buyerEmail) {
    this.buyerEmail = buyerEmail;
  }


  public InputTransaction buyerIp(String buyerIp) {
    this.buyerIp = buyerIp;
    return this;
  }

  /**
   * IP address of the buyer in dotted decimal (IPv4) or text format (IPv6).
   * @return buyerIp
   */
  @javax.annotation.Nullable
  public String getBuyerIp() {
    return buyerIp;
  }

  public void setBuyerIp(String buyerIp) {
    this.buyerIp = buyerIp;
  }


  public InputTransaction buyerName(String buyerName) {
    this.buyerName = buyerName;
    return this;
  }

  /**
   * Buyer&#39;s name - first name and last name or company name.
   * @return buyerName
   */
  @javax.annotation.Nullable
  public String getBuyerName() {
    return buyerName;
  }

  public void setBuyerName(String buyerName) {
    this.buyerName = buyerName;
  }


  public InputTransaction buyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
    return this;
  }

  /**
   *  Buyer&#39;s tax number - EU VAT number for example. If using EU VAT number, it is possible to provide country code in it (e.g. IE1234567X) or simply use billing_country_code field for that. In the first case, if billing_country_code value was provided, it will be overwritten with country code value extracted from VAT number - but only if the VAT has been verified properly.
   * @return buyerTaxNumber
   */
  @javax.annotation.Nullable
  public String getBuyerTaxNumber() {
    return buyerTaxNumber;
  }

  public void setBuyerTaxNumber(String buyerTaxNumber) {
    this.buyerTaxNumber = buyerTaxNumber;
  }


  public InputTransaction comments(String comments) {
    this.comments = comments;
    return this;
  }

  /**
   * Additional information about the transaction - for example if the evidence has been amended.
   * @return comments
   */
  @javax.annotation.Nullable
  public String getComments() {
    return comments;
  }

  public void setComments(String comments) {
    this.comments = comments;
  }


  public InputTransaction currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Currency code for transaction - e.g. EUR.
   * @return currencyCode
   */
  @javax.annotation.Nonnull
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public InputTransaction customData(String customData) {
    this.customData = customData;
    return this;
  }

  /**
   * Custom data related to transaction.
   * @return customData
   */
  @javax.annotation.Nullable
  public String getCustomData() {
    return customData;
  }

  public void setCustomData(String customData) {
    this.customData = customData;
  }


  public InputTransaction customFields(List<CustomFields> customFields) {
    this.customFields = customFields;
    return this;
  }

  public InputTransaction addCustomFieldsItem(CustomFields customFieldsItem) {
    if (this.customFields == null) {
      this.customFields = new ArrayList<>();
    }
    this.customFields.add(customFieldsItem);
    return this;
  }

  /**
   * Custom fields, stored as key-value pairs. This property is not processed and used mostly with Taxamo-built helpers.
   * @return customFields
   */
  @javax.annotation.Nullable
  public List<CustomFields> getCustomFields() {
    return customFields;
  }

  public void setCustomFields(List<CustomFields> customFields) {
    this.customFields = customFields;
  }


  public InputTransaction customId(String customId) {
    this.customId = customId;
    return this;
  }

  /**
   * Custom identifier provided upon transaction creation.
   * @return customId
   */
  @javax.annotation.Nullable
  public String getCustomId() {
    return customId;
  }

  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public InputTransaction customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Free-form field for storing customer id.
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public InputTransaction description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Transaction description.
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public InputTransaction evidence(Evidence evidence) {
    this.evidence = evidence;
    return this;
  }

  /**
   * Get evidence
   * @return evidence
   */
  @javax.annotation.Nullable
  public Evidence getEvidence() {
    return evidence;
  }

  public void setEvidence(Evidence evidence) {
    this.evidence = evidence;
  }


  public InputTransaction forceCountryCode(String forceCountryCode) {
    this.forceCountryCode = forceCountryCode;
    return this;
  }

  /**
   * Two-letter ISO country code, e.g. FR. Use it to force country code for tax calculation.
   * @return forceCountryCode
   */
  @javax.annotation.Nullable
  public String getForceCountryCode() {
    return forceCountryCode;
  }

  public void setForceCountryCode(String forceCountryCode) {
    this.forceCountryCode = forceCountryCode;
  }


  public InputTransaction invoiceAddress(InvoiceAddress invoiceAddress) {
    this.invoiceAddress = invoiceAddress;
    return this;
  }

  /**
   * Get invoiceAddress
   * @return invoiceAddress
   */
  @javax.annotation.Nullable
  public InvoiceAddress getInvoiceAddress() {
    return invoiceAddress;
  }

  public void setInvoiceAddress(InvoiceAddress invoiceAddress) {
    this.invoiceAddress = invoiceAddress;
  }


  public InputTransaction invoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
    return this;
  }

  /**
   * Invoice date of issue.
   * @return invoiceDate
   */
  @javax.annotation.Nullable
  public String getInvoiceDate() {
    return invoiceDate;
  }

  public void setInvoiceDate(String invoiceDate) {
    this.invoiceDate = invoiceDate;
  }


  public InputTransaction invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Invoice number.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public InputTransaction invoicePlace(String invoicePlace) {
    this.invoicePlace = invoicePlace;
    return this;
  }

  /**
   * Invoice place of issue.
   * @return invoicePlace
   */
  @javax.annotation.Nullable
  public String getInvoicePlace() {
    return invoicePlace;
  }

  public void setInvoicePlace(String invoicePlace) {
    this.invoicePlace = invoicePlace;
  }


  public InputTransaction note(String note) {
    this.note = note;
    return this;
  }

  /**
   * Additional note related to transaction state - for example if the transaction was created in a &#39;catch-all&#39; mode or the VAT number re-check for subscriptions has failed.
   * @return note
   */
  @javax.annotation.Nullable
  public String getNote() {
    return note;
  }

  public void setNote(String note) {
    this.note = note;
  }


  public InputTransaction orderDate(String orderDate) {
    this.orderDate = orderDate;
    return this;
  }

  /**
   * Order date in yyyy-MM-dd format, in merchant&#39;s timezone. If provided by the API caller, no timezone conversion is performed. Default value is current date and time. When using public token, the default value is used.
   * @return orderDate
   */
  @javax.annotation.Nullable
  public String getOrderDate() {
    return orderDate;
  }

  public void setOrderDate(String orderDate) {
    this.orderDate = orderDate;
  }


  public InputTransaction originalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
    return this;
  }

  /**
   * Use data and evidence from original transaction. Tax will be re-calculated, but evidence won&#39;t be re-checked. This parameter is taken into account only when &#39;manual&#39; flag is raised.
   * @return originalTransactionKey
   */
  @javax.annotation.Nullable
  public String getOriginalTransactionKey() {
    return originalTransactionKey;
  }

  public void setOriginalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
  }


  public InputTransaction status(String status) {
    this.status = status;
    return this;
  }

  /**
   * Transaction status: &#39;N&#39; - new, &#39;C&#39; - confirmed. Can use &#39;C&#39; in store-transaction! with private-token to create confirmed transaction, otherwise &#39;N&#39; is default status. Not applicable for update-transaction!.
   * @return status
   */
  @javax.annotation.Nullable
  public String getStatus() {
    return status;
  }

  public void setStatus(String status) {
    this.status = status;
  }


  public InputTransaction subAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
    return this;
  }

  /**
   * Sub account identifier.
   * @return subAccountId
   */
  @javax.annotation.Nullable
  public String getSubAccountId() {
    return subAccountId;
  }

  public void setSubAccountId(String subAccountId) {
    this.subAccountId = subAccountId;
  }


  public InputTransaction supplyDate(String supplyDate) {
    this.supplyDate = supplyDate;
    return this;
  }

  /**
   * Supply date in yyyy-MM-dd format.
   * @return supplyDate
   */
  @javax.annotation.Nullable
  public String getSupplyDate() {
    return supplyDate;
  }

  public void setSupplyDate(String supplyDate) {
    this.supplyDate = supplyDate;
  }


  public InputTransaction taxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
    return this;
  }

  /**
   * Two-letter ISO country code, e.g. FR. This code applies to detected/set country for transaction, but can be set using manual mode.
   * @return taxCountryCode
   */
  @javax.annotation.Nullable
  public String getTaxCountryCode() {
    return taxCountryCode;
  }

  public void setTaxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
  }


  public InputTransaction taxData(TaxDataSchema taxData) {
    this.taxData = taxData;
    return this;
  }

  /**
   * Get taxData
   * @return taxData
   */
  @javax.annotation.Nullable
  public TaxDataSchema getTaxData() {
    return taxData;
  }

  public void setTaxData(TaxDataSchema taxData) {
    this.taxData = taxData;
  }


  public InputTransaction taxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
    return this;
  }

  /**
   * True if the transaction is deducted from tax and no tax is applied (it is untaxed). Either set automatically when VAT number validates with VIES correctly, but can also be provided in manual mode.
   * @return taxDeducted
   */
  @javax.annotation.Nullable
  public Boolean getTaxDeducted() {
    return taxDeducted;
  }

  public void setTaxDeducted(Boolean taxDeducted) {
    this.taxDeducted = taxDeducted;
  }


  public InputTransaction transactionLines(List<InputTransactionLine> transactionLines) {
    this.transactionLines = transactionLines;
    return this;
  }

  public InputTransaction addTransactionLinesItem(InputTransactionLine transactionLinesItem) {
    if (this.transactionLines == null) {
      this.transactionLines = new ArrayList<>();
    }
    this.transactionLines.add(transactionLinesItem);
    return this;
  }

  /**
   * Transaction lines.
   * @return transactionLines
   */
  @javax.annotation.Nonnull
  public List<InputTransactionLine> getTransactionLines() {
    return transactionLines;
  }

  public void setTransactionLines(List<InputTransactionLine> transactionLines) {
    this.transactionLines = transactionLines;
  }


  public InputTransaction verificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
    return this;
  }

  /**
   * Verification token
   * @return verificationToken
   */
  @javax.annotation.Nullable
  public String getVerificationToken() {
    return verificationToken;
  }

  public void setVerificationToken(String verificationToken) {
    this.verificationToken = verificationToken;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InputTransaction inputTransaction = (InputTransaction) o;
    return Objects.equals(this.additionalCurrencies, inputTransaction.additionalCurrencies) &&
        Objects.equals(this.billingCountryCode, inputTransaction.billingCountryCode) &&
        Objects.equals(this.buyerCreditCardPrefix, inputTransaction.buyerCreditCardPrefix) &&
        Objects.equals(this.buyerEmail, inputTransaction.buyerEmail) &&
        Objects.equals(this.buyerIp, inputTransaction.buyerIp) &&
        Objects.equals(this.buyerName, inputTransaction.buyerName) &&
        Objects.equals(this.buyerTaxNumber, inputTransaction.buyerTaxNumber) &&
        Objects.equals(this.comments, inputTransaction.comments) &&
        Objects.equals(this.currencyCode, inputTransaction.currencyCode) &&
        Objects.equals(this.customData, inputTransaction.customData) &&
        Objects.equals(this.customFields, inputTransaction.customFields) &&
        Objects.equals(this.customId, inputTransaction.customId) &&
        Objects.equals(this.customerId, inputTransaction.customerId) &&
        Objects.equals(this.description, inputTransaction.description) &&
        Objects.equals(this.evidence, inputTransaction.evidence) &&
        Objects.equals(this.forceCountryCode, inputTransaction.forceCountryCode) &&
        Objects.equals(this.invoiceAddress, inputTransaction.invoiceAddress) &&
        Objects.equals(this.invoiceDate, inputTransaction.invoiceDate) &&
        Objects.equals(this.invoiceNumber, inputTransaction.invoiceNumber) &&
        Objects.equals(this.invoicePlace, inputTransaction.invoicePlace) &&
        Objects.equals(this.note, inputTransaction.note) &&
        Objects.equals(this.orderDate, inputTransaction.orderDate) &&
        Objects.equals(this.originalTransactionKey, inputTransaction.originalTransactionKey) &&
        Objects.equals(this.status, inputTransaction.status) &&
        Objects.equals(this.subAccountId, inputTransaction.subAccountId) &&
        Objects.equals(this.supplyDate, inputTransaction.supplyDate) &&
        Objects.equals(this.taxCountryCode, inputTransaction.taxCountryCode) &&
        Objects.equals(this.taxData, inputTransaction.taxData) &&
        Objects.equals(this.taxDeducted, inputTransaction.taxDeducted) &&
        Objects.equals(this.transactionLines, inputTransaction.transactionLines) &&
        Objects.equals(this.verificationToken, inputTransaction.verificationToken);
  }

  @Override
  public int hashCode() {
    return Objects.hash(additionalCurrencies, billingCountryCode, buyerCreditCardPrefix, buyerEmail, buyerIp, buyerName, buyerTaxNumber, comments, currencyCode, customData, customFields, customId, customerId, description, evidence, forceCountryCode, invoiceAddress, invoiceDate, invoiceNumber, invoicePlace, note, orderDate, originalTransactionKey, status, subAccountId, supplyDate, taxCountryCode, taxData, taxDeducted, transactionLines, verificationToken);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InputTransaction {\n");
    sb.append("    additionalCurrencies: ").append(toIndentedString(additionalCurrencies)).append("\n");
    sb.append("    billingCountryCode: ").append(toIndentedString(billingCountryCode)).append("\n");
    sb.append("    buyerCreditCardPrefix: ").append(toIndentedString(buyerCreditCardPrefix)).append("\n");
    sb.append("    buyerEmail: ").append(toIndentedString(buyerEmail)).append("\n");
    sb.append("    buyerIp: ").append(toIndentedString(buyerIp)).append("\n");
    sb.append("    buyerName: ").append(toIndentedString(buyerName)).append("\n");
    sb.append("    buyerTaxNumber: ").append(toIndentedString(buyerTaxNumber)).append("\n");
    sb.append("    comments: ").append(toIndentedString(comments)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    customData: ").append(toIndentedString(customData)).append("\n");
    sb.append("    customFields: ").append(toIndentedString(customFields)).append("\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    evidence: ").append(toIndentedString(evidence)).append("\n");
    sb.append("    forceCountryCode: ").append(toIndentedString(forceCountryCode)).append("\n");
    sb.append("    invoiceAddress: ").append(toIndentedString(invoiceAddress)).append("\n");
    sb.append("    invoiceDate: ").append(toIndentedString(invoiceDate)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    invoicePlace: ").append(toIndentedString(invoicePlace)).append("\n");
    sb.append("    note: ").append(toIndentedString(note)).append("\n");
    sb.append("    orderDate: ").append(toIndentedString(orderDate)).append("\n");
    sb.append("    originalTransactionKey: ").append(toIndentedString(originalTransactionKey)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    subAccountId: ").append(toIndentedString(subAccountId)).append("\n");
    sb.append("    supplyDate: ").append(toIndentedString(supplyDate)).append("\n");
    sb.append("    taxCountryCode: ").append(toIndentedString(taxCountryCode)).append("\n");
    sb.append("    taxData: ").append(toIndentedString(taxData)).append("\n");
    sb.append("    taxDeducted: ").append(toIndentedString(taxDeducted)).append("\n");
    sb.append("    transactionLines: ").append(toIndentedString(transactionLines)).append("\n");
    sb.append("    verificationToken: ").append(toIndentedString(verificationToken)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("additional_currencies");
    openapiFields.add("billing_country_code");
    openapiFields.add("buyer_credit_card_prefix");
    openapiFields.add("buyer_email");
    openapiFields.add("buyer_ip");
    openapiFields.add("buyer_name");
    openapiFields.add("buyer_tax_number");
    openapiFields.add("comments");
    openapiFields.add("currency_code");
    openapiFields.add("custom_data");
    openapiFields.add("custom_fields");
    openapiFields.add("custom_id");
    openapiFields.add("customer_id");
    openapiFields.add("description");
    openapiFields.add("evidence");
    openapiFields.add("force_country_code");
    openapiFields.add("invoice_address");
    openapiFields.add("invoice_date");
    openapiFields.add("invoice_number");
    openapiFields.add("invoice_place");
    openapiFields.add("note");
    openapiFields.add("order_date");
    openapiFields.add("original_transaction_key");
    openapiFields.add("status");
    openapiFields.add("sub_account_id");
    openapiFields.add("supply_date");
    openapiFields.add("tax_country_code");
    openapiFields.add("tax_data");
    openapiFields.add("tax_deducted");
    openapiFields.add("transaction_lines");
    openapiFields.add("verification_token");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("currency_code");
    openapiRequiredFields.add("transaction_lines");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to InputTransaction
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!InputTransaction.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InputTransaction is not found in the empty JSON string", InputTransaction.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!InputTransaction.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `InputTransaction` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : InputTransaction.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `additional_currencies`
      if (jsonObj.get("additional_currencies") != null && !jsonObj.get("additional_currencies").isJsonNull()) {
        AdditionalCurrencies.validateJsonElement(jsonObj.get("additional_currencies"));
      }
      if ((jsonObj.get("billing_country_code") != null && !jsonObj.get("billing_country_code").isJsonNull()) && !jsonObj.get("billing_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `billing_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("billing_country_code").toString()));
      }
      if ((jsonObj.get("buyer_credit_card_prefix") != null && !jsonObj.get("buyer_credit_card_prefix").isJsonNull()) && !jsonObj.get("buyer_credit_card_prefix").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_credit_card_prefix` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_credit_card_prefix").toString()));
      }
      if ((jsonObj.get("buyer_email") != null && !jsonObj.get("buyer_email").isJsonNull()) && !jsonObj.get("buyer_email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_email").toString()));
      }
      if ((jsonObj.get("buyer_ip") != null && !jsonObj.get("buyer_ip").isJsonNull()) && !jsonObj.get("buyer_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_ip").toString()));
      }
      if ((jsonObj.get("buyer_name") != null && !jsonObj.get("buyer_name").isJsonNull()) && !jsonObj.get("buyer_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_name").toString()));
      }
      if ((jsonObj.get("buyer_tax_number") != null && !jsonObj.get("buyer_tax_number").isJsonNull()) && !jsonObj.get("buyer_tax_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `buyer_tax_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("buyer_tax_number").toString()));
      }
      if ((jsonObj.get("comments") != null && !jsonObj.get("comments").isJsonNull()) && !jsonObj.get("comments").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `comments` to be a primitive type in the JSON string but got `%s`", jsonObj.get("comments").toString()));
      }
      if (!jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("custom_data") != null && !jsonObj.get("custom_data").isJsonNull()) && !jsonObj.get("custom_data").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_data` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_data").toString()));
      }
      if (jsonObj.get("custom_fields") != null && !jsonObj.get("custom_fields").isJsonNull()) {
        JsonArray jsonArraycustomFields = jsonObj.getAsJsonArray("custom_fields");
        if (jsonArraycustomFields != null) {
          // ensure the json data is an array
          if (!jsonObj.get("custom_fields").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `custom_fields` to be an array in the JSON string but got `%s`", jsonObj.get("custom_fields").toString()));
          }

          // validate the optional field `custom_fields` (array)
          for (int i = 0; i < jsonArraycustomFields.size(); i++) {
            CustomFields.validateJsonElement(jsonArraycustomFields.get(i));
          };
        }
      }
      if ((jsonObj.get("custom_id") != null && !jsonObj.get("custom_id").isJsonNull()) && !jsonObj.get("custom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `custom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("custom_id").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      // validate the optional field `evidence`
      if (jsonObj.get("evidence") != null && !jsonObj.get("evidence").isJsonNull()) {
        Evidence.validateJsonElement(jsonObj.get("evidence"));
      }
      if ((jsonObj.get("force_country_code") != null && !jsonObj.get("force_country_code").isJsonNull()) && !jsonObj.get("force_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `force_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("force_country_code").toString()));
      }
      // validate the optional field `invoice_address`
      if (jsonObj.get("invoice_address") != null && !jsonObj.get("invoice_address").isJsonNull()) {
        InvoiceAddress.validateJsonElement(jsonObj.get("invoice_address"));
      }
      if ((jsonObj.get("invoice_date") != null && !jsonObj.get("invoice_date").isJsonNull()) && !jsonObj.get("invoice_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_date").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("invoice_place") != null && !jsonObj.get("invoice_place").isJsonNull()) && !jsonObj.get("invoice_place").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_place` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_place").toString()));
      }
      if ((jsonObj.get("note") != null && !jsonObj.get("note").isJsonNull()) && !jsonObj.get("note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("note").toString()));
      }
      if ((jsonObj.get("order_date") != null && !jsonObj.get("order_date").isJsonNull()) && !jsonObj.get("order_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_date").toString()));
      }
      if ((jsonObj.get("original_transaction_key") != null && !jsonObj.get("original_transaction_key").isJsonNull()) && !jsonObj.get("original_transaction_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_transaction_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_transaction_key").toString()));
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      if ((jsonObj.get("sub_account_id") != null && !jsonObj.get("sub_account_id").isJsonNull()) && !jsonObj.get("sub_account_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sub_account_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sub_account_id").toString()));
      }
      if ((jsonObj.get("supply_date") != null && !jsonObj.get("supply_date").isJsonNull()) && !jsonObj.get("supply_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supply_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supply_date").toString()));
      }
      if ((jsonObj.get("tax_country_code") != null && !jsonObj.get("tax_country_code").isJsonNull()) && !jsonObj.get("tax_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_code").toString()));
      }
      // validate the optional field `tax_data`
      if (jsonObj.get("tax_data") != null && !jsonObj.get("tax_data").isJsonNull()) {
        TaxDataSchema.validateJsonElement(jsonObj.get("tax_data"));
      }
      // ensure the json data is an array
      if (!jsonObj.get("transaction_lines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_lines` to be an array in the JSON string but got `%s`", jsonObj.get("transaction_lines").toString()));
      }

      JsonArray jsonArraytransactionLines = jsonObj.getAsJsonArray("transaction_lines");
      // validate the required field `transaction_lines` (array)
      for (int i = 0; i < jsonArraytransactionLines.size(); i++) {
        InputTransactionLine.validateJsonElement(jsonArraytransactionLines.get(i));
      };
      if ((jsonObj.get("verification_token") != null && !jsonObj.get("verification_token").isJsonNull()) && !jsonObj.get("verification_token").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_token` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_token").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InputTransaction.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InputTransaction' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InputTransaction> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InputTransaction.class));

       return (TypeAdapter<T>) new TypeAdapter<InputTransaction>() {
           @Override
           public void write(JsonWriter out, InputTransaction value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public InputTransaction read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of InputTransaction given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of InputTransaction
   * @throws IOException if the JSON string is invalid with respect to InputTransaction
   */
  public static InputTransaction fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InputTransaction.class);
  }

  /**
   * Convert an instance of InputTransaction to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

