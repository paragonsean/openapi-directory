/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ListTransactionsIn
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ListTransactionsIn {
  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currency_code";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_FILTER_TEXT = "filter_text";
  @SerializedName(SERIALIZED_NAME_FILTER_TEXT)
  private String filterText;

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private String format;

  public static final String SERIALIZED_NAME_HAS_NOTE = "has_note";
  @SerializedName(SERIALIZED_NAME_HAS_NOTE)
  private Boolean hasNote;

  public static final String SERIALIZED_NAME_INVOICE_NUMBER = "invoice_number";
  @SerializedName(SERIALIZED_NAME_INVOICE_NUMBER)
  private String invoiceNumber;

  public static final String SERIALIZED_NAME_KEY_OR_CUSTOM_ID = "key_or_custom_id";
  @SerializedName(SERIALIZED_NAME_KEY_OR_CUSTOM_ID)
  private String keyOrCustomId;

  public static final String SERIALIZED_NAME_LIMIT = "limit";
  @SerializedName(SERIALIZED_NAME_LIMIT)
  private Integer limit;

  public static final String SERIALIZED_NAME_OFFSET = "offset";
  @SerializedName(SERIALIZED_NAME_OFFSET)
  private Integer offset;

  public static final String SERIALIZED_NAME_ORDER_DATE_FROM = "order_date_from";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE_FROM)
  private String orderDateFrom;

  public static final String SERIALIZED_NAME_ORDER_DATE_TO = "order_date_to";
  @SerializedName(SERIALIZED_NAME_ORDER_DATE_TO)
  private String orderDateTo;

  public static final String SERIALIZED_NAME_ORIGINAL_TRANSACTION_KEY = "original_transaction_key";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_TRANSACTION_KEY)
  private String originalTransactionKey;

  public static final String SERIALIZED_NAME_SORT_REVERSE = "sort_reverse";
  @SerializedName(SERIALIZED_NAME_SORT_REVERSE)
  private Boolean sortReverse;

  public static final String SERIALIZED_NAME_STATUSES = "statuses";
  @SerializedName(SERIALIZED_NAME_STATUSES)
  private String statuses;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_CODE = "tax_country_code";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_CODE)
  private String taxCountryCode;

  public static final String SERIALIZED_NAME_TAX_COUNTRY_CODES = "tax_country_codes";
  @SerializedName(SERIALIZED_NAME_TAX_COUNTRY_CODES)
  private String taxCountryCodes;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_GREATER_THAN = "total_amount_greater_than";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_GREATER_THAN)
  private String totalAmountGreaterThan;

  public static final String SERIALIZED_NAME_TOTAL_AMOUNT_LESS_THAN = "total_amount_less_than";
  @SerializedName(SERIALIZED_NAME_TOTAL_AMOUNT_LESS_THAN)
  private String totalAmountLessThan;

  public ListTransactionsIn() {
  }

  public ListTransactionsIn currencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
    return this;
  }

  /**
   * Three letter ISO currency code.
   * @return currencyCode
   */
  @javax.annotation.Nullable
  public String getCurrencyCode() {
    return currencyCode;
  }

  public void setCurrencyCode(String currencyCode) {
    this.currencyCode = currencyCode;
  }


  public ListTransactionsIn filterText(String filterText) {
    this.filterText = filterText;
    return this;
  }

  /**
   * Filtering expression
   * @return filterText
   */
  @javax.annotation.Nullable
  public String getFilterText() {
    return filterText;
  }

  public void setFilterText(String filterText) {
    this.filterText = filterText;
  }


  public ListTransactionsIn format(String format) {
    this.format = format;
    return this;
  }

  /**
   * Output format - supports &#39;csv&#39; value for this operation.
   * @return format
   */
  @javax.annotation.Nullable
  public String getFormat() {
    return format;
  }

  public void setFormat(String format) {
    this.format = format;
  }


  public ListTransactionsIn hasNote(Boolean hasNote) {
    this.hasNote = hasNote;
    return this;
  }

  /**
   * Return only transactions with a note field set.
   * @return hasNote
   */
  @javax.annotation.Nullable
  public Boolean getHasNote() {
    return hasNote;
  }

  public void setHasNote(Boolean hasNote) {
    this.hasNote = hasNote;
  }


  public ListTransactionsIn invoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
    return this;
  }

  /**
   * Transaction invoice number.
   * @return invoiceNumber
   */
  @javax.annotation.Nullable
  public String getInvoiceNumber() {
    return invoiceNumber;
  }

  public void setInvoiceNumber(String invoiceNumber) {
    this.invoiceNumber = invoiceNumber;
  }


  public ListTransactionsIn keyOrCustomId(String keyOrCustomId) {
    this.keyOrCustomId = keyOrCustomId;
    return this;
  }

  /**
   * Taxamo provided transaction key or custom id
   * @return keyOrCustomId
   */
  @javax.annotation.Nullable
  public String getKeyOrCustomId() {
    return keyOrCustomId;
  }

  public void setKeyOrCustomId(String keyOrCustomId) {
    this.keyOrCustomId = keyOrCustomId;
  }


  public ListTransactionsIn limit(Integer limit) {
    this.limit = limit;
    return this;
  }

  /**
   * Limit (no more than 1000, defaults to 100).
   * @return limit
   */
  @javax.annotation.Nullable
  public Integer getLimit() {
    return limit;
  }

  public void setLimit(Integer limit) {
    this.limit = limit;
  }


  public ListTransactionsIn offset(Integer offset) {
    this.offset = offset;
    return this;
  }

  /**
   * Offset
   * @return offset
   */
  @javax.annotation.Nullable
  public Integer getOffset() {
    return offset;
  }

  public void setOffset(Integer offset) {
    this.offset = offset;
  }


  public ListTransactionsIn orderDateFrom(String orderDateFrom) {
    this.orderDateFrom = orderDateFrom;
    return this;
  }

  /**
   * Order date from in yyyy-MM-dd format.
   * @return orderDateFrom
   */
  @javax.annotation.Nullable
  public String getOrderDateFrom() {
    return orderDateFrom;
  }

  public void setOrderDateFrom(String orderDateFrom) {
    this.orderDateFrom = orderDateFrom;
  }


  public ListTransactionsIn orderDateTo(String orderDateTo) {
    this.orderDateTo = orderDateTo;
    return this;
  }

  /**
   * Order date to in yyyy-MM-dd format.
   * @return orderDateTo
   */
  @javax.annotation.Nullable
  public String getOrderDateTo() {
    return orderDateTo;
  }

  public void setOrderDateTo(String orderDateTo) {
    this.orderDateTo = orderDateTo;
  }


  public ListTransactionsIn originalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
    return this;
  }

  /**
   * Taxamo provided original transaction key
   * @return originalTransactionKey
   */
  @javax.annotation.Nullable
  public String getOriginalTransactionKey() {
    return originalTransactionKey;
  }

  public void setOriginalTransactionKey(String originalTransactionKey) {
    this.originalTransactionKey = originalTransactionKey;
  }


  public ListTransactionsIn sortReverse(Boolean sortReverse) {
    this.sortReverse = sortReverse;
    return this;
  }

  /**
   * If true, results are sorted in descending order.
   * @return sortReverse
   */
  @javax.annotation.Nullable
  public Boolean getSortReverse() {
    return sortReverse;
  }

  public void setSortReverse(Boolean sortReverse) {
    this.sortReverse = sortReverse;
  }


  public ListTransactionsIn statuses(String statuses) {
    this.statuses = statuses;
    return this;
  }

  /**
   * Comma separated list of of transaction statuses. &#39;N&#39; - unconfirmed transaction, &#39;C&#39; - confirmed transaction.
   * @return statuses
   */
  @javax.annotation.Nullable
  public String getStatuses() {
    return statuses;
  }

  public void setStatuses(String statuses) {
    this.statuses = statuses;
  }


  public ListTransactionsIn taxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
    return this;
  }

  /**
   * Two letter ISO tax country code.
   * @return taxCountryCode
   */
  @javax.annotation.Nullable
  public String getTaxCountryCode() {
    return taxCountryCode;
  }

  public void setTaxCountryCode(String taxCountryCode) {
    this.taxCountryCode = taxCountryCode;
  }


  public ListTransactionsIn taxCountryCodes(String taxCountryCodes) {
    this.taxCountryCodes = taxCountryCodes;
    return this;
  }

  /**
   * Comma separated list of two letter ISO tax country codes.
   * @return taxCountryCodes
   */
  @javax.annotation.Nullable
  public String getTaxCountryCodes() {
    return taxCountryCodes;
  }

  public void setTaxCountryCodes(String taxCountryCodes) {
    this.taxCountryCodes = taxCountryCodes;
  }


  public ListTransactionsIn totalAmountGreaterThan(String totalAmountGreaterThan) {
    this.totalAmountGreaterThan = totalAmountGreaterThan;
    return this;
  }

  /**
   * Return only transactions with total amount greater than given number. Transactions with total amount equal to a given number (e.g. 0) are not returned.
   * @return totalAmountGreaterThan
   */
  @javax.annotation.Nullable
  public String getTotalAmountGreaterThan() {
    return totalAmountGreaterThan;
  }

  public void setTotalAmountGreaterThan(String totalAmountGreaterThan) {
    this.totalAmountGreaterThan = totalAmountGreaterThan;
  }


  public ListTransactionsIn totalAmountLessThan(String totalAmountLessThan) {
    this.totalAmountLessThan = totalAmountLessThan;
    return this;
  }

  /**
   * Return only transactions with total amount less than a given number. Transactions with total amount equal to a given number (e.g. 1) are not returned.
   * @return totalAmountLessThan
   */
  @javax.annotation.Nullable
  public String getTotalAmountLessThan() {
    return totalAmountLessThan;
  }

  public void setTotalAmountLessThan(String totalAmountLessThan) {
    this.totalAmountLessThan = totalAmountLessThan;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ListTransactionsIn listTransactionsIn = (ListTransactionsIn) o;
    return Objects.equals(this.currencyCode, listTransactionsIn.currencyCode) &&
        Objects.equals(this.filterText, listTransactionsIn.filterText) &&
        Objects.equals(this.format, listTransactionsIn.format) &&
        Objects.equals(this.hasNote, listTransactionsIn.hasNote) &&
        Objects.equals(this.invoiceNumber, listTransactionsIn.invoiceNumber) &&
        Objects.equals(this.keyOrCustomId, listTransactionsIn.keyOrCustomId) &&
        Objects.equals(this.limit, listTransactionsIn.limit) &&
        Objects.equals(this.offset, listTransactionsIn.offset) &&
        Objects.equals(this.orderDateFrom, listTransactionsIn.orderDateFrom) &&
        Objects.equals(this.orderDateTo, listTransactionsIn.orderDateTo) &&
        Objects.equals(this.originalTransactionKey, listTransactionsIn.originalTransactionKey) &&
        Objects.equals(this.sortReverse, listTransactionsIn.sortReverse) &&
        Objects.equals(this.statuses, listTransactionsIn.statuses) &&
        Objects.equals(this.taxCountryCode, listTransactionsIn.taxCountryCode) &&
        Objects.equals(this.taxCountryCodes, listTransactionsIn.taxCountryCodes) &&
        Objects.equals(this.totalAmountGreaterThan, listTransactionsIn.totalAmountGreaterThan) &&
        Objects.equals(this.totalAmountLessThan, listTransactionsIn.totalAmountLessThan);
  }

  @Override
  public int hashCode() {
    return Objects.hash(currencyCode, filterText, format, hasNote, invoiceNumber, keyOrCustomId, limit, offset, orderDateFrom, orderDateTo, originalTransactionKey, sortReverse, statuses, taxCountryCode, taxCountryCodes, totalAmountGreaterThan, totalAmountLessThan);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ListTransactionsIn {\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    filterText: ").append(toIndentedString(filterText)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    hasNote: ").append(toIndentedString(hasNote)).append("\n");
    sb.append("    invoiceNumber: ").append(toIndentedString(invoiceNumber)).append("\n");
    sb.append("    keyOrCustomId: ").append(toIndentedString(keyOrCustomId)).append("\n");
    sb.append("    limit: ").append(toIndentedString(limit)).append("\n");
    sb.append("    offset: ").append(toIndentedString(offset)).append("\n");
    sb.append("    orderDateFrom: ").append(toIndentedString(orderDateFrom)).append("\n");
    sb.append("    orderDateTo: ").append(toIndentedString(orderDateTo)).append("\n");
    sb.append("    originalTransactionKey: ").append(toIndentedString(originalTransactionKey)).append("\n");
    sb.append("    sortReverse: ").append(toIndentedString(sortReverse)).append("\n");
    sb.append("    statuses: ").append(toIndentedString(statuses)).append("\n");
    sb.append("    taxCountryCode: ").append(toIndentedString(taxCountryCode)).append("\n");
    sb.append("    taxCountryCodes: ").append(toIndentedString(taxCountryCodes)).append("\n");
    sb.append("    totalAmountGreaterThan: ").append(toIndentedString(totalAmountGreaterThan)).append("\n");
    sb.append("    totalAmountLessThan: ").append(toIndentedString(totalAmountLessThan)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("currency_code");
    openapiFields.add("filter_text");
    openapiFields.add("format");
    openapiFields.add("has_note");
    openapiFields.add("invoice_number");
    openapiFields.add("key_or_custom_id");
    openapiFields.add("limit");
    openapiFields.add("offset");
    openapiFields.add("order_date_from");
    openapiFields.add("order_date_to");
    openapiFields.add("original_transaction_key");
    openapiFields.add("sort_reverse");
    openapiFields.add("statuses");
    openapiFields.add("tax_country_code");
    openapiFields.add("tax_country_codes");
    openapiFields.add("total_amount_greater_than");
    openapiFields.add("total_amount_less_than");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ListTransactionsIn
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ListTransactionsIn.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ListTransactionsIn is not found in the empty JSON string", ListTransactionsIn.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ListTransactionsIn.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ListTransactionsIn` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("currency_code") != null && !jsonObj.get("currency_code").isJsonNull()) && !jsonObj.get("currency_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currency_code").toString()));
      }
      if ((jsonObj.get("filter_text") != null && !jsonObj.get("filter_text").isJsonNull()) && !jsonObj.get("filter_text").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `filter_text` to be a primitive type in the JSON string but got `%s`", jsonObj.get("filter_text").toString()));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      if ((jsonObj.get("invoice_number") != null && !jsonObj.get("invoice_number").isJsonNull()) && !jsonObj.get("invoice_number").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `invoice_number` to be a primitive type in the JSON string but got `%s`", jsonObj.get("invoice_number").toString()));
      }
      if ((jsonObj.get("key_or_custom_id") != null && !jsonObj.get("key_or_custom_id").isJsonNull()) && !jsonObj.get("key_or_custom_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `key_or_custom_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("key_or_custom_id").toString()));
      }
      if ((jsonObj.get("order_date_from") != null && !jsonObj.get("order_date_from").isJsonNull()) && !jsonObj.get("order_date_from").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_date_from` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_date_from").toString()));
      }
      if ((jsonObj.get("order_date_to") != null && !jsonObj.get("order_date_to").isJsonNull()) && !jsonObj.get("order_date_to").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `order_date_to` to be a primitive type in the JSON string but got `%s`", jsonObj.get("order_date_to").toString()));
      }
      if ((jsonObj.get("original_transaction_key") != null && !jsonObj.get("original_transaction_key").isJsonNull()) && !jsonObj.get("original_transaction_key").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `original_transaction_key` to be a primitive type in the JSON string but got `%s`", jsonObj.get("original_transaction_key").toString()));
      }
      if ((jsonObj.get("statuses") != null && !jsonObj.get("statuses").isJsonNull()) && !jsonObj.get("statuses").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `statuses` to be a primitive type in the JSON string but got `%s`", jsonObj.get("statuses").toString()));
      }
      if ((jsonObj.get("tax_country_code") != null && !jsonObj.get("tax_country_code").isJsonNull()) && !jsonObj.get("tax_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_code").toString()));
      }
      if ((jsonObj.get("tax_country_codes") != null && !jsonObj.get("tax_country_codes").isJsonNull()) && !jsonObj.get("tax_country_codes").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_country_codes` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_country_codes").toString()));
      }
      if ((jsonObj.get("total_amount_greater_than") != null && !jsonObj.get("total_amount_greater_than").isJsonNull()) && !jsonObj.get("total_amount_greater_than").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_amount_greater_than` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount_greater_than").toString()));
      }
      if ((jsonObj.get("total_amount_less_than") != null && !jsonObj.get("total_amount_less_than").isJsonNull()) && !jsonObj.get("total_amount_less_than").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `total_amount_less_than` to be a primitive type in the JSON string but got `%s`", jsonObj.get("total_amount_less_than").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ListTransactionsIn.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ListTransactionsIn' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ListTransactionsIn> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ListTransactionsIn.class));

       return (TypeAdapter<T>) new TypeAdapter<ListTransactionsIn>() {
           @Override
           public void write(JsonWriter out, ListTransactionsIn value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ListTransactionsIn read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ListTransactionsIn given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ListTransactionsIn
   * @throws IOException if the JSON string is invalid with respect to ListTransactionsIn
   */
  public static ListTransactionsIn fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ListTransactionsIn.class);
  }

  /**
   * Convert an instance of ListTransactionsIn to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

