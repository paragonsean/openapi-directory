/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CountrySchema
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T09:58:16.755158-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CountrySchema {
  public static final String SERIALIZED_NAME_CALLING_CODE = "callingCode";
  @SerializedName(SERIALIZED_NAME_CALLING_CODE)
  private List<String> callingCode = new ArrayList<>();

  public static final String SERIALIZED_NAME_CCA2 = "cca2";
  @SerializedName(SERIALIZED_NAME_CCA2)
  private String cca2;

  public static final String SERIALIZED_NAME_CCA3 = "cca3";
  @SerializedName(SERIALIZED_NAME_CCA3)
  private String cca3;

  public static final String SERIALIZED_NAME_CCN3 = "ccn3";
  @SerializedName(SERIALIZED_NAME_CCN3)
  private String ccn3;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_CODE_LONG = "code_long";
  @SerializedName(SERIALIZED_NAME_CODE_LONG)
  private String codeLong;

  public static final String SERIALIZED_NAME_CODENUM = "codenum";
  @SerializedName(SERIALIZED_NAME_CODENUM)
  private String codenum;

  public static final String SERIALIZED_NAME_CURRENCY = "currency";
  @SerializedName(SERIALIZED_NAME_CURRENCY)
  private List<String> currency = new ArrayList<>();

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAX_NUMBER_COUNTRY_CODE = "tax_number_country_code";
  @SerializedName(SERIALIZED_NAME_TAX_NUMBER_COUNTRY_CODE)
  private String taxNumberCountryCode;

  public static final String SERIALIZED_NAME_TAX_REGION = "tax_region";
  @SerializedName(SERIALIZED_NAME_TAX_REGION)
  private String taxRegion;

  public static final String SERIALIZED_NAME_TAX_SUPPORTED = "tax_supported";
  @SerializedName(SERIALIZED_NAME_TAX_SUPPORTED)
  private Boolean taxSupported;

  public CountrySchema() {
  }

  public CountrySchema callingCode(List<String> callingCode) {
    this.callingCode = callingCode;
    return this;
  }

  public CountrySchema addCallingCodeItem(String callingCodeItem) {
    if (this.callingCode == null) {
      this.callingCode = new ArrayList<>();
    }
    this.callingCode.add(callingCodeItem);
    return this;
  }

  /**
   * List of phone number calling codes.
   * @return callingCode
   */
  @javax.annotation.Nullable
  public List<String> getCallingCode() {
    return callingCode;
  }

  public void setCallingCode(List<String> callingCode) {
    this.callingCode = callingCode;
  }


  public CountrySchema cca2(String cca2) {
    this.cca2 = cca2;
    return this;
  }

  /**
   * Two letter ISO country code.
   * @return cca2
   */
  @javax.annotation.Nullable
  public String getCca2() {
    return cca2;
  }

  public void setCca2(String cca2) {
    this.cca2 = cca2;
  }


  public CountrySchema cca3(String cca3) {
    this.cca3 = cca3;
    return this;
  }

  /**
   * Three letter ISO country code.
   * @return cca3
   */
  @javax.annotation.Nullable
  public String getCca3() {
    return cca3;
  }

  public void setCca3(String cca3) {
    this.cca3 = cca3;
  }


  public CountrySchema ccn3(String ccn3) {
    this.ccn3 = ccn3;
    return this;
  }

  /**
   * Country ISO 3-digit code.
   * @return ccn3
   */
  @javax.annotation.Nullable
  public String getCcn3() {
    return ccn3;
  }

  public void setCcn3(String ccn3) {
    this.ccn3 = ccn3;
  }


  public CountrySchema code(String code) {
    this.code = code;
    return this;
  }

  /**
   * Two letter ISO country code.
   * @return code
   */
  @javax.annotation.Nullable
  public String getCode() {
    return code;
  }

  public void setCode(String code) {
    this.code = code;
  }


  public CountrySchema codeLong(String codeLong) {
    this.codeLong = codeLong;
    return this;
  }

  /**
   * Three letter ISO country code.
   * @return codeLong
   */
  @javax.annotation.Nullable
  public String getCodeLong() {
    return codeLong;
  }

  public void setCodeLong(String codeLong) {
    this.codeLong = codeLong;
  }


  public CountrySchema codenum(String codenum) {
    this.codenum = codenum;
    return this;
  }

  /**
   * Country ISO 3-digit code.
   * @return codenum
   */
  @javax.annotation.Nullable
  public String getCodenum() {
    return codenum;
  }

  public void setCodenum(String codenum) {
    this.codenum = codenum;
  }


  public CountrySchema currency(List<String> currency) {
    this.currency = currency;
    return this;
  }

  public CountrySchema addCurrencyItem(String currencyItem) {
    if (this.currency == null) {
      this.currency = new ArrayList<>();
    }
    this.currency.add(currencyItem);
    return this;
  }

  /**
   * List of currencies.
   * @return currency
   */
  @javax.annotation.Nullable
  public List<String> getCurrency() {
    return currency;
  }

  public void setCurrency(List<String> currency) {
    this.currency = currency;
  }


  public CountrySchema name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Country name.
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public CountrySchema taxNumberCountryCode(String taxNumberCountryCode) {
    this.taxNumberCountryCode = taxNumberCountryCode;
    return this;
  }

  /**
   * VAT number country code. Important for Greece.
   * @return taxNumberCountryCode
   */
  @javax.annotation.Nullable
  public String getTaxNumberCountryCode() {
    return taxNumberCountryCode;
  }

  public void setTaxNumberCountryCode(String taxNumberCountryCode) {
    this.taxNumberCountryCode = taxNumberCountryCode;
  }


  public CountrySchema taxRegion(String taxRegion) {
    this.taxRegion = taxRegion;
    return this;
  }

  /**
   * Tax region code - e.g. EU, US, NO, JP...
   * @return taxRegion
   */
  @javax.annotation.Nullable
  public String getTaxRegion() {
    return taxRegion;
  }

  public void setTaxRegion(String taxRegion) {
    this.taxRegion = taxRegion;
  }


  public CountrySchema taxSupported(Boolean taxSupported) {
    this.taxSupported = taxSupported;
    return this;
  }

  /**
   * True if tax calculation supported for this country.
   * @return taxSupported
   */
  @javax.annotation.Nullable
  public Boolean getTaxSupported() {
    return taxSupported;
  }

  public void setTaxSupported(Boolean taxSupported) {
    this.taxSupported = taxSupported;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CountrySchema countrySchema = (CountrySchema) o;
    return Objects.equals(this.callingCode, countrySchema.callingCode) &&
        Objects.equals(this.cca2, countrySchema.cca2) &&
        Objects.equals(this.cca3, countrySchema.cca3) &&
        Objects.equals(this.ccn3, countrySchema.ccn3) &&
        Objects.equals(this.code, countrySchema.code) &&
        Objects.equals(this.codeLong, countrySchema.codeLong) &&
        Objects.equals(this.codenum, countrySchema.codenum) &&
        Objects.equals(this.currency, countrySchema.currency) &&
        Objects.equals(this.name, countrySchema.name) &&
        Objects.equals(this.taxNumberCountryCode, countrySchema.taxNumberCountryCode) &&
        Objects.equals(this.taxRegion, countrySchema.taxRegion) &&
        Objects.equals(this.taxSupported, countrySchema.taxSupported);
  }

  @Override
  public int hashCode() {
    return Objects.hash(callingCode, cca2, cca3, ccn3, code, codeLong, codenum, currency, name, taxNumberCountryCode, taxRegion, taxSupported);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CountrySchema {\n");
    sb.append("    callingCode: ").append(toIndentedString(callingCode)).append("\n");
    sb.append("    cca2: ").append(toIndentedString(cca2)).append("\n");
    sb.append("    cca3: ").append(toIndentedString(cca3)).append("\n");
    sb.append("    ccn3: ").append(toIndentedString(ccn3)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    codeLong: ").append(toIndentedString(codeLong)).append("\n");
    sb.append("    codenum: ").append(toIndentedString(codenum)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    taxNumberCountryCode: ").append(toIndentedString(taxNumberCountryCode)).append("\n");
    sb.append("    taxRegion: ").append(toIndentedString(taxRegion)).append("\n");
    sb.append("    taxSupported: ").append(toIndentedString(taxSupported)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("callingCode");
    openapiFields.add("cca2");
    openapiFields.add("cca3");
    openapiFields.add("ccn3");
    openapiFields.add("code");
    openapiFields.add("code_long");
    openapiFields.add("codenum");
    openapiFields.add("currency");
    openapiFields.add("name");
    openapiFields.add("tax_number_country_code");
    openapiFields.add("tax_region");
    openapiFields.add("tax_supported");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CountrySchema
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CountrySchema.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CountrySchema is not found in the empty JSON string", CountrySchema.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CountrySchema.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CountrySchema` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("callingCode") != null && !jsonObj.get("callingCode").isJsonNull() && !jsonObj.get("callingCode").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `callingCode` to be an array in the JSON string but got `%s`", jsonObj.get("callingCode").toString()));
      }
      if ((jsonObj.get("cca2") != null && !jsonObj.get("cca2").isJsonNull()) && !jsonObj.get("cca2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cca2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cca2").toString()));
      }
      if ((jsonObj.get("cca3") != null && !jsonObj.get("cca3").isJsonNull()) && !jsonObj.get("cca3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `cca3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("cca3").toString()));
      }
      if ((jsonObj.get("ccn3") != null && !jsonObj.get("ccn3").isJsonNull()) && !jsonObj.get("ccn3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ccn3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ccn3").toString()));
      }
      if ((jsonObj.get("code") != null && !jsonObj.get("code").isJsonNull()) && !jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("code_long") != null && !jsonObj.get("code_long").isJsonNull()) && !jsonObj.get("code_long").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code_long` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code_long").toString()));
      }
      if ((jsonObj.get("codenum") != null && !jsonObj.get("codenum").isJsonNull()) && !jsonObj.get("codenum").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `codenum` to be a primitive type in the JSON string but got `%s`", jsonObj.get("codenum").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("currency") != null && !jsonObj.get("currency").isJsonNull() && !jsonObj.get("currency").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `currency` to be an array in the JSON string but got `%s`", jsonObj.get("currency").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("tax_number_country_code") != null && !jsonObj.get("tax_number_country_code").isJsonNull()) && !jsonObj.get("tax_number_country_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_number_country_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_number_country_code").toString()));
      }
      if ((jsonObj.get("tax_region") != null && !jsonObj.get("tax_region").isJsonNull()) && !jsonObj.get("tax_region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tax_region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tax_region").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CountrySchema.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CountrySchema' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CountrySchema> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CountrySchema.class));

       return (TypeAdapter<T>) new TypeAdapter<CountrySchema>() {
           @Override
           public void write(JsonWriter out, CountrySchema value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CountrySchema read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CountrySchema given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CountrySchema
   * @throws IOException if the JSON string is invalid with respect to CountrySchema
   */
  public static CountrySchema fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CountrySchema.class);
  }

  /**
   * Convert an instance of CountrySchema to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

