/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CalculateSimpleTaxOut;
import org.openapitools.client.model.CalculateTaxIn;
import org.openapitools.client.model.CalculateTaxLocationOut;
import org.openapitools.client.model.CalculateTaxOut;
import org.openapitools.client.model.ValidateTaxNumberOut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TaxApi
 */
@Disabled
public class TaxApiTest {

    private final TaxApi api = new TaxApi();

    /**
     * Simple tax
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateSimpleTaxTest() throws ApiException {
        String currencyCode = null;
        String productType = null;
        String invoiceAddressCity = null;
        String buyerCreditCardPrefix = null;
        String invoiceAddressRegion = null;
        BigDecimal unitPrice = null;
        BigDecimal quantity = null;
        String buyerTaxNumber = null;
        String forceCountryCode = null;
        String orderDate = null;
        BigDecimal amount = null;
        String billingCountryCode = null;
        String invoiceAddressPostalCode = null;
        BigDecimal totalAmount = null;
        Boolean taxDeducted = null;
        CalculateSimpleTaxOut response = api.calculateSimpleTax(currencyCode, productType, invoiceAddressCity, buyerCreditCardPrefix, invoiceAddressRegion, unitPrice, quantity, buyerTaxNumber, forceCountryCode, orderDate, amount, billingCountryCode, invoiceAddressPostalCode, totalAmount, taxDeducted);
        // TODO: test validations
    }

    /**
     * Calculate tax
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateTaxTest() throws ApiException {
        CalculateTaxIn input = null;
        CalculateTaxOut response = api.calculateTax(input);
        // TODO: test validations
    }

    /**
     * Calculate location
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void calculateTaxLocationTest() throws ApiException {
        String billingCountryCode = null;
        String buyerCreditCardPrefix = null;
        CalculateTaxLocationOut response = api.calculateTaxLocation(billingCountryCode, buyerCreditCardPrefix);
        // TODO: test validations
    }

    /**
     * Validate VAT number
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void validateTaxNumberTest() throws ApiException {
        String taxNumber = null;
        String countryCode = null;
        ValidateTaxNumberOut response = api.validateTaxNumber(taxNumber, countryCode);
        // TODO: test validations
    }

}
