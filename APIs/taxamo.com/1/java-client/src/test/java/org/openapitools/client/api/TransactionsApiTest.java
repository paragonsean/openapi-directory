/*
 * Taxamo
 * Taxamoâ€™s elegant suite of APIs and comprehensive reporting dashboard enables digital merchants to easily comply with EU regulatory requirements on tax calculation, evidence collection, tax return creation and data storage.
 *
 * The version of the OpenAPI document: 1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CancelTransactionOut;
import org.openapitools.client.model.ConfirmTransactionIn;
import org.openapitools.client.model.ConfirmTransactionOut;
import org.openapitools.client.model.CreateTransactionIn;
import org.openapitools.client.model.CreateTransactionOut;
import org.openapitools.client.model.GetTransactionOut;
import org.openapitools.client.model.ListTransactionsOut;
import org.openapitools.client.model.UnconfirmTransactionIn;
import org.openapitools.client.model.UnconfirmTransactionOut;
import org.openapitools.client.model.UpdateTransactionIn;
import org.openapitools.client.model.UpdateTransactionOut;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TransactionsApi
 */
@Disabled
public class TransactionsApiTest {

    private final TransactionsApi api = new TransactionsApi();

    /**
     * Delete transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void cancelTransactionTest() throws ApiException {
        String key = null;
        CancelTransactionOut response = api.cancelTransaction(key);
        // TODO: test validations
    }

    /**
     * Confirm transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void confirmTransactionTest() throws ApiException {
        String key = null;
        ConfirmTransactionIn input = null;
        ConfirmTransactionOut response = api.confirmTransaction(key, input);
        // TODO: test validations
    }

    /**
     * Store transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTransactionTest() throws ApiException {
        CreateTransactionIn input = null;
        CreateTransactionOut response = api.createTransaction(input);
        // TODO: test validations
    }

    /**
     * Retrieve transaction data.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTransactionTest() throws ApiException {
        String key = null;
        GetTransactionOut response = api.getTransaction(key);
        // TODO: test validations
    }

    /**
     * Browse transactions
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listTransactionsTest() throws ApiException {
        String filterText = null;
        Integer offset = null;
        Boolean hasNote = null;
        String keyOrCustomId = null;
        String currencyCode = null;
        String orderDateTo = null;
        Boolean sortReverse = null;
        Integer limit = null;
        String invoiceNumber = null;
        String taxCountryCodes = null;
        String statuses = null;
        String originalTransactionKey = null;
        String orderDateFrom = null;
        String totalAmountGreaterThan = null;
        String format = null;
        String totalAmountLessThan = null;
        String taxCountryCode = null;
        ListTransactionsOut response = api.listTransactions(filterText, offset, hasNote, keyOrCustomId, currencyCode, orderDateTo, sortReverse, limit, invoiceNumber, taxCountryCodes, statuses, originalTransactionKey, orderDateFrom, totalAmountGreaterThan, format, totalAmountLessThan, taxCountryCode);
        // TODO: test validations
    }

    /**
     * Un-confirm the transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void unconfirmTransactionTest() throws ApiException {
        String key = null;
        UnconfirmTransactionIn input = null;
        UnconfirmTransactionOut response = api.unconfirmTransaction(key, input);
        // TODO: test validations
    }

    /**
     * Update transaction
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateTransactionTest() throws ApiException {
        String key = null;
        UpdateTransactionIn input = null;
        UpdateTransactionOut response = api.updateTransaction(key, input);
        // TODO: test validations
    }

}
