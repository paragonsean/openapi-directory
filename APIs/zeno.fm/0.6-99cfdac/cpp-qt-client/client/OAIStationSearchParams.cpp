/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStationSearchParams.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStationSearchParams::OAIStationSearchParams(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStationSearchParams::OAIStationSearchParams() {
    this->initializeModel();
}

OAIStationSearchParams::~OAIStationSearchParams() {}

void OAIStationSearchParams::initializeModel() {

    m_filters_isSet = false;
    m_filters_isValid = false;

    m_hits_per_page_isSet = false;
    m_hits_per_page_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAIStationSearchParams::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStationSearchParams::fromJsonObject(QJsonObject json) {

    m_filters_isValid = ::OpenAPI::fromJsonValue(m_filters, json[QString("filters")]);
    m_filters_isSet = !json[QString("filters")].isNull() && m_filters_isValid;

    m_hits_per_page_isValid = ::OpenAPI::fromJsonValue(m_hits_per_page, json[QString("hitsPerPage")]);
    m_hits_per_page_isSet = !json[QString("hitsPerPage")].isNull() && m_hits_per_page_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAIStationSearchParams::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStationSearchParams::asJsonObject() const {
    QJsonObject obj;
    if (m_filters.isSet()) {
        obj.insert(QString("filters"), ::OpenAPI::toJsonValue(m_filters));
    }
    if (m_hits_per_page_isSet) {
        obj.insert(QString("hitsPerPage"), ::OpenAPI::toJsonValue(m_hits_per_page));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAIStationFilters OAIStationSearchParams::getFilters() const {
    return m_filters;
}
void OAIStationSearchParams::setFilters(const OAIStationFilters &filters) {
    m_filters = filters;
    m_filters_isSet = true;
}

bool OAIStationSearchParams::is_filters_Set() const{
    return m_filters_isSet;
}

bool OAIStationSearchParams::is_filters_Valid() const{
    return m_filters_isValid;
}

qint32 OAIStationSearchParams::getHitsPerPage() const {
    return m_hits_per_page;
}
void OAIStationSearchParams::setHitsPerPage(const qint32 &hits_per_page) {
    m_hits_per_page = hits_per_page;
    m_hits_per_page_isSet = true;
}

bool OAIStationSearchParams::is_hits_per_page_Set() const{
    return m_hits_per_page_isSet;
}

bool OAIStationSearchParams::is_hits_per_page_Valid() const{
    return m_hits_per_page_isValid;
}

qint32 OAIStationSearchParams::getPage() const {
    return m_page;
}
void OAIStationSearchParams::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAIStationSearchParams::is_page_Set() const{
    return m_page_isSet;
}

bool OAIStationSearchParams::is_page_Valid() const{
    return m_page_isValid;
}

QString OAIStationSearchParams::getQuery() const {
    return m_query;
}
void OAIStationSearchParams::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAIStationSearchParams::is_query_Set() const{
    return m_query_isSet;
}

bool OAIStationSearchParams::is_query_Valid() const{
    return m_query_isValid;
}

bool OAIStationSearchParams::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filters.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hits_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStationSearchParams::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
