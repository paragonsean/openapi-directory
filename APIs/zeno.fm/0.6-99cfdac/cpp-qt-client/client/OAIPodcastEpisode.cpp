/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastEpisode.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastEpisode::OAIPodcastEpisode(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastEpisode::OAIPodcastEpisode() {
    this->initializeModel();
}

OAIPodcastEpisode::~OAIPodcastEpisode() {}

void OAIPodcastEpisode::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_episode_isSet = false;
    m_episode_isValid = false;

    m_episode_type_isSet = false;
    m_episode_type_isValid = false;

    m_r_explicit_isSet = false;
    m_r_explicit_isValid = false;

    m_file_url_isSet = false;
    m_file_url_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_publish_date_isSet = false;
    m_publish_date_isValid = false;

    m_season_isSet = false;
    m_season_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPodcastEpisode::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastEpisode::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_episode_isValid = ::OpenAPI::fromJsonValue(m_episode, json[QString("episode")]);
    m_episode_isSet = !json[QString("episode")].isNull() && m_episode_isValid;

    m_episode_type_isValid = ::OpenAPI::fromJsonValue(m_episode_type, json[QString("episodeType")]);
    m_episode_type_isSet = !json[QString("episodeType")].isNull() && m_episode_type_isValid;

    m_r_explicit_isValid = ::OpenAPI::fromJsonValue(m_r_explicit, json[QString("explicit")]);
    m_r_explicit_isSet = !json[QString("explicit")].isNull() && m_r_explicit_isValid;

    m_file_url_isValid = ::OpenAPI::fromJsonValue(m_file_url, json[QString("fileUrl")]);
    m_file_url_isSet = !json[QString("fileUrl")].isNull() && m_file_url_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_publish_date_isValid = ::OpenAPI::fromJsonValue(m_publish_date, json[QString("publishDate")]);
    m_publish_date_isSet = !json[QString("publishDate")].isNull() && m_publish_date_isValid;

    m_season_isValid = ::OpenAPI::fromJsonValue(m_season, json[QString("season")]);
    m_season_isSet = !json[QString("season")].isNull() && m_season_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPodcastEpisode::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastEpisode::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_episode_isSet) {
        obj.insert(QString("episode"), ::OpenAPI::toJsonValue(m_episode));
    }
    if (m_episode_type_isSet) {
        obj.insert(QString("episodeType"), ::OpenAPI::toJsonValue(m_episode_type));
    }
    if (m_r_explicit_isSet) {
        obj.insert(QString("explicit"), ::OpenAPI::toJsonValue(m_r_explicit));
    }
    if (m_file_url_isSet) {
        obj.insert(QString("fileUrl"), ::OpenAPI::toJsonValue(m_file_url));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_publish_date_isSet) {
        obj.insert(QString("publishDate"), ::OpenAPI::toJsonValue(m_publish_date));
    }
    if (m_season_isSet) {
        obj.insert(QString("season"), ::OpenAPI::toJsonValue(m_season));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPodcastEpisode::getAuthor() const {
    return m_author;
}
void OAIPodcastEpisode::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPodcastEpisode::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPodcastEpisode::is_author_Valid() const{
    return m_author_isValid;
}

bool OAIPodcastEpisode::isBlock() const {
    return m_block;
}
void OAIPodcastEpisode::setBlock(const bool &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIPodcastEpisode::is_block_Set() const{
    return m_block_isSet;
}

bool OAIPodcastEpisode::is_block_Valid() const{
    return m_block_isValid;
}

QString OAIPodcastEpisode::getDescription() const {
    return m_description;
}
void OAIPodcastEpisode::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPodcastEpisode::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPodcastEpisode::is_description_Valid() const{
    return m_description_isValid;
}

qint64 OAIPodcastEpisode::getDuration() const {
    return m_duration;
}
void OAIPodcastEpisode::setDuration(const qint64 &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIPodcastEpisode::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIPodcastEpisode::is_duration_Valid() const{
    return m_duration_isValid;
}

qint64 OAIPodcastEpisode::getEpisode() const {
    return m_episode;
}
void OAIPodcastEpisode::setEpisode(const qint64 &episode) {
    m_episode = episode;
    m_episode_isSet = true;
}

bool OAIPodcastEpisode::is_episode_Set() const{
    return m_episode_isSet;
}

bool OAIPodcastEpisode::is_episode_Valid() const{
    return m_episode_isValid;
}

QString OAIPodcastEpisode::getEpisodeType() const {
    return m_episode_type;
}
void OAIPodcastEpisode::setEpisodeType(const QString &episode_type) {
    m_episode_type = episode_type;
    m_episode_type_isSet = true;
}

bool OAIPodcastEpisode::is_episode_type_Set() const{
    return m_episode_type_isSet;
}

bool OAIPodcastEpisode::is_episode_type_Valid() const{
    return m_episode_type_isValid;
}

bool OAIPodcastEpisode::isRExplicit() const {
    return m_r_explicit;
}
void OAIPodcastEpisode::setRExplicit(const bool &r_explicit) {
    m_r_explicit = r_explicit;
    m_r_explicit_isSet = true;
}

bool OAIPodcastEpisode::is_r_explicit_Set() const{
    return m_r_explicit_isSet;
}

bool OAIPodcastEpisode::is_r_explicit_Valid() const{
    return m_r_explicit_isValid;
}

QString OAIPodcastEpisode::getFileUrl() const {
    return m_file_url;
}
void OAIPodcastEpisode::setFileUrl(const QString &file_url) {
    m_file_url = file_url;
    m_file_url_isSet = true;
}

bool OAIPodcastEpisode::is_file_url_Set() const{
    return m_file_url_isSet;
}

bool OAIPodcastEpisode::is_file_url_Valid() const{
    return m_file_url_isValid;
}

QString OAIPodcastEpisode::getImage() const {
    return m_image;
}
void OAIPodcastEpisode::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPodcastEpisode::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPodcastEpisode::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPodcastEpisode::getKey() const {
    return m_key;
}
void OAIPodcastEpisode::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPodcastEpisode::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPodcastEpisode::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIPodcastEpisode::getLink() const {
    return m_link;
}
void OAIPodcastEpisode::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPodcastEpisode::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPodcastEpisode::is_link_Valid() const{
    return m_link_isValid;
}

QDateTime OAIPodcastEpisode::getPublishDate() const {
    return m_publish_date;
}
void OAIPodcastEpisode::setPublishDate(const QDateTime &publish_date) {
    m_publish_date = publish_date;
    m_publish_date_isSet = true;
}

bool OAIPodcastEpisode::is_publish_date_Set() const{
    return m_publish_date_isSet;
}

bool OAIPodcastEpisode::is_publish_date_Valid() const{
    return m_publish_date_isValid;
}

qint64 OAIPodcastEpisode::getSeason() const {
    return m_season;
}
void OAIPodcastEpisode::setSeason(const qint64 &season) {
    m_season = season;
    m_season_isSet = true;
}

bool OAIPodcastEpisode::is_season_Set() const{
    return m_season_isSet;
}

bool OAIPodcastEpisode::is_season_Valid() const{
    return m_season_isValid;
}

qint64 OAIPodcastEpisode::getSize() const {
    return m_size;
}
void OAIPodcastEpisode::setSize(const qint64 &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIPodcastEpisode::is_size_Set() const{
    return m_size_isSet;
}

bool OAIPodcastEpisode::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIPodcastEpisode::getSubtitle() const {
    return m_subtitle;
}
void OAIPodcastEpisode::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIPodcastEpisode::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIPodcastEpisode::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAIPodcastEpisode::getSummary() const {
    return m_summary;
}
void OAIPodcastEpisode::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPodcastEpisode::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPodcastEpisode::is_summary_Valid() const{
    return m_summary_isValid;
}

QSet<QString> OAIPodcastEpisode::getTags() const {
    return m_tags;
}
void OAIPodcastEpisode::setTags(const QSet<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIPodcastEpisode::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIPodcastEpisode::is_tags_Valid() const{
    return m_tags_isValid;
}

QString OAIPodcastEpisode::getTitle() const {
    return m_title;
}
void OAIPodcastEpisode::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPodcastEpisode::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPodcastEpisode::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPodcastEpisode::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_episode_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_publish_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_season_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastEpisode::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_description_isValid && m_publish_date_isValid && m_summary_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
