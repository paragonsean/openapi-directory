/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastCategory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastCategory::OAIPodcastCategory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastCategory::OAIPodcastCategory() {
    this->initializeModel();
}

OAIPodcastCategory::~OAIPodcastCategory() {}

void OAIPodcastCategory::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_parent_isSet = false;
    m_parent_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAIPodcastCategory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastCategory::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_parent_isValid = ::OpenAPI::fromJsonValue(m_parent, json[QString("parent")]);
    m_parent_isSet = !json[QString("parent")].isNull() && m_parent_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAIPodcastCategory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastCategory::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_parent_isSet) {
        obj.insert(QString("parent"), ::OpenAPI::toJsonValue(m_parent));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAIPodcastCategory::getId() const {
    return m_id;
}
void OAIPodcastCategory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIPodcastCategory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIPodcastCategory::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIPodcastCategory::getParent() const {
    return m_parent;
}
void OAIPodcastCategory::setParent(const QString &parent) {
    m_parent = parent;
    m_parent_isSet = true;
}

bool OAIPodcastCategory::is_parent_Set() const{
    return m_parent_isSet;
}

bool OAIPodcastCategory::is_parent_Valid() const{
    return m_parent_isValid;
}

QString OAIPodcastCategory::getText() const {
    return m_text;
}
void OAIPodcastCategory::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAIPodcastCategory::is_text_Set() const{
    return m_text_isSet;
}

bool OAIPodcastCategory::is_text_Valid() const{
    return m_text_isValid;
}

bool OAIPodcastCategory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastCategory::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
