/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcast.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcast::OAIPodcast(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcast::OAIPodcast() {
    this->initializeModel();
}

OAIPodcast::~OAIPodcast() {}

void OAIPodcast::initializeModel() {

    m_author_isSet = false;
    m_author_isValid = false;

    m_block_isSet = false;
    m_block_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_copyright_isSet = false;
    m_copyright_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_r_explicit_isSet = false;
    m_r_explicit_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_link_isSet = false;
    m_link_isValid = false;

    m_owner_email_isSet = false;
    m_owner_email_isValid = false;

    m_owner_name_isSet = false;
    m_owner_name_isValid = false;

    m_show_type_isSet = false;
    m_show_type_isValid = false;

    m_subtitle_isSet = false;
    m_subtitle_isValid = false;

    m_summary_isSet = false;
    m_summary_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIPodcast::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcast::fromJsonObject(QJsonObject json) {

    m_author_isValid = ::OpenAPI::fromJsonValue(m_author, json[QString("author")]);
    m_author_isSet = !json[QString("author")].isNull() && m_author_isValid;

    m_block_isValid = ::OpenAPI::fromJsonValue(m_block, json[QString("block")]);
    m_block_isSet = !json[QString("block")].isNull() && m_block_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_copyright_isValid = ::OpenAPI::fromJsonValue(m_copyright, json[QString("copyright")]);
    m_copyright_isSet = !json[QString("copyright")].isNull() && m_copyright_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_r_explicit_isValid = ::OpenAPI::fromJsonValue(m_r_explicit, json[QString("explicit")]);
    m_r_explicit_isSet = !json[QString("explicit")].isNull() && m_r_explicit_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_link_isValid = ::OpenAPI::fromJsonValue(m_link, json[QString("link")]);
    m_link_isSet = !json[QString("link")].isNull() && m_link_isValid;

    m_owner_email_isValid = ::OpenAPI::fromJsonValue(m_owner_email, json[QString("ownerEmail")]);
    m_owner_email_isSet = !json[QString("ownerEmail")].isNull() && m_owner_email_isValid;

    m_owner_name_isValid = ::OpenAPI::fromJsonValue(m_owner_name, json[QString("ownerName")]);
    m_owner_name_isSet = !json[QString("ownerName")].isNull() && m_owner_name_isValid;

    m_show_type_isValid = ::OpenAPI::fromJsonValue(m_show_type, json[QString("showType")]);
    m_show_type_isSet = !json[QString("showType")].isNull() && m_show_type_isValid;

    m_subtitle_isValid = ::OpenAPI::fromJsonValue(m_subtitle, json[QString("subtitle")]);
    m_subtitle_isSet = !json[QString("subtitle")].isNull() && m_subtitle_isValid;

    m_summary_isValid = ::OpenAPI::fromJsonValue(m_summary, json[QString("summary")]);
    m_summary_isSet = !json[QString("summary")].isNull() && m_summary_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIPodcast::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcast::asJsonObject() const {
    QJsonObject obj;
    if (m_author_isSet) {
        obj.insert(QString("author"), ::OpenAPI::toJsonValue(m_author));
    }
    if (m_block_isSet) {
        obj.insert(QString("block"), ::OpenAPI::toJsonValue(m_block));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_copyright_isSet) {
        obj.insert(QString("copyright"), ::OpenAPI::toJsonValue(m_copyright));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_r_explicit_isSet) {
        obj.insert(QString("explicit"), ::OpenAPI::toJsonValue(m_r_explicit));
    }
    if (m_image_isSet) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_link_isSet) {
        obj.insert(QString("link"), ::OpenAPI::toJsonValue(m_link));
    }
    if (m_owner_email_isSet) {
        obj.insert(QString("ownerEmail"), ::OpenAPI::toJsonValue(m_owner_email));
    }
    if (m_owner_name_isSet) {
        obj.insert(QString("ownerName"), ::OpenAPI::toJsonValue(m_owner_name));
    }
    if (m_show_type_isSet) {
        obj.insert(QString("showType"), ::OpenAPI::toJsonValue(m_show_type));
    }
    if (m_subtitle_isSet) {
        obj.insert(QString("subtitle"), ::OpenAPI::toJsonValue(m_subtitle));
    }
    if (m_summary_isSet) {
        obj.insert(QString("summary"), ::OpenAPI::toJsonValue(m_summary));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

QString OAIPodcast::getAuthor() const {
    return m_author;
}
void OAIPodcast::setAuthor(const QString &author) {
    m_author = author;
    m_author_isSet = true;
}

bool OAIPodcast::is_author_Set() const{
    return m_author_isSet;
}

bool OAIPodcast::is_author_Valid() const{
    return m_author_isValid;
}

bool OAIPodcast::isBlock() const {
    return m_block;
}
void OAIPodcast::setBlock(const bool &block) {
    m_block = block;
    m_block_isSet = true;
}

bool OAIPodcast::is_block_Set() const{
    return m_block_isSet;
}

bool OAIPodcast::is_block_Valid() const{
    return m_block_isValid;
}

QSet<QString> OAIPodcast::getCategories() const {
    return m_categories;
}
void OAIPodcast::setCategories(const QSet<QString> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIPodcast::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIPodcast::is_categories_Valid() const{
    return m_categories_isValid;
}

QString OAIPodcast::getCopyright() const {
    return m_copyright;
}
void OAIPodcast::setCopyright(const QString &copyright) {
    m_copyright = copyright;
    m_copyright_isSet = true;
}

bool OAIPodcast::is_copyright_Set() const{
    return m_copyright_isSet;
}

bool OAIPodcast::is_copyright_Valid() const{
    return m_copyright_isValid;
}

QString OAIPodcast::getCountry() const {
    return m_country;
}
void OAIPodcast::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPodcast::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPodcast::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIPodcast::getDescription() const {
    return m_description;
}
void OAIPodcast::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIPodcast::is_description_Set() const{
    return m_description_isSet;
}

bool OAIPodcast::is_description_Valid() const{
    return m_description_isValid;
}

bool OAIPodcast::isRExplicit() const {
    return m_r_explicit;
}
void OAIPodcast::setRExplicit(const bool &r_explicit) {
    m_r_explicit = r_explicit;
    m_r_explicit_isSet = true;
}

bool OAIPodcast::is_r_explicit_Set() const{
    return m_r_explicit_isSet;
}

bool OAIPodcast::is_r_explicit_Valid() const{
    return m_r_explicit_isValid;
}

QString OAIPodcast::getImage() const {
    return m_image;
}
void OAIPodcast::setImage(const QString &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIPodcast::is_image_Set() const{
    return m_image_isSet;
}

bool OAIPodcast::is_image_Valid() const{
    return m_image_isValid;
}

QString OAIPodcast::getKey() const {
    return m_key;
}
void OAIPodcast::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIPodcast::is_key_Set() const{
    return m_key_isSet;
}

bool OAIPodcast::is_key_Valid() const{
    return m_key_isValid;
}

QSet<QString> OAIPodcast::getKeywords() const {
    return m_keywords;
}
void OAIPodcast::setKeywords(const QSet<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIPodcast::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIPodcast::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIPodcast::getLanguage() const {
    return m_language;
}
void OAIPodcast::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPodcast::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPodcast::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIPodcast::getLink() const {
    return m_link;
}
void OAIPodcast::setLink(const QString &link) {
    m_link = link;
    m_link_isSet = true;
}

bool OAIPodcast::is_link_Set() const{
    return m_link_isSet;
}

bool OAIPodcast::is_link_Valid() const{
    return m_link_isValid;
}

QString OAIPodcast::getOwnerEmail() const {
    return m_owner_email;
}
void OAIPodcast::setOwnerEmail(const QString &owner_email) {
    m_owner_email = owner_email;
    m_owner_email_isSet = true;
}

bool OAIPodcast::is_owner_email_Set() const{
    return m_owner_email_isSet;
}

bool OAIPodcast::is_owner_email_Valid() const{
    return m_owner_email_isValid;
}

QString OAIPodcast::getOwnerName() const {
    return m_owner_name;
}
void OAIPodcast::setOwnerName(const QString &owner_name) {
    m_owner_name = owner_name;
    m_owner_name_isSet = true;
}

bool OAIPodcast::is_owner_name_Set() const{
    return m_owner_name_isSet;
}

bool OAIPodcast::is_owner_name_Valid() const{
    return m_owner_name_isValid;
}

QString OAIPodcast::getShowType() const {
    return m_show_type;
}
void OAIPodcast::setShowType(const QString &show_type) {
    m_show_type = show_type;
    m_show_type_isSet = true;
}

bool OAIPodcast::is_show_type_Set() const{
    return m_show_type_isSet;
}

bool OAIPodcast::is_show_type_Valid() const{
    return m_show_type_isValid;
}

QString OAIPodcast::getSubtitle() const {
    return m_subtitle;
}
void OAIPodcast::setSubtitle(const QString &subtitle) {
    m_subtitle = subtitle;
    m_subtitle_isSet = true;
}

bool OAIPodcast::is_subtitle_Set() const{
    return m_subtitle_isSet;
}

bool OAIPodcast::is_subtitle_Valid() const{
    return m_subtitle_isValid;
}

QString OAIPodcast::getSummary() const {
    return m_summary;
}
void OAIPodcast::setSummary(const QString &summary) {
    m_summary = summary;
    m_summary_isSet = true;
}

bool OAIPodcast::is_summary_Set() const{
    return m_summary_isSet;
}

bool OAIPodcast::is_summary_Valid() const{
    return m_summary_isValid;
}

QString OAIPodcast::getTitle() const {
    return m_title;
}
void OAIPodcast::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIPodcast::is_title_Set() const{
    return m_title_isSet;
}

bool OAIPodcast::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIPodcast::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_author_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_block_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_copyright_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_r_explicit_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_link_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_owner_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subtitle_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_summary_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcast::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_categories_isValid && m_description_isValid && m_language_isValid && m_summary_isValid && m_title_isValid && true;
}

} // namespace OpenAPI
