/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIStation.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIStation::OAIStation(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIStation::OAIStation() {
    this->initializeModel();
}

OAIStation::~OAIStation() {}

void OAIStation::initializeModel() {

    m_city_isSet = false;
    m_city_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_genre_isSet = false;
    m_genre_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_stream_isSet = false;
    m_stream_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIStation::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIStation::fromJsonObject(QJsonObject json) {

    m_city_isValid = ::OpenAPI::fromJsonValue(m_city, json[QString("city")]);
    m_city_isSet = !json[QString("city")].isNull() && m_city_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_genre_isValid = ::OpenAPI::fromJsonValue(m_genre, json[QString("genre")]);
    m_genre_isSet = !json[QString("genre")].isNull() && m_genre_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_stream_isValid = ::OpenAPI::fromJsonValue(m_stream, json[QString("stream")]);
    m_stream_isSet = !json[QString("stream")].isNull() && m_stream_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIStation::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIStation::asJsonObject() const {
    QJsonObject obj;
    if (m_city_isSet) {
        obj.insert(QString("city"), ::OpenAPI::toJsonValue(m_city));
    }
    if (m_country_isSet) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_genre_isSet) {
        obj.insert(QString("genre"), ::OpenAPI::toJsonValue(m_genre));
    }
    if (m_key_isSet) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_stream_isSet) {
        obj.insert(QString("stream"), ::OpenAPI::toJsonValue(m_stream));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIStation::getCity() const {
    return m_city;
}
void OAIStation::setCity(const QString &city) {
    m_city = city;
    m_city_isSet = true;
}

bool OAIStation::is_city_Set() const{
    return m_city_isSet;
}

bool OAIStation::is_city_Valid() const{
    return m_city_isValid;
}

QString OAIStation::getCountry() const {
    return m_country;
}
void OAIStation::setCountry(const QString &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIStation::is_country_Set() const{
    return m_country_isSet;
}

bool OAIStation::is_country_Valid() const{
    return m_country_isValid;
}

QString OAIStation::getDescription() const {
    return m_description;
}
void OAIStation::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIStation::is_description_Set() const{
    return m_description_isSet;
}

bool OAIStation::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIStation::getGenre() const {
    return m_genre;
}
void OAIStation::setGenre(const QString &genre) {
    m_genre = genre;
    m_genre_isSet = true;
}

bool OAIStation::is_genre_Set() const{
    return m_genre_isSet;
}

bool OAIStation::is_genre_Valid() const{
    return m_genre_isValid;
}

QString OAIStation::getKey() const {
    return m_key;
}
void OAIStation::setKey(const QString &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIStation::is_key_Set() const{
    return m_key_isSet;
}

bool OAIStation::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIStation::getLanguage() const {
    return m_language;
}
void OAIStation::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIStation::is_language_Set() const{
    return m_language_isSet;
}

bool OAIStation::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIStation::getLogo() const {
    return m_logo;
}
void OAIStation::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIStation::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIStation::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIStation::getName() const {
    return m_name;
}
void OAIStation::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIStation::is_name_Set() const{
    return m_name_isSet;
}

bool OAIStation::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIStation::getStream() const {
    return m_stream;
}
void OAIStation::setStream(const QString &stream) {
    m_stream = stream;
    m_stream_isSet = true;
}

bool OAIStation::is_stream_Set() const{
    return m_stream_isSet;
}

bool OAIStation::is_stream_Valid() const{
    return m_stream_isValid;
}

QString OAIStation::getWebsite() const {
    return m_website;
}
void OAIStation::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIStation::is_website_Set() const{
    return m_website_isSet;
}

bool OAIStation::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIStation::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_city_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_country_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genre_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_stream_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIStation::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
