/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIPodcastFilters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIPodcastFilters::OAIPodcastFilters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIPodcastFilters::OAIPodcastFilters() {
    this->initializeModel();
}

OAIPodcastFilters::~OAIPodcastFilters() {}

void OAIPodcastFilters::initializeModel() {

    m_category_isSet = false;
    m_category_isValid = false;

    m_country_isSet = false;
    m_country_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_podcast_type_isSet = false;
    m_podcast_type_isValid = false;
}

void OAIPodcastFilters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIPodcastFilters::fromJsonObject(QJsonObject json) {

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_podcast_type_isValid = ::OpenAPI::fromJsonValue(m_podcast_type, json[QString("podcastType")]);
    m_podcast_type_isSet = !json[QString("podcastType")].isNull() && m_podcast_type_isValid;
}

QString OAIPodcastFilters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIPodcastFilters::asJsonObject() const {
    QJsonObject obj;
    if (m_category.size() > 0) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_country.size() > 0) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_language.size() > 0) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_podcast_type_isSet) {
        obj.insert(QString("podcastType"), ::OpenAPI::toJsonValue(m_podcast_type));
    }
    return obj;
}

QSet<QString> OAIPodcastFilters::getCategory() const {
    return m_category;
}
void OAIPodcastFilters::setCategory(const QSet<QString> &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAIPodcastFilters::is_category_Set() const{
    return m_category_isSet;
}

bool OAIPodcastFilters::is_category_Valid() const{
    return m_category_isValid;
}

QSet<QString> OAIPodcastFilters::getCountry() const {
    return m_country;
}
void OAIPodcastFilters::setCountry(const QSet<QString> &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAIPodcastFilters::is_country_Set() const{
    return m_country_isSet;
}

bool OAIPodcastFilters::is_country_Valid() const{
    return m_country_isValid;
}

QSet<QString> OAIPodcastFilters::getLanguage() const {
    return m_language;
}
void OAIPodcastFilters::setLanguage(const QSet<QString> &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIPodcastFilters::is_language_Set() const{
    return m_language_isSet;
}

bool OAIPodcastFilters::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIPodcastFilters::getPodcastType() const {
    return m_podcast_type;
}
void OAIPodcastFilters::setPodcastType(const QString &podcast_type) {
    m_podcast_type = podcast_type;
    m_podcast_type_isSet = true;
}

bool OAIPodcastFilters::is_podcast_type_Set() const{
    return m_podcast_type_isSet;
}

bool OAIPodcastFilters::is_podcast_type_Valid() const{
    return m_podcast_type_isValid;
}

bool OAIPodcastFilters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_category.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_country.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_podcast_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIPodcastFilters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
