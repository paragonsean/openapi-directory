/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAPIV2Api_H
#define OAI_OAIAPIV2Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICountry.h"
#include "OAIHttpFileElement.h"
#include "OAILanguage.h"
#include "OAIPodcast.h"
#include "OAIPodcastCategory.h"
#include "OAIPodcastEpisode.h"
#include "OAIPodcastEpisodeList.h"
#include "OAIPodcastSearchParams.h"
#include "OAIPodcastSearchResults.h"
#include "OAIStationGenre.h"
#include "OAIStationList.h"
#include "OAIStationSearchParams.h"
#include "OAIStationSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAPIV2Api : public QObject {
    Q_OBJECT

public:
    OAIAPIV2Api(const int timeOut = 0);
    ~OAIAPIV2Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  file_logo OAIHttpFileElement [required]
    * @param[in]  podcast OAIPodcast [required]
    */
    virtual void createPodcast(const OAIHttpFileElement &file_logo, const OAIPodcast &podcast);

    /**
    * @param[in]  podcast_key QString [required]
    * @param[in]  episode OAIPodcastEpisode [required]
    * @param[in]  file_logo OAIHttpFileElement [required]
    * @param[in]  file_media OAIHttpFileElement [required]
    */
    virtual void createPodcastEpisode(const QString &podcast_key, const OAIPodcastEpisode &episode, const OAIHttpFileElement &file_logo, const OAIHttpFileElement &file_media);

    /**
    * @param[in]  podcast_key QString [required]
    */
    virtual void deletePodcast(const QString &podcast_key);

    /**
    * @param[in]  podcast_key QString [required]
    * @param[in]  episode_key QString [required]
    */
    virtual void deletePodcast1(const QString &podcast_key, const QString &episode_key);

    /**
    * @param[in]  page QString [optional]
    * @param[in]  hits_per_page QString [optional]
    */
    virtual void getPartnerAggregatorStations(const ::OpenAPI::OptionalParam<QString> &page = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hits_per_page = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  podcast_key QString [required]
    */
    virtual void getPodcast(const QString &podcast_key);


    virtual void getPodcastCategories();


    virtual void getPodcastCountries();

    /**
    * @param[in]  podcast_key QString [required]
    * @param[in]  episode_key QString [required]
    */
    virtual void getPodcastEpisode(const QString &podcast_key, const QString &episode_key);

    /**
    * @param[in]  podcast_key QString [required]
    * @param[in]  limit QString [optional]
    * @param[in]  offset QString [optional]
    */
    virtual void getPodcastEpisodes(const QString &podcast_key, const ::OpenAPI::OptionalParam<QString> &limit = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &offset = ::OpenAPI::OptionalParam<QString>());


    virtual void getPodcastLanguages();


    virtual void getStationCountries();


    virtual void getStationGenres();


    virtual void getStationLanguages();

    /**
    * @param[in]  oai_podcast_search_params OAIPodcastSearchParams [required]
    */
    virtual void searchPodcasts(const OAIPodcastSearchParams &oai_podcast_search_params);

    /**
    * @param[in]  oai_station_search_params OAIStationSearchParams [required]
    */
    virtual void searchStations(const OAIStationSearchParams &oai_station_search_params);

    /**
    * @param[in]  podcast_key QString [required]
    * @param[in]  podcast OAIPodcast [required]
    * @param[in]  file_logo OAIHttpFileElement [optional]
    */
    virtual void updatePodcast(const QString &podcast_key, const OAIPodcast &podcast, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file_logo = ::OpenAPI::OptionalParam<OAIHttpFileElement>());

    /**
    * @param[in]  podcast_key QString [required]
    * @param[in]  episode_key QString [required]
    * @param[in]  episode OAIPodcastEpisode [required]
    * @param[in]  file_logo OAIHttpFileElement [optional]
    */
    virtual void updatePodcastEpisode(const QString &podcast_key, const QString &episode_key, const OAIPodcastEpisode &episode, const ::OpenAPI::OptionalParam<OAIHttpFileElement> &file_logo = ::OpenAPI::OptionalParam<OAIHttpFileElement>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createPodcastCallback(OAIHttpRequestWorker *worker);
    void createPodcastEpisodeCallback(OAIHttpRequestWorker *worker);
    void deletePodcastCallback(OAIHttpRequestWorker *worker);
    void deletePodcast1Callback(OAIHttpRequestWorker *worker);
    void getPartnerAggregatorStationsCallback(OAIHttpRequestWorker *worker);
    void getPodcastCallback(OAIHttpRequestWorker *worker);
    void getPodcastCategoriesCallback(OAIHttpRequestWorker *worker);
    void getPodcastCountriesCallback(OAIHttpRequestWorker *worker);
    void getPodcastEpisodeCallback(OAIHttpRequestWorker *worker);
    void getPodcastEpisodesCallback(OAIHttpRequestWorker *worker);
    void getPodcastLanguagesCallback(OAIHttpRequestWorker *worker);
    void getStationCountriesCallback(OAIHttpRequestWorker *worker);
    void getStationGenresCallback(OAIHttpRequestWorker *worker);
    void getStationLanguagesCallback(OAIHttpRequestWorker *worker);
    void searchPodcastsCallback(OAIHttpRequestWorker *worker);
    void searchStationsCallback(OAIHttpRequestWorker *worker);
    void updatePodcastCallback(OAIHttpRequestWorker *worker);
    void updatePodcastEpisodeCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createPodcastSignal(OAIPodcast summary);
    void createPodcastEpisodeSignal(OAIPodcastEpisode summary);
    void deletePodcastSignal();
    void deletePodcast1Signal();
    void getPartnerAggregatorStationsSignal(OAIStationList summary);
    void getPodcastSignal(OAIPodcast summary);
    void getPodcastCategoriesSignal(QList<OAIPodcastCategory> summary);
    void getPodcastCountriesSignal(QList<OAICountry> summary);
    void getPodcastEpisodeSignal(OAIPodcastEpisode summary);
    void getPodcastEpisodesSignal(OAIPodcastEpisodeList summary);
    void getPodcastLanguagesSignal(QList<OAILanguage> summary);
    void getStationCountriesSignal(QList<OAICountry> summary);
    void getStationGenresSignal(QList<OAIStationGenre> summary);
    void getStationLanguagesSignal(QList<OAILanguage> summary);
    void searchPodcastsSignal(OAIPodcastSearchResults summary);
    void searchStationsSignal(OAIStationSearchResults summary);
    void updatePodcastSignal(OAIPodcast summary);
    void updatePodcastEpisodeSignal(OAIPodcastEpisode summary);


    void createPodcastSignalFull(OAIHttpRequestWorker *worker, OAIPodcast summary);
    void createPodcastEpisodeSignalFull(OAIHttpRequestWorker *worker, OAIPodcastEpisode summary);
    void deletePodcastSignalFull(OAIHttpRequestWorker *worker);
    void deletePodcast1SignalFull(OAIHttpRequestWorker *worker);
    void getPartnerAggregatorStationsSignalFull(OAIHttpRequestWorker *worker, OAIStationList summary);
    void getPodcastSignalFull(OAIHttpRequestWorker *worker, OAIPodcast summary);
    void getPodcastCategoriesSignalFull(OAIHttpRequestWorker *worker, QList<OAIPodcastCategory> summary);
    void getPodcastCountriesSignalFull(OAIHttpRequestWorker *worker, QList<OAICountry> summary);
    void getPodcastEpisodeSignalFull(OAIHttpRequestWorker *worker, OAIPodcastEpisode summary);
    void getPodcastEpisodesSignalFull(OAIHttpRequestWorker *worker, OAIPodcastEpisodeList summary);
    void getPodcastLanguagesSignalFull(OAIHttpRequestWorker *worker, QList<OAILanguage> summary);
    void getStationCountriesSignalFull(OAIHttpRequestWorker *worker, QList<OAICountry> summary);
    void getStationGenresSignalFull(OAIHttpRequestWorker *worker, QList<OAIStationGenre> summary);
    void getStationLanguagesSignalFull(OAIHttpRequestWorker *worker, QList<OAILanguage> summary);
    void searchPodcastsSignalFull(OAIHttpRequestWorker *worker, OAIPodcastSearchResults summary);
    void searchStationsSignalFull(OAIHttpRequestWorker *worker, OAIStationSearchResults summary);
    void updatePodcastSignalFull(OAIHttpRequestWorker *worker, OAIPodcast summary);
    void updatePodcastEpisodeSignalFull(OAIHttpRequestWorker *worker, OAIPodcastEpisode summary);

    Q_DECL_DEPRECATED_X("Use createPodcastSignalError() instead")
    void createPodcastSignalE(OAIPodcast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPodcastSignalError(OAIPodcast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPodcastEpisodeSignalError() instead")
    void createPodcastEpisodeSignalE(OAIPodcastEpisode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createPodcastEpisodeSignalError(OAIPodcastEpisode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePodcastSignalError() instead")
    void deletePodcastSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePodcastSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePodcast1SignalError() instead")
    void deletePodcast1SignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deletePodcast1SignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartnerAggregatorStationsSignalError() instead")
    void getPartnerAggregatorStationsSignalE(OAIStationList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartnerAggregatorStationsSignalError(OAIStationList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastSignalError() instead")
    void getPodcastSignalE(OAIPodcast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastSignalError(OAIPodcast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastCategoriesSignalError() instead")
    void getPodcastCategoriesSignalE(QList<OAIPodcastCategory> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastCategoriesSignalError(QList<OAIPodcastCategory> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastCountriesSignalError() instead")
    void getPodcastCountriesSignalE(QList<OAICountry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastCountriesSignalError(QList<OAICountry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastEpisodeSignalError() instead")
    void getPodcastEpisodeSignalE(OAIPodcastEpisode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastEpisodeSignalError(OAIPodcastEpisode summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastEpisodesSignalError() instead")
    void getPodcastEpisodesSignalE(OAIPodcastEpisodeList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastEpisodesSignalError(OAIPodcastEpisodeList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastLanguagesSignalError() instead")
    void getPodcastLanguagesSignalE(QList<OAILanguage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastLanguagesSignalError(QList<OAILanguage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStationCountriesSignalError() instead")
    void getStationCountriesSignalE(QList<OAICountry> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStationCountriesSignalError(QList<OAICountry> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStationGenresSignalError() instead")
    void getStationGenresSignalE(QList<OAIStationGenre> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStationGenresSignalError(QList<OAIStationGenre> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStationLanguagesSignalError() instead")
    void getStationLanguagesSignalE(QList<OAILanguage> summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getStationLanguagesSignalError(QList<OAILanguage> summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchPodcastsSignalError() instead")
    void searchPodcastsSignalE(OAIPodcastSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchPodcastsSignalError(OAIPodcastSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchStationsSignalError() instead")
    void searchStationsSignalE(OAIStationSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchStationsSignalError(OAIStationSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePodcastSignalError() instead")
    void updatePodcastSignalE(OAIPodcast summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePodcastSignalError(OAIPodcast summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePodcastEpisodeSignalError() instead")
    void updatePodcastEpisodeSignalE(OAIPodcastEpisode summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePodcastEpisodeSignalError(OAIPodcastEpisode summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createPodcastSignalErrorFull() instead")
    void createPodcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPodcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createPodcastEpisodeSignalErrorFull() instead")
    void createPodcastEpisodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createPodcastEpisodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePodcastSignalErrorFull() instead")
    void deletePodcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePodcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deletePodcast1SignalErrorFull() instead")
    void deletePodcast1SignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deletePodcast1SignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPartnerAggregatorStationsSignalErrorFull() instead")
    void getPartnerAggregatorStationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPartnerAggregatorStationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastSignalErrorFull() instead")
    void getPodcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastCategoriesSignalErrorFull() instead")
    void getPodcastCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastCountriesSignalErrorFull() instead")
    void getPodcastCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastEpisodeSignalErrorFull() instead")
    void getPodcastEpisodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastEpisodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastEpisodesSignalErrorFull() instead")
    void getPodcastEpisodesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastEpisodesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getPodcastLanguagesSignalErrorFull() instead")
    void getPodcastLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getPodcastLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStationCountriesSignalErrorFull() instead")
    void getStationCountriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStationCountriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStationGenresSignalErrorFull() instead")
    void getStationGenresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStationGenresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getStationLanguagesSignalErrorFull() instead")
    void getStationLanguagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getStationLanguagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchPodcastsSignalErrorFull() instead")
    void searchPodcastsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchPodcastsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchStationsSignalErrorFull() instead")
    void searchStationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchStationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePodcastSignalErrorFull() instead")
    void updatePodcastSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePodcastSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updatePodcastEpisodeSignalErrorFull() instead")
    void updatePodcastEpisodeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updatePodcastEpisodeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
