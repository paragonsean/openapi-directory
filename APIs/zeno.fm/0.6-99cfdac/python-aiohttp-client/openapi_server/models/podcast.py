# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Podcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, block: bool=None, categories: list[str]=None, copyright: str=None, country: str=None, description: str=None, explicit: bool=None, image: str=None, key: str=None, keywords: list[str]=None, language: str=None, link: str=None, owner_email: str=None, owner_name: str=None, show_type: str=None, subtitle: str=None, summary: str=None, title: str=None):
        """Podcast - a model defined in OpenAPI

        :param author: The author of this Podcast.
        :param block: The block of this Podcast.
        :param categories: The categories of this Podcast.
        :param copyright: The copyright of this Podcast.
        :param country: The country of this Podcast.
        :param description: The description of this Podcast.
        :param explicit: The explicit of this Podcast.
        :param image: The image of this Podcast.
        :param key: The key of this Podcast.
        :param keywords: The keywords of this Podcast.
        :param language: The language of this Podcast.
        :param link: The link of this Podcast.
        :param owner_email: The owner_email of this Podcast.
        :param owner_name: The owner_name of this Podcast.
        :param show_type: The show_type of this Podcast.
        :param subtitle: The subtitle of this Podcast.
        :param summary: The summary of this Podcast.
        :param title: The title of this Podcast.
        """
        self.openapi_types = {
            'author': str,
            'block': bool,
            'categories': list[str],
            'copyright': str,
            'country': str,
            'description': str,
            'explicit': bool,
            'image': str,
            'key': str,
            'keywords': list[str],
            'language': str,
            'link': str,
            'owner_email': str,
            'owner_name': str,
            'show_type': str,
            'subtitle': str,
            'summary': str,
            'title': str
        }

        self.attribute_map = {
            'author': 'author',
            'block': 'block',
            'categories': 'categories',
            'copyright': 'copyright',
            'country': 'country',
            'description': 'description',
            'explicit': 'explicit',
            'image': 'image',
            'key': 'key',
            'keywords': 'keywords',
            'language': 'language',
            'link': 'link',
            'owner_email': 'ownerEmail',
            'owner_name': 'ownerName',
            'show_type': 'showType',
            'subtitle': 'subtitle',
            'summary': 'summary',
            'title': 'title'
        }

        self._author = author
        self._block = block
        self._categories = categories
        self._copyright = copyright
        self._country = country
        self._description = description
        self._explicit = explicit
        self._image = image
        self._key = key
        self._keywords = keywords
        self._language = language
        self._link = link
        self._owner_email = owner_email
        self._owner_name = owner_name
        self._show_type = show_type
        self._subtitle = subtitle
        self._summary = summary
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Podcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Podcast of this Podcast.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this Podcast.


        :return: The author of this Podcast.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this Podcast.


        :param author: The author of this Podcast.
        :type author: str
        """

        self._author = author

    @property
    def block(self):
        """Gets the block of this Podcast.


        :return: The block of this Podcast.
        :rtype: bool
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this Podcast.


        :param block: The block of this Podcast.
        :type block: bool
        """

        self._block = block

    @property
    def categories(self):
        """Gets the categories of this Podcast.


        :return: The categories of this Podcast.
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Podcast.


        :param categories: The categories of this Podcast.
        :type categories: list[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def copyright(self):
        """Gets the copyright of this Podcast.


        :return: The copyright of this Podcast.
        :rtype: str
        """
        return self._copyright

    @copyright.setter
    def copyright(self, copyright):
        """Sets the copyright of this Podcast.


        :param copyright: The copyright of this Podcast.
        :type copyright: str
        """

        self._copyright = copyright

    @property
    def country(self):
        """Gets the country of this Podcast.


        :return: The country of this Podcast.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Podcast.


        :param country: The country of this Podcast.
        :type country: str
        """

        self._country = country

    @property
    def description(self):
        """Gets the description of this Podcast.


        :return: The description of this Podcast.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Podcast.


        :param description: The description of this Podcast.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def explicit(self):
        """Gets the explicit of this Podcast.


        :return: The explicit of this Podcast.
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this Podcast.


        :param explicit: The explicit of this Podcast.
        :type explicit: bool
        """

        self._explicit = explicit

    @property
    def image(self):
        """Gets the image of this Podcast.


        :return: The image of this Podcast.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Podcast.


        :param image: The image of this Podcast.
        :type image: str
        """

        self._image = image

    @property
    def key(self):
        """Gets the key of this Podcast.


        :return: The key of this Podcast.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Podcast.


        :param key: The key of this Podcast.
        :type key: str
        """

        self._key = key

    @property
    def keywords(self):
        """Gets the keywords of this Podcast.


        :return: The keywords of this Podcast.
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Podcast.


        :param keywords: The keywords of this Podcast.
        :type keywords: list[str]
        """

        self._keywords = keywords

    @property
    def language(self):
        """Gets the language of this Podcast.


        :return: The language of this Podcast.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Podcast.


        :param language: The language of this Podcast.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def link(self):
        """Gets the link of this Podcast.


        :return: The link of this Podcast.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this Podcast.


        :param link: The link of this Podcast.
        :type link: str
        """

        self._link = link

    @property
    def owner_email(self):
        """Gets the owner_email of this Podcast.


        :return: The owner_email of this Podcast.
        :rtype: str
        """
        return self._owner_email

    @owner_email.setter
    def owner_email(self, owner_email):
        """Sets the owner_email of this Podcast.


        :param owner_email: The owner_email of this Podcast.
        :type owner_email: str
        """

        self._owner_email = owner_email

    @property
    def owner_name(self):
        """Gets the owner_name of this Podcast.


        :return: The owner_name of this Podcast.
        :rtype: str
        """
        return self._owner_name

    @owner_name.setter
    def owner_name(self, owner_name):
        """Sets the owner_name of this Podcast.


        :param owner_name: The owner_name of this Podcast.
        :type owner_name: str
        """

        self._owner_name = owner_name

    @property
    def show_type(self):
        """Gets the show_type of this Podcast.


        :return: The show_type of this Podcast.
        :rtype: str
        """
        return self._show_type

    @show_type.setter
    def show_type(self, show_type):
        """Sets the show_type of this Podcast.


        :param show_type: The show_type of this Podcast.
        :type show_type: str
        """

        self._show_type = show_type

    @property
    def subtitle(self):
        """Gets the subtitle of this Podcast.


        :return: The subtitle of this Podcast.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this Podcast.


        :param subtitle: The subtitle of this Podcast.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def summary(self):
        """Gets the summary of this Podcast.


        :return: The summary of this Podcast.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this Podcast.


        :param summary: The summary of this Podcast.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def title(self):
        """Gets the title of this Podcast.


        :return: The title of this Podcast.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Podcast.


        :param title: The title of this Podcast.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
