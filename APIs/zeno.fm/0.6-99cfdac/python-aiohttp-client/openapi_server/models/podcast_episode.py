# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PodcastEpisode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, author: str=None, block: bool=None, description: str=None, duration: int=None, episode: int=None, episode_type: str=None, explicit: bool=None, file_url: str=None, image: str=None, key: str=None, link: str=None, publish_date: datetime=None, season: int=None, size: int=None, subtitle: str=None, summary: str=None, tags: list[str]=None, title: str=None):
        """PodcastEpisode - a model defined in OpenAPI

        :param author: The author of this PodcastEpisode.
        :param block: The block of this PodcastEpisode.
        :param description: The description of this PodcastEpisode.
        :param duration: The duration of this PodcastEpisode.
        :param episode: The episode of this PodcastEpisode.
        :param episode_type: The episode_type of this PodcastEpisode.
        :param explicit: The explicit of this PodcastEpisode.
        :param file_url: The file_url of this PodcastEpisode.
        :param image: The image of this PodcastEpisode.
        :param key: The key of this PodcastEpisode.
        :param link: The link of this PodcastEpisode.
        :param publish_date: The publish_date of this PodcastEpisode.
        :param season: The season of this PodcastEpisode.
        :param size: The size of this PodcastEpisode.
        :param subtitle: The subtitle of this PodcastEpisode.
        :param summary: The summary of this PodcastEpisode.
        :param tags: The tags of this PodcastEpisode.
        :param title: The title of this PodcastEpisode.
        """
        self.openapi_types = {
            'author': str,
            'block': bool,
            'description': str,
            'duration': int,
            'episode': int,
            'episode_type': str,
            'explicit': bool,
            'file_url': str,
            'image': str,
            'key': str,
            'link': str,
            'publish_date': datetime,
            'season': int,
            'size': int,
            'subtitle': str,
            'summary': str,
            'tags': list[str],
            'title': str
        }

        self.attribute_map = {
            'author': 'author',
            'block': 'block',
            'description': 'description',
            'duration': 'duration',
            'episode': 'episode',
            'episode_type': 'episodeType',
            'explicit': 'explicit',
            'file_url': 'fileUrl',
            'image': 'image',
            'key': 'key',
            'link': 'link',
            'publish_date': 'publishDate',
            'season': 'season',
            'size': 'size',
            'subtitle': 'subtitle',
            'summary': 'summary',
            'tags': 'tags',
            'title': 'title'
        }

        self._author = author
        self._block = block
        self._description = description
        self._duration = duration
        self._episode = episode
        self._episode_type = episode_type
        self._explicit = explicit
        self._file_url = file_url
        self._image = image
        self._key = key
        self._link = link
        self._publish_date = publish_date
        self._season = season
        self._size = size
        self._subtitle = subtitle
        self._summary = summary
        self._tags = tags
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodcastEpisode':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodcastEpisode of this PodcastEpisode.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def author(self):
        """Gets the author of this PodcastEpisode.


        :return: The author of this PodcastEpisode.
        :rtype: str
        """
        return self._author

    @author.setter
    def author(self, author):
        """Sets the author of this PodcastEpisode.


        :param author: The author of this PodcastEpisode.
        :type author: str
        """

        self._author = author

    @property
    def block(self):
        """Gets the block of this PodcastEpisode.


        :return: The block of this PodcastEpisode.
        :rtype: bool
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this PodcastEpisode.


        :param block: The block of this PodcastEpisode.
        :type block: bool
        """

        self._block = block

    @property
    def description(self):
        """Gets the description of this PodcastEpisode.


        :return: The description of this PodcastEpisode.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PodcastEpisode.


        :param description: The description of this PodcastEpisode.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this PodcastEpisode.


        :return: The duration of this PodcastEpisode.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this PodcastEpisode.


        :param duration: The duration of this PodcastEpisode.
        :type duration: int
        """

        self._duration = duration

    @property
    def episode(self):
        """Gets the episode of this PodcastEpisode.


        :return: The episode of this PodcastEpisode.
        :rtype: int
        """
        return self._episode

    @episode.setter
    def episode(self, episode):
        """Sets the episode of this PodcastEpisode.


        :param episode: The episode of this PodcastEpisode.
        :type episode: int
        """

        self._episode = episode

    @property
    def episode_type(self):
        """Gets the episode_type of this PodcastEpisode.


        :return: The episode_type of this PodcastEpisode.
        :rtype: str
        """
        return self._episode_type

    @episode_type.setter
    def episode_type(self, episode_type):
        """Sets the episode_type of this PodcastEpisode.


        :param episode_type: The episode_type of this PodcastEpisode.
        :type episode_type: str
        """

        self._episode_type = episode_type

    @property
    def explicit(self):
        """Gets the explicit of this PodcastEpisode.


        :return: The explicit of this PodcastEpisode.
        :rtype: bool
        """
        return self._explicit

    @explicit.setter
    def explicit(self, explicit):
        """Sets the explicit of this PodcastEpisode.


        :param explicit: The explicit of this PodcastEpisode.
        :type explicit: bool
        """

        self._explicit = explicit

    @property
    def file_url(self):
        """Gets the file_url of this PodcastEpisode.


        :return: The file_url of this PodcastEpisode.
        :rtype: str
        """
        return self._file_url

    @file_url.setter
    def file_url(self, file_url):
        """Sets the file_url of this PodcastEpisode.


        :param file_url: The file_url of this PodcastEpisode.
        :type file_url: str
        """

        self._file_url = file_url

    @property
    def image(self):
        """Gets the image of this PodcastEpisode.


        :return: The image of this PodcastEpisode.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this PodcastEpisode.


        :param image: The image of this PodcastEpisode.
        :type image: str
        """

        self._image = image

    @property
    def key(self):
        """Gets the key of this PodcastEpisode.


        :return: The key of this PodcastEpisode.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this PodcastEpisode.


        :param key: The key of this PodcastEpisode.
        :type key: str
        """

        self._key = key

    @property
    def link(self):
        """Gets the link of this PodcastEpisode.


        :return: The link of this PodcastEpisode.
        :rtype: str
        """
        return self._link

    @link.setter
    def link(self, link):
        """Sets the link of this PodcastEpisode.


        :param link: The link of this PodcastEpisode.
        :type link: str
        """

        self._link = link

    @property
    def publish_date(self):
        """Gets the publish_date of this PodcastEpisode.


        :return: The publish_date of this PodcastEpisode.
        :rtype: datetime
        """
        return self._publish_date

    @publish_date.setter
    def publish_date(self, publish_date):
        """Sets the publish_date of this PodcastEpisode.


        :param publish_date: The publish_date of this PodcastEpisode.
        :type publish_date: datetime
        """
        if publish_date is None:
            raise ValueError("Invalid value for `publish_date`, must not be `None`")

        self._publish_date = publish_date

    @property
    def season(self):
        """Gets the season of this PodcastEpisode.


        :return: The season of this PodcastEpisode.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this PodcastEpisode.


        :param season: The season of this PodcastEpisode.
        :type season: int
        """

        self._season = season

    @property
    def size(self):
        """Gets the size of this PodcastEpisode.


        :return: The size of this PodcastEpisode.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PodcastEpisode.


        :param size: The size of this PodcastEpisode.
        :type size: int
        """

        self._size = size

    @property
    def subtitle(self):
        """Gets the subtitle of this PodcastEpisode.


        :return: The subtitle of this PodcastEpisode.
        :rtype: str
        """
        return self._subtitle

    @subtitle.setter
    def subtitle(self, subtitle):
        """Sets the subtitle of this PodcastEpisode.


        :param subtitle: The subtitle of this PodcastEpisode.
        :type subtitle: str
        """

        self._subtitle = subtitle

    @property
    def summary(self):
        """Gets the summary of this PodcastEpisode.


        :return: The summary of this PodcastEpisode.
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this PodcastEpisode.


        :param summary: The summary of this PodcastEpisode.
        :type summary: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")

        self._summary = summary

    @property
    def tags(self):
        """Gets the tags of this PodcastEpisode.


        :return: The tags of this PodcastEpisode.
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this PodcastEpisode.


        :param tags: The tags of this PodcastEpisode.
        :type tags: list[str]
        """

        self._tags = tags

    @property
    def title(self):
        """Gets the title of this PodcastEpisode.


        :return: The title of this PodcastEpisode.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this PodcastEpisode.


        :param title: The title of this PodcastEpisode.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title
