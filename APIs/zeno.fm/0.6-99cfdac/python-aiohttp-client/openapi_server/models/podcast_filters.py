# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class PodcastFilters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category: list[str]=None, country: list[str]=None, language: list[str]=None, podcast_type: str=None):
        """PodcastFilters - a model defined in OpenAPI

        :param category: The category of this PodcastFilters.
        :param country: The country of this PodcastFilters.
        :param language: The language of this PodcastFilters.
        :param podcast_type: The podcast_type of this PodcastFilters.
        """
        self.openapi_types = {
            'category': list[str],
            'country': list[str],
            'language': list[str],
            'podcast_type': str
        }

        self.attribute_map = {
            'category': 'category',
            'country': 'country',
            'language': 'language',
            'podcast_type': 'podcastType'
        }

        self._category = category
        self._country = country
        self._language = language
        self._podcast_type = podcast_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'PodcastFilters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The PodcastFilters of this PodcastFilters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self):
        """Gets the category of this PodcastFilters.


        :return: The category of this PodcastFilters.
        :rtype: list[str]
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this PodcastFilters.


        :param category: The category of this PodcastFilters.
        :type category: list[str]
        """

        self._category = category

    @property
    def country(self):
        """Gets the country of this PodcastFilters.


        :return: The country of this PodcastFilters.
        :rtype: list[str]
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this PodcastFilters.


        :param country: The country of this PodcastFilters.
        :type country: list[str]
        """

        self._country = country

    @property
    def language(self):
        """Gets the language of this PodcastFilters.


        :return: The language of this PodcastFilters.
        :rtype: list[str]
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this PodcastFilters.


        :param language: The language of this PodcastFilters.
        :type language: list[str]
        """

        self._language = language

    @property
    def podcast_type(self):
        """Gets the podcast_type of this PodcastFilters.


        :return: The podcast_type of this PodcastFilters.
        :rtype: str
        """
        return self._podcast_type

    @podcast_type.setter
    def podcast_type(self, podcast_type):
        """Sets the podcast_type of this PodcastFilters.


        :param podcast_type: The podcast_type of this PodcastFilters.
        :type podcast_type: str
        """
        allowed_values = ["podcasts", "shows"]  # noqa: E501
        if podcast_type not in allowed_values:
            raise ValueError(
                "Invalid value for `podcast_type` ({0}), must be one of {1}"
                .format(podcast_type, allowed_values)
            )

        self._podcast_type = podcast_type
