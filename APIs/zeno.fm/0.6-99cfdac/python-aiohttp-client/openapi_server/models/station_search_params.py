# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.station_filters import StationFilters
from openapi_server import util


class StationSearchParams(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, filters: StationFilters=None, hits_per_page: int=10, page: int=1, query: str=None):
        """StationSearchParams - a model defined in OpenAPI

        :param filters: The filters of this StationSearchParams.
        :param hits_per_page: The hits_per_page of this StationSearchParams.
        :param page: The page of this StationSearchParams.
        :param query: The query of this StationSearchParams.
        """
        self.openapi_types = {
            'filters': StationFilters,
            'hits_per_page': int,
            'page': int,
            'query': str
        }

        self.attribute_map = {
            'filters': 'filters',
            'hits_per_page': 'hitsPerPage',
            'page': 'page',
            'query': 'query'
        }

        self._filters = filters
        self._hits_per_page = hits_per_page
        self._page = page
        self._query = query

    @classmethod
    def from_dict(cls, dikt: dict) -> 'StationSearchParams':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The StationSearchParams of this StationSearchParams.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def filters(self):
        """Gets the filters of this StationSearchParams.


        :return: The filters of this StationSearchParams.
        :rtype: StationFilters
        """
        return self._filters

    @filters.setter
    def filters(self, filters):
        """Sets the filters of this StationSearchParams.


        :param filters: The filters of this StationSearchParams.
        :type filters: StationFilters
        """

        self._filters = filters

    @property
    def hits_per_page(self):
        """Gets the hits_per_page of this StationSearchParams.


        :return: The hits_per_page of this StationSearchParams.
        :rtype: int
        """
        return self._hits_per_page

    @hits_per_page.setter
    def hits_per_page(self, hits_per_page):
        """Sets the hits_per_page of this StationSearchParams.


        :param hits_per_page: The hits_per_page of this StationSearchParams.
        :type hits_per_page: int
        """
        if hits_per_page is not None and hits_per_page > 1000:
            raise ValueError("Invalid value for `hits_per_page`, must be a value less than or equal to `1000`")
        if hits_per_page is not None and hits_per_page < 1:
            raise ValueError("Invalid value for `hits_per_page`, must be a value greater than or equal to `1`")

        self._hits_per_page = hits_per_page

    @property
    def page(self):
        """Gets the page of this StationSearchParams.


        :return: The page of this StationSearchParams.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this StationSearchParams.


        :param page: The page of this StationSearchParams.
        :type page: int
        """
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def query(self):
        """Gets the query of this StationSearchParams.


        :return: The query of this StationSearchParams.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this StationSearchParams.


        :param query: The query of this StationSearchParams.
        :type query: str
        """

        self._query = query
