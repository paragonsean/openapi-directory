/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Country from '../model/Country';
import Language from '../model/Language';
import Podcast from '../model/Podcast';
import PodcastCategory from '../model/PodcastCategory';
import PodcastEpisode from '../model/PodcastEpisode';
import PodcastEpisodeList from '../model/PodcastEpisodeList';
import PodcastSearchParams from '../model/PodcastSearchParams';
import PodcastSearchResults from '../model/PodcastSearchResults';
import StationGenre from '../model/StationGenre';
import StationList from '../model/StationList';
import StationSearchParams from '../model/StationSearchParams';
import StationSearchResults from '../model/StationSearchResults';

/**
* APIV2 service.
* @module api/APIV2Api
* @version 0.6-99cfdac
*/
export default class APIV2Api {

    /**
    * Constructs a new APIV2Api. 
    * @alias module:api/APIV2Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createPodcast operation.
     * @callback module:api/APIV2Api~createPodcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Podcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create podcast
     * @param {File} fileLogo 
     * @param {module:model/Podcast} podcast 
     * @param {module:api/APIV2Api~createPodcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Podcast}
     */
    createPodcast(fileLogo, podcast, callback) {
      let postBody = null;
      // verify the required parameter 'fileLogo' is set
      if (fileLogo === undefined || fileLogo === null) {
        throw new Error("Missing the required parameter 'fileLogo' when calling createPodcast");
      }
      // verify the required parameter 'podcast' is set
      if (podcast === undefined || podcast === null) {
        throw new Error("Missing the required parameter 'podcast' when calling createPodcast");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file_logo': fileLogo,
        'podcast': podcast
      };

      let authNames = ['API_Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Podcast;
      return this.apiClient.callApi(
        '/api/v2/podcasts/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createPodcastEpisode operation.
     * @callback module:api/APIV2Api~createPodcastEpisodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastEpisode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create podcast episode
     * @param {String} podcastKey 
     * @param {module:model/PodcastEpisode} episode 
     * @param {File} fileLogo 
     * @param {File} fileMedia 
     * @param {module:api/APIV2Api~createPodcastEpisodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastEpisode}
     */
    createPodcastEpisode(podcastKey, episode, fileLogo, fileMedia, callback) {
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling createPodcastEpisode");
      }
      // verify the required parameter 'episode' is set
      if (episode === undefined || episode === null) {
        throw new Error("Missing the required parameter 'episode' when calling createPodcastEpisode");
      }
      // verify the required parameter 'fileLogo' is set
      if (fileLogo === undefined || fileLogo === null) {
        throw new Error("Missing the required parameter 'fileLogo' when calling createPodcastEpisode");
      }
      // verify the required parameter 'fileMedia' is set
      if (fileMedia === undefined || fileMedia === null) {
        throw new Error("Missing the required parameter 'fileMedia' when calling createPodcastEpisode");
      }

      let pathParams = {
        'podcastKey': podcastKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'episode': episode,
        'file_logo': fileLogo,
        'file_media': fileMedia
      };

      let authNames = ['API_Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PodcastEpisode;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}/episodes/create', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePodcast operation.
     * @callback module:api/APIV2Api~deletePodcastCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete podcast
     * @param {String} podcastKey 
     * @param {module:api/APIV2Api~deletePodcastCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePodcast(podcastKey, callback) {
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling deletePodcast");
      }

      let pathParams = {
        'podcastKey': podcastKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deletePodcast1 operation.
     * @callback module:api/APIV2Api~deletePodcast1Callback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete podcast episode
     * @param {String} podcastKey 
     * @param {String} episodeKey 
     * @param {module:api/APIV2Api~deletePodcast1Callback} callback The callback function, accepting three arguments: error, data, response
     */
    deletePodcast1(podcastKey, episodeKey, callback) {
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling deletePodcast1");
      }
      // verify the required parameter 'episodeKey' is set
      if (episodeKey === undefined || episodeKey === null) {
        throw new Error("Missing the required parameter 'episodeKey' when calling deletePodcast1");
      }

      let pathParams = {
        'podcastKey': podcastKey,
        'episodeKey': episodeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPartnerAggregatorStations operation.
     * @callback module:api/APIV2Api~getPartnerAggregatorStationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StationList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List stations
     * @param {Object} opts Optional parameters
     * @param {String} [page = '1')] 
     * @param {String} [hitsPerPage = '10')] 
     * @param {module:api/APIV2Api~getPartnerAggregatorStationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StationList}
     */
    getPartnerAggregatorStations(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'hitsPerPage': opts['hitsPerPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = StationList;
      return this.apiClient.callApi(
        '/api/v2/stations/list', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcast operation.
     * @callback module:api/APIV2Api~getPodcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Podcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get podcast
     * @param {String} podcastKey 
     * @param {module:api/APIV2Api~getPodcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Podcast}
     */
    getPodcast(podcastKey, callback) {
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling getPodcast");
      }

      let pathParams = {
        'podcastKey': podcastKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = Podcast;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastCategories operation.
     * @callback module:api/APIV2Api~getPodcastCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/PodcastCategory>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Categories that can be used to filter podcasts in the search podcasts request
     * @param {module:api/APIV2Api~getPodcastCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/PodcastCategory>}
     */
    getPodcastCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [PodcastCategory];
      return this.apiClient.callApi(
        '/api/v2/podcasts/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastCountries operation.
     * @callback module:api/APIV2Api~getPodcastCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Country>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Countries that can be used to filter podcasts in the search podcasts request
     * @param {module:api/APIV2Api~getPodcastCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Country>}
     */
    getPodcastCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Country];
      return this.apiClient.callApi(
        '/api/v2/podcasts/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastEpisode operation.
     * @callback module:api/APIV2Api~getPodcastEpisodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastEpisode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get podcast episode
     * @param {String} podcastKey 
     * @param {String} episodeKey 
     * @param {module:api/APIV2Api~getPodcastEpisodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastEpisode}
     */
    getPodcastEpisode(podcastKey, episodeKey, callback) {
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling getPodcastEpisode");
      }
      // verify the required parameter 'episodeKey' is set
      if (episodeKey === undefined || episodeKey === null) {
        throw new Error("Missing the required parameter 'episodeKey' when calling getPodcastEpisode");
      }

      let pathParams = {
        'podcastKey': podcastKey,
        'episodeKey': episodeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PodcastEpisode;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastEpisodes operation.
     * @callback module:api/APIV2Api~getPodcastEpisodesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastEpisodeList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get podcast episodes
     * @param {String} podcastKey 
     * @param {Object} opts Optional parameters
     * @param {String} [limit = '10')] 
     * @param {String} [offset = '0')] 
     * @param {module:api/APIV2Api~getPodcastEpisodesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastEpisodeList}
     */
    getPodcastEpisodes(podcastKey, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling getPodcastEpisodes");
      }

      let pathParams = {
        'podcastKey': podcastKey
      };
      let queryParams = {
        'limit': opts['limit'],
        'offset': opts['offset']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = PodcastEpisodeList;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}/episodes', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getPodcastLanguages operation.
     * @callback module:api/APIV2Api~getPodcastLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Language>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Languages that can be used to filter podcasts in the search podcasts request
     * @param {module:api/APIV2Api~getPodcastLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Language>}
     */
    getPodcastLanguages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Language];
      return this.apiClient.callApi(
        '/api/v2/podcasts/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStationCountries operation.
     * @callback module:api/APIV2Api~getStationCountriesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Country>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Countries that can be used to filter stations in the search stations request
     * @param {module:api/APIV2Api~getStationCountriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Country>}
     */
    getStationCountries(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Country];
      return this.apiClient.callApi(
        '/api/v2/stations/countries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStationGenres operation.
     * @callback module:api/APIV2Api~getStationGenresCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/StationGenre>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Genres that can be used to filter stations in the search stations request
     * @param {module:api/APIV2Api~getStationGenresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/StationGenre>}
     */
    getStationGenres(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [StationGenre];
      return this.apiClient.callApi(
        '/api/v2/stations/genres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getStationLanguages operation.
     * @callback module:api/APIV2Api~getStationLanguagesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Language>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the list of Languages that can be used to filter stations in the search stations request
     * @param {module:api/APIV2Api~getStationLanguagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Language>}
     */
    getStationLanguages(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = [];
      let accepts = ['*/*'];
      let returnType = [Language];
      return this.apiClient.callApi(
        '/api/v2/stations/languages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchPodcasts operation.
     * @callback module:api/APIV2Api~searchPodcastsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search podcasts
     * @param {module:model/PodcastSearchParams} podcastSearchParams 
     * @param {module:api/APIV2Api~searchPodcastsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastSearchResults}
     */
    searchPodcasts(podcastSearchParams, callback) {
      let postBody = podcastSearchParams;
      // verify the required parameter 'podcastSearchParams' is set
      if (podcastSearchParams === undefined || podcastSearchParams === null) {
        throw new Error("Missing the required parameter 'podcastSearchParams' when calling searchPodcasts");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = PodcastSearchResults;
      return this.apiClient.callApi(
        '/api/v2/podcasts/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchStations operation.
     * @callback module:api/APIV2Api~searchStationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/StationSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search stations
     * @param {module:model/StationSearchParams} stationSearchParams 
     * @param {module:api/APIV2Api~searchStationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/StationSearchResults}
     */
    searchStations(stationSearchParams, callback) {
      let postBody = stationSearchParams;
      // verify the required parameter 'stationSearchParams' is set
      if (stationSearchParams === undefined || stationSearchParams === null) {
        throw new Error("Missing the required parameter 'stationSearchParams' when calling searchStations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['API_Key'];
      let contentTypes = ['application/json'];
      let accepts = ['*/*'];
      let returnType = StationSearchResults;
      return this.apiClient.callApi(
        '/api/v2/stations/search', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePodcast operation.
     * @callback module:api/APIV2Api~updatePodcastCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Podcast} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update podcast
     * @param {String} podcastKey 
     * @param {module:model/Podcast} podcast 
     * @param {Object} opts Optional parameters
     * @param {File} [fileLogo] 
     * @param {module:api/APIV2Api~updatePodcastCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Podcast}
     */
    updatePodcast(podcastKey, podcast, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling updatePodcast");
      }
      // verify the required parameter 'podcast' is set
      if (podcast === undefined || podcast === null) {
        throw new Error("Missing the required parameter 'podcast' when calling updatePodcast");
      }

      let pathParams = {
        'podcastKey': podcastKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'file_logo': opts['fileLogo'],
        'podcast': podcast
      };

      let authNames = ['API_Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = Podcast;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updatePodcastEpisode operation.
     * @callback module:api/APIV2Api~updatePodcastEpisodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/PodcastEpisode} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update podcast episode
     * @param {String} podcastKey 
     * @param {String} episodeKey 
     * @param {module:model/PodcastEpisode} episode 
     * @param {Object} opts Optional parameters
     * @param {File} [fileLogo] 
     * @param {module:api/APIV2Api~updatePodcastEpisodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/PodcastEpisode}
     */
    updatePodcastEpisode(podcastKey, episodeKey, episode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'podcastKey' is set
      if (podcastKey === undefined || podcastKey === null) {
        throw new Error("Missing the required parameter 'podcastKey' when calling updatePodcastEpisode");
      }
      // verify the required parameter 'episodeKey' is set
      if (episodeKey === undefined || episodeKey === null) {
        throw new Error("Missing the required parameter 'episodeKey' when calling updatePodcastEpisode");
      }
      // verify the required parameter 'episode' is set
      if (episode === undefined || episode === null) {
        throw new Error("Missing the required parameter 'episode' when calling updatePodcastEpisode");
      }

      let pathParams = {
        'podcastKey': podcastKey,
        'episodeKey': episodeKey
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'episode': episode,
        'file_logo': opts['fileLogo']
      };

      let authNames = ['API_Key'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['*/*'];
      let returnType = PodcastEpisode;
      return this.apiClient.callApi(
        '/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
