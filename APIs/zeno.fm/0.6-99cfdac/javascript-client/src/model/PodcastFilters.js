/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodcastFilters model module.
 * @module model/PodcastFilters
 * @version 0.6-99cfdac
 */
class PodcastFilters {
    /**
     * Constructs a new <code>PodcastFilters</code>.
     * Filters for podcast search
     * @alias module:model/PodcastFilters
     */
    constructor() { 
        
        PodcastFilters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>PodcastFilters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastFilters} obj Optional instance to populate.
     * @return {module:model/PodcastFilters} The populated <code>PodcastFilters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastFilters();

            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], ['String']);
            }
            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], ['String']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], ['String']);
            }
            if (data.hasOwnProperty('podcastType')) {
                obj['podcastType'] = ApiClient.convertToType(data['podcastType'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastFilters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastFilters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['category'])) {
            throw new Error("Expected the field `category` to be an array in the JSON data but got " + data['category']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['country'])) {
            throw new Error("Expected the field `country` to be an array in the JSON data but got " + data['country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['language'])) {
            throw new Error("Expected the field `language` to be an array in the JSON data but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['podcastType'] && !(typeof data['podcastType'] === 'string' || data['podcastType'] instanceof String)) {
            throw new Error("Expected the field `podcastType` to be a primitive type in the JSON string but got " + data['podcastType']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} category
 */
PodcastFilters.prototype['category'] = undefined;

/**
 * @member {Array.<String>} country
 */
PodcastFilters.prototype['country'] = undefined;

/**
 * @member {Array.<String>} language
 */
PodcastFilters.prototype['language'] = undefined;

/**
 * @member {module:model/PodcastFilters.PodcastTypeEnum} podcastType
 */
PodcastFilters.prototype['podcastType'] = undefined;





/**
 * Allowed values for the <code>podcastType</code> property.
 * @enum {String}
 * @readonly
 */
PodcastFilters['PodcastTypeEnum'] = {

    /**
     * value: "podcasts"
     * @const
     */
    "podcasts": "podcasts",

    /**
     * value: "shows"
     * @const
     */
    "shows": "shows"
};



export default PodcastFilters;

