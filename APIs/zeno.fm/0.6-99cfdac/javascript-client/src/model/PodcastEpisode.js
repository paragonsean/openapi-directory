/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The PodcastEpisode model module.
 * @module model/PodcastEpisode
 * @version 0.6-99cfdac
 */
class PodcastEpisode {
    /**
     * Constructs a new <code>PodcastEpisode</code>.
     * PodcastEpisode model
     * @alias module:model/PodcastEpisode
     * @param description {String} 
     * @param publishDate {Date} 
     * @param summary {String} 
     * @param title {String} 
     */
    constructor(description, publishDate, summary, title) { 
        
        PodcastEpisode.initialize(this, description, publishDate, summary, title);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, description, publishDate, summary, title) { 
        obj['description'] = description;
        obj['publishDate'] = publishDate;
        obj['summary'] = summary;
        obj['title'] = title;
    }

    /**
     * Constructs a <code>PodcastEpisode</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/PodcastEpisode} obj Optional instance to populate.
     * @return {module:model/PodcastEpisode} The populated <code>PodcastEpisode</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new PodcastEpisode();

            if (data.hasOwnProperty('author')) {
                obj['author'] = ApiClient.convertToType(data['author'], 'String');
            }
            if (data.hasOwnProperty('block')) {
                obj['block'] = ApiClient.convertToType(data['block'], 'Boolean');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('episode')) {
                obj['episode'] = ApiClient.convertToType(data['episode'], 'Number');
            }
            if (data.hasOwnProperty('episodeType')) {
                obj['episodeType'] = ApiClient.convertToType(data['episodeType'], 'String');
            }
            if (data.hasOwnProperty('explicit')) {
                obj['explicit'] = ApiClient.convertToType(data['explicit'], 'Boolean');
            }
            if (data.hasOwnProperty('fileUrl')) {
                obj['fileUrl'] = ApiClient.convertToType(data['fileUrl'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = ApiClient.convertToType(data['image'], 'String');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = ApiClient.convertToType(data['key'], 'String');
            }
            if (data.hasOwnProperty('link')) {
                obj['link'] = ApiClient.convertToType(data['link'], 'String');
            }
            if (data.hasOwnProperty('publishDate')) {
                obj['publishDate'] = ApiClient.convertToType(data['publishDate'], 'Date');
            }
            if (data.hasOwnProperty('season')) {
                obj['season'] = ApiClient.convertToType(data['season'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'Number');
            }
            if (data.hasOwnProperty('subtitle')) {
                obj['subtitle'] = ApiClient.convertToType(data['subtitle'], 'String');
            }
            if (data.hasOwnProperty('summary')) {
                obj['summary'] = ApiClient.convertToType(data['summary'], 'String');
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>PodcastEpisode</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>PodcastEpisode</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of PodcastEpisode.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['author'] && !(typeof data['author'] === 'string' || data['author'] instanceof String)) {
            throw new Error("Expected the field `author` to be a primitive type in the JSON string but got " + data['author']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['episodeType'] && !(typeof data['episodeType'] === 'string' || data['episodeType'] instanceof String)) {
            throw new Error("Expected the field `episodeType` to be a primitive type in the JSON string but got " + data['episodeType']);
        }
        // ensure the json data is a string
        if (data['fileUrl'] && !(typeof data['fileUrl'] === 'string' || data['fileUrl'] instanceof String)) {
            throw new Error("Expected the field `fileUrl` to be a primitive type in the JSON string but got " + data['fileUrl']);
        }
        // ensure the json data is a string
        if (data['image'] && !(typeof data['image'] === 'string' || data['image'] instanceof String)) {
            throw new Error("Expected the field `image` to be a primitive type in the JSON string but got " + data['image']);
        }
        // ensure the json data is a string
        if (data['key'] && !(typeof data['key'] === 'string' || data['key'] instanceof String)) {
            throw new Error("Expected the field `key` to be a primitive type in the JSON string but got " + data['key']);
        }
        // ensure the json data is a string
        if (data['link'] && !(typeof data['link'] === 'string' || data['link'] instanceof String)) {
            throw new Error("Expected the field `link` to be a primitive type in the JSON string but got " + data['link']);
        }
        // ensure the json data is a string
        if (data['subtitle'] && !(typeof data['subtitle'] === 'string' || data['subtitle'] instanceof String)) {
            throw new Error("Expected the field `subtitle` to be a primitive type in the JSON string but got " + data['subtitle']);
        }
        // ensure the json data is a string
        if (data['summary'] && !(typeof data['summary'] === 'string' || data['summary'] instanceof String)) {
            throw new Error("Expected the field `summary` to be a primitive type in the JSON string but got " + data['summary']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

PodcastEpisode.RequiredProperties = ["description", "publishDate", "summary", "title"];

/**
 * @member {String} author
 */
PodcastEpisode.prototype['author'] = undefined;

/**
 * @member {Boolean} block
 */
PodcastEpisode.prototype['block'] = undefined;

/**
 * @member {String} description
 */
PodcastEpisode.prototype['description'] = undefined;

/**
 * @member {Number} duration
 */
PodcastEpisode.prototype['duration'] = undefined;

/**
 * @member {Number} episode
 */
PodcastEpisode.prototype['episode'] = undefined;

/**
 * @member {String} episodeType
 */
PodcastEpisode.prototype['episodeType'] = undefined;

/**
 * @member {Boolean} explicit
 */
PodcastEpisode.prototype['explicit'] = undefined;

/**
 * @member {String} fileUrl
 */
PodcastEpisode.prototype['fileUrl'] = undefined;

/**
 * @member {String} image
 */
PodcastEpisode.prototype['image'] = undefined;

/**
 * @member {String} key
 */
PodcastEpisode.prototype['key'] = undefined;

/**
 * @member {String} link
 */
PodcastEpisode.prototype['link'] = undefined;

/**
 * @member {Date} publishDate
 */
PodcastEpisode.prototype['publishDate'] = undefined;

/**
 * @member {Number} season
 */
PodcastEpisode.prototype['season'] = undefined;

/**
 * @member {Number} size
 */
PodcastEpisode.prototype['size'] = undefined;

/**
 * @member {String} subtitle
 */
PodcastEpisode.prototype['subtitle'] = undefined;

/**
 * @member {String} summary
 */
PodcastEpisode.prototype['summary'] = undefined;

/**
 * @member {Array.<String>} tags
 */
PodcastEpisode.prototype['tags'] = undefined;

/**
 * @member {String} title
 */
PodcastEpisode.prototype['title'] = undefined;






export default PodcastEpisode;

