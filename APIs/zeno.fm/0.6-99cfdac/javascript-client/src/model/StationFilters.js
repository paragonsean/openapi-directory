/**
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The StationFilters model module.
 * @module model/StationFilters
 * @version 0.6-99cfdac
 */
class StationFilters {
    /**
     * Constructs a new <code>StationFilters</code>.
     * Filters for station search
     * @alias module:model/StationFilters
     */
    constructor() { 
        
        StationFilters.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>StationFilters</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/StationFilters} obj Optional instance to populate.
     * @return {module:model/StationFilters} The populated <code>StationFilters</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new StationFilters();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ApiClient.convertToType(data['country'], ['String']);
            }
            if (data.hasOwnProperty('genre')) {
                obj['genre'] = ApiClient.convertToType(data['genre'], ['String']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>StationFilters</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>StationFilters</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['country'])) {
            throw new Error("Expected the field `country` to be an array in the JSON data but got " + data['country']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genre'])) {
            throw new Error("Expected the field `genre` to be an array in the JSON data but got " + data['genre']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['language'])) {
            throw new Error("Expected the field `language` to be an array in the JSON data but got " + data['language']);
        }

        return true;
    }


}



/**
 * @member {Array.<String>} country
 */
StationFilters.prototype['country'] = undefined;

/**
 * @member {Array.<String>} genre
 */
StationFilters.prototype['genre'] = undefined;

/**
 * @member {Array.<String>} language
 */
StationFilters.prototype['language'] = undefined;






export default StationFilters;

