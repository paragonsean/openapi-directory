/*
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Filters for podcast search
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T10:06:18.163184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class PodcastFilters {
  public static final String SERIALIZED_NAME_CATEGORY = "category";
  @SerializedName(SERIALIZED_NAME_CATEGORY)
  private Set<String> category = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private Set<String> country = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private Set<String> language = new LinkedHashSet<>();

  /**
   * Gets or Sets podcastType
   */
  @JsonAdapter(PodcastTypeEnum.Adapter.class)
  public enum PodcastTypeEnum {
    PODCASTS("podcasts"),
    
    SHOWS("shows");

    private String value;

    PodcastTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static PodcastTypeEnum fromValue(String value) {
      for (PodcastTypeEnum b : PodcastTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<PodcastTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final PodcastTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public PodcastTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return PodcastTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      PodcastTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_PODCAST_TYPE = "podcastType";
  @SerializedName(SERIALIZED_NAME_PODCAST_TYPE)
  private PodcastTypeEnum podcastType;

  public PodcastFilters() {
  }

  public PodcastFilters category(Set<String> category) {
    this.category = category;
    return this;
  }

  public PodcastFilters addCategoryItem(String categoryItem) {
    if (this.category == null) {
      this.category = new LinkedHashSet<>();
    }
    this.category.add(categoryItem);
    return this;
  }

  /**
   * Get category
   * @return category
   */
  @javax.annotation.Nullable
  public Set<String> getCategory() {
    return category;
  }

  public void setCategory(Set<String> category) {
    this.category = category;
  }


  public PodcastFilters country(Set<String> country) {
    this.country = country;
    return this;
  }

  public PodcastFilters addCountryItem(String countryItem) {
    if (this.country == null) {
      this.country = new LinkedHashSet<>();
    }
    this.country.add(countryItem);
    return this;
  }

  /**
   * Get country
   * @return country
   */
  @javax.annotation.Nullable
  public Set<String> getCountry() {
    return country;
  }

  public void setCountry(Set<String> country) {
    this.country = country;
  }


  public PodcastFilters language(Set<String> language) {
    this.language = language;
    return this;
  }

  public PodcastFilters addLanguageItem(String languageItem) {
    if (this.language == null) {
      this.language = new LinkedHashSet<>();
    }
    this.language.add(languageItem);
    return this;
  }

  /**
   * Get language
   * @return language
   */
  @javax.annotation.Nullable
  public Set<String> getLanguage() {
    return language;
  }

  public void setLanguage(Set<String> language) {
    this.language = language;
  }


  public PodcastFilters podcastType(PodcastTypeEnum podcastType) {
    this.podcastType = podcastType;
    return this;
  }

  /**
   * Get podcastType
   * @return podcastType
   */
  @javax.annotation.Nullable
  public PodcastTypeEnum getPodcastType() {
    return podcastType;
  }

  public void setPodcastType(PodcastTypeEnum podcastType) {
    this.podcastType = podcastType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PodcastFilters podcastFilters = (PodcastFilters) o;
    return Objects.equals(this.category, podcastFilters.category) &&
        Objects.equals(this.country, podcastFilters.country) &&
        Objects.equals(this.language, podcastFilters.language) &&
        Objects.equals(this.podcastType, podcastFilters.podcastType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(category, country, language, podcastType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PodcastFilters {\n");
    sb.append("    category: ").append(toIndentedString(category)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    podcastType: ").append(toIndentedString(podcastType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("category");
    openapiFields.add("country");
    openapiFields.add("language");
    openapiFields.add("podcastType");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to PodcastFilters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!PodcastFilters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in PodcastFilters is not found in the empty JSON string", PodcastFilters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!PodcastFilters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PodcastFilters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("category") != null && !jsonObj.get("category").isJsonNull() && !jsonObj.get("category").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `category` to be an array in the JSON string but got `%s`", jsonObj.get("category").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull() && !jsonObj.get("country").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be an array in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull() && !jsonObj.get("language").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be an array in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("podcastType") != null && !jsonObj.get("podcastType").isJsonNull()) && !jsonObj.get("podcastType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `podcastType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("podcastType").toString()));
      }
      // validate the optional field `podcastType`
      if (jsonObj.get("podcastType") != null && !jsonObj.get("podcastType").isJsonNull()) {
        PodcastTypeEnum.validateJsonElement(jsonObj.get("podcastType"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PodcastFilters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PodcastFilters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PodcastFilters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PodcastFilters.class));

       return (TypeAdapter<T>) new TypeAdapter<PodcastFilters>() {
           @Override
           public void write(JsonWriter out, PodcastFilters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PodcastFilters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of PodcastFilters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of PodcastFilters
   * @throws IOException if the JSON string is invalid with respect to PodcastFilters
   */
  public static PodcastFilters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PodcastFilters.class);
  }

  /**
   * Convert an instance of PodcastFilters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

