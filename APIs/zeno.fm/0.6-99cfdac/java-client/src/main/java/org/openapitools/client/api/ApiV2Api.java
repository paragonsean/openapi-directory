/*
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Country;
import java.io.File;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.Podcast;
import org.openapitools.client.model.PodcastCategory;
import org.openapitools.client.model.PodcastEpisode;
import org.openapitools.client.model.PodcastEpisodeList;
import org.openapitools.client.model.PodcastSearchParams;
import org.openapitools.client.model.PodcastSearchResults;
import org.openapitools.client.model.StationGenre;
import org.openapitools.client.model.StationList;
import org.openapitools.client.model.StationSearchParams;
import org.openapitools.client.model.StationSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ApiV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ApiV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public ApiV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPodcast
     * @param fileLogo  (required)
     * @param podcast  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPodcastCall(File fileLogo, Podcast podcast, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/create";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileLogo != null) {
            localVarFormParams.put("file_logo", fileLogo);
        }

        if (podcast != null) {
            localVarFormParams.put("podcast", podcast);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPodcastValidateBeforeCall(File fileLogo, Podcast podcast, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileLogo' is set
        if (fileLogo == null) {
            throw new ApiException("Missing the required parameter 'fileLogo' when calling createPodcast(Async)");
        }

        // verify the required parameter 'podcast' is set
        if (podcast == null) {
            throw new ApiException("Missing the required parameter 'podcast' when calling createPodcast(Async)");
        }

        return createPodcastCall(fileLogo, podcast, _callback);

    }

    /**
     * 
     * Create podcast
     * @param fileLogo  (required)
     * @param podcast  (required)
     * @return Podcast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Podcast createPodcast(File fileLogo, Podcast podcast) throws ApiException {
        ApiResponse<Podcast> localVarResp = createPodcastWithHttpInfo(fileLogo, podcast);
        return localVarResp.getData();
    }

    /**
     * 
     * Create podcast
     * @param fileLogo  (required)
     * @param podcast  (required)
     * @return ApiResponse&lt;Podcast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Podcast> createPodcastWithHttpInfo(File fileLogo, Podcast podcast) throws ApiException {
        okhttp3.Call localVarCall = createPodcastValidateBeforeCall(fileLogo, podcast, null);
        Type localVarReturnType = new TypeToken<Podcast>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create podcast
     * @param fileLogo  (required)
     * @param podcast  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPodcastAsync(File fileLogo, Podcast podcast, final ApiCallback<Podcast> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPodcastValidateBeforeCall(fileLogo, podcast, _callback);
        Type localVarReturnType = new TypeToken<Podcast>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createPodcastEpisode
     * @param podcastKey  (required)
     * @param episode  (required)
     * @param fileLogo  (required)
     * @param fileMedia  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPodcastEpisodeCall(String podcastKey, PodcastEpisode episode, File fileLogo, File fileMedia, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}/episodes/create"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (episode != null) {
            localVarFormParams.put("episode", episode);
        }

        if (fileLogo != null) {
            localVarFormParams.put("file_logo", fileLogo);
        }

        if (fileMedia != null) {
            localVarFormParams.put("file_media", fileMedia);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPodcastEpisodeValidateBeforeCall(String podcastKey, PodcastEpisode episode, File fileLogo, File fileMedia, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling createPodcastEpisode(Async)");
        }

        // verify the required parameter 'episode' is set
        if (episode == null) {
            throw new ApiException("Missing the required parameter 'episode' when calling createPodcastEpisode(Async)");
        }

        // verify the required parameter 'fileLogo' is set
        if (fileLogo == null) {
            throw new ApiException("Missing the required parameter 'fileLogo' when calling createPodcastEpisode(Async)");
        }

        // verify the required parameter 'fileMedia' is set
        if (fileMedia == null) {
            throw new ApiException("Missing the required parameter 'fileMedia' when calling createPodcastEpisode(Async)");
        }

        return createPodcastEpisodeCall(podcastKey, episode, fileLogo, fileMedia, _callback);

    }

    /**
     * 
     * Create podcast episode
     * @param podcastKey  (required)
     * @param episode  (required)
     * @param fileLogo  (required)
     * @param fileMedia  (required)
     * @return PodcastEpisode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PodcastEpisode createPodcastEpisode(String podcastKey, PodcastEpisode episode, File fileLogo, File fileMedia) throws ApiException {
        ApiResponse<PodcastEpisode> localVarResp = createPodcastEpisodeWithHttpInfo(podcastKey, episode, fileLogo, fileMedia);
        return localVarResp.getData();
    }

    /**
     * 
     * Create podcast episode
     * @param podcastKey  (required)
     * @param episode  (required)
     * @param fileLogo  (required)
     * @param fileMedia  (required)
     * @return ApiResponse&lt;PodcastEpisode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastEpisode> createPodcastEpisodeWithHttpInfo(String podcastKey, PodcastEpisode episode, File fileLogo, File fileMedia) throws ApiException {
        okhttp3.Call localVarCall = createPodcastEpisodeValidateBeforeCall(podcastKey, episode, fileLogo, fileMedia, null);
        Type localVarReturnType = new TypeToken<PodcastEpisode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Create podcast episode
     * @param podcastKey  (required)
     * @param episode  (required)
     * @param fileLogo  (required)
     * @param fileMedia  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createPodcastEpisodeAsync(String podcastKey, PodcastEpisode episode, File fileLogo, File fileMedia, final ApiCallback<PodcastEpisode> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPodcastEpisodeValidateBeforeCall(podcastKey, episode, fileLogo, fileMedia, _callback);
        Type localVarReturnType = new TypeToken<PodcastEpisode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePodcast
     * @param podcastKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePodcastCall(String podcastKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePodcastValidateBeforeCall(String podcastKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling deletePodcast(Async)");
        }

        return deletePodcastCall(podcastKey, _callback);

    }

    /**
     * 
     * Delete podcast
     * @param podcastKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deletePodcast(String podcastKey) throws ApiException {
        deletePodcastWithHttpInfo(podcastKey);
    }

    /**
     * 
     * Delete podcast
     * @param podcastKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePodcastWithHttpInfo(String podcastKey) throws ApiException {
        okhttp3.Call localVarCall = deletePodcastValidateBeforeCall(podcastKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete podcast
     * @param podcastKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePodcastAsync(String podcastKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePodcastValidateBeforeCall(podcastKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePodcast1
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePodcast1Call(String podcastKey, String episodeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()))
            .replace("{" + "episodeKey" + "}", localVarApiClient.escapeString(episodeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePodcast1ValidateBeforeCall(String podcastKey, String episodeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling deletePodcast1(Async)");
        }

        // verify the required parameter 'episodeKey' is set
        if (episodeKey == null) {
            throw new ApiException("Missing the required parameter 'episodeKey' when calling deletePodcast1(Async)");
        }

        return deletePodcast1Call(podcastKey, episodeKey, _callback);

    }

    /**
     * 
     * Delete podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public void deletePodcast1(String podcastKey, String episodeKey) throws ApiException {
        deletePodcast1WithHttpInfo(podcastKey, episodeKey);
    }

    /**
     * 
     * Delete podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deletePodcast1WithHttpInfo(String podcastKey, String episodeKey) throws ApiException {
        okhttp3.Call localVarCall = deletePodcast1ValidateBeforeCall(podcastKey, episodeKey, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     *  (asynchronously)
     * Delete podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deletePodcast1Async(String podcastKey, String episodeKey, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePodcast1ValidateBeforeCall(podcastKey, episodeKey, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPartnerAggregatorStations
     * @param page  (optional, default to 1)
     * @param hitsPerPage  (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerAggregatorStationsCall(String page, String hitsPerPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/stations/list";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (hitsPerPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hitsPerPage", hitsPerPage));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPartnerAggregatorStationsValidateBeforeCall(String page, String hitsPerPage, final ApiCallback _callback) throws ApiException {
        return getPartnerAggregatorStationsCall(page, hitsPerPage, _callback);

    }

    /**
     * 
     * List stations
     * @param page  (optional, default to 1)
     * @param hitsPerPage  (optional, default to 10)
     * @return StationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StationList getPartnerAggregatorStations(String page, String hitsPerPage) throws ApiException {
        ApiResponse<StationList> localVarResp = getPartnerAggregatorStationsWithHttpInfo(page, hitsPerPage);
        return localVarResp.getData();
    }

    /**
     * 
     * List stations
     * @param page  (optional, default to 1)
     * @param hitsPerPage  (optional, default to 10)
     * @return ApiResponse&lt;StationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StationList> getPartnerAggregatorStationsWithHttpInfo(String page, String hitsPerPage) throws ApiException {
        okhttp3.Call localVarCall = getPartnerAggregatorStationsValidateBeforeCall(page, hitsPerPage, null);
        Type localVarReturnType = new TypeToken<StationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * List stations
     * @param page  (optional, default to 1)
     * @param hitsPerPage  (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPartnerAggregatorStationsAsync(String page, String hitsPerPage, final ApiCallback<StationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPartnerAggregatorStationsValidateBeforeCall(page, hitsPerPage, _callback);
        Type localVarReturnType = new TypeToken<StationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcast
     * @param podcastKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastCall(String podcastKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastValidateBeforeCall(String podcastKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling getPodcast(Async)");
        }

        return getPodcastCall(podcastKey, _callback);

    }

    /**
     * 
     * Get podcast
     * @param podcastKey  (required)
     * @return Podcast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Podcast getPodcast(String podcastKey) throws ApiException {
        ApiResponse<Podcast> localVarResp = getPodcastWithHttpInfo(podcastKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Get podcast
     * @param podcastKey  (required)
     * @return ApiResponse&lt;Podcast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Podcast> getPodcastWithHttpInfo(String podcastKey) throws ApiException {
        okhttp3.Call localVarCall = getPodcastValidateBeforeCall(podcastKey, null);
        Type localVarReturnType = new TypeToken<Podcast>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get podcast
     * @param podcastKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastAsync(String podcastKey, final ApiCallback<Podcast> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastValidateBeforeCall(podcastKey, _callback);
        Type localVarReturnType = new TypeToken<Podcast>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPodcastCategoriesCall(_callback);

    }

    /**
     * 
     * Get the list of Categories that can be used to filter podcasts in the search podcasts request
     * @return List&lt;PodcastCategory&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<PodcastCategory> getPodcastCategories() throws ApiException {
        ApiResponse<List<PodcastCategory>> localVarResp = getPodcastCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Categories that can be used to filter podcasts in the search podcasts request
     * @return ApiResponse&lt;List&lt;PodcastCategory&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PodcastCategory>> getPodcastCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPodcastCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<PodcastCategory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Categories that can be used to filter podcasts in the search podcasts request
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastCategoriesAsync(final ApiCallback<List<PodcastCategory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<PodcastCategory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPodcastCountriesCall(_callback);

    }

    /**
     * 
     * Get the list of Countries that can be used to filter podcasts in the search podcasts request
     * @return List&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Country> getPodcastCountries() throws ApiException {
        ApiResponse<List<Country>> localVarResp = getPodcastCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Countries that can be used to filter podcasts in the search podcasts request
     * @return ApiResponse&lt;List&lt;Country&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Country>> getPodcastCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPodcastCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Countries that can be used to filter podcasts in the search podcasts request
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastCountriesAsync(final ApiCallback<List<Country>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastEpisode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastEpisodeCall(String podcastKey, String episodeKey, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()))
            .replace("{" + "episodeKey" + "}", localVarApiClient.escapeString(episodeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastEpisodeValidateBeforeCall(String podcastKey, String episodeKey, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling getPodcastEpisode(Async)");
        }

        // verify the required parameter 'episodeKey' is set
        if (episodeKey == null) {
            throw new ApiException("Missing the required parameter 'episodeKey' when calling getPodcastEpisode(Async)");
        }

        return getPodcastEpisodeCall(podcastKey, episodeKey, _callback);

    }

    /**
     * 
     * Get podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @return PodcastEpisode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PodcastEpisode getPodcastEpisode(String podcastKey, String episodeKey) throws ApiException {
        ApiResponse<PodcastEpisode> localVarResp = getPodcastEpisodeWithHttpInfo(podcastKey, episodeKey);
        return localVarResp.getData();
    }

    /**
     * 
     * Get podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @return ApiResponse&lt;PodcastEpisode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastEpisode> getPodcastEpisodeWithHttpInfo(String podcastKey, String episodeKey) throws ApiException {
        okhttp3.Call localVarCall = getPodcastEpisodeValidateBeforeCall(podcastKey, episodeKey, null);
        Type localVarReturnType = new TypeToken<PodcastEpisode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastEpisodeAsync(String podcastKey, String episodeKey, final ApiCallback<PodcastEpisode> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastEpisodeValidateBeforeCall(podcastKey, episodeKey, _callback);
        Type localVarReturnType = new TypeToken<PodcastEpisode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastEpisodes
     * @param podcastKey  (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastEpisodesCall(String podcastKey, String limit, String offset, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}/episodes"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (offset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("offset", offset));
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastEpisodesValidateBeforeCall(String podcastKey, String limit, String offset, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling getPodcastEpisodes(Async)");
        }

        return getPodcastEpisodesCall(podcastKey, limit, offset, _callback);

    }

    /**
     * 
     * Get podcast episodes
     * @param podcastKey  (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @return PodcastEpisodeList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PodcastEpisodeList getPodcastEpisodes(String podcastKey, String limit, String offset) throws ApiException {
        ApiResponse<PodcastEpisodeList> localVarResp = getPodcastEpisodesWithHttpInfo(podcastKey, limit, offset);
        return localVarResp.getData();
    }

    /**
     * 
     * Get podcast episodes
     * @param podcastKey  (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @return ApiResponse&lt;PodcastEpisodeList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastEpisodeList> getPodcastEpisodesWithHttpInfo(String podcastKey, String limit, String offset) throws ApiException {
        okhttp3.Call localVarCall = getPodcastEpisodesValidateBeforeCall(podcastKey, limit, offset, null);
        Type localVarReturnType = new TypeToken<PodcastEpisodeList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get podcast episodes
     * @param podcastKey  (required)
     * @param limit  (optional, default to 10)
     * @param offset  (optional, default to 0)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastEpisodesAsync(String podcastKey, String limit, String offset, final ApiCallback<PodcastEpisodeList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastEpisodesValidateBeforeCall(podcastKey, limit, offset, _callback);
        Type localVarReturnType = new TypeToken<PodcastEpisodeList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPodcastLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPodcastLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getPodcastLanguagesCall(_callback);

    }

    /**
     * 
     * Get the list of Languages that can be used to filter podcasts in the search podcasts request
     * @return List&lt;Language&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Language> getPodcastLanguages() throws ApiException {
        ApiResponse<List<Language>> localVarResp = getPodcastLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Languages that can be used to filter podcasts in the search podcasts request
     * @return ApiResponse&lt;List&lt;Language&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Language>> getPodcastLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getPodcastLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Language>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Languages that can be used to filter podcasts in the search podcasts request
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPodcastLanguagesAsync(final ApiCallback<List<Language>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPodcastLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Language>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStationCountries
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStationCountriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/stations/countries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStationCountriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStationCountriesCall(_callback);

    }

    /**
     * 
     * Get the list of Countries that can be used to filter stations in the search stations request
     * @return List&lt;Country&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Country> getStationCountries() throws ApiException {
        ApiResponse<List<Country>> localVarResp = getStationCountriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Countries that can be used to filter stations in the search stations request
     * @return ApiResponse&lt;List&lt;Country&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Country>> getStationCountriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStationCountriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Countries that can be used to filter stations in the search stations request
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStationCountriesAsync(final ApiCallback<List<Country>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStationCountriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Country>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStationGenres
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStationGenresCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/stations/genres";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStationGenresValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStationGenresCall(_callback);

    }

    /**
     * 
     * Get the list of Genres that can be used to filter stations in the search stations request
     * @return List&lt;StationGenre&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<StationGenre> getStationGenres() throws ApiException {
        ApiResponse<List<StationGenre>> localVarResp = getStationGenresWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Genres that can be used to filter stations in the search stations request
     * @return ApiResponse&lt;List&lt;StationGenre&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<StationGenre>> getStationGenresWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStationGenresValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<StationGenre>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Genres that can be used to filter stations in the search stations request
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStationGenresAsync(final ApiCallback<List<StationGenre>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStationGenresValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<StationGenre>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getStationLanguages
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStationLanguagesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/stations/languages";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStationLanguagesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getStationLanguagesCall(_callback);

    }

    /**
     * 
     * Get the list of Languages that can be used to filter stations in the search stations request
     * @return List&lt;Language&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public List<Language> getStationLanguages() throws ApiException {
        ApiResponse<List<Language>> localVarResp = getStationLanguagesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * 
     * Get the list of Languages that can be used to filter stations in the search stations request
     * @return ApiResponse&lt;List&lt;Language&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<Language>> getStationLanguagesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getStationLanguagesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<List<Language>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Get the list of Languages that can be used to filter stations in the search stations request
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getStationLanguagesAsync(final ApiCallback<List<Language>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStationLanguagesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<List<Language>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchPodcasts
     * @param podcastSearchParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPodcastsCall(PodcastSearchParams podcastSearchParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = podcastSearchParams;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchPodcastsValidateBeforeCall(PodcastSearchParams podcastSearchParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastSearchParams' is set
        if (podcastSearchParams == null) {
            throw new ApiException("Missing the required parameter 'podcastSearchParams' when calling searchPodcasts(Async)");
        }

        return searchPodcastsCall(podcastSearchParams, _callback);

    }

    /**
     * 
     * Search podcasts
     * @param podcastSearchParams  (required)
     * @return PodcastSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PodcastSearchResults searchPodcasts(PodcastSearchParams podcastSearchParams) throws ApiException {
        ApiResponse<PodcastSearchResults> localVarResp = searchPodcastsWithHttpInfo(podcastSearchParams);
        return localVarResp.getData();
    }

    /**
     * 
     * Search podcasts
     * @param podcastSearchParams  (required)
     * @return ApiResponse&lt;PodcastSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastSearchResults> searchPodcastsWithHttpInfo(PodcastSearchParams podcastSearchParams) throws ApiException {
        okhttp3.Call localVarCall = searchPodcastsValidateBeforeCall(podcastSearchParams, null);
        Type localVarReturnType = new TypeToken<PodcastSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search podcasts
     * @param podcastSearchParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchPodcastsAsync(PodcastSearchParams podcastSearchParams, final ApiCallback<PodcastSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchPodcastsValidateBeforeCall(podcastSearchParams, _callback);
        Type localVarReturnType = new TypeToken<PodcastSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchStations
     * @param stationSearchParams  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchStationsCall(StationSearchParams stationSearchParams, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = stationSearchParams;

        // create path and map variables
        String localVarPath = "/api/v2/stations/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchStationsValidateBeforeCall(StationSearchParams stationSearchParams, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stationSearchParams' is set
        if (stationSearchParams == null) {
            throw new ApiException("Missing the required parameter 'stationSearchParams' when calling searchStations(Async)");
        }

        return searchStationsCall(stationSearchParams, _callback);

    }

    /**
     * 
     * Search stations
     * @param stationSearchParams  (required)
     * @return StationSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public StationSearchResults searchStations(StationSearchParams stationSearchParams) throws ApiException {
        ApiResponse<StationSearchResults> localVarResp = searchStationsWithHttpInfo(stationSearchParams);
        return localVarResp.getData();
    }

    /**
     * 
     * Search stations
     * @param stationSearchParams  (required)
     * @return ApiResponse&lt;StationSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<StationSearchResults> searchStationsWithHttpInfo(StationSearchParams stationSearchParams) throws ApiException {
        okhttp3.Call localVarCall = searchStationsValidateBeforeCall(stationSearchParams, null);
        Type localVarReturnType = new TypeToken<StationSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Search stations
     * @param stationSearchParams  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchStationsAsync(StationSearchParams stationSearchParams, final ApiCallback<StationSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchStationsValidateBeforeCall(stationSearchParams, _callback);
        Type localVarReturnType = new TypeToken<StationSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePodcast
     * @param podcastKey  (required)
     * @param podcast  (required)
     * @param fileLogo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePodcastCall(String podcastKey, Podcast podcast, File fileLogo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fileLogo != null) {
            localVarFormParams.put("file_logo", fileLogo);
        }

        if (podcast != null) {
            localVarFormParams.put("podcast", podcast);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePodcastValidateBeforeCall(String podcastKey, Podcast podcast, File fileLogo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling updatePodcast(Async)");
        }

        // verify the required parameter 'podcast' is set
        if (podcast == null) {
            throw new ApiException("Missing the required parameter 'podcast' when calling updatePodcast(Async)");
        }

        return updatePodcastCall(podcastKey, podcast, fileLogo, _callback);

    }

    /**
     * 
     * Update podcast
     * @param podcastKey  (required)
     * @param podcast  (required)
     * @param fileLogo  (optional)
     * @return Podcast
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public Podcast updatePodcast(String podcastKey, Podcast podcast, File fileLogo) throws ApiException {
        ApiResponse<Podcast> localVarResp = updatePodcastWithHttpInfo(podcastKey, podcast, fileLogo);
        return localVarResp.getData();
    }

    /**
     * 
     * Update podcast
     * @param podcastKey  (required)
     * @param podcast  (required)
     * @param fileLogo  (optional)
     * @return ApiResponse&lt;Podcast&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Podcast> updatePodcastWithHttpInfo(String podcastKey, Podcast podcast, File fileLogo) throws ApiException {
        okhttp3.Call localVarCall = updatePodcastValidateBeforeCall(podcastKey, podcast, fileLogo, null);
        Type localVarReturnType = new TypeToken<Podcast>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update podcast
     * @param podcastKey  (required)
     * @param podcast  (required)
     * @param fileLogo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePodcastAsync(String podcastKey, Podcast podcast, File fileLogo, final ApiCallback<Podcast> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePodcastValidateBeforeCall(podcastKey, podcast, fileLogo, _callback);
        Type localVarReturnType = new TypeToken<Podcast>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePodcastEpisode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param episode  (required)
     * @param fileLogo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePodcastEpisodeCall(String podcastKey, String episodeKey, PodcastEpisode episode, File fileLogo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/api/v2/podcasts/{podcastKey}/episodes/{episodeKey}"
            .replace("{" + "podcastKey" + "}", localVarApiClient.escapeString(podcastKey.toString()))
            .replace("{" + "episodeKey" + "}", localVarApiClient.escapeString(episodeKey.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (episode != null) {
            localVarFormParams.put("episode", episode);
        }

        if (fileLogo != null) {
            localVarFormParams.put("file_logo", fileLogo);
        }

        final String[] localVarAccepts = {
            "*/*"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "multipart/form-data"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "API_Key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePodcastEpisodeValidateBeforeCall(String podcastKey, String episodeKey, PodcastEpisode episode, File fileLogo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'podcastKey' is set
        if (podcastKey == null) {
            throw new ApiException("Missing the required parameter 'podcastKey' when calling updatePodcastEpisode(Async)");
        }

        // verify the required parameter 'episodeKey' is set
        if (episodeKey == null) {
            throw new ApiException("Missing the required parameter 'episodeKey' when calling updatePodcastEpisode(Async)");
        }

        // verify the required parameter 'episode' is set
        if (episode == null) {
            throw new ApiException("Missing the required parameter 'episode' when calling updatePodcastEpisode(Async)");
        }

        return updatePodcastEpisodeCall(podcastKey, episodeKey, episode, fileLogo, _callback);

    }

    /**
     * 
     * Update podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param episode  (required)
     * @param fileLogo  (optional)
     * @return PodcastEpisode
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public PodcastEpisode updatePodcastEpisode(String podcastKey, String episodeKey, PodcastEpisode episode, File fileLogo) throws ApiException {
        ApiResponse<PodcastEpisode> localVarResp = updatePodcastEpisodeWithHttpInfo(podcastKey, episodeKey, episode, fileLogo);
        return localVarResp.getData();
    }

    /**
     * 
     * Update podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param episode  (required)
     * @param fileLogo  (optional)
     * @return ApiResponse&lt;PodcastEpisode&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PodcastEpisode> updatePodcastEpisodeWithHttpInfo(String podcastKey, String episodeKey, PodcastEpisode episode, File fileLogo) throws ApiException {
        okhttp3.Call localVarCall = updatePodcastEpisodeValidateBeforeCall(podcastKey, episodeKey, episode, fileLogo, null);
        Type localVarReturnType = new TypeToken<PodcastEpisode>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Update podcast episode
     * @param podcastKey  (required)
     * @param episodeKey  (required)
     * @param episode  (required)
     * @param fileLogo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updatePodcastEpisodeAsync(String podcastKey, String episodeKey, PodcastEpisode episode, File fileLogo, final ApiCallback<PodcastEpisode> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePodcastEpisodeValidateBeforeCall(podcastKey, episodeKey, episode, fileLogo, _callback);
        Type localVarReturnType = new TypeToken<PodcastEpisode>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
