/*
 * Aggregators API Service
 * Aggregators API
 *
 * The version of the OpenAPI document: 0.6-99cfdac
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Country;
import java.io.File;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.Podcast;
import org.openapitools.client.model.PodcastCategory;
import org.openapitools.client.model.PodcastEpisode;
import org.openapitools.client.model.PodcastEpisodeList;
import org.openapitools.client.model.PodcastSearchParams;
import org.openapitools.client.model.PodcastSearchResults;
import org.openapitools.client.model.StationGenre;
import org.openapitools.client.model.StationList;
import org.openapitools.client.model.StationSearchParams;
import org.openapitools.client.model.StationSearchResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApiV2Api
 */
@Disabled
public class ApiV2ApiTest {

    private final ApiV2Api api = new ApiV2Api();

    /**
     * Create podcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPodcastTest() throws ApiException {
        File fileLogo = null;
        Podcast podcast = null;
        Podcast response = api.createPodcast(fileLogo, podcast);
        // TODO: test validations
    }

    /**
     * Create podcast episode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createPodcastEpisodeTest() throws ApiException {
        String podcastKey = null;
        PodcastEpisode episode = null;
        File fileLogo = null;
        File fileMedia = null;
        PodcastEpisode response = api.createPodcastEpisode(podcastKey, episode, fileLogo, fileMedia);
        // TODO: test validations
    }

    /**
     * Delete podcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePodcastTest() throws ApiException {
        String podcastKey = null;
        api.deletePodcast(podcastKey);
        // TODO: test validations
    }

    /**
     * Delete podcast episode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deletePodcast1Test() throws ApiException {
        String podcastKey = null;
        String episodeKey = null;
        api.deletePodcast1(podcastKey, episodeKey);
        // TODO: test validations
    }

    /**
     * List stations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPartnerAggregatorStationsTest() throws ApiException {
        String page = null;
        String hitsPerPage = null;
        StationList response = api.getPartnerAggregatorStations(page, hitsPerPage);
        // TODO: test validations
    }

    /**
     * Get podcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastTest() throws ApiException {
        String podcastKey = null;
        Podcast response = api.getPodcast(podcastKey);
        // TODO: test validations
    }

    /**
     * Get the list of Categories that can be used to filter podcasts in the search podcasts request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastCategoriesTest() throws ApiException {
        List<PodcastCategory> response = api.getPodcastCategories();
        // TODO: test validations
    }

    /**
     * Get the list of Countries that can be used to filter podcasts in the search podcasts request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastCountriesTest() throws ApiException {
        List<Country> response = api.getPodcastCountries();
        // TODO: test validations
    }

    /**
     * Get podcast episode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastEpisodeTest() throws ApiException {
        String podcastKey = null;
        String episodeKey = null;
        PodcastEpisode response = api.getPodcastEpisode(podcastKey, episodeKey);
        // TODO: test validations
    }

    /**
     * Get podcast episodes
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastEpisodesTest() throws ApiException {
        String podcastKey = null;
        String limit = null;
        String offset = null;
        PodcastEpisodeList response = api.getPodcastEpisodes(podcastKey, limit, offset);
        // TODO: test validations
    }

    /**
     * Get the list of Languages that can be used to filter podcasts in the search podcasts request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPodcastLanguagesTest() throws ApiException {
        List<Language> response = api.getPodcastLanguages();
        // TODO: test validations
    }

    /**
     * Get the list of Countries that can be used to filter stations in the search stations request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStationCountriesTest() throws ApiException {
        List<Country> response = api.getStationCountries();
        // TODO: test validations
    }

    /**
     * Get the list of Genres that can be used to filter stations in the search stations request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStationGenresTest() throws ApiException {
        List<StationGenre> response = api.getStationGenres();
        // TODO: test validations
    }

    /**
     * Get the list of Languages that can be used to filter stations in the search stations request
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStationLanguagesTest() throws ApiException {
        List<Language> response = api.getStationLanguages();
        // TODO: test validations
    }

    /**
     * Search podcasts
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchPodcastsTest() throws ApiException {
        PodcastSearchParams podcastSearchParams = null;
        PodcastSearchResults response = api.searchPodcasts(podcastSearchParams);
        // TODO: test validations
    }

    /**
     * Search stations
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchStationsTest() throws ApiException {
        StationSearchParams stationSearchParams = null;
        StationSearchResults response = api.searchStations(stationSearchParams);
        // TODO: test validations
    }

    /**
     * Update podcast
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePodcastTest() throws ApiException {
        String podcastKey = null;
        Podcast podcast = null;
        File fileLogo = null;
        Podcast response = api.updatePodcast(podcastKey, podcast, fileLogo);
        // TODO: test validations
    }

    /**
     * Update podcast episode
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updatePodcastEpisodeTest() throws ApiException {
        String podcastKey = null;
        String episodeKey = null;
        PodcastEpisode episode = null;
        File fileLogo = null;
        PodcastEpisode response = api.updatePodcastEpisode(podcastKey, episodeKey, episode, fileLogo);
        // TODO: test validations
    }

}
