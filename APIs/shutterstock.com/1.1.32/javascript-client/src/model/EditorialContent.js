/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EditorialAssets from './EditorialAssets';
import EditorialCategory from './EditorialCategory';

/**
 * The EditorialContent model module.
 * @module model/EditorialContent
 * @version 1.1.32
 */
class EditorialContent {
    /**
     * Constructs a new <code>EditorialContent</code>.
     * Metadata about editorial content
     * @alias module:model/EditorialContent
     * @param id {String} 
     */
    constructor(id) { 
        
        EditorialContent.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>EditorialContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditorialContent} obj Optional instance to populate.
     * @return {module:model/EditorialContent} The populated <code>EditorialContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditorialContent();

            if (data.hasOwnProperty('aspect')) {
                obj['aspect'] = ApiClient.convertToType(data['aspect'], 'Number');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = EditorialAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('byline')) {
                obj['byline'] = ApiClient.convertToType(data['byline'], 'String');
            }
            if (data.hasOwnProperty('caption')) {
                obj['caption'] = ApiClient.convertToType(data['caption'], 'String');
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [EditorialCategory]);
            }
            if (data.hasOwnProperty('date_taken')) {
                obj['date_taken'] = ApiClient.convertToType(data['date_taken'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('special_instructions')) {
                obj['special_instructions'] = ApiClient.convertToType(data['special_instructions'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditorialContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditorialContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EditorialContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          EditorialAssets.validateJSON(data['assets']);
        }
        // ensure the json data is a string
        if (data['byline'] && !(typeof data['byline'] === 'string' || data['byline'] instanceof String)) {
            throw new Error("Expected the field `byline` to be a primitive type in the JSON string but got " + data['byline']);
        }
        // ensure the json data is a string
        if (data['caption'] && !(typeof data['caption'] === 'string' || data['caption'] instanceof String)) {
            throw new Error("Expected the field `caption` to be a primitive type in the JSON string but got " + data['caption']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                EditorialCategory.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['special_instructions'] && !(typeof data['special_instructions'] === 'string' || data['special_instructions'] instanceof String)) {
            throw new Error("Expected the field `special_instructions` to be a primitive type in the JSON string but got " + data['special_instructions']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }

        return true;
    }


}

EditorialContent.RequiredProperties = ["id"];

/**
 * @member {Number} aspect
 */
EditorialContent.prototype['aspect'] = undefined;

/**
 * @member {module:model/EditorialAssets} assets
 */
EditorialContent.prototype['assets'] = undefined;

/**
 * @member {String} byline
 */
EditorialContent.prototype['byline'] = undefined;

/**
 * @member {String} caption
 */
EditorialContent.prototype['caption'] = undefined;

/**
 * List of categories
 * @member {Array.<module:model/EditorialCategory>} categories
 */
EditorialContent.prototype['categories'] = undefined;

/**
 * @member {Date} date_taken
 */
EditorialContent.prototype['date_taken'] = undefined;

/**
 * @member {String} description
 */
EditorialContent.prototype['description'] = undefined;

/**
 * @member {String} id
 */
EditorialContent.prototype['id'] = undefined;

/**
 * @member {Array.<String>} keywords
 */
EditorialContent.prototype['keywords'] = undefined;

/**
 * @member {String} special_instructions
 */
EditorialContent.prototype['special_instructions'] = undefined;

/**
 * @member {String} title
 */
EditorialContent.prototype['title'] = undefined;






export default EditorialContent;

