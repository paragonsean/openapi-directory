/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import UpdateCatalogCollectionCoverAsset from './UpdateCatalogCollectionCoverAsset';

/**
 * The UpdateCatalogCollection model module.
 * @module model/UpdateCatalogCollection
 * @version 1.1.32
 */
class UpdateCatalogCollection {
    /**
     * Constructs a new <code>UpdateCatalogCollection</code>.
     * @alias module:model/UpdateCatalogCollection
     */
    constructor() { 
        
        UpdateCatalogCollection.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>UpdateCatalogCollection</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/UpdateCatalogCollection} obj Optional instance to populate.
     * @return {module:model/UpdateCatalogCollection} The populated <code>UpdateCatalogCollection</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new UpdateCatalogCollection();

            if (data.hasOwnProperty('cover_asset')) {
                obj['cover_asset'] = UpdateCatalogCollectionCoverAsset.constructFromObject(data['cover_asset']);
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('visibility')) {
                obj['visibility'] = ApiClient.convertToType(data['visibility'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>UpdateCatalogCollection</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>UpdateCatalogCollection</code>.
     */
    static validateJSON(data) {
        // validate the optional field `cover_asset`
        if (data['cover_asset']) { // data not null
          UpdateCatalogCollectionCoverAsset.validateJSON(data['cover_asset']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['visibility'] && !(typeof data['visibility'] === 'string' || data['visibility'] instanceof String)) {
            throw new Error("Expected the field `visibility` to be a primitive type in the JSON string but got " + data['visibility']);
        }

        return true;
    }


}



/**
 * @member {module:model/UpdateCatalogCollectionCoverAsset} cover_asset
 */
UpdateCatalogCollection.prototype['cover_asset'] = undefined;

/**
 * @member {String} name
 */
UpdateCatalogCollection.prototype['name'] = undefined;

/**
 * @member {module:model/UpdateCatalogCollection.VisibilityEnum} visibility
 */
UpdateCatalogCollection.prototype['visibility'] = undefined;





/**
 * Allowed values for the <code>visibility</code> property.
 * @enum {String}
 * @readonly
 */
UpdateCatalogCollection['VisibilityEnum'] = {

    /**
     * value: "private"
     * @const
     */
    "private": "private",

    /**
     * value: "public"
     * @const
     */
    "public": "public"
};



export default UpdateCatalogCollection;

