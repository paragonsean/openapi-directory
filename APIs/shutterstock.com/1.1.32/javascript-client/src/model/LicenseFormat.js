/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseFormat model module.
 * @module model/LicenseFormat
 * @version 1.1.32
 */
class LicenseFormat {
    /**
     * Constructs a new <code>LicenseFormat</code>.
     * Description of a license
     * @alias module:model/LicenseFormat
     */
    constructor() { 
        
        LicenseFormat.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>LicenseFormat</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseFormat} obj Optional instance to populate.
     * @return {module:model/LicenseFormat} The populated <code>LicenseFormat</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseFormat();

            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('min_resolution')) {
                obj['min_resolution'] = ApiClient.convertToType(data['min_resolution'], 'Number');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseFormat</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseFormat</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}



/**
 * Description of the license
 * @member {String} description
 */
LicenseFormat.prototype['description'] = undefined;

/**
 * Format or extension of the media, such as mpeg for videos or jpeg for images
 * @member {String} format
 */
LicenseFormat.prototype['format'] = undefined;

/**
 * Media type of the license
 * @member {module:model/LicenseFormat.MediaTypeEnum} media_type
 */
LicenseFormat.prototype['media_type'] = undefined;

/**
 * Width of the media, in pixels, allowed by this license
 * @member {Number} min_resolution
 */
LicenseFormat.prototype['min_resolution'] = undefined;

/**
 * Keyword that details the size of the media, such as hd or sd for video, huge or vector for images
 * @member {String} size
 */
LicenseFormat.prototype['size'] = undefined;





/**
 * Allowed values for the <code>media_type</code> property.
 * @enum {String}
 * @readonly
 */
LicenseFormat['MediaTypeEnum'] = {

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "video"
     * @const
     */
    "video": "video",

    /**
     * value: "audio"
     * @const
     */
    "audio": "audio",

    /**
     * value: "editorial"
     * @const
     */
    "editorial": "editorial"
};



export default LicenseFormat;

