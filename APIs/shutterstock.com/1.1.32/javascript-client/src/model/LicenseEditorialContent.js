/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseEditorialContent model module.
 * @module model/LicenseEditorialContent
 * @version 1.1.32
 */
class LicenseEditorialContent {
    /**
     * Constructs a new <code>LicenseEditorialContent</code>.
     * Individual editorial content to license
     * @alias module:model/LicenseEditorialContent
     * @param editorialId {String} Editorial ID
     * @param license {String} License agreement to use for licensing
     */
    constructor(editorialId, license) { 
        
        LicenseEditorialContent.initialize(this, editorialId, license);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, editorialId, license) { 
        obj['editorial_id'] = editorialId;
        obj['license'] = license;
        obj['size'] = 'original';
    }

    /**
     * Constructs a <code>LicenseEditorialContent</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseEditorialContent} obj Optional instance to populate.
     * @return {module:model/LicenseEditorialContent} The populated <code>LicenseEditorialContent</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseEditorialContent();

            if (data.hasOwnProperty('editorial_id')) {
                obj['editorial_id'] = ApiClient.convertToType(data['editorial_id'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseEditorialContent</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseEditorialContent</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseEditorialContent.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['editorial_id'] && !(typeof data['editorial_id'] === 'string' || data['editorial_id'] instanceof String)) {
            throw new Error("Expected the field `editorial_id` to be a primitive type in the JSON string but got " + data['editorial_id']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }

        return true;
    }


}

LicenseEditorialContent.RequiredProperties = ["editorial_id", "license"];

/**
 * Editorial ID
 * @member {String} editorial_id
 */
LicenseEditorialContent.prototype['editorial_id'] = undefined;

/**
 * License agreement to use for licensing
 * @member {String} license
 */
LicenseEditorialContent.prototype['license'] = undefined;

/**
 * Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
 * @member {Object} metadata
 */
LicenseEditorialContent.prototype['metadata'] = undefined;

/**
 * Asset size to download
 * @member {module:model/LicenseEditorialContent.SizeEnum} size
 * @default 'original'
 */
LicenseEditorialContent.prototype['size'] = 'original';





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
LicenseEditorialContent['SizeEnum'] = {

    /**
     * value: "small"
     * @const
     */
    "small": "small",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "original"
     * @const
     */
    "original": "original"
};



export default LicenseEditorialContent;

