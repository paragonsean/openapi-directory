/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ImageSizeDetails model module.
 * @module model/ImageSizeDetails
 * @version 1.1.32
 */
class ImageSizeDetails {
    /**
     * Constructs a new <code>ImageSizeDetails</code>.
     * Image size information
     * @alias module:model/ImageSizeDetails
     */
    constructor() { 
        
        ImageSizeDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageSizeDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageSizeDetails} obj Optional instance to populate.
     * @return {module:model/ImageSizeDetails} The populated <code>ImageSizeDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageSizeDetails();

            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('dpi')) {
                obj['dpi'] = ApiClient.convertToType(data['dpi'], 'Number');
            }
            if (data.hasOwnProperty('file_size')) {
                obj['file_size'] = ApiClient.convertToType(data['file_size'], 'Number');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('is_licensable')) {
                obj['is_licensable'] = ApiClient.convertToType(data['is_licensable'], 'Boolean');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageSizeDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageSizeDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }

        return true;
    }


}



/**
 * Display name of this image size
 * @member {String} display_name
 */
ImageSizeDetails.prototype['display_name'] = undefined;

/**
 * @member {Number} dpi
 */
ImageSizeDetails.prototype['dpi'] = undefined;

/**
 * File size (in bytes) of this image size
 * @member {Number} file_size
 */
ImageSizeDetails.prototype['file_size'] = undefined;

/**
 * Format of this image size
 * @member {String} format
 */
ImageSizeDetails.prototype['format'] = undefined;

/**
 * Height of this image size
 * @member {Number} height
 */
ImageSizeDetails.prototype['height'] = undefined;

/**
 * Whether or not this image can be licensed in this image size
 * @member {Boolean} is_licensable
 */
ImageSizeDetails.prototype['is_licensable'] = undefined;

/**
 * Width of this image size
 * @member {Number} width
 */
ImageSizeDetails.prototype['width'] = undefined;






export default ImageSizeDetails;

