/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Url from './Url';

/**
 * The LicenseEditorialContentResult model module.
 * @module model/LicenseEditorialContentResult
 * @version 1.1.32
 */
class LicenseEditorialContentResult {
    /**
     * Constructs a new <code>LicenseEditorialContentResult</code>.
     * The response to a licensing request for editorial content
     * @alias module:model/LicenseEditorialContentResult
     * @param editorialId {String} Editorial ID
     */
    constructor(editorialId) { 
        
        LicenseEditorialContentResult.initialize(this, editorialId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, editorialId) { 
        obj['editorial_id'] = editorialId;
    }

    /**
     * Constructs a <code>LicenseEditorialContentResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseEditorialContentResult} obj Optional instance to populate.
     * @return {module:model/LicenseEditorialContentResult} The populated <code>LicenseEditorialContentResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseEditorialContentResult();

            if (data.hasOwnProperty('allotment_charge')) {
                obj['allotment_charge'] = ApiClient.convertToType(data['allotment_charge'], 'Number');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = Url.constructFromObject(data['download']);
            }
            if (data.hasOwnProperty('editorial_id')) {
                obj['editorial_id'] = ApiClient.convertToType(data['editorial_id'], 'String');
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseEditorialContentResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseEditorialContentResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseEditorialContentResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `download`
        if (data['download']) { // data not null
          Url.validateJSON(data['download']);
        }
        // ensure the json data is a string
        if (data['editorial_id'] && !(typeof data['editorial_id'] === 'string' || data['editorial_id'] instanceof String)) {
            throw new Error("Expected the field `editorial_id` to be a primitive type in the JSON string but got " + data['editorial_id']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }

        return true;
    }


}

LicenseEditorialContentResult.RequiredProperties = ["editorial_id"];

/**
 * For pre-paid plans, how many credits were used for the item license
 * @member {Number} allotment_charge
 */
LicenseEditorialContentResult.prototype['allotment_charge'] = undefined;

/**
 * @member {module:model/Url} download
 */
LicenseEditorialContentResult.prototype['download'] = undefined;

/**
 * Editorial ID
 * @member {String} editorial_id
 */
LicenseEditorialContentResult.prototype['editorial_id'] = undefined;

/**
 * @member {String} error
 */
LicenseEditorialContentResult.prototype['error'] = undefined;






export default LicenseEditorialContentResult;

