/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageSizeDetails from './ImageSizeDetails';
import Thumbnail from './Thumbnail';

/**
 * The ImageAssets model module.
 * @module model/ImageAssets
 * @version 1.1.32
 */
class ImageAssets {
    /**
     * Constructs a new <code>ImageAssets</code>.
     * Information about the assets that are part of an image
     * @alias module:model/ImageAssets
     */
    constructor() { 
        
        ImageAssets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ImageAssets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ImageAssets} obj Optional instance to populate.
     * @return {module:model/ImageAssets} The populated <code>ImageAssets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ImageAssets();

            if (data.hasOwnProperty('huge_jpg')) {
                obj['huge_jpg'] = ImageSizeDetails.constructFromObject(data['huge_jpg']);
            }
            if (data.hasOwnProperty('huge_thumb')) {
                obj['huge_thumb'] = Thumbnail.constructFromObject(data['huge_thumb']);
            }
            if (data.hasOwnProperty('large_thumb')) {
                obj['large_thumb'] = Thumbnail.constructFromObject(data['large_thumb']);
            }
            if (data.hasOwnProperty('medium_jpg')) {
                obj['medium_jpg'] = ImageSizeDetails.constructFromObject(data['medium_jpg']);
            }
            if (data.hasOwnProperty('preview')) {
                obj['preview'] = Thumbnail.constructFromObject(data['preview']);
            }
            if (data.hasOwnProperty('preview_1000')) {
                obj['preview_1000'] = Thumbnail.constructFromObject(data['preview_1000']);
            }
            if (data.hasOwnProperty('preview_1500')) {
                obj['preview_1500'] = Thumbnail.constructFromObject(data['preview_1500']);
            }
            if (data.hasOwnProperty('small_jpg')) {
                obj['small_jpg'] = ImageSizeDetails.constructFromObject(data['small_jpg']);
            }
            if (data.hasOwnProperty('small_thumb')) {
                obj['small_thumb'] = Thumbnail.constructFromObject(data['small_thumb']);
            }
            if (data.hasOwnProperty('supersize_jpg')) {
                obj['supersize_jpg'] = ImageSizeDetails.constructFromObject(data['supersize_jpg']);
            }
            if (data.hasOwnProperty('vector_eps')) {
                obj['vector_eps'] = ImageSizeDetails.constructFromObject(data['vector_eps']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ImageAssets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ImageAssets</code>.
     */
    static validateJSON(data) {
        // validate the optional field `huge_jpg`
        if (data['huge_jpg']) { // data not null
          ImageSizeDetails.validateJSON(data['huge_jpg']);
        }
        // validate the optional field `huge_thumb`
        if (data['huge_thumb']) { // data not null
          Thumbnail.validateJSON(data['huge_thumb']);
        }
        // validate the optional field `large_thumb`
        if (data['large_thumb']) { // data not null
          Thumbnail.validateJSON(data['large_thumb']);
        }
        // validate the optional field `medium_jpg`
        if (data['medium_jpg']) { // data not null
          ImageSizeDetails.validateJSON(data['medium_jpg']);
        }
        // validate the optional field `preview`
        if (data['preview']) { // data not null
          Thumbnail.validateJSON(data['preview']);
        }
        // validate the optional field `preview_1000`
        if (data['preview_1000']) { // data not null
          Thumbnail.validateJSON(data['preview_1000']);
        }
        // validate the optional field `preview_1500`
        if (data['preview_1500']) { // data not null
          Thumbnail.validateJSON(data['preview_1500']);
        }
        // validate the optional field `small_jpg`
        if (data['small_jpg']) { // data not null
          ImageSizeDetails.validateJSON(data['small_jpg']);
        }
        // validate the optional field `small_thumb`
        if (data['small_thumb']) { // data not null
          Thumbnail.validateJSON(data['small_thumb']);
        }
        // validate the optional field `supersize_jpg`
        if (data['supersize_jpg']) { // data not null
          ImageSizeDetails.validateJSON(data['supersize_jpg']);
        }
        // validate the optional field `vector_eps`
        if (data['vector_eps']) { // data not null
          ImageSizeDetails.validateJSON(data['vector_eps']);
        }

        return true;
    }


}



/**
 * @member {module:model/ImageSizeDetails} huge_jpg
 */
ImageAssets.prototype['huge_jpg'] = undefined;

/**
 * @member {module:model/Thumbnail} huge_thumb
 */
ImageAssets.prototype['huge_thumb'] = undefined;

/**
 * @member {module:model/Thumbnail} large_thumb
 */
ImageAssets.prototype['large_thumb'] = undefined;

/**
 * @member {module:model/ImageSizeDetails} medium_jpg
 */
ImageAssets.prototype['medium_jpg'] = undefined;

/**
 * @member {module:model/Thumbnail} preview
 */
ImageAssets.prototype['preview'] = undefined;

/**
 * @member {module:model/Thumbnail} preview_1000
 */
ImageAssets.prototype['preview_1000'] = undefined;

/**
 * @member {module:model/Thumbnail} preview_1500
 */
ImageAssets.prototype['preview_1500'] = undefined;

/**
 * @member {module:model/ImageSizeDetails} small_jpg
 */
ImageAssets.prototype['small_jpg'] = undefined;

/**
 * @member {module:model/Thumbnail} small_thumb
 */
ImageAssets.prototype['small_thumb'] = undefined;

/**
 * @member {module:model/ImageSizeDetails} supersize_jpg
 */
ImageAssets.prototype['supersize_jpg'] = undefined;

/**
 * @member {module:model/ImageSizeDetails} vector_eps
 */
ImageAssets.prototype['vector_eps'] = undefined;






export default ImageAssets;

