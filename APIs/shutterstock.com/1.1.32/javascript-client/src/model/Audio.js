/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Album from './Album';
import Artist from './Artist';
import AudioAssets from './AudioAssets';
import Contributor from './Contributor';
import ModelRelease from './ModelRelease';

/**
 * The Audio model module.
 * @module model/Audio
 * @version 1.1.32
 */
class Audio {
    /**
     * Constructs a new <code>Audio</code>.
     * Audio metadata
     * @alias module:model/Audio
     * @param contributor {module:model/Contributor} 
     * @param id {String} Shutterstock ID of this track
     * @param mediaType {String} Media type of this track; should always be \"audio\"
     */
    constructor(contributor, id, mediaType) { 
        
        Audio.initialize(this, contributor, id, mediaType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contributor, id, mediaType) { 
        obj['contributor'] = contributor;
        obj['id'] = id;
        obj['media_type'] = mediaType;
    }

    /**
     * Constructs a <code>Audio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Audio} obj Optional instance to populate.
     * @return {module:model/Audio} The populated <code>Audio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Audio();

            if (data.hasOwnProperty('added_date')) {
                obj['added_date'] = ApiClient.convertToType(data['added_date'], 'Date');
            }
            if (data.hasOwnProperty('affiliate_url')) {
                obj['affiliate_url'] = ApiClient.convertToType(data['affiliate_url'], 'String');
            }
            if (data.hasOwnProperty('album')) {
                obj['album'] = Album.constructFromObject(data['album']);
            }
            if (data.hasOwnProperty('artists')) {
                obj['artists'] = ApiClient.convertToType(data['artists'], [Artist]);
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = AudioAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('bpm')) {
                obj['bpm'] = ApiClient.convertToType(data['bpm'], 'Number');
            }
            if (data.hasOwnProperty('contributor')) {
                obj['contributor'] = Contributor.constructFromObject(data['contributor']);
            }
            if (data.hasOwnProperty('deleted_time')) {
                obj['deleted_time'] = ApiClient.convertToType(data['deleted_time'], 'Date');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('genres')) {
                obj['genres'] = ApiClient.convertToType(data['genres'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('instruments')) {
                obj['instruments'] = ApiClient.convertToType(data['instruments'], ['String']);
            }
            if (data.hasOwnProperty('is_adult')) {
                obj['is_adult'] = ApiClient.convertToType(data['is_adult'], 'Boolean');
            }
            if (data.hasOwnProperty('is_instrumental')) {
                obj['is_instrumental'] = ApiClient.convertToType(data['is_instrumental'], 'Boolean');
            }
            if (data.hasOwnProperty('isrc')) {
                obj['isrc'] = ApiClient.convertToType(data['isrc'], 'String');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = ApiClient.convertToType(data['language'], 'String');
            }
            if (data.hasOwnProperty('lyrics')) {
                obj['lyrics'] = ApiClient.convertToType(data['lyrics'], 'String');
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('model_releases')) {
                obj['model_releases'] = ApiClient.convertToType(data['model_releases'], [ModelRelease]);
            }
            if (data.hasOwnProperty('moods')) {
                obj['moods'] = ApiClient.convertToType(data['moods'], ['String']);
            }
            if (data.hasOwnProperty('published_time')) {
                obj['published_time'] = ApiClient.convertToType(data['published_time'], 'Date');
            }
            if (data.hasOwnProperty('recording_version')) {
                obj['recording_version'] = ApiClient.convertToType(data['recording_version'], 'String');
            }
            if (data.hasOwnProperty('releases')) {
                obj['releases'] = ApiClient.convertToType(data['releases'], ['String']);
            }
            if (data.hasOwnProperty('similar_artists')) {
                obj['similar_artists'] = ApiClient.convertToType(data['similar_artists'], [Artist]);
            }
            if (data.hasOwnProperty('submitted_time')) {
                obj['submitted_time'] = ApiClient.convertToType(data['submitted_time'], 'Date');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('updated_time')) {
                obj['updated_time'] = ApiClient.convertToType(data['updated_time'], 'Date');
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
            if (data.hasOwnProperty('vocal_description')) {
                obj['vocal_description'] = ApiClient.convertToType(data['vocal_description'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Audio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Audio</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Audio.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['affiliate_url'] && !(typeof data['affiliate_url'] === 'string' || data['affiliate_url'] instanceof String)) {
            throw new Error("Expected the field `affiliate_url` to be a primitive type in the JSON string but got " + data['affiliate_url']);
        }
        // validate the optional field `album`
        if (data['album']) { // data not null
          Album.validateJSON(data['album']);
        }
        if (data['artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['artists'])) {
                throw new Error("Expected the field `artists` to be an array in the JSON data but got " + data['artists']);
            }
            // validate the optional field `artists` (array)
            for (const item of data['artists']) {
                Artist.validateJSON(item);
            };
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          AudioAssets.validateJSON(data['assets']);
        }
        // validate the optional field `contributor`
        if (data['contributor']) { // data not null
          Contributor.validateJSON(data['contributor']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['genres'])) {
            throw new Error("Expected the field `genres` to be an array in the JSON data but got " + data['genres']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['instruments'])) {
            throw new Error("Expected the field `instruments` to be an array in the JSON data but got " + data['instruments']);
        }
        // ensure the json data is a string
        if (data['isrc'] && !(typeof data['isrc'] === 'string' || data['isrc'] instanceof String)) {
            throw new Error("Expected the field `isrc` to be a primitive type in the JSON string but got " + data['isrc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['language'] && !(typeof data['language'] === 'string' || data['language'] instanceof String)) {
            throw new Error("Expected the field `language` to be a primitive type in the JSON string but got " + data['language']);
        }
        // ensure the json data is a string
        if (data['lyrics'] && !(typeof data['lyrics'] === 'string' || data['lyrics'] instanceof String)) {
            throw new Error("Expected the field `lyrics` to be a primitive type in the JSON string but got " + data['lyrics']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        if (data['model_releases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['model_releases'])) {
                throw new Error("Expected the field `model_releases` to be an array in the JSON data but got " + data['model_releases']);
            }
            // validate the optional field `model_releases` (array)
            for (const item of data['model_releases']) {
                ModelRelease.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['moods'])) {
            throw new Error("Expected the field `moods` to be an array in the JSON data but got " + data['moods']);
        }
        // ensure the json data is a string
        if (data['recording_version'] && !(typeof data['recording_version'] === 'string' || data['recording_version'] instanceof String)) {
            throw new Error("Expected the field `recording_version` to be a primitive type in the JSON string but got " + data['recording_version']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['releases'])) {
            throw new Error("Expected the field `releases` to be an array in the JSON data but got " + data['releases']);
        }
        if (data['similar_artists']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['similar_artists'])) {
                throw new Error("Expected the field `similar_artists` to be an array in the JSON data but got " + data['similar_artists']);
            }
            // validate the optional field `similar_artists` (array)
            for (const item of data['similar_artists']) {
                Artist.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }
        // ensure the json data is a string
        if (data['vocal_description'] && !(typeof data['vocal_description'] === 'string' || data['vocal_description'] instanceof String)) {
            throw new Error("Expected the field `vocal_description` to be a primitive type in the JSON string but got " + data['vocal_description']);
        }

        return true;
    }


}

Audio.RequiredProperties = ["contributor", "id", "media_type"];

/**
 * Date this track was added to the Shutterstock library
 * @member {Date} added_date
 */
Audio.prototype['added_date'] = undefined;

/**
 * Affiliate referral link; appears only for registered affiliate partners
 * @member {String} affiliate_url
 */
Audio.prototype['affiliate_url'] = undefined;

/**
 * @member {module:model/Album} album
 */
Audio.prototype['album'] = undefined;

/**
 * List of artists
 * @member {Array.<module:model/Artist>} artists
 */
Audio.prototype['artists'] = undefined;

/**
 * @member {module:model/AudioAssets} assets
 */
Audio.prototype['assets'] = undefined;

/**
 * BPM (beats per minute) of this track
 * @member {Number} bpm
 */
Audio.prototype['bpm'] = undefined;

/**
 * @member {module:model/Contributor} contributor
 */
Audio.prototype['contributor'] = undefined;

/**
 * @member {Date} deleted_time
 */
Audio.prototype['deleted_time'] = undefined;

/**
 * Description of this track
 * @member {String} description
 */
Audio.prototype['description'] = undefined;

/**
 * Duration of this track in seconds
 * @member {Number} duration
 */
Audio.prototype['duration'] = undefined;

/**
 * List of all genres for this track
 * @member {Array.<String>} genres
 */
Audio.prototype['genres'] = undefined;

/**
 * Shutterstock ID of this track
 * @member {String} id
 */
Audio.prototype['id'] = undefined;

/**
 * List of all instruments that appear in this track
 * @member {Array.<String>} instruments
 */
Audio.prototype['instruments'] = undefined;

/**
 * Whether or not this track contains adult content
 * @member {Boolean} is_adult
 */
Audio.prototype['is_adult'] = undefined;

/**
 * Whether or not this track is purely instrumental (lacking lyrics)
 * @member {Boolean} is_instrumental
 */
Audio.prototype['is_instrumental'] = undefined;

/**
 * 
 * @member {String} isrc
 */
Audio.prototype['isrc'] = undefined;

/**
 * List of all keywords for this track
 * @member {Array.<String>} keywords
 */
Audio.prototype['keywords'] = undefined;

/**
 * Language of this track's lyrics
 * @member {String} language
 */
Audio.prototype['language'] = undefined;

/**
 * Lyrics of this track
 * @member {String} lyrics
 */
Audio.prototype['lyrics'] = undefined;

/**
 * Media type of this track; should always be \"audio\"
 * @member {String} media_type
 */
Audio.prototype['media_type'] = undefined;

/**
 * List of all model releases for this track
 * @member {Array.<module:model/ModelRelease>} model_releases
 */
Audio.prototype['model_releases'] = undefined;

/**
 * List of all moods of this track
 * @member {Array.<String>} moods
 */
Audio.prototype['moods'] = undefined;

/**
 * Time this track was published
 * @member {Date} published_time
 */
Audio.prototype['published_time'] = undefined;

/**
 * Recording version of this track
 * @member {String} recording_version
 */
Audio.prototype['recording_version'] = undefined;

/**
 * List of all releases of this track
 * @member {Array.<String>} releases
 */
Audio.prototype['releases'] = undefined;

/**
 * List of all similar artists of this track
 * @member {Array.<module:model/Artist>} similar_artists
 */
Audio.prototype['similar_artists'] = undefined;

/**
 * Time this track was submitted
 * @member {Date} submitted_time
 */
Audio.prototype['submitted_time'] = undefined;

/**
 * Title of this track
 * @member {String} title
 */
Audio.prototype['title'] = undefined;

/**
 * Time this track was last updated
 * @member {Date} updated_time
 */
Audio.prototype['updated_time'] = undefined;

/**
 * 
 * @member {String} url
 */
Audio.prototype['url'] = undefined;

/**
 * Vocal description of this track
 * @member {String} vocal_description
 */
Audio.prototype['vocal_description'] = undefined;






export default Audio;

