/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Preview from './Preview';

/**
 * The Instrument model module.
 * @module model/Instrument
 * @version 1.1.32
 */
class Instrument {
    /**
     * Constructs a new <code>Instrument</code>.
     * Information about an musical instrument
     * @alias module:model/Instrument
     */
    constructor() { 
        
        Instrument.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Instrument</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Instrument} obj Optional instance to populate.
     * @return {module:model/Instrument} The populated <code>Instrument</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Instrument();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('previews')) {
                obj['previews'] = ApiClient.convertToType(data['previews'], [Preview]);
            }
            if (data.hasOwnProperty('tags')) {
                obj['tags'] = ApiClient.convertToType(data['tags'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Instrument</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Instrument</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        if (data['previews']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['previews'])) {
                throw new Error("Expected the field `previews` to be an array in the JSON data but got " + data['previews']);
            }
            // validate the optional field `previews` (array)
            for (const item of data['previews']) {
                Preview.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tags'])) {
            throw new Error("Expected the field `tags` to be an array in the JSON data but got " + data['tags']);
        }

        return true;
    }


}



/**
 * The id of the instrument
 * @member {String} id
 */
Instrument.prototype['id'] = undefined;

/**
 * Name of the instrument
 * @member {String} name
 */
Instrument.prototype['name'] = undefined;

/**
 * Preview of the instrument
 * @member {Array.<module:model/Preview>} previews
 */
Instrument.prototype['previews'] = undefined;

/**
 * List of tags
 * @member {Array.<String>} tags
 */
Instrument.prototype['tags'] = undefined;






export default Instrument;

