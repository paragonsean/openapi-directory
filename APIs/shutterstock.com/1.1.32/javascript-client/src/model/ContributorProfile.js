/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ContributorProfileSocialMedia from './ContributorProfileSocialMedia';

/**
 * The ContributorProfile model module.
 * @module model/ContributorProfile
 * @version 1.1.32
 */
class ContributorProfile {
    /**
     * Constructs a new <code>ContributorProfile</code>.
     * Contributor profile data
     * @alias module:model/ContributorProfile
     * @param id {String} Contributor ID
     */
    constructor(id) { 
        
        ContributorProfile.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>ContributorProfile</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ContributorProfile} obj Optional instance to populate.
     * @return {module:model/ContributorProfile} The populated <code>ContributorProfile</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ContributorProfile();

            if (data.hasOwnProperty('about')) {
                obj['about'] = ApiClient.convertToType(data['about'], 'String');
            }
            if (data.hasOwnProperty('contributor_type')) {
                obj['contributor_type'] = ApiClient.convertToType(data['contributor_type'], ['String']);
            }
            if (data.hasOwnProperty('display_name')) {
                obj['display_name'] = ApiClient.convertToType(data['display_name'], 'String');
            }
            if (data.hasOwnProperty('equipment')) {
                obj['equipment'] = ApiClient.convertToType(data['equipment'], ['String']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('location')) {
                obj['location'] = ApiClient.convertToType(data['location'], 'String');
            }
            if (data.hasOwnProperty('portfolio_url')) {
                obj['portfolio_url'] = ApiClient.convertToType(data['portfolio_url'], 'String');
            }
            if (data.hasOwnProperty('social_media')) {
                obj['social_media'] = ContributorProfileSocialMedia.constructFromObject(data['social_media']);
            }
            if (data.hasOwnProperty('styles')) {
                obj['styles'] = ApiClient.convertToType(data['styles'], ['String']);
            }
            if (data.hasOwnProperty('subjects')) {
                obj['subjects'] = ApiClient.convertToType(data['subjects'], ['String']);
            }
            if (data.hasOwnProperty('website')) {
                obj['website'] = ApiClient.convertToType(data['website'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ContributorProfile</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ContributorProfile</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of ContributorProfile.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['about'] && !(typeof data['about'] === 'string' || data['about'] instanceof String)) {
            throw new Error("Expected the field `about` to be a primitive type in the JSON string but got " + data['about']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contributor_type'])) {
            throw new Error("Expected the field `contributor_type` to be an array in the JSON data but got " + data['contributor_type']);
        }
        // ensure the json data is a string
        if (data['display_name'] && !(typeof data['display_name'] === 'string' || data['display_name'] instanceof String)) {
            throw new Error("Expected the field `display_name` to be a primitive type in the JSON string but got " + data['display_name']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['equipment'])) {
            throw new Error("Expected the field `equipment` to be an array in the JSON data but got " + data['equipment']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['location'] && !(typeof data['location'] === 'string' || data['location'] instanceof String)) {
            throw new Error("Expected the field `location` to be a primitive type in the JSON string but got " + data['location']);
        }
        // ensure the json data is a string
        if (data['portfolio_url'] && !(typeof data['portfolio_url'] === 'string' || data['portfolio_url'] instanceof String)) {
            throw new Error("Expected the field `portfolio_url` to be a primitive type in the JSON string but got " + data['portfolio_url']);
        }
        // validate the optional field `social_media`
        if (data['social_media']) { // data not null
          ContributorProfileSocialMedia.validateJSON(data['social_media']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['styles'])) {
            throw new Error("Expected the field `styles` to be an array in the JSON data but got " + data['styles']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['subjects'])) {
            throw new Error("Expected the field `subjects` to be an array in the JSON data but got " + data['subjects']);
        }
        // ensure the json data is a string
        if (data['website'] && !(typeof data['website'] === 'string' || data['website'] instanceof String)) {
            throw new Error("Expected the field `website` to be a primitive type in the JSON string but got " + data['website']);
        }

        return true;
    }


}

ContributorProfile.RequiredProperties = ["id"];

/**
 * Short description of the contributors' library
 * @member {String} about
 */
ContributorProfile.prototype['about'] = undefined;

/**
 * Type of content that the contributor specializes in (photographer, illustrator, etc)
 * @member {Array.<String>} contributor_type
 */
ContributorProfile.prototype['contributor_type'] = undefined;

/**
 * Preferred name to be displayed for the contributor
 * @member {String} display_name
 */
ContributorProfile.prototype['display_name'] = undefined;

/**
 * List of equipment used by the contributor (Canon EOS 5D Mark II, etc)
 * @member {Array.<String>} equipment
 */
ContributorProfile.prototype['equipment'] = undefined;

/**
 * Contributor ID
 * @member {String} id
 */
ContributorProfile.prototype['id'] = undefined;

/**
 * Country code representing the contributor's locale
 * @member {String} location
 */
ContributorProfile.prototype['location'] = undefined;

/**
 * Web URL for the contributors' profile
 * @member {String} portfolio_url
 */
ContributorProfile.prototype['portfolio_url'] = undefined;

/**
 * @member {module:model/ContributorProfileSocialMedia} social_media
 */
ContributorProfile.prototype['social_media'] = undefined;

/**
 * List of styles that the contributor specializes in (lifestyle, mixed media, etc)
 * @member {Array.<String>} styles
 */
ContributorProfile.prototype['styles'] = undefined;

/**
 * Generic list of subjects for contributors' work (food_and_drink, holiday, people, etc)
 * @member {Array.<String>} subjects
 */
ContributorProfile.prototype['subjects'] = undefined;

/**
 * Personal website for the contributor
 * @member {String} website
 */
ContributorProfile.prototype['website'] = undefined;






export default ContributorProfile;

