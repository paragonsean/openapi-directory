/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import DownloadHistoryMediaDetails from './DownloadHistoryMediaDetails';
import DownloadHistoryRevshareDetails from './DownloadHistoryRevshareDetails';
import DownloadHistoryUserDetails from './DownloadHistoryUserDetails';

/**
 * The DownloadHistory model module.
 * @module model/DownloadHistory
 * @version 1.1.32
 */
class DownloadHistory {
    /**
     * Constructs a new <code>DownloadHistory</code>.
     * Information about a downloaded media item. Applicable for all media types, only one of &#39;audio&#39;, &#39;image&#39; or &#39;video&#39; will be in a single DownloadHistory object
     * @alias module:model/DownloadHistory
     * @param downloadTime {Date} Date the media was downloaded the first time
     * @param id {String} ID of the download
     * @param license {String} The name of the license of this download
     */
    constructor(downloadTime, id, license) { 
        
        DownloadHistory.initialize(this, downloadTime, id, license);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, downloadTime, id, license) { 
        obj['download_time'] = downloadTime;
        obj['id'] = id;
        obj['license'] = license;
    }

    /**
     * Constructs a <code>DownloadHistory</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/DownloadHistory} obj Optional instance to populate.
     * @return {module:model/DownloadHistory} The populated <code>DownloadHistory</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new DownloadHistory();

            if (data.hasOwnProperty('audio')) {
                obj['audio'] = DownloadHistoryMediaDetails.constructFromObject(data['audio']);
            }
            if (data.hasOwnProperty('download_time')) {
                obj['download_time'] = ApiClient.convertToType(data['download_time'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image')) {
                obj['image'] = DownloadHistoryMediaDetails.constructFromObject(data['image']);
            }
            if (data.hasOwnProperty('is_downloadable')) {
                obj['is_downloadable'] = ApiClient.convertToType(data['is_downloadable'], 'Boolean');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('revshare')) {
                obj['revshare'] = DownloadHistoryRevshareDetails.constructFromObject(data['revshare']);
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('user')) {
                obj['user'] = DownloadHistoryUserDetails.constructFromObject(data['user']);
            }
            if (data.hasOwnProperty('video')) {
                obj['video'] = DownloadHistoryMediaDetails.constructFromObject(data['video']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>DownloadHistory</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>DownloadHistory</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of DownloadHistory.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `audio`
        if (data['audio']) { // data not null
          DownloadHistoryMediaDetails.validateJSON(data['audio']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // validate the optional field `image`
        if (data['image']) { // data not null
          DownloadHistoryMediaDetails.validateJSON(data['image']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // validate the optional field `revshare`
        if (data['revshare']) { // data not null
          DownloadHistoryRevshareDetails.validateJSON(data['revshare']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // validate the optional field `user`
        if (data['user']) { // data not null
          DownloadHistoryUserDetails.validateJSON(data['user']);
        }
        // validate the optional field `video`
        if (data['video']) { // data not null
          DownloadHistoryMediaDetails.validateJSON(data['video']);
        }

        return true;
    }


}

DownloadHistory.RequiredProperties = ["download_time", "id", "license"];

/**
 * @member {module:model/DownloadHistoryMediaDetails} audio
 */
DownloadHistory.prototype['audio'] = undefined;

/**
 * Date the media was downloaded the first time
 * @member {Date} download_time
 */
DownloadHistory.prototype['download_time'] = undefined;

/**
 * ID of the download
 * @member {String} id
 */
DownloadHistory.prototype['id'] = undefined;

/**
 * @member {module:model/DownloadHistoryMediaDetails} image
 */
DownloadHistory.prototype['image'] = undefined;

/**
 * Specifies if the media is downloadable via its respective downloads endpoint
 * @member {Boolean} is_downloadable
 */
DownloadHistory.prototype['is_downloadable'] = undefined;

/**
 * The name of the license of this download
 * @member {String} license
 */
DownloadHistory.prototype['license'] = undefined;

/**
 * The metadata that was passed in the original licensing request
 * @member {Object} metadata
 */
DownloadHistory.prototype['metadata'] = undefined;

/**
 * @member {module:model/DownloadHistoryRevshareDetails} revshare
 */
DownloadHistory.prototype['revshare'] = undefined;

/**
 * ID of the subscription used to perform this download
 * @member {String} subscription_id
 */
DownloadHistory.prototype['subscription_id'] = undefined;

/**
 * @member {module:model/DownloadHistoryUserDetails} user
 */
DownloadHistory.prototype['user'] = undefined;

/**
 * @member {module:model/DownloadHistoryMediaDetails} video
 */
DownloadHistory.prototype['video'] = undefined;






export default DownloadHistory;

