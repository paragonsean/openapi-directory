/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The CreateAccessTokenRequest model module.
 * @module model/CreateAccessTokenRequest
 * @version 1.1.32
 */
class CreateAccessTokenRequest {
    /**
     * Constructs a new <code>CreateAccessTokenRequest</code>.
     * @alias module:model/CreateAccessTokenRequest
     * @param clientId {String} Client ID (Consumer Key) of your application
     * @param grantType {module:model/CreateAccessTokenRequest.GrantTypeEnum} Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
     */
    constructor(clientId, grantType) { 
        
        CreateAccessTokenRequest.initialize(this, clientId, grantType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, clientId, grantType) { 
        obj['client_id'] = clientId;
        obj['expires'] = false;
        obj['grant_type'] = grantType;
        obj['realm'] = 'customer';
    }

    /**
     * Constructs a <code>CreateAccessTokenRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/CreateAccessTokenRequest} obj Optional instance to populate.
     * @return {module:model/CreateAccessTokenRequest} The populated <code>CreateAccessTokenRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new CreateAccessTokenRequest();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('client_secret')) {
                obj['client_secret'] = ApiClient.convertToType(data['client_secret'], 'String');
            }
            if (data.hasOwnProperty('code')) {
                obj['code'] = ApiClient.convertToType(data['code'], 'String');
            }
            if (data.hasOwnProperty('expires')) {
                obj['expires'] = ApiClient.convertToType(data['expires'], 'Boolean');
            }
            if (data.hasOwnProperty('grant_type')) {
                obj['grant_type'] = ApiClient.convertToType(data['grant_type'], 'String');
            }
            if (data.hasOwnProperty('realm')) {
                obj['realm'] = ApiClient.convertToType(data['realm'], 'String');
            }
            if (data.hasOwnProperty('refresh_token')) {
                obj['refresh_token'] = ApiClient.convertToType(data['refresh_token'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>CreateAccessTokenRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>CreateAccessTokenRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of CreateAccessTokenRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['client_secret'] && !(typeof data['client_secret'] === 'string' || data['client_secret'] instanceof String)) {
            throw new Error("Expected the field `client_secret` to be a primitive type in the JSON string but got " + data['client_secret']);
        }
        // ensure the json data is a string
        if (data['code'] && !(typeof data['code'] === 'string' || data['code'] instanceof String)) {
            throw new Error("Expected the field `code` to be a primitive type in the JSON string but got " + data['code']);
        }
        // ensure the json data is a string
        if (data['grant_type'] && !(typeof data['grant_type'] === 'string' || data['grant_type'] instanceof String)) {
            throw new Error("Expected the field `grant_type` to be a primitive type in the JSON string but got " + data['grant_type']);
        }
        // ensure the json data is a string
        if (data['realm'] && !(typeof data['realm'] === 'string' || data['realm'] instanceof String)) {
            throw new Error("Expected the field `realm` to be a primitive type in the JSON string but got " + data['realm']);
        }
        // ensure the json data is a string
        if (data['refresh_token'] && !(typeof data['refresh_token'] === 'string' || data['refresh_token'] instanceof String)) {
            throw new Error("Expected the field `refresh_token` to be a primitive type in the JSON string but got " + data['refresh_token']);
        }

        return true;
    }


}

CreateAccessTokenRequest.RequiredProperties = ["client_id", "grant_type"];

/**
 * Client ID (Consumer Key) of your application
 * @member {String} client_id
 */
CreateAccessTokenRequest.prototype['client_id'] = undefined;

/**
 * Client Secret (Consumer Secret) of your application
 * @member {String} client_secret
 */
CreateAccessTokenRequest.prototype['client_secret'] = undefined;

/**
 * Response code from the /oauth/authorize flow; required if grant_type=authorization_code
 * @member {String} code
 */
CreateAccessTokenRequest.prototype['code'] = undefined;

/**
 * Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token
 * @member {Boolean} expires
 * @default false
 */
CreateAccessTokenRequest.prototype['expires'] = false;

/**
 * Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants
 * @member {module:model/CreateAccessTokenRequest.GrantTypeEnum} grant_type
 */
CreateAccessTokenRequest.prototype['grant_type'] = undefined;

/**
 * User type to be authorized (usually 'customer')
 * @member {module:model/CreateAccessTokenRequest.RealmEnum} realm
 * @default 'customer'
 */
CreateAccessTokenRequest.prototype['realm'] = 'customer';

/**
 * Pass this along with grant_type=refresh_token to get a fresh access token
 * @member {String} refresh_token
 */
CreateAccessTokenRequest.prototype['refresh_token'] = undefined;





/**
 * Allowed values for the <code>grant_type</code> property.
 * @enum {String}
 * @readonly
 */
CreateAccessTokenRequest['GrantTypeEnum'] = {

    /**
     * value: "authorization_code"
     * @const
     */
    "authorization_code": "authorization_code",

    /**
     * value: "client_credentials"
     * @const
     */
    "client_credentials": "client_credentials",

    /**
     * value: "refresh_token"
     * @const
     */
    "refresh_token": "refresh_token"
};


/**
 * Allowed values for the <code>realm</code> property.
 * @enum {String}
 * @readonly
 */
CreateAccessTokenRequest['RealmEnum'] = {

    /**
     * value: "customer"
     * @const
     */
    "customer": "customer",

    /**
     * value: "contributor"
     * @const
     */
    "contributor": "contributor"
};



export default CreateAccessTokenRequest;

