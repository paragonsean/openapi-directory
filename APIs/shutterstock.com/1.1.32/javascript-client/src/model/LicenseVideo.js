/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cookie from './Cookie';

/**
 * The LicenseVideo model module.
 * @module model/LicenseVideo
 * @version 1.1.32
 */
class LicenseVideo {
    /**
     * Constructs a new <code>LicenseVideo</code>.
     * Data required to license a video
     * @alias module:model/LicenseVideo
     * @param videoId {String} ID of the video being licensed
     */
    constructor(videoId) { 
        
        LicenseVideo.initialize(this, videoId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, videoId) { 
        obj['video_id'] = videoId;
    }

    /**
     * Constructs a <code>LicenseVideo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseVideo} obj Optional instance to populate.
     * @return {module:model/LicenseVideo} The populated <code>LicenseVideo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseVideo();

            if (data.hasOwnProperty('auth_cookie')) {
                obj['auth_cookie'] = Cookie.constructFromObject(data['auth_cookie']);
            }
            if (data.hasOwnProperty('editorial_acknowledgement')) {
                obj['editorial_acknowledgement'] = ApiClient.convertToType(data['editorial_acknowledgement'], 'Boolean');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('search_id')) {
                obj['search_id'] = ApiClient.convertToType(data['search_id'], 'String');
            }
            if (data.hasOwnProperty('show_modal')) {
                obj['show_modal'] = ApiClient.convertToType(data['show_modal'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('video_id')) {
                obj['video_id'] = ApiClient.convertToType(data['video_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseVideo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseVideo</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseVideo.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `auth_cookie`
        if (data['auth_cookie']) { // data not null
          Cookie.validateJSON(data['auth_cookie']);
        }
        // ensure the json data is a string
        if (data['search_id'] && !(typeof data['search_id'] === 'string' || data['search_id'] instanceof String)) {
            throw new Error("Expected the field `search_id` to be a primitive type in the JSON string but got " + data['search_id']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // ensure the json data is a string
        if (data['video_id'] && !(typeof data['video_id'] === 'string' || data['video_id'] instanceof String)) {
            throw new Error("Expected the field `video_id` to be a primitive type in the JSON string but got " + data['video_id']);
        }

        return true;
    }


}

LicenseVideo.RequiredProperties = ["video_id"];

/**
 * @member {module:model/Cookie} auth_cookie
 */
LicenseVideo.prototype['auth_cookie'] = undefined;

/**
 * Whether or not this item is editorial content
 * @member {Boolean} editorial_acknowledgement
 */
LicenseVideo.prototype['editorial_acknowledgement'] = undefined;

/**
 * Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
 * @member {Object} metadata
 */
LicenseVideo.prototype['metadata'] = undefined;

/**
 * Retail price amount as a floating-point number in the transaction currency, such as 12.34; only for rev-share partners
 * @member {Number} price
 */
LicenseVideo.prototype['price'] = undefined;

/**
 * ID of the search that led to this licensing event
 * @member {String} search_id
 */
LicenseVideo.prototype['search_id'] = undefined;

/**
 * (Deprecated)
 * @member {Boolean} show_modal
 */
LicenseVideo.prototype['show_modal'] = undefined;

/**
 * Size of the video being licensed
 * @member {module:model/LicenseVideo.SizeEnum} size
 */
LicenseVideo.prototype['size'] = undefined;

/**
 * ID of the subscription used for this license
 * @member {String} subscription_id
 */
LicenseVideo.prototype['subscription_id'] = undefined;

/**
 * ID of the video being licensed
 * @member {String} video_id
 */
LicenseVideo.prototype['video_id'] = undefined;





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
LicenseVideo['SizeEnum'] = {

    /**
     * value: "web"
     * @const
     */
    "web": "web",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "4k"
     * @const
     */
    "4k": "4k"
};



export default LicenseVideo;

