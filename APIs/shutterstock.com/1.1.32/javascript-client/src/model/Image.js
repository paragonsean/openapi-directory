/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import Contributor from './Contributor';
import ImageAssets from './ImageAssets';
import ImageInsights from './ImageInsights';
import Model from './Model';
import ModelRelease from './ModelRelease';

/**
 * The Image model module.
 * @module model/Image
 * @version 1.1.32
 */
class Image {
    /**
     * Constructs a new <code>Image</code>.
     * Information about an image
     * @alias module:model/Image
     * @param contributor {module:model/Contributor} 
     * @param id {String} Image ID
     * @param mediaType {String} Media type of this image, should always be \"image\"
     */
    constructor(contributor, id, mediaType) { 
        
        Image.initialize(this, contributor, id, mediaType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contributor, id, mediaType) { 
        obj['contributor'] = contributor;
        obj['id'] = id;
        obj['media_type'] = mediaType;
    }

    /**
     * Constructs a <code>Image</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Image} obj Optional instance to populate.
     * @return {module:model/Image} The populated <code>Image</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Image();

            if (data.hasOwnProperty('added_date')) {
                obj['added_date'] = ApiClient.convertToType(data['added_date'], 'Date');
            }
            if (data.hasOwnProperty('affiliate_url')) {
                obj['affiliate_url'] = ApiClient.convertToType(data['affiliate_url'], 'String');
            }
            if (data.hasOwnProperty('aspect')) {
                obj['aspect'] = ApiClient.convertToType(data['aspect'], 'Number');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = ImageAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('contributor')) {
                obj['contributor'] = Contributor.constructFromObject(data['contributor']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('has_model_release')) {
                obj['has_model_release'] = ApiClient.convertToType(data['has_model_release'], 'Boolean');
            }
            if (data.hasOwnProperty('has_property_release')) {
                obj['has_property_release'] = ApiClient.convertToType(data['has_property_release'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('image_type')) {
                obj['image_type'] = ApiClient.convertToType(data['image_type'], 'String');
            }
            if (data.hasOwnProperty('insights')) {
                obj['insights'] = ImageInsights.constructFromObject(data['insights']);
            }
            if (data.hasOwnProperty('is_adult')) {
                obj['is_adult'] = ApiClient.convertToType(data['is_adult'], 'Boolean');
            }
            if (data.hasOwnProperty('is_editorial')) {
                obj['is_editorial'] = ApiClient.convertToType(data['is_editorial'], 'Boolean');
            }
            if (data.hasOwnProperty('is_illustration')) {
                obj['is_illustration'] = ApiClient.convertToType(data['is_illustration'], 'Boolean');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('model_releases')) {
                obj['model_releases'] = ApiClient.convertToType(data['model_releases'], [ModelRelease]);
            }
            if (data.hasOwnProperty('models')) {
                obj['models'] = ApiClient.convertToType(data['models'], [Model]);
            }
            if (data.hasOwnProperty('releases')) {
                obj['releases'] = ApiClient.convertToType(data['releases'], ['String']);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Image</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Image</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Image.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['affiliate_url'] && !(typeof data['affiliate_url'] === 'string' || data['affiliate_url'] instanceof String)) {
            throw new Error("Expected the field `affiliate_url` to be a primitive type in the JSON string but got " + data['affiliate_url']);
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          ImageAssets.validateJSON(data['assets']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // validate the optional field `contributor`
        if (data['contributor']) { // data not null
          Contributor.validateJSON(data['contributor']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['image_type'] && !(typeof data['image_type'] === 'string' || data['image_type'] instanceof String)) {
            throw new Error("Expected the field `image_type` to be a primitive type in the JSON string but got " + data['image_type']);
        }
        // validate the optional field `insights`
        if (data['insights']) { // data not null
          ImageInsights.validateJSON(data['insights']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        if (data['model_releases']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['model_releases'])) {
                throw new Error("Expected the field `model_releases` to be an array in the JSON data but got " + data['model_releases']);
            }
            // validate the optional field `model_releases` (array)
            for (const item of data['model_releases']) {
                ModelRelease.validateJSON(item);
            };
        }
        if (data['models']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['models'])) {
                throw new Error("Expected the field `models` to be an array in the JSON data but got " + data['models']);
            }
            // validate the optional field `models` (array)
            for (const item of data['models']) {
                Model.validateJSON(item);
            };
        }
        // ensure the json data is an array
        if (!Array.isArray(data['releases'])) {
            throw new Error("Expected the field `releases` to be an array in the JSON data but got " + data['releases']);
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Image.RequiredProperties = ["contributor", "id", "media_type"];

/**
 * Date that the image was added by the contributor
 * @member {Date} added_date
 */
Image.prototype['added_date'] = undefined;

/**
 * Affiliate referral link; appears only for registered affiliate partners
 * @member {String} affiliate_url
 */
Image.prototype['affiliate_url'] = undefined;

/**
 * Aspect ratio of the image in decimal format, such as 0.6667
 * @member {Number} aspect
 */
Image.prototype['aspect'] = undefined;

/**
 * @member {module:model/ImageAssets} assets
 */
Image.prototype['assets'] = undefined;

/**
 * Categories that this image is a part of
 * @member {Array.<module:model/Category>} categories
 */
Image.prototype['categories'] = undefined;

/**
 * @member {module:model/Contributor} contributor
 */
Image.prototype['contributor'] = undefined;

/**
 * Detailed description of the image
 * @member {String} description
 */
Image.prototype['description'] = undefined;

/**
 * Indicates whether there are model releases for the image
 * @member {Boolean} has_model_release
 */
Image.prototype['has_model_release'] = undefined;

/**
 * Indicates whether there are property releases for the image
 * @member {Boolean} has_property_release
 */
Image.prototype['has_property_release'] = undefined;

/**
 * Image ID
 * @member {String} id
 */
Image.prototype['id'] = undefined;

/**
 * Type of image
 * @member {String} image_type
 */
Image.prototype['image_type'] = undefined;

/**
 * @member {module:model/ImageInsights} insights
 */
Image.prototype['insights'] = undefined;

/**
 * Whether or not this image contains adult content
 * @member {Boolean} is_adult
 */
Image.prototype['is_adult'] = undefined;

/**
 * Whether or not this image is editorial content
 * @member {Boolean} is_editorial
 */
Image.prototype['is_editorial'] = undefined;

/**
 * Whether or not this image is an illustration
 * @member {Boolean} is_illustration
 */
Image.prototype['is_illustration'] = undefined;

/**
 * Keywords associated with the content of this image
 * @member {Array.<String>} keywords
 */
Image.prototype['keywords'] = undefined;

/**
 * Media type of this image, should always be \"image\"
 * @member {String} media_type
 */
Image.prototype['media_type'] = undefined;

/**
 * List of model releases
 * @member {Array.<module:model/ModelRelease>} model_releases
 */
Image.prototype['model_releases'] = undefined;

/**
 * List of models
 * @member {Array.<module:model/Model>} models
 */
Image.prototype['models'] = undefined;

/**
 * List of all releases of this image
 * @member {Array.<String>} releases
 */
Image.prototype['releases'] = undefined;

/**
 * Link to image information page; included only for certain accounts
 * @member {String} url
 */
Image.prototype['url'] = undefined;






export default Image;

