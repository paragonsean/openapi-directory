/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AudioRendersFilesList model module.
 * @module model/AudioRendersFilesList
 * @version 1.1.32
 */
class AudioRendersFilesList {
    /**
     * Constructs a new <code>AudioRendersFilesList</code>.
     * Files associated with the render
     * @alias module:model/AudioRendersFilesList
     * @param bitsSample {Number} The bit depth of the audio files in bits/sample
     * @param contentType {String} The content-type of the file
     * @param downloadUrl {String} The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed
     * @param filename {String} The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file
     * @param frequencyHz {Number} The Sample rate of the audio files in Hertz (Hz)
     * @param kbitsSecond {Number} The data rate of the audio files in kilobits/second
     * @param sizeBytes {Number} Size of the file in bytes
     * @param tracks {Array.<String>} An array of track names included in the file
     */
    constructor(bitsSample, contentType, downloadUrl, filename, frequencyHz, kbitsSecond, sizeBytes, tracks) { 
        
        AudioRendersFilesList.initialize(this, bitsSample, contentType, downloadUrl, filename, frequencyHz, kbitsSecond, sizeBytes, tracks);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, bitsSample, contentType, downloadUrl, filename, frequencyHz, kbitsSecond, sizeBytes, tracks) { 
        obj['bits_sample'] = bitsSample;
        obj['content_type'] = contentType;
        obj['download_url'] = downloadUrl;
        obj['filename'] = filename;
        obj['frequency_hz'] = frequencyHz;
        obj['kbits_second'] = kbitsSecond;
        obj['size_bytes'] = sizeBytes;
        obj['tracks'] = tracks;
    }

    /**
     * Constructs a <code>AudioRendersFilesList</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRendersFilesList} obj Optional instance to populate.
     * @return {module:model/AudioRendersFilesList} The populated <code>AudioRendersFilesList</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioRendersFilesList();

            if (data.hasOwnProperty('bits_sample')) {
                obj['bits_sample'] = ApiClient.convertToType(data['bits_sample'], 'Number');
            }
            if (data.hasOwnProperty('content_type')) {
                obj['content_type'] = ApiClient.convertToType(data['content_type'], 'String');
            }
            if (data.hasOwnProperty('download_url')) {
                obj['download_url'] = ApiClient.convertToType(data['download_url'], 'String');
            }
            if (data.hasOwnProperty('filename')) {
                obj['filename'] = ApiClient.convertToType(data['filename'], 'String');
            }
            if (data.hasOwnProperty('frequency_hz')) {
                obj['frequency_hz'] = ApiClient.convertToType(data['frequency_hz'], 'Number');
            }
            if (data.hasOwnProperty('kbits_second')) {
                obj['kbits_second'] = ApiClient.convertToType(data['kbits_second'], 'Number');
            }
            if (data.hasOwnProperty('size_bytes')) {
                obj['size_bytes'] = ApiClient.convertToType(data['size_bytes'], 'Number');
            }
            if (data.hasOwnProperty('tracks')) {
                obj['tracks'] = ApiClient.convertToType(data['tracks'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioRendersFilesList</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioRendersFilesList</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioRendersFilesList.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['content_type'] && !(typeof data['content_type'] === 'string' || data['content_type'] instanceof String)) {
            throw new Error("Expected the field `content_type` to be a primitive type in the JSON string but got " + data['content_type']);
        }
        // ensure the json data is a string
        if (data['download_url'] && !(typeof data['download_url'] === 'string' || data['download_url'] instanceof String)) {
            throw new Error("Expected the field `download_url` to be a primitive type in the JSON string but got " + data['download_url']);
        }
        // ensure the json data is a string
        if (data['filename'] && !(typeof data['filename'] === 'string' || data['filename'] instanceof String)) {
            throw new Error("Expected the field `filename` to be a primitive type in the JSON string but got " + data['filename']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['tracks'])) {
            throw new Error("Expected the field `tracks` to be an array in the JSON data but got " + data['tracks']);
        }

        return true;
    }


}

AudioRendersFilesList.RequiredProperties = ["bits_sample", "content_type", "download_url", "filename", "frequency_hz", "kbits_second", "size_bytes", "tracks"];

/**
 * The bit depth of the audio files in bits/sample
 * @member {Number} bits_sample
 */
AudioRendersFilesList.prototype['bits_sample'] = undefined;

/**
 * The content-type of the file
 * @member {String} content_type
 */
AudioRendersFilesList.prototype['content_type'] = undefined;

/**
 * The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed
 * @member {String} download_url
 */
AudioRendersFilesList.prototype['download_url'] = undefined;

/**
 * The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file
 * @member {String} filename
 */
AudioRendersFilesList.prototype['filename'] = undefined;

/**
 * The Sample rate of the audio files in Hertz (Hz)
 * @member {Number} frequency_hz
 */
AudioRendersFilesList.prototype['frequency_hz'] = undefined;

/**
 * The data rate of the audio files in kilobits/second
 * @member {Number} kbits_second
 */
AudioRendersFilesList.prototype['kbits_second'] = undefined;

/**
 * Size of the file in bytes
 * @member {Number} size_bytes
 */
AudioRendersFilesList.prototype['size_bytes'] = undefined;

/**
 * An array of track names included in the file
 * @member {Array.<String>} tracks
 */
AudioRendersFilesList.prototype['tracks'] = undefined;






export default AudioRendersFilesList;

