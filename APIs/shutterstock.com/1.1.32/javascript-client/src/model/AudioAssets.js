/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioAssetDetails from './AudioAssetDetails';
import ShortsLoopsStems from './ShortsLoopsStems';

/**
 * The AudioAssets model module.
 * @module model/AudioAssets
 * @version 1.1.32
 */
class AudioAssets {
    /**
     * Constructs a new <code>AudioAssets</code>.
     * Files that are available as part of an audio asset
     * @alias module:model/AudioAssets
     */
    constructor() { 
        
        AudioAssets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioAssets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioAssets} obj Optional instance to populate.
     * @return {module:model/AudioAssets} The populated <code>AudioAssets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioAssets();

            if (data.hasOwnProperty('album_art')) {
                obj['album_art'] = AudioAssetDetails.constructFromObject(data['album_art']);
            }
            if (data.hasOwnProperty('clean_audio')) {
                obj['clean_audio'] = AudioAssetDetails.constructFromObject(data['clean_audio']);
            }
            if (data.hasOwnProperty('original_audio')) {
                obj['original_audio'] = AudioAssetDetails.constructFromObject(data['original_audio']);
            }
            if (data.hasOwnProperty('preview_mp3')) {
                obj['preview_mp3'] = AudioAssetDetails.constructFromObject(data['preview_mp3']);
            }
            if (data.hasOwnProperty('preview_ogg')) {
                obj['preview_ogg'] = AudioAssetDetails.constructFromObject(data['preview_ogg']);
            }
            if (data.hasOwnProperty('shorts_loops_stems')) {
                obj['shorts_loops_stems'] = ShortsLoopsStems.constructFromObject(data['shorts_loops_stems']);
            }
            if (data.hasOwnProperty('waveform')) {
                obj['waveform'] = AudioAssetDetails.constructFromObject(data['waveform']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioAssets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioAssets</code>.
     */
    static validateJSON(data) {
        // validate the optional field `album_art`
        if (data['album_art']) { // data not null
          AudioAssetDetails.validateJSON(data['album_art']);
        }
        // validate the optional field `clean_audio`
        if (data['clean_audio']) { // data not null
          AudioAssetDetails.validateJSON(data['clean_audio']);
        }
        // validate the optional field `original_audio`
        if (data['original_audio']) { // data not null
          AudioAssetDetails.validateJSON(data['original_audio']);
        }
        // validate the optional field `preview_mp3`
        if (data['preview_mp3']) { // data not null
          AudioAssetDetails.validateJSON(data['preview_mp3']);
        }
        // validate the optional field `preview_ogg`
        if (data['preview_ogg']) { // data not null
          AudioAssetDetails.validateJSON(data['preview_ogg']);
        }
        // validate the optional field `shorts_loops_stems`
        if (data['shorts_loops_stems']) { // data not null
          ShortsLoopsStems.validateJSON(data['shorts_loops_stems']);
        }
        // validate the optional field `waveform`
        if (data['waveform']) { // data not null
          AudioAssetDetails.validateJSON(data['waveform']);
        }

        return true;
    }


}



/**
 * @member {module:model/AudioAssetDetails} album_art
 */
AudioAssets.prototype['album_art'] = undefined;

/**
 * @member {module:model/AudioAssetDetails} clean_audio
 */
AudioAssets.prototype['clean_audio'] = undefined;

/**
 * @member {module:model/AudioAssetDetails} original_audio
 */
AudioAssets.prototype['original_audio'] = undefined;

/**
 * @member {module:model/AudioAssetDetails} preview_mp3
 */
AudioAssets.prototype['preview_mp3'] = undefined;

/**
 * @member {module:model/AudioAssetDetails} preview_ogg
 */
AudioAssets.prototype['preview_ogg'] = undefined;

/**
 * @member {module:model/ShortsLoopsStems} shorts_loops_stems
 */
AudioAssets.prototype['shorts_loops_stems'] = undefined;

/**
 * @member {module:model/AudioAssetDetails} waveform
 */
AudioAssets.prototype['waveform'] = undefined;






export default AudioAssets;

