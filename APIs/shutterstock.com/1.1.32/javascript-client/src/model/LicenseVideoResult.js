/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Price from './Price';
import Url from './Url';

/**
 * The LicenseVideoResult model module.
 * @module model/LicenseVideoResult
 * @version 1.1.32
 */
class LicenseVideoResult {
    /**
     * Constructs a new <code>LicenseVideoResult</code>.
     * The response to a licensing request for a video
     * @alias module:model/LicenseVideoResult
     * @param videoId {String} ID of the video that was licensed
     */
    constructor(videoId) { 
        
        LicenseVideoResult.initialize(this, videoId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, videoId) { 
        obj['video_id'] = videoId;
    }

    /**
     * Constructs a <code>LicenseVideoResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseVideoResult} obj Optional instance to populate.
     * @return {module:model/LicenseVideoResult} The populated <code>LicenseVideoResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseVideoResult();

            if (data.hasOwnProperty('allotment_charge')) {
                obj['allotment_charge'] = ApiClient.convertToType(data['allotment_charge'], 'Number');
            }
            if (data.hasOwnProperty('download')) {
                obj['download'] = Url.constructFromObject(data['download']);
            }
            if (data.hasOwnProperty('error')) {
                obj['error'] = ApiClient.convertToType(data['error'], 'String');
            }
            if (data.hasOwnProperty('license_id')) {
                obj['license_id'] = ApiClient.convertToType(data['license_id'], 'String');
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = Price.constructFromObject(data['price']);
            }
            if (data.hasOwnProperty('video_id')) {
                obj['video_id'] = ApiClient.convertToType(data['video_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseVideoResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseVideoResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseVideoResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `download`
        if (data['download']) { // data not null
          Url.validateJSON(data['download']);
        }
        // ensure the json data is a string
        if (data['error'] && !(typeof data['error'] === 'string' || data['error'] instanceof String)) {
            throw new Error("Expected the field `error` to be a primitive type in the JSON string but got " + data['error']);
        }
        // ensure the json data is a string
        if (data['license_id'] && !(typeof data['license_id'] === 'string' || data['license_id'] instanceof String)) {
            throw new Error("Expected the field `license_id` to be a primitive type in the JSON string but got " + data['license_id']);
        }
        // validate the optional field `price`
        if (data['price']) { // data not null
          Price.validateJSON(data['price']);
        }
        // ensure the json data is a string
        if (data['video_id'] && !(typeof data['video_id'] === 'string' || data['video_id'] instanceof String)) {
            throw new Error("Expected the field `video_id` to be a primitive type in the JSON string but got " + data['video_id']);
        }

        return true;
    }


}

LicenseVideoResult.RequiredProperties = ["video_id"];

/**
 * Number of credits that this licensing event used
 * @member {Number} allotment_charge
 */
LicenseVideoResult.prototype['allotment_charge'] = undefined;

/**
 * @member {module:model/Url} download
 */
LicenseVideoResult.prototype['download'] = undefined;

/**
 * Potential error that occurred during licensing
 * @member {String} error
 */
LicenseVideoResult.prototype['error'] = undefined;

/**
 * ID of the license event
 * @member {String} license_id
 */
LicenseVideoResult.prototype['license_id'] = undefined;

/**
 * @member {module:model/Price} price
 */
LicenseVideoResult.prototype['price'] = undefined;

/**
 * ID of the video that was licensed
 * @member {String} video_id
 */
LicenseVideoResult.prototype['video_id'] = undefined;






export default LicenseVideoResult;

