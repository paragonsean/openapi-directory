/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import EditorialCoverItem from './EditorialCoverItem';

/**
 * The EditorialImageLivefeed model module.
 * @module model/EditorialImageLivefeed
 * @version 1.1.32
 */
class EditorialImageLivefeed {
    /**
     * Constructs a new <code>EditorialImageLivefeed</code>.
     * Metadata about editorial livefeed
     * @alias module:model/EditorialImageLivefeed
     * @param id {String} Livefeed ID
     * @param name {String} Name of the livefeed
     * @param totalItemCount {Number} Total count of items in the livefeed
     */
    constructor(id, name, totalItemCount) { 
        
        EditorialImageLivefeed.initialize(this, id, name, totalItemCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, name, totalItemCount) { 
        obj['id'] = id;
        obj['name'] = name;
        obj['total_item_count'] = totalItemCount;
    }

    /**
     * Constructs a <code>EditorialImageLivefeed</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditorialImageLivefeed} obj Optional instance to populate.
     * @return {module:model/EditorialImageLivefeed} The populated <code>EditorialImageLivefeed</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditorialImageLivefeed();

            if (data.hasOwnProperty('cover_item')) {
                obj['cover_item'] = EditorialCoverItem.constructFromObject(data['cover_item']);
            }
            if (data.hasOwnProperty('created_time')) {
                obj['created_time'] = ApiClient.convertToType(data['created_time'], 'Date');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('total_item_count')) {
                obj['total_item_count'] = ApiClient.convertToType(data['total_item_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditorialImageLivefeed</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditorialImageLivefeed</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of EditorialImageLivefeed.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `cover_item`
        if (data['cover_item']) { // data not null
          EditorialCoverItem.validateJSON(data['cover_item']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }

        return true;
    }


}

EditorialImageLivefeed.RequiredProperties = ["id", "name", "total_item_count"];

/**
 * @member {module:model/EditorialCoverItem} cover_item
 */
EditorialImageLivefeed.prototype['cover_item'] = undefined;

/**
 * When the livefeed was initially created
 * @member {Date} created_time
 */
EditorialImageLivefeed.prototype['created_time'] = undefined;

/**
 * Livefeed ID
 * @member {String} id
 */
EditorialImageLivefeed.prototype['id'] = undefined;

/**
 * Name of the livefeed
 * @member {String} name
 */
EditorialImageLivefeed.prototype['name'] = undefined;

/**
 * Total count of items in the livefeed
 * @member {Number} total_item_count
 */
EditorialImageLivefeed.prototype['total_item_count'] = undefined;






export default EditorialImageLivefeed;

