/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioRenderTimeline from './AudioRenderTimeline';
import AudioRendersFilesList from './AudioRendersFilesList';

/**
 * The AudioRenderResult model module.
 * @module model/AudioRenderResult
 * @version 1.1.32
 */
class AudioRenderResult {
    /**
     * Constructs a new <code>AudioRenderResult</code>.
     * The output of an audio render in WAV or MP3 format
     * @alias module:model/AudioRenderResult
     * @param id {String} The alphanumeric ID of the simple render
     * @param status {module:model/AudioRenderResult.StatusEnum} A coarse progress indicator
     * @param timeline {module:model/AudioRenderTimeline} 
     */
    constructor(id, status, timeline) { 
        
        AudioRenderResult.initialize(this, id, status, timeline);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id, status, timeline) { 
        obj['id'] = id;
        obj['status'] = status;
        obj['timeline'] = timeline;
    }

    /**
     * Constructs a <code>AudioRenderResult</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRenderResult} obj Optional instance to populate.
     * @return {module:model/AudioRenderResult} The populated <code>AudioRenderResult</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioRenderResult();

            if (data.hasOwnProperty('created_date')) {
                obj['created_date'] = ApiClient.convertToType(data['created_date'], 'Date');
            }
            if (data.hasOwnProperty('files')) {
                obj['files'] = ApiClient.convertToType(data['files'], [AudioRendersFilesList]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('preset')) {
                obj['preset'] = ApiClient.convertToType(data['preset'], 'String');
            }
            if (data.hasOwnProperty('progress_percent')) {
                obj['progress_percent'] = ApiClient.convertToType(data['progress_percent'], 'Number');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('timeline')) {
                obj['timeline'] = AudioRenderTimeline.constructFromObject(data['timeline']);
            }
            if (data.hasOwnProperty('updated_date')) {
                obj['updated_date'] = ApiClient.convertToType(data['updated_date'], 'Date');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioRenderResult</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioRenderResult</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioRenderResult.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['files']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['files'])) {
                throw new Error("Expected the field `files` to be an array in the JSON data but got " + data['files']);
            }
            // validate the optional field `files` (array)
            for (const item of data['files']) {
                AudioRendersFilesList.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['preset'] && !(typeof data['preset'] === 'string' || data['preset'] instanceof String)) {
            throw new Error("Expected the field `preset` to be a primitive type in the JSON string but got " + data['preset']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // validate the optional field `timeline`
        if (data['timeline']) { // data not null
          AudioRenderTimeline.validateJSON(data['timeline']);
        }

        return true;
    }


}

AudioRenderResult.RequiredProperties = ["id", "status", "timeline"];

/**
 * The time the render was submitted to the API
 * @member {Date} created_date
 */
AudioRenderResult.prototype['created_date'] = undefined;

/**
 * The files associated with the render
 * @member {Array.<module:model/AudioRendersFilesList>} files
 */
AudioRenderResult.prototype['files'] = undefined;

/**
 * The alphanumeric ID of the simple render
 * @member {String} id
 */
AudioRenderResult.prototype['id'] = undefined;

/**
 * The file format preset
 * @member {module:model/AudioRenderResult.PresetEnum} preset
 */
AudioRenderResult.prototype['preset'] = undefined;

/**
 * The current progress of the render as a percentage
 * @member {Number} progress_percent
 */
AudioRenderResult.prototype['progress_percent'] = undefined;

/**
 * A coarse progress indicator
 * @member {module:model/AudioRenderResult.StatusEnum} status
 */
AudioRenderResult.prototype['status'] = undefined;

/**
 * @member {module:model/AudioRenderTimeline} timeline
 */
AudioRenderResult.prototype['timeline'] = undefined;

/**
 * The time that the audio output was uploaded
 * @member {Date} updated_date
 */
AudioRenderResult.prototype['updated_date'] = undefined;





/**
 * Allowed values for the <code>preset</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderResult['PresetEnum'] = {

    /**
     * value: "MASTER_MP3"
     * @const
     */
    "MASTER_MP3": "MASTER_MP3",

    /**
     * value: "MASTER_WAV"
     * @const
     */
    "MASTER_WAV": "MASTER_WAV",

    /**
     * value: "STEMS_WAV"
     * @const
     */
    "STEMS_WAV": "STEMS_WAV"
};


/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderResult['StatusEnum'] = {

    /**
     * value: "WAITING_COMPOSE"
     * @const
     */
    "WAITING_COMPOSE": "WAITING_COMPOSE",

    /**
     * value: "RUNNING_COMPOSE"
     * @const
     */
    "RUNNING_COMPOSE": "RUNNING_COMPOSE",

    /**
     * value: "WAITING_RENDER"
     * @const
     */
    "WAITING_RENDER": "WAITING_RENDER",

    /**
     * value: "RUNNING_RENDER"
     * @const
     */
    "RUNNING_RENDER": "RUNNING_RENDER",

    /**
     * value: "CREATED"
     * @const
     */
    "CREATED": "CREATED",

    /**
     * value: "FAILED_CREATE"
     * @const
     */
    "FAILED_CREATE": "FAILED_CREATE"
};



export default AudioRenderResult;

