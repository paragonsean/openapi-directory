/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AudioRenderTimelineSpanRegionKey model module.
 * @module model/AudioRenderTimelineSpanRegionKey
 * @version 1.1.32
 */
class AudioRenderTimelineSpanRegionKey {
    /**
     * Constructs a new <code>AudioRenderTimelineSpanRegionKey</code>.
     * The key signature active at the beginning of the region
     * @alias module:model/AudioRenderTimelineSpanRegionKey
     */
    constructor() { 
        
        AudioRenderTimelineSpanRegionKey.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AudioRenderTimelineSpanRegionKey</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRenderTimelineSpanRegionKey} obj Optional instance to populate.
     * @return {module:model/AudioRenderTimelineSpanRegionKey} The populated <code>AudioRenderTimelineSpanRegionKey</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioRenderTimelineSpanRegionKey();

            if (data.hasOwnProperty('tonic_accidental')) {
                obj['tonic_accidental'] = ApiClient.convertToType(data['tonic_accidental'], 'String');
            }
            if (data.hasOwnProperty('tonic_note')) {
                obj['tonic_note'] = ApiClient.convertToType(data['tonic_note'], 'String');
            }
            if (data.hasOwnProperty('tonic_quality')) {
                obj['tonic_quality'] = ApiClient.convertToType(data['tonic_quality'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioRenderTimelineSpanRegionKey</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioRenderTimelineSpanRegionKey</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['tonic_accidental'] && !(typeof data['tonic_accidental'] === 'string' || data['tonic_accidental'] instanceof String)) {
            throw new Error("Expected the field `tonic_accidental` to be a primitive type in the JSON string but got " + data['tonic_accidental']);
        }
        // ensure the json data is a string
        if (data['tonic_note'] && !(typeof data['tonic_note'] === 'string' || data['tonic_note'] instanceof String)) {
            throw new Error("Expected the field `tonic_note` to be a primitive type in the JSON string but got " + data['tonic_note']);
        }
        // ensure the json data is a string
        if (data['tonic_quality'] && !(typeof data['tonic_quality'] === 'string' || data['tonic_quality'] instanceof String)) {
            throw new Error("Expected the field `tonic_quality` to be a primitive type in the JSON string but got " + data['tonic_quality']);
        }

        return true;
    }


}



/**
 * A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
 * @member {module:model/AudioRenderTimelineSpanRegionKey.TonicAccidentalEnum} tonic_accidental
 */
AudioRenderTimelineSpanRegionKey.prototype['tonic_accidental'] = undefined;

/**
 * A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
 * @member {module:model/AudioRenderTimelineSpanRegionKey.TonicNoteEnum} tonic_note
 */
AudioRenderTimelineSpanRegionKey.prototype['tonic_note'] = undefined;

/**
 * The scale quality; if this field is not specified, the API selects the quality automatically
 * @member {module:model/AudioRenderTimelineSpanRegionKey.TonicQualityEnum} tonic_quality
 */
AudioRenderTimelineSpanRegionKey.prototype['tonic_quality'] = undefined;





/**
 * Allowed values for the <code>tonic_accidental</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpanRegionKey['TonicAccidentalEnum'] = {

    /**
     * value: "double flat"
     * @const
     */
    "double flat": "double flat",

    /**
     * value: "flat"
     * @const
     */
    "flat": "flat",

    /**
     * value: "natural"
     * @const
     */
    "natural": "natural",

    /**
     * value: "sharp"
     * @const
     */
    "sharp": "sharp",

    /**
     * value: "double sharp"
     * @const
     */
    "double sharp": "double sharp"
};


/**
 * Allowed values for the <code>tonic_note</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpanRegionKey['TonicNoteEnum'] = {

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "d"
     * @const
     */
    "d": "d",

    /**
     * value: "e"
     * @const
     */
    "e": "e",

    /**
     * value: "f"
     * @const
     */
    "f": "f",

    /**
     * value: "g"
     * @const
     */
    "g": "g",

    /**
     * value: "a"
     * @const
     */
    "a": "a",

    /**
     * value: "b"
     * @const
     */
    "b": "b"
};


/**
 * Allowed values for the <code>tonic_quality</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpanRegionKey['TonicQualityEnum'] = {

    /**
     * value: "major"
     * @const
     */
    "major": "major",

    /**
     * value: "natural_minor"
     * @const
     */
    "natural_minor": "natural_minor",

    /**
     * value: "harmonic_minor"
     * @const
     */
    "harmonic_minor": "harmonic_minor",

    /**
     * value: "melodic_minor"
     * @const
     */
    "melodic_minor": "melodic_minor",

    /**
     * value: "ionian"
     * @const
     */
    "ionian": "ionian",

    /**
     * value: "dorian"
     * @const
     */
    "dorian": "dorian",

    /**
     * value: "phrygian"
     * @const
     */
    "phrygian": "phrygian",

    /**
     * value: "lydian"
     * @const
     */
    "lydian": "lydian",

    /**
     * value: "mixolydian"
     * @const
     */
    "mixolydian": "mixolydian",

    /**
     * value: "aeolian"
     * @const
     */
    "aeolian": "aeolian",

    /**
     * value: "locrian"
     * @const
     */
    "locrian": "locrian"
};



export default AudioRenderTimelineSpanRegionKey;

