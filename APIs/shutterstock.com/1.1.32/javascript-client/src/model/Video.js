/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Category from './Category';
import Contributor from './Contributor';
import Model from './Model';
import VideoAssets from './VideoAssets';

/**
 * The Video model module.
 * @module model/Video
 * @version 1.1.32
 */
class Video {
    /**
     * Constructs a new <code>Video</code>.
     * Information about a video
     * @alias module:model/Video
     * @param contributor {module:model/Contributor} 
     * @param id {String} ID of the video
     * @param mediaType {String} Media type of this video, should always be \"video\"
     */
    constructor(contributor, id, mediaType) { 
        
        Video.initialize(this, contributor, id, mediaType);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, contributor, id, mediaType) { 
        obj['contributor'] = contributor;
        obj['id'] = id;
        obj['media_type'] = mediaType;
    }

    /**
     * Constructs a <code>Video</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Video} obj Optional instance to populate.
     * @return {module:model/Video} The populated <code>Video</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Video();

            if (data.hasOwnProperty('added_date')) {
                obj['added_date'] = ApiClient.convertToType(data['added_date'], 'Date');
            }
            if (data.hasOwnProperty('affiliate_url')) {
                obj['affiliate_url'] = ApiClient.convertToType(data['affiliate_url'], 'String');
            }
            if (data.hasOwnProperty('aspect')) {
                obj['aspect'] = ApiClient.convertToType(data['aspect'], 'Number');
            }
            if (data.hasOwnProperty('aspect_ratio')) {
                obj['aspect_ratio'] = ApiClient.convertToType(data['aspect_ratio'], 'String');
            }
            if (data.hasOwnProperty('assets')) {
                obj['assets'] = VideoAssets.constructFromObject(data['assets']);
            }
            if (data.hasOwnProperty('categories')) {
                obj['categories'] = ApiClient.convertToType(data['categories'], [Category]);
            }
            if (data.hasOwnProperty('contributor')) {
                obj['contributor'] = Contributor.constructFromObject(data['contributor']);
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('duration')) {
                obj['duration'] = ApiClient.convertToType(data['duration'], 'Number');
            }
            if (data.hasOwnProperty('has_model_release')) {
                obj['has_model_release'] = ApiClient.convertToType(data['has_model_release'], 'Boolean');
            }
            if (data.hasOwnProperty('has_property_release')) {
                obj['has_property_release'] = ApiClient.convertToType(data['has_property_release'], 'Boolean');
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('is_adult')) {
                obj['is_adult'] = ApiClient.convertToType(data['is_adult'], 'Boolean');
            }
            if (data.hasOwnProperty('is_editorial')) {
                obj['is_editorial'] = ApiClient.convertToType(data['is_editorial'], 'Boolean');
            }
            if (data.hasOwnProperty('keywords')) {
                obj['keywords'] = ApiClient.convertToType(data['keywords'], ['String']);
            }
            if (data.hasOwnProperty('media_type')) {
                obj['media_type'] = ApiClient.convertToType(data['media_type'], 'String');
            }
            if (data.hasOwnProperty('models')) {
                obj['models'] = ApiClient.convertToType(data['models'], [Model]);
            }
            if (data.hasOwnProperty('url')) {
                obj['url'] = ApiClient.convertToType(data['url'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Video</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Video</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Video.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['affiliate_url'] && !(typeof data['affiliate_url'] === 'string' || data['affiliate_url'] instanceof String)) {
            throw new Error("Expected the field `affiliate_url` to be a primitive type in the JSON string but got " + data['affiliate_url']);
        }
        // ensure the json data is a string
        if (data['aspect_ratio'] && !(typeof data['aspect_ratio'] === 'string' || data['aspect_ratio'] instanceof String)) {
            throw new Error("Expected the field `aspect_ratio` to be a primitive type in the JSON string but got " + data['aspect_ratio']);
        }
        // validate the optional field `assets`
        if (data['assets']) { // data not null
          VideoAssets.validateJSON(data['assets']);
        }
        if (data['categories']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['categories'])) {
                throw new Error("Expected the field `categories` to be an array in the JSON data but got " + data['categories']);
            }
            // validate the optional field `categories` (array)
            for (const item of data['categories']) {
                Category.validateJSON(item);
            };
        }
        // validate the optional field `contributor`
        if (data['contributor']) { // data not null
          Contributor.validateJSON(data['contributor']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['keywords'])) {
            throw new Error("Expected the field `keywords` to be an array in the JSON data but got " + data['keywords']);
        }
        // ensure the json data is a string
        if (data['media_type'] && !(typeof data['media_type'] === 'string' || data['media_type'] instanceof String)) {
            throw new Error("Expected the field `media_type` to be a primitive type in the JSON string but got " + data['media_type']);
        }
        if (data['models']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['models'])) {
                throw new Error("Expected the field `models` to be an array in the JSON data but got " + data['models']);
            }
            // validate the optional field `models` (array)
            for (const item of data['models']) {
                Model.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['url'] && !(typeof data['url'] === 'string' || data['url'] instanceof String)) {
            throw new Error("Expected the field `url` to be a primitive type in the JSON string but got " + data['url']);
        }

        return true;
    }


}

Video.RequiredProperties = ["contributor", "id", "media_type"];

/**
 * Date this video was added to the Shutterstock library
 * @member {Date} added_date
 */
Video.prototype['added_date'] = undefined;

/**
 * Affiliate referral link; appears only for registered affiliate partners
 * @member {String} affiliate_url
 */
Video.prototype['affiliate_url'] = undefined;

/**
 * Aspect ratio of this video in decimal format, such as 0.6667
 * @member {Number} aspect
 */
Video.prototype['aspect'] = undefined;

/**
 * Aspect ratio of the video as a ratio, such as 16:9
 * @member {String} aspect_ratio
 */
Video.prototype['aspect_ratio'] = undefined;

/**
 * @member {module:model/VideoAssets} assets
 */
Video.prototype['assets'] = undefined;

/**
 * List of categories
 * @member {Array.<module:model/Category>} categories
 */
Video.prototype['categories'] = undefined;

/**
 * @member {module:model/Contributor} contributor
 */
Video.prototype['contributor'] = undefined;

/**
 * Description of this video
 * @member {String} description
 */
Video.prototype['description'] = undefined;

/**
 * Duration of this video, in seconds
 * @member {Number} duration
 */
Video.prototype['duration'] = undefined;

/**
 * Whether or not this video has been released for use by the model appearing in it
 * @member {Boolean} has_model_release
 */
Video.prototype['has_model_release'] = undefined;

/**
 * Whether or not this video has received a release to show the landmark or property appearing in it
 * @member {Boolean} has_property_release
 */
Video.prototype['has_property_release'] = undefined;

/**
 * ID of the video
 * @member {String} id
 */
Video.prototype['id'] = undefined;

/**
 * Whether or not this video contains adult content
 * @member {Boolean} is_adult
 */
Video.prototype['is_adult'] = undefined;

/**
 * Whether or not this video is editorial content
 * @member {Boolean} is_editorial
 */
Video.prototype['is_editorial'] = undefined;

/**
 * Keywords associated with the content of this video
 * @member {Array.<String>} keywords
 */
Video.prototype['keywords'] = undefined;

/**
 * Media type of this video, should always be \"video\"
 * @member {String} media_type
 */
Video.prototype['media_type'] = undefined;

/**
 * List of models in this video
 * @member {Array.<module:model/Model>} models
 */
Video.prototype['models'] = undefined;

/**
 * Link to video information page; included only for certain accounts
 * @member {String} url
 */
Video.prototype['url'] = undefined;






export default Video;

