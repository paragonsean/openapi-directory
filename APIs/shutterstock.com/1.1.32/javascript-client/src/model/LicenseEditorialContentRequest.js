/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ISOCountryCode from './ISOCountryCode';
import LicenseEditorialContent from './LicenseEditorialContent';

/**
 * The LicenseEditorialContentRequest model module.
 * @module model/LicenseEditorialContentRequest
 * @version 1.1.32
 */
class LicenseEditorialContentRequest {
    /**
     * Constructs a new <code>LicenseEditorialContentRequest</code>.
     * License editorial content request
     * @alias module:model/LicenseEditorialContentRequest
     * @param country {module:model/ISOCountryCode} 
     * @param editorial {Array.<module:model/LicenseEditorialContent>} Editorial content to license
     */
    constructor(country, editorial) { 
        
        LicenseEditorialContentRequest.initialize(this, country, editorial);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, country, editorial) { 
        obj['country'] = country;
        obj['editorial'] = editorial;
    }

    /**
     * Constructs a <code>LicenseEditorialContentRequest</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseEditorialContentRequest} obj Optional instance to populate.
     * @return {module:model/LicenseEditorialContentRequest} The populated <code>LicenseEditorialContentRequest</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseEditorialContentRequest();

            if (data.hasOwnProperty('country')) {
                obj['country'] = ISOCountryCode.constructFromObject(data['country']);
            }
            if (data.hasOwnProperty('editorial')) {
                obj['editorial'] = ApiClient.convertToType(data['editorial'], [LicenseEditorialContent]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseEditorialContentRequest</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseEditorialContentRequest</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseEditorialContentRequest.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `country`
        if (data['country']) { // data not null
          ISOCountryCode.validateJSON(data['country']);
        }
        if (data['editorial']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['editorial'])) {
                throw new Error("Expected the field `editorial` to be an array in the JSON data but got " + data['editorial']);
            }
            // validate the optional field `editorial` (array)
            for (const item of data['editorial']) {
                LicenseEditorialContent.validateJSON(item);
            };
        }

        return true;
    }


}

LicenseEditorialContentRequest.RequiredProperties = ["country", "editorial"];

/**
 * @member {module:model/ISOCountryCode} country
 */
LicenseEditorialContentRequest.prototype['country'] = undefined;

/**
 * Editorial content to license
 * @member {Array.<module:model/LicenseEditorialContent>} editorial
 */
LicenseEditorialContentRequest.prototype['editorial'] = undefined;






export default LicenseEditorialContentRequest;

