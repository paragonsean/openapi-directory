/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Price model module.
 * @module model/Price
 * @version 1.1.32
 */
class Price {
    /**
     * Constructs a new <code>Price</code>.
     * Price
     * @alias module:model/Price
     */
    constructor() { 
        
        Price.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Price</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Price} obj Optional instance to populate.
     * @return {module:model/Price} The populated <code>Price</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Price();

            if (data.hasOwnProperty('local_amount')) {
                obj['local_amount'] = ApiClient.convertToType(data['local_amount'], 'Number');
            }
            if (data.hasOwnProperty('local_currency')) {
                obj['local_currency'] = ApiClient.convertToType(data['local_currency'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Price</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Price</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['local_currency'] && !(typeof data['local_currency'] === 'string' || data['local_currency'] instanceof String)) {
            throw new Error("Expected the field `local_currency` to be a primitive type in the JSON string but got " + data['local_currency']);
        }

        return true;
    }


}



/**
 * Floating-point amount of the calculated rev-share price in the currency local_currency
 * @member {Number} local_amount
 */
Price.prototype['local_amount'] = undefined;

/**
 * Currency of the rev-share price that was calculated
 * @member {String} local_currency
 */
Price.prototype['local_currency'] = undefined;






export default Price;

