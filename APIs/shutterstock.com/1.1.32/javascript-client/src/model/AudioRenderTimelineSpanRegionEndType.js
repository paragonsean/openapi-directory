/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AudioRenderTimelineSpanRegionEndType model module.
 * @module model/AudioRenderTimelineSpanRegionEndType
 * @version 1.1.32
 */
class AudioRenderTimelineSpanRegionEndType {
    /**
     * Constructs a new <code>AudioRenderTimelineSpanRegionEndType</code>.
     * A high-level description of how a region ends
     * @alias module:model/AudioRenderTimelineSpanRegionEndType
     * @param beat {Number} The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region
     * @param event {module:model/AudioRenderTimelineSpanRegionEndType.EventEnum} The type of event
     * @param type {module:model/AudioRenderTimelineSpanRegionEndType.TypeEnum} The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"
     */
    constructor(beat, event, type) { 
        
        AudioRenderTimelineSpanRegionEndType.initialize(this, beat, event, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, beat, event, type) { 
        obj['beat'] = beat;
        obj['event'] = event;
        obj['type'] = type;
    }

    /**
     * Constructs a <code>AudioRenderTimelineSpanRegionEndType</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRenderTimelineSpanRegionEndType} obj Optional instance to populate.
     * @return {module:model/AudioRenderTimelineSpanRegionEndType} The populated <code>AudioRenderTimelineSpanRegionEndType</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioRenderTimelineSpanRegionEndType();

            if (data.hasOwnProperty('beat')) {
                obj['beat'] = ApiClient.convertToType(data['beat'], 'Number');
            }
            if (data.hasOwnProperty('event')) {
                obj['event'] = ApiClient.convertToType(data['event'], 'String');
            }
            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioRenderTimelineSpanRegionEndType</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioRenderTimelineSpanRegionEndType</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioRenderTimelineSpanRegionEndType.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['event'] && !(typeof data['event'] === 'string' || data['event'] instanceof String)) {
            throw new Error("Expected the field `event` to be a primitive type in the JSON string but got " + data['event']);
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }

        return true;
    }


}

AudioRenderTimelineSpanRegionEndType.RequiredProperties = ["beat", "event", "type"];

/**
 * The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region
 * @member {Number} beat
 */
AudioRenderTimelineSpanRegionEndType.prototype['beat'] = undefined;

/**
 * The type of event
 * @member {module:model/AudioRenderTimelineSpanRegionEndType.EventEnum} event
 */
AudioRenderTimelineSpanRegionEndType.prototype['event'] = undefined;

/**
 * The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"
 * @member {module:model/AudioRenderTimelineSpanRegionEndType.TypeEnum} type
 */
AudioRenderTimelineSpanRegionEndType.prototype['type'] = undefined;





/**
 * Allowed values for the <code>event</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpanRegionEndType['EventEnum'] = {

    /**
     * value: "ending"
     * @const
     */
    "ending": "ending",

    /**
     * value: "transition"
     * @const
     */
    "transition": "transition"
};


/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpanRegionEndType['TypeEnum'] = {

    /**
     * value: "ringout"
     * @const
     */
    "ringout": "ringout",

    /**
     * value: "cut"
     * @const
     */
    "cut": "cut"
};



export default AudioRenderTimelineSpanRegionEndType;

