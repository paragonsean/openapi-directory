/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioRenderTimelineSpanInstrumentGroup from './AudioRenderTimelineSpanInstrumentGroup';
import AudioRenderTimelineSpanRegion from './AudioRenderTimelineSpanRegion';
import AudioRenderTimelineSpanTempoChanges from './AudioRenderTimelineSpanTempoChanges';

/**
 * The AudioRenderTimelineSpan model module.
 * @module model/AudioRenderTimelineSpan
 * @version 1.1.32
 */
class AudioRenderTimelineSpan {
    /**
     * Constructs a new <code>AudioRenderTimelineSpan</code>.
     * The beginning of a non-overlapping period of absolute time
     * @alias module:model/AudioRenderTimelineSpan
     * @param spanType {module:model/AudioRenderTimelineSpan.SpanTypeEnum} Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
     * @param time {Number} The absolute time, in seconds, at which the span starts
     */
    constructor(spanType, time) { 
        
        AudioRenderTimelineSpan.initialize(this, spanType, time);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, spanType, time) { 
        obj['span_type'] = spanType;
        obj['time'] = time;
    }

    /**
     * Constructs a <code>AudioRenderTimelineSpan</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRenderTimelineSpan} obj Optional instance to populate.
     * @return {module:model/AudioRenderTimelineSpan} The populated <code>AudioRenderTimelineSpan</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioRenderTimelineSpan();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('instrument_groups')) {
                obj['instrument_groups'] = ApiClient.convertToType(data['instrument_groups'], [AudioRenderTimelineSpanInstrumentGroup]);
            }
            if (data.hasOwnProperty('regions')) {
                obj['regions'] = ApiClient.convertToType(data['regions'], [AudioRenderTimelineSpanRegion]);
            }
            if (data.hasOwnProperty('span_type')) {
                obj['span_type'] = ApiClient.convertToType(data['span_type'], 'String');
            }
            if (data.hasOwnProperty('tempo')) {
                obj['tempo'] = ApiClient.convertToType(data['tempo'], 'Number');
            }
            if (data.hasOwnProperty('tempo_changes')) {
                obj['tempo_changes'] = ApiClient.convertToType(data['tempo_changes'], [AudioRenderTimelineSpanTempoChanges]);
            }
            if (data.hasOwnProperty('time')) {
                obj['time'] = ApiClient.convertToType(data['time'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioRenderTimelineSpan</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioRenderTimelineSpan</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioRenderTimelineSpan.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['instrument_groups']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['instrument_groups'])) {
                throw new Error("Expected the field `instrument_groups` to be an array in the JSON data but got " + data['instrument_groups']);
            }
            // validate the optional field `instrument_groups` (array)
            for (const item of data['instrument_groups']) {
                AudioRenderTimelineSpanInstrumentGroup.validateJSON(item);
            };
        }
        if (data['regions']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['regions'])) {
                throw new Error("Expected the field `regions` to be an array in the JSON data but got " + data['regions']);
            }
            // validate the optional field `regions` (array)
            for (const item of data['regions']) {
                AudioRenderTimelineSpanRegion.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['span_type'] && !(typeof data['span_type'] === 'string' || data['span_type'] instanceof String)) {
            throw new Error("Expected the field `span_type` to be a primitive type in the JSON string but got " + data['span_type']);
        }
        if (data['tempo_changes']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['tempo_changes'])) {
                throw new Error("Expected the field `tempo_changes` to be an array in the JSON data but got " + data['tempo_changes']);
            }
            // validate the optional field `tempo_changes` (array)
            for (const item of data['tempo_changes']) {
                AudioRenderTimelineSpanTempoChanges.validateJSON(item);
            };
        }

        return true;
    }


}

AudioRenderTimelineSpan.RequiredProperties = ["span_type", "time"];

/**
 * An identifier which must be unique within the parent span
 * @member {Number} id
 */
AudioRenderTimelineSpan.prototype['id'] = undefined;

/**
 * An array of instrument_group objects that are used in this span
 * @member {Array.<module:model/AudioRenderTimelineSpanInstrumentGroup>} instrument_groups
 */
AudioRenderTimelineSpan.prototype['instrument_groups'] = undefined;

/**
 * An array of region objects within the span
 * @member {Array.<module:model/AudioRenderTimelineSpanRegion>} regions
 */
AudioRenderTimelineSpan.prototype['regions'] = undefined;

/**
 * Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
 * @member {module:model/AudioRenderTimelineSpan.SpanTypeEnum} span_type
 */
AudioRenderTimelineSpan.prototype['span_type'] = undefined;

/**
 * The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo
 * @member {Number} tempo
 */
AudioRenderTimelineSpan.prototype['tempo'] = undefined;

/**
 * Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change
 * @member {Array.<module:model/AudioRenderTimelineSpanTempoChanges>} tempo_changes
 */
AudioRenderTimelineSpan.prototype['tempo_changes'] = undefined;

/**
 * The absolute time, in seconds, at which the span starts
 * @member {Number} time
 */
AudioRenderTimelineSpan.prototype['time'] = undefined;





/**
 * Allowed values for the <code>span_type</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpan['SpanTypeEnum'] = {

    /**
     * value: "metered"
     * @const
     */
    "metered": "metered",

    /**
     * value: "unmetered"
     * @const
     */
    "unmetered": "unmetered"
};



export default AudioRenderTimelineSpan;

