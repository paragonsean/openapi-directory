/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseSFX model module.
 * @module model/LicenseSFX
 * @version 1.1.32
 */
class LicenseSFX {
    /**
     * Constructs a new <code>LicenseSFX</code>.
     * 
     * @alias module:model/LicenseSFX
     * @param sfxId {String} ID of the sounds effect being licensed
     * @param subscriptionId {String} ID of the subscription to use for the download.
     */
    constructor(sfxId, subscriptionId) { 
        
        LicenseSFX.initialize(this, sfxId, subscriptionId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, sfxId, subscriptionId) { 
        obj['sfx_id'] = sfxId;
        obj['subscription_id'] = subscriptionId;
    }

    /**
     * Constructs a <code>LicenseSFX</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseSFX} obj Optional instance to populate.
     * @return {module:model/LicenseSFX} The populated <code>LicenseSFX</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseSFX();

            if (data.hasOwnProperty('audio_layout')) {
                obj['audio_layout'] = ApiClient.convertToType(data['audio_layout'], 'String');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('search_id')) {
                obj['search_id'] = ApiClient.convertToType(data['search_id'], 'String');
            }
            if (data.hasOwnProperty('sfx_id')) {
                obj['sfx_id'] = ApiClient.convertToType(data['sfx_id'], 'String');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseSFX</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseSFX</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseSFX.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['audio_layout'] && !(typeof data['audio_layout'] === 'string' || data['audio_layout'] instanceof String)) {
            throw new Error("Expected the field `audio_layout` to be a primitive type in the JSON string but got " + data['audio_layout']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['search_id'] && !(typeof data['search_id'] === 'string' || data['search_id'] instanceof String)) {
            throw new Error("Expected the field `search_id` to be a primitive type in the JSON string but got " + data['search_id']);
        }
        // ensure the json data is a string
        if (data['sfx_id'] && !(typeof data['sfx_id'] === 'string' || data['sfx_id'] instanceof String)) {
            throw new Error("Expected the field `sfx_id` to be a primitive type in the JSON string but got " + data['sfx_id']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }

        return true;
    }


}

LicenseSFX.RequiredProperties = ["sfx_id", "subscription_id"];

/**
 * @member {module:model/LicenseSFX.AudioLayoutEnum} audio_layout
 */
LicenseSFX.prototype['audio_layout'] = undefined;

/**
 * @member {module:model/LicenseSFX.FormatEnum} format
 */
LicenseSFX.prototype['format'] = undefined;

/**
 * ID of the search that led to this licensing event
 * @member {String} search_id
 */
LicenseSFX.prototype['search_id'] = undefined;

/**
 * ID of the sounds effect being licensed
 * @member {String} sfx_id
 */
LicenseSFX.prototype['sfx_id'] = undefined;

/**
 * ID of the subscription to use for the download.
 * @member {String} subscription_id
 */
LicenseSFX.prototype['subscription_id'] = undefined;





/**
 * Allowed values for the <code>audio_layout</code> property.
 * @enum {String}
 * @readonly
 */
LicenseSFX['AudioLayoutEnum'] = {

    /**
     * value: "ambisonic"
     * @const
     */
    "ambisonic": "ambisonic",

    /**
     * value: "5.1"
     * @const
     */
    "5.1": "5.1",

    /**
     * value: "stereo"
     * @const
     */
    "stereo": "stereo"
};


/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
LicenseSFX['FormatEnum'] = {

    /**
     * value: "wav"
     * @const
     */
    "wav": "wav",

    /**
     * value: "mp3"
     * @const
     */
    "mp3": "mp3"
};



export default LicenseSFX;

