/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Allotment from './Allotment';
import LicenseFormat from './LicenseFormat';
import Price from './Price';

/**
 * The Subscription model module.
 * @module model/Subscription
 * @version 1.1.32
 */
class Subscription {
    /**
     * Constructs a new <code>Subscription</code>.
     * Subscription information
     * @alias module:model/Subscription
     * @param id {String} Unique internal identifier for the subscription
     */
    constructor(id) { 
        
        Subscription.initialize(this, id);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, id) { 
        obj['id'] = id;
    }

    /**
     * Constructs a <code>Subscription</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Subscription} obj Optional instance to populate.
     * @return {module:model/Subscription} The populated <code>Subscription</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Subscription();

            if (data.hasOwnProperty('allotment')) {
                obj['allotment'] = Allotment.constructFromObject(data['allotment']);
            }
            if (data.hasOwnProperty('asset_type')) {
                obj['asset_type'] = ApiClient.convertToType(data['asset_type'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('expiration_time')) {
                obj['expiration_time'] = ApiClient.convertToType(data['expiration_time'], 'Date');
            }
            if (data.hasOwnProperty('formats')) {
                obj['formats'] = ApiClient.convertToType(data['formats'], [LicenseFormat]);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('price_per_download')) {
                obj['price_per_download'] = Price.constructFromObject(data['price_per_download']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Subscription</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Subscription</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Subscription.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `allotment`
        if (data['allotment']) { // data not null
          Allotment.validateJSON(data['allotment']);
        }
        // ensure the json data is a string
        if (data['asset_type'] && !(typeof data['asset_type'] === 'string' || data['asset_type'] instanceof String)) {
            throw new Error("Expected the field `asset_type` to be a primitive type in the JSON string but got " + data['asset_type']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        if (data['formats']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['formats'])) {
                throw new Error("Expected the field `formats` to be an array in the JSON data but got " + data['formats']);
            }
            // validate the optional field `formats` (array)
            for (const item of data['formats']) {
                LicenseFormat.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // validate the optional field `price_per_download`
        if (data['price_per_download']) { // data not null
          Price.validateJSON(data['price_per_download']);
        }

        return true;
    }


}

Subscription.RequiredProperties = ["id"];

/**
 * @member {module:model/Allotment} allotment
 */
Subscription.prototype['allotment'] = undefined;

/**
 * Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)
 * @member {String} asset_type
 */
Subscription.prototype['asset_type'] = undefined;

/**
 * Description of the subscription
 * @member {String} description
 */
Subscription.prototype['description'] = undefined;

/**
 * Date the subscription ends
 * @member {Date} expiration_time
 */
Subscription.prototype['expiration_time'] = undefined;

/**
 * List of formats that are licensable for the subscription
 * @member {Array.<module:model/LicenseFormat>} formats
 */
Subscription.prototype['formats'] = undefined;

/**
 * Unique internal identifier for the subscription
 * @member {String} id
 */
Subscription.prototype['id'] = undefined;

/**
 * Internal identifier for the type of subscription
 * @member {String} license
 */
Subscription.prototype['license'] = undefined;

/**
 * Subscription metadata; different for each customer
 * @member {Object} metadata
 */
Subscription.prototype['metadata'] = undefined;

/**
 * @member {module:model/Price} price_per_download
 */
Subscription.prototype['price_per_download'] = undefined;






export default Subscription;

