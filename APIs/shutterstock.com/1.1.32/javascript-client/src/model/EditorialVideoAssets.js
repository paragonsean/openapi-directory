/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import VideoPreviewUrl from './VideoPreviewUrl';
import VideoSizeDetails from './VideoSizeDetails';

/**
 * The EditorialVideoAssets model module.
 * @module model/EditorialVideoAssets
 * @version 1.1.32
 */
class EditorialVideoAssets {
    /**
     * Constructs a new <code>EditorialVideoAssets</code>.
     * Asset information, including size and thumbnail URLs
     * @alias module:model/EditorialVideoAssets
     */
    constructor() { 
        
        EditorialVideoAssets.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>EditorialVideoAssets</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/EditorialVideoAssets} obj Optional instance to populate.
     * @return {module:model/EditorialVideoAssets} The populated <code>EditorialVideoAssets</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new EditorialVideoAssets();

            if (data.hasOwnProperty('original')) {
                obj['original'] = VideoSizeDetails.constructFromObject(data['original']);
            }
            if (data.hasOwnProperty('preview_mp4')) {
                obj['preview_mp4'] = VideoPreviewUrl.constructFromObject(data['preview_mp4']);
            }
            if (data.hasOwnProperty('preview_webm')) {
                obj['preview_webm'] = VideoPreviewUrl.constructFromObject(data['preview_webm']);
            }
            if (data.hasOwnProperty('thumb_jpg')) {
                obj['thumb_jpg'] = VideoPreviewUrl.constructFromObject(data['thumb_jpg']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>EditorialVideoAssets</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>EditorialVideoAssets</code>.
     */
    static validateJSON(data) {
        // validate the optional field `original`
        if (data['original']) { // data not null
          VideoSizeDetails.validateJSON(data['original']);
        }
        // validate the optional field `preview_mp4`
        if (data['preview_mp4']) { // data not null
          VideoPreviewUrl.validateJSON(data['preview_mp4']);
        }
        // validate the optional field `preview_webm`
        if (data['preview_webm']) { // data not null
          VideoPreviewUrl.validateJSON(data['preview_webm']);
        }
        // validate the optional field `thumb_jpg`
        if (data['thumb_jpg']) { // data not null
          VideoPreviewUrl.validateJSON(data['thumb_jpg']);
        }

        return true;
    }


}



/**
 * @member {module:model/VideoSizeDetails} original
 */
EditorialVideoAssets.prototype['original'] = undefined;

/**
 * @member {module:model/VideoPreviewUrl} preview_mp4
 */
EditorialVideoAssets.prototype['preview_mp4'] = undefined;

/**
 * @member {module:model/VideoPreviewUrl} preview_webm
 */
EditorialVideoAssets.prototype['preview_webm'] = undefined;

/**
 * @member {module:model/VideoPreviewUrl} thumb_jpg
 */
EditorialVideoAssets.prototype['thumb_jpg'] = undefined;






export default EditorialVideoAssets;

