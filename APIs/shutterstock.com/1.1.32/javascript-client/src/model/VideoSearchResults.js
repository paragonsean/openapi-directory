/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Video from './Video';

/**
 * The VideoSearchResults model module.
 * @module model/VideoSearchResults
 * @version 1.1.32
 */
class VideoSearchResults {
    /**
     * Constructs a new <code>VideoSearchResults</code>.
     * Video search results
     * @alias module:model/VideoSearchResults
     * @param data {Array.<module:model/Video>} List of videos
     * @param searchId {String} Unique identifier for the search request
     * @param totalCount {Number} Total count of all results across all pages
     */
    constructor(data, searchId, totalCount) { 
        
        VideoSearchResults.initialize(this, data, searchId, totalCount);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, data, searchId, totalCount) { 
        obj['data'] = data;
        obj['search_id'] = searchId;
        obj['total_count'] = totalCount;
    }

    /**
     * Constructs a <code>VideoSearchResults</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/VideoSearchResults} obj Optional instance to populate.
     * @return {module:model/VideoSearchResults} The populated <code>VideoSearchResults</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new VideoSearchResults();

            if (data.hasOwnProperty('data')) {
                obj['data'] = ApiClient.convertToType(data['data'], [Video]);
            }
            if (data.hasOwnProperty('message')) {
                obj['message'] = ApiClient.convertToType(data['message'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('search_id')) {
                obj['search_id'] = ApiClient.convertToType(data['search_id'], 'String');
            }
            if (data.hasOwnProperty('total_count')) {
                obj['total_count'] = ApiClient.convertToType(data['total_count'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>VideoSearchResults</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>VideoSearchResults</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of VideoSearchResults.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        if (data['data']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['data'])) {
                throw new Error("Expected the field `data` to be an array in the JSON data but got " + data['data']);
            }
            // validate the optional field `data` (array)
            for (const item of data['data']) {
                Video.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['message'] && !(typeof data['message'] === 'string' || data['message'] instanceof String)) {
            throw new Error("Expected the field `message` to be a primitive type in the JSON string but got " + data['message']);
        }
        // ensure the json data is a string
        if (data['search_id'] && !(typeof data['search_id'] === 'string' || data['search_id'] instanceof String)) {
            throw new Error("Expected the field `search_id` to be a primitive type in the JSON string but got " + data['search_id']);
        }

        return true;
    }


}

VideoSearchResults.RequiredProperties = ["data", "search_id", "total_count"];

/**
 * List of videos
 * @member {Array.<module:model/Video>} data
 */
VideoSearchResults.prototype['data'] = undefined;

/**
 * Server-generated message, if any
 * @member {String} message
 */
VideoSearchResults.prototype['message'] = undefined;

/**
 * Current page that is returned
 * @member {Number} page
 */
VideoSearchResults.prototype['page'] = undefined;

/**
 * Number of results per page
 * @member {Number} per_page
 */
VideoSearchResults.prototype['per_page'] = undefined;

/**
 * Unique identifier for the search request
 * @member {String} search_id
 */
VideoSearchResults.prototype['search_id'] = undefined;

/**
 * Total count of all results across all pages
 * @member {Number} total_count
 */
VideoSearchResults.prototype['total_count'] = undefined;






export default VideoSearchResults;

