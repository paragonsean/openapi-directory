/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The LicenseAudio model module.
 * @module model/LicenseAudio
 * @version 1.1.32
 */
class LicenseAudio {
    /**
     * Constructs a new <code>LicenseAudio</code>.
     * An audio track in a licensing request
     * @alias module:model/LicenseAudio
     * @param audioId {String} ID of the track being licensed
     */
    constructor(audioId) { 
        
        LicenseAudio.initialize(this, audioId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, audioId) { 
        obj['audio_id'] = audioId;
    }

    /**
     * Constructs a <code>LicenseAudio</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseAudio} obj Optional instance to populate.
     * @return {module:model/LicenseAudio} The populated <code>LicenseAudio</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseAudio();

            if (data.hasOwnProperty('audio_id')) {
                obj['audio_id'] = ApiClient.convertToType(data['audio_id'], 'String');
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], 'String');
            }
            if (data.hasOwnProperty('search_id')) {
                obj['search_id'] = ApiClient.convertToType(data['search_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseAudio</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseAudio</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseAudio.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['audio_id'] && !(typeof data['audio_id'] === 'string' || data['audio_id'] instanceof String)) {
            throw new Error("Expected the field `audio_id` to be a primitive type in the JSON string but got " + data['audio_id']);
        }
        // ensure the json data is a string
        if (data['license'] && !(typeof data['license'] === 'string' || data['license'] instanceof String)) {
            throw new Error("Expected the field `license` to be a primitive type in the JSON string but got " + data['license']);
        }
        // ensure the json data is a string
        if (data['search_id'] && !(typeof data['search_id'] === 'string' || data['search_id'] instanceof String)) {
            throw new Error("Expected the field `search_id` to be a primitive type in the JSON string but got " + data['search_id']);
        }

        return true;
    }


}

LicenseAudio.RequiredProperties = ["audio_id"];

/**
 * ID of the track being licensed
 * @member {String} audio_id
 */
LicenseAudio.prototype['audio_id'] = undefined;

/**
 * Type of license
 * @member {module:model/LicenseAudio.LicenseEnum} license
 */
LicenseAudio.prototype['license'] = undefined;

/**
 * ID of the search that led to this licensing event
 * @member {String} search_id
 */
LicenseAudio.prototype['search_id'] = undefined;





/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
LicenseAudio['LicenseEnum'] = {

    /**
     * value: "audio_platform"
     * @const
     */
    "audio_platform": "audio_platform",

    /**
     * value: "premier_music_basic"
     * @const
     */
    "premier_music_basic": "premier_music_basic",

    /**
     * value: "premier_music_extended"
     * @const
     */
    "premier_music_extended": "premier_music_extended",

    /**
     * value: "premier_music_pro"
     * @const
     */
    "premier_music_pro": "premier_music_pro",

    /**
     * value: "premier_music_comp"
     * @const
     */
    "premier_music_comp": "premier_music_comp",

    /**
     * value: "asset_all_music"
     * @const
     */
    "asset_all_music": "asset_all_music"
};



export default LicenseAudio;

