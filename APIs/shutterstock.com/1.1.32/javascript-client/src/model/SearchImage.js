/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Language from './Language';
import SearchImageContributorCountry from './SearchImageContributorCountry';
import SearchImageRegion from './SearchImageRegion';

/**
 * The SearchImage model module.
 * @module model/SearchImage
 * @version 1.1.32
 */
class SearchImage {
    /**
     * Constructs a new <code>SearchImage</code>.
     * Data required to search for an image
     * @alias module:model/SearchImage
     */
    constructor() { 
        
        SearchImage.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
        obj['keyword_safe_search'] = true;
        obj['page'] = 1;
        obj['per_page'] = 20;
        obj['safe'] = true;
        obj['sort'] = 'popular';
        obj['spellcheck_query'] = true;
        obj['view'] = 'minimal';
    }

    /**
     * Constructs a <code>SearchImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/SearchImage} obj Optional instance to populate.
     * @return {module:model/SearchImage} The populated <code>SearchImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new SearchImage();

            if (data.hasOwnProperty('added_date')) {
                obj['added_date'] = ApiClient.convertToType(data['added_date'], 'Date');
            }
            if (data.hasOwnProperty('added_date_end')) {
                obj['added_date_end'] = ApiClient.convertToType(data['added_date_end'], 'Date');
            }
            if (data.hasOwnProperty('added_date_start')) {
                obj['added_date_start'] = ApiClient.convertToType(data['added_date_start'], 'Date');
            }
            if (data.hasOwnProperty('aspect_ratio')) {
                obj['aspect_ratio'] = ApiClient.convertToType(data['aspect_ratio'], 'Number');
            }
            if (data.hasOwnProperty('aspect_ratio_max')) {
                obj['aspect_ratio_max'] = ApiClient.convertToType(data['aspect_ratio_max'], 'Number');
            }
            if (data.hasOwnProperty('aspect_ratio_min')) {
                obj['aspect_ratio_min'] = ApiClient.convertToType(data['aspect_ratio_min'], 'Number');
            }
            if (data.hasOwnProperty('authentic')) {
                obj['authentic'] = ApiClient.convertToType(data['authentic'], 'Boolean');
            }
            if (data.hasOwnProperty('category')) {
                obj['category'] = ApiClient.convertToType(data['category'], 'String');
            }
            if (data.hasOwnProperty('color')) {
                obj['color'] = ApiClient.convertToType(data['color'], 'String');
            }
            if (data.hasOwnProperty('contributor')) {
                obj['contributor'] = ApiClient.convertToType(data['contributor'], ['String']);
            }
            if (data.hasOwnProperty('contributor_country')) {
                obj['contributor_country'] = SearchImageContributorCountry.constructFromObject(data['contributor_country']);
            }
            if (data.hasOwnProperty('fields')) {
                obj['fields'] = ApiClient.convertToType(data['fields'], 'String');
            }
            if (data.hasOwnProperty('height')) {
                obj['height'] = ApiClient.convertToType(data['height'], 'Number');
            }
            if (data.hasOwnProperty('height_from')) {
                obj['height_from'] = ApiClient.convertToType(data['height_from'], 'Number');
            }
            if (data.hasOwnProperty('height_to')) {
                obj['height_to'] = ApiClient.convertToType(data['height_to'], 'Number');
            }
            if (data.hasOwnProperty('image_type')) {
                obj['image_type'] = ApiClient.convertToType(data['image_type'], ['String']);
            }
            if (data.hasOwnProperty('keyword_safe_search')) {
                obj['keyword_safe_search'] = ApiClient.convertToType(data['keyword_safe_search'], 'Boolean');
            }
            if (data.hasOwnProperty('language')) {
                obj['language'] = Language.constructFromObject(data['language']);
            }
            if (data.hasOwnProperty('license')) {
                obj['license'] = ApiClient.convertToType(data['license'], ['String']);
            }
            if (data.hasOwnProperty('model')) {
                obj['model'] = ApiClient.convertToType(data['model'], ['String']);
            }
            if (data.hasOwnProperty('orientation')) {
                obj['orientation'] = ApiClient.convertToType(data['orientation'], 'String');
            }
            if (data.hasOwnProperty('page')) {
                obj['page'] = ApiClient.convertToType(data['page'], 'Number');
            }
            if (data.hasOwnProperty('people_age')) {
                obj['people_age'] = ApiClient.convertToType(data['people_age'], 'String');
            }
            if (data.hasOwnProperty('people_ethnicity')) {
                obj['people_ethnicity'] = ApiClient.convertToType(data['people_ethnicity'], ['String']);
            }
            if (data.hasOwnProperty('people_gender')) {
                obj['people_gender'] = ApiClient.convertToType(data['people_gender'], 'String');
            }
            if (data.hasOwnProperty('people_model_released')) {
                obj['people_model_released'] = ApiClient.convertToType(data['people_model_released'], 'Boolean');
            }
            if (data.hasOwnProperty('people_number')) {
                obj['people_number'] = ApiClient.convertToType(data['people_number'], 'Number');
            }
            if (data.hasOwnProperty('per_page')) {
                obj['per_page'] = ApiClient.convertToType(data['per_page'], 'Number');
            }
            if (data.hasOwnProperty('query')) {
                obj['query'] = ApiClient.convertToType(data['query'], 'String');
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = SearchImageRegion.constructFromObject(data['region']);
            }
            if (data.hasOwnProperty('safe')) {
                obj['safe'] = ApiClient.convertToType(data['safe'], 'Boolean');
            }
            if (data.hasOwnProperty('sort')) {
                obj['sort'] = ApiClient.convertToType(data['sort'], 'String');
            }
            if (data.hasOwnProperty('spellcheck_query')) {
                obj['spellcheck_query'] = ApiClient.convertToType(data['spellcheck_query'], 'Boolean');
            }
            if (data.hasOwnProperty('view')) {
                obj['view'] = ApiClient.convertToType(data['view'], 'String');
            }
            if (data.hasOwnProperty('width')) {
                obj['width'] = ApiClient.convertToType(data['width'], 'Number');
            }
            if (data.hasOwnProperty('width_from')) {
                obj['width_from'] = ApiClient.convertToType(data['width_from'], 'Number');
            }
            if (data.hasOwnProperty('width_to')) {
                obj['width_to'] = ApiClient.convertToType(data['width_to'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>SearchImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>SearchImage</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['category'] && !(typeof data['category'] === 'string' || data['category'] instanceof String)) {
            throw new Error("Expected the field `category` to be a primitive type in the JSON string but got " + data['category']);
        }
        // ensure the json data is a string
        if (data['color'] && !(typeof data['color'] === 'string' || data['color'] instanceof String)) {
            throw new Error("Expected the field `color` to be a primitive type in the JSON string but got " + data['color']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['contributor'])) {
            throw new Error("Expected the field `contributor` to be an array in the JSON data but got " + data['contributor']);
        }
        // validate the optional field `contributor_country`
        if (data['contributor_country']) { // data not null
          SearchImageContributorCountry.validateJSON(data['contributor_country']);
        }
        // ensure the json data is a string
        if (data['fields'] && !(typeof data['fields'] === 'string' || data['fields'] instanceof String)) {
            throw new Error("Expected the field `fields` to be a primitive type in the JSON string but got " + data['fields']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['image_type'])) {
            throw new Error("Expected the field `image_type` to be an array in the JSON data but got " + data['image_type']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['license'])) {
            throw new Error("Expected the field `license` to be an array in the JSON data but got " + data['license']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['model'])) {
            throw new Error("Expected the field `model` to be an array in the JSON data but got " + data['model']);
        }
        // ensure the json data is a string
        if (data['orientation'] && !(typeof data['orientation'] === 'string' || data['orientation'] instanceof String)) {
            throw new Error("Expected the field `orientation` to be a primitive type in the JSON string but got " + data['orientation']);
        }
        // ensure the json data is a string
        if (data['people_age'] && !(typeof data['people_age'] === 'string' || data['people_age'] instanceof String)) {
            throw new Error("Expected the field `people_age` to be a primitive type in the JSON string but got " + data['people_age']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['people_ethnicity'])) {
            throw new Error("Expected the field `people_ethnicity` to be an array in the JSON data but got " + data['people_ethnicity']);
        }
        // ensure the json data is a string
        if (data['people_gender'] && !(typeof data['people_gender'] === 'string' || data['people_gender'] instanceof String)) {
            throw new Error("Expected the field `people_gender` to be a primitive type in the JSON string but got " + data['people_gender']);
        }
        // ensure the json data is a string
        if (data['query'] && !(typeof data['query'] === 'string' || data['query'] instanceof String)) {
            throw new Error("Expected the field `query` to be a primitive type in the JSON string but got " + data['query']);
        }
        // validate the optional field `region`
        if (data['region']) { // data not null
          SearchImageRegion.validateJSON(data['region']);
        }
        // ensure the json data is a string
        if (data['sort'] && !(typeof data['sort'] === 'string' || data['sort'] instanceof String)) {
            throw new Error("Expected the field `sort` to be a primitive type in the JSON string but got " + data['sort']);
        }
        // ensure the json data is a string
        if (data['view'] && !(typeof data['view'] === 'string' || data['view'] instanceof String)) {
            throw new Error("Expected the field `view` to be a primitive type in the JSON string but got " + data['view']);
        }

        return true;
    }


}



/**
 * Show images added on the specified date
 * @member {Date} added_date
 */
SearchImage.prototype['added_date'] = undefined;

/**
 * Show images added before the specified date
 * @member {Date} added_date_end
 */
SearchImage.prototype['added_date_end'] = undefined;

/**
 * Show images added on or after the specified date
 * @member {Date} added_date_start
 */
SearchImage.prototype['added_date_start'] = undefined;

/**
 * Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
 * @member {Number} aspect_ratio
 */
SearchImage.prototype['aspect_ratio'] = undefined;

/**
 * Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
 * @member {Number} aspect_ratio_max
 */
SearchImage.prototype['aspect_ratio_max'] = undefined;

/**
 * Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
 * @member {Number} aspect_ratio_min
 */
SearchImage.prototype['aspect_ratio_min'] = undefined;

/**
 * Show only authentic images
 * @member {Boolean} authentic
 */
SearchImage.prototype['authentic'] = undefined;

/**
 * Show images with the specified Shutterstock-defined category; specify a category name or ID
 * @member {String} category
 */
SearchImage.prototype['category'] = undefined;

/**
 * Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
 * @member {String} color
 */
SearchImage.prototype['color'] = undefined;

/**
 * Show images with the specified contributor names or IDs, allows multiple
 * @member {Array.<String>} contributor
 */
SearchImage.prototype['contributor'] = undefined;

/**
 * @member {module:model/SearchImageContributorCountry} contributor_country
 */
SearchImage.prototype['contributor_country'] = undefined;

/**
 * Fields to display in the response; see the documentation for the fields parameter in the overview section
 * @member {String} fields
 */
SearchImage.prototype['fields'] = undefined;

/**
 * (Deprecated; use height_from and height_to instead) Show images with the specified height
 * @member {Number} height
 */
SearchImage.prototype['height'] = undefined;

/**
 * Show images with the specified height or larger, in pixels
 * @member {Number} height_from
 */
SearchImage.prototype['height_from'] = undefined;

/**
 * Show images with the specified height or smaller, in pixels
 * @member {Number} height_to
 */
SearchImage.prototype['height_to'] = undefined;

/**
 * Show images of the specified type
 * @member {Array.<module:model/SearchImage.ImageTypeEnum>} image_type
 */
SearchImage.prototype['image_type'] = undefined;

/**
 * Hide results with potentially unsafe keywords
 * @member {Boolean} keyword_safe_search
 * @default true
 */
SearchImage.prototype['keyword_safe_search'] = true;

/**
 * @member {module:model/Language} language
 */
SearchImage.prototype['language'] = undefined;

/**
 * Show only images with the specified license
 * @member {Array.<module:model/SearchImage.LicenseEnum>} license
 */
SearchImage.prototype['license'] = undefined;

/**
 * Show image results with the specified model IDs
 * @member {Array.<String>} model
 */
SearchImage.prototype['model'] = undefined;

/**
 * Show image results with horizontal or vertical orientation
 * @member {module:model/SearchImage.OrientationEnum} orientation
 */
SearchImage.prototype['orientation'] = undefined;

/**
 * Page number
 * @member {Number} page
 * @default 1
 */
SearchImage.prototype['page'] = 1;

/**
 * Show images that feature people of the specified age category
 * @member {module:model/SearchImage.PeopleAgeEnum} people_age
 */
SearchImage.prototype['people_age'] = undefined;

/**
 * Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
 * @member {Array.<module:model/SearchImage.PeopleEthnicityEnum>} people_ethnicity
 */
SearchImage.prototype['people_ethnicity'] = undefined;

/**
 * Show images with people of the specified gender
 * @member {module:model/SearchImage.PeopleGenderEnum} people_gender
 */
SearchImage.prototype['people_gender'] = undefined;

/**
 * Show images of people with a signed model release
 * @member {Boolean} people_model_released
 */
SearchImage.prototype['people_model_released'] = undefined;

/**
 * Show images with the specified number of people
 * @member {Number} people_number
 */
SearchImage.prototype['people_number'] = undefined;

/**
 * Number of results per page
 * @member {Number} per_page
 * @default 20
 */
SearchImage.prototype['per_page'] = 20;

/**
 * One or more search terms separated by spaces; you can use NOT to filter out images that match a term
 * @member {String} query
 */
SearchImage.prototype['query'] = undefined;

/**
 * @member {module:model/SearchImageRegion} region
 */
SearchImage.prototype['region'] = undefined;

/**
 * Enable or disable safe search
 * @member {Boolean} safe
 * @default true
 */
SearchImage.prototype['safe'] = true;

/**
 * Sort by
 * @member {module:model/SearchImage.SortEnum} sort
 * @default 'popular'
 */
SearchImage.prototype['sort'] = 'popular';

/**
 * Spellcheck the search query and return results on suggested spellings
 * @member {Boolean} spellcheck_query
 * @default true
 */
SearchImage.prototype['spellcheck_query'] = true;

/**
 * Amount of detail to render in the response
 * @member {module:model/SearchImage.ViewEnum} view
 * @default 'minimal'
 */
SearchImage.prototype['view'] = 'minimal';

/**
 * (Deprecated; use width_from and width_to instead) Show images with the specified width
 * @member {Number} width
 */
SearchImage.prototype['width'] = undefined;

/**
 * Show images with the specified width or larger, in pixels
 * @member {Number} width_from
 */
SearchImage.prototype['width_from'] = undefined;

/**
 * Show images with the specified width or smaller, in pixels
 * @member {Number} width_to
 */
SearchImage.prototype['width_to'] = undefined;





/**
 * Allowed values for the <code>imageType</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['ImageTypeEnum'] = {

    /**
     * value: "photo"
     * @const
     */
    "photo": "photo",

    /**
     * value: "illustration"
     * @const
     */
    "illustration": "illustration",

    /**
     * value: "vector"
     * @const
     */
    "vector": "vector"
};


/**
 * Allowed values for the <code>license</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['LicenseEnum'] = {

    /**
     * value: "commercial"
     * @const
     */
    "commercial": "commercial",

    /**
     * value: "editorial"
     * @const
     */
    "editorial": "editorial",

    /**
     * value: "enhanced"
     * @const
     */
    "enhanced": "enhanced"
};


/**
 * Allowed values for the <code>orientation</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['OrientationEnum'] = {

    /**
     * value: "horizontal"
     * @const
     */
    "horizontal": "horizontal",

    /**
     * value: "vertical"
     * @const
     */
    "vertical": "vertical"
};


/**
 * Allowed values for the <code>people_age</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['PeopleAgeEnum'] = {

    /**
     * value: "infants"
     * @const
     */
    "infants": "infants",

    /**
     * value: "children"
     * @const
     */
    "children": "children",

    /**
     * value: "teenagers"
     * @const
     */
    "teenagers": "teenagers",

    /**
     * value: "20s"
     * @const
     */
    "20s": "20s",

    /**
     * value: "30s"
     * @const
     */
    "30s": "30s",

    /**
     * value: "40s"
     * @const
     */
    "40s": "40s",

    /**
     * value: "50s"
     * @const
     */
    "50s": "50s",

    /**
     * value: "60s"
     * @const
     */
    "60s": "60s",

    /**
     * value: "older"
     * @const
     */
    "older": "older"
};


/**
 * Allowed values for the <code>peopleEthnicity</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['PeopleEthnicityEnum'] = {

    /**
     * value: "african"
     * @const
     */
    "african": "african",

    /**
     * value: "african_american"
     * @const
     */
    "african_american": "african_american",

    /**
     * value: "black"
     * @const
     */
    "black": "black",

    /**
     * value: "brazilian"
     * @const
     */
    "brazilian": "brazilian",

    /**
     * value: "chinese"
     * @const
     */
    "chinese": "chinese",

    /**
     * value: "caucasian"
     * @const
     */
    "caucasian": "caucasian",

    /**
     * value: "east_asian"
     * @const
     */
    "east_asian": "east_asian",

    /**
     * value: "hispanic"
     * @const
     */
    "hispanic": "hispanic",

    /**
     * value: "japanese"
     * @const
     */
    "japanese": "japanese",

    /**
     * value: "middle_eastern"
     * @const
     */
    "middle_eastern": "middle_eastern",

    /**
     * value: "native_american"
     * @const
     */
    "native_american": "native_american",

    /**
     * value: "pacific_islander"
     * @const
     */
    "pacific_islander": "pacific_islander",

    /**
     * value: "south_asian"
     * @const
     */
    "south_asian": "south_asian",

    /**
     * value: "southeast_asian"
     * @const
     */
    "southeast_asian": "southeast_asian",

    /**
     * value: "other"
     * @const
     */
    "other": "other",

    /**
     * value: "NOT african"
     * @const
     */
    "NOT african": "NOT african",

    /**
     * value: "NOT african_american"
     * @const
     */
    "NOT african_american": "NOT african_american",

    /**
     * value: "NOT black"
     * @const
     */
    "NOT black": "NOT black",

    /**
     * value: "NOT brazilian"
     * @const
     */
    "NOT brazilian": "NOT brazilian",

    /**
     * value: "NOT chinese"
     * @const
     */
    "NOT chinese": "NOT chinese",

    /**
     * value: "NOT caucasian"
     * @const
     */
    "NOT caucasian": "NOT caucasian",

    /**
     * value: "NOT east_asian"
     * @const
     */
    "NOT east_asian": "NOT east_asian",

    /**
     * value: "NOT hispanic"
     * @const
     */
    "NOT hispanic": "NOT hispanic",

    /**
     * value: "NOT japanese"
     * @const
     */
    "NOT japanese": "NOT japanese",

    /**
     * value: "NOT middle_eastern"
     * @const
     */
    "NOT middle_eastern": "NOT middle_eastern",

    /**
     * value: "NOT native_american"
     * @const
     */
    "NOT native_american": "NOT native_american",

    /**
     * value: "NOT pacific_islander"
     * @const
     */
    "NOT pacific_islander": "NOT pacific_islander",

    /**
     * value: "NOT south_asian"
     * @const
     */
    "NOT south_asian": "NOT south_asian",

    /**
     * value: "NOT southeast_asian"
     * @const
     */
    "NOT southeast_asian": "NOT southeast_asian",

    /**
     * value: "NOT other"
     * @const
     */
    "NOT other": "NOT other"
};


/**
 * Allowed values for the <code>people_gender</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['PeopleGenderEnum'] = {

    /**
     * value: "male"
     * @const
     */
    "male": "male",

    /**
     * value: "female"
     * @const
     */
    "female": "female",

    /**
     * value: "both"
     * @const
     */
    "both": "both"
};


/**
 * Allowed values for the <code>sort</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['SortEnum'] = {

    /**
     * value: "newest"
     * @const
     */
    "newest": "newest",

    /**
     * value: "popular"
     * @const
     */
    "popular": "popular",

    /**
     * value: "relevance"
     * @const
     */
    "relevance": "relevance",

    /**
     * value: "random"
     * @const
     */
    "random": "random"
};


/**
 * Allowed values for the <code>view</code> property.
 * @enum {String}
 * @readonly
 */
SearchImage['ViewEnum'] = {

    /**
     * value: "minimal"
     * @const
     */
    "minimal": "minimal",

    /**
     * value: "full"
     * @const
     */
    "full": "full"
};



export default SearchImage;

