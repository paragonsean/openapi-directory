/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The AccessTokenDetails model module.
 * @module model/AccessTokenDetails
 * @version 1.1.32
 */
class AccessTokenDetails {
    /**
     * Constructs a new <code>AccessTokenDetails</code>.
     * Access token details that are currently associated with this user
     * @alias module:model/AccessTokenDetails
     */
    constructor() { 
        
        AccessTokenDetails.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>AccessTokenDetails</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AccessTokenDetails} obj Optional instance to populate.
     * @return {module:model/AccessTokenDetails} The populated <code>AccessTokenDetails</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AccessTokenDetails();

            if (data.hasOwnProperty('client_id')) {
                obj['client_id'] = ApiClient.convertToType(data['client_id'], 'String');
            }
            if (data.hasOwnProperty('contributor_id')) {
                obj['contributor_id'] = ApiClient.convertToType(data['contributor_id'], 'String');
            }
            if (data.hasOwnProperty('customer_id')) {
                obj['customer_id'] = ApiClient.convertToType(data['customer_id'], 'String');
            }
            if (data.hasOwnProperty('expires_in')) {
                obj['expires_in'] = ApiClient.convertToType(data['expires_in'], 'Number');
            }
            if (data.hasOwnProperty('organization_id')) {
                obj['organization_id'] = ApiClient.convertToType(data['organization_id'], 'String');
            }
            if (data.hasOwnProperty('realm')) {
                obj['realm'] = ApiClient.convertToType(data['realm'], 'String');
            }
            if (data.hasOwnProperty('scopes')) {
                obj['scopes'] = ApiClient.convertToType(data['scopes'], ['String']);
            }
            if (data.hasOwnProperty('user_id')) {
                obj['user_id'] = ApiClient.convertToType(data['user_id'], 'String');
            }
            if (data.hasOwnProperty('username')) {
                obj['username'] = ApiClient.convertToType(data['username'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AccessTokenDetails</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AccessTokenDetails</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['client_id'] && !(typeof data['client_id'] === 'string' || data['client_id'] instanceof String)) {
            throw new Error("Expected the field `client_id` to be a primitive type in the JSON string but got " + data['client_id']);
        }
        // ensure the json data is a string
        if (data['contributor_id'] && !(typeof data['contributor_id'] === 'string' || data['contributor_id'] instanceof String)) {
            throw new Error("Expected the field `contributor_id` to be a primitive type in the JSON string but got " + data['contributor_id']);
        }
        // ensure the json data is a string
        if (data['customer_id'] && !(typeof data['customer_id'] === 'string' || data['customer_id'] instanceof String)) {
            throw new Error("Expected the field `customer_id` to be a primitive type in the JSON string but got " + data['customer_id']);
        }
        // ensure the json data is a string
        if (data['organization_id'] && !(typeof data['organization_id'] === 'string' || data['organization_id'] instanceof String)) {
            throw new Error("Expected the field `organization_id` to be a primitive type in the JSON string but got " + data['organization_id']);
        }
        // ensure the json data is a string
        if (data['realm'] && !(typeof data['realm'] === 'string' || data['realm'] instanceof String)) {
            throw new Error("Expected the field `realm` to be a primitive type in the JSON string but got " + data['realm']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['scopes'])) {
            throw new Error("Expected the field `scopes` to be an array in the JSON data but got " + data['scopes']);
        }
        // ensure the json data is a string
        if (data['user_id'] && !(typeof data['user_id'] === 'string' || data['user_id'] instanceof String)) {
            throw new Error("Expected the field `user_id` to be a primitive type in the JSON string but got " + data['user_id']);
        }
        // ensure the json data is a string
        if (data['username'] && !(typeof data['username'] === 'string' || data['username'] instanceof String)) {
            throw new Error("Expected the field `username` to be a primitive type in the JSON string but got " + data['username']);
        }

        return true;
    }


}



/**
 * Client ID that is associated with the user
 * @member {String} client_id
 */
AccessTokenDetails.prototype['client_id'] = undefined;

/**
 * Contributor ID that is associated with the user
 * @member {String} contributor_id
 */
AccessTokenDetails.prototype['contributor_id'] = undefined;

/**
 * Customer ID that is associated with the user
 * @member {String} customer_id
 */
AccessTokenDetails.prototype['customer_id'] = undefined;

/**
 * Number of seconds until the access token expires; no expiration if this value is null
 * @member {Number} expires_in
 */
AccessTokenDetails.prototype['expires_in'] = undefined;

/**
 * Organization ID that is associated with the user
 * @member {String} organization_id
 */
AccessTokenDetails.prototype['organization_id'] = undefined;

/**
 * Type of access token
 * @member {module:model/AccessTokenDetails.RealmEnum} realm
 */
AccessTokenDetails.prototype['realm'] = undefined;

/**
 * Scopes that this access token provides when used as authentication
 * @member {Array.<String>} scopes
 */
AccessTokenDetails.prototype['scopes'] = undefined;

/**
 * User ID that is associated with the user
 * @member {String} user_id
 */
AccessTokenDetails.prototype['user_id'] = undefined;

/**
 * User name that is associated with the user
 * @member {String} username
 */
AccessTokenDetails.prototype['username'] = undefined;





/**
 * Allowed values for the <code>realm</code> property.
 * @enum {String}
 * @readonly
 */
AccessTokenDetails['RealmEnum'] = {

    /**
     * value: "customer"
     * @const
     */
    "customer": "customer",

    /**
     * value: "contributor"
     * @const
     */
    "contributor": "contributor"
};



export default AccessTokenDetails;

