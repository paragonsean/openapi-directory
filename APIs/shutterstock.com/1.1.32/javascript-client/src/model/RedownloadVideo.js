/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cookie from './Cookie';

/**
 * The RedownloadVideo model module.
 * @module model/RedownloadVideo
 * @version 1.1.32
 */
class RedownloadVideo {
    /**
     * Constructs a new <code>RedownloadVideo</code>.
     * Data required to redownload a video
     * @alias module:model/RedownloadVideo
     */
    constructor() { 
        
        RedownloadVideo.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>RedownloadVideo</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/RedownloadVideo} obj Optional instance to populate.
     * @return {module:model/RedownloadVideo} The populated <code>RedownloadVideo</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new RedownloadVideo();

            if (data.hasOwnProperty('auth_cookie')) {
                obj['auth_cookie'] = Cookie.constructFromObject(data['auth_cookie']);
            }
            if (data.hasOwnProperty('show_modal')) {
                obj['show_modal'] = ApiClient.convertToType(data['show_modal'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('verification_code')) {
                obj['verification_code'] = ApiClient.convertToType(data['verification_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>RedownloadVideo</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>RedownloadVideo</code>.
     */
    static validateJSON(data) {
        // validate the optional field `auth_cookie`
        if (data['auth_cookie']) { // data not null
          Cookie.validateJSON(data['auth_cookie']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['verification_code'] && !(typeof data['verification_code'] === 'string' || data['verification_code'] instanceof String)) {
            throw new Error("Expected the field `verification_code` to be a primitive type in the JSON string but got " + data['verification_code']);
        }

        return true;
    }


}



/**
 * @member {module:model/Cookie} auth_cookie
 */
RedownloadVideo.prototype['auth_cookie'] = undefined;

/**
 * (Deprecated)
 * @member {Boolean} show_modal
 */
RedownloadVideo.prototype['show_modal'] = undefined;

/**
 * Size of the video
 * @member {module:model/RedownloadVideo.SizeEnum} size
 */
RedownloadVideo.prototype['size'] = undefined;

/**
 * (Deprecated)
 * @member {String} verification_code
 */
RedownloadVideo.prototype['verification_code'] = undefined;





/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
RedownloadVideo['SizeEnum'] = {

    /**
     * value: "web"
     * @const
     */
    "web": "web",

    /**
     * value: "sd"
     * @const
     */
    "sd": "sd",

    /**
     * value: "hd"
     * @const
     */
    "hd": "hd",

    /**
     * value: "4k"
     * @const
     */
    "4k": "4k"
};



export default RedownloadVideo;

