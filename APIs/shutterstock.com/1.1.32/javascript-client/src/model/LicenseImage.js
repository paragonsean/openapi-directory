/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Cookie from './Cookie';
import CustomSizeDimensions from './CustomSizeDimensions';

/**
 * The LicenseImage model module.
 * @module model/LicenseImage
 * @version 1.1.32
 */
class LicenseImage {
    /**
     * Constructs a new <code>LicenseImage</code>.
     * Data required to license an image
     * @alias module:model/LicenseImage
     * @param imageId {String} Image ID
     */
    constructor(imageId) { 
        
        LicenseImage.initialize(this, imageId);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, imageId) { 
        obj['format'] = 'jpg';
        obj['image_id'] = imageId;
    }

    /**
     * Constructs a <code>LicenseImage</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/LicenseImage} obj Optional instance to populate.
     * @return {module:model/LicenseImage} The populated <code>LicenseImage</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new LicenseImage();

            if (data.hasOwnProperty('auth_cookie')) {
                obj['auth_cookie'] = Cookie.constructFromObject(data['auth_cookie']);
            }
            if (data.hasOwnProperty('custom_dimensions')) {
                obj['custom_dimensions'] = CustomSizeDimensions.constructFromObject(data['custom_dimensions']);
            }
            if (data.hasOwnProperty('editorial_acknowledgement')) {
                obj['editorial_acknowledgement'] = ApiClient.convertToType(data['editorial_acknowledgement'], 'Boolean');
            }
            if (data.hasOwnProperty('format')) {
                obj['format'] = ApiClient.convertToType(data['format'], 'String');
            }
            if (data.hasOwnProperty('image_id')) {
                obj['image_id'] = ApiClient.convertToType(data['image_id'], 'String');
            }
            if (data.hasOwnProperty('metadata')) {
                obj['metadata'] = ApiClient.convertToType(data['metadata'], Object);
            }
            if (data.hasOwnProperty('price')) {
                obj['price'] = ApiClient.convertToType(data['price'], 'Number');
            }
            if (data.hasOwnProperty('search_id')) {
                obj['search_id'] = ApiClient.convertToType(data['search_id'], 'String');
            }
            if (data.hasOwnProperty('show_modal')) {
                obj['show_modal'] = ApiClient.convertToType(data['show_modal'], 'Boolean');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('subscription_id')) {
                obj['subscription_id'] = ApiClient.convertToType(data['subscription_id'], 'String');
            }
            if (data.hasOwnProperty('verification_code')) {
                obj['verification_code'] = ApiClient.convertToType(data['verification_code'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>LicenseImage</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>LicenseImage</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of LicenseImage.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // validate the optional field `auth_cookie`
        if (data['auth_cookie']) { // data not null
          Cookie.validateJSON(data['auth_cookie']);
        }
        // validate the optional field `custom_dimensions`
        if (data['custom_dimensions']) { // data not null
          CustomSizeDimensions.validateJSON(data['custom_dimensions']);
        }
        // ensure the json data is a string
        if (data['format'] && !(typeof data['format'] === 'string' || data['format'] instanceof String)) {
            throw new Error("Expected the field `format` to be a primitive type in the JSON string but got " + data['format']);
        }
        // ensure the json data is a string
        if (data['image_id'] && !(typeof data['image_id'] === 'string' || data['image_id'] instanceof String)) {
            throw new Error("Expected the field `image_id` to be a primitive type in the JSON string but got " + data['image_id']);
        }
        // ensure the json data is a string
        if (data['search_id'] && !(typeof data['search_id'] === 'string' || data['search_id'] instanceof String)) {
            throw new Error("Expected the field `search_id` to be a primitive type in the JSON string but got " + data['search_id']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is a string
        if (data['subscription_id'] && !(typeof data['subscription_id'] === 'string' || data['subscription_id'] instanceof String)) {
            throw new Error("Expected the field `subscription_id` to be a primitive type in the JSON string but got " + data['subscription_id']);
        }
        // ensure the json data is a string
        if (data['verification_code'] && !(typeof data['verification_code'] === 'string' || data['verification_code'] instanceof String)) {
            throw new Error("Expected the field `verification_code` to be a primitive type in the JSON string but got " + data['verification_code']);
        }

        return true;
    }


}

LicenseImage.RequiredProperties = ["image_id"];

/**
 * @member {module:model/Cookie} auth_cookie
 */
LicenseImage.prototype['auth_cookie'] = undefined;

/**
 * @member {module:model/CustomSizeDimensions} custom_dimensions
 */
LicenseImage.prototype['custom_dimensions'] = undefined;

/**
 * Set to true to acknowledge the editorial agreement
 * @member {Boolean} editorial_acknowledgement
 */
LicenseImage.prototype['editorial_acknowledgement'] = undefined;

/**
 * (Deprecated) Image format to download
 * @member {module:model/LicenseImage.FormatEnum} format
 * @default 'jpg'
 */
LicenseImage.prototype['format'] = 'jpg';

/**
 * Image ID
 * @member {String} image_id
 */
LicenseImage.prototype['image_id'] = undefined;

/**
 * Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
 * @member {Object} metadata
 */
LicenseImage.prototype['metadata'] = undefined;

/**
 * For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34
 * @member {Number} price
 */
LicenseImage.prototype['price'] = undefined;

/**
 * ID of the search that led to this licensing transaction
 * @member {String} search_id
 */
LicenseImage.prototype['search_id'] = undefined;

/**
 * (Deprecated)
 * @member {Boolean} show_modal
 */
LicenseImage.prototype['show_modal'] = undefined;

/**
 * Image size to download
 * @member {module:model/LicenseImage.SizeEnum} size
 */
LicenseImage.prototype['size'] = undefined;

/**
 * ID of the subscription to use for the download.
 * @member {String} subscription_id
 */
LicenseImage.prototype['subscription_id'] = undefined;

/**
 * (Deprecated)
 * @member {String} verification_code
 */
LicenseImage.prototype['verification_code'] = undefined;





/**
 * Allowed values for the <code>format</code> property.
 * @enum {String}
 * @readonly
 */
LicenseImage['FormatEnum'] = {

    /**
     * value: "jpg"
     * @const
     */
    "jpg": "jpg"
};


/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
LicenseImage['SizeEnum'] = {

    /**
     * value: "small"
     * @const
     */
    "small": "small",

    /**
     * value: "medium"
     * @const
     */
    "medium": "medium",

    /**
     * value: "huge"
     * @const
     */
    "huge": "huge",

    /**
     * value: "custom"
     * @const
     */
    "custom": "custom"
};



export default LicenseImage;

