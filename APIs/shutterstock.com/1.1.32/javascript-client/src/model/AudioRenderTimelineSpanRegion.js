/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import AudioRenderTimelineSpanRegionEndType from './AudioRenderTimelineSpanRegionEndType';
import AudioRenderTimelineSpanRegionKey from './AudioRenderTimelineSpanRegionKey';

/**
 * The AudioRenderTimelineSpanRegion model module.
 * @module model/AudioRenderTimelineSpanRegion
 * @version 1.1.32
 */
class AudioRenderTimelineSpanRegion {
    /**
     * Constructs a new <code>AudioRenderTimelineSpanRegion</code>.
     * A period of music or silence, measured in beats
     * @alias module:model/AudioRenderTimelineSpanRegion
     * @param beat {Number} The beat, relative to the span, at which the region object's music begins
     * @param descriptor {String} The descriptor ID needed to compose the music
     * @param id {Number} An identifier which must be unique within the parent span
     * @param region {module:model/AudioRenderTimelineSpanRegion.RegionEnum} The type of region
     */
    constructor(beat, descriptor, id, region) { 
        
        AudioRenderTimelineSpanRegion.initialize(this, beat, descriptor, id, region);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, beat, descriptor, id, region) { 
        obj['beat'] = beat;
        obj['descriptor'] = descriptor;
        obj['id'] = id;
        obj['region'] = region;
    }

    /**
     * Constructs a <code>AudioRenderTimelineSpanRegion</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/AudioRenderTimelineSpanRegion} obj Optional instance to populate.
     * @return {module:model/AudioRenderTimelineSpanRegion} The populated <code>AudioRenderTimelineSpanRegion</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new AudioRenderTimelineSpanRegion();

            if (data.hasOwnProperty('beat')) {
                obj['beat'] = ApiClient.convertToType(data['beat'], 'Number');
            }
            if (data.hasOwnProperty('descriptor')) {
                obj['descriptor'] = ApiClient.convertToType(data['descriptor'], 'String');
            }
            if (data.hasOwnProperty('end_type')) {
                obj['end_type'] = AudioRenderTimelineSpanRegionEndType.constructFromObject(data['end_type']);
            }
            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'Number');
            }
            if (data.hasOwnProperty('key')) {
                obj['key'] = AudioRenderTimelineSpanRegionKey.constructFromObject(data['key']);
            }
            if (data.hasOwnProperty('region')) {
                obj['region'] = ApiClient.convertToType(data['region'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>AudioRenderTimelineSpanRegion</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>AudioRenderTimelineSpanRegion</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of AudioRenderTimelineSpanRegion.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['descriptor'] && !(typeof data['descriptor'] === 'string' || data['descriptor'] instanceof String)) {
            throw new Error("Expected the field `descriptor` to be a primitive type in the JSON string but got " + data['descriptor']);
        }
        // validate the optional field `end_type`
        if (data['end_type']) { // data not null
          AudioRenderTimelineSpanRegionEndType.validateJSON(data['end_type']);
        }
        // validate the optional field `key`
        if (data['key']) { // data not null
          AudioRenderTimelineSpanRegionKey.validateJSON(data['key']);
        }
        // ensure the json data is a string
        if (data['region'] && !(typeof data['region'] === 'string' || data['region'] instanceof String)) {
            throw new Error("Expected the field `region` to be a primitive type in the JSON string but got " + data['region']);
        }

        return true;
    }


}

AudioRenderTimelineSpanRegion.RequiredProperties = ["beat", "descriptor", "id", "region"];

/**
 * The beat, relative to the span, at which the region object's music begins
 * @member {Number} beat
 */
AudioRenderTimelineSpanRegion.prototype['beat'] = undefined;

/**
 * The descriptor ID needed to compose the music
 * @member {String} descriptor
 */
AudioRenderTimelineSpanRegion.prototype['descriptor'] = undefined;

/**
 * @member {module:model/AudioRenderTimelineSpanRegionEndType} end_type
 */
AudioRenderTimelineSpanRegion.prototype['end_type'] = undefined;

/**
 * An identifier which must be unique within the parent span
 * @member {Number} id
 */
AudioRenderTimelineSpanRegion.prototype['id'] = undefined;

/**
 * @member {module:model/AudioRenderTimelineSpanRegionKey} key
 */
AudioRenderTimelineSpanRegion.prototype['key'] = undefined;

/**
 * The type of region
 * @member {module:model/AudioRenderTimelineSpanRegion.RegionEnum} region
 */
AudioRenderTimelineSpanRegion.prototype['region'] = undefined;





/**
 * Allowed values for the <code>region</code> property.
 * @enum {String}
 * @readonly
 */
AudioRenderTimelineSpanRegion['RegionEnum'] = {

    /**
     * value: "music"
     * @const
     */
    "music": "music",

    /**
     * value: "silence"
     * @const
     */
    "silence": "silence"
};



export default AudioRenderTimelineSpanRegion;

