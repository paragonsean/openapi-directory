/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DownloadHistoryDataList from '../model/DownloadHistoryDataList';
import Language from '../model/Language';
import LicenseSFXRequest from '../model/LicenseSFXRequest';
import LicenseSFXResultDataList from '../model/LicenseSFXResultDataList';
import SFX from '../model/SFX';
import SFXDataList from '../model/SFXDataList';
import SFXSearchResults from '../model/SFXSearchResults';
import SfxUrl from '../model/SfxUrl';

/**
* SoundEffects service.
* @module api/SoundEffectsApi
* @version 1.1.32
*/
export default class SoundEffectsApi {

    /**
    * Constructs a new SoundEffectsApi. 
    * @alias module:api/SoundEffectsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the downloadSfx operation.
     * @callback module:api/SoundEffectsApi~downloadSfxCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SfxUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download sound effects
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param {String} id License ID
     * @param {module:api/SoundEffectsApi~downloadSfxCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SfxUrl}
     */
    downloadSfx(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadSfx");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SfxUrl;
      return this.apiClient.callApi(
        '/v2/sfx/licenses/{id}/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSfxDetails operation.
     * @callback module:api/SoundEffectsApi~getSfxDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SFX} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about sound effects
     * This endpoint shows information about a sound effect.
     * @param {Number} id Audio track ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:model/String} [library] Which library to fetch from
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/SoundEffectsApi~getSfxDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SFX}
     */
    getSfxDetails(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSfxDetails");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language': opts['language'],
        'view': opts['view'],
        'library': opts['library'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SFX;
      return this.apiClient.callApi(
        '/v2/sfx/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSfxLicenseList operation.
     * @callback module:api/SoundEffectsApi~getSfxLicenseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadHistoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List sound effects licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} [sfxId] Show licenses for the specified sound effects ID
     * @param {String} [license] Show sound effects that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort order
     * @param {String} [username] Filter licenses by username of licensee
     * @param {Date} [startDate] Show licenses created on or after the specified date
     * @param {Date} [endDate] Show licenses created before the specified date
     * @param {String} [licenseId] Filter by the license ID
     * @param {module:model/String} [downloadAvailability = 'all')] Filter licenses by download availability
     * @param {Boolean} [teamHistory = false)] Set to true to see license history for all members of your team.
     * @param {module:api/SoundEffectsApi~getSfxLicenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadHistoryDataList}
     */
    getSfxLicenseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sfx_id': opts['sfxId'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'license_id': opts['licenseId'],
        'download_availability': opts['downloadAvailability'],
        'team_history': opts['teamHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadHistoryDataList;
      return this.apiClient.callApi(
        '/v2/sfx/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSfxListDetails operation.
     * @callback module:api/SoundEffectsApi~getSfxListDetailsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SFXDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List details about sound effects
     * This endpoint shows information about sound effects.
     * @param {Array.<String>} id One or more sound effect IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {module:model/String} [library] Which library to fetch from
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/SoundEffectsApi~getSfxListDetailsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SFXDataList}
     */
    getSfxListDetails(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getSfxListDetails");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'view': opts['view'],
        'language': opts['language'],
        'library': opts['library'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SFXDataList;
      return this.apiClient.callApi(
        '/v2/sfx', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licensesSFX operation.
     * @callback module:api/SoundEffectsApi~licensesSFXCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseSFXResultDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * License sound effects
     * This endpoint licenses sounds effect assets.
     * @param {module:model/LicenseSFXRequest} licenseSFXRequest 
     * @param {module:api/SoundEffectsApi~licensesSFXCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseSFXResultDataList}
     */
    licensesSFX(licenseSFXRequest, callback) {
      let postBody = licenseSFXRequest;
      // verify the required parameter 'licenseSFXRequest' is set
      if (licenseSFXRequest === undefined || licenseSFXRequest === null) {
        throw new Error("Missing the required parameter 'licenseSFXRequest' when calling licensesSFX");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseSFXResultDataList;
      return this.apiClient.callApi(
        '/v2/sfx/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchSFX operation.
     * @callback module:api/SoundEffectsApi~searchSFXCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SFXSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for sound effects
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * @param {Object} opts Optional parameters
     * @param {Date} [addedDate] Show sound effects added on the specified date
     * @param {Date} [addedDateStart] Show sound effects added on or after the specified date
     * @param {Date} [addedDateEnd] Show sound effects added before the specified date
     * @param {Number} [duration] Show sound effects with the specified duration in seconds
     * @param {Number} [durationFrom] Show sound effects with the specified duration or longer in seconds
     * @param {Number} [durationTo] Show sound effects with the specified duration or shorter in seconds
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {String} [query] One or more search terms separated by spaces
     * @param {Boolean} [safe = true)] Enable or disable safe search
     * @param {module:model/String} [sort = 'popular')] Sort by
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:model/Language} [language] Set query and result language (uses Accept-Language header if not set)
     * @param {module:api/SoundEffectsApi~searchSFXCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SFXSearchResults}
     */
    searchSFX(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'added_date': opts['addedDate'],
        'added_date_start': opts['addedDateStart'],
        'added_date_end': opts['addedDateEnd'],
        'duration': opts['duration'],
        'duration_from': opts['durationFrom'],
        'duration_to': opts['durationTo'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'view': opts['view'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SFXSearchResults;
      return this.apiClient.callApi(
        '/v2/sfx/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
