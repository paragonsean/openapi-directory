/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CategoryDataList from '../model/CategoryDataList';
import Collection from '../model/Collection';
import CollectionCreateRequest from '../model/CollectionCreateRequest';
import CollectionCreateResponse from '../model/CollectionCreateResponse';
import CollectionDataList from '../model/CollectionDataList';
import CollectionItemDataList from '../model/CollectionItemDataList';
import CollectionItemRequest from '../model/CollectionItemRequest';
import CollectionUpdateRequest from '../model/CollectionUpdateRequest';
import DownloadHistoryDataList from '../model/DownloadHistoryDataList';
import FeaturedCollection from '../model/FeaturedCollection';
import FeaturedCollectionDataList from '../model/FeaturedCollectionDataList';
import Language from '../model/Language';
import LicenseVideoRequest from '../model/LicenseVideoRequest';
import LicenseVideoResultDataList from '../model/LicenseVideoResultDataList';
import RedownloadVideo from '../model/RedownloadVideo';
import Suggestions from '../model/Suggestions';
import UpdatedMediaDataList from '../model/UpdatedMediaDataList';
import Url from '../model/Url';
import Video from '../model/Video';
import VideoCollectionItemDataList from '../model/VideoCollectionItemDataList';
import VideoDataList from '../model/VideoDataList';
import VideoSearchResults from '../model/VideoSearchResults';

/**
* Videos service.
* @module api/VideosApi
* @version 1.1.32
*/
export default class VideosApi {

    /**
    * Constructs a new VideosApi. 
    * @alias module:api/VideosApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addVideoCollectionItems operation.
     * @callback module:api/VideosApi~addVideoCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add videos to collections
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param {String} id The ID of the collection to which items should be added
     * @param {module:model/CollectionItemRequest} collectionItemRequest Array of video IDs to add to the collection
     * @param {module:api/VideosApi~addVideoCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addVideoCollectionItems(id, collectionItemRequest, callback) {
      let postBody = collectionItemRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addVideoCollectionItems");
      }
      // verify the required parameter 'collectionItemRequest' is set
      if (collectionItemRequest === undefined || collectionItemRequest === null) {
        throw new Error("Missing the required parameter 'collectionItemRequest' when calling addVideoCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/videos/collections/{id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createVideoCollection operation.
     * @callback module:api/VideosApi~createVideoCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create video collections
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use `POST /v2/videos/collections/{id}/items`.
     * @param {module:model/CollectionCreateRequest} collectionCreateRequest Collection metadata
     * @param {module:api/VideosApi~createVideoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionCreateResponse}
     */
    createVideoCollection(collectionCreateRequest, callback) {
      let postBody = collectionCreateRequest;
      // verify the required parameter 'collectionCreateRequest' is set
      if (collectionCreateRequest === undefined || collectionCreateRequest === null) {
        throw new Error("Missing the required parameter 'collectionCreateRequest' when calling createVideoCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollectionCreateResponse;
      return this.apiClient.callApi(
        '/v2/videos/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoCollection operation.
     * @callback module:api/VideosApi~deleteVideoCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete video collections
     * This endpoint deletes a collection.
     * @param {String} id The ID of the collection to delete
     * @param {module:api/VideosApi~deleteVideoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoCollection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/videos/collections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteVideoCollectionItems operation.
     * @callback module:api/VideosApi~deleteVideoCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove videos from collections
     * This endpoint removes one or more videos from a collection.
     * @param {String} id The ID of the Collection from which items will be deleted
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [itemId] One or more video IDs to remove from the collection
     * @param {module:api/VideosApi~deleteVideoCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteVideoCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteVideoCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'item_id': this.apiClient.buildCollectionParam(opts['itemId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/videos/collections/{id}/items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadVideos operation.
     * @callback module:api/VideosApi~downloadVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Url} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download videos
     * This endpoint redownloads videos that you have already received a license for.
     * @param {String} id The license ID of the item to (re)download. The download links in the response are valid for 8 hours.
     * @param {module:model/RedownloadVideo} redownloadVideo Information about the videos to redownload
     * @param {module:api/VideosApi~downloadVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Url}
     */
    downloadVideos(id, redownloadVideo, callback) {
      let postBody = redownloadVideo;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadVideos");
      }
      // verify the required parameter 'redownloadVideo' is set
      if (redownloadVideo === undefined || redownloadVideo === null) {
        throw new Error("Missing the required parameter 'redownloadVideo' when calling downloadVideos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Url;
      return this.apiClient.callApi(
        '/v2/videos/licenses/{id}/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the findSimilarVideos operation.
     * @callback module:api/VideosApi~findSimilarVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List similar videos
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param {String} id The ID of a video for which similar videos should be returned
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:api/VideosApi~findSimilarVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSearchResults}
     */
    findSimilarVideos(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling findSimilarVideos");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSearchResults;
      return this.apiClient.callApi(
        '/v2/videos/{id}/similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedVideoCollection operation.
     * @callback module:api/VideosApi~getFeaturedVideoCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeaturedCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of featured video collections
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use `GET /v2/videos/collections/featured/{id}/items`.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [embed] What information to include in the response, such as a URL to the collection
     * @param {module:api/VideosApi~getFeaturedVideoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeaturedCollection}
     */
    getFeaturedVideoCollection(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeaturedVideoCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeaturedCollection;
      return this.apiClient.callApi(
        '/v2/videos/collections/featured/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedVideoCollectionItems operation.
     * @callback module:api/VideosApi~getFeaturedVideoCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoCollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contents of featured video collections
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {module:api/VideosApi~getFeaturedVideoCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoCollectionItemDataList}
     */
    getFeaturedVideoCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeaturedVideoCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoCollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/videos/collections/featured/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedVideoCollectionList operation.
     * @callback module:api/VideosApi~getFeaturedVideoCollectionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeaturedCollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List featured video collections
     * This endpoint lists featured video collections and a name and cover video for each collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [embed] What information to include in the response, such as a URL to the collection
     * @param {module:api/VideosApi~getFeaturedVideoCollectionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeaturedCollectionDataList}
     */
    getFeaturedVideoCollectionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'embed': opts['embed']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeaturedCollectionDataList;
      return this.apiClient.callApi(
        '/v2/videos/collections/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpdatedVideos operation.
     * @callback module:api/VideosApi~getUpdatedVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatedMediaDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List updated videos
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show videos that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @param {Object} opts Optional parameters
     * @param {Date} [startDate] Show videos updated on or after the specified date
     * @param {Date} [endDate] Show videos updated before the specified date
     * @param {String} [interval = '1 HOUR')] Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort by oldest or newest videos first
     * @param {module:api/VideosApi~getUpdatedVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatedMediaDataList}
     */
    getUpdatedVideos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'interval': opts['interval'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdatedMediaDataList;
      return this.apiClient.callApi(
        '/v2/videos/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideo operation.
     * @callback module:api/VideosApi~getVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Video} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about videos
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param {String} id Video ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {module:model/String} [view = 'full')] Amount of detail to render in the response
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/VideosApi~getVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Video}
     */
    getVideo(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language': opts['language'],
        'view': opts['view'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Video;
      return this.apiClient.callApi(
        '/v2/videos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCollection operation.
     * @callback module:api/VideosApi~getVideoCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of video collections
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param {String} id The ID of the collection to return
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {String} [shareCode] Code to retrieve a shared collection
     * @param {module:api/VideosApi~getVideoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    getVideoCollection(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideoCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi'),
        'share_code': opts['shareCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v2/videos/collections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCollectionItems operation.
     * @callback module:api/VideosApi~getVideoCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contents of video collections
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {String} [shareCode] Code to retrieve the contents of a shared collection
     * @param {module:model/String} [sort = 'oldest')] Sort order
     * @param {module:api/VideosApi~getVideoCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionItemDataList}
     */
    getVideoCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideoCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'share_code': opts['shareCode'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/videos/collections/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoCollectionList operation.
     * @callback module:api/VideosApi~getVideoCollectionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List video collections
     * This endpoint lists your collections of videos and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {Array.<module:model/String>} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {module:api/VideosApi~getVideoCollectionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDataList}
     */
    getVideoCollectionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionDataList;
      return this.apiClient.callApi(
        '/v2/videos/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoLicenseList operation.
     * @callback module:api/VideosApi~getVideoLicenseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadHistoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List video licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} [videoId] Show licenses for the specified video ID
     * @param {String} [license] Show videos that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort by oldest or newest videos first
     * @param {String} [username] Filter licenses by username of licensee
     * @param {Date} [startDate] Show licenses created on or after the specified date
     * @param {Date} [endDate] Show licenses created before the specified date
     * @param {module:model/String} [downloadAvailability = 'all')] Filter licenses by download availability
     * @param {Boolean} [teamHistory = false)] Set to true to see license history for all members of your team.
     * @param {module:api/VideosApi~getVideoLicenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadHistoryDataList}
     */
    getVideoLicenseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'video_id': opts['videoId'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'download_availability': opts['downloadAvailability'],
        'team_history': opts['teamHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadHistoryDataList;
      return this.apiClient.callApi(
        '/v2/videos/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoList operation.
     * @callback module:api/VideosApi~getVideoListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List videos
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param {Array.<String>} id One or more video IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/VideosApi~getVideoListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoDataList}
     */
    getVideoList(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getVideoList");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'view': opts['view'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoDataList;
      return this.apiClient.callApi(
        '/v2/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getVideoSuggestions operation.
     * @callback module:api/VideosApi~getVideoSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Suggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param {String} query Search term for which you want keyword suggestions
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Limit the number of the suggestions
     * @param {module:api/VideosApi~getVideoSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Suggestions}
     */
    getVideoSuggestions(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getVideoSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Suggestions;
      return this.apiClient.callApi(
        '/v2/videos/search/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseVideos operation.
     * @callback module:api/VideosApi~licenseVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseVideoResultDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * License videos
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param {module:model/LicenseVideoRequest} licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {String} [subscriptionId] The subscription ID to use for licensing
     * @param {module:model/String} [size = 'web')] The size of the video to license
     * @param {String} [searchId] The Search ID that led to this licensing event
     * @param {module:api/VideosApi~licenseVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseVideoResultDataList}
     */
    licenseVideos(licenseVideoRequest, opts, callback) {
      opts = opts || {};
      let postBody = licenseVideoRequest;
      // verify the required parameter 'licenseVideoRequest' is set
      if (licenseVideoRequest === undefined || licenseVideoRequest === null) {
        throw new Error("Missing the required parameter 'licenseVideoRequest' when calling licenseVideos");
      }

      let pathParams = {
      };
      let queryParams = {
        'subscription_id': opts['subscriptionId'],
        'size': opts['size'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseVideoResultDataList;
      return this.apiClient.callApi(
        '/v2/videos/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listVideoCategories operation.
     * @callback module:api/VideosApi~listVideoCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List video categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {module:api/VideosApi~listVideoCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDataList}
     */
    listVideoCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryDataList;
      return this.apiClient.callApi(
        '/v2/videos/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameVideoCollection operation.
     * @callback module:api/VideosApi~renameVideoCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename video collections
     * This endpoint sets a new name for a collection.
     * @param {String} id The ID of the collection to rename
     * @param {module:model/CollectionUpdateRequest} collectionUpdateRequest The new name for the collection
     * @param {module:api/VideosApi~renameVideoCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameVideoCollection(id, collectionUpdateRequest, callback) {
      let postBody = collectionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling renameVideoCollection");
      }
      // verify the required parameter 'collectionUpdateRequest' is set
      if (collectionUpdateRequest === undefined || collectionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'collectionUpdateRequest' when calling renameVideoCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/videos/collections/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVideos operation.
     * @callback module:api/VideosApi~searchVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for videos
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {Object} opts Optional parameters
     * @param {Date} [addedDate] Show videos added on the specified date
     * @param {Date} [addedDateStart] Show videos added on or after the specified date
     * @param {Date} [addedDateEnd] Show videos added before the specified date
     * @param {module:model/String} [aspectRatio] Show videos with the specified aspect ratio
     * @param {String} [category] Show videos with the specified Shutterstock-defined category; specify a category name or ID
     * @param {Array.<String>} [contributor] Show videos with the specified artist names or IDs
     * @param {Array.<String>} [contributorCountry] Show videos from contributors in one or more specified countries
     * @param {Number} [duration] (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds
     * @param {Number} [durationFrom] Show videos with the specified duration or longer in seconds
     * @param {Number} [durationTo] Show videos with the specified duration or shorter in seconds
     * @param {Number} [fps] (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second
     * @param {Number} [fpsFrom] Show videos with the specified frames per second or more
     * @param {Number} [fpsTo] Show videos with the specified frames per second or fewer
     * @param {Boolean} [keywordSafeSearch = true)] Hide results with potentially unsafe keywords
     * @param {module:model/Language} [language] Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} [license] Show only videos with the specified license or licenses
     * @param {Array.<String>} [model] Show videos with each of the specified models
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [peopleAge] Show videos that feature people of the specified age range
     * @param {Array.<module:model/String>} [peopleEthnicity] Show videos with people of the specified ethnicities
     * @param {module:model/String} [peopleGender] Show videos with people with the specified gender
     * @param {Number} [peopleNumber] Show videos with the specified number of people
     * @param {Boolean} [peopleModelReleased] Show only videos of people with a signed model release
     * @param {String} [query] One or more search terms separated by spaces; you can use NOT to filter out videos that match a term
     * @param {module:model/String} [resolution] Show videos with the specified resolution
     * @param {Boolean} [safe = true)] Enable or disable safe search
     * @param {module:model/String} [sort = 'popular')] Sort by one of these categories
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:api/VideosApi~searchVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSearchResults}
     */
    searchVideos(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'added_date': opts['addedDate'],
        'added_date_start': opts['addedDateStart'],
        'added_date_end': opts['addedDateEnd'],
        'aspect_ratio': opts['aspectRatio'],
        'category': opts['category'],
        'contributor': this.apiClient.buildCollectionParam(opts['contributor'], 'multi'),
        'contributor_country': this.apiClient.buildCollectionParam(opts['contributorCountry'], 'multi'),
        'duration': opts['duration'],
        'duration_from': opts['durationFrom'],
        'duration_to': opts['durationTo'],
        'fps': opts['fps'],
        'fps_from': opts['fpsFrom'],
        'fps_to': opts['fpsTo'],
        'keyword_safe_search': opts['keywordSafeSearch'],
        'language': opts['language'],
        'license': this.apiClient.buildCollectionParam(opts['license'], 'multi'),
        'model': this.apiClient.buildCollectionParam(opts['model'], 'multi'),
        'page': opts['page'],
        'per_page': opts['perPage'],
        'people_age': opts['peopleAge'],
        'people_ethnicity': this.apiClient.buildCollectionParam(opts['peopleEthnicity'], 'multi'),
        'people_gender': opts['peopleGender'],
        'people_number': opts['peopleNumber'],
        'people_model_released': opts['peopleModelReleased'],
        'query': opts['query'],
        'resolution': opts['resolution'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSearchResults;
      return this.apiClient.callApi(
        '/v2/videos/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
