/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ComputerVisionImageCreateResponse from '../model/ComputerVisionImageCreateResponse';
import GetKeywordsAssetIdParameter from '../model/GetKeywordsAssetIdParameter';
import ImageCreateRequest from '../model/ImageCreateRequest';
import ImageCreateResponse from '../model/ImageCreateResponse';
import ImageSearchResults from '../model/ImageSearchResults';
import KeywordDataList from '../model/KeywordDataList';
import Language from '../model/Language';
import VideoSearchResults from '../model/VideoSearchResults';

/**
* ComputerVision service.
* @module api/ComputerVisionApi
* @version 1.1.32
*/
export default class ComputerVisionApi {

    /**
    * Constructs a new ComputerVisionApi. 
    * @alias module:api/ComputerVisionApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getKeywords operation.
     * @callback module:api/ComputerVisionApi~getKeywordsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/KeywordDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List suggested keywords
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * @param {module:model/GetKeywordsAssetIdParameter} assetId The asset ID or upload ID to suggest keywords for
     * @param {module:api/ComputerVisionApi~getKeywordsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/KeywordDataList}
     */
    getKeywords(assetId, callback) {
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getKeywords");
      }

      let pathParams = {
      };
      let queryParams = {
        'asset_id': assetId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = KeywordDataList;
      return this.apiClient.callApi(
        '/v2/cv/keywords', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarImages operation.
     * @callback module:api/ComputerVisionApi~getSimilarImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * @param {String} assetId The asset ID or upload ID to find similar images for
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [license] Show only images with the specified license
     * @param {Boolean} [safe = true)] Enable or disable safe search
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:api/ComputerVisionApi~getSimilarImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageSearchResults}
     */
    getSimilarImages(assetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getSimilarImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'asset_id': assetId,
        'license': this.apiClient.buildCollectionParam(opts['license'], 'multi'),
        'safe': opts['safe'],
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageSearchResults;
      return this.apiClient.callApi(
        '/v2/cv/similar/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getSimilarVideos operation.
     * @callback module:api/ComputerVisionApi~getSimilarVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/VideoSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List similar videos
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * @param {String} assetId The asset ID or upload ID to find similar videos for
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [license] Show only videos with the specified license
     * @param {Boolean} [safe = true)] Enable or disable safe search
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:api/ComputerVisionApi~getSimilarVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/VideoSearchResults}
     */
    getSimilarVideos(assetId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getSimilarVideos");
      }

      let pathParams = {
      };
      let queryParams = {
        'asset_id': assetId,
        'license': this.apiClient.buildCollectionParam(opts['license'], 'multi'),
        'safe': opts['safe'],
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = VideoSearchResults;
      return this.apiClient.callApi(
        '/v2/cv/similar/videos', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadEphemeralImage operation.
     * @callback module:api/ComputerVisionApi~uploadEphemeralImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload ephemeral images
     * Deprecated; use `POST /v2/cv/images` instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the `GET /v2/images/{id}/similar` endpoint.
     * @param {module:model/ImageCreateRequest} imageCreateRequest The image data in JPEG or PNG format
     * @param {module:api/ComputerVisionApi~uploadEphemeralImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageCreateResponse}
     */
    uploadEphemeralImage(imageCreateRequest, callback) {
      let postBody = imageCreateRequest;
      // verify the required parameter 'imageCreateRequest' is set
      if (imageCreateRequest === undefined || imageCreateRequest === null) {
        throw new Error("Missing the required parameter 'imageCreateRequest' when calling uploadEphemeralImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ImageCreateResponse;
      return this.apiClient.callApi(
        '/v2/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the uploadImage operation.
     * @callback module:api/ComputerVisionApi~uploadImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ComputerVisionImageCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Upload images
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * @param {module:model/ImageCreateRequest} imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height
     * @param {module:api/ComputerVisionApi~uploadImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ComputerVisionImageCreateResponse}
     */
    uploadImage(imageCreateRequest, callback) {
      let postBody = imageCreateRequest;
      // verify the required parameter 'imageCreateRequest' is set
      if (imageCreateRequest === undefined || imageCreateRequest === null) {
        throw new Error("Missing the required parameter 'imageCreateRequest' when calling uploadImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ComputerVisionImageCreateResponse;
      return this.apiClient.callApi(
        '/v2/cv/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
