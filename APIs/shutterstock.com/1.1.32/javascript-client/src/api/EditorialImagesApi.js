/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DownloadHistoryDataList from '../model/DownloadHistoryDataList';
import EditorialCategoryResults from '../model/EditorialCategoryResults';
import EditorialContent from '../model/EditorialContent';
import EditorialContentDataList from '../model/EditorialContentDataList';
import EditorialImageCategoryResults from '../model/EditorialImageCategoryResults';
import EditorialImageContentDataList from '../model/EditorialImageContentDataList';
import EditorialImageLivefeed from '../model/EditorialImageLivefeed';
import EditorialImageLivefeedList from '../model/EditorialImageLivefeedList';
import EditorialLivefeed from '../model/EditorialLivefeed';
import EditorialLivefeedList from '../model/EditorialLivefeedList';
import EditorialSearchResults from '../model/EditorialSearchResults';
import EditorialUpdatedResults from '../model/EditorialUpdatedResults';
import LicenseEditorialContentRequest from '../model/LicenseEditorialContentRequest';
import LicenseEditorialContentResults from '../model/LicenseEditorialContentResults';

/**
* EditorialImages service.
* @module api/EditorialImagesApi
* @version 1.1.32
*/
export default class EditorialImagesApi {

    /**
    * Constructs a new EditorialImagesApi. 
    * @alias module:api/EditorialImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEditorialCategories operation.
     * @callback module:api/EditorialImagesApi~getEditorialCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialCategoryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) List editorial categories
     * Deprecated; use `GET /v2/editorial/images/categories` instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @param {module:api/EditorialImagesApi~getEditorialCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialCategoryResults}
     */
    getEditorialCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialCategoryResults;
      return this.apiClient.callApi(
        '/v2/editorial/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialImage operation.
     * @callback module:api/EditorialImagesApi~getEditorialImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get editorial content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @param {module:api/EditorialImagesApi~getEditorialImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialContent}
     */
    getEditorialImage(id, country, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImage");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialContent;
      return this.apiClient.callApi(
        '/v2/editorial/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialImageLicenseList operation.
     * @callback module:api/EditorialImagesApi~getEditorialImageLicenseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadHistoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List editorial image licenses
     * This endpoint lists existing editorial image licenses.
     * @param {Object} opts Optional parameters
     * @param {String} [imageId] Show licenses for the specified editorial image ID
     * @param {String} [license] Show editorial images that are available with the specified license name
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort order
     * @param {String} [username] Filter licenses by username of licensee
     * @param {Date} [startDate] Show licenses created on or after the specified date
     * @param {Date} [endDate] Show licenses created before the specified date
     * @param {module:model/String} [downloadAvailability = 'all')] Filter licenses by download availability
     * @param {Boolean} [teamHistory = false)] Set to true to see license history for all members of your team.
     * @param {module:api/EditorialImagesApi~getEditorialImageLicenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadHistoryDataList}
     */
    getEditorialImageLicenseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'image_id': opts['imageId'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'download_availability': opts['downloadAvailability'],
        'team_history': opts['teamHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadHistoryDataList;
      return this.apiClient.callApi(
        '/v2/editorial/images/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialImageLivefeed operation.
     * @callback module:api/EditorialImagesApi~getEditorialImageLivefeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialImageLivefeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get editorial livefeed
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed is available for distribution in a certain country
     * @param {module:api/EditorialImagesApi~getEditorialImageLivefeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialImageLivefeed}
     */
    getEditorialImageLivefeed(id, country, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImageLivefeed");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImageLivefeed");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialImageLivefeed;
      return this.apiClient.callApi(
        '/v2/editorial/images/livefeeds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialImageLivefeedItems operation.
     * @callback module:api/EditorialImagesApi~getEditorialImageLivefeedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialImageContentDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get editorial livefeed items
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed items are available for distribution in a certain country
     * @param {module:api/EditorialImagesApi~getEditorialImageLivefeedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialImageContentDataList}
     */
    getEditorialImageLivefeedItems(id, country, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialImageLivefeedItems");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImageLivefeedItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialImageContentDataList;
      return this.apiClient.callApi(
        '/v2/editorial/images/livefeeds/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialImageLivefeedList operation.
     * @callback module:api/EditorialImagesApi~getEditorialImageLivefeedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialImageLivefeedList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get editorial livefeed list
     * @param {String} country Returns only livefeeds that are available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:api/EditorialImagesApi~getEditorialImageLivefeedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialImageLivefeedList}
     */
    getEditorialImageLivefeedList(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialImageLivefeedList");
      }

      let pathParams = {
      };
      let queryParams = {
        'country': country,
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialImageLivefeedList;
      return this.apiClient.callApi(
        '/v2/editorial/images/livefeeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialLivefeed operation.
     * @callback module:api/EditorialImagesApi~getEditorialLivefeedCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialLivefeed} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Get editorial livefeed
     * Deprecated: use `GET /v2/editorial/images/livefeeds/{id}` instead to get an editorial livefeed.
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed is available for distribution in a certain country
     * @param {module:api/EditorialImagesApi~getEditorialLivefeedCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialLivefeed}
     */
    getEditorialLivefeed(id, country, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialLivefeed");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialLivefeed");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialLivefeed;
      return this.apiClient.callApi(
        '/v2/editorial/livefeeds/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialLivefeedItems operation.
     * @callback module:api/EditorialImagesApi~getEditorialLivefeedItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialContentDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Get editorial livefeed items
     * Deprecated; use `GET /v2/editorial/images/livefeeds/{id}/items` instead to get editorial livefeed items.
     * @param {String} id Editorial livefeed ID; must be an URI encoded string
     * @param {String} country Returns only if the livefeed items are available for distribution in a certain country
     * @param {module:api/EditorialImagesApi~getEditorialLivefeedItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialContentDataList}
     */
    getEditorialLivefeedItems(id, country, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialLivefeedItems");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialLivefeedItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialContentDataList;
      return this.apiClient.callApi(
        '/v2/editorial/livefeeds/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialLivefeedList operation.
     * @callback module:api/EditorialImagesApi~getEditorialLivefeedListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialLivefeedList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Get editorial livefeed list
     * Deprecated; use `GET /v2/editorial/images/livefeeds` instead to get a list of editorial livefeeds.
     * @param {String} country Returns only livefeeds that are available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:api/EditorialImagesApi~getEditorialLivefeedListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialLivefeedList}
     */
    getEditorialLivefeedList(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialLivefeedList");
      }

      let pathParams = {
      };
      let queryParams = {
        'country': country,
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialLivefeedList;
      return this.apiClient.callApi(
        '/v2/editorial/livefeeds', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpdatedEditorialImage operation.
     * @callback module:api/EditorialImagesApi~getUpdatedEditorialImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialUpdatedResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) List updated content
     * Deprecated; use `GET /v2/editorial/images/updated` instead to get recently updated items.
     * @param {module:model/String} type Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
     * @param {Date} dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {Date} dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Date} [dateTakenStart] Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
     * @param {Date} [dateTakenEnd] Show images that were taken before the specified date
     * @param {String} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:model/String} [sort = 'newest')] Sort by
     * @param {Array.<String>} [supplierCode] Show only editorial content from certain suppliers
     * @param {Number} [perPage = 500)] Number of results per page
     * @param {module:api/EditorialImagesApi~getUpdatedEditorialImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialUpdatedResults}
     */
    getUpdatedEditorialImage(type, dateUpdatedStart, dateUpdatedEnd, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getUpdatedEditorialImage");
      }
      // verify the required parameter 'dateUpdatedStart' is set
      if (dateUpdatedStart === undefined || dateUpdatedStart === null) {
        throw new Error("Missing the required parameter 'dateUpdatedStart' when calling getUpdatedEditorialImage");
      }
      // verify the required parameter 'dateUpdatedEnd' is set
      if (dateUpdatedEnd === undefined || dateUpdatedEnd === null) {
        throw new Error("Missing the required parameter 'dateUpdatedEnd' when calling getUpdatedEditorialImage");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getUpdatedEditorialImage");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'date_updated_start': dateUpdatedStart,
        'date_updated_end': dateUpdatedEnd,
        'date_taken_start': opts['dateTakenStart'],
        'date_taken_end': opts['dateTakenEnd'],
        'cursor': opts['cursor'],
        'sort': opts['sort'],
        'supplier_code': this.apiClient.buildCollectionParam(opts['supplierCode'], 'multi'),
        'country': country,
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialUpdatedResults;
      return this.apiClient.callApi(
        '/v2/editorial/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpdatedEditorialImages operation.
     * @callback module:api/EditorialImagesApi~getUpdatedEditorialImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialUpdatedResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List updated content
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param {module:model/String} type Specify `addition` to return only images that were added or `edit` to return only images that were edited or deleted
     * @param {Date} dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {Date} dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {Date} [dateTakenStart] Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets
     * @param {Date} [dateTakenEnd] Show images that were taken before the specified date
     * @param {String} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:model/String} [sort = 'newest')] Sort by
     * @param {Array.<String>} [supplierCode] Show only editorial content from certain suppliers
     * @param {Number} [perPage = 500)] Number of results per page
     * @param {module:api/EditorialImagesApi~getUpdatedEditorialImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialUpdatedResults}
     */
    getUpdatedEditorialImages(type, dateUpdatedStart, dateUpdatedEnd, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling getUpdatedEditorialImages");
      }
      // verify the required parameter 'dateUpdatedStart' is set
      if (dateUpdatedStart === undefined || dateUpdatedStart === null) {
        throw new Error("Missing the required parameter 'dateUpdatedStart' when calling getUpdatedEditorialImages");
      }
      // verify the required parameter 'dateUpdatedEnd' is set
      if (dateUpdatedEnd === undefined || dateUpdatedEnd === null) {
        throw new Error("Missing the required parameter 'dateUpdatedEnd' when calling getUpdatedEditorialImages");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getUpdatedEditorialImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'type': type,
        'date_updated_start': dateUpdatedStart,
        'date_updated_end': dateUpdatedEnd,
        'date_taken_start': opts['dateTakenStart'],
        'date_taken_end': opts['dateTakenEnd'],
        'cursor': opts['cursor'],
        'sort': opts['sort'],
        'supplier_code': this.apiClient.buildCollectionParam(opts['supplierCode'], 'multi'),
        'country': country,
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialUpdatedResults;
      return this.apiClient.callApi(
        '/v2/editorial/images/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseEditorialImage operation.
     * @callback module:api/EditorialImagesApi~licenseEditorialImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseEditorialContentResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) License editorial content
     * Deprecated; use `POST /v2/editorial/images/licenses` instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param {module:model/LicenseEditorialContentRequest} licenseEditorialContentRequest License editorial content
     * @param {module:api/EditorialImagesApi~licenseEditorialImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseEditorialContentResults}
     */
    licenseEditorialImage(licenseEditorialContentRequest, callback) {
      let postBody = licenseEditorialContentRequest;
      // verify the required parameter 'licenseEditorialContentRequest' is set
      if (licenseEditorialContentRequest === undefined || licenseEditorialContentRequest === null) {
        throw new Error("Missing the required parameter 'licenseEditorialContentRequest' when calling licenseEditorialImage");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseEditorialContentResults;
      return this.apiClient.callApi(
        '/v2/editorial/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseEditorialImages operation.
     * @callback module:api/EditorialImagesApi~licenseEditorialImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseEditorialContentResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * License editorial content
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param {module:model/LicenseEditorialContentRequest} licenseEditorialContentRequest License editorial content
     * @param {module:api/EditorialImagesApi~licenseEditorialImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseEditorialContentResults}
     */
    licenseEditorialImages(licenseEditorialContentRequest, callback) {
      let postBody = licenseEditorialContentRequest;
      // verify the required parameter 'licenseEditorialContentRequest' is set
      if (licenseEditorialContentRequest === undefined || licenseEditorialContentRequest === null) {
        throw new Error("Missing the required parameter 'licenseEditorialContentRequest' when calling licenseEditorialImages");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseEditorialContentResults;
      return this.apiClient.callApi(
        '/v2/editorial/images/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEditorialImageCategories operation.
     * @callback module:api/EditorialImagesApi~listEditorialImageCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialImageCategoryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List editorial categories
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @param {module:api/EditorialImagesApi~listEditorialImageCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialImageCategoryResults}
     */
    listEditorialImageCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialImageCategoryResults;
      return this.apiClient.callApi(
        '/v2/editorial/images/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEditorial operation.
     * @callback module:api/EditorialImagesApi~searchEditorialCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Search editorial content
     * Deprecated; use `GET /v2/editorial/images/search` instead to search for editorial images.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} [query] One or more search terms separated by spaces
     * @param {module:model/String} [sort = 'relevant')] Sort by
     * @param {String} [category] Show editorial content within a certain editorial category; specify by category name
     * @param {Array.<String>} [supplierCode] Show only editorial content from certain suppliers
     * @param {Date} [dateStart] Show only editorial content generated on or after a specific date
     * @param {Date} [dateEnd] Show only editorial content generated on or before a specific date
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {String} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:api/EditorialImagesApi~searchEditorialCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialSearchResults}
     */
    searchEditorial(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling searchEditorial");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'category': opts['category'],
        'country': country,
        'supplier_code': this.apiClient.buildCollectionParam(opts['supplierCode'], 'multi'),
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'per_page': opts['perPage'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialSearchResults;
      return this.apiClient.callApi(
        '/v2/editorial/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEditorialImages operation.
     * @callback module:api/EditorialImagesApi~searchEditorialImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search editorial images
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {String} country Show only editorial content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} [query] One or more search terms separated by spaces
     * @param {module:model/String} [sort = 'relevant')] Sort by
     * @param {String} [category] Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
     * @param {Array.<String>} [supplierCode] Show only editorial content from certain suppliers
     * @param {Date} [dateStart] Show only editorial content generated on or after a specific date
     * @param {Date} [dateEnd] Show only editorial content generated on or before a specific date
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {String} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:api/EditorialImagesApi~searchEditorialImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialSearchResults}
     */
    searchEditorialImages(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling searchEditorialImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'category': opts['category'],
        'country': country,
        'supplier_code': this.apiClient.buildCollectionParam(opts['supplierCode'], 'multi'),
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'per_page': opts['perPage'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialSearchResults;
      return this.apiClient.callApi(
        '/v2/editorial/images/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the v2EditorialIdGet operation.
     * @callback module:api/EditorialImagesApi~v2EditorialIdGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * (Deprecated) Get editorial content details
     * Deprecated; use `GET /v2/editorial/images/{id}` instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/EditorialImagesApi~v2EditorialIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialContent}
     */
    v2EditorialIdGet(id, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling v2EditorialIdGet");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling v2EditorialIdGet");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country,
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialContent;
      return this.apiClient.callApi(
        '/v2/editorial/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
