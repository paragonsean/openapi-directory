/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CatalogCollection from '../model/CatalogCollection';
import CatalogCollectionDataList from '../model/CatalogCollectionDataList';
import CatalogCollectionItemDataList from '../model/CatalogCollectionItemDataList';
import CreateCatalogCollection from '../model/CreateCatalogCollection';
import CreateCatalogCollectionItems from '../model/CreateCatalogCollectionItems';
import RemoveCatalogCollectionItems from '../model/RemoveCatalogCollectionItems';
import UpdateCatalogCollection from '../model/UpdateCatalogCollection';

/**
* Catalog service.
* @module api/CatalogApi
* @version 1.1.32
*/
export default class CatalogApi {

    /**
    * Constructs a new CatalogApi. 
    * @alias module:api/CatalogApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addToCollection operation.
     * @callback module:api/CatalogApi~addToCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add items to catalog collections
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user's account's catalog.
     * @param {String} collectionId The ID of the collection to add assets to
     * @param {module:model/CreateCatalogCollectionItems} createCatalogCollectionItems Collection item attributes to add to collection
     * @param {module:api/CatalogApi~addToCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogCollection}
     */
    addToCollection(collectionId, createCatalogCollectionItems, callback) {
      let postBody = createCatalogCollectionItems;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling addToCollection");
      }
      // verify the required parameter 'createCatalogCollectionItems' is set
      if (createCatalogCollectionItems === undefined || createCatalogCollectionItems === null) {
        throw new Error("Missing the required parameter 'createCatalogCollectionItems' when calling addToCollection");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogCollection;
      return this.apiClient.callApi(
        '/v2/catalog/collections/{collection_id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createCollection operation.
     * @callback module:api/CatalogApi~createCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create catalog collections
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use `PATCH /v2/catalog/collections/{collection_id}/items`.
     * @param {module:model/CreateCatalogCollection} createCatalogCollection Create a catalog collection and, optionally, add items.
     * @param {module:api/CatalogApi~createCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogCollection}
     */
    createCollection(createCatalogCollection, callback) {
      let postBody = createCatalogCollection;
      // verify the required parameter 'createCatalogCollection' is set
      if (createCatalogCollection === undefined || createCatalogCollection === null) {
        throw new Error("Missing the required parameter 'createCatalogCollection' when calling createCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogCollection;
      return this.apiClient.callApi(
        '/v2/catalog/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteCollection operation.
     * @callback module:api/CatalogApi~deleteCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete catalog collections
     * This endpoint deletes a catalog collection. It does not remove the assets from the user's account's catalog.
     * @param {String} collectionId The ID of the collection to delete
     * @param {module:api/CatalogApi~deleteCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteCollection(collectionId, callback) {
      let postBody = null;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteCollection");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/catalog/collections/{collection_id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteFromCollection operation.
     * @callback module:api/CatalogApi~deleteFromCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove items from catalog collection
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user's account's catalog.
     * @param {String} collectionId The ID of the collection to remove assets from
     * @param {module:model/RemoveCatalogCollectionItems} removeCatalogCollectionItems Items to remove from the collection
     * @param {module:api/CatalogApi~deleteFromCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogCollection}
     */
    deleteFromCollection(collectionId, removeCatalogCollectionItems, callback) {
      let postBody = removeCatalogCollectionItems;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling deleteFromCollection");
      }
      // verify the required parameter 'removeCatalogCollectionItems' is set
      if (removeCatalogCollectionItems === undefined || removeCatalogCollectionItems === null) {
        throw new Error("Missing the required parameter 'removeCatalogCollectionItems' when calling deleteFromCollection");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogCollection;
      return this.apiClient.callApi(
        '/v2/catalog/collections/{collection_id}/items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCollections operation.
     * @callback module:api/CatalogApi~getCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogCollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List catalog collections
     * This endpoint returns a list of catalog collections.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort by
     * @param {Boolean} [shared = false)] Set to true to omit collections that you own and return only collections  that are shared with you
     * @param {module:api/CatalogApi~getCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogCollectionDataList}
     */
    getCollections(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'shared': opts['shared']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogCollectionDataList;
      return this.apiClient.callApi(
        '/v2/catalog/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchCatalog operation.
     * @callback module:api/CatalogApi~searchCatalogCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogCollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search catalogs for assets
     * This endpoint searches for assets in the account's catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort = 'newest')] Sort by
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {String} [query] One or more search terms separated by spaces
     * @param {Array.<String>} [collectionId] Filter by collection id
     * @param {Array.<module:model/String>} [assetType] Filter by asset type
     * @param {module:api/CatalogApi~searchCatalogCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogCollectionItemDataList}
     */
    searchCatalog(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'sort': opts['sort'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'collection_id': this.apiClient.buildCollectionParam(opts['collectionId'], 'multi'),
        'asset_type': this.apiClient.buildCollectionParam(opts['assetType'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CatalogCollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/catalog/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateCollection operation.
     * @callback module:api/CatalogApi~updateCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CatalogCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update collection metadata
     * This endpoint updates the metadata of a catalog collection.
     * @param {String} collectionId ID of collection that needs to be modified
     * @param {module:model/UpdateCatalogCollection} updateCatalogCollection Collections Metadata to update
     * @param {module:api/CatalogApi~updateCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CatalogCollection}
     */
    updateCollection(collectionId, updateCatalogCollection, callback) {
      let postBody = updateCatalogCollection;
      // verify the required parameter 'collectionId' is set
      if (collectionId === undefined || collectionId === null) {
        throw new Error("Missing the required parameter 'collectionId' when calling updateCollection");
      }
      // verify the required parameter 'updateCatalogCollection' is set
      if (updateCatalogCollection === undefined || updateCatalogCollection === null) {
        throw new Error("Missing the required parameter 'updateCatalogCollection' when calling updateCollection");
      }

      let pathParams = {
        'collection_id': collectionId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CatalogCollection;
      return this.apiClient.callApi(
        '/v2/catalog/collections/{collection_id}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
