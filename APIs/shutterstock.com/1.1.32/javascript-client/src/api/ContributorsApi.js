/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Collection from '../model/Collection';
import CollectionDataList from '../model/CollectionDataList';
import CollectionItemDataList from '../model/CollectionItemDataList';
import ContributorProfile from '../model/ContributorProfile';
import ContributorProfileDataList from '../model/ContributorProfileDataList';

/**
* Contributors service.
* @module api/ContributorsApi
* @version 1.1.32
*/
export default class ContributorsApi {

    /**
    * Constructs a new ContributorsApi. 
    * @alias module:api/ContributorsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getContributor operation.
     * @callback module:api/ContributorsApi~getContributorCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContributorProfile} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about a single contributor
     * This endpoint shows information about a single contributor, including contributor type, equipment they use, and other attributes.
     * @param {String} contributorId Contributor ID
     * @param {module:api/ContributorsApi~getContributorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContributorProfile}
     */
    getContributor(contributorId, callback) {
      let postBody = null;
      // verify the required parameter 'contributorId' is set
      if (contributorId === undefined || contributorId === null) {
        throw new Error("Missing the required parameter 'contributorId' when calling getContributor");
      }

      let pathParams = {
        'contributor_id': contributorId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContributorProfile;
      return this.apiClient.callApi(
        '/v2/contributors/{contributor_id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContributorCollectionItems operation.
     * @callback module:api/ContributorsApi~getContributorCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the items in contributors' collections
     * This endpoint lists the IDs of items in a contributor's collection and the date that each was added.
     * @param {String} contributorId Contributor ID
     * @param {String} id Collection ID that belongs to the contributor
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort] Sort order
     * @param {module:api/ContributorsApi~getContributorCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionItemDataList}
     */
    getContributorCollectionItems(contributorId, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contributorId' is set
      if (contributorId === undefined || contributorId === null) {
        throw new Error("Missing the required parameter 'contributorId' when calling getContributorCollectionItems");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContributorCollectionItems");
      }

      let pathParams = {
        'contributor_id': contributorId,
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/contributors/{contributor_id}/collections/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContributorCollections operation.
     * @callback module:api/ContributorsApi~getContributorCollectionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about contributors' collections
     * This endpoint gets more detailed information about a contributor's collection, including its cover image, timestamps for its creation, and most recent update. To get the items in collections, use GET /v2/contributors/{contributor_id}/collections/{id}/items.
     * @param {String} contributorId Contributor ID
     * @param {String} id Collection ID that belongs to the contributor
     * @param {module:api/ContributorsApi~getContributorCollectionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    getContributorCollections(contributorId, id, callback) {
      let postBody = null;
      // verify the required parameter 'contributorId' is set
      if (contributorId === undefined || contributorId === null) {
        throw new Error("Missing the required parameter 'contributorId' when calling getContributorCollections");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContributorCollections");
      }

      let pathParams = {
        'contributor_id': contributorId,
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v2/contributors/{contributor_id}/collections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContributorCollectionsList operation.
     * @callback module:api/ContributorsApi~getContributorCollectionsListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List contributors' collections
     * This endpoint lists collections based on contributor ID.
     * @param {String} contributorId Contributor ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [sort] Sort order
     * @param {module:api/ContributorsApi~getContributorCollectionsListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDataList}
     */
    getContributorCollectionsList(contributorId, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'contributorId' is set
      if (contributorId === undefined || contributorId === null) {
        throw new Error("Missing the required parameter 'contributorId' when calling getContributorCollectionsList");
      }

      let pathParams = {
        'contributor_id': contributorId
      };
      let queryParams = {
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionDataList;
      return this.apiClient.callApi(
        '/v2/contributors/{contributor_id}/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getContributorList operation.
     * @callback module:api/ContributorsApi~getContributorListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ContributorProfileDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about multiple contributors
     * This endpoint lists information about one or more contributors, including contributor type, equipment they use and other attributes.
     * @param {Array.<String>} id One or more contributor IDs
     * @param {module:api/ContributorsApi~getContributorListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ContributorProfileDataList}
     */
    getContributorList(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getContributorList");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ContributorProfileDataList;
      return this.apiClient.callApi(
        '/v2/contributors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
