/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import BulkImageSearchResults from '../model/BulkImageSearchResults';
import BulkSearchImagesContributorCountryParameter from '../model/BulkSearchImagesContributorCountryParameter';
import BulkSearchImagesRegionParameter from '../model/BulkSearchImagesRegionParameter';
import CategoryDataList from '../model/CategoryDataList';
import Collection from '../model/Collection';
import CollectionCreateRequest from '../model/CollectionCreateRequest';
import CollectionCreateResponse from '../model/CollectionCreateResponse';
import CollectionDataList from '../model/CollectionDataList';
import CollectionItemDataList from '../model/CollectionItemDataList';
import CollectionItemRequest from '../model/CollectionItemRequest';
import CollectionUpdateRequest from '../model/CollectionUpdateRequest';
import DownloadHistoryDataList from '../model/DownloadHistoryDataList';
import FeaturedCollection from '../model/FeaturedCollection';
import FeaturedCollectionDataList from '../model/FeaturedCollectionDataList';
import Image from '../model/Image';
import ImageDataList from '../model/ImageDataList';
import ImageSearchResults from '../model/ImageSearchResults';
import Language from '../model/Language';
import LicenseImageRequest from '../model/LicenseImageRequest';
import LicenseImageResultDataList from '../model/LicenseImageResultDataList';
import RecommendationDataList from '../model/RecommendationDataList';
import RedownloadImage from '../model/RedownloadImage';
import SearchEntitiesRequest from '../model/SearchEntitiesRequest';
import SearchEntitiesResponse from '../model/SearchEntitiesResponse';
import SearchImage from '../model/SearchImage';
import Suggestions from '../model/Suggestions';
import UpdatedMediaDataList from '../model/UpdatedMediaDataList';
import Url from '../model/Url';

/**
* Images service.
* @module api/ImagesApi
* @version 1.1.32
*/
export default class ImagesApi {

    /**
    * Constructs a new ImagesApi. 
    * @alias module:api/ImagesApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addImageCollectionItems operation.
     * @callback module:api/ImagesApi~addImageCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add images to collections
     * This endpoint adds one or more images to a collection by image IDs.
     * @param {String} id Collection ID
     * @param {module:model/CollectionItemRequest} collectionItemRequest Array of image IDs to add to the collection
     * @param {module:api/ImagesApi~addImageCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addImageCollectionItems(id, collectionItemRequest, callback) {
      let postBody = collectionItemRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addImageCollectionItems");
      }
      // verify the required parameter 'collectionItemRequest' is set
      if (collectionItemRequest === undefined || collectionItemRequest === null) {
        throw new Error("Missing the required parameter 'collectionItemRequest' when calling addImageCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/images/collections/{id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the bulkSearchImages operation.
     * @callback module:api/ImagesApi~bulkSearchImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/BulkImageSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Run multiple image searches
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the `GET /v2/images/search` endpoint.
     * @param {Array.<module:model/SearchImage>} searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {Date} [addedDate] Show images added on the specified date
     * @param {Date} [addedDateStart] Show images added on or after the specified date
     * @param {Number} [aspectRatioMin] Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} [aspectRatioMax] Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} [aspectRatio] Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Date} [addedDateEnd] Show images added before the specified date
     * @param {String} [category] Show images with the specified Shutterstock-defined category; specify a category name or ID
     * @param {String} [color] Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     * @param {Array.<String>} [contributor] Show images with the specified contributor names or IDs, allows multiple
     * @param {module:model/BulkSearchImagesContributorCountryParameter} [contributorCountry] Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     * @param {String} [fields] Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {Number} [height] (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @param {Number} [heightFrom] Show images with the specified height or larger, in pixels
     * @param {Number} [heightTo] Show images with the specified height or smaller, in pixels
     * @param {Array.<module:model/String>} [imageType] Show images of the specified type
     * @param {Boolean} [keywordSafeSearch = true)] Hide results with potentially unsafe keywords
     * @param {module:model/Language} [language] Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} [license] Show only images with the specified license
     * @param {Array.<String>} [model] Show image results with the specified model IDs
     * @param {module:model/String} [orientation] Show image results with horizontal or vertical orientation
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {Boolean} [peopleModelReleased] Show images of people with a signed model release
     * @param {module:model/String} [peopleAge] Show images that feature people of the specified age category
     * @param {Array.<module:model/String>} [peopleEthnicity] Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     * @param {module:model/String} [peopleGender] Show images with people of the specified gender
     * @param {Number} [peopleNumber] Show images with the specified number of people
     * @param {module:model/BulkSearchImagesRegionParameter} [region] Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     * @param {Boolean} [safe = true)] Enable or disable safe search
     * @param {module:model/String} [sort = 'popular')] Sort by
     * @param {Boolean} [spellcheckQuery = true)] Spellcheck the search query and return results on suggested spellings
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {Number} [width] (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @param {Number} [widthFrom] Show images with the specified width or larger, in pixels
     * @param {Number} [widthTo] Show images with the specified width or smaller, in pixels
     * @param {module:api/ImagesApi~bulkSearchImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/BulkImageSearchResults}
     */
    bulkSearchImages(searchImage, opts, callback) {
      opts = opts || {};
      let postBody = searchImage;
      // verify the required parameter 'searchImage' is set
      if (searchImage === undefined || searchImage === null) {
        throw new Error("Missing the required parameter 'searchImage' when calling bulkSearchImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'added_date': opts['addedDate'],
        'added_date_start': opts['addedDateStart'],
        'aspect_ratio_min': opts['aspectRatioMin'],
        'aspect_ratio_max': opts['aspectRatioMax'],
        'aspect_ratio': opts['aspectRatio'],
        'added_date_end': opts['addedDateEnd'],
        'category': opts['category'],
        'color': opts['color'],
        'contributor': this.apiClient.buildCollectionParam(opts['contributor'], 'multi'),
        'contributor_country': opts['contributorCountry'],
        'fields': opts['fields'],
        'height': opts['height'],
        'height_from': opts['heightFrom'],
        'height_to': opts['heightTo'],
        'image_type': this.apiClient.buildCollectionParam(opts['imageType'], 'multi'),
        'keyword_safe_search': opts['keywordSafeSearch'],
        'language': opts['language'],
        'license': this.apiClient.buildCollectionParam(opts['license'], 'multi'),
        'model': this.apiClient.buildCollectionParam(opts['model'], 'multi'),
        'orientation': opts['orientation'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'people_model_released': opts['peopleModelReleased'],
        'people_age': opts['peopleAge'],
        'people_ethnicity': this.apiClient.buildCollectionParam(opts['peopleEthnicity'], 'multi'),
        'people_gender': opts['peopleGender'],
        'people_number': opts['peopleNumber'],
        'region': opts['region'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'spellcheck_query': opts['spellcheckQuery'],
        'view': opts['view'],
        'width': opts['width'],
        'width_from': opts['widthFrom'],
        'width_to': opts['widthTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = BulkImageSearchResults;
      return this.apiClient.callApi(
        '/v2/bulk_search/images', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createImageCollection operation.
     * @callback module:api/ImagesApi~createImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create image collections
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use `POST /v2/images/collections/{id}/items`.
     * @param {module:model/CollectionCreateRequest} collectionCreateRequest The names of the new collections
     * @param {module:api/ImagesApi~createImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionCreateResponse}
     */
    createImageCollection(collectionCreateRequest, callback) {
      let postBody = collectionCreateRequest;
      // verify the required parameter 'collectionCreateRequest' is set
      if (collectionCreateRequest === undefined || collectionCreateRequest === null) {
        throw new Error("Missing the required parameter 'collectionCreateRequest' when calling createImageCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollectionCreateResponse;
      return this.apiClient.callApi(
        '/v2/images/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageCollection operation.
     * @callback module:api/ImagesApi~deleteImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete image collections
     * This endpoint deletes an image collection.
     * @param {String} id Collection ID
     * @param {module:api/ImagesApi~deleteImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImageCollection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImageCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/images/collections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteImageCollectionItems operation.
     * @callback module:api/ImagesApi~deleteImageCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove images from collections
     * This endpoint removes one or more images from a collection.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [itemId] One or more image IDs to remove from the collection
     * @param {module:api/ImagesApi~deleteImageCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteImageCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteImageCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'item_id': this.apiClient.buildCollectionParam(opts['itemId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/images/collections/{id}/items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadImage operation.
     * @callback module:api/ImagesApi~downloadImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Url} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download images
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param {String} id License ID
     * @param {module:model/RedownloadImage} redownloadImage Information about the images to redownload
     * @param {module:api/ImagesApi~downloadImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Url}
     */
    downloadImage(id, redownloadImage, callback) {
      let postBody = redownloadImage;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadImage");
      }
      // verify the required parameter 'redownloadImage' is set
      if (redownloadImage === undefined || redownloadImage === null) {
        throw new Error("Missing the required parameter 'redownloadImage' when calling downloadImage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Url;
      return this.apiClient.callApi(
        '/v2/images/licenses/{id}/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedImageCollection operation.
     * @callback module:api/ImagesApi~getFeaturedImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeaturedCollection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of featured image collections
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use `GET /v2/images/collections/featured/{id}/items`.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {module:model/String} [assetHint = '1x')] Cover image size
     * @param {module:api/ImagesApi~getFeaturedImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeaturedCollection}
     */
    getFeaturedImageCollection(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeaturedImageCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'embed': opts['embed'],
        'asset_hint': opts['assetHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeaturedCollection;
      return this.apiClient.callApi(
        '/v2/images/collections/featured/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedImageCollectionItems operation.
     * @callback module:api/ImagesApi~getFeaturedImageCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contents of featured image collections
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {module:api/ImagesApi~getFeaturedImageCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionItemDataList}
     */
    getFeaturedImageCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getFeaturedImageCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/images/collections/featured/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getFeaturedImageCollectionList operation.
     * @callback module:api/ImagesApi~getFeaturedImageCollectionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/FeaturedCollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List featured image collections
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {Array.<module:model/String>} [type] The types of collections to return
     * @param {module:model/String} [assetHint = '1x')] Cover image size
     * @param {module:api/ImagesApi~getFeaturedImageCollectionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/FeaturedCollectionDataList}
     */
    getFeaturedImageCollectionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'embed': opts['embed'],
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'asset_hint': opts['assetHint']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = FeaturedCollectionDataList;
      return this.apiClient.callApi(
        '/v2/images/collections/featured', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImage operation.
     * @callback module:api/ImagesApi~getImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Image} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about images
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {module:model/String} [view = 'full')] Amount of detail to render in the response
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/ImagesApi~getImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Image}
     */
    getImage(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImage");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language': opts['language'],
        'view': opts['view'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Image;
      return this.apiClient.callApi(
        '/v2/images/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageCollection operation.
     * @callback module:api/ImagesApi~getImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of image collections
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use `GET /v2/images/collections/{id}/items`.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {String} [shareCode] Code to retrieve a shared collection
     * @param {module:api/ImagesApi~getImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    getImageCollection(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi'),
        'share_code': opts['shareCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v2/images/collections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageCollectionItems operation.
     * @callback module:api/ImagesApi~getImageCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contents of image collections
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {String} [shareCode] Code to retrieve the contents of a shared collection
     * @param {module:model/String} [sort = 'oldest')] Sort order
     * @param {module:api/ImagesApi~getImageCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionItemDataList}
     */
    getImageCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'share_code': opts['shareCode'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/images/collections/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageCollectionList operation.
     * @callback module:api/ImagesApi~getImageCollectionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image collections
     * This endpoint lists your collections of images and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {module:api/ImagesApi~getImageCollectionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDataList}
     */
    getImageCollectionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi'),
        'page': opts['page'],
        'per_page': opts['perPage']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionDataList;
      return this.apiClient.callApi(
        '/v2/images/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageKeywordSuggestions operation.
     * @callback module:api/ImagesApi~getImageKeywordSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SearchEntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get keywords from text
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param {module:model/SearchEntitiesRequest} searchEntitiesRequest Plain text to extract keywords from
     * @param {module:api/ImagesApi~getImageKeywordSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SearchEntitiesResponse}
     */
    getImageKeywordSuggestions(searchEntitiesRequest, callback) {
      let postBody = searchEntitiesRequest;
      // verify the required parameter 'searchEntitiesRequest' is set
      if (searchEntitiesRequest === undefined || searchEntitiesRequest === null) {
        throw new Error("Missing the required parameter 'searchEntitiesRequest' when calling getImageKeywordSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SearchEntitiesResponse;
      return this.apiClient.callApi(
        '/v2/images/search/suggestions', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageLicenseList operation.
     * @callback module:api/ImagesApi~getImageLicenseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadHistoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image licenses
     * This endpoint lists existing licenses.
     * @param {Object} opts Optional parameters
     * @param {String} [imageId] Show licenses for the specified image ID
     * @param {String} [license] Show images that are available with the specified license, such as `standard` or `enhanced`; prepending a `-` sign excludes results from that license
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort order
     * @param {String} [username] Filter licenses by username of licensee
     * @param {Date} [startDate] Show licenses created on or after the specified date
     * @param {Date} [endDate] Show licenses created before the specified date
     * @param {module:model/String} [downloadAvailability = 'all')] Filter licenses by download availability
     * @param {Boolean} [teamHistory = false)] Set to true to see license history for all members of your team.
     * @param {module:api/ImagesApi~getImageLicenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadHistoryDataList}
     */
    getImageLicenseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'image_id': opts['imageId'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'download_availability': opts['downloadAvailability'],
        'team_history': opts['teamHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadHistoryDataList;
      return this.apiClient.callApi(
        '/v2/images/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageList operation.
     * @callback module:api/ImagesApi~getImageListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List images
     * This endpoint lists information about one or more images, including the available sizes.
     * @param {Array.<String>} id One or more image IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/ImagesApi~getImageListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageDataList}
     */
    getImageList(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageList");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'view': opts['view'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageDataList;
      return this.apiClient.callApi(
        '/v2/images', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageRecommendations operation.
     * @callback module:api/ImagesApi~getImageRecommendationsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RecommendationDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List recommended images
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param {Array.<String>} id Image IDs
     * @param {Object} opts Optional parameters
     * @param {Number} [maxItems = 20)] Maximum number of results returned in the response
     * @param {Boolean} [safe = true)] Restrict results to safe images
     * @param {module:api/ImagesApi~getImageRecommendationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RecommendationDataList}
     */
    getImageRecommendations(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getImageRecommendations");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'max_items': opts['maxItems'],
        'safe': opts['safe']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RecommendationDataList;
      return this.apiClient.callApi(
        '/v2/images/recommendations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getImageSuggestions operation.
     * @callback module:api/ImagesApi~getImageSuggestionsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Suggestions} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param {String} query Search term for which you want keyword suggestions
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Limit the number of suggestions
     * @param {module:api/ImagesApi~getImageSuggestionsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Suggestions}
     */
    getImageSuggestions(query, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling getImageSuggestions");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': query,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Suggestions;
      return this.apiClient.callApi(
        '/v2/images/search/suggestions', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getUpdatedImages operation.
     * @callback module:api/ImagesApi~getUpdatedImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdatedMediaDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List updated images
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the `interval` parameter to show images that were updated recently, but you can also use the `start_date` and `end_date` parameters to specify a range of no more than three days. Do not use the `interval` parameter with either `start_date` or `end_date`.
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [type] Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways
     * @param {Date} [startDate] Show images updated on or after the specified date
     * @param {Date} [endDate] Show images updated before the specified date
     * @param {String} [interval = '1 HOUR')] Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort order
     * @param {module:api/ImagesApi~getUpdatedImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdatedMediaDataList}
     */
    getUpdatedImages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'type': this.apiClient.buildCollectionParam(opts['type'], 'multi'),
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'interval': opts['interval'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = UpdatedMediaDataList;
      return this.apiClient.callApi(
        '/v2/images/updated', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseImages operation.
     * @callback module:api/ImagesApi~licenseImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseImageResultDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * License images
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param {module:model/LicenseImageRequest} licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters
     * @param {Object} opts Optional parameters
     * @param {String} [subscriptionId] Subscription ID to use to license the image
     * @param {module:model/String} [format] (Deprecated) Image format
     * @param {module:model/String} [size = 'huge')] Image size
     * @param {String} [searchId] Search ID that was provided in the results of an image search
     * @param {module:api/ImagesApi~licenseImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseImageResultDataList}
     */
    licenseImages(licenseImageRequest, opts, callback) {
      opts = opts || {};
      let postBody = licenseImageRequest;
      // verify the required parameter 'licenseImageRequest' is set
      if (licenseImageRequest === undefined || licenseImageRequest === null) {
        throw new Error("Missing the required parameter 'licenseImageRequest' when calling licenseImages");
      }

      let pathParams = {
      };
      let queryParams = {
        'subscription_id': opts['subscriptionId'],
        'format': opts['format'],
        'size': opts['size'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseImageResultDataList;
      return this.apiClient.callApi(
        '/v2/images/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listImageCategories operation.
     * @callback module:api/ImagesApi~listImageCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CategoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List image categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {module:api/ImagesApi~listImageCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CategoryDataList}
     */
    listImageCategories(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CategoryDataList;
      return this.apiClient.callApi(
        '/v2/images/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listSimilarImages operation.
     * @callback module:api/ImagesApi~listSimilarImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param {String} id Image ID
     * @param {Object} opts Optional parameters
     * @param {module:model/Language} [language] Language for the keywords and categories in the response
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {module:api/ImagesApi~listSimilarImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageSearchResults}
     */
    listSimilarImages(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling listSimilarImages");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'language': opts['language'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageSearchResults;
      return this.apiClient.callApi(
        '/v2/images/{id}/similar', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameImageCollection operation.
     * @callback module:api/ImagesApi~renameImageCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename image collections
     * This endpoint sets a new name for an image collection.
     * @param {String} id Collection ID
     * @param {module:model/CollectionUpdateRequest} collectionUpdateRequest The new name for the collection
     * @param {module:api/ImagesApi~renameImageCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameImageCollection(id, collectionUpdateRequest, callback) {
      let postBody = collectionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling renameImageCollection");
      }
      // verify the required parameter 'collectionUpdateRequest' is set
      if (collectionUpdateRequest === undefined || collectionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'collectionUpdateRequest' when calling renameImageCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/images/collections/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchImages operation.
     * @callback module:api/ImagesApi~searchImagesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ImageSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for images
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the `query` parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @param {Object} opts Optional parameters
     * @param {Date} [addedDate] Show images added on the specified date
     * @param {Date} [addedDateStart] Show images added on or after the specified date
     * @param {Number} [aspectRatioMin] Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} [aspectRatioMax] Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Number} [aspectRatio] Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image
     * @param {Boolean} [aiSearch] Set to true and specify the `ai_objective` and `ai_industry` parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry 
     * @param {Number} [aiLabelsLimit = 20)] For AI-powered search, specify the maximum number of labels to return
     * @param {module:model/String} [aiIndustry] For AI-powered search, specify the industry to target; requires that the `ai_search` parameter is set to true
     * @param {module:model/String} [aiObjective] For AI-powered search, specify the goal of the media; requires that the `ai_search` parameter is set to true
     * @param {Date} [addedDateEnd] Show images added before the specified date
     * @param {String} [category] Show images with the specified Shutterstock-defined category; specify a category name or ID
     * @param {String} [color] Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors
     * @param {Array.<String>} [contributor] Show images with the specified contributor names or IDs, allows multiple
     * @param {module:model/BulkSearchImagesContributorCountryParameter} [contributorCountry] Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search
     * @param {String} [fields] Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {Number} [height] (Deprecated; use height_from and height_to instead) Show images with the specified height
     * @param {Number} [heightFrom] Show images with the specified height or larger, in pixels
     * @param {Number} [heightTo] Show images with the specified height or smaller, in pixels
     * @param {Array.<module:model/String>} [imageType] Show images of the specified type
     * @param {Boolean} [keywordSafeSearch = true)] Hide results with potentially unsafe keywords
     * @param {module:model/Language} [language] Set query and result language (uses Accept-Language header if not set)
     * @param {Array.<module:model/String>} [license] Show only images with the specified license
     * @param {Array.<String>} [model] Show image results with the specified model IDs
     * @param {module:model/String} [orientation] Show image results with horizontal or vertical orientation
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {Boolean} [peopleModelReleased] Show images of people with a signed model release
     * @param {module:model/String} [peopleAge] Show images that feature people of the specified age category
     * @param {Array.<module:model/String>} [peopleEthnicity] Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities
     * @param {module:model/String} [peopleGender] Show images with people of the specified gender
     * @param {Number} [peopleNumber] Show images with the specified number of people
     * @param {String} [query] One or more search terms separated by spaces; you can use NOT to filter out images that match a term
     * @param {module:model/BulkSearchImagesRegionParameter} [region] Raise or lower search result rankings based on the result's relevance to a specified region; you can provide a country code or an IP address from which the API infers a country
     * @param {Boolean} [safe = true)] Enable or disable safe search
     * @param {module:model/String} [sort = 'popular')] Sort by
     * @param {Boolean} [spellcheckQuery = true)] Spellcheck the search query and return results on suggested spellings
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {Number} [width] (Deprecated; use width_from and width_to instead) Show images with the specified width
     * @param {Number} [widthFrom] Show images with the specified width or larger, in pixels
     * @param {Number} [widthTo] Show images with the specified width or smaller, in pixels
     * @param {module:api/ImagesApi~searchImagesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ImageSearchResults}
     */
    searchImages(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'added_date': opts['addedDate'],
        'added_date_start': opts['addedDateStart'],
        'aspect_ratio_min': opts['aspectRatioMin'],
        'aspect_ratio_max': opts['aspectRatioMax'],
        'aspect_ratio': opts['aspectRatio'],
        'ai_search': opts['aiSearch'],
        'ai_labels_limit': opts['aiLabelsLimit'],
        'ai_industry': opts['aiIndustry'],
        'ai_objective': opts['aiObjective'],
        'added_date_end': opts['addedDateEnd'],
        'category': opts['category'],
        'color': opts['color'],
        'contributor': this.apiClient.buildCollectionParam(opts['contributor'], 'multi'),
        'contributor_country': opts['contributorCountry'],
        'fields': opts['fields'],
        'height': opts['height'],
        'height_from': opts['heightFrom'],
        'height_to': opts['heightTo'],
        'image_type': this.apiClient.buildCollectionParam(opts['imageType'], 'multi'),
        'keyword_safe_search': opts['keywordSafeSearch'],
        'language': opts['language'],
        'license': this.apiClient.buildCollectionParam(opts['license'], 'multi'),
        'model': this.apiClient.buildCollectionParam(opts['model'], 'multi'),
        'orientation': opts['orientation'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'people_model_released': opts['peopleModelReleased'],
        'people_age': opts['peopleAge'],
        'people_ethnicity': this.apiClient.buildCollectionParam(opts['peopleEthnicity'], 'multi'),
        'people_gender': opts['peopleGender'],
        'people_number': opts['peopleNumber'],
        'query': opts['query'],
        'region': opts['region'],
        'safe': opts['safe'],
        'sort': opts['sort'],
        'spellcheck_query': opts['spellcheckQuery'],
        'view': opts['view'],
        'width': opts['width'],
        'width_from': opts['widthFrom'],
        'width_to': opts['widthTo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ImageSearchResults;
      return this.apiClient.callApi(
        '/v2/images/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
