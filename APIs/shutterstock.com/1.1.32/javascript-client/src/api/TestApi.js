/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import TestEcho from '../model/TestEcho';
import TestValidate from '../model/TestValidate';

/**
* Test service.
* @module api/TestApi
* @version 1.1.32
*/
export default class TestApi {

    /**
    * Constructs a new TestApi. 
    * @alias module:api/TestApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the echo operation.
     * @callback module:api/TestApi~echoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestEcho} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Echo text
     * @param {Object} opts Optional parameters
     * @param {String} [text = 'ok')] Text to echo
     * @param {module:api/TestApi~echoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestEcho}
     */
    echo(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'text': opts['text']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestEcho;
      return this.apiClient.callApi(
        '/v2/test', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the validate operation.
     * @callback module:api/TestApi~validateCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TestValidate} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Validate input
     * @param {Number} id Integer ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [tag] List of tags
     * @param {String} [userAgent] User agent
     * @param {module:api/TestApi~validateCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TestValidate}
     */
    validate(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling validate");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': id,
        'tag': this.apiClient.buildCollectionParam(opts['tag'], 'multi')
      };
      let headerParams = {
        'user-agent': opts['userAgent']
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TestValidate;
      return this.apiClient.callApi(
        '/v2/test/validate', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
