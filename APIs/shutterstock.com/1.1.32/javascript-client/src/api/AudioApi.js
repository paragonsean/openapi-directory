/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import Audio from '../model/Audio';
import AudioDataList from '../model/AudioDataList';
import AudioSearchResults from '../model/AudioSearchResults';
import AudioUrl from '../model/AudioUrl';
import Collection from '../model/Collection';
import CollectionCreateRequest from '../model/CollectionCreateRequest';
import CollectionCreateResponse from '../model/CollectionCreateResponse';
import CollectionDataList from '../model/CollectionDataList';
import CollectionItemDataList from '../model/CollectionItemDataList';
import CollectionItemRequest from '../model/CollectionItemRequest';
import CollectionUpdateRequest from '../model/CollectionUpdateRequest';
import DownloadHistoryDataList from '../model/DownloadHistoryDataList';
import GenreList from '../model/GenreList';
import InstrumentList from '../model/InstrumentList';
import LicenseAudioRequest from '../model/LicenseAudioRequest';
import LicenseAudioResultDataList from '../model/LicenseAudioResultDataList';
import MoodList from '../model/MoodList';

/**
* Audio service.
* @module api/AudioApi
* @version 1.1.32
*/
export default class AudioApi {

    /**
    * Constructs a new AudioApi. 
    * @alias module:api/AudioApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the addTrackCollectionItems operation.
     * @callback module:api/AudioApi~addTrackCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add audio tracks to collections
     * This endpoint adds one or more tracks to a collection by track IDs.
     * @param {String} id Collection ID
     * @param {module:model/CollectionItemRequest} collectionItemRequest List of items to add to collection
     * @param {module:api/AudioApi~addTrackCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    addTrackCollectionItems(id, collectionItemRequest, callback) {
      let postBody = collectionItemRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling addTrackCollectionItems");
      }
      // verify the required parameter 'collectionItemRequest' is set
      if (collectionItemRequest === undefined || collectionItemRequest === null) {
        throw new Error("Missing the required parameter 'collectionItemRequest' when calling addTrackCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/audio/collections/{id}/items', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createTrackCollection operation.
     * @callback module:api/AudioApi~createTrackCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionCreateResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create audio collections
     * This endpoint creates one or more collections (soundboxes). To add tracks, use `POST /v2/audio/collections/{id}/items`.
     * @param {module:model/CollectionCreateRequest} collectionCreateRequest Collection metadata
     * @param {module:api/AudioApi~createTrackCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionCreateResponse}
     */
    createTrackCollection(collectionCreateRequest, callback) {
      let postBody = collectionCreateRequest;
      // verify the required parameter 'collectionCreateRequest' is set
      if (collectionCreateRequest === undefined || collectionCreateRequest === null) {
        throw new Error("Missing the required parameter 'collectionCreateRequest' when calling createTrackCollection");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = CollectionCreateResponse;
      return this.apiClient.callApi(
        '/v2/audio/collections', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrackCollection operation.
     * @callback module:api/AudioApi~deleteTrackCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Delete audio collections
     * This endpoint deletes a collection.
     * @param {String} id Collection ID
     * @param {module:api/AudioApi~deleteTrackCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackCollection(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTrackCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/audio/collections/{id}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteTrackCollectionItems operation.
     * @callback module:api/AudioApi~deleteTrackCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Remove audio tracks from collections
     * This endpoint removes one or more tracks from a collection.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [itemId] One or more item IDs to remove from the collection
     * @param {module:api/AudioApi~deleteTrackCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTrackCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteTrackCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'item_id': this.apiClient.buildCollectionParam(opts['itemId'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/audio/collections/{id}/items', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the downloadTracks operation.
     * @callback module:api/AudioApi~downloadTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioUrl} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Download audio tracks
     * This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param {String} id License ID
     * @param {module:api/AudioApi~downloadTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioUrl}
     */
    downloadTracks(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling downloadTracks");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudioUrl;
      return this.apiClient.callApi(
        '/v2/audio/licenses/{id}/downloads', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrack operation.
     * @callback module:api/AudioApi~getTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Audio} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about audio tracks
     * This endpoint shows information about a track, including its genres, instruments, and other attributes.
     * @param {Number} id Audio track ID
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view = 'full')] Amount of detail to render in the response
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/AudioApi~getTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Audio}
     */
    getTrack(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrack");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'view': opts['view'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Audio;
      return this.apiClient.callApi(
        '/v2/audio/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackCollection operation.
     * @callback module:api/AudioApi~getTrackCollectionCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Collection} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the details of audio collections
     * This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use `GET /v2/audio/collections/{id}/items`.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Array.<module:model/String>} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {String} [shareCode] Code to retrieve a shared collection
     * @param {module:api/AudioApi~getTrackCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Collection}
     */
    getTrackCollection(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrackCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi'),
        'share_code': opts['shareCode']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Collection;
      return this.apiClient.callApi(
        '/v2/audio/collections/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackCollectionItems operation.
     * @callback module:api/AudioApi~getTrackCollectionItemsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionItemDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get the contents of audio collections
     * This endpoint lists the IDs of tracks in a collection and the date that each was added.
     * @param {String} id Collection ID
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {String} [shareCode] Code to retrieve the contents of a shared collection
     * @param {module:model/String} [sort = 'oldest')] Sort order
     * @param {module:api/AudioApi~getTrackCollectionItemsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionItemDataList}
     */
    getTrackCollectionItems(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrackCollectionItems");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'share_code': opts['shareCode'],
        'sort': opts['sort']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionItemDataList;
      return this.apiClient.callApi(
        '/v2/audio/collections/{id}/items', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackCollectionList operation.
     * @callback module:api/AudioApi~getTrackCollectionListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/CollectionDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List audio collections
     * This endpoint lists your collections of audio tracks and their basic attributes.
     * @param {Object} opts Optional parameters
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 100)] Number of results per page
     * @param {Array.<module:model/String>} [embed] Which sharing information to include in the response, such as a URL to the collection
     * @param {module:api/AudioApi~getTrackCollectionListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/CollectionDataList}
     */
    getTrackCollectionList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'page': opts['page'],
        'per_page': opts['perPage'],
        'embed': this.apiClient.buildCollectionParam(opts['embed'], 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = CollectionDataList;
      return this.apiClient.callApi(
        '/v2/audio/collections', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackLicenseList operation.
     * @callback module:api/AudioApi~getTrackLicenseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadHistoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List audio licenses
     * This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
     * @param {Object} opts Optional parameters
     * @param {String} [audioId] Show licenses for the specified track ID
     * @param {String} [license] Restrict results by license. Prepending a `-` sign will exclude results by license
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort order
     * @param {String} [username] Filter licenses by username of licensee
     * @param {Date} [startDate] Show licenses created on or after the specified date
     * @param {Date} [endDate] Show licenses created before the specified date
     * @param {module:model/String} [downloadAvailability = 'all')] Filter licenses by download availability
     * @param {Boolean} [teamHistory = false)] Set to true to see license history for all members of your team.
     * @param {module:api/AudioApi~getTrackLicenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadHistoryDataList}
     */
    getTrackLicenseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'audio_id': opts['audioId'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'download_availability': opts['downloadAvailability'],
        'team_history': opts['teamHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadHistoryDataList;
      return this.apiClient.callApi(
        '/v2/audio/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getTrackList operation.
     * @callback module:api/AudioApi~getTrackListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List audio tracks
     * This endpoint lists information about one or more audio tracks, including the description and publication date.
     * @param {Array.<String>} id One or more audio IDs
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/AudioApi~getTrackListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioDataList}
     */
    getTrackList(id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getTrackList");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi'),
        'view': opts['view'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudioDataList;
      return this.apiClient.callApi(
        '/v2/audio', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseTrack operation.
     * @callback module:api/AudioApi~licenseTrackCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseAudioResultDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * License audio tracks
     * This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
     * @param {module:model/LicenseAudioRequest} licenseAudioRequest Tracks to license
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [license] License type
     * @param {String} [searchId] The ID of the search that led to licensing this track
     * @param {module:api/AudioApi~licenseTrackCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseAudioResultDataList}
     */
    licenseTrack(licenseAudioRequest, opts, callback) {
      opts = opts || {};
      let postBody = licenseAudioRequest;
      // verify the required parameter 'licenseAudioRequest' is set
      if (licenseAudioRequest === undefined || licenseAudioRequest === null) {
        throw new Error("Missing the required parameter 'licenseAudioRequest' when calling licenseTrack");
      }

      let pathParams = {
      };
      let queryParams = {
        'license': opts['license'],
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseAudioResultDataList;
      return this.apiClient.callApi(
        '/v2/audio/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listGenres operation.
     * @callback module:api/AudioApi~listGenresCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenreList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List audio genres
     * This endpoint returns a list of all audio genres.
     * @param {Object} opts Optional parameters
     * @param {String} [language] Which language the genres will be returned
     * @param {module:api/AudioApi~listGenresCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenreList}
     */
    listGenres(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = GenreList;
      return this.apiClient.callApi(
        '/v2/audio/genres', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listInstruments operation.
     * @callback module:api/AudioApi~listInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstrumentList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List audio instruments
     * This endpoint returns a list of all audio instruments.
     * @param {Object} opts Optional parameters
     * @param {String} [language] Which language the instruments will be returned in
     * @param {module:api/AudioApi~listInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstrumentList}
     */
    listInstruments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentList;
      return this.apiClient.callApi(
        '/v2/audio/instruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listMoods operation.
     * @callback module:api/AudioApi~listMoodsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/MoodList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List audio moods
     * This endpoint returns a list of all audio moods.
     * @param {Object} opts Optional parameters
     * @param {String} [language] Which language the moods will be returned in
     * @param {module:api/AudioApi~listMoodsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/MoodList}
     */
    listMoods(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = MoodList;
      return this.apiClient.callApi(
        '/v2/audio/moods', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the renameTrackCollection operation.
     * @callback module:api/AudioApi~renameTrackCollectionCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rename audio collections
     * This endpoint sets a new name for a collection.
     * @param {String} id Collection ID
     * @param {module:model/CollectionUpdateRequest} collectionUpdateRequest Collection changes
     * @param {module:api/AudioApi~renameTrackCollectionCallback} callback The callback function, accepting three arguments: error, data, response
     */
    renameTrackCollection(id, collectionUpdateRequest, callback) {
      let postBody = collectionUpdateRequest;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling renameTrackCollection");
      }
      // verify the required parameter 'collectionUpdateRequest' is set
      if (collectionUpdateRequest === undefined || collectionUpdateRequest === null) {
        throw new Error("Missing the required parameter 'collectionUpdateRequest' when calling renameTrackCollection");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/audio/collections/{id}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchTracks operation.
     * @callback module:api/AudioApi~searchTracksCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search for tracks
     * This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [artists] Show tracks with one of the specified artist names or IDs
     * @param {Number} [bpm] (Deprecated; use bpm_from and bpm_to instead) Show tracks with the specified beats per minute
     * @param {Number} [bpmFrom] Show tracks with the specified beats per minute or faster
     * @param {Number} [bpmTo] Show tracks with the specified beats per minute or slower
     * @param {Number} [duration] Show tracks with the specified duration in seconds
     * @param {Number} [durationFrom] Show tracks with the specified duration or longer in seconds
     * @param {Number} [durationTo] Show tracks with the specified duration or shorter in seconds
     * @param {Array.<String>} [genre] Show tracks with each of the specified genres; to get the list of genres, use `GET /v2/audio/genres`
     * @param {Boolean} [isInstrumental] Show instrumental music only
     * @param {Array.<String>} [instruments] Show tracks with each of the specified instruments; to get the list of instruments, use `GET /v2/audio/instruments`
     * @param {Array.<String>} [moods] Show tracks with each of the specified moods; to get the list of moods, use `GET /v2/audio/moods`
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {String} [query] One or more search terms separated by spaces
     * @param {module:model/String} [sort] Sort by
     * @param {module:model/String} [sortOrder = 'desc')] Sort order
     * @param {String} [vocalDescription] Show tracks with the specified vocal description (male, female)
     * @param {module:model/String} [view = 'minimal')] Amount of detail to render in the response
     * @param {String} [fields] Fields to display in the response; see the documentation for the fields parameter in the overview section
     * @param {module:model/String} [library = 'premier')] Which library to search
     * @param {String} [language] Which language to search in
     * @param {module:api/AudioApi~searchTracksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioSearchResults}
     */
    searchTracks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'artists': this.apiClient.buildCollectionParam(opts['artists'], 'multi'),
        'bpm': opts['bpm'],
        'bpm_from': opts['bpmFrom'],
        'bpm_to': opts['bpmTo'],
        'duration': opts['duration'],
        'duration_from': opts['durationFrom'],
        'duration_to': opts['durationTo'],
        'genre': this.apiClient.buildCollectionParam(opts['genre'], 'multi'),
        'is_instrumental': opts['isInstrumental'],
        'instruments': this.apiClient.buildCollectionParam(opts['instruments'], 'multi'),
        'moods': this.apiClient.buildCollectionParam(opts['moods'], 'multi'),
        'page': opts['page'],
        'per_page': opts['perPage'],
        'query': opts['query'],
        'sort': opts['sort'],
        'sort_order': opts['sortOrder'],
        'vocal_description': opts['vocalDescription'],
        'view': opts['view'],
        'fields': opts['fields'],
        'library': opts['library'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudioSearchResults;
      return this.apiClient.callApi(
        '/v2/audio/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
