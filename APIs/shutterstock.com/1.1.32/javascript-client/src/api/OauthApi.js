/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CreateAccessTokenRequest from '../model/CreateAccessTokenRequest';
import CreateAccessTokenRequest1 from '../model/CreateAccessTokenRequest1';
import OauthAccessTokenResponse from '../model/OauthAccessTokenResponse';

/**
* Oauth service.
* @module api/OauthApi
* @version 1.1.32
*/
export default class OauthApi {

    /**
    * Constructs a new OauthApi. 
    * @alias module:api/OauthApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the authorize operation.
     * @callback module:api/OauthApi~authorizeCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Authorize applications
     * This endpoint returns a redirect URI (in the 'Location' header) that the customer uses to authorize your application and, together with POST /v2/oauth/access_token, generate an access token that represents that authorization.
     * @param {String} clientId Client ID (Consumer Key) of your application
     * @param {String} redirectUri The callback URI to send the request to after authorization; must use a host name that is registered with your application
     * @param {module:model/String} responseType Type of temporary authorization code that will be used to generate an access code; the only valid value is 'code'
     * @param {String} state Unique value used by the calling app to verify the request
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [realm = 'customer')] User type to be authorized (usually 'customer')
     * @param {String} [scope = 'user.view')] Space-separated list of scopes to be authorized
     * @param {module:api/OauthApi~authorizeCallback} callback The callback function, accepting three arguments: error, data, response
     */
    authorize(clientId, redirectUri, responseType, state, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'clientId' is set
      if (clientId === undefined || clientId === null) {
        throw new Error("Missing the required parameter 'clientId' when calling authorize");
      }
      // verify the required parameter 'redirectUri' is set
      if (redirectUri === undefined || redirectUri === null) {
        throw new Error("Missing the required parameter 'redirectUri' when calling authorize");
      }
      // verify the required parameter 'responseType' is set
      if (responseType === undefined || responseType === null) {
        throw new Error("Missing the required parameter 'responseType' when calling authorize");
      }
      // verify the required parameter 'state' is set
      if (state === undefined || state === null) {
        throw new Error("Missing the required parameter 'state' when calling authorize");
      }

      let pathParams = {
      };
      let queryParams = {
        'client_id': clientId,
        'realm': opts['realm'],
        'redirect_uri': redirectUri,
        'response_type': responseType,
        'scope': opts['scope'],
        'state': state
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['text/html'];
      let returnType = null;
      return this.apiClient.callApi(
        '/v2/oauth/authorize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createAccessToken operation.
     * @callback module:api/OauthApi~createAccessTokenCallback
     * @param {String} error Error message, if any.
     * @param {module:model/OauthAccessTokenResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get access tokens
     * This endpoint returns an access token for the specified user and with the specified scopes. The token does not expire until the user changes their password. The body parameters must be encoded as form data.
     * @param {Object} opts Optional parameters
     * @param {module:model/CreateAccessTokenRequest} [createAccessTokenRequest] 
     * @param {module:api/OauthApi~createAccessTokenCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/OauthAccessTokenResponse}
     */
    createAccessToken(opts, callback) {
      opts = opts || {};
      let postBody = opts['createAccessTokenRequest'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json', 'application/x-www-form-urlencoded'];
      let accepts = ['application/json'];
      let returnType = OauthAccessTokenResponse;
      return this.apiClient.callApi(
        '/v2/oauth/access_token', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
