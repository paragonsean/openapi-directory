/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DownloadHistoryDataList from '../model/DownloadHistoryDataList';
import EditorialVideoCategoryResults from '../model/EditorialVideoCategoryResults';
import EditorialVideoContent from '../model/EditorialVideoContent';
import EditorialVideoSearchResults from '../model/EditorialVideoSearchResults';
import LicenseEditorialContentResults from '../model/LicenseEditorialContentResults';
import LicenseEditorialVideoContentRequest from '../model/LicenseEditorialVideoContentRequest';

/**
* EditorialVideo service.
* @module api/EditorialVideoApi
* @version 1.1.32
*/
export default class EditorialVideoApi {

    /**
    * Constructs a new EditorialVideoApi. 
    * @alias module:api/EditorialVideoApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getEditorialVideo operation.
     * @callback module:api/EditorialVideoApi~getEditorialVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialVideoContent} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get editorial video content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param {String} id Editorial ID
     * @param {String} country Returns only if the content is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} [searchId] The ID of the search that is related to this request
     * @param {module:api/EditorialVideoApi~getEditorialVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialVideoContent}
     */
    getEditorialVideo(id, country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getEditorialVideo");
      }
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling getEditorialVideo");
      }

      let pathParams = {
        'id': id
      };
      let queryParams = {
        'country': country,
        'search_id': opts['searchId']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialVideoContent;
      return this.apiClient.callApi(
        '/v2/editorial/videos/{id}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEditorialVideoLicenseList operation.
     * @callback module:api/EditorialVideoApi~getEditorialVideoLicenseListCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DownloadHistoryDataList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List editorial video licenses
     * This endpoint lists existing editorial video licenses.
     * @param {Object} opts Optional parameters
     * @param {String} [videoId] Show licenses for the specified editorial video ID
     * @param {String} [license] Show editorial videos that are available with the specified license name
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {module:model/String} [sort = 'newest')] Sort order
     * @param {String} [username] Filter licenses by username of licensee
     * @param {Date} [startDate] Show licenses created on or after the specified date
     * @param {Date} [endDate] Show licenses created before the specified date
     * @param {module:model/String} [downloadAvailability = 'all')] Filter licenses by download availability
     * @param {Boolean} [teamHistory = false)] Set to true to see license history for all members of your team.
     * @param {module:api/EditorialVideoApi~getEditorialVideoLicenseListCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DownloadHistoryDataList}
     */
    getEditorialVideoLicenseList(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'video_id': opts['videoId'],
        'license': opts['license'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'sort': opts['sort'],
        'username': opts['username'],
        'start_date': opts['startDate'],
        'end_date': opts['endDate'],
        'download_availability': opts['downloadAvailability'],
        'team_history': opts['teamHistory']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DownloadHistoryDataList;
      return this.apiClient.callApi(
        '/v2/editorial/videos/licenses', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the licenseEditorialVideo operation.
     * @callback module:api/EditorialVideoApi~licenseEditorialVideoCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LicenseEditorialContentResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * License editorial video content
     * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
     * @param {module:model/LicenseEditorialVideoContentRequest} licenseEditorialVideoContentRequest License editorial video content
     * @param {module:api/EditorialVideoApi~licenseEditorialVideoCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LicenseEditorialContentResults}
     */
    licenseEditorialVideo(licenseEditorialVideoContentRequest, callback) {
      let postBody = licenseEditorialVideoContentRequest;
      // verify the required parameter 'licenseEditorialVideoContentRequest' is set
      if (licenseEditorialVideoContentRequest === undefined || licenseEditorialVideoContentRequest === null) {
        throw new Error("Missing the required parameter 'licenseEditorialVideoContentRequest' when calling licenseEditorialVideo");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LicenseEditorialContentResults;
      return this.apiClient.callApi(
        '/v2/editorial/videos/licenses', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listEditorialVideoCategories operation.
     * @callback module:api/EditorialVideoApi~listEditorialVideoCategoriesCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialVideoCategoryResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List editorial video categories
     * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
     * @param {module:api/EditorialVideoApi~listEditorialVideoCategoriesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialVideoCategoryResults}
     */
    listEditorialVideoCategories(callback) {
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialVideoCategoryResults;
      return this.apiClient.callApi(
        '/v2/editorial/videos/categories', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchEditorialVideos operation.
     * @callback module:api/EditorialVideoApi~searchEditorialVideosCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EditorialVideoSearchResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Search editorial video content
     * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the `category` parameter to \"Alone,Performing\" and also specify a `query` parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the `query` parameter by prefixing the term with NOT.
     * @param {String} country Show only editorial video content that is available for distribution in a certain country
     * @param {Object} opts Optional parameters
     * @param {String} [query] One or more search terms separated by spaces
     * @param {module:model/String} [sort = 'relevant')] Sort by
     * @param {String} [category] Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list
     * @param {Array.<String>} [supplierCode] Show only editorial video content from certain suppliers
     * @param {Date} [dateStart] Show only editorial video content generated on or after a specific date
     * @param {Date} [dateEnd] Show only editorial video content generated on or before a specific date
     * @param {module:model/String} [resolution] Show only editorial video content with specific resolution
     * @param {Number} [fps] Show only editorial video content generated with specific frames per second
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {String} [cursor] The cursor of the page with which to start fetching results; this cursor is returned from previous requests
     * @param {module:api/EditorialVideoApi~searchEditorialVideosCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EditorialVideoSearchResults}
     */
    searchEditorialVideos(country, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'country' is set
      if (country === undefined || country === null) {
        throw new Error("Missing the required parameter 'country' when calling searchEditorialVideos");
      }

      let pathParams = {
      };
      let queryParams = {
        'query': opts['query'],
        'sort': opts['sort'],
        'category': opts['category'],
        'country': country,
        'supplier_code': this.apiClient.buildCollectionParam(opts['supplierCode'], 'multi'),
        'date_start': opts['dateStart'],
        'date_end': opts['dateEnd'],
        'resolution': opts['resolution'],
        'fps': opts['fps'],
        'per_page': opts['perPage'],
        'cursor': opts['cursor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EditorialVideoSearchResults;
      return this.apiClient.callApi(
        '/v2/editorial/videos/search', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
