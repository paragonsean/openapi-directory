/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AudioRendersListResults from '../model/AudioRendersListResults';
import CreateAudioRendersRequest from '../model/CreateAudioRendersRequest';
import DescriptorsListResult from '../model/DescriptorsListResult';
import InstrumentsListResult from '../model/InstrumentsListResult';

/**
* CustomMusic service.
* @module api/CustomMusicApi
* @version 1.1.32
*/
export default class CustomMusicApi {

    /**
    * Constructs a new CustomMusicApi. 
    * @alias module:api/CustomMusicApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAudioRenders operation.
     * @callback module:api/CustomMusicApi~createAudioRendersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioRendersListResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Create rendered audio
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * @param {module:model/CreateAudioRendersRequest} createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file
     * @param {module:api/CustomMusicApi~createAudioRendersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioRendersListResults}
     */
    createAudioRenders(createAudioRendersRequest, callback) {
      let postBody = createAudioRendersRequest;
      // verify the required parameter 'createAudioRendersRequest' is set
      if (createAudioRendersRequest === undefined || createAudioRendersRequest === null) {
        throw new Error("Missing the required parameter 'createAudioRendersRequest' when calling createAudioRenders");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = AudioRendersListResults;
      return this.apiClient.callApi(
        '/v2/ai/audio/renders', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the fetchRenders operation.
     * @callback module:api/CustomMusicApi~fetchRendersCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AudioRendersListResults} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get details about audio renders
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * @param {Array.<String>} id One or more render IDs
     * @param {module:api/CustomMusicApi~fetchRendersCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AudioRendersListResults}
     */
    fetchRenders(id, callback) {
      let postBody = null;
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling fetchRenders");
      }

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(id, 'multi')
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = AudioRendersListResults;
      return this.apiClient.callApi(
        '/v2/ai/audio/renders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomDescriptors operation.
     * @callback module:api/CustomMusicApi~listCustomDescriptorsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DescriptorsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List computer audio descriptors
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * @param {Object} opts Optional parameters
     * @param {Number} [renderSpeedOver] Show descriptors with an average render speed that is greater than or equal to the specified value
     * @param {String} [bandId] Show descriptors that contain the specified band (case-sentsitive)
     * @param {String} [bandName] Show descriptors with the specified band name (case-sensitive)
     * @param {Number} [page = 1)] Page number
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {Array.<String>} [id] Show descriptors with the specified IDs (case-sensitive)
     * @param {String} [instrumentName] Show descriptors with the specified instrument name (case-sensitive)
     * @param {String} [instrumentId] Show descriptors with the specified instrument ID (case-sensitive)
     * @param {Number} [tempo] Show descriptors whose tempo range includes the specified tempo in beats per minute
     * @param {Number} [tempoTo] Show descriptors with a tempo that is less than or equal to the specified number
     * @param {Number} [tempoFrom] Show descriptors that have a tempo range that includes the specified tempo in beats per minute
     * @param {String} [name] Show descriptors with the specified name (case-sensitive)
     * @param {String} [tag] Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive)
     * @param {module:api/CustomMusicApi~listCustomDescriptorsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DescriptorsListResult}
     */
    listCustomDescriptors(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'render_speed_over': opts['renderSpeedOver'],
        'band_id': opts['bandId'],
        'band_name': opts['bandName'],
        'page': opts['page'],
        'per_page': opts['perPage'],
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'instrument_name': opts['instrumentName'],
        'instrument_id': opts['instrumentId'],
        'tempo': opts['tempo'],
        'tempo_to': opts['tempoTo'],
        'tempo_from': opts['tempoFrom'],
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = DescriptorsListResult;
      return this.apiClient.callApi(
        '/v2/ai/audio/descriptors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the listCustomInstruments operation.
     * @callback module:api/CustomMusicApi~listCustomInstrumentsCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InstrumentsListResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * List computer audio instruments
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * @param {Object} opts Optional parameters
     * @param {Array.<String>} [id] Show instruments with the specified ID
     * @param {Number} [perPage = 20)] Number of results per page
     * @param {Number} [page = 1)] Page number
     * @param {String} [name] Show instruments with the specified name (case-sensitive)
     * @param {String} [tag] Show instruments with the specified tag, such as Percussion or Strings (case-sensitive)
     * @param {module:api/CustomMusicApi~listCustomInstrumentsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InstrumentsListResult}
     */
    listCustomInstruments(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': this.apiClient.buildCollectionParam(opts['id'], 'multi'),
        'per_page': opts['perPage'],
        'page': opts['page'],
        'name': opts['name'],
        'tag': opts['tag']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['customer_accessCode', 'basic'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = InstrumentsListResult;
      return this.apiClient.callApi(
        '/v2/ai/audio/instruments', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
