/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdatedMedia.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdatedMedia::OAIUpdatedMedia(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdatedMedia::OAIUpdatedMedia() {
    this->initializeModel();
}

OAIUpdatedMedia::~OAIUpdatedMedia() {}

void OAIUpdatedMedia::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_updates_isSet = false;
    m_updates_isValid = false;
}

void OAIUpdatedMedia::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdatedMedia::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_updates_isValid = ::OpenAPI::fromJsonValue(m_updates, json[QString("updates")]);
    m_updates_isSet = !json[QString("updates")].isNull() && m_updates_isValid;
}

QString OAIUpdatedMedia::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdatedMedia::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_updates.size() > 0) {
        obj.insert(QString("updates"), ::OpenAPI::toJsonValue(m_updates));
    }
    return obj;
}

QString OAIUpdatedMedia::getId() const {
    return m_id;
}
void OAIUpdatedMedia::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUpdatedMedia::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUpdatedMedia::is_id_Valid() const{
    return m_id_isValid;
}

QDateTime OAIUpdatedMedia::getUpdatedTime() const {
    return m_updated_time;
}
void OAIUpdatedMedia::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIUpdatedMedia::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIUpdatedMedia::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QList<QString> OAIUpdatedMedia::getUpdates() const {
    return m_updates;
}
void OAIUpdatedMedia::setUpdates(const QList<QString> &updates) {
    m_updates = updates;
    m_updates_isSet = true;
}

bool OAIUpdatedMedia::is_updates_Set() const{
    return m_updates_isSet;
}

bool OAIUpdatedMedia::is_updates_Valid() const{
    return m_updates_isValid;
}

bool OAIUpdatedMedia::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdatedMedia::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_updated_time_isValid && m_updates_isValid && true;
}

} // namespace OpenAPI
