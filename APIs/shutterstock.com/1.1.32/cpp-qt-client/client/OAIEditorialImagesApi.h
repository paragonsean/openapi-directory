/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEditorialImagesApi_H
#define OAI_OAIEditorialImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDownloadHistoryDataList.h"
#include "OAIEditorialCategoryResults.h"
#include "OAIEditorialContent.h"
#include "OAIEditorialContentDataList.h"
#include "OAIEditorialImageCategoryResults.h"
#include "OAIEditorialImageContentDataList.h"
#include "OAIEditorialImageLivefeed.h"
#include "OAIEditorialImageLivefeedList.h"
#include "OAIEditorialLivefeed.h"
#include "OAIEditorialLivefeedList.h"
#include "OAIEditorialSearchResults.h"
#include "OAIEditorialUpdatedResults.h"
#include "OAILicenseEditorialContentRequest.h"
#include "OAILicenseEditorialContentResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEditorialImagesApi : public QObject {
    Q_OBJECT

public:
    OAIEditorialImagesApi(const int timeOut = 0);
    ~OAIEditorialImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);


    Q_DECL_DEPRECATED virtual void getEditorialCategories();

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    */
    virtual void getEditorialImage(const QString &id, const QString &country);

    /**
    * @param[in]  image_id QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  download_availability QString [optional]
    * @param[in]  team_history bool [optional]
    */
    virtual void getEditorialImageLicenseList(const ::OpenAPI::OptionalParam<QString> &image_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_availability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &team_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    */
    virtual void getEditorialImageLivefeed(const QString &id, const QString &country);

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    */
    virtual void getEditorialImageLivefeedItems(const QString &id, const QString &country);

    /**
    * @param[in]  country QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getEditorialImageLivefeedList(const QString &country, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    */
    Q_DECL_DEPRECATED virtual void getEditorialLivefeed(const QString &id, const QString &country);

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    */
    Q_DECL_DEPRECATED virtual void getEditorialLivefeedItems(const QString &id, const QString &country);

    /**
    * @param[in]  country QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void getEditorialLivefeedList(const QString &country, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  date_updated_start QDateTime [required]
    * @param[in]  date_updated_end QDateTime [required]
    * @param[in]  country QString [required]
    * @param[in]  date_taken_start QDate [optional]
    * @param[in]  date_taken_end QDate [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  supplier_code QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    */
    Q_DECL_DEPRECATED virtual void getUpdatedEditorialImage(const QString &type, const QDateTime &date_updated_start, const QDateTime &date_updated_end, const QString &country, const ::OpenAPI::OptionalParam<QDate> &date_taken_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_taken_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &supplier_code = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QString [required]
    * @param[in]  date_updated_start QDateTime [required]
    * @param[in]  date_updated_end QDateTime [required]
    * @param[in]  country QString [required]
    * @param[in]  date_taken_start QDate [optional]
    * @param[in]  date_taken_end QDate [optional]
    * @param[in]  cursor QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  supplier_code QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getUpdatedEditorialImages(const QString &type, const QDateTime &date_updated_start, const QDateTime &date_updated_end, const QString &country, const ::OpenAPI::OptionalParam<QDate> &date_taken_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_taken_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &supplier_code = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_license_editorial_content_request OAILicenseEditorialContentRequest [required]
    */
    Q_DECL_DEPRECATED virtual void licenseEditorialImage(const OAILicenseEditorialContentRequest &oai_license_editorial_content_request);

    /**
    * @param[in]  oai_license_editorial_content_request OAILicenseEditorialContentRequest [required]
    */
    virtual void licenseEditorialImages(const OAILicenseEditorialContentRequest &oai_license_editorial_content_request);


    virtual void listEditorialImageCategories();

    /**
    * @param[in]  country QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  supplier_code QList<QString> [optional]
    * @param[in]  date_start QDate [optional]
    * @param[in]  date_end QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    Q_DECL_DEPRECATED virtual void searchEditorial(const QString &country, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &supplier_code = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  country QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  supplier_code QList<QString> [optional]
    * @param[in]  date_start QDate [optional]
    * @param[in]  date_end QDate [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void searchEditorialImages(const QString &country, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &supplier_code = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    * @param[in]  search_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void v2EditorialIdGet(const QString &id, const QString &country, const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEditorialCategoriesCallback(OAIHttpRequestWorker *worker);
    void getEditorialImageCallback(OAIHttpRequestWorker *worker);
    void getEditorialImageLicenseListCallback(OAIHttpRequestWorker *worker);
    void getEditorialImageLivefeedCallback(OAIHttpRequestWorker *worker);
    void getEditorialImageLivefeedItemsCallback(OAIHttpRequestWorker *worker);
    void getEditorialImageLivefeedListCallback(OAIHttpRequestWorker *worker);
    void getEditorialLivefeedCallback(OAIHttpRequestWorker *worker);
    void getEditorialLivefeedItemsCallback(OAIHttpRequestWorker *worker);
    void getEditorialLivefeedListCallback(OAIHttpRequestWorker *worker);
    void getUpdatedEditorialImageCallback(OAIHttpRequestWorker *worker);
    void getUpdatedEditorialImagesCallback(OAIHttpRequestWorker *worker);
    void licenseEditorialImageCallback(OAIHttpRequestWorker *worker);
    void licenseEditorialImagesCallback(OAIHttpRequestWorker *worker);
    void listEditorialImageCategoriesCallback(OAIHttpRequestWorker *worker);
    void searchEditorialCallback(OAIHttpRequestWorker *worker);
    void searchEditorialImagesCallback(OAIHttpRequestWorker *worker);
    void v2EditorialIdGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEditorialCategoriesSignal(OAIEditorialCategoryResults summary);
    void getEditorialImageSignal(OAIEditorialContent summary);
    void getEditorialImageLicenseListSignal(OAIDownloadHistoryDataList summary);
    void getEditorialImageLivefeedSignal(OAIEditorialImageLivefeed summary);
    void getEditorialImageLivefeedItemsSignal(OAIEditorialImageContentDataList summary);
    void getEditorialImageLivefeedListSignal(OAIEditorialImageLivefeedList summary);
    void getEditorialLivefeedSignal(OAIEditorialLivefeed summary);
    void getEditorialLivefeedItemsSignal(OAIEditorialContentDataList summary);
    void getEditorialLivefeedListSignal(OAIEditorialLivefeedList summary);
    void getUpdatedEditorialImageSignal(OAIEditorialUpdatedResults summary);
    void getUpdatedEditorialImagesSignal(OAIEditorialUpdatedResults summary);
    void licenseEditorialImageSignal(OAILicenseEditorialContentResults summary);
    void licenseEditorialImagesSignal(OAILicenseEditorialContentResults summary);
    void listEditorialImageCategoriesSignal(OAIEditorialImageCategoryResults summary);
    void searchEditorialSignal(OAIEditorialSearchResults summary);
    void searchEditorialImagesSignal(OAIEditorialSearchResults summary);
    void v2EditorialIdGetSignal(OAIEditorialContent summary);


    void getEditorialCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEditorialCategoryResults summary);
    void getEditorialImageSignalFull(OAIHttpRequestWorker *worker, OAIEditorialContent summary);
    void getEditorialImageLicenseListSignalFull(OAIHttpRequestWorker *worker, OAIDownloadHistoryDataList summary);
    void getEditorialImageLivefeedSignalFull(OAIHttpRequestWorker *worker, OAIEditorialImageLivefeed summary);
    void getEditorialImageLivefeedItemsSignalFull(OAIHttpRequestWorker *worker, OAIEditorialImageContentDataList summary);
    void getEditorialImageLivefeedListSignalFull(OAIHttpRequestWorker *worker, OAIEditorialImageLivefeedList summary);
    void getEditorialLivefeedSignalFull(OAIHttpRequestWorker *worker, OAIEditorialLivefeed summary);
    void getEditorialLivefeedItemsSignalFull(OAIHttpRequestWorker *worker, OAIEditorialContentDataList summary);
    void getEditorialLivefeedListSignalFull(OAIHttpRequestWorker *worker, OAIEditorialLivefeedList summary);
    void getUpdatedEditorialImageSignalFull(OAIHttpRequestWorker *worker, OAIEditorialUpdatedResults summary);
    void getUpdatedEditorialImagesSignalFull(OAIHttpRequestWorker *worker, OAIEditorialUpdatedResults summary);
    void licenseEditorialImageSignalFull(OAIHttpRequestWorker *worker, OAILicenseEditorialContentResults summary);
    void licenseEditorialImagesSignalFull(OAIHttpRequestWorker *worker, OAILicenseEditorialContentResults summary);
    void listEditorialImageCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEditorialImageCategoryResults summary);
    void searchEditorialSignalFull(OAIHttpRequestWorker *worker, OAIEditorialSearchResults summary);
    void searchEditorialImagesSignalFull(OAIHttpRequestWorker *worker, OAIEditorialSearchResults summary);
    void v2EditorialIdGetSignalFull(OAIHttpRequestWorker *worker, OAIEditorialContent summary);

    Q_DECL_DEPRECATED_X("Use getEditorialCategoriesSignalError() instead")
    void getEditorialCategoriesSignalE(OAIEditorialCategoryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialCategoriesSignalError(OAIEditorialCategoryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageSignalError() instead")
    void getEditorialImageSignalE(OAIEditorialContent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageSignalError(OAIEditorialContent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLicenseListSignalError() instead")
    void getEditorialImageLicenseListSignalE(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLicenseListSignalError(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLivefeedSignalError() instead")
    void getEditorialImageLivefeedSignalE(OAIEditorialImageLivefeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLivefeedSignalError(OAIEditorialImageLivefeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLivefeedItemsSignalError() instead")
    void getEditorialImageLivefeedItemsSignalE(OAIEditorialImageContentDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLivefeedItemsSignalError(OAIEditorialImageContentDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLivefeedListSignalError() instead")
    void getEditorialImageLivefeedListSignalE(OAIEditorialImageLivefeedList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLivefeedListSignalError(OAIEditorialImageLivefeedList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialLivefeedSignalError() instead")
    void getEditorialLivefeedSignalE(OAIEditorialLivefeed summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialLivefeedSignalError(OAIEditorialLivefeed summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialLivefeedItemsSignalError() instead")
    void getEditorialLivefeedItemsSignalE(OAIEditorialContentDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialLivefeedItemsSignalError(OAIEditorialContentDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialLivefeedListSignalError() instead")
    void getEditorialLivefeedListSignalE(OAIEditorialLivefeedList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialLivefeedListSignalError(OAIEditorialLivefeedList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedEditorialImageSignalError() instead")
    void getUpdatedEditorialImageSignalE(OAIEditorialUpdatedResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedEditorialImageSignalError(OAIEditorialUpdatedResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedEditorialImagesSignalError() instead")
    void getUpdatedEditorialImagesSignalE(OAIEditorialUpdatedResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedEditorialImagesSignalError(OAIEditorialUpdatedResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseEditorialImageSignalError() instead")
    void licenseEditorialImageSignalE(OAILicenseEditorialContentResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseEditorialImageSignalError(OAILicenseEditorialContentResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseEditorialImagesSignalError() instead")
    void licenseEditorialImagesSignalE(OAILicenseEditorialContentResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseEditorialImagesSignalError(OAILicenseEditorialContentResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEditorialImageCategoriesSignalError() instead")
    void listEditorialImageCategoriesSignalE(OAIEditorialImageCategoryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEditorialImageCategoriesSignalError(OAIEditorialImageCategoryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEditorialSignalError() instead")
    void searchEditorialSignalE(OAIEditorialSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEditorialSignalError(OAIEditorialSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEditorialImagesSignalError() instead")
    void searchEditorialImagesSignalE(OAIEditorialSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEditorialImagesSignalError(OAIEditorialSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2EditorialIdGetSignalError() instead")
    void v2EditorialIdGetSignalE(OAIEditorialContent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void v2EditorialIdGetSignalError(OAIEditorialContent summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEditorialCategoriesSignalErrorFull() instead")
    void getEditorialCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageSignalErrorFull() instead")
    void getEditorialImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLicenseListSignalErrorFull() instead")
    void getEditorialImageLicenseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLicenseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLivefeedSignalErrorFull() instead")
    void getEditorialImageLivefeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLivefeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLivefeedItemsSignalErrorFull() instead")
    void getEditorialImageLivefeedItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLivefeedItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialImageLivefeedListSignalErrorFull() instead")
    void getEditorialImageLivefeedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialImageLivefeedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialLivefeedSignalErrorFull() instead")
    void getEditorialLivefeedSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialLivefeedSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialLivefeedItemsSignalErrorFull() instead")
    void getEditorialLivefeedItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialLivefeedItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialLivefeedListSignalErrorFull() instead")
    void getEditorialLivefeedListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialLivefeedListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedEditorialImageSignalErrorFull() instead")
    void getUpdatedEditorialImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedEditorialImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedEditorialImagesSignalErrorFull() instead")
    void getUpdatedEditorialImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedEditorialImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseEditorialImageSignalErrorFull() instead")
    void licenseEditorialImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseEditorialImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseEditorialImagesSignalErrorFull() instead")
    void licenseEditorialImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseEditorialImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEditorialImageCategoriesSignalErrorFull() instead")
    void listEditorialImageCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEditorialImageCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEditorialSignalErrorFull() instead")
    void searchEditorialSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEditorialSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEditorialImagesSignalErrorFull() instead")
    void searchEditorialImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEditorialImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use v2EditorialIdGetSignalErrorFull() instead")
    void v2EditorialIdGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void v2EditorialIdGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
