/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioRenderTimelineSpanInstrumentGroup.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioRenderTimelineSpanInstrumentGroup::OAIAudioRenderTimelineSpanInstrumentGroup(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioRenderTimelineSpanInstrumentGroup::OAIAudioRenderTimelineSpanInstrumentGroup() {
    this->initializeModel();
}

OAIAudioRenderTimelineSpanInstrumentGroup::~OAIAudioRenderTimelineSpanInstrumentGroup() {}

void OAIAudioRenderTimelineSpanInstrumentGroup::initializeModel() {

    m_instrument_group_isSet = false;
    m_instrument_group_isValid = false;

    m_statuses_isSet = false;
    m_statuses_isValid = false;
}

void OAIAudioRenderTimelineSpanInstrumentGroup::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioRenderTimelineSpanInstrumentGroup::fromJsonObject(QJsonObject json) {

    m_instrument_group_isValid = ::OpenAPI::fromJsonValue(m_instrument_group, json[QString("instrument_group")]);
    m_instrument_group_isSet = !json[QString("instrument_group")].isNull() && m_instrument_group_isValid;

    m_statuses_isValid = ::OpenAPI::fromJsonValue(m_statuses, json[QString("statuses")]);
    m_statuses_isSet = !json[QString("statuses")].isNull() && m_statuses_isValid;
}

QString OAIAudioRenderTimelineSpanInstrumentGroup::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioRenderTimelineSpanInstrumentGroup::asJsonObject() const {
    QJsonObject obj;
    if (m_instrument_group_isSet) {
        obj.insert(QString("instrument_group"), ::OpenAPI::toJsonValue(m_instrument_group));
    }
    if (m_statuses.size() > 0) {
        obj.insert(QString("statuses"), ::OpenAPI::toJsonValue(m_statuses));
    }
    return obj;
}

QString OAIAudioRenderTimelineSpanInstrumentGroup::getInstrumentGroup() const {
    return m_instrument_group;
}
void OAIAudioRenderTimelineSpanInstrumentGroup::setInstrumentGroup(const QString &instrument_group) {
    m_instrument_group = instrument_group;
    m_instrument_group_isSet = true;
}

bool OAIAudioRenderTimelineSpanInstrumentGroup::is_instrument_group_Set() const{
    return m_instrument_group_isSet;
}

bool OAIAudioRenderTimelineSpanInstrumentGroup::is_instrument_group_Valid() const{
    return m_instrument_group_isValid;
}

QList<OAIAudioRenderTimelineSpanInstrumentGroupStatus> OAIAudioRenderTimelineSpanInstrumentGroup::getStatuses() const {
    return m_statuses;
}
void OAIAudioRenderTimelineSpanInstrumentGroup::setStatuses(const QList<OAIAudioRenderTimelineSpanInstrumentGroupStatus> &statuses) {
    m_statuses = statuses;
    m_statuses_isSet = true;
}

bool OAIAudioRenderTimelineSpanInstrumentGroup::is_statuses_Set() const{
    return m_statuses_isSet;
}

bool OAIAudioRenderTimelineSpanInstrumentGroup::is_statuses_Valid() const{
    return m_statuses_isValid;
}

bool OAIAudioRenderTimelineSpanInstrumentGroup::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_instrument_group_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_statuses.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioRenderTimelineSpanInstrumentGroup::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_instrument_group_isValid && true;
}

} // namespace OpenAPI
