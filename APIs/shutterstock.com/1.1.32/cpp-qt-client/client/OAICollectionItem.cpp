/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionItem::OAICollectionItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionItem::OAICollectionItem() {
    this->initializeModel();
}

OAICollectionItem::~OAICollectionItem() {}

void OAICollectionItem::initializeModel() {

    m_added_time_isSet = false;
    m_added_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;
}

void OAICollectionItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionItem::fromJsonObject(QJsonObject json) {

    m_added_time_isValid = ::OpenAPI::fromJsonValue(m_added_time, json[QString("added_time")]);
    m_added_time_isSet = !json[QString("added_time")].isNull() && m_added_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;
}

QString OAICollectionItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionItem::asJsonObject() const {
    QJsonObject obj;
    if (m_added_time_isSet) {
        obj.insert(QString("added_time"), ::OpenAPI::toJsonValue(m_added_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    return obj;
}

QDateTime OAICollectionItem::getAddedTime() const {
    return m_added_time;
}
void OAICollectionItem::setAddedTime(const QDateTime &added_time) {
    m_added_time = added_time;
    m_added_time_isSet = true;
}

bool OAICollectionItem::is_added_time_Set() const{
    return m_added_time_isSet;
}

bool OAICollectionItem::is_added_time_Valid() const{
    return m_added_time_isValid;
}

QString OAICollectionItem::getId() const {
    return m_id;
}
void OAICollectionItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICollectionItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAICollectionItem::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICollectionItem::getMediaType() const {
    return m_media_type;
}
void OAICollectionItem::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAICollectionItem::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAICollectionItem::is_media_type_Valid() const{
    return m_media_type_isValid;
}

bool OAICollectionItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
