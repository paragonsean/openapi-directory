/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIContributorsApi_H
#define OAI_OAIContributorsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICollection.h"
#include "OAICollectionDataList.h"
#include "OAICollectionItemDataList.h"
#include "OAIContributorProfile.h"
#include "OAIContributorProfileDataList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIContributorsApi : public QObject {
    Q_OBJECT

public:
    OAIContributorsApi(const int timeOut = 0);
    ~OAIContributorsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  contributor_id QString [required]
    */
    virtual void getContributor(const QString &contributor_id);

    /**
    * @param[in]  contributor_id QString [required]
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getContributorCollectionItems(const QString &contributor_id, const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  contributor_id QString [required]
    * @param[in]  id QString [required]
    */
    virtual void getContributorCollections(const QString &contributor_id, const QString &id);

    /**
    * @param[in]  contributor_id QString [required]
    * @param[in]  sort QString [optional]
    */
    virtual void getContributorCollectionsList(const QString &contributor_id, const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<QString> [required]
    */
    virtual void getContributorList(const QList<QString> &id);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getContributorCallback(OAIHttpRequestWorker *worker);
    void getContributorCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void getContributorCollectionsCallback(OAIHttpRequestWorker *worker);
    void getContributorCollectionsListCallback(OAIHttpRequestWorker *worker);
    void getContributorListCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getContributorSignal(OAIContributorProfile summary);
    void getContributorCollectionItemsSignal(OAICollectionItemDataList summary);
    void getContributorCollectionsSignal(OAICollection summary);
    void getContributorCollectionsListSignal(OAICollectionDataList summary);
    void getContributorListSignal(OAIContributorProfileDataList summary);


    void getContributorSignalFull(OAIHttpRequestWorker *worker, OAIContributorProfile summary);
    void getContributorCollectionItemsSignalFull(OAIHttpRequestWorker *worker, OAICollectionItemDataList summary);
    void getContributorCollectionsSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void getContributorCollectionsListSignalFull(OAIHttpRequestWorker *worker, OAICollectionDataList summary);
    void getContributorListSignalFull(OAIHttpRequestWorker *worker, OAIContributorProfileDataList summary);

    Q_DECL_DEPRECATED_X("Use getContributorSignalError() instead")
    void getContributorSignalE(OAIContributorProfile summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorSignalError(OAIContributorProfile summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorCollectionItemsSignalError() instead")
    void getContributorCollectionItemsSignalE(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorCollectionItemsSignalError(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorCollectionsSignalError() instead")
    void getContributorCollectionsSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorCollectionsSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorCollectionsListSignalError() instead")
    void getContributorCollectionsListSignalE(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorCollectionsListSignalError(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorListSignalError() instead")
    void getContributorListSignalE(OAIContributorProfileDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorListSignalError(OAIContributorProfileDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getContributorSignalErrorFull() instead")
    void getContributorSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorCollectionItemsSignalErrorFull() instead")
    void getContributorCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorCollectionsSignalErrorFull() instead")
    void getContributorCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorCollectionsListSignalErrorFull() instead")
    void getContributorCollectionsListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorCollectionsListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getContributorListSignalErrorFull() instead")
    void getContributorListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getContributorListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
