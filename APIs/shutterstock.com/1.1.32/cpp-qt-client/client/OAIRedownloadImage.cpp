/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRedownloadImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIRedownloadImage::OAIRedownloadImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIRedownloadImage::OAIRedownloadImage() {
    this->initializeModel();
}

OAIRedownloadImage::~OAIRedownloadImage() {}

void OAIRedownloadImage::initializeModel() {

    m_auth_cookie_isSet = false;
    m_auth_cookie_isValid = false;

    m_show_modal_isSet = false;
    m_show_modal_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_verification_code_isSet = false;
    m_verification_code_isValid = false;
}

void OAIRedownloadImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIRedownloadImage::fromJsonObject(QJsonObject json) {

    m_auth_cookie_isValid = ::OpenAPI::fromJsonValue(m_auth_cookie, json[QString("auth_cookie")]);
    m_auth_cookie_isSet = !json[QString("auth_cookie")].isNull() && m_auth_cookie_isValid;

    m_show_modal_isValid = ::OpenAPI::fromJsonValue(m_show_modal, json[QString("show_modal")]);
    m_show_modal_isSet = !json[QString("show_modal")].isNull() && m_show_modal_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_verification_code_isValid = ::OpenAPI::fromJsonValue(m_verification_code, json[QString("verification_code")]);
    m_verification_code_isSet = !json[QString("verification_code")].isNull() && m_verification_code_isValid;
}

QString OAIRedownloadImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIRedownloadImage::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_cookie.isSet()) {
        obj.insert(QString("auth_cookie"), ::OpenAPI::toJsonValue(m_auth_cookie));
    }
    if (m_show_modal_isSet) {
        obj.insert(QString("show_modal"), ::OpenAPI::toJsonValue(m_show_modal));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_verification_code_isSet) {
        obj.insert(QString("verification_code"), ::OpenAPI::toJsonValue(m_verification_code));
    }
    return obj;
}

OAICookie OAIRedownloadImage::getAuthCookie() const {
    return m_auth_cookie;
}
void OAIRedownloadImage::setAuthCookie(const OAICookie &auth_cookie) {
    m_auth_cookie = auth_cookie;
    m_auth_cookie_isSet = true;
}

bool OAIRedownloadImage::is_auth_cookie_Set() const{
    return m_auth_cookie_isSet;
}

bool OAIRedownloadImage::is_auth_cookie_Valid() const{
    return m_auth_cookie_isValid;
}

bool OAIRedownloadImage::isShowModal() const {
    return m_show_modal;
}
void OAIRedownloadImage::setShowModal(const bool &show_modal) {
    m_show_modal = show_modal;
    m_show_modal_isSet = true;
}

bool OAIRedownloadImage::is_show_modal_Set() const{
    return m_show_modal_isSet;
}

bool OAIRedownloadImage::is_show_modal_Valid() const{
    return m_show_modal_isValid;
}

QString OAIRedownloadImage::getSize() const {
    return m_size;
}
void OAIRedownloadImage::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAIRedownloadImage::is_size_Set() const{
    return m_size_isSet;
}

bool OAIRedownloadImage::is_size_Valid() const{
    return m_size_isValid;
}

QString OAIRedownloadImage::getVerificationCode() const {
    return m_verification_code;
}
void OAIRedownloadImage::setVerificationCode(const QString &verification_code) {
    m_verification_code = verification_code;
    m_verification_code_isSet = true;
}

bool OAIRedownloadImage::is_verification_code_Set() const{
    return m_verification_code_isSet;
}

bool OAIRedownloadImage::is_verification_code_Valid() const{
    return m_verification_code_isValid;
}

bool OAIRedownloadImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_cookie.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_modal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIRedownloadImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
