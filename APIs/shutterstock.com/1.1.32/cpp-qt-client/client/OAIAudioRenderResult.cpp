/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioRenderResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioRenderResult::OAIAudioRenderResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioRenderResult::OAIAudioRenderResult() {
    this->initializeModel();
}

OAIAudioRenderResult::~OAIAudioRenderResult() {}

void OAIAudioRenderResult::initializeModel() {

    m_created_date_isSet = false;
    m_created_date_isValid = false;

    m_files_isSet = false;
    m_files_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_preset_isSet = false;
    m_preset_isValid = false;

    m_progress_percent_isSet = false;
    m_progress_percent_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;

    m_updated_date_isSet = false;
    m_updated_date_isValid = false;
}

void OAIAudioRenderResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioRenderResult::fromJsonObject(QJsonObject json) {

    m_created_date_isValid = ::OpenAPI::fromJsonValue(m_created_date, json[QString("created_date")]);
    m_created_date_isSet = !json[QString("created_date")].isNull() && m_created_date_isValid;

    m_files_isValid = ::OpenAPI::fromJsonValue(m_files, json[QString("files")]);
    m_files_isSet = !json[QString("files")].isNull() && m_files_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_preset_isValid = ::OpenAPI::fromJsonValue(m_preset, json[QString("preset")]);
    m_preset_isSet = !json[QString("preset")].isNull() && m_preset_isValid;

    m_progress_percent_isValid = ::OpenAPI::fromJsonValue(m_progress_percent, json[QString("progress_percent")]);
    m_progress_percent_isSet = !json[QString("progress_percent")].isNull() && m_progress_percent_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;

    m_updated_date_isValid = ::OpenAPI::fromJsonValue(m_updated_date, json[QString("updated_date")]);
    m_updated_date_isSet = !json[QString("updated_date")].isNull() && m_updated_date_isValid;
}

QString OAIAudioRenderResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioRenderResult::asJsonObject() const {
    QJsonObject obj;
    if (m_created_date_isSet) {
        obj.insert(QString("created_date"), ::OpenAPI::toJsonValue(m_created_date));
    }
    if (m_files.size() > 0) {
        obj.insert(QString("files"), ::OpenAPI::toJsonValue(m_files));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_preset_isSet) {
        obj.insert(QString("preset"), ::OpenAPI::toJsonValue(m_preset));
    }
    if (m_progress_percent_isSet) {
        obj.insert(QString("progress_percent"), ::OpenAPI::toJsonValue(m_progress_percent));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    if (m_updated_date_isSet) {
        obj.insert(QString("updated_date"), ::OpenAPI::toJsonValue(m_updated_date));
    }
    return obj;
}

QDateTime OAIAudioRenderResult::getCreatedDate() const {
    return m_created_date;
}
void OAIAudioRenderResult::setCreatedDate(const QDateTime &created_date) {
    m_created_date = created_date;
    m_created_date_isSet = true;
}

bool OAIAudioRenderResult::is_created_date_Set() const{
    return m_created_date_isSet;
}

bool OAIAudioRenderResult::is_created_date_Valid() const{
    return m_created_date_isValid;
}

QList<OAIAudioRendersFilesList> OAIAudioRenderResult::getFiles() const {
    return m_files;
}
void OAIAudioRenderResult::setFiles(const QList<OAIAudioRendersFilesList> &files) {
    m_files = files;
    m_files_isSet = true;
}

bool OAIAudioRenderResult::is_files_Set() const{
    return m_files_isSet;
}

bool OAIAudioRenderResult::is_files_Valid() const{
    return m_files_isValid;
}

QString OAIAudioRenderResult::getId() const {
    return m_id;
}
void OAIAudioRenderResult::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAudioRenderResult::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAudioRenderResult::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIAudioRenderResult::getPreset() const {
    return m_preset;
}
void OAIAudioRenderResult::setPreset(const QString &preset) {
    m_preset = preset;
    m_preset_isSet = true;
}

bool OAIAudioRenderResult::is_preset_Set() const{
    return m_preset_isSet;
}

bool OAIAudioRenderResult::is_preset_Valid() const{
    return m_preset_isValid;
}

qint32 OAIAudioRenderResult::getProgressPercent() const {
    return m_progress_percent;
}
void OAIAudioRenderResult::setProgressPercent(const qint32 &progress_percent) {
    m_progress_percent = progress_percent;
    m_progress_percent_isSet = true;
}

bool OAIAudioRenderResult::is_progress_percent_Set() const{
    return m_progress_percent_isSet;
}

bool OAIAudioRenderResult::is_progress_percent_Valid() const{
    return m_progress_percent_isValid;
}

QString OAIAudioRenderResult::getStatus() const {
    return m_status;
}
void OAIAudioRenderResult::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIAudioRenderResult::is_status_Set() const{
    return m_status_isSet;
}

bool OAIAudioRenderResult::is_status_Valid() const{
    return m_status_isValid;
}

OAIAudioRenderTimeline OAIAudioRenderResult::getTimeline() const {
    return m_timeline;
}
void OAIAudioRenderResult::setTimeline(const OAIAudioRenderTimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAIAudioRenderResult::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAIAudioRenderResult::is_timeline_Valid() const{
    return m_timeline_isValid;
}

QDateTime OAIAudioRenderResult::getUpdatedDate() const {
    return m_updated_date;
}
void OAIAudioRenderResult::setUpdatedDate(const QDateTime &updated_date) {
    m_updated_date = updated_date;
    m_updated_date_isSet = true;
}

bool OAIAudioRenderResult::is_updated_date_Set() const{
    return m_updated_date_isSet;
}

bool OAIAudioRenderResult::is_updated_date_Valid() const{
    return m_updated_date_isValid;
}

bool OAIAudioRenderResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_created_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_files.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_percent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_date_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioRenderResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_status_isValid && m_timeline_isValid && true;
}

} // namespace OpenAPI
