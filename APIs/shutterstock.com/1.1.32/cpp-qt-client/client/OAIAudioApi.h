/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIAudioApi_H
#define OAI_OAIAudioApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAudio.h"
#include "OAIAudioDataList.h"
#include "OAIAudioSearchResults.h"
#include "OAIAudioUrl.h"
#include "OAICollection.h"
#include "OAICollectionCreateRequest.h"
#include "OAICollectionCreateResponse.h"
#include "OAICollectionDataList.h"
#include "OAICollectionItemDataList.h"
#include "OAICollectionItemRequest.h"
#include "OAICollectionUpdateRequest.h"
#include "OAIDownloadHistoryDataList.h"
#include "OAIGenreList.h"
#include "OAIInstrumentList.h"
#include "OAILicenseAudioRequest.h"
#include "OAILicenseAudioResultDataList.h"
#include "OAIMoodList.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIAudioApi : public QObject {
    Q_OBJECT

public:
    OAIAudioApi(const int timeOut = 0);
    ~OAIAudioApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_collection_item_request OAICollectionItemRequest [required]
    */
    virtual void addTrackCollectionItems(const QString &id, const OAICollectionItemRequest &oai_collection_item_request);

    /**
    * @param[in]  oai_collection_create_request OAICollectionCreateRequest [required]
    */
    virtual void createTrackCollection(const OAICollectionCreateRequest &oai_collection_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteTrackCollection(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  item_id QList<QString> [optional]
    */
    virtual void deleteTrackCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &item_id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    */
    virtual void downloadTracks(const QString &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  view QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getTrack(const qint32 &id, const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  embed QList<QString> [optional]
    * @param[in]  share_code QString [optional]
    */
    virtual void getTrackCollection(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &embed = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &share_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  share_code QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getTrackCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &share_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  embed QList<QString> [optional]
    */
    virtual void getTrackCollectionList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &embed = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  audio_id QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  download_availability QString [optional]
    * @param[in]  team_history bool [optional]
    */
    virtual void getTrackLicenseList(const ::OpenAPI::OptionalParam<QString> &audio_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_availability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &team_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QList<QString> [required]
    * @param[in]  view QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getTrackList(const QList<QString> &id, const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_license_audio_request OAILicenseAudioRequest [required]
    * @param[in]  license QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void licenseTrack(const OAILicenseAudioRequest &oai_license_audio_request, const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language QString [optional]
    */
    virtual void listGenres(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language QString [optional]
    */
    virtual void listInstruments(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language QString [optional]
    */
    virtual void listMoods(const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_collection_update_request OAICollectionUpdateRequest [required]
    */
    virtual void renameTrackCollection(const QString &id, const OAICollectionUpdateRequest &oai_collection_update_request);

    /**
    * @param[in]  artists QList<QString> [optional]
    * @param[in]  bpm qint32 [optional]
    * @param[in]  bpm_from qint32 [optional]
    * @param[in]  bpm_to qint32 [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  duration_from qint32 [optional]
    * @param[in]  duration_to qint32 [optional]
    * @param[in]  genre QList<QString> [optional]
    * @param[in]  is_instrumental bool [optional]
    * @param[in]  instruments QList<QString> [optional]
    * @param[in]  moods QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  sort_order QString [optional]
    * @param[in]  vocal_description QString [optional]
    * @param[in]  view QString [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  library QString [optional]
    * @param[in]  language QString [optional]
    */
    virtual void searchTracks(const ::OpenAPI::OptionalParam<QList<QString>> &artists = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &bpm = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &bpm_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &bpm_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &genre = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &is_instrumental = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QList<QString>> &instruments = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &moods = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort_order = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vocal_description = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &library = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addTrackCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void createTrackCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteTrackCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteTrackCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void downloadTracksCallback(OAIHttpRequestWorker *worker);
    void getTrackCallback(OAIHttpRequestWorker *worker);
    void getTrackCollectionCallback(OAIHttpRequestWorker *worker);
    void getTrackCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void getTrackCollectionListCallback(OAIHttpRequestWorker *worker);
    void getTrackLicenseListCallback(OAIHttpRequestWorker *worker);
    void getTrackListCallback(OAIHttpRequestWorker *worker);
    void licenseTrackCallback(OAIHttpRequestWorker *worker);
    void listGenresCallback(OAIHttpRequestWorker *worker);
    void listInstrumentsCallback(OAIHttpRequestWorker *worker);
    void listMoodsCallback(OAIHttpRequestWorker *worker);
    void renameTrackCollectionCallback(OAIHttpRequestWorker *worker);
    void searchTracksCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addTrackCollectionItemsSignal();
    void createTrackCollectionSignal(OAICollectionCreateResponse summary);
    void deleteTrackCollectionSignal();
    void deleteTrackCollectionItemsSignal();
    void downloadTracksSignal(OAIAudioUrl summary);
    void getTrackSignal(OAIAudio summary);
    void getTrackCollectionSignal(OAICollection summary);
    void getTrackCollectionItemsSignal(OAICollectionItemDataList summary);
    void getTrackCollectionListSignal(OAICollectionDataList summary);
    void getTrackLicenseListSignal(OAIDownloadHistoryDataList summary);
    void getTrackListSignal(OAIAudioDataList summary);
    void licenseTrackSignal(OAILicenseAudioResultDataList summary);
    void listGenresSignal(OAIGenreList summary);
    void listInstrumentsSignal(OAIInstrumentList summary);
    void listMoodsSignal(OAIMoodList summary);
    void renameTrackCollectionSignal();
    void searchTracksSignal(OAIAudioSearchResults summary);


    void addTrackCollectionItemsSignalFull(OAIHttpRequestWorker *worker);
    void createTrackCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollectionCreateResponse summary);
    void deleteTrackCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deleteTrackCollectionItemsSignalFull(OAIHttpRequestWorker *worker);
    void downloadTracksSignalFull(OAIHttpRequestWorker *worker, OAIAudioUrl summary);
    void getTrackSignalFull(OAIHttpRequestWorker *worker, OAIAudio summary);
    void getTrackCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void getTrackCollectionItemsSignalFull(OAIHttpRequestWorker *worker, OAICollectionItemDataList summary);
    void getTrackCollectionListSignalFull(OAIHttpRequestWorker *worker, OAICollectionDataList summary);
    void getTrackLicenseListSignalFull(OAIHttpRequestWorker *worker, OAIDownloadHistoryDataList summary);
    void getTrackListSignalFull(OAIHttpRequestWorker *worker, OAIAudioDataList summary);
    void licenseTrackSignalFull(OAIHttpRequestWorker *worker, OAILicenseAudioResultDataList summary);
    void listGenresSignalFull(OAIHttpRequestWorker *worker, OAIGenreList summary);
    void listInstrumentsSignalFull(OAIHttpRequestWorker *worker, OAIInstrumentList summary);
    void listMoodsSignalFull(OAIHttpRequestWorker *worker, OAIMoodList summary);
    void renameTrackCollectionSignalFull(OAIHttpRequestWorker *worker);
    void searchTracksSignalFull(OAIHttpRequestWorker *worker, OAIAudioSearchResults summary);

    Q_DECL_DEPRECATED_X("Use addTrackCollectionItemsSignalError() instead")
    void addTrackCollectionItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addTrackCollectionItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrackCollectionSignalError() instead")
    void createTrackCollectionSignalE(OAICollectionCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrackCollectionSignalError(OAICollectionCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackCollectionSignalError() instead")
    void deleteTrackCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackCollectionItemsSignalError() instead")
    void deleteTrackCollectionItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackCollectionItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadTracksSignalError() instead")
    void downloadTracksSignalE(OAIAudioUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadTracksSignalError(OAIAudioUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackSignalError() instead")
    void getTrackSignalE(OAIAudio summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackSignalError(OAIAudio summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackCollectionSignalError() instead")
    void getTrackCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackCollectionItemsSignalError() instead")
    void getTrackCollectionItemsSignalE(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackCollectionItemsSignalError(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackCollectionListSignalError() instead")
    void getTrackCollectionListSignalE(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackCollectionListSignalError(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackLicenseListSignalError() instead")
    void getTrackLicenseListSignalE(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackLicenseListSignalError(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackListSignalError() instead")
    void getTrackListSignalE(OAIAudioDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackListSignalError(OAIAudioDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseTrackSignalError() instead")
    void licenseTrackSignalE(OAILicenseAudioResultDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseTrackSignalError(OAILicenseAudioResultDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGenresSignalError() instead")
    void listGenresSignalE(OAIGenreList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listGenresSignalError(OAIGenreList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInstrumentsSignalError() instead")
    void listInstrumentsSignalE(OAIInstrumentList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listInstrumentsSignalError(OAIInstrumentList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMoodsSignalError() instead")
    void listMoodsSignalE(OAIMoodList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listMoodsSignalError(OAIMoodList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameTrackCollectionSignalError() instead")
    void renameTrackCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameTrackCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTracksSignalError() instead")
    void searchTracksSignalE(OAIAudioSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTracksSignalError(OAIAudioSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addTrackCollectionItemsSignalErrorFull() instead")
    void addTrackCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addTrackCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createTrackCollectionSignalErrorFull() instead")
    void createTrackCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createTrackCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackCollectionSignalErrorFull() instead")
    void deleteTrackCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteTrackCollectionItemsSignalErrorFull() instead")
    void deleteTrackCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteTrackCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadTracksSignalErrorFull() instead")
    void downloadTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackSignalErrorFull() instead")
    void getTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackCollectionSignalErrorFull() instead")
    void getTrackCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackCollectionItemsSignalErrorFull() instead")
    void getTrackCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackCollectionListSignalErrorFull() instead")
    void getTrackCollectionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackCollectionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackLicenseListSignalErrorFull() instead")
    void getTrackLicenseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackLicenseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getTrackListSignalErrorFull() instead")
    void getTrackListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getTrackListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseTrackSignalErrorFull() instead")
    void licenseTrackSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseTrackSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listGenresSignalErrorFull() instead")
    void listGenresSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listGenresSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listInstrumentsSignalErrorFull() instead")
    void listInstrumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listInstrumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listMoodsSignalErrorFull() instead")
    void listMoodsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listMoodsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameTrackCollectionSignalErrorFull() instead")
    void renameTrackCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameTrackCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchTracksSignalErrorFull() instead")
    void searchTracksSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchTracksSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
