/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIShortsLoopsStems.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIShortsLoopsStems::OAIShortsLoopsStems(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIShortsLoopsStems::OAIShortsLoopsStems() {
    this->initializeModel();
}

OAIShortsLoopsStems::~OAIShortsLoopsStems() {}

void OAIShortsLoopsStems::initializeModel() {

    m_loops_isSet = false;
    m_loops_isValid = false;

    m_shorts_isSet = false;
    m_shorts_isValid = false;

    m_stems_isSet = false;
    m_stems_isValid = false;
}

void OAIShortsLoopsStems::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIShortsLoopsStems::fromJsonObject(QJsonObject json) {

    m_loops_isValid = ::OpenAPI::fromJsonValue(m_loops, json[QString("loops")]);
    m_loops_isSet = !json[QString("loops")].isNull() && m_loops_isValid;

    m_shorts_isValid = ::OpenAPI::fromJsonValue(m_shorts, json[QString("shorts")]);
    m_shorts_isSet = !json[QString("shorts")].isNull() && m_shorts_isValid;

    m_stems_isValid = ::OpenAPI::fromJsonValue(m_stems, json[QString("stems")]);
    m_stems_isSet = !json[QString("stems")].isNull() && m_stems_isValid;
}

QString OAIShortsLoopsStems::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIShortsLoopsStems::asJsonObject() const {
    QJsonObject obj;
    if (m_loops.size() > 0) {
        obj.insert(QString("loops"), ::OpenAPI::toJsonValue(m_loops));
    }
    if (m_shorts.size() > 0) {
        obj.insert(QString("shorts"), ::OpenAPI::toJsonValue(m_shorts));
    }
    if (m_stems.size() > 0) {
        obj.insert(QString("stems"), ::OpenAPI::toJsonValue(m_stems));
    }
    return obj;
}

QMap<QString, OAIShortsLoopsStems_loops_value> OAIShortsLoopsStems::getLoops() const {
    return m_loops;
}
void OAIShortsLoopsStems::setLoops(const QMap<QString, OAIShortsLoopsStems_loops_value> &loops) {
    m_loops = loops;
    m_loops_isSet = true;
}

bool OAIShortsLoopsStems::is_loops_Set() const{
    return m_loops_isSet;
}

bool OAIShortsLoopsStems::is_loops_Valid() const{
    return m_loops_isValid;
}

QMap<QString, OAIShortsLoopsStems_loops_value> OAIShortsLoopsStems::getShorts() const {
    return m_shorts;
}
void OAIShortsLoopsStems::setShorts(const QMap<QString, OAIShortsLoopsStems_loops_value> &shorts) {
    m_shorts = shorts;
    m_shorts_isSet = true;
}

bool OAIShortsLoopsStems::is_shorts_Set() const{
    return m_shorts_isSet;
}

bool OAIShortsLoopsStems::is_shorts_Valid() const{
    return m_shorts_isValid;
}

QMap<QString, OAIShortsLoopsStems_loops_value> OAIShortsLoopsStems::getStems() const {
    return m_stems;
}
void OAIShortsLoopsStems::setStems(const QMap<QString, OAIShortsLoopsStems_loops_value> &stems) {
    m_stems = stems;
    m_stems_isSet = true;
}

bool OAIShortsLoopsStems::is_stems_Set() const{
    return m_stems_isSet;
}

bool OAIShortsLoopsStems::is_stems_Valid() const{
    return m_stems_isValid;
}

bool OAIShortsLoopsStems::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_loops.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_shorts.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_stems.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIShortsLoopsStems::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
