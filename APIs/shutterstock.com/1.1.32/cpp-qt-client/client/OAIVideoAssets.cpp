/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideoAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideoAssets::OAIVideoAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideoAssets::OAIVideoAssets() {
    this->initializeModel();
}

OAIVideoAssets::~OAIVideoAssets() {}

void OAIVideoAssets::initializeModel() {

    m_r_4k_isSet = false;
    m_r_4k_isValid = false;

    m_hd_isSet = false;
    m_hd_isValid = false;

    m_preview_jpg_isSet = false;
    m_preview_jpg_isValid = false;

    m_preview_mp4_isSet = false;
    m_preview_mp4_isValid = false;

    m_preview_webm_isSet = false;
    m_preview_webm_isValid = false;

    m_sd_isSet = false;
    m_sd_isValid = false;

    m_thumb_jpg_isSet = false;
    m_thumb_jpg_isValid = false;

    m_thumb_jpgs_isSet = false;
    m_thumb_jpgs_isValid = false;

    m_thumb_mp4_isSet = false;
    m_thumb_mp4_isValid = false;

    m_thumb_webm_isSet = false;
    m_thumb_webm_isValid = false;

    m_web_isSet = false;
    m_web_isValid = false;
}

void OAIVideoAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideoAssets::fromJsonObject(QJsonObject json) {

    m_r_4k_isValid = ::OpenAPI::fromJsonValue(m_r_4k, json[QString("4k")]);
    m_r_4k_isSet = !json[QString("4k")].isNull() && m_r_4k_isValid;

    m_hd_isValid = ::OpenAPI::fromJsonValue(m_hd, json[QString("hd")]);
    m_hd_isSet = !json[QString("hd")].isNull() && m_hd_isValid;

    m_preview_jpg_isValid = ::OpenAPI::fromJsonValue(m_preview_jpg, json[QString("preview_jpg")]);
    m_preview_jpg_isSet = !json[QString("preview_jpg")].isNull() && m_preview_jpg_isValid;

    m_preview_mp4_isValid = ::OpenAPI::fromJsonValue(m_preview_mp4, json[QString("preview_mp4")]);
    m_preview_mp4_isSet = !json[QString("preview_mp4")].isNull() && m_preview_mp4_isValid;

    m_preview_webm_isValid = ::OpenAPI::fromJsonValue(m_preview_webm, json[QString("preview_webm")]);
    m_preview_webm_isSet = !json[QString("preview_webm")].isNull() && m_preview_webm_isValid;

    m_sd_isValid = ::OpenAPI::fromJsonValue(m_sd, json[QString("sd")]);
    m_sd_isSet = !json[QString("sd")].isNull() && m_sd_isValid;

    m_thumb_jpg_isValid = ::OpenAPI::fromJsonValue(m_thumb_jpg, json[QString("thumb_jpg")]);
    m_thumb_jpg_isSet = !json[QString("thumb_jpg")].isNull() && m_thumb_jpg_isValid;

    m_thumb_jpgs_isValid = ::OpenAPI::fromJsonValue(m_thumb_jpgs, json[QString("thumb_jpgs")]);
    m_thumb_jpgs_isSet = !json[QString("thumb_jpgs")].isNull() && m_thumb_jpgs_isValid;

    m_thumb_mp4_isValid = ::OpenAPI::fromJsonValue(m_thumb_mp4, json[QString("thumb_mp4")]);
    m_thumb_mp4_isSet = !json[QString("thumb_mp4")].isNull() && m_thumb_mp4_isValid;

    m_thumb_webm_isValid = ::OpenAPI::fromJsonValue(m_thumb_webm, json[QString("thumb_webm")]);
    m_thumb_webm_isSet = !json[QString("thumb_webm")].isNull() && m_thumb_webm_isValid;

    m_web_isValid = ::OpenAPI::fromJsonValue(m_web, json[QString("web")]);
    m_web_isSet = !json[QString("web")].isNull() && m_web_isValid;
}

QString OAIVideoAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideoAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_r_4k.isSet()) {
        obj.insert(QString("4k"), ::OpenAPI::toJsonValue(m_r_4k));
    }
    if (m_hd.isSet()) {
        obj.insert(QString("hd"), ::OpenAPI::toJsonValue(m_hd));
    }
    if (m_preview_jpg.isSet()) {
        obj.insert(QString("preview_jpg"), ::OpenAPI::toJsonValue(m_preview_jpg));
    }
    if (m_preview_mp4.isSet()) {
        obj.insert(QString("preview_mp4"), ::OpenAPI::toJsonValue(m_preview_mp4));
    }
    if (m_preview_webm.isSet()) {
        obj.insert(QString("preview_webm"), ::OpenAPI::toJsonValue(m_preview_webm));
    }
    if (m_sd.isSet()) {
        obj.insert(QString("sd"), ::OpenAPI::toJsonValue(m_sd));
    }
    if (m_thumb_jpg.isSet()) {
        obj.insert(QString("thumb_jpg"), ::OpenAPI::toJsonValue(m_thumb_jpg));
    }
    if (m_thumb_jpgs.isSet()) {
        obj.insert(QString("thumb_jpgs"), ::OpenAPI::toJsonValue(m_thumb_jpgs));
    }
    if (m_thumb_mp4.isSet()) {
        obj.insert(QString("thumb_mp4"), ::OpenAPI::toJsonValue(m_thumb_mp4));
    }
    if (m_thumb_webm.isSet()) {
        obj.insert(QString("thumb_webm"), ::OpenAPI::toJsonValue(m_thumb_webm));
    }
    if (m_web.isSet()) {
        obj.insert(QString("web"), ::OpenAPI::toJsonValue(m_web));
    }
    return obj;
}

OAIVideoSizeDetails OAIVideoAssets::getR4k() const {
    return m_r_4k;
}
void OAIVideoAssets::setR4k(const OAIVideoSizeDetails &r_4k) {
    m_r_4k = r_4k;
    m_r_4k_isSet = true;
}

bool OAIVideoAssets::is_r_4k_Set() const{
    return m_r_4k_isSet;
}

bool OAIVideoAssets::is_r_4k_Valid() const{
    return m_r_4k_isValid;
}

OAIVideoSizeDetails OAIVideoAssets::getHd() const {
    return m_hd;
}
void OAIVideoAssets::setHd(const OAIVideoSizeDetails &hd) {
    m_hd = hd;
    m_hd_isSet = true;
}

bool OAIVideoAssets::is_hd_Set() const{
    return m_hd_isSet;
}

bool OAIVideoAssets::is_hd_Valid() const{
    return m_hd_isValid;
}

OAIUrl OAIVideoAssets::getPreviewJpg() const {
    return m_preview_jpg;
}
void OAIVideoAssets::setPreviewJpg(const OAIUrl &preview_jpg) {
    m_preview_jpg = preview_jpg;
    m_preview_jpg_isSet = true;
}

bool OAIVideoAssets::is_preview_jpg_Set() const{
    return m_preview_jpg_isSet;
}

bool OAIVideoAssets::is_preview_jpg_Valid() const{
    return m_preview_jpg_isValid;
}

OAIUrl OAIVideoAssets::getPreviewMp4() const {
    return m_preview_mp4;
}
void OAIVideoAssets::setPreviewMp4(const OAIUrl &preview_mp4) {
    m_preview_mp4 = preview_mp4;
    m_preview_mp4_isSet = true;
}

bool OAIVideoAssets::is_preview_mp4_Set() const{
    return m_preview_mp4_isSet;
}

bool OAIVideoAssets::is_preview_mp4_Valid() const{
    return m_preview_mp4_isValid;
}

OAIUrl OAIVideoAssets::getPreviewWebm() const {
    return m_preview_webm;
}
void OAIVideoAssets::setPreviewWebm(const OAIUrl &preview_webm) {
    m_preview_webm = preview_webm;
    m_preview_webm_isSet = true;
}

bool OAIVideoAssets::is_preview_webm_Set() const{
    return m_preview_webm_isSet;
}

bool OAIVideoAssets::is_preview_webm_Valid() const{
    return m_preview_webm_isValid;
}

OAIVideoSizeDetails OAIVideoAssets::getSd() const {
    return m_sd;
}
void OAIVideoAssets::setSd(const OAIVideoSizeDetails &sd) {
    m_sd = sd;
    m_sd_isSet = true;
}

bool OAIVideoAssets::is_sd_Set() const{
    return m_sd_isSet;
}

bool OAIVideoAssets::is_sd_Valid() const{
    return m_sd_isValid;
}

OAIUrl OAIVideoAssets::getThumbJpg() const {
    return m_thumb_jpg;
}
void OAIVideoAssets::setThumbJpg(const OAIUrl &thumb_jpg) {
    m_thumb_jpg = thumb_jpg;
    m_thumb_jpg_isSet = true;
}

bool OAIVideoAssets::is_thumb_jpg_Set() const{
    return m_thumb_jpg_isSet;
}

bool OAIVideoAssets::is_thumb_jpg_Valid() const{
    return m_thumb_jpg_isValid;
}

OAIUrls OAIVideoAssets::getThumbJpgs() const {
    return m_thumb_jpgs;
}
void OAIVideoAssets::setThumbJpgs(const OAIUrls &thumb_jpgs) {
    m_thumb_jpgs = thumb_jpgs;
    m_thumb_jpgs_isSet = true;
}

bool OAIVideoAssets::is_thumb_jpgs_Set() const{
    return m_thumb_jpgs_isSet;
}

bool OAIVideoAssets::is_thumb_jpgs_Valid() const{
    return m_thumb_jpgs_isValid;
}

OAIUrl OAIVideoAssets::getThumbMp4() const {
    return m_thumb_mp4;
}
void OAIVideoAssets::setThumbMp4(const OAIUrl &thumb_mp4) {
    m_thumb_mp4 = thumb_mp4;
    m_thumb_mp4_isSet = true;
}

bool OAIVideoAssets::is_thumb_mp4_Set() const{
    return m_thumb_mp4_isSet;
}

bool OAIVideoAssets::is_thumb_mp4_Valid() const{
    return m_thumb_mp4_isValid;
}

OAIUrl OAIVideoAssets::getThumbWebm() const {
    return m_thumb_webm;
}
void OAIVideoAssets::setThumbWebm(const OAIUrl &thumb_webm) {
    m_thumb_webm = thumb_webm;
    m_thumb_webm_isSet = true;
}

bool OAIVideoAssets::is_thumb_webm_Set() const{
    return m_thumb_webm_isSet;
}

bool OAIVideoAssets::is_thumb_webm_Valid() const{
    return m_thumb_webm_isValid;
}

OAIVideoSizeDetails OAIVideoAssets::getWeb() const {
    return m_web;
}
void OAIVideoAssets::setWeb(const OAIVideoSizeDetails &web) {
    m_web = web;
    m_web_isSet = true;
}

bool OAIVideoAssets::is_web_Set() const{
    return m_web_isSet;
}

bool OAIVideoAssets::is_web_Valid() const{
    return m_web_isValid;
}

bool OAIVideoAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_r_4k.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_hd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_mp4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_webm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_sd.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_jpgs.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_mp4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_webm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_web.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideoAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
