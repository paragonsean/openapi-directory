/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioRenderTimelineSpan.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioRenderTimelineSpan::OAIAudioRenderTimelineSpan(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioRenderTimelineSpan::OAIAudioRenderTimelineSpan() {
    this->initializeModel();
}

OAIAudioRenderTimelineSpan::~OAIAudioRenderTimelineSpan() {}

void OAIAudioRenderTimelineSpan::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_instrument_groups_isSet = false;
    m_instrument_groups_isValid = false;

    m_regions_isSet = false;
    m_regions_isValid = false;

    m_span_type_isSet = false;
    m_span_type_isValid = false;

    m_tempo_isSet = false;
    m_tempo_isValid = false;

    m_tempo_changes_isSet = false;
    m_tempo_changes_isValid = false;

    m_time_isSet = false;
    m_time_isValid = false;
}

void OAIAudioRenderTimelineSpan::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioRenderTimelineSpan::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instrument_groups_isValid = ::OpenAPI::fromJsonValue(m_instrument_groups, json[QString("instrument_groups")]);
    m_instrument_groups_isSet = !json[QString("instrument_groups")].isNull() && m_instrument_groups_isValid;

    m_regions_isValid = ::OpenAPI::fromJsonValue(m_regions, json[QString("regions")]);
    m_regions_isSet = !json[QString("regions")].isNull() && m_regions_isValid;

    m_span_type_isValid = ::OpenAPI::fromJsonValue(m_span_type, json[QString("span_type")]);
    m_span_type_isSet = !json[QString("span_type")].isNull() && m_span_type_isValid;

    m_tempo_isValid = ::OpenAPI::fromJsonValue(m_tempo, json[QString("tempo")]);
    m_tempo_isSet = !json[QString("tempo")].isNull() && m_tempo_isValid;

    m_tempo_changes_isValid = ::OpenAPI::fromJsonValue(m_tempo_changes, json[QString("tempo_changes")]);
    m_tempo_changes_isSet = !json[QString("tempo_changes")].isNull() && m_tempo_changes_isValid;

    m_time_isValid = ::OpenAPI::fromJsonValue(m_time, json[QString("time")]);
    m_time_isSet = !json[QString("time")].isNull() && m_time_isValid;
}

QString OAIAudioRenderTimelineSpan::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioRenderTimelineSpan::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instrument_groups.size() > 0) {
        obj.insert(QString("instrument_groups"), ::OpenAPI::toJsonValue(m_instrument_groups));
    }
    if (m_regions.size() > 0) {
        obj.insert(QString("regions"), ::OpenAPI::toJsonValue(m_regions));
    }
    if (m_span_type_isSet) {
        obj.insert(QString("span_type"), ::OpenAPI::toJsonValue(m_span_type));
    }
    if (m_tempo_isSet) {
        obj.insert(QString("tempo"), ::OpenAPI::toJsonValue(m_tempo));
    }
    if (m_tempo_changes.size() > 0) {
        obj.insert(QString("tempo_changes"), ::OpenAPI::toJsonValue(m_tempo_changes));
    }
    if (m_time_isSet) {
        obj.insert(QString("time"), ::OpenAPI::toJsonValue(m_time));
    }
    return obj;
}

double OAIAudioRenderTimelineSpan::getId() const {
    return m_id;
}
void OAIAudioRenderTimelineSpan::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAudioRenderTimelineSpan::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIAudioRenderTimelineSpanInstrumentGroup> OAIAudioRenderTimelineSpan::getInstrumentGroups() const {
    return m_instrument_groups;
}
void OAIAudioRenderTimelineSpan::setInstrumentGroups(const QList<OAIAudioRenderTimelineSpanInstrumentGroup> &instrument_groups) {
    m_instrument_groups = instrument_groups;
    m_instrument_groups_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_instrument_groups_Set() const{
    return m_instrument_groups_isSet;
}

bool OAIAudioRenderTimelineSpan::is_instrument_groups_Valid() const{
    return m_instrument_groups_isValid;
}

QList<OAIAudioRenderTimelineSpanRegion> OAIAudioRenderTimelineSpan::getRegions() const {
    return m_regions;
}
void OAIAudioRenderTimelineSpan::setRegions(const QList<OAIAudioRenderTimelineSpanRegion> &regions) {
    m_regions = regions;
    m_regions_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_regions_Set() const{
    return m_regions_isSet;
}

bool OAIAudioRenderTimelineSpan::is_regions_Valid() const{
    return m_regions_isValid;
}

QString OAIAudioRenderTimelineSpan::getSpanType() const {
    return m_span_type;
}
void OAIAudioRenderTimelineSpan::setSpanType(const QString &span_type) {
    m_span_type = span_type;
    m_span_type_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_span_type_Set() const{
    return m_span_type_isSet;
}

bool OAIAudioRenderTimelineSpan::is_span_type_Valid() const{
    return m_span_type_isValid;
}

qint32 OAIAudioRenderTimelineSpan::getTempo() const {
    return m_tempo;
}
void OAIAudioRenderTimelineSpan::setTempo(const qint32 &tempo) {
    m_tempo = tempo;
    m_tempo_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_tempo_Set() const{
    return m_tempo_isSet;
}

bool OAIAudioRenderTimelineSpan::is_tempo_Valid() const{
    return m_tempo_isValid;
}

QList<OAIAudioRenderTimelineSpanTempoChanges> OAIAudioRenderTimelineSpan::getTempoChanges() const {
    return m_tempo_changes;
}
void OAIAudioRenderTimelineSpan::setTempoChanges(const QList<OAIAudioRenderTimelineSpanTempoChanges> &tempo_changes) {
    m_tempo_changes = tempo_changes;
    m_tempo_changes_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_tempo_changes_Set() const{
    return m_tempo_changes_isSet;
}

bool OAIAudioRenderTimelineSpan::is_tempo_changes_Valid() const{
    return m_tempo_changes_isValid;
}

qint32 OAIAudioRenderTimelineSpan::getTime() const {
    return m_time;
}
void OAIAudioRenderTimelineSpan::setTime(const qint32 &time) {
    m_time = time;
    m_time_isSet = true;
}

bool OAIAudioRenderTimelineSpan::is_time_Set() const{
    return m_time_isSet;
}

bool OAIAudioRenderTimelineSpan::is_time_Valid() const{
    return m_time_isValid;
}

bool OAIAudioRenderTimelineSpan::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instrument_groups.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_regions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_span_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tempo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tempo_changes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_time_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioRenderTimelineSpan::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_span_type_isValid && m_time_isValid && true;
}

} // namespace OpenAPI
