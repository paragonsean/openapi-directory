/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISoundEffectsApi_H
#define OAI_OAISoundEffectsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDownloadHistoryDataList.h"
#include "OAILanguage.h"
#include "OAILicenseSFXRequest.h"
#include "OAILicenseSFXResultDataList.h"
#include "OAISFX.h"
#include "OAISFXDataList.h"
#include "OAISFXSearchResults.h"
#include "OAISfxUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISoundEffectsApi : public QObject {
    Q_OBJECT

public:
    OAISoundEffectsApi(const int timeOut = 0);
    ~OAISoundEffectsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    */
    virtual void downloadSfx(const QString &id);

    /**
    * @param[in]  id qint32 [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  view QString [optional]
    * @param[in]  library QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getSfxDetails(const qint32 &id, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &library = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  sfx_id QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  license_id QString [optional]
    * @param[in]  download_availability QString [optional]
    * @param[in]  team_history bool [optional]
    */
    virtual void getSfxLicenseList(const ::OpenAPI::OptionalParam<QString> &sfx_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &license_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &download_availability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &team_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QList<QString> [required]
    * @param[in]  view QString [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  library QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getSfxListDetails(const QList<QString> &id, const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &library = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_license_sfx_request OAILicenseSFXRequest [required]
    */
    virtual void licensesSFX(const OAILicenseSFXRequest &oai_license_sfx_request);

    /**
    * @param[in]  added_date QDate [optional]
    * @param[in]  added_date_start QDate [optional]
    * @param[in]  added_date_end QDate [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  duration_from qint32 [optional]
    * @param[in]  duration_to qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  safe bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  view QString [optional]
    * @param[in]  language OAILanguage [optional]
    */
    virtual void searchSFX(const ::OpenAPI::OptionalParam<QDate> &added_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &added_date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &added_date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void downloadSfxCallback(OAIHttpRequestWorker *worker);
    void getSfxDetailsCallback(OAIHttpRequestWorker *worker);
    void getSfxLicenseListCallback(OAIHttpRequestWorker *worker);
    void getSfxListDetailsCallback(OAIHttpRequestWorker *worker);
    void licensesSFXCallback(OAIHttpRequestWorker *worker);
    void searchSFXCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void downloadSfxSignal(OAISfxUrl summary);
    void getSfxDetailsSignal(OAISFX summary);
    void getSfxLicenseListSignal(OAIDownloadHistoryDataList summary);
    void getSfxListDetailsSignal(OAISFXDataList summary);
    void licensesSFXSignal(OAILicenseSFXResultDataList summary);
    void searchSFXSignal(OAISFXSearchResults summary);


    void downloadSfxSignalFull(OAIHttpRequestWorker *worker, OAISfxUrl summary);
    void getSfxDetailsSignalFull(OAIHttpRequestWorker *worker, OAISFX summary);
    void getSfxLicenseListSignalFull(OAIHttpRequestWorker *worker, OAIDownloadHistoryDataList summary);
    void getSfxListDetailsSignalFull(OAIHttpRequestWorker *worker, OAISFXDataList summary);
    void licensesSFXSignalFull(OAIHttpRequestWorker *worker, OAILicenseSFXResultDataList summary);
    void searchSFXSignalFull(OAIHttpRequestWorker *worker, OAISFXSearchResults summary);

    Q_DECL_DEPRECATED_X("Use downloadSfxSignalError() instead")
    void downloadSfxSignalE(OAISfxUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadSfxSignalError(OAISfxUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSfxDetailsSignalError() instead")
    void getSfxDetailsSignalE(OAISFX summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSfxDetailsSignalError(OAISFX summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSfxLicenseListSignalError() instead")
    void getSfxLicenseListSignalE(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSfxLicenseListSignalError(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSfxListDetailsSignalError() instead")
    void getSfxListDetailsSignalE(OAISFXDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSfxListDetailsSignalError(OAISFXDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licensesSFXSignalError() instead")
    void licensesSFXSignalE(OAILicenseSFXResultDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licensesSFXSignalError(OAILicenseSFXResultDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSFXSignalError() instead")
    void searchSFXSignalE(OAISFXSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSFXSignalError(OAISFXSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use downloadSfxSignalErrorFull() instead")
    void downloadSfxSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadSfxSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSfxDetailsSignalErrorFull() instead")
    void getSfxDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSfxDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSfxLicenseListSignalErrorFull() instead")
    void getSfxLicenseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSfxLicenseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSfxListDetailsSignalErrorFull() instead")
    void getSfxListDetailsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSfxListDetailsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licensesSFXSignalErrorFull() instead")
    void licensesSFXSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licensesSFXSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchSFXSignalErrorFull() instead")
    void searchSFXSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchSFXSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
