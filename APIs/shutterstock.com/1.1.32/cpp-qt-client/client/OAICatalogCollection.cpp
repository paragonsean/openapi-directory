/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCollection::OAICatalogCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCollection::OAICatalogCollection() {
    this->initializeModel();
}

OAICatalogCollection::~OAICatalogCollection() {}

void OAICatalogCollection::initializeModel() {

    m_cover_asset_isSet = false;
    m_cover_asset_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_role_assignments_isSet = false;
    m_role_assignments_isValid = false;

    m_total_item_count_isSet = false;
    m_total_item_count_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAICatalogCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCollection::fromJsonObject(QJsonObject json) {

    m_cover_asset_isValid = ::OpenAPI::fromJsonValue(m_cover_asset, json[QString("cover_asset")]);
    m_cover_asset_isSet = !json[QString("cover_asset")].isNull() && m_cover_asset_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_role_assignments_isValid = ::OpenAPI::fromJsonValue(m_role_assignments, json[QString("role_assignments")]);
    m_role_assignments_isSet = !json[QString("role_assignments")].isNull() && m_role_assignments_isValid;

    m_total_item_count_isValid = ::OpenAPI::fromJsonValue(m_total_item_count, json[QString("total_item_count")]);
    m_total_item_count_isSet = !json[QString("total_item_count")].isNull() && m_total_item_count_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAICatalogCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_asset.isSet()) {
        obj.insert(QString("cover_asset"), ::OpenAPI::toJsonValue(m_cover_asset));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_role_assignments.isSet()) {
        obj.insert(QString("role_assignments"), ::OpenAPI::toJsonValue(m_role_assignments));
    }
    if (m_total_item_count_isSet) {
        obj.insert(QString("total_item_count"), ::OpenAPI::toJsonValue(m_total_item_count));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAICatalogCollectionItem OAICatalogCollection::getCoverAsset() const {
    return m_cover_asset;
}
void OAICatalogCollection::setCoverAsset(const OAICatalogCollectionItem &cover_asset) {
    m_cover_asset = cover_asset;
    m_cover_asset_isSet = true;
}

bool OAICatalogCollection::is_cover_asset_Set() const{
    return m_cover_asset_isSet;
}

bool OAICatalogCollection::is_cover_asset_Valid() const{
    return m_cover_asset_isValid;
}

QDateTime OAICatalogCollection::getCreatedTime() const {
    return m_created_time;
}
void OAICatalogCollection::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAICatalogCollection::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICatalogCollection::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAICatalogCollection::getId() const {
    return m_id;
}
void OAICatalogCollection::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalogCollection::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogCollection::is_id_Valid() const{
    return m_id_isValid;
}

QString OAICatalogCollection::getName() const {
    return m_name;
}
void OAICatalogCollection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAICatalogCollection::is_name_Set() const{
    return m_name_isSet;
}

bool OAICatalogCollection::is_name_Valid() const{
    return m_name_isValid;
}

OAICatalogCollectionRoleAssignments OAICatalogCollection::getRoleAssignments() const {
    return m_role_assignments;
}
void OAICatalogCollection::setRoleAssignments(const OAICatalogCollectionRoleAssignments &role_assignments) {
    m_role_assignments = role_assignments;
    m_role_assignments_isSet = true;
}

bool OAICatalogCollection::is_role_assignments_Set() const{
    return m_role_assignments_isSet;
}

bool OAICatalogCollection::is_role_assignments_Valid() const{
    return m_role_assignments_isValid;
}

double OAICatalogCollection::getTotalItemCount() const {
    return m_total_item_count;
}
void OAICatalogCollection::setTotalItemCount(const double &total_item_count) {
    m_total_item_count = total_item_count;
    m_total_item_count_isSet = true;
}

bool OAICatalogCollection::is_total_item_count_Set() const{
    return m_total_item_count_isSet;
}

bool OAICatalogCollection::is_total_item_count_Valid() const{
    return m_total_item_count_isValid;
}

QDateTime OAICatalogCollection::getUpdatedTime() const {
    return m_updated_time;
}
void OAICatalogCollection::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAICatalogCollection::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAICatalogCollection::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAICatalogCollection::getVisibility() const {
    return m_visibility;
}
void OAICatalogCollection::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAICatalogCollection::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAICatalogCollection::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAICatalogCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_role_assignments.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_created_time_isValid && m_id_isValid && m_name_isValid && m_role_assignments_isValid && m_total_item_count_isValid && m_updated_time_isValid && m_visibility_isValid && true;
}

} // namespace OpenAPI
