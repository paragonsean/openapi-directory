/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDownloadHistory.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDownloadHistory::OAIDownloadHistory(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDownloadHistory::OAIDownloadHistory() {
    this->initializeModel();
}

OAIDownloadHistory::~OAIDownloadHistory() {}

void OAIDownloadHistory::initializeModel() {

    m_audio_isSet = false;
    m_audio_isValid = false;

    m_download_time_isSet = false;
    m_download_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_image_isSet = false;
    m_image_isValid = false;

    m_is_downloadable_isSet = false;
    m_is_downloadable_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_revshare_isSet = false;
    m_revshare_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_user_isSet = false;
    m_user_isValid = false;

    m_video_isSet = false;
    m_video_isValid = false;
}

void OAIDownloadHistory::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDownloadHistory::fromJsonObject(QJsonObject json) {

    m_audio_isValid = ::OpenAPI::fromJsonValue(m_audio, json[QString("audio")]);
    m_audio_isSet = !json[QString("audio")].isNull() && m_audio_isValid;

    m_download_time_isValid = ::OpenAPI::fromJsonValue(m_download_time, json[QString("download_time")]);
    m_download_time_isSet = !json[QString("download_time")].isNull() && m_download_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_image_isValid = ::OpenAPI::fromJsonValue(m_image, json[QString("image")]);
    m_image_isSet = !json[QString("image")].isNull() && m_image_isValid;

    m_is_downloadable_isValid = ::OpenAPI::fromJsonValue(m_is_downloadable, json[QString("is_downloadable")]);
    m_is_downloadable_isSet = !json[QString("is_downloadable")].isNull() && m_is_downloadable_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_revshare_isValid = ::OpenAPI::fromJsonValue(m_revshare, json[QString("revshare")]);
    m_revshare_isSet = !json[QString("revshare")].isNull() && m_revshare_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;

    m_user_isValid = ::OpenAPI::fromJsonValue(m_user, json[QString("user")]);
    m_user_isSet = !json[QString("user")].isNull() && m_user_isValid;

    m_video_isValid = ::OpenAPI::fromJsonValue(m_video, json[QString("video")]);
    m_video_isSet = !json[QString("video")].isNull() && m_video_isValid;
}

QString OAIDownloadHistory::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDownloadHistory::asJsonObject() const {
    QJsonObject obj;
    if (m_audio.isSet()) {
        obj.insert(QString("audio"), ::OpenAPI::toJsonValue(m_audio));
    }
    if (m_download_time_isSet) {
        obj.insert(QString("download_time"), ::OpenAPI::toJsonValue(m_download_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_image.isSet()) {
        obj.insert(QString("image"), ::OpenAPI::toJsonValue(m_image));
    }
    if (m_is_downloadable_isSet) {
        obj.insert(QString("is_downloadable"), ::OpenAPI::toJsonValue(m_is_downloadable));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_revshare.isSet()) {
        obj.insert(QString("revshare"), ::OpenAPI::toJsonValue(m_revshare));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_user.isSet()) {
        obj.insert(QString("user"), ::OpenAPI::toJsonValue(m_user));
    }
    if (m_video.isSet()) {
        obj.insert(QString("video"), ::OpenAPI::toJsonValue(m_video));
    }
    return obj;
}

OAIDownloadHistoryMediaDetails OAIDownloadHistory::getAudio() const {
    return m_audio;
}
void OAIDownloadHistory::setAudio(const OAIDownloadHistoryMediaDetails &audio) {
    m_audio = audio;
    m_audio_isSet = true;
}

bool OAIDownloadHistory::is_audio_Set() const{
    return m_audio_isSet;
}

bool OAIDownloadHistory::is_audio_Valid() const{
    return m_audio_isValid;
}

QDateTime OAIDownloadHistory::getDownloadTime() const {
    return m_download_time;
}
void OAIDownloadHistory::setDownloadTime(const QDateTime &download_time) {
    m_download_time = download_time;
    m_download_time_isSet = true;
}

bool OAIDownloadHistory::is_download_time_Set() const{
    return m_download_time_isSet;
}

bool OAIDownloadHistory::is_download_time_Valid() const{
    return m_download_time_isValid;
}

QString OAIDownloadHistory::getId() const {
    return m_id;
}
void OAIDownloadHistory::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDownloadHistory::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDownloadHistory::is_id_Valid() const{
    return m_id_isValid;
}

OAIDownloadHistoryMediaDetails OAIDownloadHistory::getImage() const {
    return m_image;
}
void OAIDownloadHistory::setImage(const OAIDownloadHistoryMediaDetails &image) {
    m_image = image;
    m_image_isSet = true;
}

bool OAIDownloadHistory::is_image_Set() const{
    return m_image_isSet;
}

bool OAIDownloadHistory::is_image_Valid() const{
    return m_image_isValid;
}

bool OAIDownloadHistory::isIsDownloadable() const {
    return m_is_downloadable;
}
void OAIDownloadHistory::setIsDownloadable(const bool &is_downloadable) {
    m_is_downloadable = is_downloadable;
    m_is_downloadable_isSet = true;
}

bool OAIDownloadHistory::is_is_downloadable_Set() const{
    return m_is_downloadable_isSet;
}

bool OAIDownloadHistory::is_is_downloadable_Valid() const{
    return m_is_downloadable_isValid;
}

QString OAIDownloadHistory::getLicense() const {
    return m_license;
}
void OAIDownloadHistory::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAIDownloadHistory::is_license_Set() const{
    return m_license_isSet;
}

bool OAIDownloadHistory::is_license_Valid() const{
    return m_license_isValid;
}

OAIObject OAIDownloadHistory::getMetadata() const {
    return m_metadata;
}
void OAIDownloadHistory::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAIDownloadHistory::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAIDownloadHistory::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIDownloadHistoryRevshareDetails OAIDownloadHistory::getRevshare() const {
    return m_revshare;
}
void OAIDownloadHistory::setRevshare(const OAIDownloadHistoryRevshareDetails &revshare) {
    m_revshare = revshare;
    m_revshare_isSet = true;
}

bool OAIDownloadHistory::is_revshare_Set() const{
    return m_revshare_isSet;
}

bool OAIDownloadHistory::is_revshare_Valid() const{
    return m_revshare_isValid;
}

QString OAIDownloadHistory::getSubscriptionId() const {
    return m_subscription_id;
}
void OAIDownloadHistory::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAIDownloadHistory::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAIDownloadHistory::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

OAIDownloadHistoryUserDetails OAIDownloadHistory::getUser() const {
    return m_user;
}
void OAIDownloadHistory::setUser(const OAIDownloadHistoryUserDetails &user) {
    m_user = user;
    m_user_isSet = true;
}

bool OAIDownloadHistory::is_user_Set() const{
    return m_user_isSet;
}

bool OAIDownloadHistory::is_user_Valid() const{
    return m_user_isValid;
}

OAIDownloadHistoryMediaDetails OAIDownloadHistory::getVideo() const {
    return m_video;
}
void OAIDownloadHistory::setVideo(const OAIDownloadHistoryMediaDetails &video) {
    m_video = video;
    m_video_isSet = true;
}

bool OAIDownloadHistory::is_video_Set() const{
    return m_video_isSet;
}

bool OAIDownloadHistory::is_video_Valid() const{
    return m_video_isValid;
}

bool OAIDownloadHistory::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_download_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_downloadable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_revshare.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_user.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_video.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDownloadHistory::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_download_time_isValid && m_id_isValid && m_license_isValid && true;
}

} // namespace OpenAPI
