/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILanguage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILanguage::OAILanguage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILanguage::OAILanguage() {
    this->initializeModel();
}

OAILanguage::~OAILanguage() {}

void OAILanguage::initializeModel() {

    m_value_isSet = false;
    m_value_isValid = false;
    m_value = eOAILanguage::INVALID_VALUE_OPENAPI_GENERATED;
}

void OAILanguage::fromJson(QString jsonString) {
    
    if ( jsonString.compare("ar", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::AR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bg", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::BG;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("bn", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::BN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("cs", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::CS;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("da", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::DA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("de", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::DE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("el", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("en", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::EN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("es", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ES;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fi", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::FI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("fr", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::FR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("gu", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::GU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("he", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hi", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hr", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("hu", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::HU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("id", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ID;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("it", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::IT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ja", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::JA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("kn", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::KN;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ko", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::KO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ml", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ML;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("mr", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::MR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nb", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::NB;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("nl", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::NL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("or", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::OR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pl", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::PL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("pt", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::PT;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ro", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::RO;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ru", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::RU;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sk", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::SK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sl", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::SL;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("sv", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::SV;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ta", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::TA;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("te", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::TE;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("th", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::TH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("tr", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::TR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("uk", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::UK;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("ur", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::UR;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("vi", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::VI;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ZH;
        m_value_isSet = m_value_isValid = true;
    }
    else if ( jsonString.compare("zh-Hant", Qt::CaseInsensitive) == 0) {
        m_value = eOAILanguage::ZH_HANT;
        m_value_isSet = m_value_isValid = true;
    }
}

void OAILanguage::fromJsonValue(QJsonValue json) {
fromJson(json.toString());
}

QString OAILanguage::asJson() const {
    
    QString val;
    switch (m_value){
        case eOAILanguage::AR:
            val = "ar";
            break;
        case eOAILanguage::BG:
            val = "bg";
            break;
        case eOAILanguage::BN:
            val = "bn";
            break;
        case eOAILanguage::CS:
            val = "cs";
            break;
        case eOAILanguage::DA:
            val = "da";
            break;
        case eOAILanguage::DE:
            val = "de";
            break;
        case eOAILanguage::EL:
            val = "el";
            break;
        case eOAILanguage::EN:
            val = "en";
            break;
        case eOAILanguage::ES:
            val = "es";
            break;
        case eOAILanguage::FI:
            val = "fi";
            break;
        case eOAILanguage::FR:
            val = "fr";
            break;
        case eOAILanguage::GU:
            val = "gu";
            break;
        case eOAILanguage::HE:
            val = "he";
            break;
        case eOAILanguage::HI:
            val = "hi";
            break;
        case eOAILanguage::HR:
            val = "hr";
            break;
        case eOAILanguage::HU:
            val = "hu";
            break;
        case eOAILanguage::ID:
            val = "id";
            break;
        case eOAILanguage::IT:
            val = "it";
            break;
        case eOAILanguage::JA:
            val = "ja";
            break;
        case eOAILanguage::KN:
            val = "kn";
            break;
        case eOAILanguage::KO:
            val = "ko";
            break;
        case eOAILanguage::ML:
            val = "ml";
            break;
        case eOAILanguage::MR:
            val = "mr";
            break;
        case eOAILanguage::NB:
            val = "nb";
            break;
        case eOAILanguage::NL:
            val = "nl";
            break;
        case eOAILanguage::OR:
            val = "or";
            break;
        case eOAILanguage::PL:
            val = "pl";
            break;
        case eOAILanguage::PT:
            val = "pt";
            break;
        case eOAILanguage::RO:
            val = "ro";
            break;
        case eOAILanguage::RU:
            val = "ru";
            break;
        case eOAILanguage::SK:
            val = "sk";
            break;
        case eOAILanguage::SL:
            val = "sl";
            break;
        case eOAILanguage::SV:
            val = "sv";
            break;
        case eOAILanguage::TA:
            val = "ta";
            break;
        case eOAILanguage::TE:
            val = "te";
            break;
        case eOAILanguage::TH:
            val = "th";
            break;
        case eOAILanguage::TR:
            val = "tr";
            break;
        case eOAILanguage::UK:
            val = "uk";
            break;
        case eOAILanguage::UR:
            val = "ur";
            break;
        case eOAILanguage::VI:
            val = "vi";
            break;
        case eOAILanguage::ZH:
            val = "zh";
            break;
        case eOAILanguage::ZH_HANT:
            val = "zh-Hant";
            break;
        default:
            break;
    }
    return val;
}

QJsonValue OAILanguage::asJsonValue() const {
    
    return QJsonValue(asJson());
}


OAILanguage::eOAILanguage OAILanguage::getValue() const {
    return m_value;
}

void OAILanguage::setValue(const OAILanguage::eOAILanguage& value){
    m_value = value;
    m_value_isSet = true;
}
bool OAILanguage::isSet() const {
    
    return m_value_isSet;
}

bool OAILanguage::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_value_isValid;
}

} // namespace OpenAPI
