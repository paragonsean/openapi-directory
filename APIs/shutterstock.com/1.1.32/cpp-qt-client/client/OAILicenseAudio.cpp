/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseAudio::OAILicenseAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseAudio::OAILicenseAudio() {
    this->initializeModel();
}

OAILicenseAudio::~OAILicenseAudio() {}

void OAILicenseAudio::initializeModel() {

    m_audio_id_isSet = false;
    m_audio_id_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_search_id_isSet = false;
    m_search_id_isValid = false;
}

void OAILicenseAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseAudio::fromJsonObject(QJsonObject json) {

    m_audio_id_isValid = ::OpenAPI::fromJsonValue(m_audio_id, json[QString("audio_id")]);
    m_audio_id_isSet = !json[QString("audio_id")].isNull() && m_audio_id_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_search_id_isValid = ::OpenAPI::fromJsonValue(m_search_id, json[QString("search_id")]);
    m_search_id_isSet = !json[QString("search_id")].isNull() && m_search_id_isValid;
}

QString OAILicenseAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_id_isSet) {
        obj.insert(QString("audio_id"), ::OpenAPI::toJsonValue(m_audio_id));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_search_id_isSet) {
        obj.insert(QString("search_id"), ::OpenAPI::toJsonValue(m_search_id));
    }
    return obj;
}

QString OAILicenseAudio::getAudioId() const {
    return m_audio_id;
}
void OAILicenseAudio::setAudioId(const QString &audio_id) {
    m_audio_id = audio_id;
    m_audio_id_isSet = true;
}

bool OAILicenseAudio::is_audio_id_Set() const{
    return m_audio_id_isSet;
}

bool OAILicenseAudio::is_audio_id_Valid() const{
    return m_audio_id_isValid;
}

QString OAILicenseAudio::getLicense() const {
    return m_license;
}
void OAILicenseAudio::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAILicenseAudio::is_license_Set() const{
    return m_license_isSet;
}

bool OAILicenseAudio::is_license_Valid() const{
    return m_license_isValid;
}

QString OAILicenseAudio::getSearchId() const {
    return m_search_id;
}
void OAILicenseAudio::setSearchId(const QString &search_id) {
    m_search_id = search_id;
    m_search_id_isSet = true;
}

bool OAILicenseAudio::is_search_id_Set() const{
    return m_search_id_isSet;
}

bool OAILicenseAudio::is_search_id_Valid() const{
    return m_search_id_isValid;
}

bool OAILicenseAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_audio_id_isValid && true;
}

} // namespace OpenAPI
