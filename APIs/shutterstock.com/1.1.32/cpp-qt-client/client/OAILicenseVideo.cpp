/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseVideo::OAILicenseVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseVideo::OAILicenseVideo() {
    this->initializeModel();
}

OAILicenseVideo::~OAILicenseVideo() {}

void OAILicenseVideo::initializeModel() {

    m_auth_cookie_isSet = false;
    m_auth_cookie_isValid = false;

    m_editorial_acknowledgement_isSet = false;
    m_editorial_acknowledgement_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_search_id_isSet = false;
    m_search_id_isValid = false;

    m_show_modal_isSet = false;
    m_show_modal_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_video_id_isSet = false;
    m_video_id_isValid = false;
}

void OAILicenseVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseVideo::fromJsonObject(QJsonObject json) {

    m_auth_cookie_isValid = ::OpenAPI::fromJsonValue(m_auth_cookie, json[QString("auth_cookie")]);
    m_auth_cookie_isSet = !json[QString("auth_cookie")].isNull() && m_auth_cookie_isValid;

    m_editorial_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_editorial_acknowledgement, json[QString("editorial_acknowledgement")]);
    m_editorial_acknowledgement_isSet = !json[QString("editorial_acknowledgement")].isNull() && m_editorial_acknowledgement_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_search_id_isValid = ::OpenAPI::fromJsonValue(m_search_id, json[QString("search_id")]);
    m_search_id_isSet = !json[QString("search_id")].isNull() && m_search_id_isValid;

    m_show_modal_isValid = ::OpenAPI::fromJsonValue(m_show_modal, json[QString("show_modal")]);
    m_show_modal_isSet = !json[QString("show_modal")].isNull() && m_show_modal_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;

    m_video_id_isValid = ::OpenAPI::fromJsonValue(m_video_id, json[QString("video_id")]);
    m_video_id_isSet = !json[QString("video_id")].isNull() && m_video_id_isValid;
}

QString OAILicenseVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_cookie.isSet()) {
        obj.insert(QString("auth_cookie"), ::OpenAPI::toJsonValue(m_auth_cookie));
    }
    if (m_editorial_acknowledgement_isSet) {
        obj.insert(QString("editorial_acknowledgement"), ::OpenAPI::toJsonValue(m_editorial_acknowledgement));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_search_id_isSet) {
        obj.insert(QString("search_id"), ::OpenAPI::toJsonValue(m_search_id));
    }
    if (m_show_modal_isSet) {
        obj.insert(QString("show_modal"), ::OpenAPI::toJsonValue(m_show_modal));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_video_id_isSet) {
        obj.insert(QString("video_id"), ::OpenAPI::toJsonValue(m_video_id));
    }
    return obj;
}

OAICookie OAILicenseVideo::getAuthCookie() const {
    return m_auth_cookie;
}
void OAILicenseVideo::setAuthCookie(const OAICookie &auth_cookie) {
    m_auth_cookie = auth_cookie;
    m_auth_cookie_isSet = true;
}

bool OAILicenseVideo::is_auth_cookie_Set() const{
    return m_auth_cookie_isSet;
}

bool OAILicenseVideo::is_auth_cookie_Valid() const{
    return m_auth_cookie_isValid;
}

bool OAILicenseVideo::isEditorialAcknowledgement() const {
    return m_editorial_acknowledgement;
}
void OAILicenseVideo::setEditorialAcknowledgement(const bool &editorial_acknowledgement) {
    m_editorial_acknowledgement = editorial_acknowledgement;
    m_editorial_acknowledgement_isSet = true;
}

bool OAILicenseVideo::is_editorial_acknowledgement_Set() const{
    return m_editorial_acknowledgement_isSet;
}

bool OAILicenseVideo::is_editorial_acknowledgement_Valid() const{
    return m_editorial_acknowledgement_isValid;
}

OAIObject OAILicenseVideo::getMetadata() const {
    return m_metadata;
}
void OAILicenseVideo::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILicenseVideo::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILicenseVideo::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAILicenseVideo::getPrice() const {
    return m_price;
}
void OAILicenseVideo::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILicenseVideo::is_price_Set() const{
    return m_price_isSet;
}

bool OAILicenseVideo::is_price_Valid() const{
    return m_price_isValid;
}

QString OAILicenseVideo::getSearchId() const {
    return m_search_id;
}
void OAILicenseVideo::setSearchId(const QString &search_id) {
    m_search_id = search_id;
    m_search_id_isSet = true;
}

bool OAILicenseVideo::is_search_id_Set() const{
    return m_search_id_isSet;
}

bool OAILicenseVideo::is_search_id_Valid() const{
    return m_search_id_isValid;
}

bool OAILicenseVideo::isShowModal() const {
    return m_show_modal;
}
void OAILicenseVideo::setShowModal(const bool &show_modal) {
    m_show_modal = show_modal;
    m_show_modal_isSet = true;
}

bool OAILicenseVideo::is_show_modal_Set() const{
    return m_show_modal_isSet;
}

bool OAILicenseVideo::is_show_modal_Valid() const{
    return m_show_modal_isValid;
}

QString OAILicenseVideo::getSize() const {
    return m_size;
}
void OAILicenseVideo::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILicenseVideo::is_size_Set() const{
    return m_size_isSet;
}

bool OAILicenseVideo::is_size_Valid() const{
    return m_size_isValid;
}

QString OAILicenseVideo::getSubscriptionId() const {
    return m_subscription_id;
}
void OAILicenseVideo::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAILicenseVideo::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAILicenseVideo::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAILicenseVideo::getVideoId() const {
    return m_video_id;
}
void OAILicenseVideo::setVideoId(const QString &video_id) {
    m_video_id = video_id;
    m_video_id_isSet = true;
}

bool OAILicenseVideo::is_video_id_Set() const{
    return m_video_id_isSet;
}

bool OAILicenseVideo::is_video_id_Valid() const{
    return m_video_id_isValid;
}

bool OAILicenseVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_cookie.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_acknowledgement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_modal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_video_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_video_id_isValid && true;
}

} // namespace OpenAPI
