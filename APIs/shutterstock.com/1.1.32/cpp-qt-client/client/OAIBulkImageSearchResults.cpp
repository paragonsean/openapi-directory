/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIBulkImageSearchResults.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIBulkImageSearchResults::OAIBulkImageSearchResults(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIBulkImageSearchResults::OAIBulkImageSearchResults() {
    this->initializeModel();
}

OAIBulkImageSearchResults::~OAIBulkImageSearchResults() {}

void OAIBulkImageSearchResults::initializeModel() {

    m_bulk_search_id_isSet = false;
    m_bulk_search_id_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;
}

void OAIBulkImageSearchResults::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIBulkImageSearchResults::fromJsonObject(QJsonObject json) {

    m_bulk_search_id_isValid = ::OpenAPI::fromJsonValue(m_bulk_search_id, json[QString("bulk_search_id")]);
    m_bulk_search_id_isSet = !json[QString("bulk_search_id")].isNull() && m_bulk_search_id_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;
}

QString OAIBulkImageSearchResults::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIBulkImageSearchResults::asJsonObject() const {
    QJsonObject obj;
    if (m_bulk_search_id_isSet) {
        obj.insert(QString("bulk_search_id"), ::OpenAPI::toJsonValue(m_bulk_search_id));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    return obj;
}

QString OAIBulkImageSearchResults::getBulkSearchId() const {
    return m_bulk_search_id;
}
void OAIBulkImageSearchResults::setBulkSearchId(const QString &bulk_search_id) {
    m_bulk_search_id = bulk_search_id;
    m_bulk_search_id_isSet = true;
}

bool OAIBulkImageSearchResults::is_bulk_search_id_Set() const{
    return m_bulk_search_id_isSet;
}

bool OAIBulkImageSearchResults::is_bulk_search_id_Valid() const{
    return m_bulk_search_id_isValid;
}

QList<OAIImageSearchResults> OAIBulkImageSearchResults::getResults() const {
    return m_results;
}
void OAIBulkImageSearchResults::setResults(const QList<OAIImageSearchResults> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIBulkImageSearchResults::is_results_Set() const{
    return m_results_isSet;
}

bool OAIBulkImageSearchResults::is_results_Valid() const{
    return m_results_isValid;
}

bool OAIBulkImageSearchResults::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_bulk_search_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIBulkImageSearchResults::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
