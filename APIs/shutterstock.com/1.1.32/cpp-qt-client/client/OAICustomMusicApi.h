/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICustomMusicApi_H
#define OAI_OAICustomMusicApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIAudioRendersListResults.h"
#include "OAICreateAudioRendersRequest.h"
#include "OAIDescriptorsListResult.h"
#include "OAIInstrumentsListResult.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICustomMusicApi : public QObject {
    Q_OBJECT

public:
    OAICustomMusicApi(const int timeOut = 0);
    ~OAICustomMusicApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  oai_create_audio_renders_request OAICreateAudioRendersRequest [required]
    */
    virtual void createAudioRenders(const OAICreateAudioRendersRequest &oai_create_audio_renders_request);

    /**
    * @param[in]  id QList<QString> [required]
    */
    virtual void fetchRenders(const QList<QString> &id);

    /**
    * @param[in]  render_speed_over double [optional]
    * @param[in]  band_id QString [optional]
    * @param[in]  band_name QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  id QList<QString> [optional]
    * @param[in]  instrument_name QString [optional]
    * @param[in]  instrument_id QString [optional]
    * @param[in]  tempo double [optional]
    * @param[in]  tempo_to double [optional]
    * @param[in]  tempo_from double [optional]
    * @param[in]  name QString [optional]
    * @param[in]  tag QString [optional]
    */
    virtual void listCustomDescriptors(const ::OpenAPI::OptionalParam<double> &render_speed_over = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &band_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &band_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &instrument_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &instrument_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &tempo = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &tempo_to = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &tempo_from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<QString> [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  name QString [optional]
    * @param[in]  tag QString [optional]
    */
    virtual void listCustomInstruments(const ::OpenAPI::OptionalParam<QList<QString>> &id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &tag = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void createAudioRendersCallback(OAIHttpRequestWorker *worker);
    void fetchRendersCallback(OAIHttpRequestWorker *worker);
    void listCustomDescriptorsCallback(OAIHttpRequestWorker *worker);
    void listCustomInstrumentsCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void createAudioRendersSignal(OAIAudioRendersListResults summary);
    void fetchRendersSignal(OAIAudioRendersListResults summary);
    void listCustomDescriptorsSignal(OAIDescriptorsListResult summary);
    void listCustomInstrumentsSignal(OAIInstrumentsListResult summary);


    void createAudioRendersSignalFull(OAIHttpRequestWorker *worker, OAIAudioRendersListResults summary);
    void fetchRendersSignalFull(OAIHttpRequestWorker *worker, OAIAudioRendersListResults summary);
    void listCustomDescriptorsSignalFull(OAIHttpRequestWorker *worker, OAIDescriptorsListResult summary);
    void listCustomInstrumentsSignalFull(OAIHttpRequestWorker *worker, OAIInstrumentsListResult summary);

    Q_DECL_DEPRECATED_X("Use createAudioRendersSignalError() instead")
    void createAudioRendersSignalE(OAIAudioRendersListResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAudioRendersSignalError(OAIAudioRendersListResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRendersSignalError() instead")
    void fetchRendersSignalE(OAIAudioRendersListResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRendersSignalError(OAIAudioRendersListResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomDescriptorsSignalError() instead")
    void listCustomDescriptorsSignalE(OAIDescriptorsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomDescriptorsSignalError(OAIDescriptorsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomInstrumentsSignalError() instead")
    void listCustomInstrumentsSignalE(OAIInstrumentsListResult summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomInstrumentsSignalError(OAIInstrumentsListResult summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use createAudioRendersSignalErrorFull() instead")
    void createAudioRendersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAudioRendersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use fetchRendersSignalErrorFull() instead")
    void fetchRendersSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void fetchRendersSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomDescriptorsSignalErrorFull() instead")
    void listCustomDescriptorsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomDescriptorsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listCustomInstrumentsSignalErrorFull() instead")
    void listCustomInstrumentsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listCustomInstrumentsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
