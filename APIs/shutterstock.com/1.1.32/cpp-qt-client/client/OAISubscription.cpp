/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISubscription.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISubscription::OAISubscription(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISubscription::OAISubscription() {
    this->initializeModel();
}

OAISubscription::~OAISubscription() {}

void OAISubscription::initializeModel() {

    m_allotment_isSet = false;
    m_allotment_isValid = false;

    m_asset_type_isSet = false;
    m_asset_type_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_expiration_time_isSet = false;
    m_expiration_time_isValid = false;

    m_formats_isSet = false;
    m_formats_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_price_per_download_isSet = false;
    m_price_per_download_isValid = false;
}

void OAISubscription::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISubscription::fromJsonObject(QJsonObject json) {

    m_allotment_isValid = ::OpenAPI::fromJsonValue(m_allotment, json[QString("allotment")]);
    m_allotment_isSet = !json[QString("allotment")].isNull() && m_allotment_isValid;

    m_asset_type_isValid = ::OpenAPI::fromJsonValue(m_asset_type, json[QString("asset_type")]);
    m_asset_type_isSet = !json[QString("asset_type")].isNull() && m_asset_type_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_expiration_time_isValid = ::OpenAPI::fromJsonValue(m_expiration_time, json[QString("expiration_time")]);
    m_expiration_time_isSet = !json[QString("expiration_time")].isNull() && m_expiration_time_isValid;

    m_formats_isValid = ::OpenAPI::fromJsonValue(m_formats, json[QString("formats")]);
    m_formats_isSet = !json[QString("formats")].isNull() && m_formats_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_price_per_download_isValid = ::OpenAPI::fromJsonValue(m_price_per_download, json[QString("price_per_download")]);
    m_price_per_download_isSet = !json[QString("price_per_download")].isNull() && m_price_per_download_isValid;
}

QString OAISubscription::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISubscription::asJsonObject() const {
    QJsonObject obj;
    if (m_allotment.isSet()) {
        obj.insert(QString("allotment"), ::OpenAPI::toJsonValue(m_allotment));
    }
    if (m_asset_type_isSet) {
        obj.insert(QString("asset_type"), ::OpenAPI::toJsonValue(m_asset_type));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_expiration_time_isSet) {
        obj.insert(QString("expiration_time"), ::OpenAPI::toJsonValue(m_expiration_time));
    }
    if (m_formats.size() > 0) {
        obj.insert(QString("formats"), ::OpenAPI::toJsonValue(m_formats));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_price_per_download.isSet()) {
        obj.insert(QString("price_per_download"), ::OpenAPI::toJsonValue(m_price_per_download));
    }
    return obj;
}

OAIAllotment OAISubscription::getAllotment() const {
    return m_allotment;
}
void OAISubscription::setAllotment(const OAIAllotment &allotment) {
    m_allotment = allotment;
    m_allotment_isSet = true;
}

bool OAISubscription::is_allotment_Set() const{
    return m_allotment_isSet;
}

bool OAISubscription::is_allotment_Valid() const{
    return m_allotment_isValid;
}

QString OAISubscription::getAssetType() const {
    return m_asset_type;
}
void OAISubscription::setAssetType(const QString &asset_type) {
    m_asset_type = asset_type;
    m_asset_type_isSet = true;
}

bool OAISubscription::is_asset_type_Set() const{
    return m_asset_type_isSet;
}

bool OAISubscription::is_asset_type_Valid() const{
    return m_asset_type_isValid;
}

QString OAISubscription::getDescription() const {
    return m_description;
}
void OAISubscription::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISubscription::is_description_Set() const{
    return m_description_isSet;
}

bool OAISubscription::is_description_Valid() const{
    return m_description_isValid;
}

QDateTime OAISubscription::getExpirationTime() const {
    return m_expiration_time;
}
void OAISubscription::setExpirationTime(const QDateTime &expiration_time) {
    m_expiration_time = expiration_time;
    m_expiration_time_isSet = true;
}

bool OAISubscription::is_expiration_time_Set() const{
    return m_expiration_time_isSet;
}

bool OAISubscription::is_expiration_time_Valid() const{
    return m_expiration_time_isValid;
}

QList<OAILicenseFormat> OAISubscription::getFormats() const {
    return m_formats;
}
void OAISubscription::setFormats(const QList<OAILicenseFormat> &formats) {
    m_formats = formats;
    m_formats_isSet = true;
}

bool OAISubscription::is_formats_Set() const{
    return m_formats_isSet;
}

bool OAISubscription::is_formats_Valid() const{
    return m_formats_isValid;
}

QString OAISubscription::getId() const {
    return m_id;
}
void OAISubscription::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISubscription::is_id_Set() const{
    return m_id_isSet;
}

bool OAISubscription::is_id_Valid() const{
    return m_id_isValid;
}

QString OAISubscription::getLicense() const {
    return m_license;
}
void OAISubscription::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAISubscription::is_license_Set() const{
    return m_license_isSet;
}

bool OAISubscription::is_license_Valid() const{
    return m_license_isValid;
}

OAIObject OAISubscription::getMetadata() const {
    return m_metadata;
}
void OAISubscription::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAISubscription::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAISubscription::is_metadata_Valid() const{
    return m_metadata_isValid;
}

OAIPrice OAISubscription::getPricePerDownload() const {
    return m_price_per_download;
}
void OAISubscription::setPricePerDownload(const OAIPrice &price_per_download) {
    m_price_per_download = price_per_download;
    m_price_per_download_isSet = true;
}

bool OAISubscription::is_price_per_download_Set() const{
    return m_price_per_download_isSet;
}

bool OAISubscription::is_price_per_download_Valid() const{
    return m_price_per_download_isValid;
}

bool OAISubscription::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allotment.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_asset_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expiration_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_formats.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_per_download.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISubscription::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
