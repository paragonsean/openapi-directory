/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorialVideoContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditorialVideoContent::OAIEditorialVideoContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditorialVideoContent::OAIEditorialVideoContent() {
    this->initializeModel();
}

OAIEditorialVideoContent::~OAIEditorialVideoContent() {}

void OAIEditorialVideoContent::initializeModel() {

    m_aspect_isSet = false;
    m_aspect_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_byline_isSet = false;
    m_byline_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_date_taken_isSet = false;
    m_date_taken_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;
}

void OAIEditorialVideoContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditorialVideoContent::fromJsonObject(QJsonObject json) {

    m_aspect_isValid = ::OpenAPI::fromJsonValue(m_aspect, json[QString("aspect")]);
    m_aspect_isSet = !json[QString("aspect")].isNull() && m_aspect_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_byline_isValid = ::OpenAPI::fromJsonValue(m_byline, json[QString("byline")]);
    m_byline_isSet = !json[QString("byline")].isNull() && m_byline_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_date_taken_isValid = ::OpenAPI::fromJsonValue(m_date_taken, json[QString("date_taken")]);
    m_date_taken_isSet = !json[QString("date_taken")].isNull() && m_date_taken_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;
}

QString OAIEditorialVideoContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditorialVideoContent::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_isSet) {
        obj.insert(QString("aspect"), ::OpenAPI::toJsonValue(m_aspect));
    }
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_byline_isSet) {
        obj.insert(QString("byline"), ::OpenAPI::toJsonValue(m_byline));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_date_taken_isSet) {
        obj.insert(QString("date_taken"), ::OpenAPI::toJsonValue(m_date_taken));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    return obj;
}

double OAIEditorialVideoContent::getAspect() const {
    return m_aspect;
}
void OAIEditorialVideoContent::setAspect(const double &aspect) {
    m_aspect = aspect;
    m_aspect_isSet = true;
}

bool OAIEditorialVideoContent::is_aspect_Set() const{
    return m_aspect_isSet;
}

bool OAIEditorialVideoContent::is_aspect_Valid() const{
    return m_aspect_isValid;
}

OAIEditorialVideoAssets OAIEditorialVideoContent::getAssets() const {
    return m_assets;
}
void OAIEditorialVideoContent::setAssets(const OAIEditorialVideoAssets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIEditorialVideoContent::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIEditorialVideoContent::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIEditorialVideoContent::getByline() const {
    return m_byline;
}
void OAIEditorialVideoContent::setByline(const QString &byline) {
    m_byline = byline;
    m_byline_isSet = true;
}

bool OAIEditorialVideoContent::is_byline_Set() const{
    return m_byline_isSet;
}

bool OAIEditorialVideoContent::is_byline_Valid() const{
    return m_byline_isValid;
}

QString OAIEditorialVideoContent::getCaption() const {
    return m_caption;
}
void OAIEditorialVideoContent::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIEditorialVideoContent::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIEditorialVideoContent::is_caption_Valid() const{
    return m_caption_isValid;
}

QList<OAIEditorialCategory> OAIEditorialVideoContent::getCategories() const {
    return m_categories;
}
void OAIEditorialVideoContent::setCategories(const QList<OAIEditorialCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIEditorialVideoContent::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIEditorialVideoContent::is_categories_Valid() const{
    return m_categories_isValid;
}

QDate OAIEditorialVideoContent::getDateTaken() const {
    return m_date_taken;
}
void OAIEditorialVideoContent::setDateTaken(const QDate &date_taken) {
    m_date_taken = date_taken;
    m_date_taken_isSet = true;
}

bool OAIEditorialVideoContent::is_date_taken_Set() const{
    return m_date_taken_isSet;
}

bool OAIEditorialVideoContent::is_date_taken_Valid() const{
    return m_date_taken_isValid;
}

QString OAIEditorialVideoContent::getDescription() const {
    return m_description;
}
void OAIEditorialVideoContent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEditorialVideoContent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEditorialVideoContent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEditorialVideoContent::getId() const {
    return m_id;
}
void OAIEditorialVideoContent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEditorialVideoContent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEditorialVideoContent::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIEditorialVideoContent::getKeywords() const {
    return m_keywords;
}
void OAIEditorialVideoContent::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIEditorialVideoContent::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIEditorialVideoContent::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIEditorialVideoContent::getTitle() const {
    return m_title;
}
void OAIEditorialVideoContent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEditorialVideoContent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEditorialVideoContent::is_title_Valid() const{
    return m_title_isValid;
}

bool OAIEditorialVideoContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_byline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditorialVideoContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
