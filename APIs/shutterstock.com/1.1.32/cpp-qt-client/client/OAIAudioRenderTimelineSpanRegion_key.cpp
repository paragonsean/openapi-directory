/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioRenderTimelineSpanRegion_key.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioRenderTimelineSpanRegion_key::OAIAudioRenderTimelineSpanRegion_key(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioRenderTimelineSpanRegion_key::OAIAudioRenderTimelineSpanRegion_key() {
    this->initializeModel();
}

OAIAudioRenderTimelineSpanRegion_key::~OAIAudioRenderTimelineSpanRegion_key() {}

void OAIAudioRenderTimelineSpanRegion_key::initializeModel() {

    m_tonic_accidental_isSet = false;
    m_tonic_accidental_isValid = false;

    m_tonic_note_isSet = false;
    m_tonic_note_isValid = false;

    m_tonic_quality_isSet = false;
    m_tonic_quality_isValid = false;
}

void OAIAudioRenderTimelineSpanRegion_key::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioRenderTimelineSpanRegion_key::fromJsonObject(QJsonObject json) {

    m_tonic_accidental_isValid = ::OpenAPI::fromJsonValue(m_tonic_accidental, json[QString("tonic_accidental")]);
    m_tonic_accidental_isSet = !json[QString("tonic_accidental")].isNull() && m_tonic_accidental_isValid;

    m_tonic_note_isValid = ::OpenAPI::fromJsonValue(m_tonic_note, json[QString("tonic_note")]);
    m_tonic_note_isSet = !json[QString("tonic_note")].isNull() && m_tonic_note_isValid;

    m_tonic_quality_isValid = ::OpenAPI::fromJsonValue(m_tonic_quality, json[QString("tonic_quality")]);
    m_tonic_quality_isSet = !json[QString("tonic_quality")].isNull() && m_tonic_quality_isValid;
}

QString OAIAudioRenderTimelineSpanRegion_key::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioRenderTimelineSpanRegion_key::asJsonObject() const {
    QJsonObject obj;
    if (m_tonic_accidental_isSet) {
        obj.insert(QString("tonic_accidental"), ::OpenAPI::toJsonValue(m_tonic_accidental));
    }
    if (m_tonic_note_isSet) {
        obj.insert(QString("tonic_note"), ::OpenAPI::toJsonValue(m_tonic_note));
    }
    if (m_tonic_quality_isSet) {
        obj.insert(QString("tonic_quality"), ::OpenAPI::toJsonValue(m_tonic_quality));
    }
    return obj;
}

QString OAIAudioRenderTimelineSpanRegion_key::getTonicAccidental() const {
    return m_tonic_accidental;
}
void OAIAudioRenderTimelineSpanRegion_key::setTonicAccidental(const QString &tonic_accidental) {
    m_tonic_accidental = tonic_accidental;
    m_tonic_accidental_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion_key::is_tonic_accidental_Set() const{
    return m_tonic_accidental_isSet;
}

bool OAIAudioRenderTimelineSpanRegion_key::is_tonic_accidental_Valid() const{
    return m_tonic_accidental_isValid;
}

QString OAIAudioRenderTimelineSpanRegion_key::getTonicNote() const {
    return m_tonic_note;
}
void OAIAudioRenderTimelineSpanRegion_key::setTonicNote(const QString &tonic_note) {
    m_tonic_note = tonic_note;
    m_tonic_note_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion_key::is_tonic_note_Set() const{
    return m_tonic_note_isSet;
}

bool OAIAudioRenderTimelineSpanRegion_key::is_tonic_note_Valid() const{
    return m_tonic_note_isValid;
}

QString OAIAudioRenderTimelineSpanRegion_key::getTonicQuality() const {
    return m_tonic_quality;
}
void OAIAudioRenderTimelineSpanRegion_key::setTonicQuality(const QString &tonic_quality) {
    m_tonic_quality = tonic_quality;
    m_tonic_quality_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion_key::is_tonic_quality_Set() const{
    return m_tonic_quality_isSet;
}

bool OAIAudioRenderTimelineSpanRegion_key::is_tonic_quality_Valid() const{
    return m_tonic_quality_isValid;
}

bool OAIAudioRenderTimelineSpanRegion_key::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_tonic_accidental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tonic_note_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_tonic_quality_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioRenderTimelineSpanRegion_key::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
