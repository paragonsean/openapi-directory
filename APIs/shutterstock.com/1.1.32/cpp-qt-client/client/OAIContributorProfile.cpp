/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIContributorProfile.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIContributorProfile::OAIContributorProfile(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIContributorProfile::OAIContributorProfile() {
    this->initializeModel();
}

OAIContributorProfile::~OAIContributorProfile() {}

void OAIContributorProfile::initializeModel() {

    m_about_isSet = false;
    m_about_isValid = false;

    m_contributor_type_isSet = false;
    m_contributor_type_isValid = false;

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_equipment_isSet = false;
    m_equipment_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_portfolio_url_isSet = false;
    m_portfolio_url_isValid = false;

    m_social_media_isSet = false;
    m_social_media_isValid = false;

    m_styles_isSet = false;
    m_styles_isValid = false;

    m_subjects_isSet = false;
    m_subjects_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIContributorProfile::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIContributorProfile::fromJsonObject(QJsonObject json) {

    m_about_isValid = ::OpenAPI::fromJsonValue(m_about, json[QString("about")]);
    m_about_isSet = !json[QString("about")].isNull() && m_about_isValid;

    m_contributor_type_isValid = ::OpenAPI::fromJsonValue(m_contributor_type, json[QString("contributor_type")]);
    m_contributor_type_isSet = !json[QString("contributor_type")].isNull() && m_contributor_type_isValid;

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_equipment_isValid = ::OpenAPI::fromJsonValue(m_equipment, json[QString("equipment")]);
    m_equipment_isSet = !json[QString("equipment")].isNull() && m_equipment_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_portfolio_url_isValid = ::OpenAPI::fromJsonValue(m_portfolio_url, json[QString("portfolio_url")]);
    m_portfolio_url_isSet = !json[QString("portfolio_url")].isNull() && m_portfolio_url_isValid;

    m_social_media_isValid = ::OpenAPI::fromJsonValue(m_social_media, json[QString("social_media")]);
    m_social_media_isSet = !json[QString("social_media")].isNull() && m_social_media_isValid;

    m_styles_isValid = ::OpenAPI::fromJsonValue(m_styles, json[QString("styles")]);
    m_styles_isSet = !json[QString("styles")].isNull() && m_styles_isValid;

    m_subjects_isValid = ::OpenAPI::fromJsonValue(m_subjects, json[QString("subjects")]);
    m_subjects_isSet = !json[QString("subjects")].isNull() && m_subjects_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIContributorProfile::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIContributorProfile::asJsonObject() const {
    QJsonObject obj;
    if (m_about_isSet) {
        obj.insert(QString("about"), ::OpenAPI::toJsonValue(m_about));
    }
    if (m_contributor_type.size() > 0) {
        obj.insert(QString("contributor_type"), ::OpenAPI::toJsonValue(m_contributor_type));
    }
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_equipment.size() > 0) {
        obj.insert(QString("equipment"), ::OpenAPI::toJsonValue(m_equipment));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_location_isSet) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_portfolio_url_isSet) {
        obj.insert(QString("portfolio_url"), ::OpenAPI::toJsonValue(m_portfolio_url));
    }
    if (m_social_media.isSet()) {
        obj.insert(QString("social_media"), ::OpenAPI::toJsonValue(m_social_media));
    }
    if (m_styles.size() > 0) {
        obj.insert(QString("styles"), ::OpenAPI::toJsonValue(m_styles));
    }
    if (m_subjects.size() > 0) {
        obj.insert(QString("subjects"), ::OpenAPI::toJsonValue(m_subjects));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

QString OAIContributorProfile::getAbout() const {
    return m_about;
}
void OAIContributorProfile::setAbout(const QString &about) {
    m_about = about;
    m_about_isSet = true;
}

bool OAIContributorProfile::is_about_Set() const{
    return m_about_isSet;
}

bool OAIContributorProfile::is_about_Valid() const{
    return m_about_isValid;
}

QList<QString> OAIContributorProfile::getContributorType() const {
    return m_contributor_type;
}
void OAIContributorProfile::setContributorType(const QList<QString> &contributor_type) {
    m_contributor_type = contributor_type;
    m_contributor_type_isSet = true;
}

bool OAIContributorProfile::is_contributor_type_Set() const{
    return m_contributor_type_isSet;
}

bool OAIContributorProfile::is_contributor_type_Valid() const{
    return m_contributor_type_isValid;
}

QString OAIContributorProfile::getDisplayName() const {
    return m_display_name;
}
void OAIContributorProfile::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIContributorProfile::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIContributorProfile::is_display_name_Valid() const{
    return m_display_name_isValid;
}

QList<QString> OAIContributorProfile::getEquipment() const {
    return m_equipment;
}
void OAIContributorProfile::setEquipment(const QList<QString> &equipment) {
    m_equipment = equipment;
    m_equipment_isSet = true;
}

bool OAIContributorProfile::is_equipment_Set() const{
    return m_equipment_isSet;
}

bool OAIContributorProfile::is_equipment_Valid() const{
    return m_equipment_isValid;
}

QString OAIContributorProfile::getId() const {
    return m_id;
}
void OAIContributorProfile::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIContributorProfile::is_id_Set() const{
    return m_id_isSet;
}

bool OAIContributorProfile::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIContributorProfile::getLocation() const {
    return m_location;
}
void OAIContributorProfile::setLocation(const QString &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIContributorProfile::is_location_Set() const{
    return m_location_isSet;
}

bool OAIContributorProfile::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIContributorProfile::getPortfolioUrl() const {
    return m_portfolio_url;
}
void OAIContributorProfile::setPortfolioUrl(const QString &portfolio_url) {
    m_portfolio_url = portfolio_url;
    m_portfolio_url_isSet = true;
}

bool OAIContributorProfile::is_portfolio_url_Set() const{
    return m_portfolio_url_isSet;
}

bool OAIContributorProfile::is_portfolio_url_Valid() const{
    return m_portfolio_url_isValid;
}

OAIContributorProfileSocialMedia OAIContributorProfile::getSocialMedia() const {
    return m_social_media;
}
void OAIContributorProfile::setSocialMedia(const OAIContributorProfileSocialMedia &social_media) {
    m_social_media = social_media;
    m_social_media_isSet = true;
}

bool OAIContributorProfile::is_social_media_Set() const{
    return m_social_media_isSet;
}

bool OAIContributorProfile::is_social_media_Valid() const{
    return m_social_media_isValid;
}

QList<QString> OAIContributorProfile::getStyles() const {
    return m_styles;
}
void OAIContributorProfile::setStyles(const QList<QString> &styles) {
    m_styles = styles;
    m_styles_isSet = true;
}

bool OAIContributorProfile::is_styles_Set() const{
    return m_styles_isSet;
}

bool OAIContributorProfile::is_styles_Valid() const{
    return m_styles_isValid;
}

QList<QString> OAIContributorProfile::getSubjects() const {
    return m_subjects;
}
void OAIContributorProfile::setSubjects(const QList<QString> &subjects) {
    m_subjects = subjects;
    m_subjects_isSet = true;
}

bool OAIContributorProfile::is_subjects_Set() const{
    return m_subjects_isSet;
}

bool OAIContributorProfile::is_subjects_Valid() const{
    return m_subjects_isValid;
}

QString OAIContributorProfile::getWebsite() const {
    return m_website;
}
void OAIContributorProfile::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIContributorProfile::is_website_Set() const{
    return m_website_isSet;
}

bool OAIContributorProfile::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIContributorProfile::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_about_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_equipment.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_location_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_portfolio_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_social_media.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_styles.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_subjects.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIContributorProfile::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
