/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAccessTokenDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAccessTokenDetails::OAIAccessTokenDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAccessTokenDetails::OAIAccessTokenDetails() {
    this->initializeModel();
}

OAIAccessTokenDetails::~OAIAccessTokenDetails() {}

void OAIAccessTokenDetails::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_contributor_id_isSet = false;
    m_contributor_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_expires_in_isSet = false;
    m_expires_in_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_scopes_isSet = false;
    m_scopes_isValid = false;

    m_user_id_isSet = false;
    m_user_id_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIAccessTokenDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAccessTokenDetails::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_contributor_id_isValid = ::OpenAPI::fromJsonValue(m_contributor_id, json[QString("contributor_id")]);
    m_contributor_id_isSet = !json[QString("contributor_id")].isNull() && m_contributor_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_expires_in_isValid = ::OpenAPI::fromJsonValue(m_expires_in, json[QString("expires_in")]);
    m_expires_in_isSet = !json[QString("expires_in")].isNull() && m_expires_in_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;

    m_scopes_isValid = ::OpenAPI::fromJsonValue(m_scopes, json[QString("scopes")]);
    m_scopes_isSet = !json[QString("scopes")].isNull() && m_scopes_isValid;

    m_user_id_isValid = ::OpenAPI::fromJsonValue(m_user_id, json[QString("user_id")]);
    m_user_id_isSet = !json[QString("user_id")].isNull() && m_user_id_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIAccessTokenDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAccessTokenDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_contributor_id_isSet) {
        obj.insert(QString("contributor_id"), ::OpenAPI::toJsonValue(m_contributor_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_expires_in_isSet) {
        obj.insert(QString("expires_in"), ::OpenAPI::toJsonValue(m_expires_in));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_realm_isSet) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_scopes.size() > 0) {
        obj.insert(QString("scopes"), ::OpenAPI::toJsonValue(m_scopes));
    }
    if (m_user_id_isSet) {
        obj.insert(QString("user_id"), ::OpenAPI::toJsonValue(m_user_id));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIAccessTokenDetails::getClientId() const {
    return m_client_id;
}
void OAIAccessTokenDetails::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAIAccessTokenDetails::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAIAccessTokenDetails::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAIAccessTokenDetails::getContributorId() const {
    return m_contributor_id;
}
void OAIAccessTokenDetails::setContributorId(const QString &contributor_id) {
    m_contributor_id = contributor_id;
    m_contributor_id_isSet = true;
}

bool OAIAccessTokenDetails::is_contributor_id_Set() const{
    return m_contributor_id_isSet;
}

bool OAIAccessTokenDetails::is_contributor_id_Valid() const{
    return m_contributor_id_isValid;
}

QString OAIAccessTokenDetails::getCustomerId() const {
    return m_customer_id;
}
void OAIAccessTokenDetails::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIAccessTokenDetails::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIAccessTokenDetails::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

qint32 OAIAccessTokenDetails::getExpiresIn() const {
    return m_expires_in;
}
void OAIAccessTokenDetails::setExpiresIn(const qint32 &expires_in) {
    m_expires_in = expires_in;
    m_expires_in_isSet = true;
}

bool OAIAccessTokenDetails::is_expires_in_Set() const{
    return m_expires_in_isSet;
}

bool OAIAccessTokenDetails::is_expires_in_Valid() const{
    return m_expires_in_isValid;
}

QString OAIAccessTokenDetails::getOrganizationId() const {
    return m_organization_id;
}
void OAIAccessTokenDetails::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIAccessTokenDetails::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIAccessTokenDetails::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QString OAIAccessTokenDetails::getRealm() const {
    return m_realm;
}
void OAIAccessTokenDetails::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAIAccessTokenDetails::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAIAccessTokenDetails::is_realm_Valid() const{
    return m_realm_isValid;
}

QList<QString> OAIAccessTokenDetails::getScopes() const {
    return m_scopes;
}
void OAIAccessTokenDetails::setScopes(const QList<QString> &scopes) {
    m_scopes = scopes;
    m_scopes_isSet = true;
}

bool OAIAccessTokenDetails::is_scopes_Set() const{
    return m_scopes_isSet;
}

bool OAIAccessTokenDetails::is_scopes_Valid() const{
    return m_scopes_isValid;
}

QString OAIAccessTokenDetails::getUserId() const {
    return m_user_id;
}
void OAIAccessTokenDetails::setUserId(const QString &user_id) {
    m_user_id = user_id;
    m_user_id_isSet = true;
}

bool OAIAccessTokenDetails::is_user_id_Set() const{
    return m_user_id_isSet;
}

bool OAIAccessTokenDetails::is_user_id_Valid() const{
    return m_user_id_isValid;
}

QString OAIAccessTokenDetails::getUsername() const {
    return m_username;
}
void OAIAccessTokenDetails::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIAccessTokenDetails::is_username_Set() const{
    return m_username_isSet;
}

bool OAIAccessTokenDetails::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIAccessTokenDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_in_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_scopes.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_user_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAccessTokenDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
