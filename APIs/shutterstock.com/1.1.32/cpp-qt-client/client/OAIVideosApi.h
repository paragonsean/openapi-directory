/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIVideosApi_H
#define OAI_OAIVideosApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICategoryDataList.h"
#include "OAICollection.h"
#include "OAICollectionCreateRequest.h"
#include "OAICollectionCreateResponse.h"
#include "OAICollectionDataList.h"
#include "OAICollectionItemDataList.h"
#include "OAICollectionItemRequest.h"
#include "OAICollectionUpdateRequest.h"
#include "OAIDownloadHistoryDataList.h"
#include "OAIFeaturedCollection.h"
#include "OAIFeaturedCollectionDataList.h"
#include "OAILanguage.h"
#include "OAILicenseVideoRequest.h"
#include "OAILicenseVideoResultDataList.h"
#include "OAIRedownloadVideo.h"
#include "OAISuggestions.h"
#include "OAIUpdatedMediaDataList.h"
#include "OAIUrl.h"
#include "OAIVideo.h"
#include "OAIVideoCollectionItemDataList.h"
#include "OAIVideoDataList.h"
#include "OAIVideoSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIVideosApi : public QObject {
    Q_OBJECT

public:
    OAIVideosApi(const int timeOut = 0);
    ~OAIVideosApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_collection_item_request OAICollectionItemRequest [required]
    */
    virtual void addVideoCollectionItems(const QString &id, const OAICollectionItemRequest &oai_collection_item_request);

    /**
    * @param[in]  oai_collection_create_request OAICollectionCreateRequest [required]
    */
    virtual void createVideoCollection(const OAICollectionCreateRequest &oai_collection_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteVideoCollection(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  item_id QList<QString> [optional]
    */
    virtual void deleteVideoCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &item_id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_redownload_video OAIRedownloadVideo [required]
    */
    virtual void downloadVideos(const QString &id, const OAIRedownloadVideo &oai_redownload_video);

    /**
    * @param[in]  id QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  view QString [optional]
    */
    virtual void findSimilarVideos(const QString &id, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  embed QString [optional]
    */
    virtual void getFeaturedVideoCollection(const QString &id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getFeaturedVideoCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  embed QString [optional]
    */
    virtual void getFeaturedVideoCollectionList(const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUpdatedVideos(const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  view QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getVideo(const QString &id, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  embed QList<QString> [optional]
    * @param[in]  share_code QString [optional]
    */
    virtual void getVideoCollection(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &embed = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &share_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  share_code QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getVideoCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &share_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  embed QList<QString> [optional]
    */
    virtual void getVideoCollectionList(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &embed = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  video_id QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  download_availability QString [optional]
    * @param[in]  team_history bool [optional]
    */
    virtual void getVideoLicenseList(const ::OpenAPI::OptionalParam<QString> &video_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_availability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &team_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QList<QString> [required]
    * @param[in]  view QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getVideoList(const QList<QString> &id, const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getVideoSuggestions(const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_license_video_request OAILicenseVideoRequest [required]
    * @param[in]  subscription_id QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void licenseVideos(const OAILicenseVideoRequest &oai_license_video_request, const ::OpenAPI::OptionalParam<QString> &subscription_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language OAILanguage [optional]
    */
    virtual void listVideoCategories(const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_collection_update_request OAICollectionUpdateRequest [required]
    */
    virtual void renameVideoCollection(const QString &id, const OAICollectionUpdateRequest &oai_collection_update_request);

    /**
    * @param[in]  added_date QDate [optional]
    * @param[in]  added_date_start QDate [optional]
    * @param[in]  added_date_end QDate [optional]
    * @param[in]  aspect_ratio QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  contributor QList<QString> [optional]
    * @param[in]  contributor_country QList<QString> [optional]
    * @param[in]  duration qint32 [optional]
    * @param[in]  duration_from qint32 [optional]
    * @param[in]  duration_to qint32 [optional]
    * @param[in]  fps double [optional]
    * @param[in]  fps_from double [optional]
    * @param[in]  fps_to double [optional]
    * @param[in]  keyword_safe_search bool [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  license QList<QString> [optional]
    * @param[in]  model QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  people_age QString [optional]
    * @param[in]  people_ethnicity QList<QString> [optional]
    * @param[in]  people_gender QString [optional]
    * @param[in]  people_number qint32 [optional]
    * @param[in]  people_model_released bool [optional]
    * @param[in]  query QString [optional]
    * @param[in]  resolution QString [optional]
    * @param[in]  safe bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void searchVideos(const ::OpenAPI::OptionalParam<QDate> &added_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &added_date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &added_date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &aspect_ratio = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor_country = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &duration = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &duration_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<double> &fps = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &fps_from = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &fps_to = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &keyword_safe_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QList<QString>> &license = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &model = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &people_age = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &people_ethnicity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &people_gender = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &people_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &people_model_released = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addVideoCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void createVideoCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteVideoCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteVideoCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void downloadVideosCallback(OAIHttpRequestWorker *worker);
    void findSimilarVideosCallback(OAIHttpRequestWorker *worker);
    void getFeaturedVideoCollectionCallback(OAIHttpRequestWorker *worker);
    void getFeaturedVideoCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void getFeaturedVideoCollectionListCallback(OAIHttpRequestWorker *worker);
    void getUpdatedVideosCallback(OAIHttpRequestWorker *worker);
    void getVideoCallback(OAIHttpRequestWorker *worker);
    void getVideoCollectionCallback(OAIHttpRequestWorker *worker);
    void getVideoCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void getVideoCollectionListCallback(OAIHttpRequestWorker *worker);
    void getVideoLicenseListCallback(OAIHttpRequestWorker *worker);
    void getVideoListCallback(OAIHttpRequestWorker *worker);
    void getVideoSuggestionsCallback(OAIHttpRequestWorker *worker);
    void licenseVideosCallback(OAIHttpRequestWorker *worker);
    void listVideoCategoriesCallback(OAIHttpRequestWorker *worker);
    void renameVideoCollectionCallback(OAIHttpRequestWorker *worker);
    void searchVideosCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addVideoCollectionItemsSignal();
    void createVideoCollectionSignal(OAICollectionCreateResponse summary);
    void deleteVideoCollectionSignal();
    void deleteVideoCollectionItemsSignal();
    void downloadVideosSignal(OAIUrl summary);
    void findSimilarVideosSignal(OAIVideoSearchResults summary);
    void getFeaturedVideoCollectionSignal(OAIFeaturedCollection summary);
    void getFeaturedVideoCollectionItemsSignal(OAIVideoCollectionItemDataList summary);
    void getFeaturedVideoCollectionListSignal(OAIFeaturedCollectionDataList summary);
    void getUpdatedVideosSignal(OAIUpdatedMediaDataList summary);
    void getVideoSignal(OAIVideo summary);
    void getVideoCollectionSignal(OAICollection summary);
    void getVideoCollectionItemsSignal(OAICollectionItemDataList summary);
    void getVideoCollectionListSignal(OAICollectionDataList summary);
    void getVideoLicenseListSignal(OAIDownloadHistoryDataList summary);
    void getVideoListSignal(OAIVideoDataList summary);
    void getVideoSuggestionsSignal(OAISuggestions summary);
    void licenseVideosSignal(OAILicenseVideoResultDataList summary);
    void listVideoCategoriesSignal(OAICategoryDataList summary);
    void renameVideoCollectionSignal();
    void searchVideosSignal(OAIVideoSearchResults summary);


    void addVideoCollectionItemsSignalFull(OAIHttpRequestWorker *worker);
    void createVideoCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollectionCreateResponse summary);
    void deleteVideoCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deleteVideoCollectionItemsSignalFull(OAIHttpRequestWorker *worker);
    void downloadVideosSignalFull(OAIHttpRequestWorker *worker, OAIUrl summary);
    void findSimilarVideosSignalFull(OAIHttpRequestWorker *worker, OAIVideoSearchResults summary);
    void getFeaturedVideoCollectionSignalFull(OAIHttpRequestWorker *worker, OAIFeaturedCollection summary);
    void getFeaturedVideoCollectionItemsSignalFull(OAIHttpRequestWorker *worker, OAIVideoCollectionItemDataList summary);
    void getFeaturedVideoCollectionListSignalFull(OAIHttpRequestWorker *worker, OAIFeaturedCollectionDataList summary);
    void getUpdatedVideosSignalFull(OAIHttpRequestWorker *worker, OAIUpdatedMediaDataList summary);
    void getVideoSignalFull(OAIHttpRequestWorker *worker, OAIVideo summary);
    void getVideoCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void getVideoCollectionItemsSignalFull(OAIHttpRequestWorker *worker, OAICollectionItemDataList summary);
    void getVideoCollectionListSignalFull(OAIHttpRequestWorker *worker, OAICollectionDataList summary);
    void getVideoLicenseListSignalFull(OAIHttpRequestWorker *worker, OAIDownloadHistoryDataList summary);
    void getVideoListSignalFull(OAIHttpRequestWorker *worker, OAIVideoDataList summary);
    void getVideoSuggestionsSignalFull(OAIHttpRequestWorker *worker, OAISuggestions summary);
    void licenseVideosSignalFull(OAIHttpRequestWorker *worker, OAILicenseVideoResultDataList summary);
    void listVideoCategoriesSignalFull(OAIHttpRequestWorker *worker, OAICategoryDataList summary);
    void renameVideoCollectionSignalFull(OAIHttpRequestWorker *worker);
    void searchVideosSignalFull(OAIHttpRequestWorker *worker, OAIVideoSearchResults summary);

    Q_DECL_DEPRECATED_X("Use addVideoCollectionItemsSignalError() instead")
    void addVideoCollectionItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoCollectionItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVideoCollectionSignalError() instead")
    void createVideoCollectionSignalE(OAICollectionCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoCollectionSignalError(OAICollectionCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoCollectionSignalError() instead")
    void deleteVideoCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoCollectionItemsSignalError() instead")
    void deleteVideoCollectionItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoCollectionItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadVideosSignalError() instead")
    void downloadVideosSignalE(OAIUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadVideosSignalError(OAIUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSimilarVideosSignalError() instead")
    void findSimilarVideosSignalE(OAIVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void findSimilarVideosSignalError(OAIVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedVideoCollectionSignalError() instead")
    void getFeaturedVideoCollectionSignalE(OAIFeaturedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedVideoCollectionSignalError(OAIFeaturedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedVideoCollectionItemsSignalError() instead")
    void getFeaturedVideoCollectionItemsSignalE(OAIVideoCollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedVideoCollectionItemsSignalError(OAIVideoCollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedVideoCollectionListSignalError() instead")
    void getFeaturedVideoCollectionListSignalE(OAIFeaturedCollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedVideoCollectionListSignalError(OAIFeaturedCollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedVideosSignalError() instead")
    void getUpdatedVideosSignalE(OAIUpdatedMediaDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedVideosSignalError(OAIUpdatedMediaDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoSignalError() instead")
    void getVideoSignalE(OAIVideo summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoSignalError(OAIVideo summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCollectionSignalError() instead")
    void getVideoCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCollectionItemsSignalError() instead")
    void getVideoCollectionItemsSignalE(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCollectionItemsSignalError(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCollectionListSignalError() instead")
    void getVideoCollectionListSignalE(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCollectionListSignalError(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoLicenseListSignalError() instead")
    void getVideoLicenseListSignalE(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoLicenseListSignalError(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoListSignalError() instead")
    void getVideoListSignalE(OAIVideoDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoListSignalError(OAIVideoDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoSuggestionsSignalError() instead")
    void getVideoSuggestionsSignalE(OAISuggestions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoSuggestionsSignalError(OAISuggestions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseVideosSignalError() instead")
    void licenseVideosSignalE(OAILicenseVideoResultDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseVideosSignalError(OAILicenseVideoResultDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVideoCategoriesSignalError() instead")
    void listVideoCategoriesSignalE(OAICategoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listVideoCategoriesSignalError(OAICategoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameVideoCollectionSignalError() instead")
    void renameVideoCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameVideoCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVideosSignalError() instead")
    void searchVideosSignalE(OAIVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVideosSignalError(OAIVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addVideoCollectionItemsSignalErrorFull() instead")
    void addVideoCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addVideoCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createVideoCollectionSignalErrorFull() instead")
    void createVideoCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createVideoCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoCollectionSignalErrorFull() instead")
    void deleteVideoCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteVideoCollectionItemsSignalErrorFull() instead")
    void deleteVideoCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteVideoCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadVideosSignalErrorFull() instead")
    void downloadVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use findSimilarVideosSignalErrorFull() instead")
    void findSimilarVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void findSimilarVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedVideoCollectionSignalErrorFull() instead")
    void getFeaturedVideoCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedVideoCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedVideoCollectionItemsSignalErrorFull() instead")
    void getFeaturedVideoCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedVideoCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedVideoCollectionListSignalErrorFull() instead")
    void getFeaturedVideoCollectionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedVideoCollectionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedVideosSignalErrorFull() instead")
    void getUpdatedVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoSignalErrorFull() instead")
    void getVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCollectionSignalErrorFull() instead")
    void getVideoCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCollectionItemsSignalErrorFull() instead")
    void getVideoCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoCollectionListSignalErrorFull() instead")
    void getVideoCollectionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoCollectionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoLicenseListSignalErrorFull() instead")
    void getVideoLicenseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoLicenseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoListSignalErrorFull() instead")
    void getVideoListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getVideoSuggestionsSignalErrorFull() instead")
    void getVideoSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getVideoSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseVideosSignalErrorFull() instead")
    void licenseVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listVideoCategoriesSignalErrorFull() instead")
    void listVideoCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listVideoCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameVideoCollectionSignalErrorFull() instead")
    void renameVideoCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameVideoCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVideosSignalErrorFull() instead")
    void searchVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
