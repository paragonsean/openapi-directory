/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIEditorialVideoApi_H
#define OAI_OAIEditorialVideoApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIDownloadHistoryDataList.h"
#include "OAIEditorialVideoCategoryResults.h"
#include "OAIEditorialVideoContent.h"
#include "OAIEditorialVideoSearchResults.h"
#include "OAILicenseEditorialContentResults.h"
#include "OAILicenseEditorialVideoContentRequest.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIEditorialVideoApi : public QObject {
    Q_OBJECT

public:
    OAIEditorialVideoApi(const int timeOut = 0);
    ~OAIEditorialVideoApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  country QString [required]
    * @param[in]  search_id QString [optional]
    */
    virtual void getEditorialVideo(const QString &id, const QString &country, const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  video_id QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  download_availability QString [optional]
    * @param[in]  team_history bool [optional]
    */
    virtual void getEditorialVideoLicenseList(const ::OpenAPI::OptionalParam<QString> &video_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_availability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &team_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  oai_license_editorial_video_content_request OAILicenseEditorialVideoContentRequest [required]
    */
    virtual void licenseEditorialVideo(const OAILicenseEditorialVideoContentRequest &oai_license_editorial_video_content_request);


    virtual void listEditorialVideoCategories();

    /**
    * @param[in]  country QString [required]
    * @param[in]  query QString [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  category QString [optional]
    * @param[in]  supplier_code QList<QString> [optional]
    * @param[in]  date_start QDate [optional]
    * @param[in]  date_end QDate [optional]
    * @param[in]  resolution QString [optional]
    * @param[in]  fps double [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  cursor QString [optional]
    */
    virtual void searchEditorialVideos(const QString &country, const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &supplier_code = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &resolution = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<double> &fps = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &cursor = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getEditorialVideoCallback(OAIHttpRequestWorker *worker);
    void getEditorialVideoLicenseListCallback(OAIHttpRequestWorker *worker);
    void licenseEditorialVideoCallback(OAIHttpRequestWorker *worker);
    void listEditorialVideoCategoriesCallback(OAIHttpRequestWorker *worker);
    void searchEditorialVideosCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getEditorialVideoSignal(OAIEditorialVideoContent summary);
    void getEditorialVideoLicenseListSignal(OAIDownloadHistoryDataList summary);
    void licenseEditorialVideoSignal(OAILicenseEditorialContentResults summary);
    void listEditorialVideoCategoriesSignal(OAIEditorialVideoCategoryResults summary);
    void searchEditorialVideosSignal(OAIEditorialVideoSearchResults summary);


    void getEditorialVideoSignalFull(OAIHttpRequestWorker *worker, OAIEditorialVideoContent summary);
    void getEditorialVideoLicenseListSignalFull(OAIHttpRequestWorker *worker, OAIDownloadHistoryDataList summary);
    void licenseEditorialVideoSignalFull(OAIHttpRequestWorker *worker, OAILicenseEditorialContentResults summary);
    void listEditorialVideoCategoriesSignalFull(OAIHttpRequestWorker *worker, OAIEditorialVideoCategoryResults summary);
    void searchEditorialVideosSignalFull(OAIHttpRequestWorker *worker, OAIEditorialVideoSearchResults summary);

    Q_DECL_DEPRECATED_X("Use getEditorialVideoSignalError() instead")
    void getEditorialVideoSignalE(OAIEditorialVideoContent summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialVideoSignalError(OAIEditorialVideoContent summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialVideoLicenseListSignalError() instead")
    void getEditorialVideoLicenseListSignalE(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialVideoLicenseListSignalError(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseEditorialVideoSignalError() instead")
    void licenseEditorialVideoSignalE(OAILicenseEditorialContentResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseEditorialVideoSignalError(OAILicenseEditorialContentResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEditorialVideoCategoriesSignalError() instead")
    void listEditorialVideoCategoriesSignalE(OAIEditorialVideoCategoryResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listEditorialVideoCategoriesSignalError(OAIEditorialVideoCategoryResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEditorialVideosSignalError() instead")
    void searchEditorialVideosSignalE(OAIEditorialVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEditorialVideosSignalError(OAIEditorialVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getEditorialVideoSignalErrorFull() instead")
    void getEditorialVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getEditorialVideoLicenseListSignalErrorFull() instead")
    void getEditorialVideoLicenseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getEditorialVideoLicenseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseEditorialVideoSignalErrorFull() instead")
    void licenseEditorialVideoSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseEditorialVideoSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listEditorialVideoCategoriesSignalErrorFull() instead")
    void listEditorialVideoCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listEditorialVideoCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchEditorialVideosSignalErrorFull() instead")
    void searchEditorialVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchEditorialVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
