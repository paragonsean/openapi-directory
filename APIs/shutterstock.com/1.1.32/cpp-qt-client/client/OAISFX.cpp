/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISFX.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISFX::OAISFX(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISFX::OAISFX() {
    this->initializeModel();
}

OAISFX::~OAISFX() {}

void OAISFX::initializeModel() {

    m_added_date_isSet = false;
    m_added_date_isValid = false;

    m_affiliate_url_isSet = false;
    m_affiliate_url_isValid = false;

    m_artist_isSet = false;
    m_artist_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_contributor_isSet = false;
    m_contributor_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_releases_isSet = false;
    m_releases_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAISFX::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISFX::fromJsonObject(QJsonObject json) {

    m_added_date_isValid = ::OpenAPI::fromJsonValue(m_added_date, json[QString("added_date")]);
    m_added_date_isSet = !json[QString("added_date")].isNull() && m_added_date_isValid;

    m_affiliate_url_isValid = ::OpenAPI::fromJsonValue(m_affiliate_url, json[QString("affiliate_url")]);
    m_affiliate_url_isSet = !json[QString("affiliate_url")].isNull() && m_affiliate_url_isValid;

    m_artist_isValid = ::OpenAPI::fromJsonValue(m_artist, json[QString("artist")]);
    m_artist_isSet = !json[QString("artist")].isNull() && m_artist_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_contributor_isValid = ::OpenAPI::fromJsonValue(m_contributor, json[QString("contributor")]);
    m_contributor_isSet = !json[QString("contributor")].isNull() && m_contributor_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_releases_isValid = ::OpenAPI::fromJsonValue(m_releases, json[QString("releases")]);
    m_releases_isSet = !json[QString("releases")].isNull() && m_releases_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAISFX::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISFX::asJsonObject() const {
    QJsonObject obj;
    if (m_added_date_isSet) {
        obj.insert(QString("added_date"), ::OpenAPI::toJsonValue(m_added_date));
    }
    if (m_affiliate_url_isSet) {
        obj.insert(QString("affiliate_url"), ::OpenAPI::toJsonValue(m_affiliate_url));
    }
    if (m_artist_isSet) {
        obj.insert(QString("artist"), ::OpenAPI::toJsonValue(m_artist));
    }
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_contributor.isSet()) {
        obj.insert(QString("contributor"), ::OpenAPI::toJsonValue(m_contributor));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_releases.size() > 0) {
        obj.insert(QString("releases"), ::OpenAPI::toJsonValue(m_releases));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDate OAISFX::getAddedDate() const {
    return m_added_date;
}
void OAISFX::setAddedDate(const QDate &added_date) {
    m_added_date = added_date;
    m_added_date_isSet = true;
}

bool OAISFX::is_added_date_Set() const{
    return m_added_date_isSet;
}

bool OAISFX::is_added_date_Valid() const{
    return m_added_date_isValid;
}

QString OAISFX::getAffiliateUrl() const {
    return m_affiliate_url;
}
void OAISFX::setAffiliateUrl(const QString &affiliate_url) {
    m_affiliate_url = affiliate_url;
    m_affiliate_url_isSet = true;
}

bool OAISFX::is_affiliate_url_Set() const{
    return m_affiliate_url_isSet;
}

bool OAISFX::is_affiliate_url_Valid() const{
    return m_affiliate_url_isValid;
}

QString OAISFX::getArtist() const {
    return m_artist;
}
void OAISFX::setArtist(const QString &artist) {
    m_artist = artist;
    m_artist_isSet = true;
}

bool OAISFX::is_artist_Set() const{
    return m_artist_isSet;
}

bool OAISFX::is_artist_Valid() const{
    return m_artist_isValid;
}

OAISFXAssets OAISFX::getAssets() const {
    return m_assets;
}
void OAISFX::setAssets(const OAISFXAssets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAISFX::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAISFX::is_assets_Valid() const{
    return m_assets_isValid;
}

OAIContributor OAISFX::getContributor() const {
    return m_contributor;
}
void OAISFX::setContributor(const OAIContributor &contributor) {
    m_contributor = contributor;
    m_contributor_isSet = true;
}

bool OAISFX::is_contributor_Set() const{
    return m_contributor_isSet;
}

bool OAISFX::is_contributor_Valid() const{
    return m_contributor_isValid;
}

QString OAISFX::getDescription() const {
    return m_description;
}
void OAISFX::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAISFX::is_description_Set() const{
    return m_description_isSet;
}

bool OAISFX::is_description_Valid() const{
    return m_description_isValid;
}

double OAISFX::getDuration() const {
    return m_duration;
}
void OAISFX::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAISFX::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAISFX::is_duration_Valid() const{
    return m_duration_isValid;
}

QString OAISFX::getId() const {
    return m_id;
}
void OAISFX::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAISFX::is_id_Set() const{
    return m_id_isSet;
}

bool OAISFX::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAISFX::getKeywords() const {
    return m_keywords;
}
void OAISFX::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAISFX::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAISFX::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAISFX::getMediaType() const {
    return m_media_type;
}
void OAISFX::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAISFX::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAISFX::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QList<QString> OAISFX::getReleases() const {
    return m_releases;
}
void OAISFX::setReleases(const QList<QString> &releases) {
    m_releases = releases;
    m_releases_isSet = true;
}

bool OAISFX::is_releases_Set() const{
    return m_releases_isSet;
}

bool OAISFX::is_releases_Valid() const{
    return m_releases_isValid;
}

QString OAISFX::getTitle() const {
    return m_title;
}
void OAISFX::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAISFX::is_title_Set() const{
    return m_title_isSet;
}

bool OAISFX::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAISFX::getUpdatedTime() const {
    return m_updated_time;
}
void OAISFX::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAISFX::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAISFX::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAISFX::getUrl() const {
    return m_url;
}
void OAISFX::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAISFX::is_url_Set() const{
    return m_url_isSet;
}

bool OAISFX::is_url_Valid() const{
    return m_url_isValid;
}

bool OAISFX::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affiliate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_artist_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_releases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISFX::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contributor_isValid && m_id_isValid && m_media_type_isValid && true;
}

} // namespace OpenAPI
