/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioRenderTimelineSpanRegion.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioRenderTimelineSpanRegion::OAIAudioRenderTimelineSpanRegion(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioRenderTimelineSpanRegion::OAIAudioRenderTimelineSpanRegion() {
    this->initializeModel();
}

OAIAudioRenderTimelineSpanRegion::~OAIAudioRenderTimelineSpanRegion() {}

void OAIAudioRenderTimelineSpanRegion::initializeModel() {

    m_beat_isSet = false;
    m_beat_isValid = false;

    m_descriptor_isSet = false;
    m_descriptor_isValid = false;

    m_end_type_isSet = false;
    m_end_type_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_key_isSet = false;
    m_key_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;
}

void OAIAudioRenderTimelineSpanRegion::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioRenderTimelineSpanRegion::fromJsonObject(QJsonObject json) {

    m_beat_isValid = ::OpenAPI::fromJsonValue(m_beat, json[QString("beat")]);
    m_beat_isSet = !json[QString("beat")].isNull() && m_beat_isValid;

    m_descriptor_isValid = ::OpenAPI::fromJsonValue(m_descriptor, json[QString("descriptor")]);
    m_descriptor_isSet = !json[QString("descriptor")].isNull() && m_descriptor_isValid;

    m_end_type_isValid = ::OpenAPI::fromJsonValue(m_end_type, json[QString("end_type")]);
    m_end_type_isSet = !json[QString("end_type")].isNull() && m_end_type_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_key_isValid = ::OpenAPI::fromJsonValue(m_key, json[QString("key")]);
    m_key_isSet = !json[QString("key")].isNull() && m_key_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;
}

QString OAIAudioRenderTimelineSpanRegion::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioRenderTimelineSpanRegion::asJsonObject() const {
    QJsonObject obj;
    if (m_beat_isSet) {
        obj.insert(QString("beat"), ::OpenAPI::toJsonValue(m_beat));
    }
    if (m_descriptor_isSet) {
        obj.insert(QString("descriptor"), ::OpenAPI::toJsonValue(m_descriptor));
    }
    if (m_end_type.isSet()) {
        obj.insert(QString("end_type"), ::OpenAPI::toJsonValue(m_end_type));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_key.isSet()) {
        obj.insert(QString("key"), ::OpenAPI::toJsonValue(m_key));
    }
    if (m_region_isSet) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    return obj;
}

qint32 OAIAudioRenderTimelineSpanRegion::getBeat() const {
    return m_beat;
}
void OAIAudioRenderTimelineSpanRegion::setBeat(const qint32 &beat) {
    m_beat = beat;
    m_beat_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion::is_beat_Set() const{
    return m_beat_isSet;
}

bool OAIAudioRenderTimelineSpanRegion::is_beat_Valid() const{
    return m_beat_isValid;
}

QString OAIAudioRenderTimelineSpanRegion::getDescriptor() const {
    return m_descriptor;
}
void OAIAudioRenderTimelineSpanRegion::setDescriptor(const QString &descriptor) {
    m_descriptor = descriptor;
    m_descriptor_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion::is_descriptor_Set() const{
    return m_descriptor_isSet;
}

bool OAIAudioRenderTimelineSpanRegion::is_descriptor_Valid() const{
    return m_descriptor_isValid;
}

OAIAudioRenderTimelineSpanRegion_end_type OAIAudioRenderTimelineSpanRegion::getEndType() const {
    return m_end_type;
}
void OAIAudioRenderTimelineSpanRegion::setEndType(const OAIAudioRenderTimelineSpanRegion_end_type &end_type) {
    m_end_type = end_type;
    m_end_type_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion::is_end_type_Set() const{
    return m_end_type_isSet;
}

bool OAIAudioRenderTimelineSpanRegion::is_end_type_Valid() const{
    return m_end_type_isValid;
}

double OAIAudioRenderTimelineSpanRegion::getId() const {
    return m_id;
}
void OAIAudioRenderTimelineSpanRegion::setId(const double &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAudioRenderTimelineSpanRegion::is_id_Valid() const{
    return m_id_isValid;
}

OAIAudioRenderTimelineSpanRegion_key OAIAudioRenderTimelineSpanRegion::getKey() const {
    return m_key;
}
void OAIAudioRenderTimelineSpanRegion::setKey(const OAIAudioRenderTimelineSpanRegion_key &key) {
    m_key = key;
    m_key_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion::is_key_Set() const{
    return m_key_isSet;
}

bool OAIAudioRenderTimelineSpanRegion::is_key_Valid() const{
    return m_key_isValid;
}

QString OAIAudioRenderTimelineSpanRegion::getRegion() const {
    return m_region;
}
void OAIAudioRenderTimelineSpanRegion::setRegion(const QString &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion::is_region_Set() const{
    return m_region_isSet;
}

bool OAIAudioRenderTimelineSpanRegion::is_region_Valid() const{
    return m_region_isValid;
}

bool OAIAudioRenderTimelineSpanRegion::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_descriptor_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_end_type.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_key.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_region_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioRenderTimelineSpanRegion::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_beat_isValid && m_descriptor_isValid && m_id_isValid && m_region_isValid && true;
}

} // namespace OpenAPI
