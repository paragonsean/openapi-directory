/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIDescriptors.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIDescriptors::OAIDescriptors(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIDescriptors::OAIDescriptors() {
    this->initializeModel();
}

OAIDescriptors::~OAIDescriptors() {}

void OAIDescriptors::initializeModel() {

    m_average_render_speed_isSet = false;
    m_average_render_speed_isValid = false;

    m_bands_isSet = false;
    m_bands_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instruments_isSet = false;
    m_instruments_isValid = false;

    m_max_tempo_isSet = false;
    m_max_tempo_isValid = false;

    m_min_tempo_isSet = false;
    m_min_tempo_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_previews_isSet = false;
    m_previews_isValid = false;

    m_tags_isSet = false;
    m_tags_isValid = false;
}

void OAIDescriptors::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIDescriptors::fromJsonObject(QJsonObject json) {

    m_average_render_speed_isValid = ::OpenAPI::fromJsonValue(m_average_render_speed, json[QString("average_render_speed")]);
    m_average_render_speed_isSet = !json[QString("average_render_speed")].isNull() && m_average_render_speed_isValid;

    m_bands_isValid = ::OpenAPI::fromJsonValue(m_bands, json[QString("bands")]);
    m_bands_isSet = !json[QString("bands")].isNull() && m_bands_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instruments_isValid = ::OpenAPI::fromJsonValue(m_instruments, json[QString("instruments")]);
    m_instruments_isSet = !json[QString("instruments")].isNull() && m_instruments_isValid;

    m_max_tempo_isValid = ::OpenAPI::fromJsonValue(m_max_tempo, json[QString("max_tempo")]);
    m_max_tempo_isSet = !json[QString("max_tempo")].isNull() && m_max_tempo_isValid;

    m_min_tempo_isValid = ::OpenAPI::fromJsonValue(m_min_tempo, json[QString("min_tempo")]);
    m_min_tempo_isSet = !json[QString("min_tempo")].isNull() && m_min_tempo_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_previews_isValid = ::OpenAPI::fromJsonValue(m_previews, json[QString("previews")]);
    m_previews_isSet = !json[QString("previews")].isNull() && m_previews_isValid;

    m_tags_isValid = ::OpenAPI::fromJsonValue(m_tags, json[QString("tags")]);
    m_tags_isSet = !json[QString("tags")].isNull() && m_tags_isValid;
}

QString OAIDescriptors::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIDescriptors::asJsonObject() const {
    QJsonObject obj;
    if (m_average_render_speed_isSet) {
        obj.insert(QString("average_render_speed"), ::OpenAPI::toJsonValue(m_average_render_speed));
    }
    if (m_bands.size() > 0) {
        obj.insert(QString("bands"), ::OpenAPI::toJsonValue(m_bands));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instruments.size() > 0) {
        obj.insert(QString("instruments"), ::OpenAPI::toJsonValue(m_instruments));
    }
    if (m_max_tempo_isSet) {
        obj.insert(QString("max_tempo"), ::OpenAPI::toJsonValue(m_max_tempo));
    }
    if (m_min_tempo_isSet) {
        obj.insert(QString("min_tempo"), ::OpenAPI::toJsonValue(m_min_tempo));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_previews.size() > 0) {
        obj.insert(QString("previews"), ::OpenAPI::toJsonValue(m_previews));
    }
    if (m_tags.size() > 0) {
        obj.insert(QString("tags"), ::OpenAPI::toJsonValue(m_tags));
    }
    return obj;
}

double OAIDescriptors::getAverageRenderSpeed() const {
    return m_average_render_speed;
}
void OAIDescriptors::setAverageRenderSpeed(const double &average_render_speed) {
    m_average_render_speed = average_render_speed;
    m_average_render_speed_isSet = true;
}

bool OAIDescriptors::is_average_render_speed_Set() const{
    return m_average_render_speed_isSet;
}

bool OAIDescriptors::is_average_render_speed_Valid() const{
    return m_average_render_speed_isValid;
}

QList<OAIBands> OAIDescriptors::getBands() const {
    return m_bands;
}
void OAIDescriptors::setBands(const QList<OAIBands> &bands) {
    m_bands = bands;
    m_bands_isSet = true;
}

bool OAIDescriptors::is_bands_Set() const{
    return m_bands_isSet;
}

bool OAIDescriptors::is_bands_Valid() const{
    return m_bands_isValid;
}

QString OAIDescriptors::getId() const {
    return m_id;
}
void OAIDescriptors::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIDescriptors::is_id_Set() const{
    return m_id_isSet;
}

bool OAIDescriptors::is_id_Valid() const{
    return m_id_isValid;
}

QList<OAIInstruments> OAIDescriptors::getInstruments() const {
    return m_instruments;
}
void OAIDescriptors::setInstruments(const QList<OAIInstruments> &instruments) {
    m_instruments = instruments;
    m_instruments_isSet = true;
}

bool OAIDescriptors::is_instruments_Set() const{
    return m_instruments_isSet;
}

bool OAIDescriptors::is_instruments_Valid() const{
    return m_instruments_isValid;
}

double OAIDescriptors::getMaxTempo() const {
    return m_max_tempo;
}
void OAIDescriptors::setMaxTempo(const double &max_tempo) {
    m_max_tempo = max_tempo;
    m_max_tempo_isSet = true;
}

bool OAIDescriptors::is_max_tempo_Set() const{
    return m_max_tempo_isSet;
}

bool OAIDescriptors::is_max_tempo_Valid() const{
    return m_max_tempo_isValid;
}

double OAIDescriptors::getMinTempo() const {
    return m_min_tempo;
}
void OAIDescriptors::setMinTempo(const double &min_tempo) {
    m_min_tempo = min_tempo;
    m_min_tempo_isSet = true;
}

bool OAIDescriptors::is_min_tempo_Set() const{
    return m_min_tempo_isSet;
}

bool OAIDescriptors::is_min_tempo_Valid() const{
    return m_min_tempo_isValid;
}

QString OAIDescriptors::getName() const {
    return m_name;
}
void OAIDescriptors::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIDescriptors::is_name_Set() const{
    return m_name_isSet;
}

bool OAIDescriptors::is_name_Valid() const{
    return m_name_isValid;
}

QList<OAIPreview> OAIDescriptors::getPreviews() const {
    return m_previews;
}
void OAIDescriptors::setPreviews(const QList<OAIPreview> &previews) {
    m_previews = previews;
    m_previews_isSet = true;
}

bool OAIDescriptors::is_previews_Set() const{
    return m_previews_isSet;
}

bool OAIDescriptors::is_previews_Valid() const{
    return m_previews_isValid;
}

QList<QString> OAIDescriptors::getTags() const {
    return m_tags;
}
void OAIDescriptors::setTags(const QList<QString> &tags) {
    m_tags = tags;
    m_tags_isSet = true;
}

bool OAIDescriptors::is_tags_Set() const{
    return m_tags_isSet;
}

bool OAIDescriptors::is_tags_Valid() const{
    return m_tags_isValid;
}

bool OAIDescriptors::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_average_render_speed_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_bands.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_max_tempo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_tempo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_previews.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_tags.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIDescriptors::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
