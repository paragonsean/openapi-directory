/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIVideo.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIVideo::OAIVideo(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIVideo::OAIVideo() {
    this->initializeModel();
}

OAIVideo::~OAIVideo() {}

void OAIVideo::initializeModel() {

    m_added_date_isSet = false;
    m_added_date_isValid = false;

    m_affiliate_url_isSet = false;
    m_affiliate_url_isValid = false;

    m_aspect_isSet = false;
    m_aspect_isValid = false;

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_contributor_isSet = false;
    m_contributor_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_has_model_release_isSet = false;
    m_has_model_release_isValid = false;

    m_has_property_release_isSet = false;
    m_has_property_release_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_adult_isSet = false;
    m_is_adult_isValid = false;

    m_is_editorial_isSet = false;
    m_is_editorial_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_models_isSet = false;
    m_models_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;
}

void OAIVideo::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIVideo::fromJsonObject(QJsonObject json) {

    m_added_date_isValid = ::OpenAPI::fromJsonValue(m_added_date, json[QString("added_date")]);
    m_added_date_isSet = !json[QString("added_date")].isNull() && m_added_date_isValid;

    m_affiliate_url_isValid = ::OpenAPI::fromJsonValue(m_affiliate_url, json[QString("affiliate_url")]);
    m_affiliate_url_isSet = !json[QString("affiliate_url")].isNull() && m_affiliate_url_isValid;

    m_aspect_isValid = ::OpenAPI::fromJsonValue(m_aspect, json[QString("aspect")]);
    m_aspect_isSet = !json[QString("aspect")].isNull() && m_aspect_isValid;

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspect_ratio")]);
    m_aspect_ratio_isSet = !json[QString("aspect_ratio")].isNull() && m_aspect_ratio_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_contributor_isValid = ::OpenAPI::fromJsonValue(m_contributor, json[QString("contributor")]);
    m_contributor_isSet = !json[QString("contributor")].isNull() && m_contributor_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_has_model_release_isValid = ::OpenAPI::fromJsonValue(m_has_model_release, json[QString("has_model_release")]);
    m_has_model_release_isSet = !json[QString("has_model_release")].isNull() && m_has_model_release_isValid;

    m_has_property_release_isValid = ::OpenAPI::fromJsonValue(m_has_property_release, json[QString("has_property_release")]);
    m_has_property_release_isSet = !json[QString("has_property_release")].isNull() && m_has_property_release_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_adult_isValid = ::OpenAPI::fromJsonValue(m_is_adult, json[QString("is_adult")]);
    m_is_adult_isSet = !json[QString("is_adult")].isNull() && m_is_adult_isValid;

    m_is_editorial_isValid = ::OpenAPI::fromJsonValue(m_is_editorial, json[QString("is_editorial")]);
    m_is_editorial_isSet = !json[QString("is_editorial")].isNull() && m_is_editorial_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_models_isValid = ::OpenAPI::fromJsonValue(m_models, json[QString("models")]);
    m_models_isSet = !json[QString("models")].isNull() && m_models_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;
}

QString OAIVideo::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIVideo::asJsonObject() const {
    QJsonObject obj;
    if (m_added_date_isSet) {
        obj.insert(QString("added_date"), ::OpenAPI::toJsonValue(m_added_date));
    }
    if (m_affiliate_url_isSet) {
        obj.insert(QString("affiliate_url"), ::OpenAPI::toJsonValue(m_affiliate_url));
    }
    if (m_aspect_isSet) {
        obj.insert(QString("aspect"), ::OpenAPI::toJsonValue(m_aspect));
    }
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspect_ratio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_contributor.isSet()) {
        obj.insert(QString("contributor"), ::OpenAPI::toJsonValue(m_contributor));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_has_model_release_isSet) {
        obj.insert(QString("has_model_release"), ::OpenAPI::toJsonValue(m_has_model_release));
    }
    if (m_has_property_release_isSet) {
        obj.insert(QString("has_property_release"), ::OpenAPI::toJsonValue(m_has_property_release));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_adult_isSet) {
        obj.insert(QString("is_adult"), ::OpenAPI::toJsonValue(m_is_adult));
    }
    if (m_is_editorial_isSet) {
        obj.insert(QString("is_editorial"), ::OpenAPI::toJsonValue(m_is_editorial));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_models.size() > 0) {
        obj.insert(QString("models"), ::OpenAPI::toJsonValue(m_models));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    return obj;
}

QDate OAIVideo::getAddedDate() const {
    return m_added_date;
}
void OAIVideo::setAddedDate(const QDate &added_date) {
    m_added_date = added_date;
    m_added_date_isSet = true;
}

bool OAIVideo::is_added_date_Set() const{
    return m_added_date_isSet;
}

bool OAIVideo::is_added_date_Valid() const{
    return m_added_date_isValid;
}

QString OAIVideo::getAffiliateUrl() const {
    return m_affiliate_url;
}
void OAIVideo::setAffiliateUrl(const QString &affiliate_url) {
    m_affiliate_url = affiliate_url;
    m_affiliate_url_isSet = true;
}

bool OAIVideo::is_affiliate_url_Set() const{
    return m_affiliate_url_isSet;
}

bool OAIVideo::is_affiliate_url_Valid() const{
    return m_affiliate_url_isValid;
}

double OAIVideo::getAspect() const {
    return m_aspect;
}
void OAIVideo::setAspect(const double &aspect) {
    m_aspect = aspect;
    m_aspect_isSet = true;
}

bool OAIVideo::is_aspect_Set() const{
    return m_aspect_isSet;
}

bool OAIVideo::is_aspect_Valid() const{
    return m_aspect_isValid;
}

QString OAIVideo::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAIVideo::setAspectRatio(const QString &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAIVideo::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAIVideo::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

OAIVideoAssets OAIVideo::getAssets() const {
    return m_assets;
}
void OAIVideo::setAssets(const OAIVideoAssets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIVideo::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIVideo::is_assets_Valid() const{
    return m_assets_isValid;
}

QList<OAICategory> OAIVideo::getCategories() const {
    return m_categories;
}
void OAIVideo::setCategories(const QList<OAICategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIVideo::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIVideo::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIContributor OAIVideo::getContributor() const {
    return m_contributor;
}
void OAIVideo::setContributor(const OAIContributor &contributor) {
    m_contributor = contributor;
    m_contributor_isSet = true;
}

bool OAIVideo::is_contributor_Set() const{
    return m_contributor_isSet;
}

bool OAIVideo::is_contributor_Valid() const{
    return m_contributor_isValid;
}

QString OAIVideo::getDescription() const {
    return m_description;
}
void OAIVideo::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIVideo::is_description_Set() const{
    return m_description_isSet;
}

bool OAIVideo::is_description_Valid() const{
    return m_description_isValid;
}

double OAIVideo::getDuration() const {
    return m_duration;
}
void OAIVideo::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIVideo::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIVideo::is_duration_Valid() const{
    return m_duration_isValid;
}

bool OAIVideo::isHasModelRelease() const {
    return m_has_model_release;
}
void OAIVideo::setHasModelRelease(const bool &has_model_release) {
    m_has_model_release = has_model_release;
    m_has_model_release_isSet = true;
}

bool OAIVideo::is_has_model_release_Set() const{
    return m_has_model_release_isSet;
}

bool OAIVideo::is_has_model_release_Valid() const{
    return m_has_model_release_isValid;
}

bool OAIVideo::isHasPropertyRelease() const {
    return m_has_property_release;
}
void OAIVideo::setHasPropertyRelease(const bool &has_property_release) {
    m_has_property_release = has_property_release;
    m_has_property_release_isSet = true;
}

bool OAIVideo::is_has_property_release_Set() const{
    return m_has_property_release_isSet;
}

bool OAIVideo::is_has_property_release_Valid() const{
    return m_has_property_release_isValid;
}

QString OAIVideo::getId() const {
    return m_id;
}
void OAIVideo::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIVideo::is_id_Set() const{
    return m_id_isSet;
}

bool OAIVideo::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIVideo::isIsAdult() const {
    return m_is_adult;
}
void OAIVideo::setIsAdult(const bool &is_adult) {
    m_is_adult = is_adult;
    m_is_adult_isSet = true;
}

bool OAIVideo::is_is_adult_Set() const{
    return m_is_adult_isSet;
}

bool OAIVideo::is_is_adult_Valid() const{
    return m_is_adult_isValid;
}

bool OAIVideo::isIsEditorial() const {
    return m_is_editorial;
}
void OAIVideo::setIsEditorial(const bool &is_editorial) {
    m_is_editorial = is_editorial;
    m_is_editorial_isSet = true;
}

bool OAIVideo::is_is_editorial_Set() const{
    return m_is_editorial_isSet;
}

bool OAIVideo::is_is_editorial_Valid() const{
    return m_is_editorial_isValid;
}

QList<QString> OAIVideo::getKeywords() const {
    return m_keywords;
}
void OAIVideo::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIVideo::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIVideo::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIVideo::getMediaType() const {
    return m_media_type;
}
void OAIVideo::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIVideo::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIVideo::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QList<OAIModel> OAIVideo::getModels() const {
    return m_models;
}
void OAIVideo::setModels(const QList<OAIModel> &models) {
    m_models = models;
    m_models_isSet = true;
}

bool OAIVideo::is_models_Set() const{
    return m_models_isSet;
}

bool OAIVideo::is_models_Valid() const{
    return m_models_isValid;
}

QString OAIVideo::getUrl() const {
    return m_url;
}
void OAIVideo::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIVideo::is_url_Set() const{
    return m_url_isSet;
}

bool OAIVideo::is_url_Valid() const{
    return m_url_isValid;
}

bool OAIVideo::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affiliate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_model_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_has_property_release_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_adult_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_editorial_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_models.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIVideo::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contributor_isValid && m_id_isValid && m_media_type_isValid && true;
}

} // namespace OpenAPI
