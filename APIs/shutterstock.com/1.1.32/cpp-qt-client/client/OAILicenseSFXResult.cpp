/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseSFXResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseSFXResult::OAILicenseSFXResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseSFXResult::OAILicenseSFXResult() {
    this->initializeModel();
}

OAILicenseSFXResult::~OAILicenseSFXResult() {}

void OAILicenseSFXResult::initializeModel() {

    m_allotment_charge_isSet = false;
    m_allotment_charge_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_license_id_isSet = false;
    m_license_id_isValid = false;

    m_sfx_id_isSet = false;
    m_sfx_id_isValid = false;
}

void OAILicenseSFXResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseSFXResult::fromJsonObject(QJsonObject json) {

    m_allotment_charge_isValid = ::OpenAPI::fromJsonValue(m_allotment_charge, json[QString("allotment_charge")]);
    m_allotment_charge_isSet = !json[QString("allotment_charge")].isNull() && m_allotment_charge_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_license_id_isValid = ::OpenAPI::fromJsonValue(m_license_id, json[QString("license_id")]);
    m_license_id_isSet = !json[QString("license_id")].isNull() && m_license_id_isValid;

    m_sfx_id_isValid = ::OpenAPI::fromJsonValue(m_sfx_id, json[QString("sfx_id")]);
    m_sfx_id_isSet = !json[QString("sfx_id")].isNull() && m_sfx_id_isValid;
}

QString OAILicenseSFXResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseSFXResult::asJsonObject() const {
    QJsonObject obj;
    if (m_allotment_charge_isSet) {
        obj.insert(QString("allotment_charge"), ::OpenAPI::toJsonValue(m_allotment_charge));
    }
    if (m_download.isSet()) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_license_id_isSet) {
        obj.insert(QString("license_id"), ::OpenAPI::toJsonValue(m_license_id));
    }
    if (m_sfx_id_isSet) {
        obj.insert(QString("sfx_id"), ::OpenAPI::toJsonValue(m_sfx_id));
    }
    return obj;
}

qint32 OAILicenseSFXResult::getAllotmentCharge() const {
    return m_allotment_charge;
}
void OAILicenseSFXResult::setAllotmentCharge(const qint32 &allotment_charge) {
    m_allotment_charge = allotment_charge;
    m_allotment_charge_isSet = true;
}

bool OAILicenseSFXResult::is_allotment_charge_Set() const{
    return m_allotment_charge_isSet;
}

bool OAILicenseSFXResult::is_allotment_charge_Valid() const{
    return m_allotment_charge_isValid;
}

OAIUrl OAILicenseSFXResult::getDownload() const {
    return m_download;
}
void OAILicenseSFXResult::setDownload(const OAIUrl &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAILicenseSFXResult::is_download_Set() const{
    return m_download_isSet;
}

bool OAILicenseSFXResult::is_download_Valid() const{
    return m_download_isValid;
}

QString OAILicenseSFXResult::getError() const {
    return m_error;
}
void OAILicenseSFXResult::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAILicenseSFXResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAILicenseSFXResult::is_error_Valid() const{
    return m_error_isValid;
}

QString OAILicenseSFXResult::getLicenseId() const {
    return m_license_id;
}
void OAILicenseSFXResult::setLicenseId(const QString &license_id) {
    m_license_id = license_id;
    m_license_id_isSet = true;
}

bool OAILicenseSFXResult::is_license_id_Set() const{
    return m_license_id_isSet;
}

bool OAILicenseSFXResult::is_license_id_Valid() const{
    return m_license_id_isValid;
}

QString OAILicenseSFXResult::getSfxId() const {
    return m_sfx_id;
}
void OAILicenseSFXResult::setSfxId(const QString &sfx_id) {
    m_sfx_id = sfx_id;
    m_sfx_id_isSet = true;
}

bool OAILicenseSFXResult::is_sfx_id_Set() const{
    return m_sfx_id_isSet;
}

bool OAILicenseSFXResult::is_sfx_id_Valid() const{
    return m_sfx_id_isValid;
}

bool OAILicenseSFXResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allotment_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sfx_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseSFXResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sfx_id_isValid && true;
}

} // namespace OpenAPI
