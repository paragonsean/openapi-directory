/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorialVideoAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditorialVideoAssets::OAIEditorialVideoAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditorialVideoAssets::OAIEditorialVideoAssets() {
    this->initializeModel();
}

OAIEditorialVideoAssets::~OAIEditorialVideoAssets() {}

void OAIEditorialVideoAssets::initializeModel() {

    m_original_isSet = false;
    m_original_isValid = false;

    m_preview_mp4_isSet = false;
    m_preview_mp4_isValid = false;

    m_preview_webm_isSet = false;
    m_preview_webm_isValid = false;

    m_thumb_jpg_isSet = false;
    m_thumb_jpg_isValid = false;
}

void OAIEditorialVideoAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditorialVideoAssets::fromJsonObject(QJsonObject json) {

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_preview_mp4_isValid = ::OpenAPI::fromJsonValue(m_preview_mp4, json[QString("preview_mp4")]);
    m_preview_mp4_isSet = !json[QString("preview_mp4")].isNull() && m_preview_mp4_isValid;

    m_preview_webm_isValid = ::OpenAPI::fromJsonValue(m_preview_webm, json[QString("preview_webm")]);
    m_preview_webm_isSet = !json[QString("preview_webm")].isNull() && m_preview_webm_isValid;

    m_thumb_jpg_isValid = ::OpenAPI::fromJsonValue(m_thumb_jpg, json[QString("thumb_jpg")]);
    m_thumb_jpg_isSet = !json[QString("thumb_jpg")].isNull() && m_thumb_jpg_isValid;
}

QString OAIEditorialVideoAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditorialVideoAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_original.isSet()) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_preview_mp4.isSet()) {
        obj.insert(QString("preview_mp4"), ::OpenAPI::toJsonValue(m_preview_mp4));
    }
    if (m_preview_webm.isSet()) {
        obj.insert(QString("preview_webm"), ::OpenAPI::toJsonValue(m_preview_webm));
    }
    if (m_thumb_jpg.isSet()) {
        obj.insert(QString("thumb_jpg"), ::OpenAPI::toJsonValue(m_thumb_jpg));
    }
    return obj;
}

OAIVideoSizeDetails OAIEditorialVideoAssets::getOriginal() const {
    return m_original;
}
void OAIEditorialVideoAssets::setOriginal(const OAIVideoSizeDetails &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIEditorialVideoAssets::is_original_Set() const{
    return m_original_isSet;
}

bool OAIEditorialVideoAssets::is_original_Valid() const{
    return m_original_isValid;
}

OAIVideoPreviewUrl OAIEditorialVideoAssets::getPreviewMp4() const {
    return m_preview_mp4;
}
void OAIEditorialVideoAssets::setPreviewMp4(const OAIVideoPreviewUrl &preview_mp4) {
    m_preview_mp4 = preview_mp4;
    m_preview_mp4_isSet = true;
}

bool OAIEditorialVideoAssets::is_preview_mp4_Set() const{
    return m_preview_mp4_isSet;
}

bool OAIEditorialVideoAssets::is_preview_mp4_Valid() const{
    return m_preview_mp4_isValid;
}

OAIVideoPreviewUrl OAIEditorialVideoAssets::getPreviewWebm() const {
    return m_preview_webm;
}
void OAIEditorialVideoAssets::setPreviewWebm(const OAIVideoPreviewUrl &preview_webm) {
    m_preview_webm = preview_webm;
    m_preview_webm_isSet = true;
}

bool OAIEditorialVideoAssets::is_preview_webm_Set() const{
    return m_preview_webm_isSet;
}

bool OAIEditorialVideoAssets::is_preview_webm_Valid() const{
    return m_preview_webm_isValid;
}

OAIVideoPreviewUrl OAIEditorialVideoAssets::getThumbJpg() const {
    return m_thumb_jpg;
}
void OAIEditorialVideoAssets::setThumbJpg(const OAIVideoPreviewUrl &thumb_jpg) {
    m_thumb_jpg = thumb_jpg;
    m_thumb_jpg_isSet = true;
}

bool OAIEditorialVideoAssets::is_thumb_jpg_Set() const{
    return m_thumb_jpg_isSet;
}

bool OAIEditorialVideoAssets::is_thumb_jpg_Valid() const{
    return m_thumb_jpg_isValid;
}

bool OAIEditorialVideoAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_original.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_mp4.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_webm.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditorialVideoAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
