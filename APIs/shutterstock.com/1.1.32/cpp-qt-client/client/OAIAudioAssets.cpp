/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioAssets::OAIAudioAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioAssets::OAIAudioAssets() {
    this->initializeModel();
}

OAIAudioAssets::~OAIAudioAssets() {}

void OAIAudioAssets::initializeModel() {

    m_album_art_isSet = false;
    m_album_art_isValid = false;

    m_clean_audio_isSet = false;
    m_clean_audio_isValid = false;

    m_original_audio_isSet = false;
    m_original_audio_isValid = false;

    m_preview_mp3_isSet = false;
    m_preview_mp3_isValid = false;

    m_preview_ogg_isSet = false;
    m_preview_ogg_isValid = false;

    m_shorts_loops_stems_isSet = false;
    m_shorts_loops_stems_isValid = false;

    m_waveform_isSet = false;
    m_waveform_isValid = false;
}

void OAIAudioAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioAssets::fromJsonObject(QJsonObject json) {

    m_album_art_isValid = ::OpenAPI::fromJsonValue(m_album_art, json[QString("album_art")]);
    m_album_art_isSet = !json[QString("album_art")].isNull() && m_album_art_isValid;

    m_clean_audio_isValid = ::OpenAPI::fromJsonValue(m_clean_audio, json[QString("clean_audio")]);
    m_clean_audio_isSet = !json[QString("clean_audio")].isNull() && m_clean_audio_isValid;

    m_original_audio_isValid = ::OpenAPI::fromJsonValue(m_original_audio, json[QString("original_audio")]);
    m_original_audio_isSet = !json[QString("original_audio")].isNull() && m_original_audio_isValid;

    m_preview_mp3_isValid = ::OpenAPI::fromJsonValue(m_preview_mp3, json[QString("preview_mp3")]);
    m_preview_mp3_isSet = !json[QString("preview_mp3")].isNull() && m_preview_mp3_isValid;

    m_preview_ogg_isValid = ::OpenAPI::fromJsonValue(m_preview_ogg, json[QString("preview_ogg")]);
    m_preview_ogg_isSet = !json[QString("preview_ogg")].isNull() && m_preview_ogg_isValid;

    m_shorts_loops_stems_isValid = ::OpenAPI::fromJsonValue(m_shorts_loops_stems, json[QString("shorts_loops_stems")]);
    m_shorts_loops_stems_isSet = !json[QString("shorts_loops_stems")].isNull() && m_shorts_loops_stems_isValid;

    m_waveform_isValid = ::OpenAPI::fromJsonValue(m_waveform, json[QString("waveform")]);
    m_waveform_isSet = !json[QString("waveform")].isNull() && m_waveform_isValid;
}

QString OAIAudioAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_album_art.isSet()) {
        obj.insert(QString("album_art"), ::OpenAPI::toJsonValue(m_album_art));
    }
    if (m_clean_audio.isSet()) {
        obj.insert(QString("clean_audio"), ::OpenAPI::toJsonValue(m_clean_audio));
    }
    if (m_original_audio.isSet()) {
        obj.insert(QString("original_audio"), ::OpenAPI::toJsonValue(m_original_audio));
    }
    if (m_preview_mp3.isSet()) {
        obj.insert(QString("preview_mp3"), ::OpenAPI::toJsonValue(m_preview_mp3));
    }
    if (m_preview_ogg.isSet()) {
        obj.insert(QString("preview_ogg"), ::OpenAPI::toJsonValue(m_preview_ogg));
    }
    if (m_shorts_loops_stems.isSet()) {
        obj.insert(QString("shorts_loops_stems"), ::OpenAPI::toJsonValue(m_shorts_loops_stems));
    }
    if (m_waveform.isSet()) {
        obj.insert(QString("waveform"), ::OpenAPI::toJsonValue(m_waveform));
    }
    return obj;
}

OAIAudioAssetDetails OAIAudioAssets::getAlbumArt() const {
    return m_album_art;
}
void OAIAudioAssets::setAlbumArt(const OAIAudioAssetDetails &album_art) {
    m_album_art = album_art;
    m_album_art_isSet = true;
}

bool OAIAudioAssets::is_album_art_Set() const{
    return m_album_art_isSet;
}

bool OAIAudioAssets::is_album_art_Valid() const{
    return m_album_art_isValid;
}

OAIAudioAssetDetails OAIAudioAssets::getCleanAudio() const {
    return m_clean_audio;
}
void OAIAudioAssets::setCleanAudio(const OAIAudioAssetDetails &clean_audio) {
    m_clean_audio = clean_audio;
    m_clean_audio_isSet = true;
}

bool OAIAudioAssets::is_clean_audio_Set() const{
    return m_clean_audio_isSet;
}

bool OAIAudioAssets::is_clean_audio_Valid() const{
    return m_clean_audio_isValid;
}

OAIAudioAssetDetails OAIAudioAssets::getOriginalAudio() const {
    return m_original_audio;
}
void OAIAudioAssets::setOriginalAudio(const OAIAudioAssetDetails &original_audio) {
    m_original_audio = original_audio;
    m_original_audio_isSet = true;
}

bool OAIAudioAssets::is_original_audio_Set() const{
    return m_original_audio_isSet;
}

bool OAIAudioAssets::is_original_audio_Valid() const{
    return m_original_audio_isValid;
}

OAIAudioAssetDetails OAIAudioAssets::getPreviewMp3() const {
    return m_preview_mp3;
}
void OAIAudioAssets::setPreviewMp3(const OAIAudioAssetDetails &preview_mp3) {
    m_preview_mp3 = preview_mp3;
    m_preview_mp3_isSet = true;
}

bool OAIAudioAssets::is_preview_mp3_Set() const{
    return m_preview_mp3_isSet;
}

bool OAIAudioAssets::is_preview_mp3_Valid() const{
    return m_preview_mp3_isValid;
}

OAIAudioAssetDetails OAIAudioAssets::getPreviewOgg() const {
    return m_preview_ogg;
}
void OAIAudioAssets::setPreviewOgg(const OAIAudioAssetDetails &preview_ogg) {
    m_preview_ogg = preview_ogg;
    m_preview_ogg_isSet = true;
}

bool OAIAudioAssets::is_preview_ogg_Set() const{
    return m_preview_ogg_isSet;
}

bool OAIAudioAssets::is_preview_ogg_Valid() const{
    return m_preview_ogg_isValid;
}

OAIShortsLoopsStems OAIAudioAssets::getShortsLoopsStems() const {
    return m_shorts_loops_stems;
}
void OAIAudioAssets::setShortsLoopsStems(const OAIShortsLoopsStems &shorts_loops_stems) {
    m_shorts_loops_stems = shorts_loops_stems;
    m_shorts_loops_stems_isSet = true;
}

bool OAIAudioAssets::is_shorts_loops_stems_Set() const{
    return m_shorts_loops_stems_isSet;
}

bool OAIAudioAssets::is_shorts_loops_stems_Valid() const{
    return m_shorts_loops_stems_isValid;
}

OAIAudioAssetDetails OAIAudioAssets::getWaveform() const {
    return m_waveform;
}
void OAIAudioAssets::setWaveform(const OAIAudioAssetDetails &waveform) {
    m_waveform = waveform;
    m_waveform_isSet = true;
}

bool OAIAudioAssets::is_waveform_Set() const{
    return m_waveform_isSet;
}

bool OAIAudioAssets::is_waveform_Valid() const{
    return m_waveform_isValid;
}

bool OAIAudioAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_album_art.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_clean_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original_audio.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_mp3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_ogg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_shorts_loops_stems.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waveform.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
