/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIVideoAssets.h
 *
 * Video asset information
 */

#ifndef OAIVideoAssets_H
#define OAIVideoAssets_H

#include <QJsonObject>

#include "OAIUrl.h"
#include "OAIUrls.h"
#include "OAIVideoSizeDetails.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIVideoSizeDetails;
class OAIUrl;
class OAIUrls;

class OAIVideoAssets : public OAIObject {
public:
    OAIVideoAssets();
    OAIVideoAssets(QString json);
    ~OAIVideoAssets() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIVideoSizeDetails getR4k() const;
    void setR4k(const OAIVideoSizeDetails &r_4k);
    bool is_r_4k_Set() const;
    bool is_r_4k_Valid() const;

    OAIVideoSizeDetails getHd() const;
    void setHd(const OAIVideoSizeDetails &hd);
    bool is_hd_Set() const;
    bool is_hd_Valid() const;

    OAIUrl getPreviewJpg() const;
    void setPreviewJpg(const OAIUrl &preview_jpg);
    bool is_preview_jpg_Set() const;
    bool is_preview_jpg_Valid() const;

    OAIUrl getPreviewMp4() const;
    void setPreviewMp4(const OAIUrl &preview_mp4);
    bool is_preview_mp4_Set() const;
    bool is_preview_mp4_Valid() const;

    OAIUrl getPreviewWebm() const;
    void setPreviewWebm(const OAIUrl &preview_webm);
    bool is_preview_webm_Set() const;
    bool is_preview_webm_Valid() const;

    OAIVideoSizeDetails getSd() const;
    void setSd(const OAIVideoSizeDetails &sd);
    bool is_sd_Set() const;
    bool is_sd_Valid() const;

    OAIUrl getThumbJpg() const;
    void setThumbJpg(const OAIUrl &thumb_jpg);
    bool is_thumb_jpg_Set() const;
    bool is_thumb_jpg_Valid() const;

    OAIUrls getThumbJpgs() const;
    void setThumbJpgs(const OAIUrls &thumb_jpgs);
    bool is_thumb_jpgs_Set() const;
    bool is_thumb_jpgs_Valid() const;

    OAIUrl getThumbMp4() const;
    void setThumbMp4(const OAIUrl &thumb_mp4);
    bool is_thumb_mp4_Set() const;
    bool is_thumb_mp4_Valid() const;

    OAIUrl getThumbWebm() const;
    void setThumbWebm(const OAIUrl &thumb_webm);
    bool is_thumb_webm_Set() const;
    bool is_thumb_webm_Valid() const;

    OAIVideoSizeDetails getWeb() const;
    void setWeb(const OAIVideoSizeDetails &web);
    bool is_web_Set() const;
    bool is_web_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIVideoSizeDetails m_r_4k;
    bool m_r_4k_isSet;
    bool m_r_4k_isValid;

    OAIVideoSizeDetails m_hd;
    bool m_hd_isSet;
    bool m_hd_isValid;

    OAIUrl m_preview_jpg;
    bool m_preview_jpg_isSet;
    bool m_preview_jpg_isValid;

    OAIUrl m_preview_mp4;
    bool m_preview_mp4_isSet;
    bool m_preview_mp4_isValid;

    OAIUrl m_preview_webm;
    bool m_preview_webm_isSet;
    bool m_preview_webm_isValid;

    OAIVideoSizeDetails m_sd;
    bool m_sd_isSet;
    bool m_sd_isValid;

    OAIUrl m_thumb_jpg;
    bool m_thumb_jpg_isSet;
    bool m_thumb_jpg_isValid;

    OAIUrls m_thumb_jpgs;
    bool m_thumb_jpgs_isSet;
    bool m_thumb_jpgs_isValid;

    OAIUrl m_thumb_mp4;
    bool m_thumb_mp4_isSet;
    bool m_thumb_mp4_isValid;

    OAIUrl m_thumb_webm;
    bool m_thumb_webm_isSet;
    bool m_thumb_webm_isValid;

    OAIVideoSizeDetails m_web;
    bool m_web_isSet;
    bool m_web_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIVideoAssets)

#endif // OAIVideoAssets_H
