/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseImageResult.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseImageResult::OAILicenseImageResult(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseImageResult::OAILicenseImageResult() {
    this->initializeModel();
}

OAILicenseImageResult::~OAILicenseImageResult() {}

void OAILicenseImageResult::initializeModel() {

    m_allotment_charge_isSet = false;
    m_allotment_charge_isValid = false;

    m_download_isSet = false;
    m_download_isValid = false;

    m_error_isSet = false;
    m_error_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_license_id_isSet = false;
    m_license_id_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;
}

void OAILicenseImageResult::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseImageResult::fromJsonObject(QJsonObject json) {

    m_allotment_charge_isValid = ::OpenAPI::fromJsonValue(m_allotment_charge, json[QString("allotment_charge")]);
    m_allotment_charge_isSet = !json[QString("allotment_charge")].isNull() && m_allotment_charge_isValid;

    m_download_isValid = ::OpenAPI::fromJsonValue(m_download, json[QString("download")]);
    m_download_isSet = !json[QString("download")].isNull() && m_download_isValid;

    m_error_isValid = ::OpenAPI::fromJsonValue(m_error, json[QString("error")]);
    m_error_isSet = !json[QString("error")].isNull() && m_error_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("image_id")]);
    m_image_id_isSet = !json[QString("image_id")].isNull() && m_image_id_isValid;

    m_license_id_isValid = ::OpenAPI::fromJsonValue(m_license_id, json[QString("license_id")]);
    m_license_id_isSet = !json[QString("license_id")].isNull() && m_license_id_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;
}

QString OAILicenseImageResult::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseImageResult::asJsonObject() const {
    QJsonObject obj;
    if (m_allotment_charge_isSet) {
        obj.insert(QString("allotment_charge"), ::OpenAPI::toJsonValue(m_allotment_charge));
    }
    if (m_download.isSet()) {
        obj.insert(QString("download"), ::OpenAPI::toJsonValue(m_download));
    }
    if (m_error_isSet) {
        obj.insert(QString("error"), ::OpenAPI::toJsonValue(m_error));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("image_id"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_license_id_isSet) {
        obj.insert(QString("license_id"), ::OpenAPI::toJsonValue(m_license_id));
    }
    if (m_price.isSet()) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    return obj;
}

qint32 OAILicenseImageResult::getAllotmentCharge() const {
    return m_allotment_charge;
}
void OAILicenseImageResult::setAllotmentCharge(const qint32 &allotment_charge) {
    m_allotment_charge = allotment_charge;
    m_allotment_charge_isSet = true;
}

bool OAILicenseImageResult::is_allotment_charge_Set() const{
    return m_allotment_charge_isSet;
}

bool OAILicenseImageResult::is_allotment_charge_Valid() const{
    return m_allotment_charge_isValid;
}

OAIUrl OAILicenseImageResult::getDownload() const {
    return m_download;
}
void OAILicenseImageResult::setDownload(const OAIUrl &download) {
    m_download = download;
    m_download_isSet = true;
}

bool OAILicenseImageResult::is_download_Set() const{
    return m_download_isSet;
}

bool OAILicenseImageResult::is_download_Valid() const{
    return m_download_isValid;
}

QString OAILicenseImageResult::getError() const {
    return m_error;
}
void OAILicenseImageResult::setError(const QString &error) {
    m_error = error;
    m_error_isSet = true;
}

bool OAILicenseImageResult::is_error_Set() const{
    return m_error_isSet;
}

bool OAILicenseImageResult::is_error_Valid() const{
    return m_error_isValid;
}

QString OAILicenseImageResult::getImageId() const {
    return m_image_id;
}
void OAILicenseImageResult::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAILicenseImageResult::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAILicenseImageResult::is_image_id_Valid() const{
    return m_image_id_isValid;
}

QString OAILicenseImageResult::getLicenseId() const {
    return m_license_id;
}
void OAILicenseImageResult::setLicenseId(const QString &license_id) {
    m_license_id = license_id;
    m_license_id_isSet = true;
}

bool OAILicenseImageResult::is_license_id_Set() const{
    return m_license_id_isSet;
}

bool OAILicenseImageResult::is_license_id_Valid() const{
    return m_license_id_isValid;
}

OAIPrice OAILicenseImageResult::getPrice() const {
    return m_price;
}
void OAILicenseImageResult::setPrice(const OAIPrice &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILicenseImageResult::is_price_Set() const{
    return m_price_isSet;
}

bool OAILicenseImageResult::is_price_Valid() const{
    return m_price_isValid;
}

bool OAILicenseImageResult::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allotment_charge_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_download.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_error_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseImageResult::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_id_isValid && true;
}

} // namespace OpenAPI
