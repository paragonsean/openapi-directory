/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorialAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditorialAssets::OAIEditorialAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditorialAssets::OAIEditorialAssets() {
    this->initializeModel();
}

OAIEditorialAssets::~OAIEditorialAssets() {}

void OAIEditorialAssets::initializeModel() {

    m_medium_jpg_isSet = false;
    m_medium_jpg_isValid = false;

    m_original_isSet = false;
    m_original_isValid = false;

    m_small_jpg_isSet = false;
    m_small_jpg_isValid = false;

    m_thumb_170_isSet = false;
    m_thumb_170_isValid = false;

    m_thumb_220_isSet = false;
    m_thumb_220_isValid = false;

    m_watermark_1500_isSet = false;
    m_watermark_1500_isValid = false;

    m_watermark_450_isSet = false;
    m_watermark_450_isValid = false;
}

void OAIEditorialAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditorialAssets::fromJsonObject(QJsonObject json) {

    m_medium_jpg_isValid = ::OpenAPI::fromJsonValue(m_medium_jpg, json[QString("medium_jpg")]);
    m_medium_jpg_isSet = !json[QString("medium_jpg")].isNull() && m_medium_jpg_isValid;

    m_original_isValid = ::OpenAPI::fromJsonValue(m_original, json[QString("original")]);
    m_original_isSet = !json[QString("original")].isNull() && m_original_isValid;

    m_small_jpg_isValid = ::OpenAPI::fromJsonValue(m_small_jpg, json[QString("small_jpg")]);
    m_small_jpg_isSet = !json[QString("small_jpg")].isNull() && m_small_jpg_isValid;

    m_thumb_170_isValid = ::OpenAPI::fromJsonValue(m_thumb_170, json[QString("thumb_170")]);
    m_thumb_170_isSet = !json[QString("thumb_170")].isNull() && m_thumb_170_isValid;

    m_thumb_220_isValid = ::OpenAPI::fromJsonValue(m_thumb_220, json[QString("thumb_220")]);
    m_thumb_220_isSet = !json[QString("thumb_220")].isNull() && m_thumb_220_isValid;

    m_watermark_1500_isValid = ::OpenAPI::fromJsonValue(m_watermark_1500, json[QString("watermark_1500")]);
    m_watermark_1500_isSet = !json[QString("watermark_1500")].isNull() && m_watermark_1500_isValid;

    m_watermark_450_isValid = ::OpenAPI::fromJsonValue(m_watermark_450, json[QString("watermark_450")]);
    m_watermark_450_isSet = !json[QString("watermark_450")].isNull() && m_watermark_450_isValid;
}

QString OAIEditorialAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditorialAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_medium_jpg.isSet()) {
        obj.insert(QString("medium_jpg"), ::OpenAPI::toJsonValue(m_medium_jpg));
    }
    if (m_original.isSet()) {
        obj.insert(QString("original"), ::OpenAPI::toJsonValue(m_original));
    }
    if (m_small_jpg.isSet()) {
        obj.insert(QString("small_jpg"), ::OpenAPI::toJsonValue(m_small_jpg));
    }
    if (m_thumb_170.isSet()) {
        obj.insert(QString("thumb_170"), ::OpenAPI::toJsonValue(m_thumb_170));
    }
    if (m_thumb_220.isSet()) {
        obj.insert(QString("thumb_220"), ::OpenAPI::toJsonValue(m_thumb_220));
    }
    if (m_watermark_1500.isSet()) {
        obj.insert(QString("watermark_1500"), ::OpenAPI::toJsonValue(m_watermark_1500));
    }
    if (m_watermark_450.isSet()) {
        obj.insert(QString("watermark_450"), ::OpenAPI::toJsonValue(m_watermark_450));
    }
    return obj;
}

OAIImageSizeDetails OAIEditorialAssets::getMediumJpg() const {
    return m_medium_jpg;
}
void OAIEditorialAssets::setMediumJpg(const OAIImageSizeDetails &medium_jpg) {
    m_medium_jpg = medium_jpg;
    m_medium_jpg_isSet = true;
}

bool OAIEditorialAssets::is_medium_jpg_Set() const{
    return m_medium_jpg_isSet;
}

bool OAIEditorialAssets::is_medium_jpg_Valid() const{
    return m_medium_jpg_isValid;
}

OAIImageSizeDetails OAIEditorialAssets::getOriginal() const {
    return m_original;
}
void OAIEditorialAssets::setOriginal(const OAIImageSizeDetails &original) {
    m_original = original;
    m_original_isSet = true;
}

bool OAIEditorialAssets::is_original_Set() const{
    return m_original_isSet;
}

bool OAIEditorialAssets::is_original_Valid() const{
    return m_original_isValid;
}

OAIImageSizeDetails OAIEditorialAssets::getSmallJpg() const {
    return m_small_jpg;
}
void OAIEditorialAssets::setSmallJpg(const OAIImageSizeDetails &small_jpg) {
    m_small_jpg = small_jpg;
    m_small_jpg_isSet = true;
}

bool OAIEditorialAssets::is_small_jpg_Set() const{
    return m_small_jpg_isSet;
}

bool OAIEditorialAssets::is_small_jpg_Valid() const{
    return m_small_jpg_isValid;
}

OAIThumbnail OAIEditorialAssets::getThumb170() const {
    return m_thumb_170;
}
void OAIEditorialAssets::setThumb170(const OAIThumbnail &thumb_170) {
    m_thumb_170 = thumb_170;
    m_thumb_170_isSet = true;
}

bool OAIEditorialAssets::is_thumb_170_Set() const{
    return m_thumb_170_isSet;
}

bool OAIEditorialAssets::is_thumb_170_Valid() const{
    return m_thumb_170_isValid;
}

OAIThumbnail OAIEditorialAssets::getThumb220() const {
    return m_thumb_220;
}
void OAIEditorialAssets::setThumb220(const OAIThumbnail &thumb_220) {
    m_thumb_220 = thumb_220;
    m_thumb_220_isSet = true;
}

bool OAIEditorialAssets::is_thumb_220_Set() const{
    return m_thumb_220_isSet;
}

bool OAIEditorialAssets::is_thumb_220_Valid() const{
    return m_thumb_220_isValid;
}

OAIThumbnail OAIEditorialAssets::getWatermark1500() const {
    return m_watermark_1500;
}
void OAIEditorialAssets::setWatermark1500(const OAIThumbnail &watermark_1500) {
    m_watermark_1500 = watermark_1500;
    m_watermark_1500_isSet = true;
}

bool OAIEditorialAssets::is_watermark_1500_Set() const{
    return m_watermark_1500_isSet;
}

bool OAIEditorialAssets::is_watermark_1500_Valid() const{
    return m_watermark_1500_isValid;
}

OAIThumbnail OAIEditorialAssets::getWatermark450() const {
    return m_watermark_450;
}
void OAIEditorialAssets::setWatermark450(const OAIThumbnail &watermark_450) {
    m_watermark_450 = watermark_450;
    m_watermark_450_isSet = true;
}

bool OAIEditorialAssets::is_watermark_450_Set() const{
    return m_watermark_450_isSet;
}

bool OAIEditorialAssets::is_watermark_450_Valid() const{
    return m_watermark_450_isValid;
}

bool OAIEditorialAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_medium_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_original.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_170.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_thumb_220.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_1500.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_watermark_450.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditorialAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
