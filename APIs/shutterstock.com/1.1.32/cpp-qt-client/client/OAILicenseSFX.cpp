/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseSFX.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseSFX::OAILicenseSFX(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseSFX::OAILicenseSFX() {
    this->initializeModel();
}

OAILicenseSFX::~OAILicenseSFX() {}

void OAILicenseSFX::initializeModel() {

    m_audio_layout_isSet = false;
    m_audio_layout_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_search_id_isSet = false;
    m_search_id_isValid = false;

    m_sfx_id_isSet = false;
    m_sfx_id_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;
}

void OAILicenseSFX::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseSFX::fromJsonObject(QJsonObject json) {

    m_audio_layout_isValid = ::OpenAPI::fromJsonValue(m_audio_layout, json[QString("audio_layout")]);
    m_audio_layout_isSet = !json[QString("audio_layout")].isNull() && m_audio_layout_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_search_id_isValid = ::OpenAPI::fromJsonValue(m_search_id, json[QString("search_id")]);
    m_search_id_isSet = !json[QString("search_id")].isNull() && m_search_id_isValid;

    m_sfx_id_isValid = ::OpenAPI::fromJsonValue(m_sfx_id, json[QString("sfx_id")]);
    m_sfx_id_isSet = !json[QString("sfx_id")].isNull() && m_sfx_id_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;
}

QString OAILicenseSFX::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseSFX::asJsonObject() const {
    QJsonObject obj;
    if (m_audio_layout_isSet) {
        obj.insert(QString("audio_layout"), ::OpenAPI::toJsonValue(m_audio_layout));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_search_id_isSet) {
        obj.insert(QString("search_id"), ::OpenAPI::toJsonValue(m_search_id));
    }
    if (m_sfx_id_isSet) {
        obj.insert(QString("sfx_id"), ::OpenAPI::toJsonValue(m_sfx_id));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    return obj;
}

QString OAILicenseSFX::getAudioLayout() const {
    return m_audio_layout;
}
void OAILicenseSFX::setAudioLayout(const QString &audio_layout) {
    m_audio_layout = audio_layout;
    m_audio_layout_isSet = true;
}

bool OAILicenseSFX::is_audio_layout_Set() const{
    return m_audio_layout_isSet;
}

bool OAILicenseSFX::is_audio_layout_Valid() const{
    return m_audio_layout_isValid;
}

QString OAILicenseSFX::getFormat() const {
    return m_format;
}
void OAILicenseSFX::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAILicenseSFX::is_format_Set() const{
    return m_format_isSet;
}

bool OAILicenseSFX::is_format_Valid() const{
    return m_format_isValid;
}

QString OAILicenseSFX::getSearchId() const {
    return m_search_id;
}
void OAILicenseSFX::setSearchId(const QString &search_id) {
    m_search_id = search_id;
    m_search_id_isSet = true;
}

bool OAILicenseSFX::is_search_id_Set() const{
    return m_search_id_isSet;
}

bool OAILicenseSFX::is_search_id_Valid() const{
    return m_search_id_isValid;
}

QString OAILicenseSFX::getSfxId() const {
    return m_sfx_id;
}
void OAILicenseSFX::setSfxId(const QString &sfx_id) {
    m_sfx_id = sfx_id;
    m_sfx_id_isSet = true;
}

bool OAILicenseSFX::is_sfx_id_Set() const{
    return m_sfx_id_isSet;
}

bool OAILicenseSFX::is_sfx_id_Valid() const{
    return m_sfx_id_isValid;
}

QString OAILicenseSFX::getSubscriptionId() const {
    return m_subscription_id;
}
void OAILicenseSFX::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAILicenseSFX::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAILicenseSFX::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

bool OAILicenseSFX::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_audio_layout_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sfx_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseSFX::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_sfx_id_isValid && m_subscription_id_isValid && true;
}

} // namespace OpenAPI
