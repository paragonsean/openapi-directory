/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICatalogApi_H
#define OAI_OAICatalogApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICatalogCollection.h"
#include "OAICatalogCollectionDataList.h"
#include "OAICatalogCollectionItemDataList.h"
#include "OAICreateCatalogCollection.h"
#include "OAICreateCatalogCollectionItems.h"
#include "OAIRemoveCatalogCollectionItems.h"
#include "OAIUpdateCatalogCollection.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICatalogApi : public QObject {
    Q_OBJECT

public:
    OAICatalogApi(const int timeOut = 0);
    ~OAICatalogApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  oai_create_catalog_collection_items OAICreateCatalogCollectionItems [required]
    */
    virtual void addToCollection(const QString &collection_id, const OAICreateCatalogCollectionItems &oai_create_catalog_collection_items);

    /**
    * @param[in]  oai_create_catalog_collection OAICreateCatalogCollection [required]
    */
    virtual void createCollection(const OAICreateCatalogCollection &oai_create_catalog_collection);

    /**
    * @param[in]  collection_id QString [required]
    */
    virtual void deleteCollection(const QString &collection_id);

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  oai_remove_catalog_collection_items OAIRemoveCatalogCollectionItems [required]
    */
    virtual void deleteFromCollection(const QString &collection_id, const OAIRemoveCatalogCollectionItems &oai_remove_catalog_collection_items);

    /**
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  shared bool [optional]
    */
    virtual void getCollections(const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &shared = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  sort QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  collection_id QList<QString> [optional]
    * @param[in]  asset_type QList<QString> [optional]
    */
    virtual void searchCatalog(const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &collection_id = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &asset_type = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  collection_id QString [required]
    * @param[in]  oai_update_catalog_collection OAIUpdateCatalogCollection [required]
    */
    virtual void updateCollection(const QString &collection_id, const OAIUpdateCatalogCollection &oai_update_catalog_collection);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addToCollectionCallback(OAIHttpRequestWorker *worker);
    void createCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteFromCollectionCallback(OAIHttpRequestWorker *worker);
    void getCollectionsCallback(OAIHttpRequestWorker *worker);
    void searchCatalogCallback(OAIHttpRequestWorker *worker);
    void updateCollectionCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addToCollectionSignal(OAICatalogCollection summary);
    void createCollectionSignal(OAICatalogCollection summary);
    void deleteCollectionSignal();
    void deleteFromCollectionSignal(OAICatalogCollection summary);
    void getCollectionsSignal(OAICatalogCollectionDataList summary);
    void searchCatalogSignal(OAICatalogCollectionItemDataList summary);
    void updateCollectionSignal(OAICatalogCollection summary);


    void addToCollectionSignalFull(OAIHttpRequestWorker *worker, OAICatalogCollection summary);
    void createCollectionSignalFull(OAIHttpRequestWorker *worker, OAICatalogCollection summary);
    void deleteCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deleteFromCollectionSignalFull(OAIHttpRequestWorker *worker, OAICatalogCollection summary);
    void getCollectionsSignalFull(OAIHttpRequestWorker *worker, OAICatalogCollectionDataList summary);
    void searchCatalogSignalFull(OAIHttpRequestWorker *worker, OAICatalogCollectionItemDataList summary);
    void updateCollectionSignalFull(OAIHttpRequestWorker *worker, OAICatalogCollection summary);

    Q_DECL_DEPRECATED_X("Use addToCollectionSignalError() instead")
    void addToCollectionSignalE(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void addToCollectionSignalError(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalError() instead")
    void createCollectionSignalE(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalError(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalError() instead")
    void deleteCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFromCollectionSignalError() instead")
    void deleteFromCollectionSignalE(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFromCollectionSignalError(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionsSignalError() instead")
    void getCollectionsSignalE(OAICatalogCollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionsSignalError(OAICatalogCollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCatalogSignalError() instead")
    void searchCatalogSignalE(OAICatalogCollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCatalogSignalError(OAICatalogCollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollectionSignalError() instead")
    void updateCollectionSignalE(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollectionSignalError(OAICatalogCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addToCollectionSignalErrorFull() instead")
    void addToCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addToCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createCollectionSignalErrorFull() instead")
    void createCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteCollectionSignalErrorFull() instead")
    void deleteCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteFromCollectionSignalErrorFull() instead")
    void deleteFromCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteFromCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getCollectionsSignalErrorFull() instead")
    void getCollectionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCollectionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchCatalogSignalErrorFull() instead")
    void searchCatalogSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchCatalogSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use updateCollectionSignalErrorFull() instead")
    void updateCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void updateCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
