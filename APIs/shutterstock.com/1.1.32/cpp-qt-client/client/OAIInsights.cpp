/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIInsights.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIInsights::OAIInsights(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIInsights::OAIInsights() {
    this->initializeModel();
}

OAIInsights::~OAIInsights() {}

void OAIInsights::initializeModel() {

    m_label_performance_isSet = false;
    m_label_performance_isValid = false;
}

void OAIInsights::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIInsights::fromJsonObject(QJsonObject json) {

    m_label_performance_isValid = ::OpenAPI::fromJsonValue(m_label_performance, json[QString("label_performance")]);
    m_label_performance_isSet = !json[QString("label_performance")].isNull() && m_label_performance_isValid;
}

QString OAIInsights::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIInsights::asJsonObject() const {
    QJsonObject obj;
    if (m_label_performance.size() > 0) {
        obj.insert(QString("label_performance"), ::OpenAPI::toJsonValue(m_label_performance));
    }
    return obj;
}

QList<OAIInsights_label_performance_inner> OAIInsights::getLabelPerformance() const {
    return m_label_performance;
}
void OAIInsights::setLabelPerformance(const QList<OAIInsights_label_performance_inner> &label_performance) {
    m_label_performance = label_performance;
    m_label_performance_isSet = true;
}

bool OAIInsights::is_label_performance_Set() const{
    return m_label_performance_isSet;
}

bool OAIInsights::is_label_performance_Valid() const{
    return m_label_performance_isValid;
}

bool OAIInsights::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_label_performance.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIInsights::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_label_performance_isValid && true;
}

} // namespace OpenAPI
