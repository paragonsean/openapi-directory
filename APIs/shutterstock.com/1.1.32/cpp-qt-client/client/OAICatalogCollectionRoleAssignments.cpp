/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCollectionRoleAssignments.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCollectionRoleAssignments::OAICatalogCollectionRoleAssignments(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCollectionRoleAssignments::OAICatalogCollectionRoleAssignments() {
    this->initializeModel();
}

OAICatalogCollectionRoleAssignments::~OAICatalogCollectionRoleAssignments() {}

void OAICatalogCollectionRoleAssignments::initializeModel() {

    m_collection_id_isSet = false;
    m_collection_id_isValid = false;

    m_roles_isSet = false;
    m_roles_isValid = false;
}

void OAICatalogCollectionRoleAssignments::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCollectionRoleAssignments::fromJsonObject(QJsonObject json) {

    m_collection_id_isValid = ::OpenAPI::fromJsonValue(m_collection_id, json[QString("collection_id")]);
    m_collection_id_isSet = !json[QString("collection_id")].isNull() && m_collection_id_isValid;

    m_roles_isValid = ::OpenAPI::fromJsonValue(m_roles, json[QString("roles")]);
    m_roles_isSet = !json[QString("roles")].isNull() && m_roles_isValid;
}

QString OAICatalogCollectionRoleAssignments::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCollectionRoleAssignments::asJsonObject() const {
    QJsonObject obj;
    if (m_collection_id_isSet) {
        obj.insert(QString("collection_id"), ::OpenAPI::toJsonValue(m_collection_id));
    }
    if (m_roles.isSet()) {
        obj.insert(QString("roles"), ::OpenAPI::toJsonValue(m_roles));
    }
    return obj;
}

QString OAICatalogCollectionRoleAssignments::getCollectionId() const {
    return m_collection_id;
}
void OAICatalogCollectionRoleAssignments::setCollectionId(const QString &collection_id) {
    m_collection_id = collection_id;
    m_collection_id_isSet = true;
}

bool OAICatalogCollectionRoleAssignments::is_collection_id_Set() const{
    return m_collection_id_isSet;
}

bool OAICatalogCollectionRoleAssignments::is_collection_id_Valid() const{
    return m_collection_id_isValid;
}

OAICatalogCollectionRoleAssignments_roles OAICatalogCollectionRoleAssignments::getRoles() const {
    return m_roles;
}
void OAICatalogCollectionRoleAssignments::setRoles(const OAICatalogCollectionRoleAssignments_roles &roles) {
    m_roles = roles;
    m_roles_isSet = true;
}

bool OAICatalogCollectionRoleAssignments::is_roles_Set() const{
    return m_roles_isSet;
}

bool OAICatalogCollectionRoleAssignments::is_roles_Valid() const{
    return m_roles_isValid;
}

bool OAICatalogCollectionRoleAssignments::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_collection_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_roles.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCollectionRoleAssignments::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_collection_id_isValid && m_roles_isValid && true;
}

} // namespace OpenAPI
