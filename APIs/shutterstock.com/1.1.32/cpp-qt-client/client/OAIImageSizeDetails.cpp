/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageSizeDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageSizeDetails::OAIImageSizeDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageSizeDetails::OAIImageSizeDetails() {
    this->initializeModel();
}

OAIImageSizeDetails::~OAIImageSizeDetails() {}

void OAIImageSizeDetails::initializeModel() {

    m_display_name_isSet = false;
    m_display_name_isValid = false;

    m_dpi_isSet = false;
    m_dpi_isValid = false;

    m_file_size_isSet = false;
    m_file_size_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_is_licensable_isSet = false;
    m_is_licensable_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;
}

void OAIImageSizeDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageSizeDetails::fromJsonObject(QJsonObject json) {

    m_display_name_isValid = ::OpenAPI::fromJsonValue(m_display_name, json[QString("display_name")]);
    m_display_name_isSet = !json[QString("display_name")].isNull() && m_display_name_isValid;

    m_dpi_isValid = ::OpenAPI::fromJsonValue(m_dpi, json[QString("dpi")]);
    m_dpi_isSet = !json[QString("dpi")].isNull() && m_dpi_isValid;

    m_file_size_isValid = ::OpenAPI::fromJsonValue(m_file_size, json[QString("file_size")]);
    m_file_size_isSet = !json[QString("file_size")].isNull() && m_file_size_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_is_licensable_isValid = ::OpenAPI::fromJsonValue(m_is_licensable, json[QString("is_licensable")]);
    m_is_licensable_isSet = !json[QString("is_licensable")].isNull() && m_is_licensable_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;
}

QString OAIImageSizeDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageSizeDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_display_name_isSet) {
        obj.insert(QString("display_name"), ::OpenAPI::toJsonValue(m_display_name));
    }
    if (m_dpi_isSet) {
        obj.insert(QString("dpi"), ::OpenAPI::toJsonValue(m_dpi));
    }
    if (m_file_size_isSet) {
        obj.insert(QString("file_size"), ::OpenAPI::toJsonValue(m_file_size));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_is_licensable_isSet) {
        obj.insert(QString("is_licensable"), ::OpenAPI::toJsonValue(m_is_licensable));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    return obj;
}

QString OAIImageSizeDetails::getDisplayName() const {
    return m_display_name;
}
void OAIImageSizeDetails::setDisplayName(const QString &display_name) {
    m_display_name = display_name;
    m_display_name_isSet = true;
}

bool OAIImageSizeDetails::is_display_name_Set() const{
    return m_display_name_isSet;
}

bool OAIImageSizeDetails::is_display_name_Valid() const{
    return m_display_name_isValid;
}

qint32 OAIImageSizeDetails::getDpi() const {
    return m_dpi;
}
void OAIImageSizeDetails::setDpi(const qint32 &dpi) {
    m_dpi = dpi;
    m_dpi_isSet = true;
}

bool OAIImageSizeDetails::is_dpi_Set() const{
    return m_dpi_isSet;
}

bool OAIImageSizeDetails::is_dpi_Valid() const{
    return m_dpi_isValid;
}

qint32 OAIImageSizeDetails::getFileSize() const {
    return m_file_size;
}
void OAIImageSizeDetails::setFileSize(const qint32 &file_size) {
    m_file_size = file_size;
    m_file_size_isSet = true;
}

bool OAIImageSizeDetails::is_file_size_Set() const{
    return m_file_size_isSet;
}

bool OAIImageSizeDetails::is_file_size_Valid() const{
    return m_file_size_isValid;
}

QString OAIImageSizeDetails::getFormat() const {
    return m_format;
}
void OAIImageSizeDetails::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAIImageSizeDetails::is_format_Set() const{
    return m_format_isSet;
}

bool OAIImageSizeDetails::is_format_Valid() const{
    return m_format_isValid;
}

qint32 OAIImageSizeDetails::getHeight() const {
    return m_height;
}
void OAIImageSizeDetails::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAIImageSizeDetails::is_height_Set() const{
    return m_height_isSet;
}

bool OAIImageSizeDetails::is_height_Valid() const{
    return m_height_isValid;
}

bool OAIImageSizeDetails::isIsLicensable() const {
    return m_is_licensable;
}
void OAIImageSizeDetails::setIsLicensable(const bool &is_licensable) {
    m_is_licensable = is_licensable;
    m_is_licensable_isSet = true;
}

bool OAIImageSizeDetails::is_is_licensable_Set() const{
    return m_is_licensable_isSet;
}

bool OAIImageSizeDetails::is_is_licensable_Valid() const{
    return m_is_licensable_isValid;
}

qint32 OAIImageSizeDetails::getWidth() const {
    return m_width;
}
void OAIImageSizeDetails::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAIImageSizeDetails::is_width_Set() const{
    return m_width_isSet;
}

bool OAIImageSizeDetails::is_width_Valid() const{
    return m_width_isValid;
}

bool OAIImageSizeDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_display_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_dpi_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_file_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_licensable_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageSizeDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
