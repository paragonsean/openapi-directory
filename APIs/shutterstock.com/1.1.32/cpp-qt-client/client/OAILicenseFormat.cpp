/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseFormat.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseFormat::OAILicenseFormat(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseFormat::OAILicenseFormat() {
    this->initializeModel();
}

OAILicenseFormat::~OAILicenseFormat() {}

void OAILicenseFormat::initializeModel() {

    m_description_isSet = false;
    m_description_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_min_resolution_isSet = false;
    m_min_resolution_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAILicenseFormat::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseFormat::fromJsonObject(QJsonObject json) {

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_min_resolution_isValid = ::OpenAPI::fromJsonValue(m_min_resolution, json[QString("min_resolution")]);
    m_min_resolution_isSet = !json[QString("min_resolution")].isNull() && m_min_resolution_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAILicenseFormat::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseFormat::asJsonObject() const {
    QJsonObject obj;
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_min_resolution_isSet) {
        obj.insert(QString("min_resolution"), ::OpenAPI::toJsonValue(m_min_resolution));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAILicenseFormat::getDescription() const {
    return m_description;
}
void OAILicenseFormat::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAILicenseFormat::is_description_Set() const{
    return m_description_isSet;
}

bool OAILicenseFormat::is_description_Valid() const{
    return m_description_isValid;
}

QString OAILicenseFormat::getFormat() const {
    return m_format;
}
void OAILicenseFormat::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAILicenseFormat::is_format_Set() const{
    return m_format_isSet;
}

bool OAILicenseFormat::is_format_Valid() const{
    return m_format_isValid;
}

QString OAILicenseFormat::getMediaType() const {
    return m_media_type;
}
void OAILicenseFormat::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAILicenseFormat::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAILicenseFormat::is_media_type_Valid() const{
    return m_media_type_isValid;
}

qint32 OAILicenseFormat::getMinResolution() const {
    return m_min_resolution;
}
void OAILicenseFormat::setMinResolution(const qint32 &min_resolution) {
    m_min_resolution = min_resolution;
    m_min_resolution_isSet = true;
}

bool OAILicenseFormat::is_min_resolution_Set() const{
    return m_min_resolution_isSet;
}

bool OAILicenseFormat::is_min_resolution_Valid() const{
    return m_min_resolution_isValid;
}

QString OAILicenseFormat::getSize() const {
    return m_size;
}
void OAILicenseFormat::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILicenseFormat::is_size_Set() const{
    return m_size_isSet;
}

bool OAILicenseFormat::is_size_Valid() const{
    return m_size_isValid;
}

bool OAILicenseFormat::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_min_resolution_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseFormat::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
