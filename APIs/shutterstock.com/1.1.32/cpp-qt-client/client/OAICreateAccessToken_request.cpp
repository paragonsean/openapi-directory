/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAccessToken_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAccessToken_request::OAICreateAccessToken_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAccessToken_request::OAICreateAccessToken_request() {
    this->initializeModel();
}

OAICreateAccessToken_request::~OAICreateAccessToken_request() {}

void OAICreateAccessToken_request::initializeModel() {

    m_client_id_isSet = false;
    m_client_id_isValid = false;

    m_client_secret_isSet = false;
    m_client_secret_isValid = false;

    m_code_isSet = false;
    m_code_isValid = false;

    m_expires_isSet = false;
    m_expires_isValid = false;

    m_grant_type_isSet = false;
    m_grant_type_isValid = false;

    m_realm_isSet = false;
    m_realm_isValid = false;

    m_refresh_token_isSet = false;
    m_refresh_token_isValid = false;
}

void OAICreateAccessToken_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAccessToken_request::fromJsonObject(QJsonObject json) {

    m_client_id_isValid = ::OpenAPI::fromJsonValue(m_client_id, json[QString("client_id")]);
    m_client_id_isSet = !json[QString("client_id")].isNull() && m_client_id_isValid;

    m_client_secret_isValid = ::OpenAPI::fromJsonValue(m_client_secret, json[QString("client_secret")]);
    m_client_secret_isSet = !json[QString("client_secret")].isNull() && m_client_secret_isValid;

    m_code_isValid = ::OpenAPI::fromJsonValue(m_code, json[QString("code")]);
    m_code_isSet = !json[QString("code")].isNull() && m_code_isValid;

    m_expires_isValid = ::OpenAPI::fromJsonValue(m_expires, json[QString("expires")]);
    m_expires_isSet = !json[QString("expires")].isNull() && m_expires_isValid;

    m_grant_type_isValid = ::OpenAPI::fromJsonValue(m_grant_type, json[QString("grant_type")]);
    m_grant_type_isSet = !json[QString("grant_type")].isNull() && m_grant_type_isValid;

    m_realm_isValid = ::OpenAPI::fromJsonValue(m_realm, json[QString("realm")]);
    m_realm_isSet = !json[QString("realm")].isNull() && m_realm_isValid;

    m_refresh_token_isValid = ::OpenAPI::fromJsonValue(m_refresh_token, json[QString("refresh_token")]);
    m_refresh_token_isSet = !json[QString("refresh_token")].isNull() && m_refresh_token_isValid;
}

QString OAICreateAccessToken_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAccessToken_request::asJsonObject() const {
    QJsonObject obj;
    if (m_client_id_isSet) {
        obj.insert(QString("client_id"), ::OpenAPI::toJsonValue(m_client_id));
    }
    if (m_client_secret_isSet) {
        obj.insert(QString("client_secret"), ::OpenAPI::toJsonValue(m_client_secret));
    }
    if (m_code_isSet) {
        obj.insert(QString("code"), ::OpenAPI::toJsonValue(m_code));
    }
    if (m_expires_isSet) {
        obj.insert(QString("expires"), ::OpenAPI::toJsonValue(m_expires));
    }
    if (m_grant_type_isSet) {
        obj.insert(QString("grant_type"), ::OpenAPI::toJsonValue(m_grant_type));
    }
    if (m_realm_isSet) {
        obj.insert(QString("realm"), ::OpenAPI::toJsonValue(m_realm));
    }
    if (m_refresh_token_isSet) {
        obj.insert(QString("refresh_token"), ::OpenAPI::toJsonValue(m_refresh_token));
    }
    return obj;
}

QString OAICreateAccessToken_request::getClientId() const {
    return m_client_id;
}
void OAICreateAccessToken_request::setClientId(const QString &client_id) {
    m_client_id = client_id;
    m_client_id_isSet = true;
}

bool OAICreateAccessToken_request::is_client_id_Set() const{
    return m_client_id_isSet;
}

bool OAICreateAccessToken_request::is_client_id_Valid() const{
    return m_client_id_isValid;
}

QString OAICreateAccessToken_request::getClientSecret() const {
    return m_client_secret;
}
void OAICreateAccessToken_request::setClientSecret(const QString &client_secret) {
    m_client_secret = client_secret;
    m_client_secret_isSet = true;
}

bool OAICreateAccessToken_request::is_client_secret_Set() const{
    return m_client_secret_isSet;
}

bool OAICreateAccessToken_request::is_client_secret_Valid() const{
    return m_client_secret_isValid;
}

QString OAICreateAccessToken_request::getCode() const {
    return m_code;
}
void OAICreateAccessToken_request::setCode(const QString &code) {
    m_code = code;
    m_code_isSet = true;
}

bool OAICreateAccessToken_request::is_code_Set() const{
    return m_code_isSet;
}

bool OAICreateAccessToken_request::is_code_Valid() const{
    return m_code_isValid;
}

bool OAICreateAccessToken_request::isExpires() const {
    return m_expires;
}
void OAICreateAccessToken_request::setExpires(const bool &expires) {
    m_expires = expires;
    m_expires_isSet = true;
}

bool OAICreateAccessToken_request::is_expires_Set() const{
    return m_expires_isSet;
}

bool OAICreateAccessToken_request::is_expires_Valid() const{
    return m_expires_isValid;
}

QString OAICreateAccessToken_request::getGrantType() const {
    return m_grant_type;
}
void OAICreateAccessToken_request::setGrantType(const QString &grant_type) {
    m_grant_type = grant_type;
    m_grant_type_isSet = true;
}

bool OAICreateAccessToken_request::is_grant_type_Set() const{
    return m_grant_type_isSet;
}

bool OAICreateAccessToken_request::is_grant_type_Valid() const{
    return m_grant_type_isValid;
}

QString OAICreateAccessToken_request::getRealm() const {
    return m_realm;
}
void OAICreateAccessToken_request::setRealm(const QString &realm) {
    m_realm = realm;
    m_realm_isSet = true;
}

bool OAICreateAccessToken_request::is_realm_Set() const{
    return m_realm_isSet;
}

bool OAICreateAccessToken_request::is_realm_Valid() const{
    return m_realm_isValid;
}

QString OAICreateAccessToken_request::getRefreshToken() const {
    return m_refresh_token;
}
void OAICreateAccessToken_request::setRefreshToken(const QString &refresh_token) {
    m_refresh_token = refresh_token;
    m_refresh_token_isSet = true;
}

bool OAICreateAccessToken_request::is_refresh_token_Set() const{
    return m_refresh_token_isSet;
}

bool OAICreateAccessToken_request::is_refresh_token_Valid() const{
    return m_refresh_token_isValid;
}

bool OAICreateAccessToken_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_client_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_client_secret_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_expires_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_grant_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_realm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_refresh_token_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAccessToken_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_client_id_isValid && m_grant_type_isValid && true;
}

} // namespace OpenAPI
