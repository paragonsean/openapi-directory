/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCollectionItem.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCollectionItem::OAICatalogCollectionItem(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCollectionItem::OAICatalogCollectionItem() {
    this->initializeModel();
}

OAICatalogCollectionItem::~OAICatalogCollectionItem() {}

void OAICatalogCollectionItem::initializeModel() {

    m_asset_isSet = false;
    m_asset_isValid = false;

    m_collection_ids_isSet = false;
    m_collection_ids_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;
}

void OAICatalogCollectionItem::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCollectionItem::fromJsonObject(QJsonObject json) {

    m_asset_isValid = ::OpenAPI::fromJsonValue(m_asset, json[QString("asset")]);
    m_asset_isSet = !json[QString("asset")].isNull() && m_asset_isValid;

    m_collection_ids_isValid = ::OpenAPI::fromJsonValue(m_collection_ids, json[QString("collection_ids")]);
    m_collection_ids_isSet = !json[QString("collection_ids")].isNull() && m_collection_ids_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;
}

QString OAICatalogCollectionItem::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCollectionItem::asJsonObject() const {
    QJsonObject obj;
    if (m_asset.isSet()) {
        obj.insert(QString("asset"), ::OpenAPI::toJsonValue(m_asset));
    }
    if (m_collection_ids.size() > 0) {
        obj.insert(QString("collection_ids"), ::OpenAPI::toJsonValue(m_collection_ids));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    return obj;
}

OAICatalogCollectionItem_asset OAICatalogCollectionItem::getAsset() const {
    return m_asset;
}
void OAICatalogCollectionItem::setAsset(const OAICatalogCollectionItem_asset &asset) {
    m_asset = asset;
    m_asset_isSet = true;
}

bool OAICatalogCollectionItem::is_asset_Set() const{
    return m_asset_isSet;
}

bool OAICatalogCollectionItem::is_asset_Valid() const{
    return m_asset_isValid;
}

QList<QString> OAICatalogCollectionItem::getCollectionIds() const {
    return m_collection_ids;
}
void OAICatalogCollectionItem::setCollectionIds(const QList<QString> &collection_ids) {
    m_collection_ids = collection_ids;
    m_collection_ids_isSet = true;
}

bool OAICatalogCollectionItem::is_collection_ids_Set() const{
    return m_collection_ids_isSet;
}

bool OAICatalogCollectionItem::is_collection_ids_Valid() const{
    return m_collection_ids_isValid;
}

QDateTime OAICatalogCollectionItem::getCreatedTime() const {
    return m_created_time;
}
void OAICatalogCollectionItem::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAICatalogCollectionItem::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAICatalogCollectionItem::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAICatalogCollectionItem::getId() const {
    return m_id;
}
void OAICatalogCollectionItem::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAICatalogCollectionItem::is_id_Set() const{
    return m_id_isSet;
}

bool OAICatalogCollectionItem::is_id_Valid() const{
    return m_id_isValid;
}

bool OAICatalogCollectionItem::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_collection_ids.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCollectionItem::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_asset_isValid && m_created_time_isValid && m_id_isValid && true;
}

} // namespace OpenAPI
