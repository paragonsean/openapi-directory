/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIOauthApi_H
#define OAI_OAIOauthApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICreateAccessToken_request.h"
#include "OAICreateAccessToken_request_1.h"
#include "OAIOauthAccessTokenResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIOauthApi : public QObject {
    Q_OBJECT

public:
    OAIOauthApi(const int timeOut = 0);
    ~OAIOauthApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  client_id QString [required]
    * @param[in]  redirect_uri QString [required]
    * @param[in]  response_type QString [required]
    * @param[in]  state QString [required]
    * @param[in]  realm QString [optional]
    * @param[in]  scope QString [optional]
    */
    virtual void authorize(const QString &client_id, const QString &redirect_uri, const QString &response_type, const QString &state, const ::OpenAPI::OptionalParam<QString> &realm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &scope = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_create_access_token_request OAICreateAccessToken_request [optional]
    */
    virtual void createAccessToken(const ::OpenAPI::OptionalParam<OAICreateAccessToken_request> &oai_create_access_token_request = ::OpenAPI::OptionalParam<OAICreateAccessToken_request>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void authorizeCallback(OAIHttpRequestWorker *worker);
    void createAccessTokenCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void authorizeSignal();
    void createAccessTokenSignal(OAIOauthAccessTokenResponse summary);


    void authorizeSignalFull(OAIHttpRequestWorker *worker);
    void createAccessTokenSignalFull(OAIHttpRequestWorker *worker, OAIOauthAccessTokenResponse summary);

    Q_DECL_DEPRECATED_X("Use authorizeSignalError() instead")
    void authorizeSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccessTokenSignalError() instead")
    void createAccessTokenSignalE(OAIOauthAccessTokenResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccessTokenSignalError(OAIOauthAccessTokenResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use authorizeSignalErrorFull() instead")
    void authorizeSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void authorizeSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createAccessTokenSignalErrorFull() instead")
    void createAccessTokenSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createAccessTokenSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
