/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseEditorialContentRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseEditorialContentRequest::OAILicenseEditorialContentRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseEditorialContentRequest::OAILicenseEditorialContentRequest() {
    this->initializeModel();
}

OAILicenseEditorialContentRequest::~OAILicenseEditorialContentRequest() {}

void OAILicenseEditorialContentRequest::initializeModel() {

    m_country_isSet = false;
    m_country_isValid = false;

    m_editorial_isSet = false;
    m_editorial_isValid = false;
}

void OAILicenseEditorialContentRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseEditorialContentRequest::fromJsonObject(QJsonObject json) {

    m_country_isValid = ::OpenAPI::fromJsonValue(m_country, json[QString("country")]);
    m_country_isSet = !json[QString("country")].isNull() && m_country_isValid;

    m_editorial_isValid = ::OpenAPI::fromJsonValue(m_editorial, json[QString("editorial")]);
    m_editorial_isSet = !json[QString("editorial")].isNull() && m_editorial_isValid;
}

QString OAILicenseEditorialContentRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseEditorialContentRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_country.isSet()) {
        obj.insert(QString("country"), ::OpenAPI::toJsonValue(m_country));
    }
    if (m_editorial.size() > 0) {
        obj.insert(QString("editorial"), ::OpenAPI::toJsonValue(m_editorial));
    }
    return obj;
}

OAIISOCountryCode OAILicenseEditorialContentRequest::getCountry() const {
    return m_country;
}
void OAILicenseEditorialContentRequest::setCountry(const OAIISOCountryCode &country) {
    m_country = country;
    m_country_isSet = true;
}

bool OAILicenseEditorialContentRequest::is_country_Set() const{
    return m_country_isSet;
}

bool OAILicenseEditorialContentRequest::is_country_Valid() const{
    return m_country_isValid;
}

QList<OAILicenseEditorialContent> OAILicenseEditorialContentRequest::getEditorial() const {
    return m_editorial;
}
void OAILicenseEditorialContentRequest::setEditorial(const QList<OAILicenseEditorialContent> &editorial) {
    m_editorial = editorial;
    m_editorial_isSet = true;
}

bool OAILicenseEditorialContentRequest::is_editorial_Set() const{
    return m_editorial_isSet;
}

bool OAILicenseEditorialContentRequest::is_editorial_Valid() const{
    return m_editorial_isValid;
}

bool OAILicenseEditorialContentRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseEditorialContentRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_country_isValid && m_editorial_isValid && true;
}

} // namespace OpenAPI
