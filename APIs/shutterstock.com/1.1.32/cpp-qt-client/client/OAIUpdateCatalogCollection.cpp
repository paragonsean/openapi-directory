/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUpdateCatalogCollection.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUpdateCatalogCollection::OAIUpdateCatalogCollection(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUpdateCatalogCollection::OAIUpdateCatalogCollection() {
    this->initializeModel();
}

OAIUpdateCatalogCollection::~OAIUpdateCatalogCollection() {}

void OAIUpdateCatalogCollection::initializeModel() {

    m_cover_asset_isSet = false;
    m_cover_asset_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_visibility_isSet = false;
    m_visibility_isValid = false;
}

void OAIUpdateCatalogCollection::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUpdateCatalogCollection::fromJsonObject(QJsonObject json) {

    m_cover_asset_isValid = ::OpenAPI::fromJsonValue(m_cover_asset, json[QString("cover_asset")]);
    m_cover_asset_isSet = !json[QString("cover_asset")].isNull() && m_cover_asset_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_visibility_isValid = ::OpenAPI::fromJsonValue(m_visibility, json[QString("visibility")]);
    m_visibility_isSet = !json[QString("visibility")].isNull() && m_visibility_isValid;
}

QString OAIUpdateCatalogCollection::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUpdateCatalogCollection::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_asset.isSet()) {
        obj.insert(QString("cover_asset"), ::OpenAPI::toJsonValue(m_cover_asset));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_visibility_isSet) {
        obj.insert(QString("visibility"), ::OpenAPI::toJsonValue(m_visibility));
    }
    return obj;
}

OAIUpdateCatalogCollection_cover_asset OAIUpdateCatalogCollection::getCoverAsset() const {
    return m_cover_asset;
}
void OAIUpdateCatalogCollection::setCoverAsset(const OAIUpdateCatalogCollection_cover_asset &cover_asset) {
    m_cover_asset = cover_asset;
    m_cover_asset_isSet = true;
}

bool OAIUpdateCatalogCollection::is_cover_asset_Set() const{
    return m_cover_asset_isSet;
}

bool OAIUpdateCatalogCollection::is_cover_asset_Valid() const{
    return m_cover_asset_isValid;
}

QString OAIUpdateCatalogCollection::getName() const {
    return m_name;
}
void OAIUpdateCatalogCollection::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIUpdateCatalogCollection::is_name_Set() const{
    return m_name_isSet;
}

bool OAIUpdateCatalogCollection::is_name_Valid() const{
    return m_name_isValid;
}

QString OAIUpdateCatalogCollection::getVisibility() const {
    return m_visibility;
}
void OAIUpdateCatalogCollection::setVisibility(const QString &visibility) {
    m_visibility = visibility;
    m_visibility_isSet = true;
}

bool OAIUpdateCatalogCollection::is_visibility_Set() const{
    return m_visibility_isSet;
}

bool OAIUpdateCatalogCollection::is_visibility_Valid() const{
    return m_visibility_isValid;
}

bool OAIUpdateCatalogCollection::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_asset.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_visibility_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUpdateCatalogCollection::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
