/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIUserDetails.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIUserDetails::OAIUserDetails(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIUserDetails::OAIUserDetails() {
    this->initializeModel();
}

OAIUserDetails::~OAIUserDetails() {}

void OAIUserDetails::initializeModel() {

    m_contributor_id_isSet = false;
    m_contributor_id_isValid = false;

    m_customer_id_isSet = false;
    m_customer_id_isValid = false;

    m_email_isSet = false;
    m_email_isValid = false;

    m_first_name_isSet = false;
    m_first_name_isValid = false;

    m_full_name_isSet = false;
    m_full_name_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_is_premier_isSet = false;
    m_is_premier_isValid = false;

    m_is_premier_parent_isSet = false;
    m_is_premier_parent_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_last_name_isSet = false;
    m_last_name_isValid = false;

    m_only_enhanced_license_isSet = false;
    m_only_enhanced_license_isValid = false;

    m_only_sensitive_use_isSet = false;
    m_only_sensitive_use_isValid = false;

    m_organization_id_isSet = false;
    m_organization_id_isValid = false;

    m_premier_permissions_isSet = false;
    m_premier_permissions_isValid = false;

    m_username_isSet = false;
    m_username_isValid = false;
}

void OAIUserDetails::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIUserDetails::fromJsonObject(QJsonObject json) {

    m_contributor_id_isValid = ::OpenAPI::fromJsonValue(m_contributor_id, json[QString("contributor_id")]);
    m_contributor_id_isSet = !json[QString("contributor_id")].isNull() && m_contributor_id_isValid;

    m_customer_id_isValid = ::OpenAPI::fromJsonValue(m_customer_id, json[QString("customer_id")]);
    m_customer_id_isSet = !json[QString("customer_id")].isNull() && m_customer_id_isValid;

    m_email_isValid = ::OpenAPI::fromJsonValue(m_email, json[QString("email")]);
    m_email_isSet = !json[QString("email")].isNull() && m_email_isValid;

    m_first_name_isValid = ::OpenAPI::fromJsonValue(m_first_name, json[QString("first_name")]);
    m_first_name_isSet = !json[QString("first_name")].isNull() && m_first_name_isValid;

    m_full_name_isValid = ::OpenAPI::fromJsonValue(m_full_name, json[QString("full_name")]);
    m_full_name_isSet = !json[QString("full_name")].isNull() && m_full_name_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_is_premier_isValid = ::OpenAPI::fromJsonValue(m_is_premier, json[QString("is_premier")]);
    m_is_premier_isSet = !json[QString("is_premier")].isNull() && m_is_premier_isValid;

    m_is_premier_parent_isValid = ::OpenAPI::fromJsonValue(m_is_premier_parent, json[QString("is_premier_parent")]);
    m_is_premier_parent_isSet = !json[QString("is_premier_parent")].isNull() && m_is_premier_parent_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_last_name_isValid = ::OpenAPI::fromJsonValue(m_last_name, json[QString("last_name")]);
    m_last_name_isSet = !json[QString("last_name")].isNull() && m_last_name_isValid;

    m_only_enhanced_license_isValid = ::OpenAPI::fromJsonValue(m_only_enhanced_license, json[QString("only_enhanced_license")]);
    m_only_enhanced_license_isSet = !json[QString("only_enhanced_license")].isNull() && m_only_enhanced_license_isValid;

    m_only_sensitive_use_isValid = ::OpenAPI::fromJsonValue(m_only_sensitive_use, json[QString("only_sensitive_use")]);
    m_only_sensitive_use_isSet = !json[QString("only_sensitive_use")].isNull() && m_only_sensitive_use_isValid;

    m_organization_id_isValid = ::OpenAPI::fromJsonValue(m_organization_id, json[QString("organization_id")]);
    m_organization_id_isSet = !json[QString("organization_id")].isNull() && m_organization_id_isValid;

    m_premier_permissions_isValid = ::OpenAPI::fromJsonValue(m_premier_permissions, json[QString("premier_permissions")]);
    m_premier_permissions_isSet = !json[QString("premier_permissions")].isNull() && m_premier_permissions_isValid;

    m_username_isValid = ::OpenAPI::fromJsonValue(m_username, json[QString("username")]);
    m_username_isSet = !json[QString("username")].isNull() && m_username_isValid;
}

QString OAIUserDetails::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIUserDetails::asJsonObject() const {
    QJsonObject obj;
    if (m_contributor_id_isSet) {
        obj.insert(QString("contributor_id"), ::OpenAPI::toJsonValue(m_contributor_id));
    }
    if (m_customer_id_isSet) {
        obj.insert(QString("customer_id"), ::OpenAPI::toJsonValue(m_customer_id));
    }
    if (m_email_isSet) {
        obj.insert(QString("email"), ::OpenAPI::toJsonValue(m_email));
    }
    if (m_first_name_isSet) {
        obj.insert(QString("first_name"), ::OpenAPI::toJsonValue(m_first_name));
    }
    if (m_full_name_isSet) {
        obj.insert(QString("full_name"), ::OpenAPI::toJsonValue(m_full_name));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_is_premier_isSet) {
        obj.insert(QString("is_premier"), ::OpenAPI::toJsonValue(m_is_premier));
    }
    if (m_is_premier_parent_isSet) {
        obj.insert(QString("is_premier_parent"), ::OpenAPI::toJsonValue(m_is_premier_parent));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_last_name_isSet) {
        obj.insert(QString("last_name"), ::OpenAPI::toJsonValue(m_last_name));
    }
    if (m_only_enhanced_license_isSet) {
        obj.insert(QString("only_enhanced_license"), ::OpenAPI::toJsonValue(m_only_enhanced_license));
    }
    if (m_only_sensitive_use_isSet) {
        obj.insert(QString("only_sensitive_use"), ::OpenAPI::toJsonValue(m_only_sensitive_use));
    }
    if (m_organization_id_isSet) {
        obj.insert(QString("organization_id"), ::OpenAPI::toJsonValue(m_organization_id));
    }
    if (m_premier_permissions.size() > 0) {
        obj.insert(QString("premier_permissions"), ::OpenAPI::toJsonValue(m_premier_permissions));
    }
    if (m_username_isSet) {
        obj.insert(QString("username"), ::OpenAPI::toJsonValue(m_username));
    }
    return obj;
}

QString OAIUserDetails::getContributorId() const {
    return m_contributor_id;
}
void OAIUserDetails::setContributorId(const QString &contributor_id) {
    m_contributor_id = contributor_id;
    m_contributor_id_isSet = true;
}

bool OAIUserDetails::is_contributor_id_Set() const{
    return m_contributor_id_isSet;
}

bool OAIUserDetails::is_contributor_id_Valid() const{
    return m_contributor_id_isValid;
}

QString OAIUserDetails::getCustomerId() const {
    return m_customer_id;
}
void OAIUserDetails::setCustomerId(const QString &customer_id) {
    m_customer_id = customer_id;
    m_customer_id_isSet = true;
}

bool OAIUserDetails::is_customer_id_Set() const{
    return m_customer_id_isSet;
}

bool OAIUserDetails::is_customer_id_Valid() const{
    return m_customer_id_isValid;
}

QString OAIUserDetails::getEmail() const {
    return m_email;
}
void OAIUserDetails::setEmail(const QString &email) {
    m_email = email;
    m_email_isSet = true;
}

bool OAIUserDetails::is_email_Set() const{
    return m_email_isSet;
}

bool OAIUserDetails::is_email_Valid() const{
    return m_email_isValid;
}

QString OAIUserDetails::getFirstName() const {
    return m_first_name;
}
void OAIUserDetails::setFirstName(const QString &first_name) {
    m_first_name = first_name;
    m_first_name_isSet = true;
}

bool OAIUserDetails::is_first_name_Set() const{
    return m_first_name_isSet;
}

bool OAIUserDetails::is_first_name_Valid() const{
    return m_first_name_isValid;
}

QString OAIUserDetails::getFullName() const {
    return m_full_name;
}
void OAIUserDetails::setFullName(const QString &full_name) {
    m_full_name = full_name;
    m_full_name_isSet = true;
}

bool OAIUserDetails::is_full_name_Set() const{
    return m_full_name_isSet;
}

bool OAIUserDetails::is_full_name_Valid() const{
    return m_full_name_isValid;
}

QString OAIUserDetails::getId() const {
    return m_id;
}
void OAIUserDetails::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIUserDetails::is_id_Set() const{
    return m_id_isSet;
}

bool OAIUserDetails::is_id_Valid() const{
    return m_id_isValid;
}

bool OAIUserDetails::isIsPremier() const {
    return m_is_premier;
}
void OAIUserDetails::setIsPremier(const bool &is_premier) {
    m_is_premier = is_premier;
    m_is_premier_isSet = true;
}

bool OAIUserDetails::is_is_premier_Set() const{
    return m_is_premier_isSet;
}

bool OAIUserDetails::is_is_premier_Valid() const{
    return m_is_premier_isValid;
}

bool OAIUserDetails::isIsPremierParent() const {
    return m_is_premier_parent;
}
void OAIUserDetails::setIsPremierParent(const bool &is_premier_parent) {
    m_is_premier_parent = is_premier_parent;
    m_is_premier_parent_isSet = true;
}

bool OAIUserDetails::is_is_premier_parent_Set() const{
    return m_is_premier_parent_isSet;
}

bool OAIUserDetails::is_is_premier_parent_Valid() const{
    return m_is_premier_parent_isValid;
}

QString OAIUserDetails::getLanguage() const {
    return m_language;
}
void OAIUserDetails::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIUserDetails::is_language_Set() const{
    return m_language_isSet;
}

bool OAIUserDetails::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIUserDetails::getLastName() const {
    return m_last_name;
}
void OAIUserDetails::setLastName(const QString &last_name) {
    m_last_name = last_name;
    m_last_name_isSet = true;
}

bool OAIUserDetails::is_last_name_Set() const{
    return m_last_name_isSet;
}

bool OAIUserDetails::is_last_name_Valid() const{
    return m_last_name_isValid;
}

bool OAIUserDetails::isOnlyEnhancedLicense() const {
    return m_only_enhanced_license;
}
void OAIUserDetails::setOnlyEnhancedLicense(const bool &only_enhanced_license) {
    m_only_enhanced_license = only_enhanced_license;
    m_only_enhanced_license_isSet = true;
}

bool OAIUserDetails::is_only_enhanced_license_Set() const{
    return m_only_enhanced_license_isSet;
}

bool OAIUserDetails::is_only_enhanced_license_Valid() const{
    return m_only_enhanced_license_isValid;
}

bool OAIUserDetails::isOnlySensitiveUse() const {
    return m_only_sensitive_use;
}
void OAIUserDetails::setOnlySensitiveUse(const bool &only_sensitive_use) {
    m_only_sensitive_use = only_sensitive_use;
    m_only_sensitive_use_isSet = true;
}

bool OAIUserDetails::is_only_sensitive_use_Set() const{
    return m_only_sensitive_use_isSet;
}

bool OAIUserDetails::is_only_sensitive_use_Valid() const{
    return m_only_sensitive_use_isValid;
}

QString OAIUserDetails::getOrganizationId() const {
    return m_organization_id;
}
void OAIUserDetails::setOrganizationId(const QString &organization_id) {
    m_organization_id = organization_id;
    m_organization_id_isSet = true;
}

bool OAIUserDetails::is_organization_id_Set() const{
    return m_organization_id_isSet;
}

bool OAIUserDetails::is_organization_id_Valid() const{
    return m_organization_id_isValid;
}

QList<QString> OAIUserDetails::getPremierPermissions() const {
    return m_premier_permissions;
}
void OAIUserDetails::setPremierPermissions(const QList<QString> &premier_permissions) {
    m_premier_permissions = premier_permissions;
    m_premier_permissions_isSet = true;
}

bool OAIUserDetails::is_premier_permissions_Set() const{
    return m_premier_permissions_isSet;
}

bool OAIUserDetails::is_premier_permissions_Valid() const{
    return m_premier_permissions_isValid;
}

QString OAIUserDetails::getUsername() const {
    return m_username;
}
void OAIUserDetails::setUsername(const QString &username) {
    m_username = username;
    m_username_isSet = true;
}

bool OAIUserDetails::is_username_Set() const{
    return m_username_isSet;
}

bool OAIUserDetails::is_username_Valid() const{
    return m_username_isValid;
}

bool OAIUserDetails::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contributor_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_customer_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_email_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_first_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_full_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_premier_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_premier_parent_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_last_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_enhanced_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_only_sensitive_use_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_organization_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_premier_permissions.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_username_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIUserDetails::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
