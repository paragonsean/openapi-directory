/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseVideoRequest.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseVideoRequest::OAILicenseVideoRequest(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseVideoRequest::OAILicenseVideoRequest() {
    this->initializeModel();
}

OAILicenseVideoRequest::~OAILicenseVideoRequest() {}

void OAILicenseVideoRequest::initializeModel() {

    m_videos_isSet = false;
    m_videos_isValid = false;
}

void OAILicenseVideoRequest::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseVideoRequest::fromJsonObject(QJsonObject json) {

    m_videos_isValid = ::OpenAPI::fromJsonValue(m_videos, json[QString("videos")]);
    m_videos_isSet = !json[QString("videos")].isNull() && m_videos_isValid;
}

QString OAILicenseVideoRequest::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseVideoRequest::asJsonObject() const {
    QJsonObject obj;
    if (m_videos.size() > 0) {
        obj.insert(QString("videos"), ::OpenAPI::toJsonValue(m_videos));
    }
    return obj;
}

QList<OAILicenseVideo> OAILicenseVideoRequest::getVideos() const {
    return m_videos;
}
void OAILicenseVideoRequest::setVideos(const QList<OAILicenseVideo> &videos) {
    m_videos = videos;
    m_videos_isSet = true;
}

bool OAILicenseVideoRequest::is_videos_Set() const{
    return m_videos_isSet;
}

bool OAILicenseVideoRequest::is_videos_Valid() const{
    return m_videos_isValid;
}

bool OAILicenseVideoRequest::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_videos.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseVideoRequest::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_videos_isValid && true;
}

} // namespace OpenAPI
