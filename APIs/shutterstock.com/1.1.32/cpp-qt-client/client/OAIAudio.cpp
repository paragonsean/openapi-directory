/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudio.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudio::OAIAudio(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudio::OAIAudio() {
    this->initializeModel();
}

OAIAudio::~OAIAudio() {}

void OAIAudio::initializeModel() {

    m_added_date_isSet = false;
    m_added_date_isValid = false;

    m_affiliate_url_isSet = false;
    m_affiliate_url_isValid = false;

    m_album_isSet = false;
    m_album_isValid = false;

    m_artists_isSet = false;
    m_artists_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_bpm_isSet = false;
    m_bpm_isValid = false;

    m_contributor_isSet = false;
    m_contributor_isValid = false;

    m_deleted_time_isSet = false;
    m_deleted_time_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_duration_isSet = false;
    m_duration_isValid = false;

    m_genres_isSet = false;
    m_genres_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_instruments_isSet = false;
    m_instruments_isValid = false;

    m_is_adult_isSet = false;
    m_is_adult_isValid = false;

    m_is_instrumental_isSet = false;
    m_is_instrumental_isValid = false;

    m_isrc_isSet = false;
    m_isrc_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_lyrics_isSet = false;
    m_lyrics_isValid = false;

    m_media_type_isSet = false;
    m_media_type_isValid = false;

    m_model_releases_isSet = false;
    m_model_releases_isValid = false;

    m_moods_isSet = false;
    m_moods_isValid = false;

    m_published_time_isSet = false;
    m_published_time_isValid = false;

    m_recording_version_isSet = false;
    m_recording_version_isValid = false;

    m_releases_isSet = false;
    m_releases_isValid = false;

    m_similar_artists_isSet = false;
    m_similar_artists_isValid = false;

    m_submitted_time_isSet = false;
    m_submitted_time_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_url_isSet = false;
    m_url_isValid = false;

    m_vocal_description_isSet = false;
    m_vocal_description_isValid = false;
}

void OAIAudio::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudio::fromJsonObject(QJsonObject json) {

    m_added_date_isValid = ::OpenAPI::fromJsonValue(m_added_date, json[QString("added_date")]);
    m_added_date_isSet = !json[QString("added_date")].isNull() && m_added_date_isValid;

    m_affiliate_url_isValid = ::OpenAPI::fromJsonValue(m_affiliate_url, json[QString("affiliate_url")]);
    m_affiliate_url_isSet = !json[QString("affiliate_url")].isNull() && m_affiliate_url_isValid;

    m_album_isValid = ::OpenAPI::fromJsonValue(m_album, json[QString("album")]);
    m_album_isSet = !json[QString("album")].isNull() && m_album_isValid;

    m_artists_isValid = ::OpenAPI::fromJsonValue(m_artists, json[QString("artists")]);
    m_artists_isSet = !json[QString("artists")].isNull() && m_artists_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_bpm_isValid = ::OpenAPI::fromJsonValue(m_bpm, json[QString("bpm")]);
    m_bpm_isSet = !json[QString("bpm")].isNull() && m_bpm_isValid;

    m_contributor_isValid = ::OpenAPI::fromJsonValue(m_contributor, json[QString("contributor")]);
    m_contributor_isSet = !json[QString("contributor")].isNull() && m_contributor_isValid;

    m_deleted_time_isValid = ::OpenAPI::fromJsonValue(m_deleted_time, json[QString("deleted_time")]);
    m_deleted_time_isSet = !json[QString("deleted_time")].isNull() && m_deleted_time_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_duration_isValid = ::OpenAPI::fromJsonValue(m_duration, json[QString("duration")]);
    m_duration_isSet = !json[QString("duration")].isNull() && m_duration_isValid;

    m_genres_isValid = ::OpenAPI::fromJsonValue(m_genres, json[QString("genres")]);
    m_genres_isSet = !json[QString("genres")].isNull() && m_genres_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_instruments_isValid = ::OpenAPI::fromJsonValue(m_instruments, json[QString("instruments")]);
    m_instruments_isSet = !json[QString("instruments")].isNull() && m_instruments_isValid;

    m_is_adult_isValid = ::OpenAPI::fromJsonValue(m_is_adult, json[QString("is_adult")]);
    m_is_adult_isSet = !json[QString("is_adult")].isNull() && m_is_adult_isValid;

    m_is_instrumental_isValid = ::OpenAPI::fromJsonValue(m_is_instrumental, json[QString("is_instrumental")]);
    m_is_instrumental_isSet = !json[QString("is_instrumental")].isNull() && m_is_instrumental_isValid;

    m_isrc_isValid = ::OpenAPI::fromJsonValue(m_isrc, json[QString("isrc")]);
    m_isrc_isSet = !json[QString("isrc")].isNull() && m_isrc_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_lyrics_isValid = ::OpenAPI::fromJsonValue(m_lyrics, json[QString("lyrics")]);
    m_lyrics_isSet = !json[QString("lyrics")].isNull() && m_lyrics_isValid;

    m_media_type_isValid = ::OpenAPI::fromJsonValue(m_media_type, json[QString("media_type")]);
    m_media_type_isSet = !json[QString("media_type")].isNull() && m_media_type_isValid;

    m_model_releases_isValid = ::OpenAPI::fromJsonValue(m_model_releases, json[QString("model_releases")]);
    m_model_releases_isSet = !json[QString("model_releases")].isNull() && m_model_releases_isValid;

    m_moods_isValid = ::OpenAPI::fromJsonValue(m_moods, json[QString("moods")]);
    m_moods_isSet = !json[QString("moods")].isNull() && m_moods_isValid;

    m_published_time_isValid = ::OpenAPI::fromJsonValue(m_published_time, json[QString("published_time")]);
    m_published_time_isSet = !json[QString("published_time")].isNull() && m_published_time_isValid;

    m_recording_version_isValid = ::OpenAPI::fromJsonValue(m_recording_version, json[QString("recording_version")]);
    m_recording_version_isSet = !json[QString("recording_version")].isNull() && m_recording_version_isValid;

    m_releases_isValid = ::OpenAPI::fromJsonValue(m_releases, json[QString("releases")]);
    m_releases_isSet = !json[QString("releases")].isNull() && m_releases_isValid;

    m_similar_artists_isValid = ::OpenAPI::fromJsonValue(m_similar_artists, json[QString("similar_artists")]);
    m_similar_artists_isSet = !json[QString("similar_artists")].isNull() && m_similar_artists_isValid;

    m_submitted_time_isValid = ::OpenAPI::fromJsonValue(m_submitted_time, json[QString("submitted_time")]);
    m_submitted_time_isSet = !json[QString("submitted_time")].isNull() && m_submitted_time_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_url_isValid = ::OpenAPI::fromJsonValue(m_url, json[QString("url")]);
    m_url_isSet = !json[QString("url")].isNull() && m_url_isValid;

    m_vocal_description_isValid = ::OpenAPI::fromJsonValue(m_vocal_description, json[QString("vocal_description")]);
    m_vocal_description_isSet = !json[QString("vocal_description")].isNull() && m_vocal_description_isValid;
}

QString OAIAudio::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudio::asJsonObject() const {
    QJsonObject obj;
    if (m_added_date_isSet) {
        obj.insert(QString("added_date"), ::OpenAPI::toJsonValue(m_added_date));
    }
    if (m_affiliate_url_isSet) {
        obj.insert(QString("affiliate_url"), ::OpenAPI::toJsonValue(m_affiliate_url));
    }
    if (m_album.isSet()) {
        obj.insert(QString("album"), ::OpenAPI::toJsonValue(m_album));
    }
    if (m_artists.size() > 0) {
        obj.insert(QString("artists"), ::OpenAPI::toJsonValue(m_artists));
    }
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_bpm_isSet) {
        obj.insert(QString("bpm"), ::OpenAPI::toJsonValue(m_bpm));
    }
    if (m_contributor.isSet()) {
        obj.insert(QString("contributor"), ::OpenAPI::toJsonValue(m_contributor));
    }
    if (m_deleted_time_isSet) {
        obj.insert(QString("deleted_time"), ::OpenAPI::toJsonValue(m_deleted_time));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_duration_isSet) {
        obj.insert(QString("duration"), ::OpenAPI::toJsonValue(m_duration));
    }
    if (m_genres.size() > 0) {
        obj.insert(QString("genres"), ::OpenAPI::toJsonValue(m_genres));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_instruments.size() > 0) {
        obj.insert(QString("instruments"), ::OpenAPI::toJsonValue(m_instruments));
    }
    if (m_is_adult_isSet) {
        obj.insert(QString("is_adult"), ::OpenAPI::toJsonValue(m_is_adult));
    }
    if (m_is_instrumental_isSet) {
        obj.insert(QString("is_instrumental"), ::OpenAPI::toJsonValue(m_is_instrumental));
    }
    if (m_isrc_isSet) {
        obj.insert(QString("isrc"), ::OpenAPI::toJsonValue(m_isrc));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_lyrics_isSet) {
        obj.insert(QString("lyrics"), ::OpenAPI::toJsonValue(m_lyrics));
    }
    if (m_media_type_isSet) {
        obj.insert(QString("media_type"), ::OpenAPI::toJsonValue(m_media_type));
    }
    if (m_model_releases.size() > 0) {
        obj.insert(QString("model_releases"), ::OpenAPI::toJsonValue(m_model_releases));
    }
    if (m_moods.size() > 0) {
        obj.insert(QString("moods"), ::OpenAPI::toJsonValue(m_moods));
    }
    if (m_published_time_isSet) {
        obj.insert(QString("published_time"), ::OpenAPI::toJsonValue(m_published_time));
    }
    if (m_recording_version_isSet) {
        obj.insert(QString("recording_version"), ::OpenAPI::toJsonValue(m_recording_version));
    }
    if (m_releases.size() > 0) {
        obj.insert(QString("releases"), ::OpenAPI::toJsonValue(m_releases));
    }
    if (m_similar_artists.size() > 0) {
        obj.insert(QString("similar_artists"), ::OpenAPI::toJsonValue(m_similar_artists));
    }
    if (m_submitted_time_isSet) {
        obj.insert(QString("submitted_time"), ::OpenAPI::toJsonValue(m_submitted_time));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_url_isSet) {
        obj.insert(QString("url"), ::OpenAPI::toJsonValue(m_url));
    }
    if (m_vocal_description_isSet) {
        obj.insert(QString("vocal_description"), ::OpenAPI::toJsonValue(m_vocal_description));
    }
    return obj;
}

QDate OAIAudio::getAddedDate() const {
    return m_added_date;
}
void OAIAudio::setAddedDate(const QDate &added_date) {
    m_added_date = added_date;
    m_added_date_isSet = true;
}

bool OAIAudio::is_added_date_Set() const{
    return m_added_date_isSet;
}

bool OAIAudio::is_added_date_Valid() const{
    return m_added_date_isValid;
}

QString OAIAudio::getAffiliateUrl() const {
    return m_affiliate_url;
}
void OAIAudio::setAffiliateUrl(const QString &affiliate_url) {
    m_affiliate_url = affiliate_url;
    m_affiliate_url_isSet = true;
}

bool OAIAudio::is_affiliate_url_Set() const{
    return m_affiliate_url_isSet;
}

bool OAIAudio::is_affiliate_url_Valid() const{
    return m_affiliate_url_isValid;
}

OAIAlbum OAIAudio::getAlbum() const {
    return m_album;
}
void OAIAudio::setAlbum(const OAIAlbum &album) {
    m_album = album;
    m_album_isSet = true;
}

bool OAIAudio::is_album_Set() const{
    return m_album_isSet;
}

bool OAIAudio::is_album_Valid() const{
    return m_album_isValid;
}

QList<OAIArtist> OAIAudio::getArtists() const {
    return m_artists;
}
void OAIAudio::setArtists(const QList<OAIArtist> &artists) {
    m_artists = artists;
    m_artists_isSet = true;
}

bool OAIAudio::is_artists_Set() const{
    return m_artists_isSet;
}

bool OAIAudio::is_artists_Valid() const{
    return m_artists_isValid;
}

OAIAudioAssets OAIAudio::getAssets() const {
    return m_assets;
}
void OAIAudio::setAssets(const OAIAudioAssets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIAudio::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIAudio::is_assets_Valid() const{
    return m_assets_isValid;
}

qint32 OAIAudio::getBpm() const {
    return m_bpm;
}
void OAIAudio::setBpm(const qint32 &bpm) {
    m_bpm = bpm;
    m_bpm_isSet = true;
}

bool OAIAudio::is_bpm_Set() const{
    return m_bpm_isSet;
}

bool OAIAudio::is_bpm_Valid() const{
    return m_bpm_isValid;
}

OAIContributor OAIAudio::getContributor() const {
    return m_contributor;
}
void OAIAudio::setContributor(const OAIContributor &contributor) {
    m_contributor = contributor;
    m_contributor_isSet = true;
}

bool OAIAudio::is_contributor_Set() const{
    return m_contributor_isSet;
}

bool OAIAudio::is_contributor_Valid() const{
    return m_contributor_isValid;
}

QDateTime OAIAudio::getDeletedTime() const {
    return m_deleted_time;
}
void OAIAudio::setDeletedTime(const QDateTime &deleted_time) {
    m_deleted_time = deleted_time;
    m_deleted_time_isSet = true;
}

bool OAIAudio::is_deleted_time_Set() const{
    return m_deleted_time_isSet;
}

bool OAIAudio::is_deleted_time_Valid() const{
    return m_deleted_time_isValid;
}

QString OAIAudio::getDescription() const {
    return m_description;
}
void OAIAudio::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIAudio::is_description_Set() const{
    return m_description_isSet;
}

bool OAIAudio::is_description_Valid() const{
    return m_description_isValid;
}

double OAIAudio::getDuration() const {
    return m_duration;
}
void OAIAudio::setDuration(const double &duration) {
    m_duration = duration;
    m_duration_isSet = true;
}

bool OAIAudio::is_duration_Set() const{
    return m_duration_isSet;
}

bool OAIAudio::is_duration_Valid() const{
    return m_duration_isValid;
}

QList<QString> OAIAudio::getGenres() const {
    return m_genres;
}
void OAIAudio::setGenres(const QList<QString> &genres) {
    m_genres = genres;
    m_genres_isSet = true;
}

bool OAIAudio::is_genres_Set() const{
    return m_genres_isSet;
}

bool OAIAudio::is_genres_Valid() const{
    return m_genres_isValid;
}

QString OAIAudio::getId() const {
    return m_id;
}
void OAIAudio::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIAudio::is_id_Set() const{
    return m_id_isSet;
}

bool OAIAudio::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIAudio::getInstruments() const {
    return m_instruments;
}
void OAIAudio::setInstruments(const QList<QString> &instruments) {
    m_instruments = instruments;
    m_instruments_isSet = true;
}

bool OAIAudio::is_instruments_Set() const{
    return m_instruments_isSet;
}

bool OAIAudio::is_instruments_Valid() const{
    return m_instruments_isValid;
}

bool OAIAudio::isIsAdult() const {
    return m_is_adult;
}
void OAIAudio::setIsAdult(const bool &is_adult) {
    m_is_adult = is_adult;
    m_is_adult_isSet = true;
}

bool OAIAudio::is_is_adult_Set() const{
    return m_is_adult_isSet;
}

bool OAIAudio::is_is_adult_Valid() const{
    return m_is_adult_isValid;
}

bool OAIAudio::isIsInstrumental() const {
    return m_is_instrumental;
}
void OAIAudio::setIsInstrumental(const bool &is_instrumental) {
    m_is_instrumental = is_instrumental;
    m_is_instrumental_isSet = true;
}

bool OAIAudio::is_is_instrumental_Set() const{
    return m_is_instrumental_isSet;
}

bool OAIAudio::is_is_instrumental_Valid() const{
    return m_is_instrumental_isValid;
}

QString OAIAudio::getIsrc() const {
    return m_isrc;
}
void OAIAudio::setIsrc(const QString &isrc) {
    m_isrc = isrc;
    m_isrc_isSet = true;
}

bool OAIAudio::is_isrc_Set() const{
    return m_isrc_isSet;
}

bool OAIAudio::is_isrc_Valid() const{
    return m_isrc_isValid;
}

QList<QString> OAIAudio::getKeywords() const {
    return m_keywords;
}
void OAIAudio::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIAudio::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIAudio::is_keywords_Valid() const{
    return m_keywords_isValid;
}

QString OAIAudio::getLanguage() const {
    return m_language;
}
void OAIAudio::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAIAudio::is_language_Set() const{
    return m_language_isSet;
}

bool OAIAudio::is_language_Valid() const{
    return m_language_isValid;
}

QString OAIAudio::getLyrics() const {
    return m_lyrics;
}
void OAIAudio::setLyrics(const QString &lyrics) {
    m_lyrics = lyrics;
    m_lyrics_isSet = true;
}

bool OAIAudio::is_lyrics_Set() const{
    return m_lyrics_isSet;
}

bool OAIAudio::is_lyrics_Valid() const{
    return m_lyrics_isValid;
}

QString OAIAudio::getMediaType() const {
    return m_media_type;
}
void OAIAudio::setMediaType(const QString &media_type) {
    m_media_type = media_type;
    m_media_type_isSet = true;
}

bool OAIAudio::is_media_type_Set() const{
    return m_media_type_isSet;
}

bool OAIAudio::is_media_type_Valid() const{
    return m_media_type_isValid;
}

QList<OAIModelRelease> OAIAudio::getModelReleases() const {
    return m_model_releases;
}
void OAIAudio::setModelReleases(const QList<OAIModelRelease> &model_releases) {
    m_model_releases = model_releases;
    m_model_releases_isSet = true;
}

bool OAIAudio::is_model_releases_Set() const{
    return m_model_releases_isSet;
}

bool OAIAudio::is_model_releases_Valid() const{
    return m_model_releases_isValid;
}

QList<QString> OAIAudio::getMoods() const {
    return m_moods;
}
void OAIAudio::setMoods(const QList<QString> &moods) {
    m_moods = moods;
    m_moods_isSet = true;
}

bool OAIAudio::is_moods_Set() const{
    return m_moods_isSet;
}

bool OAIAudio::is_moods_Valid() const{
    return m_moods_isValid;
}

QDateTime OAIAudio::getPublishedTime() const {
    return m_published_time;
}
void OAIAudio::setPublishedTime(const QDateTime &published_time) {
    m_published_time = published_time;
    m_published_time_isSet = true;
}

bool OAIAudio::is_published_time_Set() const{
    return m_published_time_isSet;
}

bool OAIAudio::is_published_time_Valid() const{
    return m_published_time_isValid;
}

QString OAIAudio::getRecordingVersion() const {
    return m_recording_version;
}
void OAIAudio::setRecordingVersion(const QString &recording_version) {
    m_recording_version = recording_version;
    m_recording_version_isSet = true;
}

bool OAIAudio::is_recording_version_Set() const{
    return m_recording_version_isSet;
}

bool OAIAudio::is_recording_version_Valid() const{
    return m_recording_version_isValid;
}

QList<QString> OAIAudio::getReleases() const {
    return m_releases;
}
void OAIAudio::setReleases(const QList<QString> &releases) {
    m_releases = releases;
    m_releases_isSet = true;
}

bool OAIAudio::is_releases_Set() const{
    return m_releases_isSet;
}

bool OAIAudio::is_releases_Valid() const{
    return m_releases_isValid;
}

QList<OAIArtist> OAIAudio::getSimilarArtists() const {
    return m_similar_artists;
}
void OAIAudio::setSimilarArtists(const QList<OAIArtist> &similar_artists) {
    m_similar_artists = similar_artists;
    m_similar_artists_isSet = true;
}

bool OAIAudio::is_similar_artists_Set() const{
    return m_similar_artists_isSet;
}

bool OAIAudio::is_similar_artists_Valid() const{
    return m_similar_artists_isValid;
}

QDateTime OAIAudio::getSubmittedTime() const {
    return m_submitted_time;
}
void OAIAudio::setSubmittedTime(const QDateTime &submitted_time) {
    m_submitted_time = submitted_time;
    m_submitted_time_isSet = true;
}

bool OAIAudio::is_submitted_time_Set() const{
    return m_submitted_time_isSet;
}

bool OAIAudio::is_submitted_time_Valid() const{
    return m_submitted_time_isValid;
}

QString OAIAudio::getTitle() const {
    return m_title;
}
void OAIAudio::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIAudio::is_title_Set() const{
    return m_title_isSet;
}

bool OAIAudio::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIAudio::getUpdatedTime() const {
    return m_updated_time;
}
void OAIAudio::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIAudio::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIAudio::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QString OAIAudio::getUrl() const {
    return m_url;
}
void OAIAudio::setUrl(const QString &url) {
    m_url = url;
    m_url_isSet = true;
}

bool OAIAudio::is_url_Set() const{
    return m_url_isSet;
}

bool OAIAudio::is_url_Valid() const{
    return m_url_isValid;
}

QString OAIAudio::getVocalDescription() const {
    return m_vocal_description;
}
void OAIAudio::setVocalDescription(const QString &vocal_description) {
    m_vocal_description = vocal_description;
    m_vocal_description_isSet = true;
}

bool OAIAudio::is_vocal_description_Set() const{
    return m_vocal_description_isSet;
}

bool OAIAudio::is_vocal_description_Valid() const{
    return m_vocal_description_isValid;
}

bool OAIAudio::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_affiliate_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_album.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_bpm_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_deleted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_duration_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_genres.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_instruments.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_adult_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_is_instrumental_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_isrc_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lyrics_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_media_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_model_releases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_moods.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_published_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_recording_version_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_releases.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_similar_artists.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_submitted_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_url_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vocal_description_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudio::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_contributor_isValid && m_id_isValid && m_media_type_isValid && true;
}

} // namespace OpenAPI
