/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIImagesApi_H
#define OAI_OAIImagesApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIBulkImageSearchResults.h"
#include "OAIBulkSearchImages_contributor_country_parameter.h"
#include "OAIBulkSearchImages_region_parameter.h"
#include "OAICategoryDataList.h"
#include "OAICollection.h"
#include "OAICollectionCreateRequest.h"
#include "OAICollectionCreateResponse.h"
#include "OAICollectionDataList.h"
#include "OAICollectionItemDataList.h"
#include "OAICollectionItemRequest.h"
#include "OAICollectionUpdateRequest.h"
#include "OAIDownloadHistoryDataList.h"
#include "OAIFeaturedCollection.h"
#include "OAIFeaturedCollectionDataList.h"
#include "OAIImage.h"
#include "OAIImageDataList.h"
#include "OAIImageSearchResults.h"
#include "OAILanguage.h"
#include "OAILicenseImageRequest.h"
#include "OAILicenseImageResultDataList.h"
#include "OAIRecommendationDataList.h"
#include "OAIRedownloadImage.h"
#include "OAISearchEntitiesRequest.h"
#include "OAISearchEntitiesResponse.h"
#include "OAISearchImage.h"
#include "OAISuggestions.h"
#include "OAIUpdatedMediaDataList.h"
#include "OAIUrl.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIImagesApi : public QObject {
    Q_OBJECT

public:
    OAIImagesApi(const int timeOut = 0);
    ~OAIImagesApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_collection_item_request OAICollectionItemRequest [required]
    */
    virtual void addImageCollectionItems(const QString &id, const OAICollectionItemRequest &oai_collection_item_request);

    /**
    * @param[in]  oai_search_image QList<OAISearchImage> [required]
    * @param[in]  added_date QDate [optional]
    * @param[in]  added_date_start QDate [optional]
    * @param[in]  aspect_ratio_min double [optional]
    * @param[in]  aspect_ratio_max double [optional]
    * @param[in]  aspect_ratio double [optional]
    * @param[in]  added_date_end QDate [optional]
    * @param[in]  category QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  contributor QList<QString> [optional]
    * @param[in]  contributor_country OAIBulkSearchImages_contributor_country_parameter [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  height_from qint32 [optional]
    * @param[in]  height_to qint32 [optional]
    * @param[in]  image_type QList<QString> [optional]
    * @param[in]  keyword_safe_search bool [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  license QList<QString> [optional]
    * @param[in]  model QList<QString> [optional]
    * @param[in]  orientation QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  people_model_released bool [optional]
    * @param[in]  people_age QString [optional]
    * @param[in]  people_ethnicity QList<QString> [optional]
    * @param[in]  people_gender QString [optional]
    * @param[in]  people_number qint32 [optional]
    * @param[in]  region OAIBulkSearchImages_region_parameter [optional]
    * @param[in]  safe bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  spellcheck_query bool [optional]
    * @param[in]  view QString [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  width_from qint32 [optional]
    * @param[in]  width_to qint32 [optional]
    */
    virtual void bulkSearchImages(const QList<OAISearchImage> &oai_search_image, const ::OpenAPI::OptionalParam<QDate> &added_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &added_date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<double> &aspect_ratio_min = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &aspect_ratio_max = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &aspect_ratio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<QDate> &added_date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIBulkSearchImages_contributor_country_parameter> &contributor_country = ::OpenAPI::OptionalParam<OAIBulkSearchImages_contributor_country_parameter>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &keyword_safe_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QList<QString>> &license = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &model = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &orientation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &people_model_released = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &people_age = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &people_ethnicity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &people_gender = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &people_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAIBulkSearchImages_region_parameter> &region = ::OpenAPI::OptionalParam<OAIBulkSearchImages_region_parameter>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &spellcheck_query = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width_to = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_collection_create_request OAICollectionCreateRequest [required]
    */
    virtual void createImageCollection(const OAICollectionCreateRequest &oai_collection_create_request);

    /**
    * @param[in]  id QString [required]
    */
    virtual void deleteImageCollection(const QString &id);

    /**
    * @param[in]  id QString [required]
    * @param[in]  item_id QList<QString> [optional]
    */
    virtual void deleteImageCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &item_id = ::OpenAPI::OptionalParam<QList<QString>>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_redownload_image OAIRedownloadImage [required]
    */
    virtual void downloadImage(const QString &id, const OAIRedownloadImage &oai_redownload_image);

    /**
    * @param[in]  id QString [required]
    * @param[in]  embed QString [optional]
    * @param[in]  asset_hint QString [optional]
    */
    virtual void getFeaturedImageCollection(const QString &id, const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &asset_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getFeaturedImageCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  embed QString [optional]
    * @param[in]  type QList<QString> [optional]
    * @param[in]  asset_hint QString [optional]
    */
    virtual void getFeaturedImageCollectionList(const ::OpenAPI::OptionalParam<QString> &embed = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &asset_hint = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  view QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getImage(const QString &id, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  embed QList<QString> [optional]
    * @param[in]  share_code QString [optional]
    */
    virtual void getImageCollection(const QString &id, const ::OpenAPI::OptionalParam<QList<QString>> &embed = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &share_code = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  share_code QString [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getImageCollectionItems(const QString &id, const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &share_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  embed QList<QString> [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    */
    virtual void getImageCollectionList(const ::OpenAPI::OptionalParam<QList<QString>> &embed = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  oai_search_entities_request OAISearchEntitiesRequest [required]
    */
    virtual void getImageKeywordSuggestions(const OAISearchEntitiesRequest &oai_search_entities_request);

    /**
    * @param[in]  image_id QString [optional]
    * @param[in]  license QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  username QString [optional]
    * @param[in]  start_date QDateTime [optional]
    * @param[in]  end_date QDateTime [optional]
    * @param[in]  download_availability QString [optional]
    * @param[in]  team_history bool [optional]
    */
    virtual void getImageLicenseList(const ::OpenAPI::OptionalParam<QString> &image_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &license = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &username = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDateTime> &start_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QDateTime> &end_date = ::OpenAPI::OptionalParam<QDateTime>(), const ::OpenAPI::OptionalParam<QString> &download_availability = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &team_history = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  id QList<QString> [required]
    * @param[in]  view QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void getImageList(const QList<QString> &id, const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QList<QString> [required]
    * @param[in]  max_items qint32 [optional]
    * @param[in]  safe bool [optional]
    */
    virtual void getImageRecommendations(const QList<QString> &id, const ::OpenAPI::OptionalParam<qint32> &max_items = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  query QString [required]
    * @param[in]  limit qint32 [optional]
    */
    virtual void getImageSuggestions(const QString &query, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>());

    /**
    * @param[in]  type QList<QString> [optional]
    * @param[in]  start_date QDate [optional]
    * @param[in]  end_date QDate [optional]
    * @param[in]  interval QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  sort QString [optional]
    */
    virtual void getUpdatedImages(const ::OpenAPI::OptionalParam<QList<QString>> &type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QDate> &start_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &end_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &interval = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_license_image_request OAILicenseImageRequest [required]
    * @param[in]  subscription_id QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  size QString [optional]
    * @param[in]  search_id QString [optional]
    */
    virtual void licenseImages(const OAILicenseImageRequest &oai_license_image_request, const ::OpenAPI::OptionalParam<QString> &subscription_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &size = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &search_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  language OAILanguage [optional]
    */
    virtual void listImageCategories(const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  view QString [optional]
    */
    virtual void listSimilarImages(const QString &id, const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  id QString [required]
    * @param[in]  oai_collection_update_request OAICollectionUpdateRequest [required]
    */
    virtual void renameImageCollection(const QString &id, const OAICollectionUpdateRequest &oai_collection_update_request);

    /**
    * @param[in]  added_date QDate [optional]
    * @param[in]  added_date_start QDate [optional]
    * @param[in]  aspect_ratio_min double [optional]
    * @param[in]  aspect_ratio_max double [optional]
    * @param[in]  aspect_ratio double [optional]
    * @param[in]  ai_search bool [optional]
    * @param[in]  ai_labels_limit qint32 [optional]
    * @param[in]  ai_industry QString [optional]
    * @param[in]  ai_objective QString [optional]
    * @param[in]  added_date_end QDate [optional]
    * @param[in]  category QString [optional]
    * @param[in]  color QString [optional]
    * @param[in]  contributor QList<QString> [optional]
    * @param[in]  contributor_country OAIBulkSearchImages_contributor_country_parameter [optional]
    * @param[in]  fields QString [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  height_from qint32 [optional]
    * @param[in]  height_to qint32 [optional]
    * @param[in]  image_type QList<QString> [optional]
    * @param[in]  keyword_safe_search bool [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  license QList<QString> [optional]
    * @param[in]  model QList<QString> [optional]
    * @param[in]  orientation QString [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  people_model_released bool [optional]
    * @param[in]  people_age QString [optional]
    * @param[in]  people_ethnicity QList<QString> [optional]
    * @param[in]  people_gender QString [optional]
    * @param[in]  people_number qint32 [optional]
    * @param[in]  query QString [optional]
    * @param[in]  region OAIBulkSearchImages_region_parameter [optional]
    * @param[in]  safe bool [optional]
    * @param[in]  sort QString [optional]
    * @param[in]  spellcheck_query bool [optional]
    * @param[in]  view QString [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  width_from qint32 [optional]
    * @param[in]  width_to qint32 [optional]
    */
    virtual void searchImages(const ::OpenAPI::OptionalParam<QDate> &added_date = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QDate> &added_date_start = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<double> &aspect_ratio_min = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &aspect_ratio_max = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<double> &aspect_ratio = ::OpenAPI::OptionalParam<double>(), const ::OpenAPI::OptionalParam<bool> &ai_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &ai_labels_limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &ai_industry = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &ai_objective = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QDate> &added_date_end = ::OpenAPI::OptionalParam<QDate>(), const ::OpenAPI::OptionalParam<QString> &category = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &color = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &contributor = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<OAIBulkSearchImages_contributor_country_parameter> &contributor_country = ::OpenAPI::OptionalParam<OAIBulkSearchImages_contributor_country_parameter>(), const ::OpenAPI::OptionalParam<QString> &fields = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height_to = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QList<QString>> &image_type = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &keyword_safe_search = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<QList<QString>> &license = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QList<QString>> &model = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &orientation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<bool> &people_model_released = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &people_age = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QList<QString>> &people_ethnicity = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<QString> &people_gender = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &people_number = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &query = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAIBulkSearchImages_region_parameter> &region = ::OpenAPI::OptionalParam<OAIBulkSearchImages_region_parameter>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &sort = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &spellcheck_query = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width_from = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &width_to = ::OpenAPI::OptionalParam<qint32>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void addImageCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void bulkSearchImagesCallback(OAIHttpRequestWorker *worker);
    void createImageCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteImageCollectionCallback(OAIHttpRequestWorker *worker);
    void deleteImageCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void downloadImageCallback(OAIHttpRequestWorker *worker);
    void getFeaturedImageCollectionCallback(OAIHttpRequestWorker *worker);
    void getFeaturedImageCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void getFeaturedImageCollectionListCallback(OAIHttpRequestWorker *worker);
    void getImageCallback(OAIHttpRequestWorker *worker);
    void getImageCollectionCallback(OAIHttpRequestWorker *worker);
    void getImageCollectionItemsCallback(OAIHttpRequestWorker *worker);
    void getImageCollectionListCallback(OAIHttpRequestWorker *worker);
    void getImageKeywordSuggestionsCallback(OAIHttpRequestWorker *worker);
    void getImageLicenseListCallback(OAIHttpRequestWorker *worker);
    void getImageListCallback(OAIHttpRequestWorker *worker);
    void getImageRecommendationsCallback(OAIHttpRequestWorker *worker);
    void getImageSuggestionsCallback(OAIHttpRequestWorker *worker);
    void getUpdatedImagesCallback(OAIHttpRequestWorker *worker);
    void licenseImagesCallback(OAIHttpRequestWorker *worker);
    void listImageCategoriesCallback(OAIHttpRequestWorker *worker);
    void listSimilarImagesCallback(OAIHttpRequestWorker *worker);
    void renameImageCollectionCallback(OAIHttpRequestWorker *worker);
    void searchImagesCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void addImageCollectionItemsSignal();
    void bulkSearchImagesSignal(OAIBulkImageSearchResults summary);
    void createImageCollectionSignal(OAICollectionCreateResponse summary);
    void deleteImageCollectionSignal();
    void deleteImageCollectionItemsSignal();
    void downloadImageSignal(OAIUrl summary);
    void getFeaturedImageCollectionSignal(OAIFeaturedCollection summary);
    void getFeaturedImageCollectionItemsSignal(OAICollectionItemDataList summary);
    void getFeaturedImageCollectionListSignal(OAIFeaturedCollectionDataList summary);
    void getImageSignal(OAIImage summary);
    void getImageCollectionSignal(OAICollection summary);
    void getImageCollectionItemsSignal(OAICollectionItemDataList summary);
    void getImageCollectionListSignal(OAICollectionDataList summary);
    void getImageKeywordSuggestionsSignal(OAISearchEntitiesResponse summary);
    void getImageLicenseListSignal(OAIDownloadHistoryDataList summary);
    void getImageListSignal(OAIImageDataList summary);
    void getImageRecommendationsSignal(OAIRecommendationDataList summary);
    void getImageSuggestionsSignal(OAISuggestions summary);
    void getUpdatedImagesSignal(OAIUpdatedMediaDataList summary);
    void licenseImagesSignal(OAILicenseImageResultDataList summary);
    void listImageCategoriesSignal(OAICategoryDataList summary);
    void listSimilarImagesSignal(OAIImageSearchResults summary);
    void renameImageCollectionSignal();
    void searchImagesSignal(OAIImageSearchResults summary);


    void addImageCollectionItemsSignalFull(OAIHttpRequestWorker *worker);
    void bulkSearchImagesSignalFull(OAIHttpRequestWorker *worker, OAIBulkImageSearchResults summary);
    void createImageCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollectionCreateResponse summary);
    void deleteImageCollectionSignalFull(OAIHttpRequestWorker *worker);
    void deleteImageCollectionItemsSignalFull(OAIHttpRequestWorker *worker);
    void downloadImageSignalFull(OAIHttpRequestWorker *worker, OAIUrl summary);
    void getFeaturedImageCollectionSignalFull(OAIHttpRequestWorker *worker, OAIFeaturedCollection summary);
    void getFeaturedImageCollectionItemsSignalFull(OAIHttpRequestWorker *worker, OAICollectionItemDataList summary);
    void getFeaturedImageCollectionListSignalFull(OAIHttpRequestWorker *worker, OAIFeaturedCollectionDataList summary);
    void getImageSignalFull(OAIHttpRequestWorker *worker, OAIImage summary);
    void getImageCollectionSignalFull(OAIHttpRequestWorker *worker, OAICollection summary);
    void getImageCollectionItemsSignalFull(OAIHttpRequestWorker *worker, OAICollectionItemDataList summary);
    void getImageCollectionListSignalFull(OAIHttpRequestWorker *worker, OAICollectionDataList summary);
    void getImageKeywordSuggestionsSignalFull(OAIHttpRequestWorker *worker, OAISearchEntitiesResponse summary);
    void getImageLicenseListSignalFull(OAIHttpRequestWorker *worker, OAIDownloadHistoryDataList summary);
    void getImageListSignalFull(OAIHttpRequestWorker *worker, OAIImageDataList summary);
    void getImageRecommendationsSignalFull(OAIHttpRequestWorker *worker, OAIRecommendationDataList summary);
    void getImageSuggestionsSignalFull(OAIHttpRequestWorker *worker, OAISuggestions summary);
    void getUpdatedImagesSignalFull(OAIHttpRequestWorker *worker, OAIUpdatedMediaDataList summary);
    void licenseImagesSignalFull(OAIHttpRequestWorker *worker, OAILicenseImageResultDataList summary);
    void listImageCategoriesSignalFull(OAIHttpRequestWorker *worker, OAICategoryDataList summary);
    void listSimilarImagesSignalFull(OAIHttpRequestWorker *worker, OAIImageSearchResults summary);
    void renameImageCollectionSignalFull(OAIHttpRequestWorker *worker);
    void searchImagesSignalFull(OAIHttpRequestWorker *worker, OAIImageSearchResults summary);

    Q_DECL_DEPRECATED_X("Use addImageCollectionItemsSignalError() instead")
    void addImageCollectionItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void addImageCollectionItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSearchImagesSignalError() instead")
    void bulkSearchImagesSignalE(OAIBulkImageSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSearchImagesSignalError(OAIBulkImageSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageCollectionSignalError() instead")
    void createImageCollectionSignalE(OAICollectionCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageCollectionSignalError(OAICollectionCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageCollectionSignalError() instead")
    void deleteImageCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageCollectionItemsSignalError() instead")
    void deleteImageCollectionItemsSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageCollectionItemsSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadImageSignalError() instead")
    void downloadImageSignalE(OAIUrl summary, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadImageSignalError(OAIUrl summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedImageCollectionSignalError() instead")
    void getFeaturedImageCollectionSignalE(OAIFeaturedCollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedImageCollectionSignalError(OAIFeaturedCollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedImageCollectionItemsSignalError() instead")
    void getFeaturedImageCollectionItemsSignalE(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedImageCollectionItemsSignalError(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedImageCollectionListSignalError() instead")
    void getFeaturedImageCollectionListSignalE(OAIFeaturedCollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedImageCollectionListSignalError(OAIFeaturedCollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSignalError() instead")
    void getImageSignalE(OAIImage summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSignalError(OAIImage summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageCollectionSignalError() instead")
    void getImageCollectionSignalE(OAICollection summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageCollectionSignalError(OAICollection summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageCollectionItemsSignalError() instead")
    void getImageCollectionItemsSignalE(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageCollectionItemsSignalError(OAICollectionItemDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageCollectionListSignalError() instead")
    void getImageCollectionListSignalE(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageCollectionListSignalError(OAICollectionDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageKeywordSuggestionsSignalError() instead")
    void getImageKeywordSuggestionsSignalE(OAISearchEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageKeywordSuggestionsSignalError(OAISearchEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageLicenseListSignalError() instead")
    void getImageLicenseListSignalE(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageLicenseListSignalError(OAIDownloadHistoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageListSignalError() instead")
    void getImageListSignalE(OAIImageDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageListSignalError(OAIImageDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageRecommendationsSignalError() instead")
    void getImageRecommendationsSignalE(OAIRecommendationDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageRecommendationsSignalError(OAIRecommendationDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSuggestionsSignalError() instead")
    void getImageSuggestionsSignalE(OAISuggestions summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSuggestionsSignalError(OAISuggestions summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedImagesSignalError() instead")
    void getUpdatedImagesSignalE(OAIUpdatedMediaDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedImagesSignalError(OAIUpdatedMediaDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseImagesSignalError() instead")
    void licenseImagesSignalE(OAILicenseImageResultDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseImagesSignalError(OAILicenseImageResultDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageCategoriesSignalError() instead")
    void listImageCategoriesSignalE(OAICategoryDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageCategoriesSignalError(OAICategoryDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSimilarImagesSignalError() instead")
    void listSimilarImagesSignalE(OAIImageSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void listSimilarImagesSignalError(OAIImageSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameImageCollectionSignalError() instead")
    void renameImageCollectionSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void renameImageCollectionSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchImagesSignalError() instead")
    void searchImagesSignalE(OAIImageSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void searchImagesSignalError(OAIImageSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use addImageCollectionItemsSignalErrorFull() instead")
    void addImageCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void addImageCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use bulkSearchImagesSignalErrorFull() instead")
    void bulkSearchImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void bulkSearchImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use createImageCollectionSignalErrorFull() instead")
    void createImageCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void createImageCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageCollectionSignalErrorFull() instead")
    void deleteImageCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use deleteImageCollectionItemsSignalErrorFull() instead")
    void deleteImageCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void deleteImageCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use downloadImageSignalErrorFull() instead")
    void downloadImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void downloadImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedImageCollectionSignalErrorFull() instead")
    void getFeaturedImageCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedImageCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedImageCollectionItemsSignalErrorFull() instead")
    void getFeaturedImageCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedImageCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getFeaturedImageCollectionListSignalErrorFull() instead")
    void getFeaturedImageCollectionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getFeaturedImageCollectionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSignalErrorFull() instead")
    void getImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageCollectionSignalErrorFull() instead")
    void getImageCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageCollectionItemsSignalErrorFull() instead")
    void getImageCollectionItemsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageCollectionItemsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageCollectionListSignalErrorFull() instead")
    void getImageCollectionListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageCollectionListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageKeywordSuggestionsSignalErrorFull() instead")
    void getImageKeywordSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageKeywordSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageLicenseListSignalErrorFull() instead")
    void getImageLicenseListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageLicenseListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageListSignalErrorFull() instead")
    void getImageListSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageListSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageRecommendationsSignalErrorFull() instead")
    void getImageRecommendationsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageRecommendationsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getImageSuggestionsSignalErrorFull() instead")
    void getImageSuggestionsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getImageSuggestionsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getUpdatedImagesSignalErrorFull() instead")
    void getUpdatedImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getUpdatedImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use licenseImagesSignalErrorFull() instead")
    void licenseImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void licenseImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listImageCategoriesSignalErrorFull() instead")
    void listImageCategoriesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listImageCategoriesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use listSimilarImagesSignalErrorFull() instead")
    void listSimilarImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void listSimilarImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use renameImageCollectionSignalErrorFull() instead")
    void renameImageCollectionSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void renameImageCollectionSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchImagesSignalErrorFull() instead")
    void searchImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
