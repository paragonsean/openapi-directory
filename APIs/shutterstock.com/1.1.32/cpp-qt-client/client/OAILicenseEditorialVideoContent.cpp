/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseEditorialVideoContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseEditorialVideoContent::OAILicenseEditorialVideoContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseEditorialVideoContent::OAILicenseEditorialVideoContent() {
    this->initializeModel();
}

OAILicenseEditorialVideoContent::~OAILicenseEditorialVideoContent() {}

void OAILicenseEditorialVideoContent::initializeModel() {

    m_editorial_id_isSet = false;
    m_editorial_id_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;
}

void OAILicenseEditorialVideoContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseEditorialVideoContent::fromJsonObject(QJsonObject json) {

    m_editorial_id_isValid = ::OpenAPI::fromJsonValue(m_editorial_id, json[QString("editorial_id")]);
    m_editorial_id_isSet = !json[QString("editorial_id")].isNull() && m_editorial_id_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;
}

QString OAILicenseEditorialVideoContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseEditorialVideoContent::asJsonObject() const {
    QJsonObject obj;
    if (m_editorial_id_isSet) {
        obj.insert(QString("editorial_id"), ::OpenAPI::toJsonValue(m_editorial_id));
    }
    if (m_license_isSet) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    return obj;
}

QString OAILicenseEditorialVideoContent::getEditorialId() const {
    return m_editorial_id;
}
void OAILicenseEditorialVideoContent::setEditorialId(const QString &editorial_id) {
    m_editorial_id = editorial_id;
    m_editorial_id_isSet = true;
}

bool OAILicenseEditorialVideoContent::is_editorial_id_Set() const{
    return m_editorial_id_isSet;
}

bool OAILicenseEditorialVideoContent::is_editorial_id_Valid() const{
    return m_editorial_id_isValid;
}

QString OAILicenseEditorialVideoContent::getLicense() const {
    return m_license;
}
void OAILicenseEditorialVideoContent::setLicense(const QString &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAILicenseEditorialVideoContent::is_license_Set() const{
    return m_license_isSet;
}

bool OAILicenseEditorialVideoContent::is_license_Valid() const{
    return m_license_isValid;
}

OAIObject OAILicenseEditorialVideoContent::getMetadata() const {
    return m_metadata;
}
void OAILicenseEditorialVideoContent::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILicenseEditorialVideoContent::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILicenseEditorialVideoContent::is_metadata_Valid() const{
    return m_metadata_isValid;
}

QString OAILicenseEditorialVideoContent::getSize() const {
    return m_size;
}
void OAILicenseEditorialVideoContent::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILicenseEditorialVideoContent::is_size_Set() const{
    return m_size_isSet;
}

bool OAILicenseEditorialVideoContent::is_size_Valid() const{
    return m_size_isValid;
}

bool OAILicenseEditorialVideoContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editorial_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_license_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseEditorialVideoContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_editorial_id_isValid && m_license_isValid && true;
}

} // namespace OpenAPI
