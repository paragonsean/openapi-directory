/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorialImageLivefeed.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditorialImageLivefeed::OAIEditorialImageLivefeed(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditorialImageLivefeed::OAIEditorialImageLivefeed() {
    this->initializeModel();
}

OAIEditorialImageLivefeed::~OAIEditorialImageLivefeed() {}

void OAIEditorialImageLivefeed::initializeModel() {

    m_cover_item_isSet = false;
    m_cover_item_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_name_isSet = false;
    m_name_isValid = false;

    m_total_item_count_isSet = false;
    m_total_item_count_isValid = false;
}

void OAIEditorialImageLivefeed::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditorialImageLivefeed::fromJsonObject(QJsonObject json) {

    m_cover_item_isValid = ::OpenAPI::fromJsonValue(m_cover_item, json[QString("cover_item")]);
    m_cover_item_isSet = !json[QString("cover_item")].isNull() && m_cover_item_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_name_isValid = ::OpenAPI::fromJsonValue(m_name, json[QString("name")]);
    m_name_isSet = !json[QString("name")].isNull() && m_name_isValid;

    m_total_item_count_isValid = ::OpenAPI::fromJsonValue(m_total_item_count, json[QString("total_item_count")]);
    m_total_item_count_isSet = !json[QString("total_item_count")].isNull() && m_total_item_count_isValid;
}

QString OAIEditorialImageLivefeed::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditorialImageLivefeed::asJsonObject() const {
    QJsonObject obj;
    if (m_cover_item.isSet()) {
        obj.insert(QString("cover_item"), ::OpenAPI::toJsonValue(m_cover_item));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_name_isSet) {
        obj.insert(QString("name"), ::OpenAPI::toJsonValue(m_name));
    }
    if (m_total_item_count_isSet) {
        obj.insert(QString("total_item_count"), ::OpenAPI::toJsonValue(m_total_item_count));
    }
    return obj;
}

OAIEditorialCoverItem OAIEditorialImageLivefeed::getCoverItem() const {
    return m_cover_item;
}
void OAIEditorialImageLivefeed::setCoverItem(const OAIEditorialCoverItem &cover_item) {
    m_cover_item = cover_item;
    m_cover_item_isSet = true;
}

bool OAIEditorialImageLivefeed::is_cover_item_Set() const{
    return m_cover_item_isSet;
}

bool OAIEditorialImageLivefeed::is_cover_item_Valid() const{
    return m_cover_item_isValid;
}

QDateTime OAIEditorialImageLivefeed::getCreatedTime() const {
    return m_created_time;
}
void OAIEditorialImageLivefeed::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIEditorialImageLivefeed::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIEditorialImageLivefeed::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QString OAIEditorialImageLivefeed::getId() const {
    return m_id;
}
void OAIEditorialImageLivefeed::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEditorialImageLivefeed::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEditorialImageLivefeed::is_id_Valid() const{
    return m_id_isValid;
}

QString OAIEditorialImageLivefeed::getName() const {
    return m_name;
}
void OAIEditorialImageLivefeed::setName(const QString &name) {
    m_name = name;
    m_name_isSet = true;
}

bool OAIEditorialImageLivefeed::is_name_Set() const{
    return m_name_isSet;
}

bool OAIEditorialImageLivefeed::is_name_Valid() const{
    return m_name_isValid;
}

qint32 OAIEditorialImageLivefeed::getTotalItemCount() const {
    return m_total_item_count;
}
void OAIEditorialImageLivefeed::setTotalItemCount(const qint32 &total_item_count) {
    m_total_item_count = total_item_count;
    m_total_item_count_isSet = true;
}

bool OAIEditorialImageLivefeed::is_total_item_count_Set() const{
    return m_total_item_count_isSet;
}

bool OAIEditorialImageLivefeed::is_total_item_count_Valid() const{
    return m_total_item_count_isValid;
}

bool OAIEditorialImageLivefeed::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_cover_item.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_name_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_item_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditorialImageLivefeed::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && m_name_isValid && m_total_item_count_isValid && true;
}

} // namespace OpenAPI
