/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIEditorialUpdatedContent.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIEditorialUpdatedContent::OAIEditorialUpdatedContent(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIEditorialUpdatedContent::OAIEditorialUpdatedContent() {
    this->initializeModel();
}

OAIEditorialUpdatedContent::~OAIEditorialUpdatedContent() {}

void OAIEditorialUpdatedContent::initializeModel() {

    m_aspect_isSet = false;
    m_aspect_isValid = false;

    m_assets_isSet = false;
    m_assets_isValid = false;

    m_byline_isSet = false;
    m_byline_isValid = false;

    m_caption_isSet = false;
    m_caption_isValid = false;

    m_categories_isSet = false;
    m_categories_isValid = false;

    m_commercial_status_isSet = false;
    m_commercial_status_isValid = false;

    m_created_time_isSet = false;
    m_created_time_isValid = false;

    m_date_taken_isSet = false;
    m_date_taken_isValid = false;

    m_description_isSet = false;
    m_description_isValid = false;

    m_id_isSet = false;
    m_id_isValid = false;

    m_keywords_isSet = false;
    m_keywords_isValid = false;

    m_rights_isSet = false;
    m_rights_isValid = false;

    m_special_instructions_isSet = false;
    m_special_instructions_isValid = false;

    m_supplier_code_isSet = false;
    m_supplier_code_isValid = false;

    m_title_isSet = false;
    m_title_isValid = false;

    m_updated_time_isSet = false;
    m_updated_time_isValid = false;

    m_updates_isSet = false;
    m_updates_isValid = false;
}

void OAIEditorialUpdatedContent::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIEditorialUpdatedContent::fromJsonObject(QJsonObject json) {

    m_aspect_isValid = ::OpenAPI::fromJsonValue(m_aspect, json[QString("aspect")]);
    m_aspect_isSet = !json[QString("aspect")].isNull() && m_aspect_isValid;

    m_assets_isValid = ::OpenAPI::fromJsonValue(m_assets, json[QString("assets")]);
    m_assets_isSet = !json[QString("assets")].isNull() && m_assets_isValid;

    m_byline_isValid = ::OpenAPI::fromJsonValue(m_byline, json[QString("byline")]);
    m_byline_isSet = !json[QString("byline")].isNull() && m_byline_isValid;

    m_caption_isValid = ::OpenAPI::fromJsonValue(m_caption, json[QString("caption")]);
    m_caption_isSet = !json[QString("caption")].isNull() && m_caption_isValid;

    m_categories_isValid = ::OpenAPI::fromJsonValue(m_categories, json[QString("categories")]);
    m_categories_isSet = !json[QString("categories")].isNull() && m_categories_isValid;

    m_commercial_status_isValid = ::OpenAPI::fromJsonValue(m_commercial_status, json[QString("commercial_status")]);
    m_commercial_status_isSet = !json[QString("commercial_status")].isNull() && m_commercial_status_isValid;

    m_created_time_isValid = ::OpenAPI::fromJsonValue(m_created_time, json[QString("created_time")]);
    m_created_time_isSet = !json[QString("created_time")].isNull() && m_created_time_isValid;

    m_date_taken_isValid = ::OpenAPI::fromJsonValue(m_date_taken, json[QString("date_taken")]);
    m_date_taken_isSet = !json[QString("date_taken")].isNull() && m_date_taken_isValid;

    m_description_isValid = ::OpenAPI::fromJsonValue(m_description, json[QString("description")]);
    m_description_isSet = !json[QString("description")].isNull() && m_description_isValid;

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_keywords_isValid = ::OpenAPI::fromJsonValue(m_keywords, json[QString("keywords")]);
    m_keywords_isSet = !json[QString("keywords")].isNull() && m_keywords_isValid;

    m_rights_isValid = ::OpenAPI::fromJsonValue(m_rights, json[QString("rights")]);
    m_rights_isSet = !json[QString("rights")].isNull() && m_rights_isValid;

    m_special_instructions_isValid = ::OpenAPI::fromJsonValue(m_special_instructions, json[QString("special_instructions")]);
    m_special_instructions_isSet = !json[QString("special_instructions")].isNull() && m_special_instructions_isValid;

    m_supplier_code_isValid = ::OpenAPI::fromJsonValue(m_supplier_code, json[QString("supplier_code")]);
    m_supplier_code_isSet = !json[QString("supplier_code")].isNull() && m_supplier_code_isValid;

    m_title_isValid = ::OpenAPI::fromJsonValue(m_title, json[QString("title")]);
    m_title_isSet = !json[QString("title")].isNull() && m_title_isValid;

    m_updated_time_isValid = ::OpenAPI::fromJsonValue(m_updated_time, json[QString("updated_time")]);
    m_updated_time_isSet = !json[QString("updated_time")].isNull() && m_updated_time_isValid;

    m_updates_isValid = ::OpenAPI::fromJsonValue(m_updates, json[QString("updates")]);
    m_updates_isSet = !json[QString("updates")].isNull() && m_updates_isValid;
}

QString OAIEditorialUpdatedContent::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIEditorialUpdatedContent::asJsonObject() const {
    QJsonObject obj;
    if (m_aspect_isSet) {
        obj.insert(QString("aspect"), ::OpenAPI::toJsonValue(m_aspect));
    }
    if (m_assets.isSet()) {
        obj.insert(QString("assets"), ::OpenAPI::toJsonValue(m_assets));
    }
    if (m_byline_isSet) {
        obj.insert(QString("byline"), ::OpenAPI::toJsonValue(m_byline));
    }
    if (m_caption_isSet) {
        obj.insert(QString("caption"), ::OpenAPI::toJsonValue(m_caption));
    }
    if (m_categories.size() > 0) {
        obj.insert(QString("categories"), ::OpenAPI::toJsonValue(m_categories));
    }
    if (m_commercial_status.isSet()) {
        obj.insert(QString("commercial_status"), ::OpenAPI::toJsonValue(m_commercial_status));
    }
    if (m_created_time_isSet) {
        obj.insert(QString("created_time"), ::OpenAPI::toJsonValue(m_created_time));
    }
    if (m_date_taken_isSet) {
        obj.insert(QString("date_taken"), ::OpenAPI::toJsonValue(m_date_taken));
    }
    if (m_description_isSet) {
        obj.insert(QString("description"), ::OpenAPI::toJsonValue(m_description));
    }
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_keywords.size() > 0) {
        obj.insert(QString("keywords"), ::OpenAPI::toJsonValue(m_keywords));
    }
    if (m_rights.isSet()) {
        obj.insert(QString("rights"), ::OpenAPI::toJsonValue(m_rights));
    }
    if (m_special_instructions_isSet) {
        obj.insert(QString("special_instructions"), ::OpenAPI::toJsonValue(m_special_instructions));
    }
    if (m_supplier_code_isSet) {
        obj.insert(QString("supplier_code"), ::OpenAPI::toJsonValue(m_supplier_code));
    }
    if (m_title_isSet) {
        obj.insert(QString("title"), ::OpenAPI::toJsonValue(m_title));
    }
    if (m_updated_time_isSet) {
        obj.insert(QString("updated_time"), ::OpenAPI::toJsonValue(m_updated_time));
    }
    if (m_updates.size() > 0) {
        obj.insert(QString("updates"), ::OpenAPI::toJsonValue(m_updates));
    }
    return obj;
}

double OAIEditorialUpdatedContent::getAspect() const {
    return m_aspect;
}
void OAIEditorialUpdatedContent::setAspect(const double &aspect) {
    m_aspect = aspect;
    m_aspect_isSet = true;
}

bool OAIEditorialUpdatedContent::is_aspect_Set() const{
    return m_aspect_isSet;
}

bool OAIEditorialUpdatedContent::is_aspect_Valid() const{
    return m_aspect_isValid;
}

OAIEditorialAssets OAIEditorialUpdatedContent::getAssets() const {
    return m_assets;
}
void OAIEditorialUpdatedContent::setAssets(const OAIEditorialAssets &assets) {
    m_assets = assets;
    m_assets_isSet = true;
}

bool OAIEditorialUpdatedContent::is_assets_Set() const{
    return m_assets_isSet;
}

bool OAIEditorialUpdatedContent::is_assets_Valid() const{
    return m_assets_isValid;
}

QString OAIEditorialUpdatedContent::getByline() const {
    return m_byline;
}
void OAIEditorialUpdatedContent::setByline(const QString &byline) {
    m_byline = byline;
    m_byline_isSet = true;
}

bool OAIEditorialUpdatedContent::is_byline_Set() const{
    return m_byline_isSet;
}

bool OAIEditorialUpdatedContent::is_byline_Valid() const{
    return m_byline_isValid;
}

QString OAIEditorialUpdatedContent::getCaption() const {
    return m_caption;
}
void OAIEditorialUpdatedContent::setCaption(const QString &caption) {
    m_caption = caption;
    m_caption_isSet = true;
}

bool OAIEditorialUpdatedContent::is_caption_Set() const{
    return m_caption_isSet;
}

bool OAIEditorialUpdatedContent::is_caption_Valid() const{
    return m_caption_isValid;
}

QList<OAIEditorialCategory> OAIEditorialUpdatedContent::getCategories() const {
    return m_categories;
}
void OAIEditorialUpdatedContent::setCategories(const QList<OAIEditorialCategory> &categories) {
    m_categories = categories;
    m_categories_isSet = true;
}

bool OAIEditorialUpdatedContent::is_categories_Set() const{
    return m_categories_isSet;
}

bool OAIEditorialUpdatedContent::is_categories_Valid() const{
    return m_categories_isValid;
}

OAIEditorialUpdatedContent_commercial_status OAIEditorialUpdatedContent::getCommercialStatus() const {
    return m_commercial_status;
}
void OAIEditorialUpdatedContent::setCommercialStatus(const OAIEditorialUpdatedContent_commercial_status &commercial_status) {
    m_commercial_status = commercial_status;
    m_commercial_status_isSet = true;
}

bool OAIEditorialUpdatedContent::is_commercial_status_Set() const{
    return m_commercial_status_isSet;
}

bool OAIEditorialUpdatedContent::is_commercial_status_Valid() const{
    return m_commercial_status_isValid;
}

QDateTime OAIEditorialUpdatedContent::getCreatedTime() const {
    return m_created_time;
}
void OAIEditorialUpdatedContent::setCreatedTime(const QDateTime &created_time) {
    m_created_time = created_time;
    m_created_time_isSet = true;
}

bool OAIEditorialUpdatedContent::is_created_time_Set() const{
    return m_created_time_isSet;
}

bool OAIEditorialUpdatedContent::is_created_time_Valid() const{
    return m_created_time_isValid;
}

QDate OAIEditorialUpdatedContent::getDateTaken() const {
    return m_date_taken;
}
void OAIEditorialUpdatedContent::setDateTaken(const QDate &date_taken) {
    m_date_taken = date_taken;
    m_date_taken_isSet = true;
}

bool OAIEditorialUpdatedContent::is_date_taken_Set() const{
    return m_date_taken_isSet;
}

bool OAIEditorialUpdatedContent::is_date_taken_Valid() const{
    return m_date_taken_isValid;
}

QString OAIEditorialUpdatedContent::getDescription() const {
    return m_description;
}
void OAIEditorialUpdatedContent::setDescription(const QString &description) {
    m_description = description;
    m_description_isSet = true;
}

bool OAIEditorialUpdatedContent::is_description_Set() const{
    return m_description_isSet;
}

bool OAIEditorialUpdatedContent::is_description_Valid() const{
    return m_description_isValid;
}

QString OAIEditorialUpdatedContent::getId() const {
    return m_id;
}
void OAIEditorialUpdatedContent::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIEditorialUpdatedContent::is_id_Set() const{
    return m_id_isSet;
}

bool OAIEditorialUpdatedContent::is_id_Valid() const{
    return m_id_isValid;
}

QList<QString> OAIEditorialUpdatedContent::getKeywords() const {
    return m_keywords;
}
void OAIEditorialUpdatedContent::setKeywords(const QList<QString> &keywords) {
    m_keywords = keywords;
    m_keywords_isSet = true;
}

bool OAIEditorialUpdatedContent::is_keywords_Set() const{
    return m_keywords_isSet;
}

bool OAIEditorialUpdatedContent::is_keywords_Valid() const{
    return m_keywords_isValid;
}

OAIEditorialUpdatedContent_rights OAIEditorialUpdatedContent::getRights() const {
    return m_rights;
}
void OAIEditorialUpdatedContent::setRights(const OAIEditorialUpdatedContent_rights &rights) {
    m_rights = rights;
    m_rights_isSet = true;
}

bool OAIEditorialUpdatedContent::is_rights_Set() const{
    return m_rights_isSet;
}

bool OAIEditorialUpdatedContent::is_rights_Valid() const{
    return m_rights_isValid;
}

QString OAIEditorialUpdatedContent::getSpecialInstructions() const {
    return m_special_instructions;
}
void OAIEditorialUpdatedContent::setSpecialInstructions(const QString &special_instructions) {
    m_special_instructions = special_instructions;
    m_special_instructions_isSet = true;
}

bool OAIEditorialUpdatedContent::is_special_instructions_Set() const{
    return m_special_instructions_isSet;
}

bool OAIEditorialUpdatedContent::is_special_instructions_Valid() const{
    return m_special_instructions_isValid;
}

QString OAIEditorialUpdatedContent::getSupplierCode() const {
    return m_supplier_code;
}
void OAIEditorialUpdatedContent::setSupplierCode(const QString &supplier_code) {
    m_supplier_code = supplier_code;
    m_supplier_code_isSet = true;
}

bool OAIEditorialUpdatedContent::is_supplier_code_Set() const{
    return m_supplier_code_isSet;
}

bool OAIEditorialUpdatedContent::is_supplier_code_Valid() const{
    return m_supplier_code_isValid;
}

QString OAIEditorialUpdatedContent::getTitle() const {
    return m_title;
}
void OAIEditorialUpdatedContent::setTitle(const QString &title) {
    m_title = title;
    m_title_isSet = true;
}

bool OAIEditorialUpdatedContent::is_title_Set() const{
    return m_title_isSet;
}

bool OAIEditorialUpdatedContent::is_title_Valid() const{
    return m_title_isValid;
}

QDateTime OAIEditorialUpdatedContent::getUpdatedTime() const {
    return m_updated_time;
}
void OAIEditorialUpdatedContent::setUpdatedTime(const QDateTime &updated_time) {
    m_updated_time = updated_time;
    m_updated_time_isSet = true;
}

bool OAIEditorialUpdatedContent::is_updated_time_Set() const{
    return m_updated_time_isSet;
}

bool OAIEditorialUpdatedContent::is_updated_time_Valid() const{
    return m_updated_time_isValid;
}

QList<QString> OAIEditorialUpdatedContent::getUpdates() const {
    return m_updates;
}
void OAIEditorialUpdatedContent::setUpdates(const QList<QString> &updates) {
    m_updates = updates;
    m_updates_isSet = true;
}

bool OAIEditorialUpdatedContent::is_updates_Set() const{
    return m_updates_isSet;
}

bool OAIEditorialUpdatedContent::is_updates_Valid() const{
    return m_updates_isValid;
}

bool OAIEditorialUpdatedContent::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_aspect_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_assets.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_byline_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_caption_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_categories.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_commercial_status.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_created_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_date_taken_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_description_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_keywords.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_rights.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_special_instructions_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_supplier_code_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_title_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_time_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updates.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIEditorialUpdatedContent::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_id_isValid && true;
}

} // namespace OpenAPI
