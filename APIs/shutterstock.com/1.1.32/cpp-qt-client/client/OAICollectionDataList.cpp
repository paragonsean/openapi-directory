/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICollectionDataList.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICollectionDataList::OAICollectionDataList(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICollectionDataList::OAICollectionDataList() {
    this->initializeModel();
}

OAICollectionDataList::~OAICollectionDataList() {}

void OAICollectionDataList::initializeModel() {

    m_data_isSet = false;
    m_data_isValid = false;

    m_errors_isSet = false;
    m_errors_isValid = false;

    m_message_isSet = false;
    m_message_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_total_count_isSet = false;
    m_total_count_isValid = false;
}

void OAICollectionDataList::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICollectionDataList::fromJsonObject(QJsonObject json) {

    m_data_isValid = ::OpenAPI::fromJsonValue(m_data, json[QString("data")]);
    m_data_isSet = !json[QString("data")].isNull() && m_data_isValid;

    m_errors_isValid = ::OpenAPI::fromJsonValue(m_errors, json[QString("errors")]);
    m_errors_isSet = !json[QString("errors")].isNull() && m_errors_isValid;

    m_message_isValid = ::OpenAPI::fromJsonValue(m_message, json[QString("message")]);
    m_message_isSet = !json[QString("message")].isNull() && m_message_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_total_count_isValid = ::OpenAPI::fromJsonValue(m_total_count, json[QString("total_count")]);
    m_total_count_isSet = !json[QString("total_count")].isNull() && m_total_count_isValid;
}

QString OAICollectionDataList::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICollectionDataList::asJsonObject() const {
    QJsonObject obj;
    if (m_data.size() > 0) {
        obj.insert(QString("data"), ::OpenAPI::toJsonValue(m_data));
    }
    if (m_errors.size() > 0) {
        obj.insert(QString("errors"), ::OpenAPI::toJsonValue(m_errors));
    }
    if (m_message_isSet) {
        obj.insert(QString("message"), ::OpenAPI::toJsonValue(m_message));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_total_count_isSet) {
        obj.insert(QString("total_count"), ::OpenAPI::toJsonValue(m_total_count));
    }
    return obj;
}

QList<OAICollection> OAICollectionDataList::getData() const {
    return m_data;
}
void OAICollectionDataList::setData(const QList<OAICollection> &data) {
    m_data = data;
    m_data_isSet = true;
}

bool OAICollectionDataList::is_data_Set() const{
    return m_data_isSet;
}

bool OAICollectionDataList::is_data_Valid() const{
    return m_data_isValid;
}

QList<OAIError> OAICollectionDataList::getErrors() const {
    return m_errors;
}
void OAICollectionDataList::setErrors(const QList<OAIError> &errors) {
    m_errors = errors;
    m_errors_isSet = true;
}

bool OAICollectionDataList::is_errors_Set() const{
    return m_errors_isSet;
}

bool OAICollectionDataList::is_errors_Valid() const{
    return m_errors_isValid;
}

QString OAICollectionDataList::getMessage() const {
    return m_message;
}
void OAICollectionDataList::setMessage(const QString &message) {
    m_message = message;
    m_message_isSet = true;
}

bool OAICollectionDataList::is_message_Set() const{
    return m_message_isSet;
}

bool OAICollectionDataList::is_message_Valid() const{
    return m_message_isValid;
}

qint32 OAICollectionDataList::getPage() const {
    return m_page;
}
void OAICollectionDataList::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAICollectionDataList::is_page_Set() const{
    return m_page_isSet;
}

bool OAICollectionDataList::is_page_Valid() const{
    return m_page_isValid;
}

qint32 OAICollectionDataList::getPerPage() const {
    return m_per_page;
}
void OAICollectionDataList::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAICollectionDataList::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAICollectionDataList::is_per_page_Valid() const{
    return m_per_page_isValid;
}

qint32 OAICollectionDataList::getTotalCount() const {
    return m_total_count;
}
void OAICollectionDataList::setTotalCount(const qint32 &total_count) {
    m_total_count = total_count;
    m_total_count_isSet = true;
}

bool OAICollectionDataList::is_total_count_Set() const{
    return m_total_count_isSet;
}

bool OAICollectionDataList::is_total_count_Valid() const{
    return m_total_count_isValid;
}

bool OAICollectionDataList::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_data.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_errors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_message_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_total_count_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICollectionDataList::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
