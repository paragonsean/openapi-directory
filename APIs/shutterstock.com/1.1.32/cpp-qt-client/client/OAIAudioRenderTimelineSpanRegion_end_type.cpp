/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIAudioRenderTimelineSpanRegion_end_type.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIAudioRenderTimelineSpanRegion_end_type::OAIAudioRenderTimelineSpanRegion_end_type(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIAudioRenderTimelineSpanRegion_end_type::OAIAudioRenderTimelineSpanRegion_end_type() {
    this->initializeModel();
}

OAIAudioRenderTimelineSpanRegion_end_type::~OAIAudioRenderTimelineSpanRegion_end_type() {}

void OAIAudioRenderTimelineSpanRegion_end_type::initializeModel() {

    m_beat_isSet = false;
    m_beat_isValid = false;

    m_event_isSet = false;
    m_event_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;
}

void OAIAudioRenderTimelineSpanRegion_end_type::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIAudioRenderTimelineSpanRegion_end_type::fromJsonObject(QJsonObject json) {

    m_beat_isValid = ::OpenAPI::fromJsonValue(m_beat, json[QString("beat")]);
    m_beat_isSet = !json[QString("beat")].isNull() && m_beat_isValid;

    m_event_isValid = ::OpenAPI::fromJsonValue(m_event, json[QString("event")]);
    m_event_isSet = !json[QString("event")].isNull() && m_event_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;
}

QString OAIAudioRenderTimelineSpanRegion_end_type::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIAudioRenderTimelineSpanRegion_end_type::asJsonObject() const {
    QJsonObject obj;
    if (m_beat_isSet) {
        obj.insert(QString("beat"), ::OpenAPI::toJsonValue(m_beat));
    }
    if (m_event_isSet) {
        obj.insert(QString("event"), ::OpenAPI::toJsonValue(m_event));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    return obj;
}

double OAIAudioRenderTimelineSpanRegion_end_type::getBeat() const {
    return m_beat;
}
void OAIAudioRenderTimelineSpanRegion_end_type::setBeat(const double &beat) {
    m_beat = beat;
    m_beat_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::is_beat_Set() const{
    return m_beat_isSet;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::is_beat_Valid() const{
    return m_beat_isValid;
}

QString OAIAudioRenderTimelineSpanRegion_end_type::getEvent() const {
    return m_event;
}
void OAIAudioRenderTimelineSpanRegion_end_type::setEvent(const QString &event) {
    m_event = event;
    m_event_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::is_event_Set() const{
    return m_event_isSet;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::is_event_Valid() const{
    return m_event_isValid;
}

QString OAIAudioRenderTimelineSpanRegion_end_type::getType() const {
    return m_type;
}
void OAIAudioRenderTimelineSpanRegion_end_type::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::is_type_Set() const{
    return m_type_isSet;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::is_type_Valid() const{
    return m_type_isValid;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_beat_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_event_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIAudioRenderTimelineSpanRegion_end_type::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_beat_isValid && m_event_isValid && m_type_isValid && true;
}

} // namespace OpenAPI
