/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAITestValidate.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAITestValidate::OAITestValidate(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAITestValidate::OAITestValidate() {
    this->initializeModel();
}

OAITestValidate::~OAITestValidate() {}

void OAITestValidate::initializeModel() {

    m_header_isSet = false;
    m_header_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;
}

void OAITestValidate::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAITestValidate::fromJsonObject(QJsonObject json) {

    m_header_isValid = ::OpenAPI::fromJsonValue(m_header, json[QString("header")]);
    m_header_isSet = !json[QString("header")].isNull() && m_header_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;
}

QString OAITestValidate::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAITestValidate::asJsonObject() const {
    QJsonObject obj;
    if (m_header.isSet()) {
        obj.insert(QString("header"), ::OpenAPI::toJsonValue(m_header));
    }
    if (m_query.isSet()) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    return obj;
}

OAITestValidateHeader OAITestValidate::getHeader() const {
    return m_header;
}
void OAITestValidate::setHeader(const OAITestValidateHeader &header) {
    m_header = header;
    m_header_isSet = true;
}

bool OAITestValidate::is_header_Set() const{
    return m_header_isSet;
}

bool OAITestValidate::is_header_Valid() const{
    return m_header_isValid;
}

OAITestValidateQuery OAITestValidate::getQuery() const {
    return m_query;
}
void OAITestValidate::setQuery(const OAITestValidateQuery &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAITestValidate::is_query_Set() const{
    return m_query_isSet;
}

bool OAITestValidate::is_query_Valid() const{
    return m_query_isValid;
}

bool OAITestValidate::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_header.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_query.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAITestValidate::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
