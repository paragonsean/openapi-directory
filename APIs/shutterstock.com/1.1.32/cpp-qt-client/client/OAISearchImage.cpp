/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISearchImage.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISearchImage::OAISearchImage(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISearchImage::OAISearchImage() {
    this->initializeModel();
}

OAISearchImage::~OAISearchImage() {}

void OAISearchImage::initializeModel() {

    m_added_date_isSet = false;
    m_added_date_isValid = false;

    m_added_date_end_isSet = false;
    m_added_date_end_isValid = false;

    m_added_date_start_isSet = false;
    m_added_date_start_isValid = false;

    m_aspect_ratio_isSet = false;
    m_aspect_ratio_isValid = false;

    m_aspect_ratio_max_isSet = false;
    m_aspect_ratio_max_isValid = false;

    m_aspect_ratio_min_isSet = false;
    m_aspect_ratio_min_isValid = false;

    m_authentic_isSet = false;
    m_authentic_isValid = false;

    m_category_isSet = false;
    m_category_isValid = false;

    m_color_isSet = false;
    m_color_isValid = false;

    m_contributor_isSet = false;
    m_contributor_isValid = false;

    m_contributor_country_isSet = false;
    m_contributor_country_isValid = false;

    m_fields_isSet = false;
    m_fields_isValid = false;

    m_height_isSet = false;
    m_height_isValid = false;

    m_height_from_isSet = false;
    m_height_from_isValid = false;

    m_height_to_isSet = false;
    m_height_to_isValid = false;

    m_image_type_isSet = false;
    m_image_type_isValid = false;

    m_keyword_safe_search_isSet = false;
    m_keyword_safe_search_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_license_isSet = false;
    m_license_isValid = false;

    m_model_isSet = false;
    m_model_isValid = false;

    m_orientation_isSet = false;
    m_orientation_isValid = false;

    m_page_isSet = false;
    m_page_isValid = false;

    m_people_age_isSet = false;
    m_people_age_isValid = false;

    m_people_ethnicity_isSet = false;
    m_people_ethnicity_isValid = false;

    m_people_gender_isSet = false;
    m_people_gender_isValid = false;

    m_people_model_released_isSet = false;
    m_people_model_released_isValid = false;

    m_people_number_isSet = false;
    m_people_number_isValid = false;

    m_per_page_isSet = false;
    m_per_page_isValid = false;

    m_query_isSet = false;
    m_query_isValid = false;

    m_region_isSet = false;
    m_region_isValid = false;

    m_safe_isSet = false;
    m_safe_isValid = false;

    m_sort_isSet = false;
    m_sort_isValid = false;

    m_spellcheck_query_isSet = false;
    m_spellcheck_query_isValid = false;

    m_view_isSet = false;
    m_view_isValid = false;

    m_width_isSet = false;
    m_width_isValid = false;

    m_width_from_isSet = false;
    m_width_from_isValid = false;

    m_width_to_isSet = false;
    m_width_to_isValid = false;
}

void OAISearchImage::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISearchImage::fromJsonObject(QJsonObject json) {

    m_added_date_isValid = ::OpenAPI::fromJsonValue(m_added_date, json[QString("added_date")]);
    m_added_date_isSet = !json[QString("added_date")].isNull() && m_added_date_isValid;

    m_added_date_end_isValid = ::OpenAPI::fromJsonValue(m_added_date_end, json[QString("added_date_end")]);
    m_added_date_end_isSet = !json[QString("added_date_end")].isNull() && m_added_date_end_isValid;

    m_added_date_start_isValid = ::OpenAPI::fromJsonValue(m_added_date_start, json[QString("added_date_start")]);
    m_added_date_start_isSet = !json[QString("added_date_start")].isNull() && m_added_date_start_isValid;

    m_aspect_ratio_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio, json[QString("aspect_ratio")]);
    m_aspect_ratio_isSet = !json[QString("aspect_ratio")].isNull() && m_aspect_ratio_isValid;

    m_aspect_ratio_max_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio_max, json[QString("aspect_ratio_max")]);
    m_aspect_ratio_max_isSet = !json[QString("aspect_ratio_max")].isNull() && m_aspect_ratio_max_isValid;

    m_aspect_ratio_min_isValid = ::OpenAPI::fromJsonValue(m_aspect_ratio_min, json[QString("aspect_ratio_min")]);
    m_aspect_ratio_min_isSet = !json[QString("aspect_ratio_min")].isNull() && m_aspect_ratio_min_isValid;

    m_authentic_isValid = ::OpenAPI::fromJsonValue(m_authentic, json[QString("authentic")]);
    m_authentic_isSet = !json[QString("authentic")].isNull() && m_authentic_isValid;

    m_category_isValid = ::OpenAPI::fromJsonValue(m_category, json[QString("category")]);
    m_category_isSet = !json[QString("category")].isNull() && m_category_isValid;

    m_color_isValid = ::OpenAPI::fromJsonValue(m_color, json[QString("color")]);
    m_color_isSet = !json[QString("color")].isNull() && m_color_isValid;

    m_contributor_isValid = ::OpenAPI::fromJsonValue(m_contributor, json[QString("contributor")]);
    m_contributor_isSet = !json[QString("contributor")].isNull() && m_contributor_isValid;

    m_contributor_country_isValid = ::OpenAPI::fromJsonValue(m_contributor_country, json[QString("contributor_country")]);
    m_contributor_country_isSet = !json[QString("contributor_country")].isNull() && m_contributor_country_isValid;

    m_fields_isValid = ::OpenAPI::fromJsonValue(m_fields, json[QString("fields")]);
    m_fields_isSet = !json[QString("fields")].isNull() && m_fields_isValid;

    m_height_isValid = ::OpenAPI::fromJsonValue(m_height, json[QString("height")]);
    m_height_isSet = !json[QString("height")].isNull() && m_height_isValid;

    m_height_from_isValid = ::OpenAPI::fromJsonValue(m_height_from, json[QString("height_from")]);
    m_height_from_isSet = !json[QString("height_from")].isNull() && m_height_from_isValid;

    m_height_to_isValid = ::OpenAPI::fromJsonValue(m_height_to, json[QString("height_to")]);
    m_height_to_isSet = !json[QString("height_to")].isNull() && m_height_to_isValid;

    m_image_type_isValid = ::OpenAPI::fromJsonValue(m_image_type, json[QString("image_type")]);
    m_image_type_isSet = !json[QString("image_type")].isNull() && m_image_type_isValid;

    m_keyword_safe_search_isValid = ::OpenAPI::fromJsonValue(m_keyword_safe_search, json[QString("keyword_safe_search")]);
    m_keyword_safe_search_isSet = !json[QString("keyword_safe_search")].isNull() && m_keyword_safe_search_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_license_isValid = ::OpenAPI::fromJsonValue(m_license, json[QString("license")]);
    m_license_isSet = !json[QString("license")].isNull() && m_license_isValid;

    m_model_isValid = ::OpenAPI::fromJsonValue(m_model, json[QString("model")]);
    m_model_isSet = !json[QString("model")].isNull() && m_model_isValid;

    m_orientation_isValid = ::OpenAPI::fromJsonValue(m_orientation, json[QString("orientation")]);
    m_orientation_isSet = !json[QString("orientation")].isNull() && m_orientation_isValid;

    m_page_isValid = ::OpenAPI::fromJsonValue(m_page, json[QString("page")]);
    m_page_isSet = !json[QString("page")].isNull() && m_page_isValid;

    m_people_age_isValid = ::OpenAPI::fromJsonValue(m_people_age, json[QString("people_age")]);
    m_people_age_isSet = !json[QString("people_age")].isNull() && m_people_age_isValid;

    m_people_ethnicity_isValid = ::OpenAPI::fromJsonValue(m_people_ethnicity, json[QString("people_ethnicity")]);
    m_people_ethnicity_isSet = !json[QString("people_ethnicity")].isNull() && m_people_ethnicity_isValid;

    m_people_gender_isValid = ::OpenAPI::fromJsonValue(m_people_gender, json[QString("people_gender")]);
    m_people_gender_isSet = !json[QString("people_gender")].isNull() && m_people_gender_isValid;

    m_people_model_released_isValid = ::OpenAPI::fromJsonValue(m_people_model_released, json[QString("people_model_released")]);
    m_people_model_released_isSet = !json[QString("people_model_released")].isNull() && m_people_model_released_isValid;

    m_people_number_isValid = ::OpenAPI::fromJsonValue(m_people_number, json[QString("people_number")]);
    m_people_number_isSet = !json[QString("people_number")].isNull() && m_people_number_isValid;

    m_per_page_isValid = ::OpenAPI::fromJsonValue(m_per_page, json[QString("per_page")]);
    m_per_page_isSet = !json[QString("per_page")].isNull() && m_per_page_isValid;

    m_query_isValid = ::OpenAPI::fromJsonValue(m_query, json[QString("query")]);
    m_query_isSet = !json[QString("query")].isNull() && m_query_isValid;

    m_region_isValid = ::OpenAPI::fromJsonValue(m_region, json[QString("region")]);
    m_region_isSet = !json[QString("region")].isNull() && m_region_isValid;

    m_safe_isValid = ::OpenAPI::fromJsonValue(m_safe, json[QString("safe")]);
    m_safe_isSet = !json[QString("safe")].isNull() && m_safe_isValid;

    m_sort_isValid = ::OpenAPI::fromJsonValue(m_sort, json[QString("sort")]);
    m_sort_isSet = !json[QString("sort")].isNull() && m_sort_isValid;

    m_spellcheck_query_isValid = ::OpenAPI::fromJsonValue(m_spellcheck_query, json[QString("spellcheck_query")]);
    m_spellcheck_query_isSet = !json[QString("spellcheck_query")].isNull() && m_spellcheck_query_isValid;

    m_view_isValid = ::OpenAPI::fromJsonValue(m_view, json[QString("view")]);
    m_view_isSet = !json[QString("view")].isNull() && m_view_isValid;

    m_width_isValid = ::OpenAPI::fromJsonValue(m_width, json[QString("width")]);
    m_width_isSet = !json[QString("width")].isNull() && m_width_isValid;

    m_width_from_isValid = ::OpenAPI::fromJsonValue(m_width_from, json[QString("width_from")]);
    m_width_from_isSet = !json[QString("width_from")].isNull() && m_width_from_isValid;

    m_width_to_isValid = ::OpenAPI::fromJsonValue(m_width_to, json[QString("width_to")]);
    m_width_to_isSet = !json[QString("width_to")].isNull() && m_width_to_isValid;
}

QString OAISearchImage::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISearchImage::asJsonObject() const {
    QJsonObject obj;
    if (m_added_date_isSet) {
        obj.insert(QString("added_date"), ::OpenAPI::toJsonValue(m_added_date));
    }
    if (m_added_date_end_isSet) {
        obj.insert(QString("added_date_end"), ::OpenAPI::toJsonValue(m_added_date_end));
    }
    if (m_added_date_start_isSet) {
        obj.insert(QString("added_date_start"), ::OpenAPI::toJsonValue(m_added_date_start));
    }
    if (m_aspect_ratio_isSet) {
        obj.insert(QString("aspect_ratio"), ::OpenAPI::toJsonValue(m_aspect_ratio));
    }
    if (m_aspect_ratio_max_isSet) {
        obj.insert(QString("aspect_ratio_max"), ::OpenAPI::toJsonValue(m_aspect_ratio_max));
    }
    if (m_aspect_ratio_min_isSet) {
        obj.insert(QString("aspect_ratio_min"), ::OpenAPI::toJsonValue(m_aspect_ratio_min));
    }
    if (m_authentic_isSet) {
        obj.insert(QString("authentic"), ::OpenAPI::toJsonValue(m_authentic));
    }
    if (m_category_isSet) {
        obj.insert(QString("category"), ::OpenAPI::toJsonValue(m_category));
    }
    if (m_color_isSet) {
        obj.insert(QString("color"), ::OpenAPI::toJsonValue(m_color));
    }
    if (m_contributor.size() > 0) {
        obj.insert(QString("contributor"), ::OpenAPI::toJsonValue(m_contributor));
    }
    if (m_contributor_country.isSet()) {
        obj.insert(QString("contributor_country"), ::OpenAPI::toJsonValue(m_contributor_country));
    }
    if (m_fields_isSet) {
        obj.insert(QString("fields"), ::OpenAPI::toJsonValue(m_fields));
    }
    if (m_height_isSet) {
        obj.insert(QString("height"), ::OpenAPI::toJsonValue(m_height));
    }
    if (m_height_from_isSet) {
        obj.insert(QString("height_from"), ::OpenAPI::toJsonValue(m_height_from));
    }
    if (m_height_to_isSet) {
        obj.insert(QString("height_to"), ::OpenAPI::toJsonValue(m_height_to));
    }
    if (m_image_type.size() > 0) {
        obj.insert(QString("image_type"), ::OpenAPI::toJsonValue(m_image_type));
    }
    if (m_keyword_safe_search_isSet) {
        obj.insert(QString("keyword_safe_search"), ::OpenAPI::toJsonValue(m_keyword_safe_search));
    }
    if (m_language.isSet()) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_license.size() > 0) {
        obj.insert(QString("license"), ::OpenAPI::toJsonValue(m_license));
    }
    if (m_model.size() > 0) {
        obj.insert(QString("model"), ::OpenAPI::toJsonValue(m_model));
    }
    if (m_orientation_isSet) {
        obj.insert(QString("orientation"), ::OpenAPI::toJsonValue(m_orientation));
    }
    if (m_page_isSet) {
        obj.insert(QString("page"), ::OpenAPI::toJsonValue(m_page));
    }
    if (m_people_age_isSet) {
        obj.insert(QString("people_age"), ::OpenAPI::toJsonValue(m_people_age));
    }
    if (m_people_ethnicity.size() > 0) {
        obj.insert(QString("people_ethnicity"), ::OpenAPI::toJsonValue(m_people_ethnicity));
    }
    if (m_people_gender_isSet) {
        obj.insert(QString("people_gender"), ::OpenAPI::toJsonValue(m_people_gender));
    }
    if (m_people_model_released_isSet) {
        obj.insert(QString("people_model_released"), ::OpenAPI::toJsonValue(m_people_model_released));
    }
    if (m_people_number_isSet) {
        obj.insert(QString("people_number"), ::OpenAPI::toJsonValue(m_people_number));
    }
    if (m_per_page_isSet) {
        obj.insert(QString("per_page"), ::OpenAPI::toJsonValue(m_per_page));
    }
    if (m_query_isSet) {
        obj.insert(QString("query"), ::OpenAPI::toJsonValue(m_query));
    }
    if (m_region.isSet()) {
        obj.insert(QString("region"), ::OpenAPI::toJsonValue(m_region));
    }
    if (m_safe_isSet) {
        obj.insert(QString("safe"), ::OpenAPI::toJsonValue(m_safe));
    }
    if (m_sort_isSet) {
        obj.insert(QString("sort"), ::OpenAPI::toJsonValue(m_sort));
    }
    if (m_spellcheck_query_isSet) {
        obj.insert(QString("spellcheck_query"), ::OpenAPI::toJsonValue(m_spellcheck_query));
    }
    if (m_view_isSet) {
        obj.insert(QString("view"), ::OpenAPI::toJsonValue(m_view));
    }
    if (m_width_isSet) {
        obj.insert(QString("width"), ::OpenAPI::toJsonValue(m_width));
    }
    if (m_width_from_isSet) {
        obj.insert(QString("width_from"), ::OpenAPI::toJsonValue(m_width_from));
    }
    if (m_width_to_isSet) {
        obj.insert(QString("width_to"), ::OpenAPI::toJsonValue(m_width_to));
    }
    return obj;
}

QDate OAISearchImage::getAddedDate() const {
    return m_added_date;
}
void OAISearchImage::setAddedDate(const QDate &added_date) {
    m_added_date = added_date;
    m_added_date_isSet = true;
}

bool OAISearchImage::is_added_date_Set() const{
    return m_added_date_isSet;
}

bool OAISearchImage::is_added_date_Valid() const{
    return m_added_date_isValid;
}

QDate OAISearchImage::getAddedDateEnd() const {
    return m_added_date_end;
}
void OAISearchImage::setAddedDateEnd(const QDate &added_date_end) {
    m_added_date_end = added_date_end;
    m_added_date_end_isSet = true;
}

bool OAISearchImage::is_added_date_end_Set() const{
    return m_added_date_end_isSet;
}

bool OAISearchImage::is_added_date_end_Valid() const{
    return m_added_date_end_isValid;
}

QDate OAISearchImage::getAddedDateStart() const {
    return m_added_date_start;
}
void OAISearchImage::setAddedDateStart(const QDate &added_date_start) {
    m_added_date_start = added_date_start;
    m_added_date_start_isSet = true;
}

bool OAISearchImage::is_added_date_start_Set() const{
    return m_added_date_start_isSet;
}

bool OAISearchImage::is_added_date_start_Valid() const{
    return m_added_date_start_isValid;
}

double OAISearchImage::getAspectRatio() const {
    return m_aspect_ratio;
}
void OAISearchImage::setAspectRatio(const double &aspect_ratio) {
    m_aspect_ratio = aspect_ratio;
    m_aspect_ratio_isSet = true;
}

bool OAISearchImage::is_aspect_ratio_Set() const{
    return m_aspect_ratio_isSet;
}

bool OAISearchImage::is_aspect_ratio_Valid() const{
    return m_aspect_ratio_isValid;
}

double OAISearchImage::getAspectRatioMax() const {
    return m_aspect_ratio_max;
}
void OAISearchImage::setAspectRatioMax(const double &aspect_ratio_max) {
    m_aspect_ratio_max = aspect_ratio_max;
    m_aspect_ratio_max_isSet = true;
}

bool OAISearchImage::is_aspect_ratio_max_Set() const{
    return m_aspect_ratio_max_isSet;
}

bool OAISearchImage::is_aspect_ratio_max_Valid() const{
    return m_aspect_ratio_max_isValid;
}

double OAISearchImage::getAspectRatioMin() const {
    return m_aspect_ratio_min;
}
void OAISearchImage::setAspectRatioMin(const double &aspect_ratio_min) {
    m_aspect_ratio_min = aspect_ratio_min;
    m_aspect_ratio_min_isSet = true;
}

bool OAISearchImage::is_aspect_ratio_min_Set() const{
    return m_aspect_ratio_min_isSet;
}

bool OAISearchImage::is_aspect_ratio_min_Valid() const{
    return m_aspect_ratio_min_isValid;
}

bool OAISearchImage::isAuthentic() const {
    return m_authentic;
}
void OAISearchImage::setAuthentic(const bool &authentic) {
    m_authentic = authentic;
    m_authentic_isSet = true;
}

bool OAISearchImage::is_authentic_Set() const{
    return m_authentic_isSet;
}

bool OAISearchImage::is_authentic_Valid() const{
    return m_authentic_isValid;
}

QString OAISearchImage::getCategory() const {
    return m_category;
}
void OAISearchImage::setCategory(const QString &category) {
    m_category = category;
    m_category_isSet = true;
}

bool OAISearchImage::is_category_Set() const{
    return m_category_isSet;
}

bool OAISearchImage::is_category_Valid() const{
    return m_category_isValid;
}

QString OAISearchImage::getColor() const {
    return m_color;
}
void OAISearchImage::setColor(const QString &color) {
    m_color = color;
    m_color_isSet = true;
}

bool OAISearchImage::is_color_Set() const{
    return m_color_isSet;
}

bool OAISearchImage::is_color_Valid() const{
    return m_color_isValid;
}

QList<QString> OAISearchImage::getContributor() const {
    return m_contributor;
}
void OAISearchImage::setContributor(const QList<QString> &contributor) {
    m_contributor = contributor;
    m_contributor_isSet = true;
}

bool OAISearchImage::is_contributor_Set() const{
    return m_contributor_isSet;
}

bool OAISearchImage::is_contributor_Valid() const{
    return m_contributor_isValid;
}

OAISearchImage_contributor_country OAISearchImage::getContributorCountry() const {
    return m_contributor_country;
}
void OAISearchImage::setContributorCountry(const OAISearchImage_contributor_country &contributor_country) {
    m_contributor_country = contributor_country;
    m_contributor_country_isSet = true;
}

bool OAISearchImage::is_contributor_country_Set() const{
    return m_contributor_country_isSet;
}

bool OAISearchImage::is_contributor_country_Valid() const{
    return m_contributor_country_isValid;
}

QString OAISearchImage::getFields() const {
    return m_fields;
}
void OAISearchImage::setFields(const QString &fields) {
    m_fields = fields;
    m_fields_isSet = true;
}

bool OAISearchImage::is_fields_Set() const{
    return m_fields_isSet;
}

bool OAISearchImage::is_fields_Valid() const{
    return m_fields_isValid;
}

qint32 OAISearchImage::getHeight() const {
    return m_height;
}
void OAISearchImage::setHeight(const qint32 &height) {
    m_height = height;
    m_height_isSet = true;
}

bool OAISearchImage::is_height_Set() const{
    return m_height_isSet;
}

bool OAISearchImage::is_height_Valid() const{
    return m_height_isValid;
}

qint32 OAISearchImage::getHeightFrom() const {
    return m_height_from;
}
void OAISearchImage::setHeightFrom(const qint32 &height_from) {
    m_height_from = height_from;
    m_height_from_isSet = true;
}

bool OAISearchImage::is_height_from_Set() const{
    return m_height_from_isSet;
}

bool OAISearchImage::is_height_from_Valid() const{
    return m_height_from_isValid;
}

qint32 OAISearchImage::getHeightTo() const {
    return m_height_to;
}
void OAISearchImage::setHeightTo(const qint32 &height_to) {
    m_height_to = height_to;
    m_height_to_isSet = true;
}

bool OAISearchImage::is_height_to_Set() const{
    return m_height_to_isSet;
}

bool OAISearchImage::is_height_to_Valid() const{
    return m_height_to_isValid;
}

QList<QString> OAISearchImage::getImageType() const {
    return m_image_type;
}
void OAISearchImage::setImageType(const QList<QString> &image_type) {
    m_image_type = image_type;
    m_image_type_isSet = true;
}

bool OAISearchImage::is_image_type_Set() const{
    return m_image_type_isSet;
}

bool OAISearchImage::is_image_type_Valid() const{
    return m_image_type_isValid;
}

bool OAISearchImage::isKeywordSafeSearch() const {
    return m_keyword_safe_search;
}
void OAISearchImage::setKeywordSafeSearch(const bool &keyword_safe_search) {
    m_keyword_safe_search = keyword_safe_search;
    m_keyword_safe_search_isSet = true;
}

bool OAISearchImage::is_keyword_safe_search_Set() const{
    return m_keyword_safe_search_isSet;
}

bool OAISearchImage::is_keyword_safe_search_Valid() const{
    return m_keyword_safe_search_isValid;
}

OAILanguage OAISearchImage::getLanguage() const {
    return m_language;
}
void OAISearchImage::setLanguage(const OAILanguage &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAISearchImage::is_language_Set() const{
    return m_language_isSet;
}

bool OAISearchImage::is_language_Valid() const{
    return m_language_isValid;
}

QList<QString> OAISearchImage::getLicense() const {
    return m_license;
}
void OAISearchImage::setLicense(const QList<QString> &license) {
    m_license = license;
    m_license_isSet = true;
}

bool OAISearchImage::is_license_Set() const{
    return m_license_isSet;
}

bool OAISearchImage::is_license_Valid() const{
    return m_license_isValid;
}

QList<QString> OAISearchImage::getModel() const {
    return m_model;
}
void OAISearchImage::setModel(const QList<QString> &model) {
    m_model = model;
    m_model_isSet = true;
}

bool OAISearchImage::is_model_Set() const{
    return m_model_isSet;
}

bool OAISearchImage::is_model_Valid() const{
    return m_model_isValid;
}

QString OAISearchImage::getOrientation() const {
    return m_orientation;
}
void OAISearchImage::setOrientation(const QString &orientation) {
    m_orientation = orientation;
    m_orientation_isSet = true;
}

bool OAISearchImage::is_orientation_Set() const{
    return m_orientation_isSet;
}

bool OAISearchImage::is_orientation_Valid() const{
    return m_orientation_isValid;
}

qint32 OAISearchImage::getPage() const {
    return m_page;
}
void OAISearchImage::setPage(const qint32 &page) {
    m_page = page;
    m_page_isSet = true;
}

bool OAISearchImage::is_page_Set() const{
    return m_page_isSet;
}

bool OAISearchImage::is_page_Valid() const{
    return m_page_isValid;
}

QString OAISearchImage::getPeopleAge() const {
    return m_people_age;
}
void OAISearchImage::setPeopleAge(const QString &people_age) {
    m_people_age = people_age;
    m_people_age_isSet = true;
}

bool OAISearchImage::is_people_age_Set() const{
    return m_people_age_isSet;
}

bool OAISearchImage::is_people_age_Valid() const{
    return m_people_age_isValid;
}

QList<QString> OAISearchImage::getPeopleEthnicity() const {
    return m_people_ethnicity;
}
void OAISearchImage::setPeopleEthnicity(const QList<QString> &people_ethnicity) {
    m_people_ethnicity = people_ethnicity;
    m_people_ethnicity_isSet = true;
}

bool OAISearchImage::is_people_ethnicity_Set() const{
    return m_people_ethnicity_isSet;
}

bool OAISearchImage::is_people_ethnicity_Valid() const{
    return m_people_ethnicity_isValid;
}

QString OAISearchImage::getPeopleGender() const {
    return m_people_gender;
}
void OAISearchImage::setPeopleGender(const QString &people_gender) {
    m_people_gender = people_gender;
    m_people_gender_isSet = true;
}

bool OAISearchImage::is_people_gender_Set() const{
    return m_people_gender_isSet;
}

bool OAISearchImage::is_people_gender_Valid() const{
    return m_people_gender_isValid;
}

bool OAISearchImage::isPeopleModelReleased() const {
    return m_people_model_released;
}
void OAISearchImage::setPeopleModelReleased(const bool &people_model_released) {
    m_people_model_released = people_model_released;
    m_people_model_released_isSet = true;
}

bool OAISearchImage::is_people_model_released_Set() const{
    return m_people_model_released_isSet;
}

bool OAISearchImage::is_people_model_released_Valid() const{
    return m_people_model_released_isValid;
}

qint32 OAISearchImage::getPeopleNumber() const {
    return m_people_number;
}
void OAISearchImage::setPeopleNumber(const qint32 &people_number) {
    m_people_number = people_number;
    m_people_number_isSet = true;
}

bool OAISearchImage::is_people_number_Set() const{
    return m_people_number_isSet;
}

bool OAISearchImage::is_people_number_Valid() const{
    return m_people_number_isValid;
}

qint32 OAISearchImage::getPerPage() const {
    return m_per_page;
}
void OAISearchImage::setPerPage(const qint32 &per_page) {
    m_per_page = per_page;
    m_per_page_isSet = true;
}

bool OAISearchImage::is_per_page_Set() const{
    return m_per_page_isSet;
}

bool OAISearchImage::is_per_page_Valid() const{
    return m_per_page_isValid;
}

QString OAISearchImage::getQuery() const {
    return m_query;
}
void OAISearchImage::setQuery(const QString &query) {
    m_query = query;
    m_query_isSet = true;
}

bool OAISearchImage::is_query_Set() const{
    return m_query_isSet;
}

bool OAISearchImage::is_query_Valid() const{
    return m_query_isValid;
}

OAISearchImage_region OAISearchImage::getRegion() const {
    return m_region;
}
void OAISearchImage::setRegion(const OAISearchImage_region &region) {
    m_region = region;
    m_region_isSet = true;
}

bool OAISearchImage::is_region_Set() const{
    return m_region_isSet;
}

bool OAISearchImage::is_region_Valid() const{
    return m_region_isValid;
}

bool OAISearchImage::isSafe() const {
    return m_safe;
}
void OAISearchImage::setSafe(const bool &safe) {
    m_safe = safe;
    m_safe_isSet = true;
}

bool OAISearchImage::is_safe_Set() const{
    return m_safe_isSet;
}

bool OAISearchImage::is_safe_Valid() const{
    return m_safe_isValid;
}

QString OAISearchImage::getSort() const {
    return m_sort;
}
void OAISearchImage::setSort(const QString &sort) {
    m_sort = sort;
    m_sort_isSet = true;
}

bool OAISearchImage::is_sort_Set() const{
    return m_sort_isSet;
}

bool OAISearchImage::is_sort_Valid() const{
    return m_sort_isValid;
}

bool OAISearchImage::isSpellcheckQuery() const {
    return m_spellcheck_query;
}
void OAISearchImage::setSpellcheckQuery(const bool &spellcheck_query) {
    m_spellcheck_query = spellcheck_query;
    m_spellcheck_query_isSet = true;
}

bool OAISearchImage::is_spellcheck_query_Set() const{
    return m_spellcheck_query_isSet;
}

bool OAISearchImage::is_spellcheck_query_Valid() const{
    return m_spellcheck_query_isValid;
}

QString OAISearchImage::getView() const {
    return m_view;
}
void OAISearchImage::setView(const QString &view) {
    m_view = view;
    m_view_isSet = true;
}

bool OAISearchImage::is_view_Set() const{
    return m_view_isSet;
}

bool OAISearchImage::is_view_Valid() const{
    return m_view_isValid;
}

qint32 OAISearchImage::getWidth() const {
    return m_width;
}
void OAISearchImage::setWidth(const qint32 &width) {
    m_width = width;
    m_width_isSet = true;
}

bool OAISearchImage::is_width_Set() const{
    return m_width_isSet;
}

bool OAISearchImage::is_width_Valid() const{
    return m_width_isValid;
}

qint32 OAISearchImage::getWidthFrom() const {
    return m_width_from;
}
void OAISearchImage::setWidthFrom(const qint32 &width_from) {
    m_width_from = width_from;
    m_width_from_isSet = true;
}

bool OAISearchImage::is_width_from_Set() const{
    return m_width_from_isSet;
}

bool OAISearchImage::is_width_from_Valid() const{
    return m_width_from_isValid;
}

qint32 OAISearchImage::getWidthTo() const {
    return m_width_to;
}
void OAISearchImage::setWidthTo(const qint32 &width_to) {
    m_width_to = width_to;
    m_width_to_isSet = true;
}

bool OAISearchImage::is_width_to_Set() const{
    return m_width_to_isSet;
}

bool OAISearchImage::is_width_to_Valid() const{
    return m_width_to_isValid;
}

bool OAISearchImage::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_added_date_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_date_end_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_added_date_start_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_ratio_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_ratio_max_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_aspect_ratio_min_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_authentic_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_category_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_color_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_contributor_country.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_fields_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_height_to_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_type.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_keyword_safe_search_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_license.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_model.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_orientation_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_age_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_ethnicity.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_gender_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_model_released_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_people_number_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_per_page_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_region.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_safe_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_sort_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_spellcheck_query_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_view_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_from_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_width_to_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISearchImage::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
