/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAISFXAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAISFXAssets::OAISFXAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAISFXAssets::OAISFXAssets() {
    this->initializeModel();
}

OAISFXAssets::~OAISFXAssets() {}

void OAISFXAssets::initializeModel() {

    m_preview_mp3_isSet = false;
    m_preview_mp3_isValid = false;

    m_waveform_isSet = false;
    m_waveform_isValid = false;
}

void OAISFXAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAISFXAssets::fromJsonObject(QJsonObject json) {

    m_preview_mp3_isValid = ::OpenAPI::fromJsonValue(m_preview_mp3, json[QString("preview_mp3")]);
    m_preview_mp3_isSet = !json[QString("preview_mp3")].isNull() && m_preview_mp3_isValid;

    m_waveform_isValid = ::OpenAPI::fromJsonValue(m_waveform, json[QString("waveform")]);
    m_waveform_isSet = !json[QString("waveform")].isNull() && m_waveform_isValid;
}

QString OAISFXAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAISFXAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_preview_mp3.isSet()) {
        obj.insert(QString("preview_mp3"), ::OpenAPI::toJsonValue(m_preview_mp3));
    }
    if (m_waveform.isSet()) {
        obj.insert(QString("waveform"), ::OpenAPI::toJsonValue(m_waveform));
    }
    return obj;
}

OAISFXAssetDetails OAISFXAssets::getPreviewMp3() const {
    return m_preview_mp3;
}
void OAISFXAssets::setPreviewMp3(const OAISFXAssetDetails &preview_mp3) {
    m_preview_mp3 = preview_mp3;
    m_preview_mp3_isSet = true;
}

bool OAISFXAssets::is_preview_mp3_Set() const{
    return m_preview_mp3_isSet;
}

bool OAISFXAssets::is_preview_mp3_Valid() const{
    return m_preview_mp3_isValid;
}

OAISFXAssetDetails OAISFXAssets::getWaveform() const {
    return m_waveform;
}
void OAISFXAssets::setWaveform(const OAISFXAssetDetails &waveform) {
    m_waveform = waveform;
    m_waveform_isSet = true;
}

bool OAISFXAssets::is_waveform_Set() const{
    return m_waveform_isSet;
}

bool OAISFXAssets::is_waveform_Valid() const{
    return m_waveform_isValid;
}

bool OAISFXAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_preview_mp3.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_waveform.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAISFXAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
