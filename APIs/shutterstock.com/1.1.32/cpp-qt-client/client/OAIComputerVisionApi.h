/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIComputerVisionApi_H
#define OAI_OAIComputerVisionApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIComputerVisionImageCreateResponse.h"
#include "OAIGetKeywords_asset_id_parameter.h"
#include "OAIImageCreateRequest.h"
#include "OAIImageCreateResponse.h"
#include "OAIImageSearchResults.h"
#include "OAIKeywordDataList.h"
#include "OAILanguage.h"
#include "OAIVideoSearchResults.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIComputerVisionApi : public QObject {
    Q_OBJECT

public:
    OAIComputerVisionApi(const int timeOut = 0);
    ~OAIComputerVisionApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  asset_id OAIGetKeywords_asset_id_parameter [required]
    */
    virtual void getKeywords(const OAIGetKeywords_asset_id_parameter &asset_id);

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  license QList<QString> [optional]
    * @param[in]  safe bool [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  view QString [optional]
    */
    virtual void getSimilarImages(const QString &asset_id, const ::OpenAPI::OptionalParam<QList<QString>> &license = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  asset_id QString [required]
    * @param[in]  license QList<QString> [optional]
    * @param[in]  safe bool [optional]
    * @param[in]  language OAILanguage [optional]
    * @param[in]  page qint32 [optional]
    * @param[in]  per_page qint32 [optional]
    * @param[in]  view QString [optional]
    */
    virtual void getSimilarVideos(const QString &asset_id, const ::OpenAPI::OptionalParam<QList<QString>> &license = ::OpenAPI::OptionalParam<QList<QString>>(), const ::OpenAPI::OptionalParam<bool> &safe = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<OAILanguage> &language = ::OpenAPI::OptionalParam<OAILanguage>(), const ::OpenAPI::OptionalParam<qint32> &page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &per_page = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  oai_image_create_request OAIImageCreateRequest [required]
    */
    Q_DECL_DEPRECATED virtual void uploadEphemeralImage(const OAIImageCreateRequest &oai_image_create_request);

    /**
    * @param[in]  oai_image_create_request OAIImageCreateRequest [required]
    */
    virtual void uploadImage(const OAIImageCreateRequest &oai_image_create_request);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getKeywordsCallback(OAIHttpRequestWorker *worker);
    void getSimilarImagesCallback(OAIHttpRequestWorker *worker);
    void getSimilarVideosCallback(OAIHttpRequestWorker *worker);
    void uploadEphemeralImageCallback(OAIHttpRequestWorker *worker);
    void uploadImageCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getKeywordsSignal(OAIKeywordDataList summary);
    void getSimilarImagesSignal(OAIImageSearchResults summary);
    void getSimilarVideosSignal(OAIVideoSearchResults summary);
    void uploadEphemeralImageSignal(OAIImageCreateResponse summary);
    void uploadImageSignal(OAIComputerVisionImageCreateResponse summary);


    void getKeywordsSignalFull(OAIHttpRequestWorker *worker, OAIKeywordDataList summary);
    void getSimilarImagesSignalFull(OAIHttpRequestWorker *worker, OAIImageSearchResults summary);
    void getSimilarVideosSignalFull(OAIHttpRequestWorker *worker, OAIVideoSearchResults summary);
    void uploadEphemeralImageSignalFull(OAIHttpRequestWorker *worker, OAIImageCreateResponse summary);
    void uploadImageSignalFull(OAIHttpRequestWorker *worker, OAIComputerVisionImageCreateResponse summary);

    Q_DECL_DEPRECATED_X("Use getKeywordsSignalError() instead")
    void getKeywordsSignalE(OAIKeywordDataList summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordsSignalError(OAIKeywordDataList summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarImagesSignalError() instead")
    void getSimilarImagesSignalE(OAIImageSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarImagesSignalError(OAIImageSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarVideosSignalError() instead")
    void getSimilarVideosSignalE(OAIVideoSearchResults summary, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarVideosSignalError(OAIVideoSearchResults summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadEphemeralImageSignalError() instead")
    void uploadEphemeralImageSignalE(OAIImageCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadEphemeralImageSignalError(OAIImageCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadImageSignalError() instead")
    void uploadImageSignalE(OAIComputerVisionImageCreateResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadImageSignalError(OAIComputerVisionImageCreateResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getKeywordsSignalErrorFull() instead")
    void getKeywordsSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getKeywordsSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarImagesSignalErrorFull() instead")
    void getSimilarImagesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarImagesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getSimilarVideosSignalErrorFull() instead")
    void getSimilarVideosSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getSimilarVideosSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadEphemeralImageSignalErrorFull() instead")
    void uploadEphemeralImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadEphemeralImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use uploadImageSignalErrorFull() instead")
    void uploadImageSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void uploadImageSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
