/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICatalogCollectionRoleAssignments_roles.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICatalogCollectionRoleAssignments_roles::OAICatalogCollectionRoleAssignments_roles(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICatalogCollectionRoleAssignments_roles::OAICatalogCollectionRoleAssignments_roles() {
    this->initializeModel();
}

OAICatalogCollectionRoleAssignments_roles::~OAICatalogCollectionRoleAssignments_roles() {}

void OAICatalogCollectionRoleAssignments_roles::initializeModel() {

    m_editors_isSet = false;
    m_editors_isValid = false;

    m_owners_isSet = false;
    m_owners_isValid = false;

    m_viewers_isSet = false;
    m_viewers_isValid = false;
}

void OAICatalogCollectionRoleAssignments_roles::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICatalogCollectionRoleAssignments_roles::fromJsonObject(QJsonObject json) {

    m_editors_isValid = ::OpenAPI::fromJsonValue(m_editors, json[QString("editors")]);
    m_editors_isSet = !json[QString("editors")].isNull() && m_editors_isValid;

    m_owners_isValid = ::OpenAPI::fromJsonValue(m_owners, json[QString("owners")]);
    m_owners_isSet = !json[QString("owners")].isNull() && m_owners_isValid;

    m_viewers_isValid = ::OpenAPI::fromJsonValue(m_viewers, json[QString("viewers")]);
    m_viewers_isSet = !json[QString("viewers")].isNull() && m_viewers_isValid;
}

QString OAICatalogCollectionRoleAssignments_roles::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICatalogCollectionRoleAssignments_roles::asJsonObject() const {
    QJsonObject obj;
    if (m_editors.size() > 0) {
        obj.insert(QString("editors"), ::OpenAPI::toJsonValue(m_editors));
    }
    if (m_owners.size() > 0) {
        obj.insert(QString("owners"), ::OpenAPI::toJsonValue(m_owners));
    }
    if (m_viewers.size() > 0) {
        obj.insert(QString("viewers"), ::OpenAPI::toJsonValue(m_viewers));
    }
    return obj;
}

QList<OAICatalogCollectionRole> OAICatalogCollectionRoleAssignments_roles::getEditors() const {
    return m_editors;
}
void OAICatalogCollectionRoleAssignments_roles::setEditors(const QList<OAICatalogCollectionRole> &editors) {
    m_editors = editors;
    m_editors_isSet = true;
}

bool OAICatalogCollectionRoleAssignments_roles::is_editors_Set() const{
    return m_editors_isSet;
}

bool OAICatalogCollectionRoleAssignments_roles::is_editors_Valid() const{
    return m_editors_isValid;
}

QList<OAICatalogCollectionRole> OAICatalogCollectionRoleAssignments_roles::getOwners() const {
    return m_owners;
}
void OAICatalogCollectionRoleAssignments_roles::setOwners(const QList<OAICatalogCollectionRole> &owners) {
    m_owners = owners;
    m_owners_isSet = true;
}

bool OAICatalogCollectionRoleAssignments_roles::is_owners_Set() const{
    return m_owners_isSet;
}

bool OAICatalogCollectionRoleAssignments_roles::is_owners_Valid() const{
    return m_owners_isValid;
}

QList<OAICatalogCollectionRole> OAICatalogCollectionRoleAssignments_roles::getViewers() const {
    return m_viewers;
}
void OAICatalogCollectionRoleAssignments_roles::setViewers(const QList<OAICatalogCollectionRole> &viewers) {
    m_viewers = viewers;
    m_viewers_isSet = true;
}

bool OAICatalogCollectionRoleAssignments_roles::is_viewers_Set() const{
    return m_viewers_isSet;
}

bool OAICatalogCollectionRoleAssignments_roles::is_viewers_Valid() const{
    return m_viewers_isValid;
}

bool OAICatalogCollectionRoleAssignments_roles::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_editors.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_owners.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_viewers.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICatalogCollectionRoleAssignments_roles::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
