/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAIImageAssets.h
 *
 * Information about the assets that are part of an image
 */

#ifndef OAIImageAssets_H
#define OAIImageAssets_H

#include <QJsonObject>

#include "OAIImageSizeDetails.h"
#include "OAIThumbnail.h"

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAIImageSizeDetails;
class OAIThumbnail;

class OAIImageAssets : public OAIObject {
public:
    OAIImageAssets();
    OAIImageAssets(QString json);
    ~OAIImageAssets() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    OAIImageSizeDetails getHugeJpg() const;
    void setHugeJpg(const OAIImageSizeDetails &huge_jpg);
    bool is_huge_jpg_Set() const;
    bool is_huge_jpg_Valid() const;

    OAIThumbnail getHugeThumb() const;
    void setHugeThumb(const OAIThumbnail &huge_thumb);
    bool is_huge_thumb_Set() const;
    bool is_huge_thumb_Valid() const;

    OAIThumbnail getLargeThumb() const;
    void setLargeThumb(const OAIThumbnail &large_thumb);
    bool is_large_thumb_Set() const;
    bool is_large_thumb_Valid() const;

    OAIImageSizeDetails getMediumJpg() const;
    void setMediumJpg(const OAIImageSizeDetails &medium_jpg);
    bool is_medium_jpg_Set() const;
    bool is_medium_jpg_Valid() const;

    OAIThumbnail getPreview() const;
    void setPreview(const OAIThumbnail &preview);
    bool is_preview_Set() const;
    bool is_preview_Valid() const;

    OAIThumbnail getPreview1000() const;
    void setPreview1000(const OAIThumbnail &preview_1000);
    bool is_preview_1000_Set() const;
    bool is_preview_1000_Valid() const;

    OAIThumbnail getPreview1500() const;
    void setPreview1500(const OAIThumbnail &preview_1500);
    bool is_preview_1500_Set() const;
    bool is_preview_1500_Valid() const;

    OAIImageSizeDetails getSmallJpg() const;
    void setSmallJpg(const OAIImageSizeDetails &small_jpg);
    bool is_small_jpg_Set() const;
    bool is_small_jpg_Valid() const;

    OAIThumbnail getSmallThumb() const;
    void setSmallThumb(const OAIThumbnail &small_thumb);
    bool is_small_thumb_Set() const;
    bool is_small_thumb_Valid() const;

    OAIImageSizeDetails getSupersizeJpg() const;
    void setSupersizeJpg(const OAIImageSizeDetails &supersize_jpg);
    bool is_supersize_jpg_Set() const;
    bool is_supersize_jpg_Valid() const;

    OAIImageSizeDetails getVectorEps() const;
    void setVectorEps(const OAIImageSizeDetails &vector_eps);
    bool is_vector_eps_Set() const;
    bool is_vector_eps_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    OAIImageSizeDetails m_huge_jpg;
    bool m_huge_jpg_isSet;
    bool m_huge_jpg_isValid;

    OAIThumbnail m_huge_thumb;
    bool m_huge_thumb_isSet;
    bool m_huge_thumb_isValid;

    OAIThumbnail m_large_thumb;
    bool m_large_thumb_isSet;
    bool m_large_thumb_isValid;

    OAIImageSizeDetails m_medium_jpg;
    bool m_medium_jpg_isSet;
    bool m_medium_jpg_isValid;

    OAIThumbnail m_preview;
    bool m_preview_isSet;
    bool m_preview_isValid;

    OAIThumbnail m_preview_1000;
    bool m_preview_1000_isSet;
    bool m_preview_1000_isValid;

    OAIThumbnail m_preview_1500;
    bool m_preview_1500_isSet;
    bool m_preview_1500_isValid;

    OAIImageSizeDetails m_small_jpg;
    bool m_small_jpg_isSet;
    bool m_small_jpg_isValid;

    OAIThumbnail m_small_thumb;
    bool m_small_thumb_isSet;
    bool m_small_thumb_isValid;

    OAIImageSizeDetails m_supersize_jpg;
    bool m_supersize_jpg_isSet;
    bool m_supersize_jpg_isValid;

    OAIImageSizeDetails m_vector_eps;
    bool m_vector_eps_isSet;
    bool m_vector_eps_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAIImageAssets)

#endif // OAIImageAssets_H
