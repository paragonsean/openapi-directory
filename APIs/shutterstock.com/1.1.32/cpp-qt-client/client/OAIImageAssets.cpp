/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIImageAssets.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIImageAssets::OAIImageAssets(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIImageAssets::OAIImageAssets() {
    this->initializeModel();
}

OAIImageAssets::~OAIImageAssets() {}

void OAIImageAssets::initializeModel() {

    m_huge_jpg_isSet = false;
    m_huge_jpg_isValid = false;

    m_huge_thumb_isSet = false;
    m_huge_thumb_isValid = false;

    m_large_thumb_isSet = false;
    m_large_thumb_isValid = false;

    m_medium_jpg_isSet = false;
    m_medium_jpg_isValid = false;

    m_preview_isSet = false;
    m_preview_isValid = false;

    m_preview_1000_isSet = false;
    m_preview_1000_isValid = false;

    m_preview_1500_isSet = false;
    m_preview_1500_isValid = false;

    m_small_jpg_isSet = false;
    m_small_jpg_isValid = false;

    m_small_thumb_isSet = false;
    m_small_thumb_isValid = false;

    m_supersize_jpg_isSet = false;
    m_supersize_jpg_isValid = false;

    m_vector_eps_isSet = false;
    m_vector_eps_isValid = false;
}

void OAIImageAssets::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIImageAssets::fromJsonObject(QJsonObject json) {

    m_huge_jpg_isValid = ::OpenAPI::fromJsonValue(m_huge_jpg, json[QString("huge_jpg")]);
    m_huge_jpg_isSet = !json[QString("huge_jpg")].isNull() && m_huge_jpg_isValid;

    m_huge_thumb_isValid = ::OpenAPI::fromJsonValue(m_huge_thumb, json[QString("huge_thumb")]);
    m_huge_thumb_isSet = !json[QString("huge_thumb")].isNull() && m_huge_thumb_isValid;

    m_large_thumb_isValid = ::OpenAPI::fromJsonValue(m_large_thumb, json[QString("large_thumb")]);
    m_large_thumb_isSet = !json[QString("large_thumb")].isNull() && m_large_thumb_isValid;

    m_medium_jpg_isValid = ::OpenAPI::fromJsonValue(m_medium_jpg, json[QString("medium_jpg")]);
    m_medium_jpg_isSet = !json[QString("medium_jpg")].isNull() && m_medium_jpg_isValid;

    m_preview_isValid = ::OpenAPI::fromJsonValue(m_preview, json[QString("preview")]);
    m_preview_isSet = !json[QString("preview")].isNull() && m_preview_isValid;

    m_preview_1000_isValid = ::OpenAPI::fromJsonValue(m_preview_1000, json[QString("preview_1000")]);
    m_preview_1000_isSet = !json[QString("preview_1000")].isNull() && m_preview_1000_isValid;

    m_preview_1500_isValid = ::OpenAPI::fromJsonValue(m_preview_1500, json[QString("preview_1500")]);
    m_preview_1500_isSet = !json[QString("preview_1500")].isNull() && m_preview_1500_isValid;

    m_small_jpg_isValid = ::OpenAPI::fromJsonValue(m_small_jpg, json[QString("small_jpg")]);
    m_small_jpg_isSet = !json[QString("small_jpg")].isNull() && m_small_jpg_isValid;

    m_small_thumb_isValid = ::OpenAPI::fromJsonValue(m_small_thumb, json[QString("small_thumb")]);
    m_small_thumb_isSet = !json[QString("small_thumb")].isNull() && m_small_thumb_isValid;

    m_supersize_jpg_isValid = ::OpenAPI::fromJsonValue(m_supersize_jpg, json[QString("supersize_jpg")]);
    m_supersize_jpg_isSet = !json[QString("supersize_jpg")].isNull() && m_supersize_jpg_isValid;

    m_vector_eps_isValid = ::OpenAPI::fromJsonValue(m_vector_eps, json[QString("vector_eps")]);
    m_vector_eps_isSet = !json[QString("vector_eps")].isNull() && m_vector_eps_isValid;
}

QString OAIImageAssets::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIImageAssets::asJsonObject() const {
    QJsonObject obj;
    if (m_huge_jpg.isSet()) {
        obj.insert(QString("huge_jpg"), ::OpenAPI::toJsonValue(m_huge_jpg));
    }
    if (m_huge_thumb.isSet()) {
        obj.insert(QString("huge_thumb"), ::OpenAPI::toJsonValue(m_huge_thumb));
    }
    if (m_large_thumb.isSet()) {
        obj.insert(QString("large_thumb"), ::OpenAPI::toJsonValue(m_large_thumb));
    }
    if (m_medium_jpg.isSet()) {
        obj.insert(QString("medium_jpg"), ::OpenAPI::toJsonValue(m_medium_jpg));
    }
    if (m_preview.isSet()) {
        obj.insert(QString("preview"), ::OpenAPI::toJsonValue(m_preview));
    }
    if (m_preview_1000.isSet()) {
        obj.insert(QString("preview_1000"), ::OpenAPI::toJsonValue(m_preview_1000));
    }
    if (m_preview_1500.isSet()) {
        obj.insert(QString("preview_1500"), ::OpenAPI::toJsonValue(m_preview_1500));
    }
    if (m_small_jpg.isSet()) {
        obj.insert(QString("small_jpg"), ::OpenAPI::toJsonValue(m_small_jpg));
    }
    if (m_small_thumb.isSet()) {
        obj.insert(QString("small_thumb"), ::OpenAPI::toJsonValue(m_small_thumb));
    }
    if (m_supersize_jpg.isSet()) {
        obj.insert(QString("supersize_jpg"), ::OpenAPI::toJsonValue(m_supersize_jpg));
    }
    if (m_vector_eps.isSet()) {
        obj.insert(QString("vector_eps"), ::OpenAPI::toJsonValue(m_vector_eps));
    }
    return obj;
}

OAIImageSizeDetails OAIImageAssets::getHugeJpg() const {
    return m_huge_jpg;
}
void OAIImageAssets::setHugeJpg(const OAIImageSizeDetails &huge_jpg) {
    m_huge_jpg = huge_jpg;
    m_huge_jpg_isSet = true;
}

bool OAIImageAssets::is_huge_jpg_Set() const{
    return m_huge_jpg_isSet;
}

bool OAIImageAssets::is_huge_jpg_Valid() const{
    return m_huge_jpg_isValid;
}

OAIThumbnail OAIImageAssets::getHugeThumb() const {
    return m_huge_thumb;
}
void OAIImageAssets::setHugeThumb(const OAIThumbnail &huge_thumb) {
    m_huge_thumb = huge_thumb;
    m_huge_thumb_isSet = true;
}

bool OAIImageAssets::is_huge_thumb_Set() const{
    return m_huge_thumb_isSet;
}

bool OAIImageAssets::is_huge_thumb_Valid() const{
    return m_huge_thumb_isValid;
}

OAIThumbnail OAIImageAssets::getLargeThumb() const {
    return m_large_thumb;
}
void OAIImageAssets::setLargeThumb(const OAIThumbnail &large_thumb) {
    m_large_thumb = large_thumb;
    m_large_thumb_isSet = true;
}

bool OAIImageAssets::is_large_thumb_Set() const{
    return m_large_thumb_isSet;
}

bool OAIImageAssets::is_large_thumb_Valid() const{
    return m_large_thumb_isValid;
}

OAIImageSizeDetails OAIImageAssets::getMediumJpg() const {
    return m_medium_jpg;
}
void OAIImageAssets::setMediumJpg(const OAIImageSizeDetails &medium_jpg) {
    m_medium_jpg = medium_jpg;
    m_medium_jpg_isSet = true;
}

bool OAIImageAssets::is_medium_jpg_Set() const{
    return m_medium_jpg_isSet;
}

bool OAIImageAssets::is_medium_jpg_Valid() const{
    return m_medium_jpg_isValid;
}

OAIThumbnail OAIImageAssets::getPreview() const {
    return m_preview;
}
void OAIImageAssets::setPreview(const OAIThumbnail &preview) {
    m_preview = preview;
    m_preview_isSet = true;
}

bool OAIImageAssets::is_preview_Set() const{
    return m_preview_isSet;
}

bool OAIImageAssets::is_preview_Valid() const{
    return m_preview_isValid;
}

OAIThumbnail OAIImageAssets::getPreview1000() const {
    return m_preview_1000;
}
void OAIImageAssets::setPreview1000(const OAIThumbnail &preview_1000) {
    m_preview_1000 = preview_1000;
    m_preview_1000_isSet = true;
}

bool OAIImageAssets::is_preview_1000_Set() const{
    return m_preview_1000_isSet;
}

bool OAIImageAssets::is_preview_1000_Valid() const{
    return m_preview_1000_isValid;
}

OAIThumbnail OAIImageAssets::getPreview1500() const {
    return m_preview_1500;
}
void OAIImageAssets::setPreview1500(const OAIThumbnail &preview_1500) {
    m_preview_1500 = preview_1500;
    m_preview_1500_isSet = true;
}

bool OAIImageAssets::is_preview_1500_Set() const{
    return m_preview_1500_isSet;
}

bool OAIImageAssets::is_preview_1500_Valid() const{
    return m_preview_1500_isValid;
}

OAIImageSizeDetails OAIImageAssets::getSmallJpg() const {
    return m_small_jpg;
}
void OAIImageAssets::setSmallJpg(const OAIImageSizeDetails &small_jpg) {
    m_small_jpg = small_jpg;
    m_small_jpg_isSet = true;
}

bool OAIImageAssets::is_small_jpg_Set() const{
    return m_small_jpg_isSet;
}

bool OAIImageAssets::is_small_jpg_Valid() const{
    return m_small_jpg_isValid;
}

OAIThumbnail OAIImageAssets::getSmallThumb() const {
    return m_small_thumb;
}
void OAIImageAssets::setSmallThumb(const OAIThumbnail &small_thumb) {
    m_small_thumb = small_thumb;
    m_small_thumb_isSet = true;
}

bool OAIImageAssets::is_small_thumb_Set() const{
    return m_small_thumb_isSet;
}

bool OAIImageAssets::is_small_thumb_Valid() const{
    return m_small_thumb_isValid;
}

OAIImageSizeDetails OAIImageAssets::getSupersizeJpg() const {
    return m_supersize_jpg;
}
void OAIImageAssets::setSupersizeJpg(const OAIImageSizeDetails &supersize_jpg) {
    m_supersize_jpg = supersize_jpg;
    m_supersize_jpg_isSet = true;
}

bool OAIImageAssets::is_supersize_jpg_Set() const{
    return m_supersize_jpg_isSet;
}

bool OAIImageAssets::is_supersize_jpg_Valid() const{
    return m_supersize_jpg_isValid;
}

OAIImageSizeDetails OAIImageAssets::getVectorEps() const {
    return m_vector_eps;
}
void OAIImageAssets::setVectorEps(const OAIImageSizeDetails &vector_eps) {
    m_vector_eps = vector_eps;
    m_vector_eps_isSet = true;
}

bool OAIImageAssets::is_vector_eps_Set() const{
    return m_vector_eps_isSet;
}

bool OAIImageAssets::is_vector_eps_Valid() const{
    return m_vector_eps_isValid;
}

bool OAIImageAssets::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_huge_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_huge_thumb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_large_thumb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_medium_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_1000.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_preview_1500.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_small_thumb.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_supersize_jpg.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_vector_eps.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIImageAssets::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
