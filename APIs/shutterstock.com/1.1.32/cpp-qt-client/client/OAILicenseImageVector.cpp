/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILicenseImageVector.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILicenseImageVector::OAILicenseImageVector(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILicenseImageVector::OAILicenseImageVector() {
    this->initializeModel();
}

OAILicenseImageVector::~OAILicenseImageVector() {}

void OAILicenseImageVector::initializeModel() {

    m_auth_cookie_isSet = false;
    m_auth_cookie_isValid = false;

    m_editorial_acknowledgement_isSet = false;
    m_editorial_acknowledgement_isValid = false;

    m_format_isSet = false;
    m_format_isValid = false;

    m_image_id_isSet = false;
    m_image_id_isValid = false;

    m_metadata_isSet = false;
    m_metadata_isValid = false;

    m_price_isSet = false;
    m_price_isValid = false;

    m_search_id_isSet = false;
    m_search_id_isValid = false;

    m_show_modal_isSet = false;
    m_show_modal_isValid = false;

    m_size_isSet = false;
    m_size_isValid = false;

    m_subscription_id_isSet = false;
    m_subscription_id_isValid = false;

    m_verification_code_isSet = false;
    m_verification_code_isValid = false;
}

void OAILicenseImageVector::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILicenseImageVector::fromJsonObject(QJsonObject json) {

    m_auth_cookie_isValid = ::OpenAPI::fromJsonValue(m_auth_cookie, json[QString("auth_cookie")]);
    m_auth_cookie_isSet = !json[QString("auth_cookie")].isNull() && m_auth_cookie_isValid;

    m_editorial_acknowledgement_isValid = ::OpenAPI::fromJsonValue(m_editorial_acknowledgement, json[QString("editorial_acknowledgement")]);
    m_editorial_acknowledgement_isSet = !json[QString("editorial_acknowledgement")].isNull() && m_editorial_acknowledgement_isValid;

    m_format_isValid = ::OpenAPI::fromJsonValue(m_format, json[QString("format")]);
    m_format_isSet = !json[QString("format")].isNull() && m_format_isValid;

    m_image_id_isValid = ::OpenAPI::fromJsonValue(m_image_id, json[QString("image_id")]);
    m_image_id_isSet = !json[QString("image_id")].isNull() && m_image_id_isValid;

    m_metadata_isValid = ::OpenAPI::fromJsonValue(m_metadata, json[QString("metadata")]);
    m_metadata_isSet = !json[QString("metadata")].isNull() && m_metadata_isValid;

    m_price_isValid = ::OpenAPI::fromJsonValue(m_price, json[QString("price")]);
    m_price_isSet = !json[QString("price")].isNull() && m_price_isValid;

    m_search_id_isValid = ::OpenAPI::fromJsonValue(m_search_id, json[QString("search_id")]);
    m_search_id_isSet = !json[QString("search_id")].isNull() && m_search_id_isValid;

    m_show_modal_isValid = ::OpenAPI::fromJsonValue(m_show_modal, json[QString("show_modal")]);
    m_show_modal_isSet = !json[QString("show_modal")].isNull() && m_show_modal_isValid;

    m_size_isValid = ::OpenAPI::fromJsonValue(m_size, json[QString("size")]);
    m_size_isSet = !json[QString("size")].isNull() && m_size_isValid;

    m_subscription_id_isValid = ::OpenAPI::fromJsonValue(m_subscription_id, json[QString("subscription_id")]);
    m_subscription_id_isSet = !json[QString("subscription_id")].isNull() && m_subscription_id_isValid;

    m_verification_code_isValid = ::OpenAPI::fromJsonValue(m_verification_code, json[QString("verification_code")]);
    m_verification_code_isSet = !json[QString("verification_code")].isNull() && m_verification_code_isValid;
}

QString OAILicenseImageVector::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILicenseImageVector::asJsonObject() const {
    QJsonObject obj;
    if (m_auth_cookie.isSet()) {
        obj.insert(QString("auth_cookie"), ::OpenAPI::toJsonValue(m_auth_cookie));
    }
    if (m_editorial_acknowledgement_isSet) {
        obj.insert(QString("editorial_acknowledgement"), ::OpenAPI::toJsonValue(m_editorial_acknowledgement));
    }
    if (m_format_isSet) {
        obj.insert(QString("format"), ::OpenAPI::toJsonValue(m_format));
    }
    if (m_image_id_isSet) {
        obj.insert(QString("image_id"), ::OpenAPI::toJsonValue(m_image_id));
    }
    if (m_metadata_isSet) {
        obj.insert(QString("metadata"), ::OpenAPI::toJsonValue(m_metadata));
    }
    if (m_price_isSet) {
        obj.insert(QString("price"), ::OpenAPI::toJsonValue(m_price));
    }
    if (m_search_id_isSet) {
        obj.insert(QString("search_id"), ::OpenAPI::toJsonValue(m_search_id));
    }
    if (m_show_modal_isSet) {
        obj.insert(QString("show_modal"), ::OpenAPI::toJsonValue(m_show_modal));
    }
    if (m_size_isSet) {
        obj.insert(QString("size"), ::OpenAPI::toJsonValue(m_size));
    }
    if (m_subscription_id_isSet) {
        obj.insert(QString("subscription_id"), ::OpenAPI::toJsonValue(m_subscription_id));
    }
    if (m_verification_code_isSet) {
        obj.insert(QString("verification_code"), ::OpenAPI::toJsonValue(m_verification_code));
    }
    return obj;
}

OAICookie OAILicenseImageVector::getAuthCookie() const {
    return m_auth_cookie;
}
void OAILicenseImageVector::setAuthCookie(const OAICookie &auth_cookie) {
    m_auth_cookie = auth_cookie;
    m_auth_cookie_isSet = true;
}

bool OAILicenseImageVector::is_auth_cookie_Set() const{
    return m_auth_cookie_isSet;
}

bool OAILicenseImageVector::is_auth_cookie_Valid() const{
    return m_auth_cookie_isValid;
}

bool OAILicenseImageVector::isEditorialAcknowledgement() const {
    return m_editorial_acknowledgement;
}
void OAILicenseImageVector::setEditorialAcknowledgement(const bool &editorial_acknowledgement) {
    m_editorial_acknowledgement = editorial_acknowledgement;
    m_editorial_acknowledgement_isSet = true;
}

bool OAILicenseImageVector::is_editorial_acknowledgement_Set() const{
    return m_editorial_acknowledgement_isSet;
}

bool OAILicenseImageVector::is_editorial_acknowledgement_Valid() const{
    return m_editorial_acknowledgement_isValid;
}

QString OAILicenseImageVector::getFormat() const {
    return m_format;
}
void OAILicenseImageVector::setFormat(const QString &format) {
    m_format = format;
    m_format_isSet = true;
}

bool OAILicenseImageVector::is_format_Set() const{
    return m_format_isSet;
}

bool OAILicenseImageVector::is_format_Valid() const{
    return m_format_isValid;
}

QString OAILicenseImageVector::getImageId() const {
    return m_image_id;
}
void OAILicenseImageVector::setImageId(const QString &image_id) {
    m_image_id = image_id;
    m_image_id_isSet = true;
}

bool OAILicenseImageVector::is_image_id_Set() const{
    return m_image_id_isSet;
}

bool OAILicenseImageVector::is_image_id_Valid() const{
    return m_image_id_isValid;
}

OAIObject OAILicenseImageVector::getMetadata() const {
    return m_metadata;
}
void OAILicenseImageVector::setMetadata(const OAIObject &metadata) {
    m_metadata = metadata;
    m_metadata_isSet = true;
}

bool OAILicenseImageVector::is_metadata_Set() const{
    return m_metadata_isSet;
}

bool OAILicenseImageVector::is_metadata_Valid() const{
    return m_metadata_isValid;
}

double OAILicenseImageVector::getPrice() const {
    return m_price;
}
void OAILicenseImageVector::setPrice(const double &price) {
    m_price = price;
    m_price_isSet = true;
}

bool OAILicenseImageVector::is_price_Set() const{
    return m_price_isSet;
}

bool OAILicenseImageVector::is_price_Valid() const{
    return m_price_isValid;
}

QString OAILicenseImageVector::getSearchId() const {
    return m_search_id;
}
void OAILicenseImageVector::setSearchId(const QString &search_id) {
    m_search_id = search_id;
    m_search_id_isSet = true;
}

bool OAILicenseImageVector::is_search_id_Set() const{
    return m_search_id_isSet;
}

bool OAILicenseImageVector::is_search_id_Valid() const{
    return m_search_id_isValid;
}

bool OAILicenseImageVector::isShowModal() const {
    return m_show_modal;
}
void OAILicenseImageVector::setShowModal(const bool &show_modal) {
    m_show_modal = show_modal;
    m_show_modal_isSet = true;
}

bool OAILicenseImageVector::is_show_modal_Set() const{
    return m_show_modal_isSet;
}

bool OAILicenseImageVector::is_show_modal_Valid() const{
    return m_show_modal_isValid;
}

QString OAILicenseImageVector::getSize() const {
    return m_size;
}
void OAILicenseImageVector::setSize(const QString &size) {
    m_size = size;
    m_size_isSet = true;
}

bool OAILicenseImageVector::is_size_Set() const{
    return m_size_isSet;
}

bool OAILicenseImageVector::is_size_Valid() const{
    return m_size_isValid;
}

QString OAILicenseImageVector::getSubscriptionId() const {
    return m_subscription_id;
}
void OAILicenseImageVector::setSubscriptionId(const QString &subscription_id) {
    m_subscription_id = subscription_id;
    m_subscription_id_isSet = true;
}

bool OAILicenseImageVector::is_subscription_id_Set() const{
    return m_subscription_id_isSet;
}

bool OAILicenseImageVector::is_subscription_id_Valid() const{
    return m_subscription_id_isValid;
}

QString OAILicenseImageVector::getVerificationCode() const {
    return m_verification_code;
}
void OAILicenseImageVector::setVerificationCode(const QString &verification_code) {
    m_verification_code = verification_code;
    m_verification_code_isSet = true;
}

bool OAILicenseImageVector::is_verification_code_Set() const{
    return m_verification_code_isSet;
}

bool OAILicenseImageVector::is_verification_code_Valid() const{
    return m_verification_code_isValid;
}

bool OAILicenseImageVector::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_auth_cookie.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_editorial_acknowledgement_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_format_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_image_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_metadata_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_price_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_search_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_show_modal_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_size_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_subscription_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_verification_code_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILicenseImageVector::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_image_id_isValid && true;
}

} // namespace OpenAPI
