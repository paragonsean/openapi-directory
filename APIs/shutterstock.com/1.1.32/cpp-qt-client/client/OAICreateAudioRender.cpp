/**
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICreateAudioRender.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICreateAudioRender::OAICreateAudioRender(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICreateAudioRender::OAICreateAudioRender() {
    this->initializeModel();
}

OAICreateAudioRender::~OAICreateAudioRender() {}

void OAICreateAudioRender::initializeModel() {

    m_filename_isSet = false;
    m_filename_isValid = false;

    m_preset_isSet = false;
    m_preset_isValid = false;

    m_timeline_isSet = false;
    m_timeline_isValid = false;
}

void OAICreateAudioRender::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICreateAudioRender::fromJsonObject(QJsonObject json) {

    m_filename_isValid = ::OpenAPI::fromJsonValue(m_filename, json[QString("filename")]);
    m_filename_isSet = !json[QString("filename")].isNull() && m_filename_isValid;

    m_preset_isValid = ::OpenAPI::fromJsonValue(m_preset, json[QString("preset")]);
    m_preset_isSet = !json[QString("preset")].isNull() && m_preset_isValid;

    m_timeline_isValid = ::OpenAPI::fromJsonValue(m_timeline, json[QString("timeline")]);
    m_timeline_isSet = !json[QString("timeline")].isNull() && m_timeline_isValid;
}

QString OAICreateAudioRender::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICreateAudioRender::asJsonObject() const {
    QJsonObject obj;
    if (m_filename_isSet) {
        obj.insert(QString("filename"), ::OpenAPI::toJsonValue(m_filename));
    }
    if (m_preset_isSet) {
        obj.insert(QString("preset"), ::OpenAPI::toJsonValue(m_preset));
    }
    if (m_timeline.isSet()) {
        obj.insert(QString("timeline"), ::OpenAPI::toJsonValue(m_timeline));
    }
    return obj;
}

QString OAICreateAudioRender::getFilename() const {
    return m_filename;
}
void OAICreateAudioRender::setFilename(const QString &filename) {
    m_filename = filename;
    m_filename_isSet = true;
}

bool OAICreateAudioRender::is_filename_Set() const{
    return m_filename_isSet;
}

bool OAICreateAudioRender::is_filename_Valid() const{
    return m_filename_isValid;
}

QString OAICreateAudioRender::getPreset() const {
    return m_preset;
}
void OAICreateAudioRender::setPreset(const QString &preset) {
    m_preset = preset;
    m_preset_isSet = true;
}

bool OAICreateAudioRender::is_preset_Set() const{
    return m_preset_isSet;
}

bool OAICreateAudioRender::is_preset_Valid() const{
    return m_preset_isValid;
}

OAIAudioRenderTimeline OAICreateAudioRender::getTimeline() const {
    return m_timeline;
}
void OAICreateAudioRender::setTimeline(const OAIAudioRenderTimeline &timeline) {
    m_timeline = timeline;
    m_timeline_isSet = true;
}

bool OAICreateAudioRender::is_timeline_Set() const{
    return m_timeline_isSet;
}

bool OAICreateAudioRender::is_timeline_Valid() const{
    return m_timeline_isValid;
}

bool OAICreateAudioRender::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_filename_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_preset_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_timeline.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICreateAudioRender::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_filename_isValid && m_preset_isValid && m_timeline_isValid && true;
}

} // namespace OpenAPI
