/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.SFXAssets;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * SFX metadata
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class SFX {
  public static final String SERIALIZED_NAME_ADDED_DATE = "added_date";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE)
  private LocalDate addedDate;

  public static final String SERIALIZED_NAME_AFFILIATE_URL = "affiliate_url";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_URL)
  private String affiliateUrl;

  public static final String SERIALIZED_NAME_ARTIST = "artist";
  @SerializedName(SERIALIZED_NAME_ARTIST)
  private String artist;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private SFXAssets assets;

  public static final String SERIALIZED_NAME_CONTRIBUTOR = "contributor";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR)
  private Contributor contributor;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_DURATION = "duration";
  @SerializedName(SERIALIZED_NAME_DURATION)
  private BigDecimal duration;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_RELEASES = "releases";
  @SerializedName(SERIALIZED_NAME_RELEASES)
  private List<String> releases = new ArrayList<>();

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public SFX() {
  }

  public SFX addedDate(LocalDate addedDate) {
    this.addedDate = addedDate;
    return this;
  }

  /**
   * Date this sound effect was added to the Shutterstock library
   * @return addedDate
   */
  @javax.annotation.Nullable
  public LocalDate getAddedDate() {
    return addedDate;
  }

  public void setAddedDate(LocalDate addedDate) {
    this.addedDate = addedDate;
  }


  public SFX affiliateUrl(String affiliateUrl) {
    this.affiliateUrl = affiliateUrl;
    return this;
  }

  /**
   * Affiliate referral link; appears only for registered affiliate partners
   * @return affiliateUrl
   */
  @javax.annotation.Nullable
  public String getAffiliateUrl() {
    return affiliateUrl;
  }

  public void setAffiliateUrl(String affiliateUrl) {
    this.affiliateUrl = affiliateUrl;
  }


  public SFX artist(String artist) {
    this.artist = artist;
    return this;
  }

  /**
   * Artist of the sound effect
   * @return artist
   */
  @javax.annotation.Nullable
  public String getArtist() {
    return artist;
  }

  public void setArtist(String artist) {
    this.artist = artist;
  }


  public SFX assets(SFXAssets assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Get assets
   * @return assets
   */
  @javax.annotation.Nullable
  public SFXAssets getAssets() {
    return assets;
  }

  public void setAssets(SFXAssets assets) {
    this.assets = assets;
  }


  public SFX contributor(Contributor contributor) {
    this.contributor = contributor;
    return this;
  }

  /**
   * Get contributor
   * @return contributor
   */
  @javax.annotation.Nonnull
  public Contributor getContributor() {
    return contributor;
  }

  public void setContributor(Contributor contributor) {
    this.contributor = contributor;
  }


  public SFX description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Description of this sound effect
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public SFX duration(BigDecimal duration) {
    this.duration = duration;
    return this;
  }

  /**
   * Duration of this sound effect in seconds
   * @return duration
   */
  @javax.annotation.Nullable
  public BigDecimal getDuration() {
    return duration;
  }

  public void setDuration(BigDecimal duration) {
    this.duration = duration;
  }


  public SFX id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Shutterstock ID of this sound effect
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public SFX keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public SFX addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * List of all keywords for this sound effect
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public SFX mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Media type of this track; should always be \&quot;sfx\&quot;
   * @return mediaType
   */
  @javax.annotation.Nonnull
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public SFX releases(List<String> releases) {
    this.releases = releases;
    return this;
  }

  public SFX addReleasesItem(String releasesItem) {
    if (this.releases == null) {
      this.releases = new ArrayList<>();
    }
    this.releases.add(releasesItem);
    return this;
  }

  /**
   * List of all releases of this sound effect
   * @return releases
   */
  @javax.annotation.Nullable
  public List<String> getReleases() {
    return releases;
  }

  public void setReleases(List<String> releases) {
    this.releases = releases;
  }


  public SFX title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Title of this sound effect
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public SFX updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Time this sound effect was last updated
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public SFX url(String url) {
    this.url = url;
    return this;
  }

  /**
   * 
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SFX SFX = (SFX) o;
    return Objects.equals(this.addedDate, SFX.addedDate) &&
        Objects.equals(this.affiliateUrl, SFX.affiliateUrl) &&
        Objects.equals(this.artist, SFX.artist) &&
        Objects.equals(this.assets, SFX.assets) &&
        Objects.equals(this.contributor, SFX.contributor) &&
        Objects.equals(this.description, SFX.description) &&
        Objects.equals(this.duration, SFX.duration) &&
        Objects.equals(this.id, SFX.id) &&
        Objects.equals(this.keywords, SFX.keywords) &&
        Objects.equals(this.mediaType, SFX.mediaType) &&
        Objects.equals(this.releases, SFX.releases) &&
        Objects.equals(this.title, SFX.title) &&
        Objects.equals(this.updatedTime, SFX.updatedTime) &&
        Objects.equals(this.url, SFX.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedDate, affiliateUrl, artist, assets, contributor, description, duration, id, keywords, mediaType, releases, title, updatedTime, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SFX {\n");
    sb.append("    addedDate: ").append(toIndentedString(addedDate)).append("\n");
    sb.append("    affiliateUrl: ").append(toIndentedString(affiliateUrl)).append("\n");
    sb.append("    artist: ").append(toIndentedString(artist)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    contributor: ").append(toIndentedString(contributor)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    duration: ").append(toIndentedString(duration)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_date");
    openapiFields.add("affiliate_url");
    openapiFields.add("artist");
    openapiFields.add("assets");
    openapiFields.add("contributor");
    openapiFields.add("description");
    openapiFields.add("duration");
    openapiFields.add("id");
    openapiFields.add("keywords");
    openapiFields.add("media_type");
    openapiFields.add("releases");
    openapiFields.add("title");
    openapiFields.add("updated_time");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contributor");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("media_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to SFX
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!SFX.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in SFX is not found in the empty JSON string", SFX.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!SFX.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `SFX` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : SFX.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliate_url") != null && !jsonObj.get("affiliate_url").isJsonNull()) && !jsonObj.get("affiliate_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliate_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliate_url").toString()));
      }
      if ((jsonObj.get("artist") != null && !jsonObj.get("artist").isJsonNull()) && !jsonObj.get("artist").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `artist` to be a primitive type in the JSON string but got `%s`", jsonObj.get("artist").toString()));
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        SFXAssets.validateJsonElement(jsonObj.get("assets"));
      }
      // validate the required field `contributor`
      Contributor.validateJsonElement(jsonObj.get("contributor"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("releases") != null && !jsonObj.get("releases").isJsonNull() && !jsonObj.get("releases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases` to be an array in the JSON string but got `%s`", jsonObj.get("releases").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!SFX.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'SFX' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<SFX> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(SFX.class));

       return (TypeAdapter<T>) new TypeAdapter<SFX>() {
           @Override
           public void write(JsonWriter out, SFX value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public SFX read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of SFX given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of SFX
   * @throws IOException if the JSON string is invalid with respect to SFX
   */
  public static SFX fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, SFX.class);
  }

  /**
   * Convert an instance of SFX to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

