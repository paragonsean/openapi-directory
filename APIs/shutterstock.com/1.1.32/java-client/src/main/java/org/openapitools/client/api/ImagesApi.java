/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.BulkImageSearchResults;
import org.openapitools.client.model.BulkSearchImagesContributorCountryParameter;
import org.openapitools.client.model.BulkSearchImagesRegionParameter;
import org.openapitools.client.model.CategoryDataList;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionCreateRequest;
import org.openapitools.client.model.CollectionCreateResponse;
import org.openapitools.client.model.CollectionDataList;
import org.openapitools.client.model.CollectionItemDataList;
import org.openapitools.client.model.CollectionItemRequest;
import org.openapitools.client.model.CollectionUpdateRequest;
import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.FeaturedCollection;
import org.openapitools.client.model.FeaturedCollectionDataList;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageDataList;
import org.openapitools.client.model.ImageSearchResults;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.LicenseImageRequest;
import org.openapitools.client.model.LicenseImageResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RecommendationDataList;
import org.openapitools.client.model.RedownloadImage;
import org.openapitools.client.model.SearchEntitiesRequest;
import org.openapitools.client.model.SearchEntitiesResponse;
import org.openapitools.client.model.SearchImage;
import org.openapitools.client.model.Suggestions;
import org.openapitools.client.model.UpdatedMediaDataList;
import org.openapitools.client.model.Url;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addImageCollectionItems
     * @param id Collection ID (required)
     * @param collectionItemRequest Array of image IDs to add to the collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageCollectionItemsCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionItemRequest;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addImageCollectionItemsValidateBeforeCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addImageCollectionItems(Async)");
        }

        // verify the required parameter 'collectionItemRequest' is set
        if (collectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionItemRequest' when calling addImageCollectionItems(Async)");
        }

        return addImageCollectionItemsCall(id, collectionItemRequest, _callback);

    }

    /**
     * Add images to collections
     * This endpoint adds one or more images to a collection by image IDs.
     * @param id Collection ID (required)
     * @param collectionItemRequest Array of image IDs to add to the collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void addImageCollectionItems(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        addImageCollectionItemsWithHttpInfo(id, collectionItemRequest);
    }

    /**
     * Add images to collections
     * This endpoint adds one or more images to a collection by image IDs.
     * @param id Collection ID (required)
     * @param collectionItemRequest Array of image IDs to add to the collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addImageCollectionItemsWithHttpInfo(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addImageCollectionItemsValidateBeforeCall(id, collectionItemRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add images to collections (asynchronously)
     * This endpoint adds one or more images to a collection by image IDs.
     * @param id Collection ID (required)
     * @param collectionItemRequest Array of image IDs to add to the collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addImageCollectionItemsAsync(String id, CollectionItemRequest collectionItemRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addImageCollectionItemsValidateBeforeCall(id, collectionItemRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for bulkSearchImages
     * @param searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters (required)
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSearchImagesCall(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchImage;

        // create path and map variables
        String localVarPath = "/v2/bulk_search/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (aspectRatioMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_min", aspectRatioMin));
        }

        if (aspectRatioMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_max", aspectRatioMax));
        }

        if (aspectRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio", aspectRatio));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (contributor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor", contributor));
        }

        if (contributorCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_country", contributorCountry));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (heightFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_from", heightFrom));
        }

        if (heightTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_to", heightTo));
        }

        if (imageType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_type", imageType));
        }

        if (keywordSafeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword_safe_search", keywordSafeSearch));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (model != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "model", model));
        }

        if (orientation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orientation", orientation));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (peopleModelReleased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_model_released", peopleModelReleased));
        }

        if (peopleAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_age", peopleAge));
        }

        if (peopleEthnicity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "people_ethnicity", peopleEthnicity));
        }

        if (peopleGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_gender", peopleGender));
        }

        if (peopleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_number", peopleNumber));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (spellcheckQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellcheck_query", spellcheckQuery));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (widthFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_from", widthFrom));
        }

        if (widthTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_to", widthTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call bulkSearchImagesValidateBeforeCall(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchImage' is set
        if (searchImage == null) {
            throw new ApiException("Missing the required parameter 'searchImage' when calling bulkSearchImages(Async)");
        }

        return bulkSearchImagesCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);

    }

    /**
     * Run multiple image searches
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the &#x60;GET /v2/images/search&#x60; endpoint.
     * @param searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters (required)
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @return BulkImageSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public BulkImageSearchResults bulkSearchImages(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo) throws ApiException {
        ApiResponse<BulkImageSearchResults> localVarResp = bulkSearchImagesWithHttpInfo(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
        return localVarResp.getData();
    }

    /**
     * Run multiple image searches
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the &#x60;GET /v2/images/search&#x60; endpoint.
     * @param searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters (required)
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @return ApiResponse&lt;BulkImageSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<BulkImageSearchResults> bulkSearchImagesWithHttpInfo(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo) throws ApiException {
        okhttp3.Call localVarCall = bulkSearchImagesValidateBeforeCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, null);
        Type localVarReturnType = new TypeToken<BulkImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Run multiple image searches (asynchronously)
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the &#x60;GET /v2/images/search&#x60; endpoint.
     * @param searchImage List of queries to request results for and filters to apply per query; these values override the defaults in the query parameters (required)
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call bulkSearchImagesAsync(List<SearchImage> searchImage, LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback<BulkImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = bulkSearchImagesValidateBeforeCall(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        Type localVarReturnType = new TypeToken<BulkImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createImageCollection
     * @param collectionCreateRequest The names of the new collections (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageCollectionCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/images/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createImageCollectionValidateBeforeCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionCreateRequest' is set
        if (collectionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionCreateRequest' when calling createImageCollection(Async)");
        }

        return createImageCollectionCall(collectionCreateRequest, _callback);

    }

    /**
     * Create image collections
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use &#x60;POST /v2/images/collections/{id}/items&#x60;.
     * @param collectionCreateRequest The names of the new collections (required)
     * @return CollectionCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CollectionCreateResponse createImageCollection(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        ApiResponse<CollectionCreateResponse> localVarResp = createImageCollectionWithHttpInfo(collectionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create image collections
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use &#x60;POST /v2/images/collections/{id}/items&#x60;.
     * @param collectionCreateRequest The names of the new collections (required)
     * @return ApiResponse&lt;CollectionCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionCreateResponse> createImageCollectionWithHttpInfo(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createImageCollectionValidateBeforeCall(collectionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create image collections (asynchronously)
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use &#x60;POST /v2/images/collections/{id}/items&#x60;.
     * @param collectionCreateRequest The names of the new collections (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created image collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createImageCollectionAsync(CollectionCreateRequest collectionCreateRequest, final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createImageCollectionValidateBeforeCall(collectionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageCollection
     * @param id Collection ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageCollectionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageCollectionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteImageCollection(Async)");
        }

        return deleteImageCollectionCall(id, _callback);

    }

    /**
     * Delete image collections
     * This endpoint deletes an image collection.
     * @param id Collection ID (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImageCollection(String id) throws ApiException {
        deleteImageCollectionWithHttpInfo(id);
    }

    /**
     * Delete image collections
     * This endpoint deletes an image collection.
     * @param id Collection ID (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImageCollectionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteImageCollectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete image collections (asynchronously)
     * This endpoint deletes an image collection.
     * @param id Collection ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageCollectionAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageCollectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteImageCollectionItems
     * @param id Collection ID (required)
     * @param itemId One or more image IDs to remove from the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageCollectionItemsCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "item_id", itemId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteImageCollectionItemsValidateBeforeCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteImageCollectionItems(Async)");
        }

        return deleteImageCollectionItemsCall(id, itemId, _callback);

    }

    /**
     * Remove images from collections
     * This endpoint removes one or more images from a collection.
     * @param id Collection ID (required)
     * @param itemId One or more image IDs to remove from the collection (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteImageCollectionItems(String id, List<String> itemId) throws ApiException {
        deleteImageCollectionItemsWithHttpInfo(id, itemId);
    }

    /**
     * Remove images from collections
     * This endpoint removes one or more images from a collection.
     * @param id Collection ID (required)
     * @param itemId One or more image IDs to remove from the collection (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteImageCollectionItemsWithHttpInfo(String id, List<String> itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteImageCollectionItemsValidateBeforeCall(id, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove images from collections (asynchronously)
     * This endpoint removes one or more images from a collection.
     * @param id Collection ID (required)
     * @param itemId One or more image IDs to remove from the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteImageCollectionItemsAsync(String id, List<String> itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteImageCollectionItemsValidateBeforeCall(id, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadImage
     * @param id License ID (required)
     * @param redownloadImage Information about the images to redownload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadImageCall(String id, RedownloadImage redownloadImage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redownloadImage;

        // create path and map variables
        String localVarPath = "/v2/images/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadImageValidateBeforeCall(String id, RedownloadImage redownloadImage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadImage(Async)");
        }

        // verify the required parameter 'redownloadImage' is set
        if (redownloadImage == null) {
            throw new ApiException("Missing the required parameter 'redownloadImage' when calling downloadImage(Async)");
        }

        return downloadImageCall(id, redownloadImage, _callback);

    }

    /**
     * Download images
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @param redownloadImage Information about the images to redownload (required)
     * @return Url
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public Url downloadImage(String id, RedownloadImage redownloadImage) throws ApiException {
        ApiResponse<Url> localVarResp = downloadImageWithHttpInfo(id, redownloadImage);
        return localVarResp.getData();
    }

    /**
     * Download images
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @param redownloadImage Information about the images to redownload (required)
     * @return ApiResponse&lt;Url&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Url> downloadImageWithHttpInfo(String id, RedownloadImage redownloadImage) throws ApiException {
        okhttp3.Call localVarCall = downloadImageValidateBeforeCall(id, redownloadImage, null);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download images (asynchronously)
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @param redownloadImage Information about the images to redownload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadImageAsync(String id, RedownloadImage redownloadImage, final ApiCallback<Url> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadImageValidateBeforeCall(id, redownloadImage, _callback);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedImageCollection
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedImageCollectionCall(String id, String embed, String assetHint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/featured/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (assetHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_hint", assetHint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedImageCollectionValidateBeforeCall(String id, String embed, String assetHint, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFeaturedImageCollection(Async)");
        }

        return getFeaturedImageCollectionCall(id, embed, assetHint, _callback);

    }

    /**
     * Get the details of featured image collections
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use &#x60;GET /v2/images/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @return FeaturedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public FeaturedCollection getFeaturedImageCollection(String id, String embed, String assetHint) throws ApiException {
        ApiResponse<FeaturedCollection> localVarResp = getFeaturedImageCollectionWithHttpInfo(id, embed, assetHint);
        return localVarResp.getData();
    }

    /**
     * Get the details of featured image collections
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use &#x60;GET /v2/images/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @return ApiResponse&lt;FeaturedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeaturedCollection> getFeaturedImageCollectionWithHttpInfo(String id, String embed, String assetHint) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedImageCollectionValidateBeforeCall(id, embed, assetHint, null);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of featured image collections (asynchronously)
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use &#x60;GET /v2/images/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedImageCollectionAsync(String id, String embed, String assetHint, final ApiCallback<FeaturedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedImageCollectionValidateBeforeCall(id, embed, assetHint, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedImageCollectionItems
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedImageCollectionItemsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/featured/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedImageCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFeaturedImageCollectionItems(Async)");
        }

        return getFeaturedImageCollectionItemsCall(id, page, perPage, _callback);

    }

    /**
     * Get the contents of featured image collections
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @return CollectionItemDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionItemDataList getFeaturedImageCollectionItems(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<CollectionItemDataList> localVarResp = getFeaturedImageCollectionItemsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the contents of featured image collections
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @return ApiResponse&lt;CollectionItemDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionItemDataList> getFeaturedImageCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedImageCollectionItemsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the contents of featured image collections (asynchronously)
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedImageCollectionItemsAsync(String id, Integer page, Integer perPage, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedImageCollectionItemsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedImageCollectionList
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param type The types of collections to return (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedImageCollectionListCall(String embed, List<String> type, String assetHint, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (assetHint != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_hint", assetHint));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedImageCollectionListValidateBeforeCall(String embed, List<String> type, String assetHint, final ApiCallback _callback) throws ApiException {
        return getFeaturedImageCollectionListCall(embed, type, assetHint, _callback);

    }

    /**
     * List featured image collections
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param type The types of collections to return (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @return FeaturedCollectionDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FeaturedCollectionDataList getFeaturedImageCollectionList(String embed, List<String> type, String assetHint) throws ApiException {
        ApiResponse<FeaturedCollectionDataList> localVarResp = getFeaturedImageCollectionListWithHttpInfo(embed, type, assetHint);
        return localVarResp.getData();
    }

    /**
     * List featured image collections
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param type The types of collections to return (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @return ApiResponse&lt;FeaturedCollectionDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeaturedCollectionDataList> getFeaturedImageCollectionListWithHttpInfo(String embed, List<String> type, String assetHint) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedImageCollectionListValidateBeforeCall(embed, type, assetHint, null);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List featured image collections (asynchronously)
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param type The types of collections to return (optional)
     * @param assetHint Cover image size (optional, default to 1x)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedImageCollectionListAsync(String embed, List<String> type, String assetHint, final ApiCallback<FeaturedCollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedImageCollectionListValidateBeforeCall(embed, type, assetHint, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImage
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageValidateBeforeCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImage(Async)");
        }

        return getImageCall(id, language, view, searchId, _callback);

    }

    /**
     * Get details about images
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return Image
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public Image getImage(String id, Language language, String view, String searchId) throws ApiException {
        ApiResponse<Image> localVarResp = getImageWithHttpInfo(id, language, view, searchId);
        return localVarResp.getData();
    }

    /**
     * Get details about images
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;Image&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Image> getImageWithHttpInfo(String id, Language language, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getImageValidateBeforeCall(id, language, view, searchId, null);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about images (asynchronously)
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageAsync(String id, Language language, String view, String searchId, final ApiCallback<Image> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageValidateBeforeCall(id, language, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<Image>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageCollection
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCollectionCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageCollectionValidateBeforeCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImageCollection(Async)");
        }

        return getImageCollectionCall(id, embed, shareCode, _callback);

    }

    /**
     * Get the details of image collections
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use &#x60;GET /v2/images/collections/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @return Collection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public Collection getImageCollection(String id, List<String> embed, String shareCode) throws ApiException {
        ApiResponse<Collection> localVarResp = getImageCollectionWithHttpInfo(id, embed, shareCode);
        return localVarResp.getData();
    }

    /**
     * Get the details of image collections
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use &#x60;GET /v2/images/collections/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @return ApiResponse&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collection> getImageCollectionWithHttpInfo(String id, List<String> embed, String shareCode) throws ApiException {
        okhttp3.Call localVarCall = getImageCollectionValidateBeforeCall(id, embed, shareCode, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of image collections (asynchronously)
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use &#x60;GET /v2/images/collections/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCollectionAsync(String id, List<String> embed, String shareCode, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageCollectionValidateBeforeCall(id, embed, shareCode, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageCollectionItems
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCollectionItemsCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImageCollectionItems(Async)");
        }

        return getImageCollectionItemsCall(id, page, perPage, shareCode, sort, _callback);

    }

    /**
     * Get the contents of image collections
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @return CollectionItemDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionItemDataList getImageCollectionItems(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        ApiResponse<CollectionItemDataList> localVarResp = getImageCollectionItemsWithHttpInfo(id, page, perPage, shareCode, sort);
        return localVarResp.getData();
    }

    /**
     * Get the contents of image collections
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @return ApiResponse&lt;CollectionItemDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionItemDataList> getImageCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        okhttp3.Call localVarCall = getImageCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the contents of image collections (asynchronously)
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCollectionItemsAsync(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageCollectionList
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCollectionListCall(List<String> embed, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageCollectionListValidateBeforeCall(List<String> embed, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getImageCollectionListCall(embed, page, perPage, _callback);

    }

    /**
     * List image collections
     * This endpoint lists your collections of images and their basic attributes.
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @return CollectionDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CollectionDataList getImageCollectionList(List<String> embed, Integer page, Integer perPage) throws ApiException {
        ApiResponse<CollectionDataList> localVarResp = getImageCollectionListWithHttpInfo(embed, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List image collections
     * This endpoint lists your collections of images and their basic attributes.
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @return ApiResponse&lt;CollectionDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionDataList> getImageCollectionListWithHttpInfo(List<String> embed, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getImageCollectionListValidateBeforeCall(embed, page, perPage, null);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List image collections (asynchronously)
     * This endpoint lists your collections of images and their basic attributes.
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageCollectionListAsync(List<String> embed, Integer page, Integer perPage, final ApiCallback<CollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageCollectionListValidateBeforeCall(embed, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageKeywordSuggestions
     * @param searchEntitiesRequest Plain text to extract keywords from (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageKeywordSuggestionsCall(SearchEntitiesRequest searchEntitiesRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchEntitiesRequest;

        // create path and map variables
        String localVarPath = "/v2/images/search/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageKeywordSuggestionsValidateBeforeCall(SearchEntitiesRequest searchEntitiesRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'searchEntitiesRequest' is set
        if (searchEntitiesRequest == null) {
            throw new ApiException("Missing the required parameter 'searchEntitiesRequest' when calling getImageKeywordSuggestions(Async)");
        }

        return getImageKeywordSuggestionsCall(searchEntitiesRequest, _callback);

    }

    /**
     * Get keywords from text
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param searchEntitiesRequest Plain text to extract keywords from (required)
     * @return SearchEntitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SearchEntitiesResponse getImageKeywordSuggestions(SearchEntitiesRequest searchEntitiesRequest) throws ApiException {
        ApiResponse<SearchEntitiesResponse> localVarResp = getImageKeywordSuggestionsWithHttpInfo(searchEntitiesRequest);
        return localVarResp.getData();
    }

    /**
     * Get keywords from text
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param searchEntitiesRequest Plain text to extract keywords from (required)
     * @return ApiResponse&lt;SearchEntitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SearchEntitiesResponse> getImageKeywordSuggestionsWithHttpInfo(SearchEntitiesRequest searchEntitiesRequest) throws ApiException {
        okhttp3.Call localVarCall = getImageKeywordSuggestionsValidateBeforeCall(searchEntitiesRequest, null);
        Type localVarReturnType = new TypeToken<SearchEntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get keywords from text (asynchronously)
     * This endpoint returns up to 10 important keywords from a block of plain text.
     * @param searchEntitiesRequest Plain text to extract keywords from (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageKeywordSuggestionsAsync(SearchEntitiesRequest searchEntitiesRequest, final ApiCallback<SearchEntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageKeywordSuggestionsValidateBeforeCall(searchEntitiesRequest, _callback);
        Type localVarReturnType = new TypeToken<SearchEntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageLicenseList
     * @param imageId Show licenses for the specified image ID (optional)
     * @param license Show images that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageLicenseListCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_id", imageId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageLicenseListValidateBeforeCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return getImageLicenseListCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }

    /**
     * List image licenses
     * This endpoint lists existing licenses.
     * @param imageId Show licenses for the specified image ID (optional)
     * @param license Show images that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return DownloadHistoryDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DownloadHistoryDataList getImageLicenseList(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        ApiResponse<DownloadHistoryDataList> localVarResp = getImageLicenseListWithHttpInfo(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        return localVarResp.getData();
    }

    /**
     * List image licenses
     * This endpoint lists existing licenses.
     * @param imageId Show licenses for the specified image ID (optional)
     * @param license Show images that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return ApiResponse&lt;DownloadHistoryDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadHistoryDataList> getImageLicenseListWithHttpInfo(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = getImageLicenseListValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List image licenses (asynchronously)
     * This endpoint lists existing licenses.
     * @param imageId Show licenses for the specified image ID (optional)
     * @param license Show images that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageLicenseListAsync(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageLicenseListValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageList
     * @param id One or more image IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageListCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageListValidateBeforeCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImageList(Async)");
        }

        return getImageListCall(id, view, searchId, _callback);

    }

    /**
     * List images
     * This endpoint lists information about one or more images, including the available sizes.
     * @param id One or more image IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ImageDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ImageDataList getImageList(List<String> id, String view, String searchId) throws ApiException {
        ApiResponse<ImageDataList> localVarResp = getImageListWithHttpInfo(id, view, searchId);
        return localVarResp.getData();
    }

    /**
     * List images
     * This endpoint lists information about one or more images, including the available sizes.
     * @param id One or more image IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;ImageDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageDataList> getImageListWithHttpInfo(List<String> id, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getImageListValidateBeforeCall(id, view, searchId, null);
        Type localVarReturnType = new TypeToken<ImageDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List images (asynchronously)
     * This endpoint lists information about one or more images, including the available sizes.
     * @param id One or more image IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageListAsync(List<String> id, String view, String searchId, final ApiCallback<ImageDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageListValidateBeforeCall(id, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<ImageDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageRecommendations
     * @param id Image IDs (required)
     * @param maxItems Maximum number of results returned in the response (optional, default to 20)
     * @param safe Restrict results to safe images (optional, default to true)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageRecommendationsCall(List<String> id, Integer maxItems, Boolean safe, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/recommendations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (maxItems != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("max_items", maxItems));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageRecommendationsValidateBeforeCall(List<String> id, Integer maxItems, Boolean safe, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getImageRecommendations(Async)");
        }

        return getImageRecommendationsCall(id, maxItems, safe, _callback);

    }

    /**
     * List recommended images
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param id Image IDs (required)
     * @param maxItems Maximum number of results returned in the response (optional, default to 20)
     * @param safe Restrict results to safe images (optional, default to true)
     * @return RecommendationDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public RecommendationDataList getImageRecommendations(List<String> id, Integer maxItems, Boolean safe) throws ApiException {
        ApiResponse<RecommendationDataList> localVarResp = getImageRecommendationsWithHttpInfo(id, maxItems, safe);
        return localVarResp.getData();
    }

    /**
     * List recommended images
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param id Image IDs (required)
     * @param maxItems Maximum number of results returned in the response (optional, default to 20)
     * @param safe Restrict results to safe images (optional, default to true)
     * @return ApiResponse&lt;RecommendationDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<RecommendationDataList> getImageRecommendationsWithHttpInfo(List<String> id, Integer maxItems, Boolean safe) throws ApiException {
        okhttp3.Call localVarCall = getImageRecommendationsValidateBeforeCall(id, maxItems, safe, null);
        Type localVarReturnType = new TypeToken<RecommendationDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List recommended images (asynchronously)
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     * @param id Image IDs (required)
     * @param maxItems Maximum number of results returned in the response (optional, default to 20)
     * @param safe Restrict results to safe images (optional, default to true)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageRecommendationsAsync(List<String> id, Integer maxItems, Boolean safe, final ApiCallback<RecommendationDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageRecommendationsValidateBeforeCall(id, maxItems, safe, _callback);
        Type localVarReturnType = new TypeToken<RecommendationDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getImageSuggestions
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of suggestions (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageSuggestionsCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/search/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getImageSuggestionsValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getImageSuggestions(Async)");
        }

        return getImageSuggestionsCall(query, limit, _callback);

    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of suggestions (optional, default to 10)
     * @return Suggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public Suggestions getImageSuggestions(String query, Integer limit) throws ApiException {
        ApiResponse<Suggestions> localVarResp = getImageSuggestionsWithHttpInfo(query, limit);
        return localVarResp.getData();
    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of suggestions (optional, default to 10)
     * @return ApiResponse&lt;Suggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Suggestions> getImageSuggestionsWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getImageSuggestionsValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get suggestions for a search term (asynchronously)
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of suggestions (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getImageSuggestionsAsync(String query, Integer limit, final ApiCallback<Suggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getImageSuggestionsValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUpdatedImages
     * @param type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways (optional)
     * @param startDate Show images updated on or after the specified date (optional)
     * @param endDate Show images updated before the specified date (optional)
     * @param interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort order (optional, default to newest)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpdatedImagesCall(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpdatedImagesValidateBeforeCall(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getUpdatedImagesCall(type, startDate, endDate, interval, page, perPage, sort, _callback);

    }

    /**
     * List updated images
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show images that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @param type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways (optional)
     * @param startDate Show images updated on or after the specified date (optional)
     * @param endDate Show images updated before the specified date (optional)
     * @param interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort order (optional, default to newest)
     * @return UpdatedMediaDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdatedMediaDataList getUpdatedImages(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort) throws ApiException {
        ApiResponse<UpdatedMediaDataList> localVarResp = getUpdatedImagesWithHttpInfo(type, startDate, endDate, interval, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * List updated images
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show images that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @param type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways (optional)
     * @param startDate Show images updated on or after the specified date (optional)
     * @param endDate Show images updated before the specified date (optional)
     * @param interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort order (optional, default to newest)
     * @return ApiResponse&lt;UpdatedMediaDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatedMediaDataList> getUpdatedImagesWithHttpInfo(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUpdatedImagesValidateBeforeCall(type, startDate, endDate, interval, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List updated images (asynchronously)
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show images that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @param type Show images that were added, deleted, or edited; by default, the endpoint returns images that were updated in any of these ways (optional)
     * @param startDate Show images updated on or after the specified date (optional)
     * @param endDate Show images updated before the specified date (optional)
     * @param interval Show images updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows images that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort order (optional, default to newest)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpdatedImagesAsync(List<String> type, LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback<UpdatedMediaDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpdatedImagesValidateBeforeCall(type, startDate, endDate, interval, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseImages
     * @param licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId Subscription ID to use to license the image (optional)
     * @param format (Deprecated) Image format (optional)
     * @param size Image size (optional, default to huge)
     * @param searchId Search ID that was provided in the results of an image search (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseImagesCall(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseImageRequest;

        // create path and map variables
        String localVarPath = "/v2/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_id", subscriptionId));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseImagesValidateBeforeCall(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseImageRequest' is set
        if (licenseImageRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseImageRequest' when calling licenseImages(Async)");
        }

        return licenseImagesCall(licenseImageRequest, subscriptionId, format, size, searchId, _callback);

    }

    /**
     * License images
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId Subscription ID to use to license the image (optional)
     * @param format (Deprecated) Image format (optional)
     * @param size Image size (optional, default to huge)
     * @param searchId Search ID that was provided in the results of an image search (optional)
     * @return LicenseImageResultDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseImageResultDataList licenseImages(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId) throws ApiException {
        ApiResponse<LicenseImageResultDataList> localVarResp = licenseImagesWithHttpInfo(licenseImageRequest, subscriptionId, format, size, searchId);
        return localVarResp.getData();
    }

    /**
     * License images
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId Subscription ID to use to license the image (optional)
     * @param format (Deprecated) Image format (optional)
     * @param size Image size (optional, default to huge)
     * @param searchId Search ID that was provided in the results of an image search (optional)
     * @return ApiResponse&lt;LicenseImageResultDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseImageResultDataList> licenseImagesWithHttpInfo(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId) throws ApiException {
        okhttp3.Call localVarCall = licenseImagesValidateBeforeCall(licenseImageRequest, subscriptionId, format, size, searchId, null);
        Type localVarReturnType = new TypeToken<LicenseImageResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * License images (asynchronously)
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseImageRequest List of images to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId Subscription ID to use to license the image (optional)
     * @param format (Deprecated) Image format (optional)
     * @param size Image size (optional, default to huge)
     * @param searchId Search ID that was provided in the results of an image search (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseImagesAsync(LicenseImageRequest licenseImageRequest, String subscriptionId, String format, String size, String searchId, final ApiCallback<LicenseImageResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseImagesValidateBeforeCall(licenseImageRequest, subscriptionId, format, size, searchId, _callback);
        Type localVarReturnType = new TypeToken<LicenseImageResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listImageCategories
     * @param language Language for the keywords and categories in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageCategoriesCall(Language language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listImageCategoriesValidateBeforeCall(Language language, final ApiCallback _callback) throws ApiException {
        return listImageCategoriesCall(language, _callback);

    }

    /**
     * List image categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @param language Language for the keywords and categories in the response (optional)
     * @return CategoryDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CategoryDataList listImageCategories(Language language) throws ApiException {
        ApiResponse<CategoryDataList> localVarResp = listImageCategoriesWithHttpInfo(language);
        return localVarResp.getData();
    }

    /**
     * List image categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @param language Language for the keywords and categories in the response (optional)
     * @return ApiResponse&lt;CategoryDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryDataList> listImageCategoriesWithHttpInfo(Language language) throws ApiException {
        okhttp3.Call localVarCall = listImageCategoriesValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List image categories (asynchronously)
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     * @param language Language for the keywords and categories in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listImageCategoriesAsync(Language language, final ApiCallback<CategoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listImageCategoriesValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listSimilarImages
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimilarImagesCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/{id}/similar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listSimilarImagesValidateBeforeCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling listSimilarImages(Async)");
        }

        return listSimilarImagesCall(id, language, page, perPage, view, _callback);

    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ImageSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ImageSearchResults listSimilarImages(String id, Language language, Integer page, Integer perPage, String view) throws ApiException {
        ApiResponse<ImageSearchResults> localVarResp = listSimilarImagesWithHttpInfo(id, language, page, perPage, view);
        return localVarResp.getData();
    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ApiResponse&lt;ImageSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSearchResults> listSimilarImagesWithHttpInfo(String id, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = listSimilarImagesValidateBeforeCall(id, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List similar images (asynchronously)
     * This endpoint returns images that are visually similar to an image that you specify.
     * @param id Image ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listSimilarImagesAsync(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback<ImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listSimilarImagesValidateBeforeCall(id, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameImageCollection
     * @param id Collection ID (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameImageCollectionCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/images/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameImageCollectionValidateBeforeCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renameImageCollection(Async)");
        }

        // verify the required parameter 'collectionUpdateRequest' is set
        if (collectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionUpdateRequest' when calling renameImageCollection(Async)");
        }

        return renameImageCollectionCall(id, collectionUpdateRequest, _callback);

    }

    /**
     * Rename image collections
     * This endpoint sets a new name for an image collection.
     * @param id Collection ID (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void renameImageCollection(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        renameImageCollectionWithHttpInfo(id, collectionUpdateRequest);
    }

    /**
     * Rename image collections
     * This endpoint sets a new name for an image collection.
     * @param id Collection ID (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameImageCollectionWithHttpInfo(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = renameImageCollectionValidateBeforeCall(id, collectionUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename image collections (asynchronously)
     * This endpoint sets a new name for an image collection.
     * @param id Collection ID (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameImageCollectionAsync(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameImageCollectionValidateBeforeCall(id, collectionUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchImages
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aiSearch Set to true and specify the &#x60;ai_objective&#x60; and &#x60;ai_industry&#x60; parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry  (optional)
     * @param aiLabelsLimit For AI-powered search, specify the maximum number of labels to return (optional, default to 20)
     * @param aiIndustry For AI-powered search, specify the industry to target; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param aiObjective For AI-powered search, specify the goal of the media; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out images that match a term (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchImagesCall(LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/images/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (aspectRatioMin != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_min", aspectRatioMin));
        }

        if (aspectRatioMax != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio_max", aspectRatioMax));
        }

        if (aspectRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio", aspectRatio));
        }

        if (aiSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_search", aiSearch));
        }

        if (aiLabelsLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_labels_limit", aiLabelsLimit));
        }

        if (aiIndustry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_industry", aiIndustry));
        }

        if (aiObjective != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ai_objective", aiObjective));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (color != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("color", color));
        }

        if (contributor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor", contributor));
        }

        if (contributorCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contributor_country", contributorCountry));
        }

        if (fields != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fields", fields));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (heightFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_from", heightFrom));
        }

        if (heightTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height_to", heightTo));
        }

        if (imageType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "image_type", imageType));
        }

        if (keywordSafeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword_safe_search", keywordSafeSearch));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (model != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "model", model));
        }

        if (orientation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("orientation", orientation));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (peopleModelReleased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_model_released", peopleModelReleased));
        }

        if (peopleAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_age", peopleAge));
        }

        if (peopleEthnicity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "people_ethnicity", peopleEthnicity));
        }

        if (peopleGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_gender", peopleGender));
        }

        if (peopleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_number", peopleNumber));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (region != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("region", region));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (spellcheckQuery != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spellcheck_query", spellcheckQuery));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (widthFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_from", widthFrom));
        }

        if (widthTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width_to", widthTo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchImagesValidateBeforeCall(LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback _callback) throws ApiException {
        return searchImagesCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);

    }

    /**
     * Search for images
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aiSearch Set to true and specify the &#x60;ai_objective&#x60; and &#x60;ai_industry&#x60; parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry  (optional)
     * @param aiLabelsLimit For AI-powered search, specify the maximum number of labels to return (optional, default to 20)
     * @param aiIndustry For AI-powered search, specify the industry to target; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param aiObjective For AI-powered search, specify the goal of the media; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out images that match a term (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @return ImageSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ImageSearchResults searchImages(LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo) throws ApiException {
        ApiResponse<ImageSearchResults> localVarResp = searchImagesWithHttpInfo(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
        return localVarResp.getData();
    }

    /**
     * Search for images
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aiSearch Set to true and specify the &#x60;ai_objective&#x60; and &#x60;ai_industry&#x60; parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry  (optional)
     * @param aiLabelsLimit For AI-powered search, specify the maximum number of labels to return (optional, default to 20)
     * @param aiIndustry For AI-powered search, specify the industry to target; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param aiObjective For AI-powered search, specify the goal of the media; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out images that match a term (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @return ApiResponse&lt;ImageSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSearchResults> searchImagesWithHttpInfo(LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo) throws ApiException {
        okhttp3.Call localVarCall = searchImagesValidateBeforeCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, null);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for images (asynchronously)
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     * @param addedDate Show images added on the specified date (optional)
     * @param addedDateStart Show images added on or after the specified date (optional)
     * @param aspectRatioMin Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatioMax Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aspectRatio Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image (optional)
     * @param aiSearch Set to true and specify the &#x60;ai_objective&#x60; and &#x60;ai_industry&#x60; parameters to use AI-powered search; the API returns information about how well images meet the objective for the industry  (optional)
     * @param aiLabelsLimit For AI-powered search, specify the maximum number of labels to return (optional, default to 20)
     * @param aiIndustry For AI-powered search, specify the industry to target; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param aiObjective For AI-powered search, specify the goal of the media; requires that the &#x60;ai_search&#x60; parameter is set to true (optional)
     * @param addedDateEnd Show images added before the specified date (optional)
     * @param category Show images with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param color Specify either a hexadecimal color in the format &#39;4F21EA&#39; or &#39;grayscale&#39;; the API returns images that use similar colors (optional)
     * @param contributor Show images with the specified contributor names or IDs, allows multiple (optional)
     * @param contributorCountry Show images from contributors in one or more specified countries, or start with NOT to exclude a country from the search (optional)
     * @param fields Fields to display in the response; see the documentation for the fields parameter in the overview section (optional)
     * @param height (Deprecated; use height_from and height_to instead) Show images with the specified height (optional)
     * @param heightFrom Show images with the specified height or larger, in pixels (optional)
     * @param heightTo Show images with the specified height or smaller, in pixels (optional)
     * @param imageType Show images of the specified type (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only images with the specified license (optional)
     * @param model Show image results with the specified model IDs (optional)
     * @param orientation Show image results with horizontal or vertical orientation (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleModelReleased Show images of people with a signed model release (optional)
     * @param peopleAge Show images that feature people of the specified age category (optional)
     * @param peopleEthnicity Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities (optional)
     * @param peopleGender Show images with people of the specified gender (optional)
     * @param peopleNumber Show images with the specified number of people (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out images that match a term (optional)
     * @param region Raise or lower search result rankings based on the result&#39;s relevance to a specified region; you can provide a country code or an IP address from which the API infers a country (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param spellcheckQuery Spellcheck the search query and return results on suggested spellings (optional, default to true)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param width (Deprecated; use width_from and width_to instead) Show images with the specified width (optional)
     * @param widthFrom Show images with the specified width or larger, in pixels (optional)
     * @param widthTo Show images with the specified width or smaller, in pixels (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchImagesAsync(LocalDate addedDate, LocalDate addedDateStart, BigDecimal aspectRatioMin, BigDecimal aspectRatioMax, BigDecimal aspectRatio, Boolean aiSearch, Integer aiLabelsLimit, String aiIndustry, String aiObjective, LocalDate addedDateEnd, String category, String color, List<String> contributor, BulkSearchImagesContributorCountryParameter contributorCountry, String fields, Integer height, Integer heightFrom, Integer heightTo, List<String> imageType, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, String orientation, Integer page, Integer perPage, Boolean peopleModelReleased, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, String query, BulkSearchImagesRegionParameter region, Boolean safe, String sort, Boolean spellcheckQuery, String view, Integer width, Integer widthFrom, Integer widthTo, final ApiCallback<ImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchImagesValidateBeforeCall(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo, _callback);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
