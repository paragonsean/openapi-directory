/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Cookie;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data required to redownload a video
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class RedownloadVideo {
  public static final String SERIALIZED_NAME_AUTH_COOKIE = "auth_cookie";
  @SerializedName(SERIALIZED_NAME_AUTH_COOKIE)
  private Cookie authCookie;

  public static final String SERIALIZED_NAME_SHOW_MODAL = "show_modal";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHOW_MODAL)
  private Boolean showModal;

  /**
   * Size of the video
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    WEB("web"),
    
    SD("sd"),
    
    HD("hd"),
    
    _4K("4k");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  public static final String SERIALIZED_NAME_VERIFICATION_CODE = "verification_code";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERIFICATION_CODE)
  private String verificationCode;

  public RedownloadVideo() {
  }

  public RedownloadVideo authCookie(Cookie authCookie) {
    this.authCookie = authCookie;
    return this;
  }

  /**
   * Get authCookie
   * @return authCookie
   */
  @javax.annotation.Nullable
  public Cookie getAuthCookie() {
    return authCookie;
  }

  public void setAuthCookie(Cookie authCookie) {
    this.authCookie = authCookie;
  }


  @Deprecated
  public RedownloadVideo showModal(Boolean showModal) {
    this.showModal = showModal;
    return this;
  }

  /**
   * (Deprecated)
   * @return showModal
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getShowModal() {
    return showModal;
  }

  @Deprecated
  public void setShowModal(Boolean showModal) {
    this.showModal = showModal;
  }


  public RedownloadVideo size(SizeEnum size) {
    this.size = size;
    return this;
  }

  /**
   * Size of the video
   * @return size
   */
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }


  @Deprecated
  public RedownloadVideo verificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
    return this;
  }

  /**
   * (Deprecated)
   * @return verificationCode
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVerificationCode() {
    return verificationCode;
  }

  @Deprecated
  public void setVerificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RedownloadVideo redownloadVideo = (RedownloadVideo) o;
    return Objects.equals(this.authCookie, redownloadVideo.authCookie) &&
        Objects.equals(this.showModal, redownloadVideo.showModal) &&
        Objects.equals(this.size, redownloadVideo.size) &&
        Objects.equals(this.verificationCode, redownloadVideo.verificationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authCookie, showModal, size, verificationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RedownloadVideo {\n");
    sb.append("    authCookie: ").append(toIndentedString(authCookie)).append("\n");
    sb.append("    showModal: ").append(toIndentedString(showModal)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_cookie");
    openapiFields.add("show_modal");
    openapiFields.add("size");
    openapiFields.add("verification_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RedownloadVideo
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RedownloadVideo.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RedownloadVideo is not found in the empty JSON string", RedownloadVideo.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RedownloadVideo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RedownloadVideo` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auth_cookie`
      if (jsonObj.get("auth_cookie") != null && !jsonObj.get("auth_cookie").isJsonNull()) {
        Cookie.validateJsonElement(jsonObj.get("auth_cookie"));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("verification_code") != null && !jsonObj.get("verification_code").isJsonNull()) && !jsonObj.get("verification_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RedownloadVideo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RedownloadVideo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RedownloadVideo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RedownloadVideo.class));

       return (TypeAdapter<T>) new TypeAdapter<RedownloadVideo>() {
           @Override
           public void write(JsonWriter out, RedownloadVideo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RedownloadVideo read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RedownloadVideo given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RedownloadVideo
   * @throws IOException if the JSON string is invalid with respect to RedownloadVideo
   */
  public static RedownloadVideo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RedownloadVideo.class);
  }

  /**
   * Convert an instance of RedownloadVideo to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

