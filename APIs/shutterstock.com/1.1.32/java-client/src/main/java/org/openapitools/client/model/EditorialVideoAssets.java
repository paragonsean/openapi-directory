/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.VideoPreviewUrl;
import org.openapitools.client.model.VideoSizeDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Asset information, including size and thumbnail URLs
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditorialVideoAssets {
  public static final String SERIALIZED_NAME_ORIGINAL = "original";
  @SerializedName(SERIALIZED_NAME_ORIGINAL)
  private VideoSizeDetails original;

  public static final String SERIALIZED_NAME_PREVIEW_MP4 = "preview_mp4";
  @SerializedName(SERIALIZED_NAME_PREVIEW_MP4)
  private VideoPreviewUrl previewMp4;

  public static final String SERIALIZED_NAME_PREVIEW_WEBM = "preview_webm";
  @SerializedName(SERIALIZED_NAME_PREVIEW_WEBM)
  private VideoPreviewUrl previewWebm;

  public static final String SERIALIZED_NAME_THUMB_JPG = "thumb_jpg";
  @SerializedName(SERIALIZED_NAME_THUMB_JPG)
  private VideoPreviewUrl thumbJpg;

  public EditorialVideoAssets() {
  }

  public EditorialVideoAssets original(VideoSizeDetails original) {
    this.original = original;
    return this;
  }

  /**
   * Get original
   * @return original
   */
  @javax.annotation.Nullable
  public VideoSizeDetails getOriginal() {
    return original;
  }

  public void setOriginal(VideoSizeDetails original) {
    this.original = original;
  }


  public EditorialVideoAssets previewMp4(VideoPreviewUrl previewMp4) {
    this.previewMp4 = previewMp4;
    return this;
  }

  /**
   * Get previewMp4
   * @return previewMp4
   */
  @javax.annotation.Nullable
  public VideoPreviewUrl getPreviewMp4() {
    return previewMp4;
  }

  public void setPreviewMp4(VideoPreviewUrl previewMp4) {
    this.previewMp4 = previewMp4;
  }


  public EditorialVideoAssets previewWebm(VideoPreviewUrl previewWebm) {
    this.previewWebm = previewWebm;
    return this;
  }

  /**
   * Get previewWebm
   * @return previewWebm
   */
  @javax.annotation.Nullable
  public VideoPreviewUrl getPreviewWebm() {
    return previewWebm;
  }

  public void setPreviewWebm(VideoPreviewUrl previewWebm) {
    this.previewWebm = previewWebm;
  }


  public EditorialVideoAssets thumbJpg(VideoPreviewUrl thumbJpg) {
    this.thumbJpg = thumbJpg;
    return this;
  }

  /**
   * Get thumbJpg
   * @return thumbJpg
   */
  @javax.annotation.Nullable
  public VideoPreviewUrl getThumbJpg() {
    return thumbJpg;
  }

  public void setThumbJpg(VideoPreviewUrl thumbJpg) {
    this.thumbJpg = thumbJpg;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditorialVideoAssets editorialVideoAssets = (EditorialVideoAssets) o;
    return Objects.equals(this.original, editorialVideoAssets.original) &&
        Objects.equals(this.previewMp4, editorialVideoAssets.previewMp4) &&
        Objects.equals(this.previewWebm, editorialVideoAssets.previewWebm) &&
        Objects.equals(this.thumbJpg, editorialVideoAssets.thumbJpg);
  }

  @Override
  public int hashCode() {
    return Objects.hash(original, previewMp4, previewWebm, thumbJpg);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditorialVideoAssets {\n");
    sb.append("    original: ").append(toIndentedString(original)).append("\n");
    sb.append("    previewMp4: ").append(toIndentedString(previewMp4)).append("\n");
    sb.append("    previewWebm: ").append(toIndentedString(previewWebm)).append("\n");
    sb.append("    thumbJpg: ").append(toIndentedString(thumbJpg)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("original");
    openapiFields.add("preview_mp4");
    openapiFields.add("preview_webm");
    openapiFields.add("thumb_jpg");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditorialVideoAssets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditorialVideoAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditorialVideoAssets is not found in the empty JSON string", EditorialVideoAssets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditorialVideoAssets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditorialVideoAssets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `original`
      if (jsonObj.get("original") != null && !jsonObj.get("original").isJsonNull()) {
        VideoSizeDetails.validateJsonElement(jsonObj.get("original"));
      }
      // validate the optional field `preview_mp4`
      if (jsonObj.get("preview_mp4") != null && !jsonObj.get("preview_mp4").isJsonNull()) {
        VideoPreviewUrl.validateJsonElement(jsonObj.get("preview_mp4"));
      }
      // validate the optional field `preview_webm`
      if (jsonObj.get("preview_webm") != null && !jsonObj.get("preview_webm").isJsonNull()) {
        VideoPreviewUrl.validateJsonElement(jsonObj.get("preview_webm"));
      }
      // validate the optional field `thumb_jpg`
      if (jsonObj.get("thumb_jpg") != null && !jsonObj.get("thumb_jpg").isJsonNull()) {
        VideoPreviewUrl.validateJsonElement(jsonObj.get("thumb_jpg"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditorialVideoAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditorialVideoAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditorialVideoAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditorialVideoAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<EditorialVideoAssets>() {
           @Override
           public void write(JsonWriter out, EditorialVideoAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditorialVideoAssets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditorialVideoAssets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditorialVideoAssets
   * @throws IOException if the JSON string is invalid with respect to EditorialVideoAssets
   */
  public static EditorialVideoAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditorialVideoAssets.class);
  }

  /**
   * Convert an instance of EditorialVideoAssets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

