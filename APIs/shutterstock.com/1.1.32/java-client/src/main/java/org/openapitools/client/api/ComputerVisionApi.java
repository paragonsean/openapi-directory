/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.ComputerVisionImageCreateResponse;
import org.openapitools.client.model.GetKeywordsAssetIdParameter;
import org.openapitools.client.model.ImageCreateRequest;
import org.openapitools.client.model.ImageCreateResponse;
import org.openapitools.client.model.ImageSearchResults;
import org.openapitools.client.model.KeywordDataList;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.VideoSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ComputerVisionApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ComputerVisionApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ComputerVisionApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getKeywords
     * @param assetId The asset ID or upload ID to suggest keywords for (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeywordsCall(GetKeywordsAssetIdParameter assetId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cv/keywords";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getKeywordsValidateBeforeCall(GetKeywordsAssetIdParameter assetId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getKeywords(Async)");
        }

        return getKeywordsCall(assetId, _callback);

    }

    /**
     * List suggested keywords
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * @param assetId The asset ID or upload ID to suggest keywords for (required)
     * @return KeywordDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public KeywordDataList getKeywords(GetKeywordsAssetIdParameter assetId) throws ApiException {
        ApiResponse<KeywordDataList> localVarResp = getKeywordsWithHttpInfo(assetId);
        return localVarResp.getData();
    }

    /**
     * List suggested keywords
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * @param assetId The asset ID or upload ID to suggest keywords for (required)
     * @return ApiResponse&lt;KeywordDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<KeywordDataList> getKeywordsWithHttpInfo(GetKeywordsAssetIdParameter assetId) throws ApiException {
        okhttp3.Call localVarCall = getKeywordsValidateBeforeCall(assetId, null);
        Type localVarReturnType = new TypeToken<KeywordDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List suggested keywords (asynchronously)
     * This endpoint returns a list of suggested keywords for a media item that you specify or upload.
     * @param assetId The asset ID or upload ID to suggest keywords for (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getKeywordsAsync(GetKeywordsAssetIdParameter assetId, final ApiCallback<KeywordDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getKeywordsValidateBeforeCall(assetId, _callback);
        Type localVarReturnType = new TypeToken<KeywordDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarImages
     * @param assetId The asset ID or upload ID to find similar images for (required)
     * @param license Show only images with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarImagesCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cv/similar/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarImagesValidateBeforeCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getSimilarImages(Async)");
        }

        return getSimilarImagesCall(assetId, license, safe, language, page, perPage, view, _callback);

    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar images for (required)
     * @param license Show only images with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ImageSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ImageSearchResults getSimilarImages(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view) throws ApiException {
        ApiResponse<ImageSearchResults> localVarResp = getSimilarImagesWithHttpInfo(assetId, license, safe, language, page, perPage, view);
        return localVarResp.getData();
    }

    /**
     * List similar images
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar images for (required)
     * @param license Show only images with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ApiResponse&lt;ImageSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ImageSearchResults> getSimilarImagesWithHttpInfo(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = getSimilarImagesValidateBeforeCall(assetId, license, safe, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List similar images (asynchronously)
     * This endpoint returns images that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar images for (required)
     * @param license Show only images with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarImagesAsync(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback<ImageSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarImagesValidateBeforeCall(assetId, license, safe, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<ImageSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSimilarVideos
     * @param assetId The asset ID or upload ID to find similar videos for (required)
     * @param license Show only videos with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarVideosCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/cv/similar/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (assetId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("asset_id", assetId));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSimilarVideosValidateBeforeCall(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'assetId' is set
        if (assetId == null) {
            throw new ApiException("Missing the required parameter 'assetId' when calling getSimilarVideos(Async)");
        }

        return getSimilarVideosCall(assetId, license, safe, language, page, perPage, view, _callback);

    }

    /**
     * List similar videos
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar videos for (required)
     * @param license Show only videos with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return VideoSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public VideoSearchResults getSimilarVideos(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view) throws ApiException {
        ApiResponse<VideoSearchResults> localVarResp = getSimilarVideosWithHttpInfo(assetId, license, safe, language, page, perPage, view);
        return localVarResp.getData();
    }

    /**
     * List similar videos
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar videos for (required)
     * @param license Show only videos with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ApiResponse&lt;VideoSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoSearchResults> getSimilarVideosWithHttpInfo(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = getSimilarVideosValidateBeforeCall(assetId, license, safe, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List similar videos (asynchronously)
     * This endpoint returns videos that are visually similar to an image that you specify or upload.
     * @param assetId The asset ID or upload ID to find similar videos for (required)
     * @param license Show only videos with the specified license (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSimilarVideosAsync(String assetId, List<String> license, Boolean safe, Language language, Integer page, Integer perPage, String view, final ApiCallback<VideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSimilarVideosValidateBeforeCall(assetId, license, safe, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadEphemeralImage
     * @param imageCreateRequest The image data in JPEG or PNG format (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call uploadEphemeralImageCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadEphemeralImageValidateBeforeCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageCreateRequest' is set
        if (imageCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'imageCreateRequest' when calling uploadEphemeralImage(Async)");
        }

        return uploadEphemeralImageCall(imageCreateRequest, _callback);

    }

    /**
     * Upload ephemeral images
     * Deprecated; use &#x60;POST /v2/cv/images&#x60; instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the &#x60;GET /v2/images/{id}/similar&#x60; endpoint.
     * @param imageCreateRequest The image data in JPEG or PNG format (required)
     * @return ImageCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ImageCreateResponse uploadEphemeralImage(ImageCreateRequest imageCreateRequest) throws ApiException {
        ApiResponse<ImageCreateResponse> localVarResp = uploadEphemeralImageWithHttpInfo(imageCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Upload ephemeral images
     * Deprecated; use &#x60;POST /v2/cv/images&#x60; instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the &#x60;GET /v2/images/{id}/similar&#x60; endpoint.
     * @param imageCreateRequest The image data in JPEG or PNG format (required)
     * @return ApiResponse&lt;ImageCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<ImageCreateResponse> uploadEphemeralImageWithHttpInfo(ImageCreateRequest imageCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadEphemeralImageValidateBeforeCall(imageCreateRequest, null);
        Type localVarReturnType = new TypeToken<ImageCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload ephemeral images (asynchronously)
     * Deprecated; use &#x60;POST /v2/cv/images&#x60; instead. This endpoint uploads an image for reverse image search. The image must be in JPEG or PNG format. To get the search results, pass the ID that this endpoint returns to the &#x60;GET /v2/images/{id}/similar&#x60; endpoint.
     * @param imageCreateRequest The image data in JPEG or PNG format (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call uploadEphemeralImageAsync(ImageCreateRequest imageCreateRequest, final ApiCallback<ImageCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadEphemeralImageValidateBeforeCall(imageCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ImageCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for uploadImage
     * @param imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadImageCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = imageCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/cv/images";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call uploadImageValidateBeforeCall(ImageCreateRequest imageCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'imageCreateRequest' is set
        if (imageCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'imageCreateRequest' when calling uploadImage(Async)");
        }

        return uploadImageCall(imageCreateRequest, _callback);

    }

    /**
     * Upload images
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * @param imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
     * @return ComputerVisionImageCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public ComputerVisionImageCreateResponse uploadImage(ImageCreateRequest imageCreateRequest) throws ApiException {
        ApiResponse<ComputerVisionImageCreateResponse> localVarResp = uploadImageWithHttpInfo(imageCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Upload images
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * @param imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
     * @return ApiResponse&lt;ComputerVisionImageCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ComputerVisionImageCreateResponse> uploadImageWithHttpInfo(ImageCreateRequest imageCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(imageCreateRequest, null);
        Type localVarReturnType = new TypeToken<ComputerVisionImageCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Upload images (asynchronously)
     * This endpoint uploads an image for reverse image or video search. Images must be in JPEG or PNG format. To get the search results, pass the upload ID that this endpoint returns to the GET /v2/cv/similar/images or GET /v2/cv/similar/videos endpoints. Contact us for access to this endpoint.
     * @param imageCreateRequest A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 413 </td><td> Payload Too Large </td><td>  -  </td></tr>
        <tr><td> 415 </td><td> Unsupported Media Type </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call uploadImageAsync(ImageCreateRequest imageCreateRequest, final ApiCallback<ComputerVisionImageCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = uploadImageValidateBeforeCall(imageCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<ComputerVisionImageCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
