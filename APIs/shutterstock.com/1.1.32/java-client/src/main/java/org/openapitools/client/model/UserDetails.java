/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * User details
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class UserDetails {
  public static final String SERIALIZED_NAME_CONTRIBUTOR_ID = "contributor_id";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_ID)
  private String contributorId;

  public static final String SERIALIZED_NAME_CUSTOMER_ID = "customer_id";
  @SerializedName(SERIALIZED_NAME_CUSTOMER_ID)
  private String customerId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "first_name";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_FULL_NAME = "full_name";
  @SerializedName(SERIALIZED_NAME_FULL_NAME)
  private String fullName;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IS_PREMIER = "is_premier";
  @SerializedName(SERIALIZED_NAME_IS_PREMIER)
  private Boolean isPremier;

  public static final String SERIALIZED_NAME_IS_PREMIER_PARENT = "is_premier_parent";
  @SerializedName(SERIALIZED_NAME_IS_PREMIER_PARENT)
  private Boolean isPremierParent;

  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private String language;

  public static final String SERIALIZED_NAME_LAST_NAME = "last_name";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_ONLY_ENHANCED_LICENSE = "only_enhanced_license";
  @SerializedName(SERIALIZED_NAME_ONLY_ENHANCED_LICENSE)
  private Boolean onlyEnhancedLicense;

  public static final String SERIALIZED_NAME_ONLY_SENSITIVE_USE = "only_sensitive_use";
  @SerializedName(SERIALIZED_NAME_ONLY_SENSITIVE_USE)
  private Boolean onlySensitiveUse;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organization_id";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private String organizationId;

  public static final String SERIALIZED_NAME_PREMIER_PERMISSIONS = "premier_permissions";
  @SerializedName(SERIALIZED_NAME_PREMIER_PERMISSIONS)
  private List<String> premierPermissions = new ArrayList<>();

  public static final String SERIALIZED_NAME_USERNAME = "username";
  @SerializedName(SERIALIZED_NAME_USERNAME)
  private String username;

  public UserDetails() {
  }

  public UserDetails contributorId(String contributorId) {
    this.contributorId = contributorId;
    return this;
  }

  /**
   * Unique internal identifier of the user, as a contributor
   * @return contributorId
   */
  @javax.annotation.Nullable
  public String getContributorId() {
    return contributorId;
  }

  public void setContributorId(String contributorId) {
    this.contributorId = contributorId;
  }


  public UserDetails customerId(String customerId) {
    this.customerId = customerId;
    return this;
  }

  /**
   * Unique internal identifier of the user, as a purchaser
   * @return customerId
   */
  @javax.annotation.Nullable
  public String getCustomerId() {
    return customerId;
  }

  public void setCustomerId(String customerId) {
    this.customerId = customerId;
  }


  public UserDetails email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Email address of the user
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public UserDetails firstName(String firstName) {
    this.firstName = firstName;
    return this;
  }

  /**
   * First name of the user
   * @return firstName
   */
  @javax.annotation.Nullable
  public String getFirstName() {
    return firstName;
  }

  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserDetails fullName(String fullName) {
    this.fullName = fullName;
    return this;
  }

  /**
   * Full name including first, middle, and last name of the user
   * @return fullName
   */
  @javax.annotation.Nullable
  public String getFullName() {
    return fullName;
  }

  public void setFullName(String fullName) {
    this.fullName = fullName;
  }


  public UserDetails id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Unique internal identifier for the user, not tied to contributor or purchasing customer
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public UserDetails isPremier(Boolean isPremier) {
    this.isPremier = isPremier;
    return this;
  }

  /**
   * True if the user has access to the Premier collection, false otherwise
   * @return isPremier
   */
  @javax.annotation.Nullable
  public Boolean getIsPremier() {
    return isPremier;
  }

  public void setIsPremier(Boolean isPremier) {
    this.isPremier = isPremier;
  }


  public UserDetails isPremierParent(Boolean isPremierParent) {
    this.isPremierParent = isPremierParent;
    return this;
  }

  /**
   * True if the user has access to the Premier collection and also has child users
   * @return isPremierParent
   */
  @javax.annotation.Nullable
  public Boolean getIsPremierParent() {
    return isPremierParent;
  }

  public void setIsPremierParent(Boolean isPremierParent) {
    this.isPremierParent = isPremierParent;
  }


  public UserDetails language(String language) {
    this.language = language;
    return this;
  }

  /**
   * Main language of the user account
   * @return language
   */
  @javax.annotation.Nullable
  public String getLanguage() {
    return language;
  }

  public void setLanguage(String language) {
    this.language = language;
  }


  public UserDetails lastName(String lastName) {
    this.lastName = lastName;
    return this;
  }

  /**
   * Last name of the user
   * @return lastName
   */
  @javax.annotation.Nullable
  public String getLastName() {
    return lastName;
  }

  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserDetails onlyEnhancedLicense(Boolean onlyEnhancedLicense) {
    this.onlyEnhancedLicense = onlyEnhancedLicense;
    return this;
  }

  /**
   * True if the user has an enterprise license, false otherwise
   * @return onlyEnhancedLicense
   */
  @javax.annotation.Nullable
  public Boolean getOnlyEnhancedLicense() {
    return onlyEnhancedLicense;
  }

  public void setOnlyEnhancedLicense(Boolean onlyEnhancedLicense) {
    this.onlyEnhancedLicense = onlyEnhancedLicense;
  }


  public UserDetails onlySensitiveUse(Boolean onlySensitiveUse) {
    this.onlySensitiveUse = onlySensitiveUse;
    return this;
  }

  /**
   * True if the user has access to sensitive use only, false otherwise
   * @return onlySensitiveUse
   */
  @javax.annotation.Nullable
  public Boolean getOnlySensitiveUse() {
    return onlySensitiveUse;
  }

  public void setOnlySensitiveUse(Boolean onlySensitiveUse) {
    this.onlySensitiveUse = onlySensitiveUse;
  }


  public UserDetails organizationId(String organizationId) {
    this.organizationId = organizationId;
    return this;
  }

  /**
   * Unique internal identifier for the user&#39;s organization, specific to Premier users
   * @return organizationId
   */
  @javax.annotation.Nullable
  public String getOrganizationId() {
    return organizationId;
  }

  public void setOrganizationId(String organizationId) {
    this.organizationId = organizationId;
  }


  public UserDetails premierPermissions(List<String> premierPermissions) {
    this.premierPermissions = premierPermissions;
    return this;
  }

  public UserDetails addPremierPermissionsItem(String premierPermissionsItem) {
    if (this.premierPermissions == null) {
      this.premierPermissions = new ArrayList<>();
    }
    this.premierPermissions.add(premierPermissionsItem);
    return this;
  }

  /**
   * List of permissions allowed through the Premier client
   * @return premierPermissions
   */
  @javax.annotation.Nullable
  public List<String> getPremierPermissions() {
    return premierPermissions;
  }

  public void setPremierPermissions(List<String> premierPermissions) {
    this.premierPermissions = premierPermissions;
  }


  public UserDetails username(String username) {
    this.username = username;
    return this;
  }

  /**
   * User name associated to the user
   * @return username
   */
  @javax.annotation.Nullable
  public String getUsername() {
    return username;
  }

  public void setUsername(String username) {
    this.username = username;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserDetails userDetails = (UserDetails) o;
    return Objects.equals(this.contributorId, userDetails.contributorId) &&
        Objects.equals(this.customerId, userDetails.customerId) &&
        Objects.equals(this.email, userDetails.email) &&
        Objects.equals(this.firstName, userDetails.firstName) &&
        Objects.equals(this.fullName, userDetails.fullName) &&
        Objects.equals(this.id, userDetails.id) &&
        Objects.equals(this.isPremier, userDetails.isPremier) &&
        Objects.equals(this.isPremierParent, userDetails.isPremierParent) &&
        Objects.equals(this.language, userDetails.language) &&
        Objects.equals(this.lastName, userDetails.lastName) &&
        Objects.equals(this.onlyEnhancedLicense, userDetails.onlyEnhancedLicense) &&
        Objects.equals(this.onlySensitiveUse, userDetails.onlySensitiveUse) &&
        Objects.equals(this.organizationId, userDetails.organizationId) &&
        Objects.equals(this.premierPermissions, userDetails.premierPermissions) &&
        Objects.equals(this.username, userDetails.username);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contributorId, customerId, email, firstName, fullName, id, isPremier, isPremierParent, language, lastName, onlyEnhancedLicense, onlySensitiveUse, organizationId, premierPermissions, username);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserDetails {\n");
    sb.append("    contributorId: ").append(toIndentedString(contributorId)).append("\n");
    sb.append("    customerId: ").append(toIndentedString(customerId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    fullName: ").append(toIndentedString(fullName)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    isPremier: ").append(toIndentedString(isPremier)).append("\n");
    sb.append("    isPremierParent: ").append(toIndentedString(isPremierParent)).append("\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    onlyEnhancedLicense: ").append(toIndentedString(onlyEnhancedLicense)).append("\n");
    sb.append("    onlySensitiveUse: ").append(toIndentedString(onlySensitiveUse)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    premierPermissions: ").append(toIndentedString(premierPermissions)).append("\n");
    sb.append("    username: ").append(toIndentedString(username)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contributor_id");
    openapiFields.add("customer_id");
    openapiFields.add("email");
    openapiFields.add("first_name");
    openapiFields.add("full_name");
    openapiFields.add("id");
    openapiFields.add("is_premier");
    openapiFields.add("is_premier_parent");
    openapiFields.add("language");
    openapiFields.add("last_name");
    openapiFields.add("only_enhanced_license");
    openapiFields.add("only_sensitive_use");
    openapiFields.add("organization_id");
    openapiFields.add("premier_permissions");
    openapiFields.add("username");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to UserDetails
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!UserDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserDetails is not found in the empty JSON string", UserDetails.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!UserDetails.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserDetails` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("contributor_id") != null && !jsonObj.get("contributor_id").isJsonNull()) && !jsonObj.get("contributor_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributor_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contributor_id").toString()));
      }
      if ((jsonObj.get("customer_id") != null && !jsonObj.get("customer_id").isJsonNull()) && !jsonObj.get("customer_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customer_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customer_id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("first_name") != null && !jsonObj.get("first_name").isJsonNull()) && !jsonObj.get("first_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first_name").toString()));
      }
      if ((jsonObj.get("full_name") != null && !jsonObj.get("full_name").isJsonNull()) && !jsonObj.get("full_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_name").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("language") != null && !jsonObj.get("language").isJsonNull()) && !jsonObj.get("language").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `language` to be a primitive type in the JSON string but got `%s`", jsonObj.get("language").toString()));
      }
      if ((jsonObj.get("last_name") != null && !jsonObj.get("last_name").isJsonNull()) && !jsonObj.get("last_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_name").toString()));
      }
      if ((jsonObj.get("organization_id") != null && !jsonObj.get("organization_id").isJsonNull()) && !jsonObj.get("organization_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organization_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organization_id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("premier_permissions") != null && !jsonObj.get("premier_permissions").isJsonNull() && !jsonObj.get("premier_permissions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `premier_permissions` to be an array in the JSON string but got `%s`", jsonObj.get("premier_permissions").toString()));
      }
      if ((jsonObj.get("username") != null && !jsonObj.get("username").isJsonNull()) && !jsonObj.get("username").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `username` to be a primitive type in the JSON string but got `%s`", jsonObj.get("username").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<UserDetails>() {
           @Override
           public void write(JsonWriter out, UserDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserDetails read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of UserDetails given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of UserDetails
   * @throws IOException if the JSON string is invalid with respect to UserDetails
   */
  public static UserDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserDetails.class);
  }

  /**
   * Convert an instance of UserDetails to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

