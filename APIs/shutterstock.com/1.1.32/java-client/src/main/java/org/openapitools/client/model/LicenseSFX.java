/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseSFX {
  /**
   * Gets or Sets audioLayout
   */
  @JsonAdapter(AudioLayoutEnum.Adapter.class)
  public enum AudioLayoutEnum {
    AMBISONIC("ambisonic"),
    
    _5_1("5.1"),
    
    STEREO("stereo");

    private String value;

    AudioLayoutEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static AudioLayoutEnum fromValue(String value) {
      for (AudioLayoutEnum b : AudioLayoutEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<AudioLayoutEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final AudioLayoutEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public AudioLayoutEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return AudioLayoutEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      AudioLayoutEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_AUDIO_LAYOUT = "audio_layout";
  @SerializedName(SERIALIZED_NAME_AUDIO_LAYOUT)
  private AudioLayoutEnum audioLayout;

  /**
   * Gets or Sets format
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    WAV("wav"),
    
    MP3("mp3");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format;

  public static final String SERIALIZED_NAME_SEARCH_ID = "search_id";
  @SerializedName(SERIALIZED_NAME_SEARCH_ID)
  private String searchId;

  public static final String SERIALIZED_NAME_SFX_ID = "sfx_id";
  @SerializedName(SERIALIZED_NAME_SFX_ID)
  private String sfxId;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public LicenseSFX() {
  }

  public LicenseSFX audioLayout(AudioLayoutEnum audioLayout) {
    this.audioLayout = audioLayout;
    return this;
  }

  /**
   * Get audioLayout
   * @return audioLayout
   */
  @javax.annotation.Nullable
  public AudioLayoutEnum getAudioLayout() {
    return audioLayout;
  }

  public void setAudioLayout(AudioLayoutEnum audioLayout) {
    this.audioLayout = audioLayout;
  }


  public LicenseSFX format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * Get format
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public LicenseSFX searchId(String searchId) {
    this.searchId = searchId;
    return this;
  }

  /**
   * ID of the search that led to this licensing event
   * @return searchId
   */
  @javax.annotation.Nullable
  public String getSearchId() {
    return searchId;
  }

  public void setSearchId(String searchId) {
    this.searchId = searchId;
  }


  public LicenseSFX sfxId(String sfxId) {
    this.sfxId = sfxId;
    return this;
  }

  /**
   * ID of the sounds effect being licensed
   * @return sfxId
   */
  @javax.annotation.Nonnull
  public String getSfxId() {
    return sfxId;
  }

  public void setSfxId(String sfxId) {
    this.sfxId = sfxId;
  }


  public LicenseSFX subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * ID of the subscription to use for the download.
   * @return subscriptionId
   */
  @javax.annotation.Nonnull
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseSFX licenseSFX = (LicenseSFX) o;
    return Objects.equals(this.audioLayout, licenseSFX.audioLayout) &&
        Objects.equals(this.format, licenseSFX.format) &&
        Objects.equals(this.searchId, licenseSFX.searchId) &&
        Objects.equals(this.sfxId, licenseSFX.sfxId) &&
        Objects.equals(this.subscriptionId, licenseSFX.subscriptionId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audioLayout, format, searchId, sfxId, subscriptionId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseSFX {\n");
    sb.append("    audioLayout: ").append(toIndentedString(audioLayout)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    searchId: ").append(toIndentedString(searchId)).append("\n");
    sb.append("    sfxId: ").append(toIndentedString(sfxId)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio_layout");
    openapiFields.add("format");
    openapiFields.add("search_id");
    openapiFields.add("sfx_id");
    openapiFields.add("subscription_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sfx_id");
    openapiRequiredFields.add("subscription_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseSFX
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseSFX.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseSFX is not found in the empty JSON string", LicenseSFX.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseSFX.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseSFX` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseSFX.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("audio_layout") != null && !jsonObj.get("audio_layout").isJsonNull()) && !jsonObj.get("audio_layout").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `audio_layout` to be a primitive type in the JSON string but got `%s`", jsonObj.get("audio_layout").toString()));
      }
      // validate the optional field `audio_layout`
      if (jsonObj.get("audio_layout") != null && !jsonObj.get("audio_layout").isJsonNull()) {
        AudioLayoutEnum.validateJsonElement(jsonObj.get("audio_layout"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if ((jsonObj.get("search_id") != null && !jsonObj.get("search_id").isJsonNull()) && !jsonObj.get("search_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_id").toString()));
      }
      if (!jsonObj.get("sfx_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sfx_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sfx_id").toString()));
      }
      if (!jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseSFX.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseSFX' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseSFX> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseSFX.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseSFX>() {
           @Override
           public void write(JsonWriter out, LicenseSFX value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseSFX read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseSFX given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseSFX
   * @throws IOException if the JSON string is invalid with respect to LicenseSFX
   */
  public static LicenseSFX fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseSFX.class);
  }

  /**
   * Convert an instance of LicenseSFX to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

