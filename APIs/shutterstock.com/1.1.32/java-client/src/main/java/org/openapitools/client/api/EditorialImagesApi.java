/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.EditorialCategoryResults;
import org.openapitools.client.model.EditorialContent;
import org.openapitools.client.model.EditorialContentDataList;
import org.openapitools.client.model.EditorialImageCategoryResults;
import org.openapitools.client.model.EditorialImageContentDataList;
import org.openapitools.client.model.EditorialImageLivefeed;
import org.openapitools.client.model.EditorialImageLivefeedList;
import org.openapitools.client.model.EditorialLivefeed;
import org.openapitools.client.model.EditorialLivefeedList;
import org.openapitools.client.model.EditorialSearchResults;
import org.openapitools.client.model.EditorialUpdatedResults;
import org.openapitools.client.model.LicenseEditorialContentRequest;
import org.openapitools.client.model.LicenseEditorialContentResults;
import java.time.LocalDate;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EditorialImagesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EditorialImagesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public EditorialImagesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getEditorialCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return getEditorialCategoriesCall(_callback);

    }

    /**
     * (Deprecated) List editorial categories
     * Deprecated; use &#x60;GET /v2/editorial/images/categories&#x60; instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return EditorialCategoryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialCategoryResults getEditorialCategories() throws ApiException {
        ApiResponse<EditorialCategoryResults> localVarResp = getEditorialCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * (Deprecated) List editorial categories
     * Deprecated; use &#x60;GET /v2/editorial/images/categories&#x60; instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return ApiResponse&lt;EditorialCategoryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialCategoryResults> getEditorialCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getEditorialCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EditorialCategoryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) List editorial categories (asynchronously)
     * Deprecated; use &#x60;GET /v2/editorial/images/categories&#x60; instead. This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialCategoriesAsync(final ApiCallback<EditorialCategoryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EditorialCategoryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialImage
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialImageValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEditorialImage(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialImage(Async)");
        }

        return getEditorialImageCall(id, country, _callback);

    }

    /**
     * Get editorial content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @return EditorialContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EditorialContent getEditorialImage(String id, String country) throws ApiException {
        ApiResponse<EditorialContent> localVarResp = getEditorialImageWithHttpInfo(id, country);
        return localVarResp.getData();
    }

    /**
     * Get editorial content details
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @return ApiResponse&lt;EditorialContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialContent> getEditorialImageWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getEditorialImageValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get editorial content details (asynchronously)
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageAsync(String id, String country, final ApiCallback<EditorialContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialImageValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialImageLicenseList
     * @param imageId Show licenses for the specified editorial image ID (optional)
     * @param license Show editorial images that are available with the specified license name (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLicenseListCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (imageId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("image_id", imageId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialImageLicenseListValidateBeforeCall(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return getEditorialImageLicenseListCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }

    /**
     * List editorial image licenses
     * This endpoint lists existing editorial image licenses.
     * @param imageId Show licenses for the specified editorial image ID (optional)
     * @param license Show editorial images that are available with the specified license name (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return DownloadHistoryDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DownloadHistoryDataList getEditorialImageLicenseList(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        ApiResponse<DownloadHistoryDataList> localVarResp = getEditorialImageLicenseListWithHttpInfo(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        return localVarResp.getData();
    }

    /**
     * List editorial image licenses
     * This endpoint lists existing editorial image licenses.
     * @param imageId Show licenses for the specified editorial image ID (optional)
     * @param license Show editorial images that are available with the specified license name (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return ApiResponse&lt;DownloadHistoryDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadHistoryDataList> getEditorialImageLicenseListWithHttpInfo(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = getEditorialImageLicenseListValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List editorial image licenses (asynchronously)
     * This endpoint lists existing editorial image licenses.
     * @param imageId Show licenses for the specified editorial image ID (optional)
     * @param license Show editorial images that are available with the specified license name (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLicenseListAsync(String imageId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialImageLicenseListValidateBeforeCall(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialImageLivefeed
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLivefeedCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/livefeeds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialImageLivefeedValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEditorialImageLivefeed(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialImageLivefeed(Async)");
        }

        return getEditorialImageLivefeedCall(id, country, _callback);

    }

    /**
     * Get editorial livefeed
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @return EditorialImageLivefeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EditorialImageLivefeed getEditorialImageLivefeed(String id, String country) throws ApiException {
        ApiResponse<EditorialImageLivefeed> localVarResp = getEditorialImageLivefeedWithHttpInfo(id, country);
        return localVarResp.getData();
    }

    /**
     * Get editorial livefeed
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @return ApiResponse&lt;EditorialImageLivefeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialImageLivefeed> getEditorialImageLivefeedWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getEditorialImageLivefeedValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get editorial livefeed (asynchronously)
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLivefeedAsync(String id, String country, final ApiCallback<EditorialImageLivefeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialImageLivefeedValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialImageLivefeedItems
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLivefeedItemsCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/livefeeds/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialImageLivefeedItemsValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEditorialImageLivefeedItems(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialImageLivefeedItems(Async)");
        }

        return getEditorialImageLivefeedItemsCall(id, country, _callback);

    }

    /**
     * Get editorial livefeed items
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @return EditorialImageContentDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EditorialImageContentDataList getEditorialImageLivefeedItems(String id, String country) throws ApiException {
        ApiResponse<EditorialImageContentDataList> localVarResp = getEditorialImageLivefeedItemsWithHttpInfo(id, country);
        return localVarResp.getData();
    }

    /**
     * Get editorial livefeed items
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @return ApiResponse&lt;EditorialImageContentDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialImageContentDataList> getEditorialImageLivefeedItemsWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getEditorialImageLivefeedItemsValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialImageContentDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get editorial livefeed items (asynchronously)
     * 
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLivefeedItemsAsync(String id, String country, final ApiCallback<EditorialImageContentDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialImageLivefeedItemsValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialImageContentDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialImageLivefeedList
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLivefeedListCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/livefeeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialImageLivefeedListValidateBeforeCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialImageLivefeedList(Async)");
        }

        return getEditorialImageLivefeedListCall(country, page, perPage, _callback);

    }

    /**
     * Get editorial livefeed list
     * 
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @return EditorialImageLivefeedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EditorialImageLivefeedList getEditorialImageLivefeedList(String country, Integer page, Integer perPage) throws ApiException {
        ApiResponse<EditorialImageLivefeedList> localVarResp = getEditorialImageLivefeedListWithHttpInfo(country, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get editorial livefeed list
     * 
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @return ApiResponse&lt;EditorialImageLivefeedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialImageLivefeedList> getEditorialImageLivefeedListWithHttpInfo(String country, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getEditorialImageLivefeedListValidateBeforeCall(country, page, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get editorial livefeed list (asynchronously)
     * 
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getEditorialImageLivefeedListAsync(String country, Integer page, Integer perPage, final ApiCallback<EditorialImageLivefeedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialImageLivefeedListValidateBeforeCall(country, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialImageLivefeedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialLivefeed
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialLivefeedCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/livefeeds/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialLivefeedValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEditorialLivefeed(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialLivefeed(Async)");
        }

        return getEditorialLivefeedCall(id, country, _callback);

    }

    /**
     * (Deprecated) Get editorial livefeed
     * Deprecated: use &#x60;GET /v2/editorial/images/livefeeds/{id}&#x60; instead to get an editorial livefeed.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @return EditorialLivefeed
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialLivefeed getEditorialLivefeed(String id, String country) throws ApiException {
        ApiResponse<EditorialLivefeed> localVarResp = getEditorialLivefeedWithHttpInfo(id, country);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Get editorial livefeed
     * Deprecated: use &#x60;GET /v2/editorial/images/livefeeds/{id}&#x60; instead to get an editorial livefeed.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @return ApiResponse&lt;EditorialLivefeed&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialLivefeed> getEditorialLivefeedWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getEditorialLivefeedValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialLivefeed>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Get editorial livefeed (asynchronously)
     * Deprecated: use &#x60;GET /v2/editorial/images/livefeeds/{id}&#x60; instead to get an editorial livefeed.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed is available for distribution in a certain country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialLivefeedAsync(String id, String country, final ApiCallback<EditorialLivefeed> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialLivefeedValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialLivefeed>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialLivefeedItems
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialLivefeedItemsCall(String id, String country, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/livefeeds/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialLivefeedItemsValidateBeforeCall(String id, String country, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getEditorialLivefeedItems(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialLivefeedItems(Async)");
        }

        return getEditorialLivefeedItemsCall(id, country, _callback);

    }

    /**
     * (Deprecated) Get editorial livefeed items
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds/{id}/items&#x60; instead to get editorial livefeed items.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @return EditorialContentDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialContentDataList getEditorialLivefeedItems(String id, String country) throws ApiException {
        ApiResponse<EditorialContentDataList> localVarResp = getEditorialLivefeedItemsWithHttpInfo(id, country);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Get editorial livefeed items
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds/{id}/items&#x60; instead to get editorial livefeed items.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @return ApiResponse&lt;EditorialContentDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialContentDataList> getEditorialLivefeedItemsWithHttpInfo(String id, String country) throws ApiException {
        okhttp3.Call localVarCall = getEditorialLivefeedItemsValidateBeforeCall(id, country, null);
        Type localVarReturnType = new TypeToken<EditorialContentDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Get editorial livefeed items (asynchronously)
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds/{id}/items&#x60; instead to get editorial livefeed items.
     * @param id Editorial livefeed ID; must be an URI encoded string (required)
     * @param country Returns only if the livefeed items are available for distribution in a certain country (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialLivefeedItemsAsync(String id, String country, final ApiCallback<EditorialContentDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialLivefeedItemsValidateBeforeCall(id, country, _callback);
        Type localVarReturnType = new TypeToken<EditorialContentDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getEditorialLivefeedList
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialLivefeedListCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/livefeeds";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getEditorialLivefeedListValidateBeforeCall(String country, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getEditorialLivefeedList(Async)");
        }

        return getEditorialLivefeedListCall(country, page, perPage, _callback);

    }

    /**
     * (Deprecated) Get editorial livefeed list
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds&#x60; instead to get a list of editorial livefeeds.
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @return EditorialLivefeedList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialLivefeedList getEditorialLivefeedList(String country, Integer page, Integer perPage) throws ApiException {
        ApiResponse<EditorialLivefeedList> localVarResp = getEditorialLivefeedListWithHttpInfo(country, page, perPage);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Get editorial livefeed list
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds&#x60; instead to get a list of editorial livefeeds.
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @return ApiResponse&lt;EditorialLivefeedList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialLivefeedList> getEditorialLivefeedListWithHttpInfo(String country, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getEditorialLivefeedListValidateBeforeCall(country, page, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialLivefeedList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Get editorial livefeed list (asynchronously)
     * Deprecated; use &#x60;GET /v2/editorial/images/livefeeds&#x60; instead to get a list of editorial livefeeds.
     * @param country Returns only livefeeds that are available for distribution in a certain country (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getEditorialLivefeedListAsync(String country, Integer page, Integer perPage, final ApiCallback<EditorialLivefeedList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getEditorialLivefeedListValidateBeforeCall(country, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialLivefeedList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUpdatedEditorialImage
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getUpdatedEditorialImageCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (dateUpdatedStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_start", dateUpdatedStart));
        }

        if (dateUpdatedEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_end", dateUpdatedEnd));
        }

        if (dateTakenStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_start", dateTakenStart));
        }

        if (dateTakenEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_end", dateTakenEnd));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpdatedEditorialImageValidateBeforeCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getUpdatedEditorialImage(Async)");
        }

        // verify the required parameter 'dateUpdatedStart' is set
        if (dateUpdatedStart == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedStart' when calling getUpdatedEditorialImage(Async)");
        }

        // verify the required parameter 'dateUpdatedEnd' is set
        if (dateUpdatedEnd == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedEnd' when calling getUpdatedEditorialImage(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getUpdatedEditorialImage(Async)");
        }

        return getUpdatedEditorialImageCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);

    }

    /**
     * (Deprecated) List updated content
     * Deprecated; use &#x60;GET /v2/editorial/images/updated&#x60; instead to get recently updated items.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @return EditorialUpdatedResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialUpdatedResults getUpdatedEditorialImage(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage) throws ApiException {
        ApiResponse<EditorialUpdatedResults> localVarResp = getUpdatedEditorialImageWithHttpInfo(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) List updated content
     * Deprecated; use &#x60;GET /v2/editorial/images/updated&#x60; instead to get recently updated items.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @return ApiResponse&lt;EditorialUpdatedResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialUpdatedResults> getUpdatedEditorialImageWithHttpInfo(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getUpdatedEditorialImageValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) List updated content (asynchronously)
     * Deprecated; use &#x60;GET /v2/editorial/images/updated&#x60; instead to get recently updated items.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getUpdatedEditorialImageAsync(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback<EditorialUpdatedResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpdatedEditorialImageValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUpdatedEditorialImages
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpdatedEditorialImagesCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (type != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("type", type));
        }

        if (dateUpdatedStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_start", dateUpdatedStart));
        }

        if (dateUpdatedEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_updated_end", dateUpdatedEnd));
        }

        if (dateTakenStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_start", dateTakenStart));
        }

        if (dateTakenEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_taken_end", dateTakenEnd));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpdatedEditorialImagesValidateBeforeCall(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'type' is set
        if (type == null) {
            throw new ApiException("Missing the required parameter 'type' when calling getUpdatedEditorialImages(Async)");
        }

        // verify the required parameter 'dateUpdatedStart' is set
        if (dateUpdatedStart == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedStart' when calling getUpdatedEditorialImages(Async)");
        }

        // verify the required parameter 'dateUpdatedEnd' is set
        if (dateUpdatedEnd == null) {
            throw new ApiException("Missing the required parameter 'dateUpdatedEnd' when calling getUpdatedEditorialImages(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling getUpdatedEditorialImages(Async)");
        }

        return getUpdatedEditorialImagesCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);

    }

    /**
     * List updated content
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @return EditorialUpdatedResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public EditorialUpdatedResults getUpdatedEditorialImages(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage) throws ApiException {
        ApiResponse<EditorialUpdatedResults> localVarResp = getUpdatedEditorialImagesWithHttpInfo(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage);
        return localVarResp.getData();
    }

    /**
     * List updated content
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @return ApiResponse&lt;EditorialUpdatedResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialUpdatedResults> getUpdatedEditorialImagesWithHttpInfo(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getUpdatedEditorialImagesValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, null);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List updated content (asynchronously)
     * This endpoint lists editorial images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the date_updated_start and date_updated_end parameters to specify a range updates based on when the updates happened. You can also use the date_taken_start and date_taken_end parameters to specify a range of updates based on when the image was taken.
     * @param type Specify &#x60;addition&#x60; to return only images that were added or &#x60;edit&#x60; to return only images that were edited or deleted (required)
     * @param dateUpdatedStart Show images images added, edited, or deleted after the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param dateUpdatedEnd Show images images added, edited, or deleted before the specified date. Acceptable range is 1970-01-01T00:00:01 to 2038-01-19T00:00:00. (required)
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param dateTakenStart Show images that were taken on or after the specified date; use this parameter if you want recently created images from the collection instead of updated older assets (optional)
     * @param dateTakenEnd Show images that were taken before the specified date (optional)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param sort Sort by (optional, default to newest)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param perPage Number of results per page (optional, default to 500)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpdatedEditorialImagesAsync(String type, OffsetDateTime dateUpdatedStart, OffsetDateTime dateUpdatedEnd, String country, LocalDate dateTakenStart, LocalDate dateTakenEnd, String cursor, String sort, List<String> supplierCode, Integer perPage, final ApiCallback<EditorialUpdatedResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpdatedEditorialImagesValidateBeforeCall(type, dateUpdatedStart, dateUpdatedEnd, country, dateTakenStart, dateTakenEnd, cursor, sort, supplierCode, perPage, _callback);
        Type localVarReturnType = new TypeToken<EditorialUpdatedResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseEditorialImage
     * @param licenseEditorialContentRequest License editorial content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call licenseEditorialImageCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseEditorialContentRequest;

        // create path and map variables
        String localVarPath = "/v2/editorial/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseEditorialImageValidateBeforeCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseEditorialContentRequest' is set
        if (licenseEditorialContentRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseEditorialContentRequest' when calling licenseEditorialImage(Async)");
        }

        return licenseEditorialImageCall(licenseEditorialContentRequest, _callback);

    }

    /**
     * (Deprecated) License editorial content
     * Deprecated; use &#x60;POST /v2/editorial/images/licenses&#x60; instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @return LicenseEditorialContentResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public LicenseEditorialContentResults licenseEditorialImage(LicenseEditorialContentRequest licenseEditorialContentRequest) throws ApiException {
        ApiResponse<LicenseEditorialContentResults> localVarResp = licenseEditorialImageWithHttpInfo(licenseEditorialContentRequest);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) License editorial content
     * Deprecated; use &#x60;POST /v2/editorial/images/licenses&#x60; instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @return ApiResponse&lt;LicenseEditorialContentResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<LicenseEditorialContentResults> licenseEditorialImageWithHttpInfo(LicenseEditorialContentRequest licenseEditorialContentRequest) throws ApiException {
        okhttp3.Call localVarCall = licenseEditorialImageValidateBeforeCall(licenseEditorialContentRequest, null);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) License editorial content (asynchronously)
     * Deprecated; use &#x60;POST /v2/editorial/images/licenses&#x60; instead to get licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call licenseEditorialImageAsync(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseEditorialImageValidateBeforeCall(licenseEditorialContentRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseEditorialImages
     * @param licenseEditorialContentRequest License editorial content (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseEditorialImagesCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseEditorialContentRequest;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseEditorialImagesValidateBeforeCall(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseEditorialContentRequest' is set
        if (licenseEditorialContentRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseEditorialContentRequest' when calling licenseEditorialImages(Async)");
        }

        return licenseEditorialImagesCall(licenseEditorialContentRequest, _callback);

    }

    /**
     * License editorial content
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @return LicenseEditorialContentResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public LicenseEditorialContentResults licenseEditorialImages(LicenseEditorialContentRequest licenseEditorialContentRequest) throws ApiException {
        ApiResponse<LicenseEditorialContentResults> localVarResp = licenseEditorialImagesWithHttpInfo(licenseEditorialContentRequest);
        return localVarResp.getData();
    }

    /**
     * License editorial content
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @return ApiResponse&lt;LicenseEditorialContentResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseEditorialContentResults> licenseEditorialImagesWithHttpInfo(LicenseEditorialContentRequest licenseEditorialContentRequest) throws ApiException {
        okhttp3.Call localVarCall = licenseEditorialImagesValidateBeforeCall(licenseEditorialContentRequest, null);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * License editorial content (asynchronously)
     * This endpoint gets licenses for one or more editorial images. You must specify the country and one or more editorial images to license. The download links in the response are valid for 8 hours.
     * @param licenseEditorialContentRequest License editorial content (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseEditorialImagesAsync(LicenseEditorialContentRequest licenseEditorialContentRequest, final ApiCallback<LicenseEditorialContentResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseEditorialImagesValidateBeforeCall(licenseEditorialContentRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseEditorialContentResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listEditorialImageCategories
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEditorialImageCategoriesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEditorialImageCategoriesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        return listEditorialImageCategoriesCall(_callback);

    }

    /**
     * List editorial categories
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return EditorialImageCategoryResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public EditorialImageCategoryResults listEditorialImageCategories() throws ApiException {
        ApiResponse<EditorialImageCategoryResults> localVarResp = listEditorialImageCategoriesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * List editorial categories
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @return ApiResponse&lt;EditorialImageCategoryResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialImageCategoryResults> listEditorialImageCategoriesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = listEditorialImageCategoriesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<EditorialImageCategoryResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List editorial categories (asynchronously)
     * This endpoint lists the categories that editorial images can belong to, which are separate from the categories that other types of assets can belong to.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listEditorialImageCategoriesAsync(final ApiCallback<EditorialImageCategoryResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEditorialImageCategoriesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<EditorialImageCategoryResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchEditorial
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content within a certain editorial category; specify by category name (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchEditorialCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchEditorialValidateBeforeCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling searchEditorial(Async)");
        }

        return searchEditorialCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);

    }

    /**
     * (Deprecated) Search editorial content
     * Deprecated; use &#x60;GET /v2/editorial/images/search&#x60; instead to search for editorial images.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content within a certain editorial category; specify by category name (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @return EditorialSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialSearchResults searchEditorial(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor) throws ApiException {
        ApiResponse<EditorialSearchResults> localVarResp = searchEditorialWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Search editorial content
     * Deprecated; use &#x60;GET /v2/editorial/images/search&#x60; instead to search for editorial images.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content within a certain editorial category; specify by category name (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @return ApiResponse&lt;EditorialSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialSearchResults> searchEditorialWithHttpInfo(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor) throws ApiException {
        okhttp3.Call localVarCall = searchEditorialValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, null);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Search editorial content (asynchronously)
     * Deprecated; use &#x60;GET /v2/editorial/images/search&#x60; instead to search for editorial images.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content within a certain editorial category; specify by category name (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchEditorialAsync(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback<EditorialSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchEditorialValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchEditorialImages
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchEditorialImagesCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/images/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (supplierCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "supplier_code", supplierCode));
        }

        if (dateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_start", dateStart));
        }

        if (dateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date_end", dateEnd));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchEditorialImagesValidateBeforeCall(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling searchEditorialImages(Async)");
        }

        return searchEditorialImagesCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);

    }

    /**
     * Search editorial images
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the &#x60;category&#x60; parameter to \&quot;Alone,Performing\&quot; and also specify a &#x60;query&#x60; parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @return EditorialSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public EditorialSearchResults searchEditorialImages(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor) throws ApiException {
        ApiResponse<EditorialSearchResults> localVarResp = searchEditorialImagesWithHttpInfo(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor);
        return localVarResp.getData();
    }

    /**
     * Search editorial images
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the &#x60;category&#x60; parameter to \&quot;Alone,Performing\&quot; and also specify a &#x60;query&#x60; parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @return ApiResponse&lt;EditorialSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EditorialSearchResults> searchEditorialImagesWithHttpInfo(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor) throws ApiException {
        okhttp3.Call localVarCall = searchEditorialImagesValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, null);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search editorial images (asynchronously)
     * This endpoint searches for editorial images. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the &#x60;category&#x60; parameter to \&quot;Alone,Performing\&quot; and also specify a &#x60;query&#x60; parameter, the results include only images that match the query and are in both the Alone and Performing categories. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param country Show only editorial content that is available for distribution in a certain country (required)
     * @param query One or more search terms separated by spaces (optional)
     * @param sort Sort by (optional, default to relevant)
     * @param category Show editorial content with each of the specified editorial categories; specify category names in a comma-separated list (optional)
     * @param supplierCode Show only editorial content from certain suppliers (optional)
     * @param dateStart Show only editorial content generated on or after a specific date (optional)
     * @param dateEnd Show only editorial content generated on or before a specific date (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param cursor The cursor of the page with which to start fetching results; this cursor is returned from previous requests (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 406 </td><td> Not Acceptable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchEditorialImagesAsync(String country, String query, String sort, String category, List<String> supplierCode, LocalDate dateStart, LocalDate dateEnd, Integer perPage, String cursor, final ApiCallback<EditorialSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchEditorialImagesValidateBeforeCall(country, query, sort, category, supplierCode, dateStart, dateEnd, perPage, cursor, _callback);
        Type localVarReturnType = new TypeToken<EditorialSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for v2EditorialIdGet
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v2EditorialIdGetCall(String id, String country, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/editorial/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (country != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("country", country));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call v2EditorialIdGetValidateBeforeCall(String id, String country, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling v2EditorialIdGet(Async)");
        }

        // verify the required parameter 'country' is set
        if (country == null) {
            throw new ApiException("Missing the required parameter 'country' when calling v2EditorialIdGet(Async)");
        }

        return v2EditorialIdGetCall(id, country, searchId, _callback);

    }

    /**
     * (Deprecated) Get editorial content details
     * Deprecated; use &#x60;GET /v2/editorial/images/{id}&#x60; instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return EditorialContent
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public EditorialContent v2EditorialIdGet(String id, String country, String searchId) throws ApiException {
        ApiResponse<EditorialContent> localVarResp = v2EditorialIdGetWithHttpInfo(id, country, searchId);
        return localVarResp.getData();
    }

    /**
     * (Deprecated) Get editorial content details
     * Deprecated; use &#x60;GET /v2/editorial/images/{id}&#x60; instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;EditorialContent&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<EditorialContent> v2EditorialIdGetWithHttpInfo(String id, String country, String searchId) throws ApiException {
        okhttp3.Call localVarCall = v2EditorialIdGetValidateBeforeCall(id, country, searchId, null);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * (Deprecated) Get editorial content details (asynchronously)
     * Deprecated; use &#x60;GET /v2/editorial/images/{id}&#x60; instead to show information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     * @param id Editorial ID (required)
     * @param country Returns only if the content is available for distribution in a certain country (required)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call v2EditorialIdGetAsync(String id, String country, String searchId, final ApiCallback<EditorialContent> _callback) throws ApiException {

        okhttp3.Call localVarCall = v2EditorialIdGetValidateBeforeCall(id, country, searchId, _callback);
        Type localVarReturnType = new TypeToken<EditorialContent>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
