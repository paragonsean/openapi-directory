/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.AudioRenderTimelineSpanInstrumentGroup;
import org.openapitools.client.model.AudioRenderTimelineSpanRegion;
import org.openapitools.client.model.AudioRenderTimelineSpanTempoChanges;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The beginning of a non-overlapping period of absolute time
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioRenderTimelineSpan {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_INSTRUMENT_GROUPS = "instrument_groups";
  @SerializedName(SERIALIZED_NAME_INSTRUMENT_GROUPS)
  private List<AudioRenderTimelineSpanInstrumentGroup> instrumentGroups = new ArrayList<>();

  public static final String SERIALIZED_NAME_REGIONS = "regions";
  @SerializedName(SERIALIZED_NAME_REGIONS)
  private List<AudioRenderTimelineSpanRegion> regions = new ArrayList<>();

  /**
   * Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
   */
  @JsonAdapter(SpanTypeEnum.Adapter.class)
  public enum SpanTypeEnum {
    METERED("metered"),
    
    UNMETERED("unmetered");

    private String value;

    SpanTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SpanTypeEnum fromValue(String value) {
      for (SpanTypeEnum b : SpanTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SpanTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SpanTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SpanTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SpanTypeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SpanTypeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SPAN_TYPE = "span_type";
  @SerializedName(SERIALIZED_NAME_SPAN_TYPE)
  private SpanTypeEnum spanType;

  public static final String SERIALIZED_NAME_TEMPO = "tempo";
  @SerializedName(SERIALIZED_NAME_TEMPO)
  private Integer tempo;

  public static final String SERIALIZED_NAME_TEMPO_CHANGES = "tempo_changes";
  @SerializedName(SERIALIZED_NAME_TEMPO_CHANGES)
  private List<AudioRenderTimelineSpanTempoChanges> tempoChanges = new ArrayList<>();

  public static final String SERIALIZED_NAME_TIME = "time";
  @SerializedName(SERIALIZED_NAME_TIME)
  private Integer time;

  public AudioRenderTimelineSpan() {
  }

  public AudioRenderTimelineSpan id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier which must be unique within the parent span
   * @return id
   */
  @javax.annotation.Nullable
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public AudioRenderTimelineSpan instrumentGroups(List<AudioRenderTimelineSpanInstrumentGroup> instrumentGroups) {
    this.instrumentGroups = instrumentGroups;
    return this;
  }

  public AudioRenderTimelineSpan addInstrumentGroupsItem(AudioRenderTimelineSpanInstrumentGroup instrumentGroupsItem) {
    if (this.instrumentGroups == null) {
      this.instrumentGroups = new ArrayList<>();
    }
    this.instrumentGroups.add(instrumentGroupsItem);
    return this;
  }

  /**
   * An array of instrument_group objects that are used in this span
   * @return instrumentGroups
   */
  @javax.annotation.Nullable
  public List<AudioRenderTimelineSpanInstrumentGroup> getInstrumentGroups() {
    return instrumentGroups;
  }

  public void setInstrumentGroups(List<AudioRenderTimelineSpanInstrumentGroup> instrumentGroups) {
    this.instrumentGroups = instrumentGroups;
  }


  public AudioRenderTimelineSpan regions(List<AudioRenderTimelineSpanRegion> regions) {
    this.regions = regions;
    return this;
  }

  public AudioRenderTimelineSpan addRegionsItem(AudioRenderTimelineSpanRegion regionsItem) {
    if (this.regions == null) {
      this.regions = new ArrayList<>();
    }
    this.regions.add(regionsItem);
    return this;
  }

  /**
   * An array of region objects within the span
   * @return regions
   */
  @javax.annotation.Nullable
  public List<AudioRenderTimelineSpanRegion> getRegions() {
    return regions;
  }

  public void setRegions(List<AudioRenderTimelineSpanRegion> regions) {
    this.regions = regions;
  }


  public AudioRenderTimelineSpan spanType(SpanTypeEnum spanType) {
    this.spanType = spanType;
    return this;
  }

  /**
   * Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span
   * @return spanType
   */
  @javax.annotation.Nonnull
  public SpanTypeEnum getSpanType() {
    return spanType;
  }

  public void setSpanType(SpanTypeEnum spanType) {
    this.spanType = spanType;
  }


  public AudioRenderTimelineSpan tempo(Integer tempo) {
    this.tempo = tempo;
    return this;
  }

  /**
   * The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo
   * @return tempo
   */
  @javax.annotation.Nullable
  public Integer getTempo() {
    return tempo;
  }

  public void setTempo(Integer tempo) {
    this.tempo = tempo;
  }


  public AudioRenderTimelineSpan tempoChanges(List<AudioRenderTimelineSpanTempoChanges> tempoChanges) {
    this.tempoChanges = tempoChanges;
    return this;
  }

  public AudioRenderTimelineSpan addTempoChangesItem(AudioRenderTimelineSpanTempoChanges tempoChangesItem) {
    if (this.tempoChanges == null) {
      this.tempoChanges = new ArrayList<>();
    }
    this.tempoChanges.add(tempoChangesItem);
    return this;
  }

  /**
   * Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change
   * @return tempoChanges
   */
  @javax.annotation.Nullable
  public List<AudioRenderTimelineSpanTempoChanges> getTempoChanges() {
    return tempoChanges;
  }

  public void setTempoChanges(List<AudioRenderTimelineSpanTempoChanges> tempoChanges) {
    this.tempoChanges = tempoChanges;
  }


  public AudioRenderTimelineSpan time(Integer time) {
    this.time = time;
    return this;
  }

  /**
   * The absolute time, in seconds, at which the span starts
   * @return time
   */
  @javax.annotation.Nonnull
  public Integer getTime() {
    return time;
  }

  public void setTime(Integer time) {
    this.time = time;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioRenderTimelineSpan audioRenderTimelineSpan = (AudioRenderTimelineSpan) o;
    return Objects.equals(this.id, audioRenderTimelineSpan.id) &&
        Objects.equals(this.instrumentGroups, audioRenderTimelineSpan.instrumentGroups) &&
        Objects.equals(this.regions, audioRenderTimelineSpan.regions) &&
        Objects.equals(this.spanType, audioRenderTimelineSpan.spanType) &&
        Objects.equals(this.tempo, audioRenderTimelineSpan.tempo) &&
        Objects.equals(this.tempoChanges, audioRenderTimelineSpan.tempoChanges) &&
        Objects.equals(this.time, audioRenderTimelineSpan.time);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, instrumentGroups, regions, spanType, tempo, tempoChanges, time);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioRenderTimelineSpan {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instrumentGroups: ").append(toIndentedString(instrumentGroups)).append("\n");
    sb.append("    regions: ").append(toIndentedString(regions)).append("\n");
    sb.append("    spanType: ").append(toIndentedString(spanType)).append("\n");
    sb.append("    tempo: ").append(toIndentedString(tempo)).append("\n");
    sb.append("    tempoChanges: ").append(toIndentedString(tempoChanges)).append("\n");
    sb.append("    time: ").append(toIndentedString(time)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("instrument_groups");
    openapiFields.add("regions");
    openapiFields.add("span_type");
    openapiFields.add("tempo");
    openapiFields.add("tempo_changes");
    openapiFields.add("time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("span_type");
    openapiRequiredFields.add("time");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioRenderTimelineSpan
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioRenderTimelineSpan.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioRenderTimelineSpan is not found in the empty JSON string", AudioRenderTimelineSpan.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioRenderTimelineSpan.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioRenderTimelineSpan` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AudioRenderTimelineSpan.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("instrument_groups") != null && !jsonObj.get("instrument_groups").isJsonNull()) {
        JsonArray jsonArrayinstrumentGroups = jsonObj.getAsJsonArray("instrument_groups");
        if (jsonArrayinstrumentGroups != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instrument_groups").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instrument_groups` to be an array in the JSON string but got `%s`", jsonObj.get("instrument_groups").toString()));
          }

          // validate the optional field `instrument_groups` (array)
          for (int i = 0; i < jsonArrayinstrumentGroups.size(); i++) {
            AudioRenderTimelineSpanInstrumentGroup.validateJsonElement(jsonArrayinstrumentGroups.get(i));
          };
        }
      }
      if (jsonObj.get("regions") != null && !jsonObj.get("regions").isJsonNull()) {
        JsonArray jsonArrayregions = jsonObj.getAsJsonArray("regions");
        if (jsonArrayregions != null) {
          // ensure the json data is an array
          if (!jsonObj.get("regions").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `regions` to be an array in the JSON string but got `%s`", jsonObj.get("regions").toString()));
          }

          // validate the optional field `regions` (array)
          for (int i = 0; i < jsonArrayregions.size(); i++) {
            AudioRenderTimelineSpanRegion.validateJsonElement(jsonArrayregions.get(i));
          };
        }
      }
      if (!jsonObj.get("span_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `span_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("span_type").toString()));
      }
      // validate the required field `span_type`
      SpanTypeEnum.validateJsonElement(jsonObj.get("span_type"));
      if (jsonObj.get("tempo_changes") != null && !jsonObj.get("tempo_changes").isJsonNull()) {
        JsonArray jsonArraytempoChanges = jsonObj.getAsJsonArray("tempo_changes");
        if (jsonArraytempoChanges != null) {
          // ensure the json data is an array
          if (!jsonObj.get("tempo_changes").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `tempo_changes` to be an array in the JSON string but got `%s`", jsonObj.get("tempo_changes").toString()));
          }

          // validate the optional field `tempo_changes` (array)
          for (int i = 0; i < jsonArraytempoChanges.size(); i++) {
            AudioRenderTimelineSpanTempoChanges.validateJsonElement(jsonArraytempoChanges.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioRenderTimelineSpan.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioRenderTimelineSpan' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioRenderTimelineSpan> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioRenderTimelineSpan.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioRenderTimelineSpan>() {
           @Override
           public void write(JsonWriter out, AudioRenderTimelineSpan value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioRenderTimelineSpan read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioRenderTimelineSpan given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioRenderTimelineSpan
   * @throws IOException if the JSON string is invalid with respect to AudioRenderTimelineSpan
   */
  public static AudioRenderTimelineSpan fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioRenderTimelineSpan.class);
  }

  /**
   * Convert an instance of AudioRenderTimelineSpan to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

