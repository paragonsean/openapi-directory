/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Category;
import org.openapitools.client.model.Contributor;
import org.openapitools.client.model.ImageAssets;
import org.openapitools.client.model.ImageInsights;
import org.openapitools.client.model.Model;
import org.openapitools.client.model.ModelRelease;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about an image
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Image {
  public static final String SERIALIZED_NAME_ADDED_DATE = "added_date";
  @SerializedName(SERIALIZED_NAME_ADDED_DATE)
  private LocalDate addedDate;

  public static final String SERIALIZED_NAME_AFFILIATE_URL = "affiliate_url";
  @SerializedName(SERIALIZED_NAME_AFFILIATE_URL)
  private URI affiliateUrl;

  public static final String SERIALIZED_NAME_ASPECT = "aspect";
  @SerializedName(SERIALIZED_NAME_ASPECT)
  private BigDecimal aspect;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private ImageAssets assets;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<Category> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_CONTRIBUTOR = "contributor";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR)
  private Contributor contributor;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_HAS_MODEL_RELEASE = "has_model_release";
  @SerializedName(SERIALIZED_NAME_HAS_MODEL_RELEASE)
  private Boolean hasModelRelease;

  public static final String SERIALIZED_NAME_HAS_PROPERTY_RELEASE = "has_property_release";
  @SerializedName(SERIALIZED_NAME_HAS_PROPERTY_RELEASE)
  private Boolean hasPropertyRelease;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "image_type";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private String imageType;

  public static final String SERIALIZED_NAME_INSIGHTS = "insights";
  @SerializedName(SERIALIZED_NAME_INSIGHTS)
  private ImageInsights insights;

  public static final String SERIALIZED_NAME_IS_ADULT = "is_adult";
  @SerializedName(SERIALIZED_NAME_IS_ADULT)
  private Boolean isAdult;

  public static final String SERIALIZED_NAME_IS_EDITORIAL = "is_editorial";
  @SerializedName(SERIALIZED_NAME_IS_EDITORIAL)
  private Boolean isEditorial;

  public static final String SERIALIZED_NAME_IS_ILLUSTRATION = "is_illustration";
  @SerializedName(SERIALIZED_NAME_IS_ILLUSTRATION)
  private Boolean isIllustration;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_MEDIA_TYPE = "media_type";
  @SerializedName(SERIALIZED_NAME_MEDIA_TYPE)
  private String mediaType;

  public static final String SERIALIZED_NAME_MODEL_RELEASES = "model_releases";
  @SerializedName(SERIALIZED_NAME_MODEL_RELEASES)
  private List<ModelRelease> modelReleases = new ArrayList<>();

  public static final String SERIALIZED_NAME_MODELS = "models";
  @SerializedName(SERIALIZED_NAME_MODELS)
  private List<Model> models = new ArrayList<>();

  public static final String SERIALIZED_NAME_RELEASES = "releases";
  @SerializedName(SERIALIZED_NAME_RELEASES)
  private List<String> releases = new ArrayList<>();

  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public Image() {
  }

  public Image addedDate(LocalDate addedDate) {
    this.addedDate = addedDate;
    return this;
  }

  /**
   * Date that the image was added by the contributor
   * @return addedDate
   */
  @javax.annotation.Nullable
  public LocalDate getAddedDate() {
    return addedDate;
  }

  public void setAddedDate(LocalDate addedDate) {
    this.addedDate = addedDate;
  }


  public Image affiliateUrl(URI affiliateUrl) {
    this.affiliateUrl = affiliateUrl;
    return this;
  }

  /**
   * Affiliate referral link; appears only for registered affiliate partners
   * @return affiliateUrl
   */
  @javax.annotation.Nullable
  public URI getAffiliateUrl() {
    return affiliateUrl;
  }

  public void setAffiliateUrl(URI affiliateUrl) {
    this.affiliateUrl = affiliateUrl;
  }


  public Image aspect(BigDecimal aspect) {
    this.aspect = aspect;
    return this;
  }

  /**
   * Aspect ratio of the image in decimal format, such as 0.6667
   * @return aspect
   */
  @javax.annotation.Nullable
  public BigDecimal getAspect() {
    return aspect;
  }

  public void setAspect(BigDecimal aspect) {
    this.aspect = aspect;
  }


  public Image assets(ImageAssets assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Get assets
   * @return assets
   */
  @javax.annotation.Nullable
  public ImageAssets getAssets() {
    return assets;
  }

  public void setAssets(ImageAssets assets) {
    this.assets = assets;
  }


  public Image categories(List<Category> categories) {
    this.categories = categories;
    return this;
  }

  public Image addCategoriesItem(Category categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * Categories that this image is a part of
   * @return categories
   */
  @javax.annotation.Nullable
  public List<Category> getCategories() {
    return categories;
  }

  public void setCategories(List<Category> categories) {
    this.categories = categories;
  }


  public Image contributor(Contributor contributor) {
    this.contributor = contributor;
    return this;
  }

  /**
   * Get contributor
   * @return contributor
   */
  @javax.annotation.Nonnull
  public Contributor getContributor() {
    return contributor;
  }

  public void setContributor(Contributor contributor) {
    this.contributor = contributor;
  }


  public Image description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Detailed description of the image
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public Image hasModelRelease(Boolean hasModelRelease) {
    this.hasModelRelease = hasModelRelease;
    return this;
  }

  /**
   * Indicates whether there are model releases for the image
   * @return hasModelRelease
   */
  @javax.annotation.Nullable
  public Boolean getHasModelRelease() {
    return hasModelRelease;
  }

  public void setHasModelRelease(Boolean hasModelRelease) {
    this.hasModelRelease = hasModelRelease;
  }


  public Image hasPropertyRelease(Boolean hasPropertyRelease) {
    this.hasPropertyRelease = hasPropertyRelease;
    return this;
  }

  /**
   * Indicates whether there are property releases for the image
   * @return hasPropertyRelease
   */
  @javax.annotation.Nullable
  public Boolean getHasPropertyRelease() {
    return hasPropertyRelease;
  }

  public void setHasPropertyRelease(Boolean hasPropertyRelease) {
    this.hasPropertyRelease = hasPropertyRelease;
  }


  public Image id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Image ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Image imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

  /**
   * Type of image
   * @return imageType
   */
  @javax.annotation.Nullable
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }


  public Image insights(ImageInsights insights) {
    this.insights = insights;
    return this;
  }

  /**
   * Get insights
   * @return insights
   */
  @javax.annotation.Nullable
  public ImageInsights getInsights() {
    return insights;
  }

  public void setInsights(ImageInsights insights) {
    this.insights = insights;
  }


  public Image isAdult(Boolean isAdult) {
    this.isAdult = isAdult;
    return this;
  }

  /**
   * Whether or not this image contains adult content
   * @return isAdult
   */
  @javax.annotation.Nullable
  public Boolean getIsAdult() {
    return isAdult;
  }

  public void setIsAdult(Boolean isAdult) {
    this.isAdult = isAdult;
  }


  public Image isEditorial(Boolean isEditorial) {
    this.isEditorial = isEditorial;
    return this;
  }

  /**
   * Whether or not this image is editorial content
   * @return isEditorial
   */
  @javax.annotation.Nullable
  public Boolean getIsEditorial() {
    return isEditorial;
  }

  public void setIsEditorial(Boolean isEditorial) {
    this.isEditorial = isEditorial;
  }


  public Image isIllustration(Boolean isIllustration) {
    this.isIllustration = isIllustration;
    return this;
  }

  /**
   * Whether or not this image is an illustration
   * @return isIllustration
   */
  @javax.annotation.Nullable
  public Boolean getIsIllustration() {
    return isIllustration;
  }

  public void setIsIllustration(Boolean isIllustration) {
    this.isIllustration = isIllustration;
  }


  public Image keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public Image addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Keywords associated with the content of this image
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public Image mediaType(String mediaType) {
    this.mediaType = mediaType;
    return this;
  }

  /**
   * Media type of this image, should always be \&quot;image\&quot;
   * @return mediaType
   */
  @javax.annotation.Nonnull
  public String getMediaType() {
    return mediaType;
  }

  public void setMediaType(String mediaType) {
    this.mediaType = mediaType;
  }


  public Image modelReleases(List<ModelRelease> modelReleases) {
    this.modelReleases = modelReleases;
    return this;
  }

  public Image addModelReleasesItem(ModelRelease modelReleasesItem) {
    if (this.modelReleases == null) {
      this.modelReleases = new ArrayList<>();
    }
    this.modelReleases.add(modelReleasesItem);
    return this;
  }

  /**
   * List of model releases
   * @return modelReleases
   */
  @javax.annotation.Nullable
  public List<ModelRelease> getModelReleases() {
    return modelReleases;
  }

  public void setModelReleases(List<ModelRelease> modelReleases) {
    this.modelReleases = modelReleases;
  }


  public Image models(List<Model> models) {
    this.models = models;
    return this;
  }

  public Image addModelsItem(Model modelsItem) {
    if (this.models == null) {
      this.models = new ArrayList<>();
    }
    this.models.add(modelsItem);
    return this;
  }

  /**
   * List of models
   * @return models
   */
  @javax.annotation.Nullable
  public List<Model> getModels() {
    return models;
  }

  public void setModels(List<Model> models) {
    this.models = models;
  }


  public Image releases(List<String> releases) {
    this.releases = releases;
    return this;
  }

  public Image addReleasesItem(String releasesItem) {
    if (this.releases == null) {
      this.releases = new ArrayList<>();
    }
    this.releases.add(releasesItem);
    return this;
  }

  /**
   * List of all releases of this image
   * @return releases
   */
  @javax.annotation.Nullable
  public List<String> getReleases() {
    return releases;
  }

  public void setReleases(List<String> releases) {
    this.releases = releases;
  }


  public Image url(String url) {
    this.url = url;
    return this;
  }

  /**
   * Link to image information page; included only for certain accounts
   * @return url
   */
  @javax.annotation.Nullable
  public String getUrl() {
    return url;
  }

  public void setUrl(String url) {
    this.url = url;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Image image = (Image) o;
    return Objects.equals(this.addedDate, image.addedDate) &&
        Objects.equals(this.affiliateUrl, image.affiliateUrl) &&
        Objects.equals(this.aspect, image.aspect) &&
        Objects.equals(this.assets, image.assets) &&
        Objects.equals(this.categories, image.categories) &&
        Objects.equals(this.contributor, image.contributor) &&
        Objects.equals(this.description, image.description) &&
        Objects.equals(this.hasModelRelease, image.hasModelRelease) &&
        Objects.equals(this.hasPropertyRelease, image.hasPropertyRelease) &&
        Objects.equals(this.id, image.id) &&
        Objects.equals(this.imageType, image.imageType) &&
        Objects.equals(this.insights, image.insights) &&
        Objects.equals(this.isAdult, image.isAdult) &&
        Objects.equals(this.isEditorial, image.isEditorial) &&
        Objects.equals(this.isIllustration, image.isIllustration) &&
        Objects.equals(this.keywords, image.keywords) &&
        Objects.equals(this.mediaType, image.mediaType) &&
        Objects.equals(this.modelReleases, image.modelReleases) &&
        Objects.equals(this.models, image.models) &&
        Objects.equals(this.releases, image.releases) &&
        Objects.equals(this.url, image.url);
  }

  @Override
  public int hashCode() {
    return Objects.hash(addedDate, affiliateUrl, aspect, assets, categories, contributor, description, hasModelRelease, hasPropertyRelease, id, imageType, insights, isAdult, isEditorial, isIllustration, keywords, mediaType, modelReleases, models, releases, url);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Image {\n");
    sb.append("    addedDate: ").append(toIndentedString(addedDate)).append("\n");
    sb.append("    affiliateUrl: ").append(toIndentedString(affiliateUrl)).append("\n");
    sb.append("    aspect: ").append(toIndentedString(aspect)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    contributor: ").append(toIndentedString(contributor)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    hasModelRelease: ").append(toIndentedString(hasModelRelease)).append("\n");
    sb.append("    hasPropertyRelease: ").append(toIndentedString(hasPropertyRelease)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    insights: ").append(toIndentedString(insights)).append("\n");
    sb.append("    isAdult: ").append(toIndentedString(isAdult)).append("\n");
    sb.append("    isEditorial: ").append(toIndentedString(isEditorial)).append("\n");
    sb.append("    isIllustration: ").append(toIndentedString(isIllustration)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    mediaType: ").append(toIndentedString(mediaType)).append("\n");
    sb.append("    modelReleases: ").append(toIndentedString(modelReleases)).append("\n");
    sb.append("    models: ").append(toIndentedString(models)).append("\n");
    sb.append("    releases: ").append(toIndentedString(releases)).append("\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("added_date");
    openapiFields.add("affiliate_url");
    openapiFields.add("aspect");
    openapiFields.add("assets");
    openapiFields.add("categories");
    openapiFields.add("contributor");
    openapiFields.add("description");
    openapiFields.add("has_model_release");
    openapiFields.add("has_property_release");
    openapiFields.add("id");
    openapiFields.add("image_type");
    openapiFields.add("insights");
    openapiFields.add("is_adult");
    openapiFields.add("is_editorial");
    openapiFields.add("is_illustration");
    openapiFields.add("keywords");
    openapiFields.add("media_type");
    openapiFields.add("model_releases");
    openapiFields.add("models");
    openapiFields.add("releases");
    openapiFields.add("url");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("contributor");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("media_type");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Image
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Image.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Image is not found in the empty JSON string", Image.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Image.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Image` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Image.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("affiliate_url") != null && !jsonObj.get("affiliate_url").isJsonNull()) && !jsonObj.get("affiliate_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `affiliate_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("affiliate_url").toString()));
      }
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        ImageAssets.validateJsonElement(jsonObj.get("assets"));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            Category.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      // validate the required field `contributor`
      Contributor.validateJsonElement(jsonObj.get("contributor"));
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("image_type") != null && !jsonObj.get("image_type").isJsonNull()) && !jsonObj.get("image_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_type").toString()));
      }
      // validate the optional field `insights`
      if (jsonObj.get("insights") != null && !jsonObj.get("insights").isJsonNull()) {
        ImageInsights.validateJsonElement(jsonObj.get("insights"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      if (!jsonObj.get("media_type").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `media_type` to be a primitive type in the JSON string but got `%s`", jsonObj.get("media_type").toString()));
      }
      if (jsonObj.get("model_releases") != null && !jsonObj.get("model_releases").isJsonNull()) {
        JsonArray jsonArraymodelReleases = jsonObj.getAsJsonArray("model_releases");
        if (jsonArraymodelReleases != null) {
          // ensure the json data is an array
          if (!jsonObj.get("model_releases").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `model_releases` to be an array in the JSON string but got `%s`", jsonObj.get("model_releases").toString()));
          }

          // validate the optional field `model_releases` (array)
          for (int i = 0; i < jsonArraymodelReleases.size(); i++) {
            ModelRelease.validateJsonElement(jsonArraymodelReleases.get(i));
          };
        }
      }
      if (jsonObj.get("models") != null && !jsonObj.get("models").isJsonNull()) {
        JsonArray jsonArraymodels = jsonObj.getAsJsonArray("models");
        if (jsonArraymodels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("models").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `models` to be an array in the JSON string but got `%s`", jsonObj.get("models").toString()));
          }

          // validate the optional field `models` (array)
          for (int i = 0; i < jsonArraymodels.size(); i++) {
            Model.validateJsonElement(jsonArraymodels.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("releases") != null && !jsonObj.get("releases").isJsonNull() && !jsonObj.get("releases").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `releases` to be an array in the JSON string but got `%s`", jsonObj.get("releases").toString()));
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Image.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Image' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Image> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Image.class));

       return (TypeAdapter<T>) new TypeAdapter<Image>() {
           @Override
           public void write(JsonWriter out, Image value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Image read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Image given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Image
   * @throws IOException if the JSON string is invalid with respect to Image
   */
  public static Image fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Image.class);
  }

  /**
   * Convert an instance of Image to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

