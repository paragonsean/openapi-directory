/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;
import org.openapitools.client.model.CategoryDataList;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionCreateRequest;
import org.openapitools.client.model.CollectionCreateResponse;
import org.openapitools.client.model.CollectionDataList;
import org.openapitools.client.model.CollectionItemDataList;
import org.openapitools.client.model.CollectionItemRequest;
import org.openapitools.client.model.CollectionUpdateRequest;
import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.FeaturedCollection;
import org.openapitools.client.model.FeaturedCollectionDataList;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.LicenseVideoRequest;
import org.openapitools.client.model.LicenseVideoResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RedownloadVideo;
import org.openapitools.client.model.Suggestions;
import org.openapitools.client.model.UpdatedMediaDataList;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.VideoCollectionItemDataList;
import org.openapitools.client.model.VideoDataList;
import org.openapitools.client.model.VideoSearchResults;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VideosApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VideosApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VideosApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addVideoCollectionItems
     * @param id The ID of the collection to which items should be added (required)
     * @param collectionItemRequest Array of video IDs to add to the collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCollectionItemsCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionItemRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addVideoCollectionItemsValidateBeforeCall(String id, CollectionItemRequest collectionItemRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling addVideoCollectionItems(Async)");
        }

        // verify the required parameter 'collectionItemRequest' is set
        if (collectionItemRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionItemRequest' when calling addVideoCollectionItems(Async)");
        }

        return addVideoCollectionItemsCall(id, collectionItemRequest, _callback);

    }

    /**
     * Add videos to collections
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param id The ID of the collection to which items should be added (required)
     * @param collectionItemRequest Array of video IDs to add to the collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void addVideoCollectionItems(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        addVideoCollectionItemsWithHttpInfo(id, collectionItemRequest);
    }

    /**
     * Add videos to collections
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param id The ID of the collection to which items should be added (required)
     * @param collectionItemRequest Array of video IDs to add to the collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> addVideoCollectionItemsWithHttpInfo(String id, CollectionItemRequest collectionItemRequest) throws ApiException {
        okhttp3.Call localVarCall = addVideoCollectionItemsValidateBeforeCall(id, collectionItemRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Add videos to collections (asynchronously)
     * This endpoint adds one or more videos to a collection by video IDs.
     * @param id The ID of the collection to which items should be added (required)
     * @param collectionItemRequest Array of video IDs to add to the collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully added collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addVideoCollectionItemsAsync(String id, CollectionItemRequest collectionItemRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = addVideoCollectionItemsValidateBeforeCall(id, collectionItemRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for createVideoCollection
     * @param collectionCreateRequest Collection metadata (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoCollectionCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionCreateRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createVideoCollectionValidateBeforeCall(CollectionCreateRequest collectionCreateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionCreateRequest' is set
        if (collectionCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionCreateRequest' when calling createVideoCollection(Async)");
        }

        return createVideoCollectionCall(collectionCreateRequest, _callback);

    }

    /**
     * Create video collections
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use &#x60;POST /v2/videos/collections/{id}/items&#x60;.
     * @param collectionCreateRequest Collection metadata (required)
     * @return CollectionCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CollectionCreateResponse createVideoCollection(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        ApiResponse<CollectionCreateResponse> localVarResp = createVideoCollectionWithHttpInfo(collectionCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create video collections
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use &#x60;POST /v2/videos/collections/{id}/items&#x60;.
     * @param collectionCreateRequest Collection metadata (required)
     * @return ApiResponse&lt;CollectionCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionCreateResponse> createVideoCollectionWithHttpInfo(CollectionCreateRequest collectionCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createVideoCollectionValidateBeforeCall(collectionCreateRequest, null);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create video collections (asynchronously)
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use &#x60;POST /v2/videos/collections/{id}/items&#x60;.
     * @param collectionCreateRequest Collection metadata (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successfully created video collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createVideoCollectionAsync(CollectionCreateRequest collectionCreateRequest, final ApiCallback<CollectionCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createVideoCollectionValidateBeforeCall(collectionCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<CollectionCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoCollection
     * @param id The ID of the collection to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCollectionCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoCollectionValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVideoCollection(Async)");
        }

        return deleteVideoCollectionCall(id, _callback);

    }

    /**
     * Delete video collections
     * This endpoint deletes a collection.
     * @param id The ID of the collection to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoCollection(String id) throws ApiException {
        deleteVideoCollectionWithHttpInfo(id);
    }

    /**
     * Delete video collections
     * This endpoint deletes a collection.
     * @param id The ID of the collection to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoCollectionWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoCollectionValidateBeforeCall(id, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete video collections (asynchronously)
     * This endpoint deletes a collection.
     * @param id The ID of the collection to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully deleted collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCollectionAsync(String id, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoCollectionValidateBeforeCall(id, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteVideoCollectionItems
     * @param id The ID of the Collection from which items will be deleted (required)
     * @param itemId One or more video IDs to remove from the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCollectionItemsCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (itemId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "item_id", itemId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteVideoCollectionItemsValidateBeforeCall(String id, List<String> itemId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling deleteVideoCollectionItems(Async)");
        }

        return deleteVideoCollectionItemsCall(id, itemId, _callback);

    }

    /**
     * Remove videos from collections
     * This endpoint removes one or more videos from a collection.
     * @param id The ID of the Collection from which items will be deleted (required)
     * @param itemId One or more video IDs to remove from the collection (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteVideoCollectionItems(String id, List<String> itemId) throws ApiException {
        deleteVideoCollectionItemsWithHttpInfo(id, itemId);
    }

    /**
     * Remove videos from collections
     * This endpoint removes one or more videos from a collection.
     * @param id The ID of the Collection from which items will be deleted (required)
     * @param itemId One or more video IDs to remove from the collection (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteVideoCollectionItemsWithHttpInfo(String id, List<String> itemId) throws ApiException {
        okhttp3.Call localVarCall = deleteVideoCollectionItemsValidateBeforeCall(id, itemId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Remove videos from collections (asynchronously)
     * This endpoint removes one or more videos from a collection.
     * @param id The ID of the Collection from which items will be deleted (required)
     * @param itemId One or more video IDs to remove from the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully removed collection items </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteVideoCollectionItemsAsync(String id, List<String> itemId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteVideoCollectionItemsValidateBeforeCall(id, itemId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for downloadVideos
     * @param id The license ID of the item to (re)download. The download links in the response are valid for 8 hours. (required)
     * @param redownloadVideo Information about the videos to redownload (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVideosCall(String id, RedownloadVideo redownloadVideo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = redownloadVideo;

        // create path and map variables
        String localVarPath = "/v2/videos/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadVideosValidateBeforeCall(String id, RedownloadVideo redownloadVideo, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadVideos(Async)");
        }

        // verify the required parameter 'redownloadVideo' is set
        if (redownloadVideo == null) {
            throw new ApiException("Missing the required parameter 'redownloadVideo' when calling downloadVideos(Async)");
        }

        return downloadVideosCall(id, redownloadVideo, _callback);

    }

    /**
     * Download videos
     * This endpoint redownloads videos that you have already received a license for.
     * @param id The license ID of the item to (re)download. The download links in the response are valid for 8 hours. (required)
     * @param redownloadVideo Information about the videos to redownload (required)
     * @return Url
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public Url downloadVideos(String id, RedownloadVideo redownloadVideo) throws ApiException {
        ApiResponse<Url> localVarResp = downloadVideosWithHttpInfo(id, redownloadVideo);
        return localVarResp.getData();
    }

    /**
     * Download videos
     * This endpoint redownloads videos that you have already received a license for.
     * @param id The license ID of the item to (re)download. The download links in the response are valid for 8 hours. (required)
     * @param redownloadVideo Information about the videos to redownload (required)
     * @return ApiResponse&lt;Url&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Url> downloadVideosWithHttpInfo(String id, RedownloadVideo redownloadVideo) throws ApiException {
        okhttp3.Call localVarCall = downloadVideosValidateBeforeCall(id, redownloadVideo, null);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download videos (asynchronously)
     * This endpoint redownloads videos that you have already received a license for.
     * @param id The license ID of the item to (re)download. The download links in the response are valid for 8 hours. (required)
     * @param redownloadVideo Information about the videos to redownload (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadVideosAsync(String id, RedownloadVideo redownloadVideo, final ApiCallback<Url> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadVideosValidateBeforeCall(id, redownloadVideo, _callback);
        Type localVarReturnType = new TypeToken<Url>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for findSimilarVideos
     * @param id The ID of a video for which similar videos should be returned (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSimilarVideosCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/{id}/similar"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call findSimilarVideosValidateBeforeCall(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling findSimilarVideos(Async)");
        }

        return findSimilarVideosCall(id, language, page, perPage, view, _callback);

    }

    /**
     * List similar videos
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param id The ID of a video for which similar videos should be returned (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return VideoSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public VideoSearchResults findSimilarVideos(String id, Language language, Integer page, Integer perPage, String view) throws ApiException {
        ApiResponse<VideoSearchResults> localVarResp = findSimilarVideosWithHttpInfo(id, language, page, perPage, view);
        return localVarResp.getData();
    }

    /**
     * List similar videos
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param id The ID of a video for which similar videos should be returned (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ApiResponse&lt;VideoSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoSearchResults> findSimilarVideosWithHttpInfo(String id, Language language, Integer page, Integer perPage, String view) throws ApiException {
        okhttp3.Call localVarCall = findSimilarVideosValidateBeforeCall(id, language, page, perPage, view, null);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List similar videos (asynchronously)
     * This endpoint searches for videos that are similar to a video that you specify.
     * @param id The ID of a video for which similar videos should be returned (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call findSimilarVideosAsync(String id, Language language, Integer page, Integer perPage, String view, final ApiCallback<VideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = findSimilarVideosValidateBeforeCall(id, language, page, perPage, view, _callback);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedVideoCollection
     * @param id Collection ID (required)
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedVideoCollectionCall(String id, String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/featured/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedVideoCollectionValidateBeforeCall(String id, String embed, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFeaturedVideoCollection(Async)");
        }

        return getFeaturedVideoCollectionCall(id, embed, _callback);

    }

    /**
     * Get the details of featured video collections
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use &#x60;GET /v2/videos/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @return FeaturedCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public FeaturedCollection getFeaturedVideoCollection(String id, String embed) throws ApiException {
        ApiResponse<FeaturedCollection> localVarResp = getFeaturedVideoCollectionWithHttpInfo(id, embed);
        return localVarResp.getData();
    }

    /**
     * Get the details of featured video collections
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use &#x60;GET /v2/videos/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @return ApiResponse&lt;FeaturedCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeaturedCollection> getFeaturedVideoCollectionWithHttpInfo(String id, String embed) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedVideoCollectionValidateBeforeCall(id, embed, null);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of featured video collections (asynchronously)
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use &#x60;GET /v2/videos/collections/featured/{id}/items&#x60;.
     * @param id Collection ID (required)
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedVideoCollectionAsync(String id, String embed, final ApiCallback<FeaturedCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedVideoCollectionValidateBeforeCall(id, embed, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedVideoCollectionItems
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedVideoCollectionItemsCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/featured/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedVideoCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getFeaturedVideoCollectionItems(Async)");
        }

        return getFeaturedVideoCollectionItemsCall(id, page, perPage, _callback);

    }

    /**
     * Get the contents of featured video collections
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @return VideoCollectionItemDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public VideoCollectionItemDataList getFeaturedVideoCollectionItems(String id, Integer page, Integer perPage) throws ApiException {
        ApiResponse<VideoCollectionItemDataList> localVarResp = getFeaturedVideoCollectionItemsWithHttpInfo(id, page, perPage);
        return localVarResp.getData();
    }

    /**
     * Get the contents of featured video collections
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @return ApiResponse&lt;VideoCollectionItemDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoCollectionItemDataList> getFeaturedVideoCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedVideoCollectionItemsValidateBeforeCall(id, page, perPage, null);
        Type localVarReturnType = new TypeToken<VideoCollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the contents of featured video collections (asynchronously)
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Featured collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedVideoCollectionItemsAsync(String id, Integer page, Integer perPage, final ApiCallback<VideoCollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedVideoCollectionItemsValidateBeforeCall(id, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<VideoCollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getFeaturedVideoCollectionList
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedVideoCollectionListCall(String embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/featured";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFeaturedVideoCollectionListValidateBeforeCall(String embed, final ApiCallback _callback) throws ApiException {
        return getFeaturedVideoCollectionListCall(embed, _callback);

    }

    /**
     * List featured video collections
     * This endpoint lists featured video collections and a name and cover video for each collection.
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @return FeaturedCollectionDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public FeaturedCollectionDataList getFeaturedVideoCollectionList(String embed) throws ApiException {
        ApiResponse<FeaturedCollectionDataList> localVarResp = getFeaturedVideoCollectionListWithHttpInfo(embed);
        return localVarResp.getData();
    }

    /**
     * List featured video collections
     * This endpoint lists featured video collections and a name and cover video for each collection.
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @return ApiResponse&lt;FeaturedCollectionDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<FeaturedCollectionDataList> getFeaturedVideoCollectionListWithHttpInfo(String embed) throws ApiException {
        okhttp3.Call localVarCall = getFeaturedVideoCollectionListValidateBeforeCall(embed, null);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List featured video collections (asynchronously)
     * This endpoint lists featured video collections and a name and cover video for each collection.
     * @param embed What information to include in the response, such as a URL to the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getFeaturedVideoCollectionListAsync(String embed, final ApiCallback<FeaturedCollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFeaturedVideoCollectionListValidateBeforeCall(embed, _callback);
        Type localVarReturnType = new TypeToken<FeaturedCollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getUpdatedVideos
     * @param startDate Show videos updated on or after the specified date (optional)
     * @param endDate Show videos updated before the specified date (optional)
     * @param interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpdatedVideosCall(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/updated";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (interval != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("interval", interval));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getUpdatedVideosValidateBeforeCall(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback _callback) throws ApiException {
        return getUpdatedVideosCall(startDate, endDate, interval, page, perPage, sort, _callback);

    }

    /**
     * List updated videos
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show videos that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @param startDate Show videos updated on or after the specified date (optional)
     * @param endDate Show videos updated before the specified date (optional)
     * @param interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @return UpdatedMediaDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public UpdatedMediaDataList getUpdatedVideos(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort) throws ApiException {
        ApiResponse<UpdatedMediaDataList> localVarResp = getUpdatedVideosWithHttpInfo(startDate, endDate, interval, page, perPage, sort);
        return localVarResp.getData();
    }

    /**
     * List updated videos
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show videos that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @param startDate Show videos updated on or after the specified date (optional)
     * @param endDate Show videos updated before the specified date (optional)
     * @param interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @return ApiResponse&lt;UpdatedMediaDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<UpdatedMediaDataList> getUpdatedVideosWithHttpInfo(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort) throws ApiException {
        okhttp3.Call localVarCall = getUpdatedVideosValidateBeforeCall(startDate, endDate, interval, page, perPage, sort, null);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List updated videos (asynchronously)
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show videos that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     * @param startDate Show videos updated on or after the specified date (optional)
     * @param endDate Show videos updated before the specified date (optional)
     * @param interval Show videos updated in the specified time period, where the time period is an interval (like SQL INTERVAL) such as 1 DAY, 6 HOUR, or 30 MINUTE; the default is 1 HOUR, which shows videos that were updated in the hour preceding the request (optional, default to 1 HOUR)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getUpdatedVideosAsync(LocalDate startDate, LocalDate endDate, String interval, Integer page, Integer perPage, String sort, final ApiCallback<UpdatedMediaDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getUpdatedVideosValidateBeforeCall(startDate, endDate, interval, page, perPage, sort, _callback);
        Type localVarReturnType = new TypeToken<UpdatedMediaDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideo
     * @param id Video ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoValidateBeforeCall(String id, Language language, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideo(Async)");
        }

        return getVideoCall(id, language, view, searchId, _callback);

    }

    /**
     * Get details about videos
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param id Video ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return Video
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public Video getVideo(String id, Language language, String view, String searchId) throws ApiException {
        ApiResponse<Video> localVarResp = getVideoWithHttpInfo(id, language, view, searchId);
        return localVarResp.getData();
    }

    /**
     * Get details about videos
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param id Video ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;Video&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Video> getVideoWithHttpInfo(String id, Language language, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getVideoValidateBeforeCall(id, language, view, searchId, null);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about videos (asynchronously)
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     * @param id Video ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to full)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoAsync(String id, Language language, String view, String searchId, final ApiCallback<Video> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoValidateBeforeCall(id, language, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<Video>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCollection
     * @param id The ID of the collection to return (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCollectionCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCollectionValidateBeforeCall(String id, List<String> embed, String shareCode, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideoCollection(Async)");
        }

        return getVideoCollectionCall(id, embed, shareCode, _callback);

    }

    /**
     * Get the details of video collections
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param id The ID of the collection to return (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @return Collection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public Collection getVideoCollection(String id, List<String> embed, String shareCode) throws ApiException {
        ApiResponse<Collection> localVarResp = getVideoCollectionWithHttpInfo(id, embed, shareCode);
        return localVarResp.getData();
    }

    /**
     * Get the details of video collections
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param id The ID of the collection to return (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @return ApiResponse&lt;Collection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Collection> getVideoCollectionWithHttpInfo(String id, List<String> embed, String shareCode) throws ApiException {
        okhttp3.Call localVarCall = getVideoCollectionValidateBeforeCall(id, embed, shareCode, null);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the details of video collections (asynchronously)
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     * @param id The ID of the collection to return (required)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param shareCode Code to retrieve a shared collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCollectionAsync(String id, List<String> embed, String shareCode, final ApiCallback<Collection> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCollectionValidateBeforeCall(id, embed, shareCode, _callback);
        Type localVarReturnType = new TypeToken<Collection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCollectionItems
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCollectionItemsCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}/items"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (shareCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("share_code", shareCode));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCollectionItemsValidateBeforeCall(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideoCollectionItems(Async)");
        }

        return getVideoCollectionItemsCall(id, page, perPage, shareCode, sort, _callback);

    }

    /**
     * Get the contents of video collections
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @return CollectionItemDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public CollectionItemDataList getVideoCollectionItems(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        ApiResponse<CollectionItemDataList> localVarResp = getVideoCollectionItemsWithHttpInfo(id, page, perPage, shareCode, sort);
        return localVarResp.getData();
    }

    /**
     * Get the contents of video collections
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @return ApiResponse&lt;CollectionItemDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionItemDataList> getVideoCollectionItemsWithHttpInfo(String id, Integer page, Integer perPage, String shareCode, String sort) throws ApiException {
        okhttp3.Call localVarCall = getVideoCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, null);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the contents of video collections (asynchronously)
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     * @param id Collection ID (required)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param shareCode Code to retrieve the contents of a shared collection (optional)
     * @param sort Sort order (optional, default to oldest)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCollectionItemsAsync(String id, Integer page, Integer perPage, String shareCode, String sort, final ApiCallback<CollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCollectionItemsValidateBeforeCall(id, page, perPage, shareCode, sort, _callback);
        Type localVarReturnType = new TypeToken<CollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoCollectionList
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCollectionListCall(Integer page, Integer perPage, List<String> embed, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (embed != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "embed", embed));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoCollectionListValidateBeforeCall(Integer page, Integer perPage, List<String> embed, final ApiCallback _callback) throws ApiException {
        return getVideoCollectionListCall(page, perPage, embed, _callback);

    }

    /**
     * List video collections
     * This endpoint lists your collections of videos and their basic attributes.
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @return CollectionDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CollectionDataList getVideoCollectionList(Integer page, Integer perPage, List<String> embed) throws ApiException {
        ApiResponse<CollectionDataList> localVarResp = getVideoCollectionListWithHttpInfo(page, perPage, embed);
        return localVarResp.getData();
    }

    /**
     * List video collections
     * This endpoint lists your collections of videos and their basic attributes.
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @return ApiResponse&lt;CollectionDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CollectionDataList> getVideoCollectionListWithHttpInfo(Integer page, Integer perPage, List<String> embed) throws ApiException {
        okhttp3.Call localVarCall = getVideoCollectionListValidateBeforeCall(page, perPage, embed, null);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List video collections (asynchronously)
     * This endpoint lists your collections of videos and their basic attributes.
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 100)
     * @param embed Which sharing information to include in the response, such as a URL to the collection (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoCollectionListAsync(Integer page, Integer perPage, List<String> embed, final ApiCallback<CollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoCollectionListValidateBeforeCall(page, perPage, embed, _callback);
        Type localVarReturnType = new TypeToken<CollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoLicenseList
     * @param videoId Show licenses for the specified video ID (optional)
     * @param license Show videos that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoLicenseListCall(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (videoId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("video_id", videoId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoLicenseListValidateBeforeCall(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return getVideoLicenseListCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);

    }

    /**
     * List video licenses
     * This endpoint lists existing licenses.
     * @param videoId Show licenses for the specified video ID (optional)
     * @param license Show videos that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return DownloadHistoryDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DownloadHistoryDataList getVideoLicenseList(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        ApiResponse<DownloadHistoryDataList> localVarResp = getVideoLicenseListWithHttpInfo(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        return localVarResp.getData();
    }

    /**
     * List video licenses
     * This endpoint lists existing licenses.
     * @param videoId Show licenses for the specified video ID (optional)
     * @param license Show videos that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return ApiResponse&lt;DownloadHistoryDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadHistoryDataList> getVideoLicenseListWithHttpInfo(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = getVideoLicenseListValidateBeforeCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List video licenses (asynchronously)
     * This endpoint lists existing licenses.
     * @param videoId Show licenses for the specified video ID (optional)
     * @param license Show videos that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by oldest or newest videos first (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoLicenseListAsync(String videoId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoLicenseListValidateBeforeCall(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoList
     * @param id One or more video IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoListCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoListValidateBeforeCall(List<String> id, String view, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getVideoList(Async)");
        }

        return getVideoListCall(id, view, searchId, _callback);

    }

    /**
     * List videos
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param id One or more video IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return VideoDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public VideoDataList getVideoList(List<String> id, String view, String searchId) throws ApiException {
        ApiResponse<VideoDataList> localVarResp = getVideoListWithHttpInfo(id, view, searchId);
        return localVarResp.getData();
    }

    /**
     * List videos
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param id One or more video IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;VideoDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoDataList> getVideoListWithHttpInfo(List<String> id, String view, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getVideoListValidateBeforeCall(id, view, searchId, null);
        Type localVarReturnType = new TypeToken<VideoDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List videos (asynchronously)
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     * @param id One or more video IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoListAsync(List<String> id, String view, String searchId, final ApiCallback<VideoDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoListValidateBeforeCall(id, view, searchId, _callback);
        Type localVarReturnType = new TypeToken<VideoDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getVideoSuggestions
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of the suggestions (optional, default to 10)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoSuggestionsCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/search/suggestions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getVideoSuggestionsValidateBeforeCall(String query, Integer limit, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling getVideoSuggestions(Async)");
        }

        return getVideoSuggestionsCall(query, limit, _callback);

    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of the suggestions (optional, default to 10)
     * @return Suggestions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public Suggestions getVideoSuggestions(String query, Integer limit) throws ApiException {
        ApiResponse<Suggestions> localVarResp = getVideoSuggestionsWithHttpInfo(query, limit);
        return localVarResp.getData();
    }

    /**
     * Get suggestions for a search term
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of the suggestions (optional, default to 10)
     * @return ApiResponse&lt;Suggestions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Suggestions> getVideoSuggestionsWithHttpInfo(String query, Integer limit) throws ApiException {
        okhttp3.Call localVarCall = getVideoSuggestionsValidateBeforeCall(query, limit, null);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get suggestions for a search term (asynchronously)
     * This endpoint provides autocomplete suggestions for partial search terms.
     * @param query Search term for which you want keyword suggestions (required)
     * @param limit Limit the number of the suggestions (optional, default to 10)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getVideoSuggestionsAsync(String query, Integer limit, final ApiCallback<Suggestions> _callback) throws ApiException {

        okhttp3.Call localVarCall = getVideoSuggestionsValidateBeforeCall(query, limit, _callback);
        Type localVarReturnType = new TypeToken<Suggestions>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licenseVideos
     * @param licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId The subscription ID to use for licensing (optional)
     * @param size The size of the video to license (optional, default to web)
     * @param searchId The Search ID that led to this licensing event (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseVideosCall(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseVideoRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (subscriptionId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("subscription_id", subscriptionId));
        }

        if (size != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("size", size));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licenseVideosValidateBeforeCall(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseVideoRequest' is set
        if (licenseVideoRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseVideoRequest' when calling licenseVideos(Async)");
        }

        return licenseVideosCall(licenseVideoRequest, subscriptionId, size, searchId, _callback);

    }

    /**
     * License videos
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId The subscription ID to use for licensing (optional)
     * @param size The size of the video to license (optional, default to web)
     * @param searchId The Search ID that led to this licensing event (optional)
     * @return LicenseVideoResultDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseVideoResultDataList licenseVideos(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId) throws ApiException {
        ApiResponse<LicenseVideoResultDataList> localVarResp = licenseVideosWithHttpInfo(licenseVideoRequest, subscriptionId, size, searchId);
        return localVarResp.getData();
    }

    /**
     * License videos
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId The subscription ID to use for licensing (optional)
     * @param size The size of the video to license (optional, default to web)
     * @param searchId The Search ID that led to this licensing event (optional)
     * @return ApiResponse&lt;LicenseVideoResultDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseVideoResultDataList> licenseVideosWithHttpInfo(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId) throws ApiException {
        okhttp3.Call localVarCall = licenseVideosValidateBeforeCall(licenseVideoRequest, subscriptionId, size, searchId, null);
        Type localVarReturnType = new TypeToken<LicenseVideoResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * License videos (asynchronously)
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     * @param licenseVideoRequest List of videos to request licenses for and information about each license transaction; these values override the defaults in the query parameters (required)
     * @param subscriptionId The subscription ID to use for licensing (optional)
     * @param size The size of the video to license (optional, default to web)
     * @param searchId The Search ID that led to this licensing event (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licenseVideosAsync(LicenseVideoRequest licenseVideoRequest, String subscriptionId, String size, String searchId, final ApiCallback<LicenseVideoResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licenseVideosValidateBeforeCall(licenseVideoRequest, subscriptionId, size, searchId, _callback);
        Type localVarReturnType = new TypeToken<LicenseVideoResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listVideoCategories
     * @param language Language for the keywords and categories in the response (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVideoCategoriesCall(Language language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/categories";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listVideoCategoriesValidateBeforeCall(Language language, final ApiCallback _callback) throws ApiException {
        return listVideoCategoriesCall(language, _callback);

    }

    /**
     * List video categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @param language Language for the keywords and categories in the response (optional)
     * @return CategoryDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CategoryDataList listVideoCategories(Language language) throws ApiException {
        ApiResponse<CategoryDataList> localVarResp = listVideoCategoriesWithHttpInfo(language);
        return localVarResp.getData();
    }

    /**
     * List video categories
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @param language Language for the keywords and categories in the response (optional)
     * @return ApiResponse&lt;CategoryDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CategoryDataList> listVideoCategoriesWithHttpInfo(Language language) throws ApiException {
        okhttp3.Call localVarCall = listVideoCategoriesValidateBeforeCall(language, null);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List video categories (asynchronously)
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     * @param language Language for the keywords and categories in the response (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listVideoCategoriesAsync(Language language, final ApiCallback<CategoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listVideoCategoriesValidateBeforeCall(language, _callback);
        Type localVarReturnType = new TypeToken<CategoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameVideoCollection
     * @param id The ID of the collection to rename (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameVideoCollectionCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = collectionUpdateRequest;

        // create path and map variables
        String localVarPath = "/v2/videos/collections/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameVideoCollectionValidateBeforeCall(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renameVideoCollection(Async)");
        }

        // verify the required parameter 'collectionUpdateRequest' is set
        if (collectionUpdateRequest == null) {
            throw new ApiException("Missing the required parameter 'collectionUpdateRequest' when calling renameVideoCollection(Async)");
        }

        return renameVideoCollectionCall(id, collectionUpdateRequest, _callback);

    }

    /**
     * Rename video collections
     * This endpoint sets a new name for a collection.
     * @param id The ID of the collection to rename (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void renameVideoCollection(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        renameVideoCollectionWithHttpInfo(id, collectionUpdateRequest);
    }

    /**
     * Rename video collections
     * This endpoint sets a new name for a collection.
     * @param id The ID of the collection to rename (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> renameVideoCollectionWithHttpInfo(String id, CollectionUpdateRequest collectionUpdateRequest) throws ApiException {
        okhttp3.Call localVarCall = renameVideoCollectionValidateBeforeCall(id, collectionUpdateRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Rename video collections (asynchronously)
     * This endpoint sets a new name for a collection.
     * @param id The ID of the collection to rename (required)
     * @param collectionUpdateRequest The new name for the collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successfully updated collection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameVideoCollectionAsync(String id, CollectionUpdateRequest collectionUpdateRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameVideoCollectionValidateBeforeCall(id, collectionUpdateRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVideos
     * @param addedDate Show videos added on the specified date (optional)
     * @param addedDateStart Show videos added on or after the specified date (optional)
     * @param addedDateEnd Show videos added before the specified date (optional)
     * @param aspectRatio Show videos with the specified aspect ratio (optional)
     * @param category Show videos with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param contributor Show videos with the specified artist names or IDs (optional)
     * @param contributorCountry Show videos from contributors in one or more specified countries (optional)
     * @param duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds (optional)
     * @param durationFrom Show videos with the specified duration or longer in seconds (optional)
     * @param durationTo Show videos with the specified duration or shorter in seconds (optional)
     * @param fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second (optional)
     * @param fpsFrom Show videos with the specified frames per second or more (optional)
     * @param fpsTo Show videos with the specified frames per second or fewer (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only videos with the specified license or licenses (optional)
     * @param model Show videos with each of the specified models (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleAge Show videos that feature people of the specified age range (optional)
     * @param peopleEthnicity Show videos with people of the specified ethnicities (optional)
     * @param peopleGender Show videos with people with the specified gender (optional)
     * @param peopleNumber Show videos with the specified number of people (optional)
     * @param peopleModelReleased Show only videos of people with a signed model release (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term (optional)
     * @param resolution Show videos with the specified resolution (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by one of these categories (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVideosCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, BigDecimal fps, BigDecimal fpsFrom, BigDecimal fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/videos/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (aspectRatio != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("aspect_ratio", aspectRatio));
        }

        if (category != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("category", category));
        }

        if (contributor != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor", contributor));
        }

        if (contributorCountry != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "contributor_country", contributorCountry));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (durationFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_from", durationFrom));
        }

        if (durationTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_to", durationTo));
        }

        if (fps != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps", fps));
        }

        if (fpsFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps_from", fpsFrom));
        }

        if (fpsTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fps_to", fpsTo));
        }

        if (keywordSafeSearch != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("keyword_safe_search", keywordSafeSearch));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (license != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "license", license));
        }

        if (model != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "model", model));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (peopleAge != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_age", peopleAge));
        }

        if (peopleEthnicity != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "people_ethnicity", peopleEthnicity));
        }

        if (peopleGender != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_gender", peopleGender));
        }

        if (peopleNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_number", peopleNumber));
        }

        if (peopleModelReleased != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("people_model_released", peopleModelReleased));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (resolution != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("resolution", resolution));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVideosValidateBeforeCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, BigDecimal fps, BigDecimal fpsFrom, BigDecimal fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view, final ApiCallback _callback) throws ApiException {
        return searchVideosCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, _callback);

    }

    /**
     * Search for videos
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param addedDate Show videos added on the specified date (optional)
     * @param addedDateStart Show videos added on or after the specified date (optional)
     * @param addedDateEnd Show videos added before the specified date (optional)
     * @param aspectRatio Show videos with the specified aspect ratio (optional)
     * @param category Show videos with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param contributor Show videos with the specified artist names or IDs (optional)
     * @param contributorCountry Show videos from contributors in one or more specified countries (optional)
     * @param duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds (optional)
     * @param durationFrom Show videos with the specified duration or longer in seconds (optional)
     * @param durationTo Show videos with the specified duration or shorter in seconds (optional)
     * @param fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second (optional)
     * @param fpsFrom Show videos with the specified frames per second or more (optional)
     * @param fpsTo Show videos with the specified frames per second or fewer (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only videos with the specified license or licenses (optional)
     * @param model Show videos with each of the specified models (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleAge Show videos that feature people of the specified age range (optional)
     * @param peopleEthnicity Show videos with people of the specified ethnicities (optional)
     * @param peopleGender Show videos with people with the specified gender (optional)
     * @param peopleNumber Show videos with the specified number of people (optional)
     * @param peopleModelReleased Show only videos of people with a signed model release (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term (optional)
     * @param resolution Show videos with the specified resolution (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by one of these categories (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return VideoSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public VideoSearchResults searchVideos(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, BigDecimal fps, BigDecimal fpsFrom, BigDecimal fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view) throws ApiException {
        ApiResponse<VideoSearchResults> localVarResp = searchVideosWithHttpInfo(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view);
        return localVarResp.getData();
    }

    /**
     * Search for videos
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param addedDate Show videos added on the specified date (optional)
     * @param addedDateStart Show videos added on or after the specified date (optional)
     * @param addedDateEnd Show videos added before the specified date (optional)
     * @param aspectRatio Show videos with the specified aspect ratio (optional)
     * @param category Show videos with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param contributor Show videos with the specified artist names or IDs (optional)
     * @param contributorCountry Show videos from contributors in one or more specified countries (optional)
     * @param duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds (optional)
     * @param durationFrom Show videos with the specified duration or longer in seconds (optional)
     * @param durationTo Show videos with the specified duration or shorter in seconds (optional)
     * @param fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second (optional)
     * @param fpsFrom Show videos with the specified frames per second or more (optional)
     * @param fpsTo Show videos with the specified frames per second or fewer (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only videos with the specified license or licenses (optional)
     * @param model Show videos with each of the specified models (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleAge Show videos that feature people of the specified age range (optional)
     * @param peopleEthnicity Show videos with people of the specified ethnicities (optional)
     * @param peopleGender Show videos with people with the specified gender (optional)
     * @param peopleNumber Show videos with the specified number of people (optional)
     * @param peopleModelReleased Show only videos of people with a signed model release (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term (optional)
     * @param resolution Show videos with the specified resolution (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by one of these categories (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @return ApiResponse&lt;VideoSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<VideoSearchResults> searchVideosWithHttpInfo(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, BigDecimal fps, BigDecimal fpsFrom, BigDecimal fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVideosValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, null);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for videos (asynchronously)
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param addedDate Show videos added on the specified date (optional)
     * @param addedDateStart Show videos added on or after the specified date (optional)
     * @param addedDateEnd Show videos added before the specified date (optional)
     * @param aspectRatio Show videos with the specified aspect ratio (optional)
     * @param category Show videos with the specified Shutterstock-defined category; specify a category name or ID (optional)
     * @param contributor Show videos with the specified artist names or IDs (optional)
     * @param contributorCountry Show videos from contributors in one or more specified countries (optional)
     * @param duration (Deprecated; use duration_from and duration_to instead) Show videos with the specified duration in seconds (optional)
     * @param durationFrom Show videos with the specified duration or longer in seconds (optional)
     * @param durationTo Show videos with the specified duration or shorter in seconds (optional)
     * @param fps (Deprecated; use fps_from and fps_to instead) Show videos with the specified frames per second (optional)
     * @param fpsFrom Show videos with the specified frames per second or more (optional)
     * @param fpsTo Show videos with the specified frames per second or fewer (optional)
     * @param keywordSafeSearch Hide results with potentially unsafe keywords (optional, default to true)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param license Show only videos with the specified license or licenses (optional)
     * @param model Show videos with each of the specified models (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param peopleAge Show videos that feature people of the specified age range (optional)
     * @param peopleEthnicity Show videos with people of the specified ethnicities (optional)
     * @param peopleGender Show videos with people with the specified gender (optional)
     * @param peopleNumber Show videos with the specified number of people (optional)
     * @param peopleModelReleased Show only videos of people with a signed model release (optional)
     * @param query One or more search terms separated by spaces; you can use NOT to filter out videos that match a term (optional)
     * @param resolution Show videos with the specified resolution (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by one of these categories (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVideosAsync(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, String aspectRatio, String category, List<String> contributor, List<String> contributorCountry, Integer duration, Integer durationFrom, Integer durationTo, BigDecimal fps, BigDecimal fpsFrom, BigDecimal fpsTo, Boolean keywordSafeSearch, Language language, List<String> license, List<String> model, Integer page, Integer perPage, String peopleAge, List<String> peopleEthnicity, String peopleGender, Integer peopleNumber, Boolean peopleModelReleased, String query, String resolution, Boolean safe, String sort, String view, final ApiCallback<VideoSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVideosValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view, _callback);
        Type localVarReturnType = new TypeToken<VideoSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
