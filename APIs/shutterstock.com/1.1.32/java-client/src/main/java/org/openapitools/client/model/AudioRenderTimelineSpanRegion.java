/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.AudioRenderTimelineSpanRegionEndType;
import org.openapitools.client.model.AudioRenderTimelineSpanRegionKey;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * A period of music or silence, measured in beats
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioRenderTimelineSpanRegion {
  public static final String SERIALIZED_NAME_BEAT = "beat";
  @SerializedName(SERIALIZED_NAME_BEAT)
  private Integer beat;

  public static final String SERIALIZED_NAME_DESCRIPTOR = "descriptor";
  @SerializedName(SERIALIZED_NAME_DESCRIPTOR)
  private String descriptor;

  public static final String SERIALIZED_NAME_END_TYPE = "end_type";
  @SerializedName(SERIALIZED_NAME_END_TYPE)
  private AudioRenderTimelineSpanRegionEndType endType;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private BigDecimal id;

  public static final String SERIALIZED_NAME_KEY = "key";
  @SerializedName(SERIALIZED_NAME_KEY)
  private AudioRenderTimelineSpanRegionKey key;

  /**
   * The type of region
   */
  @JsonAdapter(RegionEnum.Adapter.class)
  public enum RegionEnum {
    MUSIC("music"),
    
    SILENCE("silence");

    private String value;

    RegionEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static RegionEnum fromValue(String value) {
      for (RegionEnum b : RegionEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<RegionEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final RegionEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public RegionEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return RegionEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      RegionEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_REGION = "region";
  @SerializedName(SERIALIZED_NAME_REGION)
  private RegionEnum region;

  public AudioRenderTimelineSpanRegion() {
  }

  public AudioRenderTimelineSpanRegion beat(Integer beat) {
    this.beat = beat;
    return this;
  }

  /**
   * The beat, relative to the span, at which the region object&#39;s music begins
   * @return beat
   */
  @javax.annotation.Nonnull
  public Integer getBeat() {
    return beat;
  }

  public void setBeat(Integer beat) {
    this.beat = beat;
  }


  public AudioRenderTimelineSpanRegion descriptor(String descriptor) {
    this.descriptor = descriptor;
    return this;
  }

  /**
   * The descriptor ID needed to compose the music
   * @return descriptor
   */
  @javax.annotation.Nonnull
  public String getDescriptor() {
    return descriptor;
  }

  public void setDescriptor(String descriptor) {
    this.descriptor = descriptor;
  }


  public AudioRenderTimelineSpanRegion endType(AudioRenderTimelineSpanRegionEndType endType) {
    this.endType = endType;
    return this;
  }

  /**
   * Get endType
   * @return endType
   */
  @javax.annotation.Nullable
  public AudioRenderTimelineSpanRegionEndType getEndType() {
    return endType;
  }

  public void setEndType(AudioRenderTimelineSpanRegionEndType endType) {
    this.endType = endType;
  }


  public AudioRenderTimelineSpanRegion id(BigDecimal id) {
    this.id = id;
    return this;
  }

  /**
   * An identifier which must be unique within the parent span
   * @return id
   */
  @javax.annotation.Nonnull
  public BigDecimal getId() {
    return id;
  }

  public void setId(BigDecimal id) {
    this.id = id;
  }


  public AudioRenderTimelineSpanRegion key(AudioRenderTimelineSpanRegionKey key) {
    this.key = key;
    return this;
  }

  /**
   * Get key
   * @return key
   */
  @javax.annotation.Nullable
  public AudioRenderTimelineSpanRegionKey getKey() {
    return key;
  }

  public void setKey(AudioRenderTimelineSpanRegionKey key) {
    this.key = key;
  }


  public AudioRenderTimelineSpanRegion region(RegionEnum region) {
    this.region = region;
    return this;
  }

  /**
   * The type of region
   * @return region
   */
  @javax.annotation.Nonnull
  public RegionEnum getRegion() {
    return region;
  }

  public void setRegion(RegionEnum region) {
    this.region = region;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioRenderTimelineSpanRegion audioRenderTimelineSpanRegion = (AudioRenderTimelineSpanRegion) o;
    return Objects.equals(this.beat, audioRenderTimelineSpanRegion.beat) &&
        Objects.equals(this.descriptor, audioRenderTimelineSpanRegion.descriptor) &&
        Objects.equals(this.endType, audioRenderTimelineSpanRegion.endType) &&
        Objects.equals(this.id, audioRenderTimelineSpanRegion.id) &&
        Objects.equals(this.key, audioRenderTimelineSpanRegion.key) &&
        Objects.equals(this.region, audioRenderTimelineSpanRegion.region);
  }

  @Override
  public int hashCode() {
    return Objects.hash(beat, descriptor, endType, id, key, region);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioRenderTimelineSpanRegion {\n");
    sb.append("    beat: ").append(toIndentedString(beat)).append("\n");
    sb.append("    descriptor: ").append(toIndentedString(descriptor)).append("\n");
    sb.append("    endType: ").append(toIndentedString(endType)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    key: ").append(toIndentedString(key)).append("\n");
    sb.append("    region: ").append(toIndentedString(region)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("beat");
    openapiFields.add("descriptor");
    openapiFields.add("end_type");
    openapiFields.add("id");
    openapiFields.add("key");
    openapiFields.add("region");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("beat");
    openapiRequiredFields.add("descriptor");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("region");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioRenderTimelineSpanRegion
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioRenderTimelineSpanRegion.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioRenderTimelineSpanRegion is not found in the empty JSON string", AudioRenderTimelineSpanRegion.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioRenderTimelineSpanRegion.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioRenderTimelineSpanRegion` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : AudioRenderTimelineSpanRegion.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("descriptor").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `descriptor` to be a primitive type in the JSON string but got `%s`", jsonObj.get("descriptor").toString()));
      }
      // validate the optional field `end_type`
      if (jsonObj.get("end_type") != null && !jsonObj.get("end_type").isJsonNull()) {
        AudioRenderTimelineSpanRegionEndType.validateJsonElement(jsonObj.get("end_type"));
      }
      // validate the optional field `key`
      if (jsonObj.get("key") != null && !jsonObj.get("key").isJsonNull()) {
        AudioRenderTimelineSpanRegionKey.validateJsonElement(jsonObj.get("key"));
      }
      if (!jsonObj.get("region").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `region` to be a primitive type in the JSON string but got `%s`", jsonObj.get("region").toString()));
      }
      // validate the required field `region`
      RegionEnum.validateJsonElement(jsonObj.get("region"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioRenderTimelineSpanRegion.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioRenderTimelineSpanRegion' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioRenderTimelineSpanRegion> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioRenderTimelineSpanRegion.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioRenderTimelineSpanRegion>() {
           @Override
           public void write(JsonWriter out, AudioRenderTimelineSpanRegion value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioRenderTimelineSpanRegion read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioRenderTimelineSpanRegion given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioRenderTimelineSpanRegion
   * @throws IOException if the JSON string is invalid with respect to AudioRenderTimelineSpanRegion
   */
  public static AudioRenderTimelineSpanRegion fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioRenderTimelineSpanRegion.class);
  }

  /**
   * Convert an instance of AudioRenderTimelineSpanRegion to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

