/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Url;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The response to a licensing request for an sound effects
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseSFXResult {
  public static final String SERIALIZED_NAME_ALLOTMENT_CHARGE = "allotment_charge";
  @SerializedName(SERIALIZED_NAME_ALLOTMENT_CHARGE)
  private Integer allotmentCharge;

  public static final String SERIALIZED_NAME_DOWNLOAD = "download";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD)
  private Url download;

  public static final String SERIALIZED_NAME_ERROR = "error";
  @SerializedName(SERIALIZED_NAME_ERROR)
  private String error;

  public static final String SERIALIZED_NAME_LICENSE_ID = "license_id";
  @SerializedName(SERIALIZED_NAME_LICENSE_ID)
  private String licenseId;

  public static final String SERIALIZED_NAME_SFX_ID = "sfx_id";
  @SerializedName(SERIALIZED_NAME_SFX_ID)
  private String sfxId;

  public LicenseSFXResult() {
  }

  public LicenseSFXResult allotmentCharge(Integer allotmentCharge) {
    this.allotmentCharge = allotmentCharge;
    return this;
  }

  /**
   * Number of credits that this licensing event used
   * @return allotmentCharge
   */
  @javax.annotation.Nullable
  public Integer getAllotmentCharge() {
    return allotmentCharge;
  }

  public void setAllotmentCharge(Integer allotmentCharge) {
    this.allotmentCharge = allotmentCharge;
  }


  public LicenseSFXResult download(Url download) {
    this.download = download;
    return this;
  }

  /**
   * Get download
   * @return download
   */
  @javax.annotation.Nullable
  public Url getDownload() {
    return download;
  }

  public void setDownload(Url download) {
    this.download = download;
  }


  public LicenseSFXResult error(String error) {
    this.error = error;
    return this;
  }

  /**
   * Error message, appears only if there was an error
   * @return error
   */
  @javax.annotation.Nullable
  public String getError() {
    return error;
  }

  public void setError(String error) {
    this.error = error;
  }


  public LicenseSFXResult licenseId(String licenseId) {
    this.licenseId = licenseId;
    return this;
  }

  /**
   * ID of the license event
   * @return licenseId
   */
  @javax.annotation.Nullable
  public String getLicenseId() {
    return licenseId;
  }

  public void setLicenseId(String licenseId) {
    this.licenseId = licenseId;
  }


  public LicenseSFXResult sfxId(String sfxId) {
    this.sfxId = sfxId;
    return this;
  }

  /**
   * Sound effects ID that was licensed
   * @return sfxId
   */
  @javax.annotation.Nonnull
  public String getSfxId() {
    return sfxId;
  }

  public void setSfxId(String sfxId) {
    this.sfxId = sfxId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseSFXResult licenseSFXResult = (LicenseSFXResult) o;
    return Objects.equals(this.allotmentCharge, licenseSFXResult.allotmentCharge) &&
        Objects.equals(this.download, licenseSFXResult.download) &&
        Objects.equals(this.error, licenseSFXResult.error) &&
        Objects.equals(this.licenseId, licenseSFXResult.licenseId) &&
        Objects.equals(this.sfxId, licenseSFXResult.sfxId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allotmentCharge, download, error, licenseId, sfxId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseSFXResult {\n");
    sb.append("    allotmentCharge: ").append(toIndentedString(allotmentCharge)).append("\n");
    sb.append("    download: ").append(toIndentedString(download)).append("\n");
    sb.append("    error: ").append(toIndentedString(error)).append("\n");
    sb.append("    licenseId: ").append(toIndentedString(licenseId)).append("\n");
    sb.append("    sfxId: ").append(toIndentedString(sfxId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allotment_charge");
    openapiFields.add("download");
    openapiFields.add("error");
    openapiFields.add("license_id");
    openapiFields.add("sfx_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("sfx_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseSFXResult
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseSFXResult.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseSFXResult is not found in the empty JSON string", LicenseSFXResult.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseSFXResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseSFXResult` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseSFXResult.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `download`
      if (jsonObj.get("download") != null && !jsonObj.get("download").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("download"));
      }
      if ((jsonObj.get("error") != null && !jsonObj.get("error").isJsonNull()) && !jsonObj.get("error").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `error` to be a primitive type in the JSON string but got `%s`", jsonObj.get("error").toString()));
      }
      if ((jsonObj.get("license_id") != null && !jsonObj.get("license_id").isJsonNull()) && !jsonObj.get("license_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license_id").toString()));
      }
      if (!jsonObj.get("sfx_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sfx_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sfx_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseSFXResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseSFXResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseSFXResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseSFXResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseSFXResult>() {
           @Override
           public void write(JsonWriter out, LicenseSFXResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseSFXResult read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseSFXResult given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseSFXResult
   * @throws IOException if the JSON string is invalid with respect to LicenseSFXResult
   */
  public static LicenseSFXResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseSFXResult.class);
  }

  /**
   * Convert an instance of LicenseSFXResult to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

