/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;
import org.openapitools.client.model.Cookie;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Data required to license an image
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class LicenseImageVector {
  public static final String SERIALIZED_NAME_AUTH_COOKIE = "auth_cookie";
  @SerializedName(SERIALIZED_NAME_AUTH_COOKIE)
  private Cookie authCookie;

  public static final String SERIALIZED_NAME_EDITORIAL_ACKNOWLEDGEMENT = "editorial_acknowledgement";
  @SerializedName(SERIALIZED_NAME_EDITORIAL_ACKNOWLEDGEMENT)
  private Boolean editorialAcknowledgement;

  /**
   * (Deprecated) Image format to download
   */
  @JsonAdapter(FormatEnum.Adapter.class)
  public enum FormatEnum {
    EPS("eps");

    private String value;

    FormatEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static FormatEnum fromValue(String value) {
      for (FormatEnum b : FormatEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<FormatEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final FormatEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public FormatEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return FormatEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      FormatEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_FORMAT = "format";
  @SerializedName(SERIALIZED_NAME_FORMAT)
  private FormatEnum format = FormatEnum.EPS;

  public static final String SERIALIZED_NAME_IMAGE_ID = "image_id";
  @SerializedName(SERIALIZED_NAME_IMAGE_ID)
  private String imageId;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private BigDecimal price;

  public static final String SERIALIZED_NAME_SEARCH_ID = "search_id";
  @SerializedName(SERIALIZED_NAME_SEARCH_ID)
  private String searchId;

  public static final String SERIALIZED_NAME_SHOW_MODAL = "show_modal";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_SHOW_MODAL)
  private Boolean showModal;

  /**
   * Image size to download
   */
  @JsonAdapter(SizeEnum.Adapter.class)
  public enum SizeEnum {
    VECTOR("vector");

    private String value;

    SizeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static SizeEnum fromValue(String value) {
      for (SizeEnum b : SizeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<SizeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final SizeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public SizeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return SizeEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      SizeEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_SIZE = "size";
  @SerializedName(SERIALIZED_NAME_SIZE)
  private SizeEnum size;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_VERIFICATION_CODE = "verification_code";
  @Deprecated
  @SerializedName(SERIALIZED_NAME_VERIFICATION_CODE)
  private String verificationCode;

  public LicenseImageVector() {
  }

  public LicenseImageVector authCookie(Cookie authCookie) {
    this.authCookie = authCookie;
    return this;
  }

  /**
   * Get authCookie
   * @return authCookie
   */
  @javax.annotation.Nullable
  public Cookie getAuthCookie() {
    return authCookie;
  }

  public void setAuthCookie(Cookie authCookie) {
    this.authCookie = authCookie;
  }


  public LicenseImageVector editorialAcknowledgement(Boolean editorialAcknowledgement) {
    this.editorialAcknowledgement = editorialAcknowledgement;
    return this;
  }

  /**
   * Set to true to acknowledge the editorial agreement
   * @return editorialAcknowledgement
   */
  @javax.annotation.Nullable
  public Boolean getEditorialAcknowledgement() {
    return editorialAcknowledgement;
  }

  public void setEditorialAcknowledgement(Boolean editorialAcknowledgement) {
    this.editorialAcknowledgement = editorialAcknowledgement;
  }


  public LicenseImageVector format(FormatEnum format) {
    this.format = format;
    return this;
  }

  /**
   * (Deprecated) Image format to download
   * @return format
   */
  @javax.annotation.Nullable
  public FormatEnum getFormat() {
    return format;
  }

  public void setFormat(FormatEnum format) {
    this.format = format;
  }


  public LicenseImageVector imageId(String imageId) {
    this.imageId = imageId;
    return this;
  }

  /**
   * Image ID
   * @return imageId
   */
  @javax.annotation.Nonnull
  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }


  public LicenseImageVector metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public LicenseImageVector price(BigDecimal price) {
    this.price = price;
    return this;
  }

  /**
   * For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34
   * @return price
   */
  @javax.annotation.Nullable
  public BigDecimal getPrice() {
    return price;
  }

  public void setPrice(BigDecimal price) {
    this.price = price;
  }


  public LicenseImageVector searchId(String searchId) {
    this.searchId = searchId;
    return this;
  }

  /**
   * ID of the search that led to this licensing transaction
   * @return searchId
   */
  @javax.annotation.Nullable
  public String getSearchId() {
    return searchId;
  }

  public void setSearchId(String searchId) {
    this.searchId = searchId;
  }


  @Deprecated
  public LicenseImageVector showModal(Boolean showModal) {
    this.showModal = showModal;
    return this;
  }

  /**
   * (Deprecated)
   * @return showModal
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public Boolean getShowModal() {
    return showModal;
  }

  @Deprecated
  public void setShowModal(Boolean showModal) {
    this.showModal = showModal;
  }


  public LicenseImageVector size(SizeEnum size) {
    this.size = size;
    return this;
  }

  /**
   * Image size to download
   * @return size
   */
  @javax.annotation.Nullable
  public SizeEnum getSize() {
    return size;
  }

  public void setSize(SizeEnum size) {
    this.size = size;
  }


  public LicenseImageVector subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * ID of the subscription to use for the download.
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  @Deprecated
  public LicenseImageVector verificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
    return this;
  }

  /**
   * (Deprecated)
   * @return verificationCode
   * @deprecated
   */
  @Deprecated
  @javax.annotation.Nullable
  public String getVerificationCode() {
    return verificationCode;
  }

  @Deprecated
  public void setVerificationCode(String verificationCode) {
    this.verificationCode = verificationCode;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LicenseImageVector licenseImageVector = (LicenseImageVector) o;
    return Objects.equals(this.authCookie, licenseImageVector.authCookie) &&
        Objects.equals(this.editorialAcknowledgement, licenseImageVector.editorialAcknowledgement) &&
        Objects.equals(this.format, licenseImageVector.format) &&
        Objects.equals(this.imageId, licenseImageVector.imageId) &&
        Objects.equals(this.metadata, licenseImageVector.metadata) &&
        Objects.equals(this.price, licenseImageVector.price) &&
        Objects.equals(this.searchId, licenseImageVector.searchId) &&
        Objects.equals(this.showModal, licenseImageVector.showModal) &&
        Objects.equals(this.size, licenseImageVector.size) &&
        Objects.equals(this.subscriptionId, licenseImageVector.subscriptionId) &&
        Objects.equals(this.verificationCode, licenseImageVector.verificationCode);
  }

  @Override
  public int hashCode() {
    return Objects.hash(authCookie, editorialAcknowledgement, format, imageId, metadata, price, searchId, showModal, size, subscriptionId, verificationCode);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LicenseImageVector {\n");
    sb.append("    authCookie: ").append(toIndentedString(authCookie)).append("\n");
    sb.append("    editorialAcknowledgement: ").append(toIndentedString(editorialAcknowledgement)).append("\n");
    sb.append("    format: ").append(toIndentedString(format)).append("\n");
    sb.append("    imageId: ").append(toIndentedString(imageId)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    searchId: ").append(toIndentedString(searchId)).append("\n");
    sb.append("    showModal: ").append(toIndentedString(showModal)).append("\n");
    sb.append("    size: ").append(toIndentedString(size)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    verificationCode: ").append(toIndentedString(verificationCode)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("auth_cookie");
    openapiFields.add("editorial_acknowledgement");
    openapiFields.add("format");
    openapiFields.add("image_id");
    openapiFields.add("metadata");
    openapiFields.add("price");
    openapiFields.add("search_id");
    openapiFields.add("show_modal");
    openapiFields.add("size");
    openapiFields.add("subscription_id");
    openapiFields.add("verification_code");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("image_id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to LicenseImageVector
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!LicenseImageVector.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in LicenseImageVector is not found in the empty JSON string", LicenseImageVector.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!LicenseImageVector.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LicenseImageVector` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LicenseImageVector.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `auth_cookie`
      if (jsonObj.get("auth_cookie") != null && !jsonObj.get("auth_cookie").isJsonNull()) {
        Cookie.validateJsonElement(jsonObj.get("auth_cookie"));
      }
      if ((jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) && !jsonObj.get("format").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `format` to be a primitive type in the JSON string but got `%s`", jsonObj.get("format").toString()));
      }
      // validate the optional field `format`
      if (jsonObj.get("format") != null && !jsonObj.get("format").isJsonNull()) {
        FormatEnum.validateJsonElement(jsonObj.get("format"));
      }
      if (!jsonObj.get("image_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image_id").toString()));
      }
      if ((jsonObj.get("search_id") != null && !jsonObj.get("search_id").isJsonNull()) && !jsonObj.get("search_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `search_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("search_id").toString()));
      }
      if ((jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) && !jsonObj.get("size").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `size` to be a primitive type in the JSON string but got `%s`", jsonObj.get("size").toString()));
      }
      // validate the optional field `size`
      if (jsonObj.get("size") != null && !jsonObj.get("size").isJsonNull()) {
        SizeEnum.validateJsonElement(jsonObj.get("size"));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      if ((jsonObj.get("verification_code") != null && !jsonObj.get("verification_code").isJsonNull()) && !jsonObj.get("verification_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `verification_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("verification_code").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LicenseImageVector.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LicenseImageVector' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LicenseImageVector> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LicenseImageVector.class));

       return (TypeAdapter<T>) new TypeAdapter<LicenseImageVector>() {
           @Override
           public void write(JsonWriter out, LicenseImageVector value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LicenseImageVector read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of LicenseImageVector given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of LicenseImageVector
   * @throws IOException if the JSON string is invalid with respect to LicenseImageVector
   */
  public static LicenseImageVector fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LicenseImageVector.class);
  }

  /**
   * Convert an instance of LicenseImageVector to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

