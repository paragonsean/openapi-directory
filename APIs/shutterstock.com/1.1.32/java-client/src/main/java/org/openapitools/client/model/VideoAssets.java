/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.Urls;
import org.openapitools.client.model.VideoSizeDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Video asset information
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class VideoAssets {
  public static final String SERIALIZED_NAME_4K = "4k";
  @SerializedName(SERIALIZED_NAME_4K)
  private VideoSizeDetails _4k;

  public static final String SERIALIZED_NAME_HD = "hd";
  @SerializedName(SERIALIZED_NAME_HD)
  private VideoSizeDetails hd;

  public static final String SERIALIZED_NAME_PREVIEW_JPG = "preview_jpg";
  @SerializedName(SERIALIZED_NAME_PREVIEW_JPG)
  private Url previewJpg;

  public static final String SERIALIZED_NAME_PREVIEW_MP4 = "preview_mp4";
  @SerializedName(SERIALIZED_NAME_PREVIEW_MP4)
  private Url previewMp4;

  public static final String SERIALIZED_NAME_PREVIEW_WEBM = "preview_webm";
  @SerializedName(SERIALIZED_NAME_PREVIEW_WEBM)
  private Url previewWebm;

  public static final String SERIALIZED_NAME_SD = "sd";
  @SerializedName(SERIALIZED_NAME_SD)
  private VideoSizeDetails sd;

  public static final String SERIALIZED_NAME_THUMB_JPG = "thumb_jpg";
  @SerializedName(SERIALIZED_NAME_THUMB_JPG)
  private Url thumbJpg;

  public static final String SERIALIZED_NAME_THUMB_JPGS = "thumb_jpgs";
  @SerializedName(SERIALIZED_NAME_THUMB_JPGS)
  private Urls thumbJpgs;

  public static final String SERIALIZED_NAME_THUMB_MP4 = "thumb_mp4";
  @SerializedName(SERIALIZED_NAME_THUMB_MP4)
  private Url thumbMp4;

  public static final String SERIALIZED_NAME_THUMB_WEBM = "thumb_webm";
  @SerializedName(SERIALIZED_NAME_THUMB_WEBM)
  private Url thumbWebm;

  public static final String SERIALIZED_NAME_WEB = "web";
  @SerializedName(SERIALIZED_NAME_WEB)
  private VideoSizeDetails web;

  public VideoAssets() {
  }

  public VideoAssets _4k(VideoSizeDetails _4k) {
    this._4k = _4k;
    return this;
  }

  /**
   * Get _4k
   * @return _4k
   */
  @javax.annotation.Nullable
  public VideoSizeDetails get4k() {
    return _4k;
  }

  public void set4k(VideoSizeDetails _4k) {
    this._4k = _4k;
  }


  public VideoAssets hd(VideoSizeDetails hd) {
    this.hd = hd;
    return this;
  }

  /**
   * Get hd
   * @return hd
   */
  @javax.annotation.Nullable
  public VideoSizeDetails getHd() {
    return hd;
  }

  public void setHd(VideoSizeDetails hd) {
    this.hd = hd;
  }


  public VideoAssets previewJpg(Url previewJpg) {
    this.previewJpg = previewJpg;
    return this;
  }

  /**
   * Get previewJpg
   * @return previewJpg
   */
  @javax.annotation.Nullable
  public Url getPreviewJpg() {
    return previewJpg;
  }

  public void setPreviewJpg(Url previewJpg) {
    this.previewJpg = previewJpg;
  }


  public VideoAssets previewMp4(Url previewMp4) {
    this.previewMp4 = previewMp4;
    return this;
  }

  /**
   * Get previewMp4
   * @return previewMp4
   */
  @javax.annotation.Nullable
  public Url getPreviewMp4() {
    return previewMp4;
  }

  public void setPreviewMp4(Url previewMp4) {
    this.previewMp4 = previewMp4;
  }


  public VideoAssets previewWebm(Url previewWebm) {
    this.previewWebm = previewWebm;
    return this;
  }

  /**
   * Get previewWebm
   * @return previewWebm
   */
  @javax.annotation.Nullable
  public Url getPreviewWebm() {
    return previewWebm;
  }

  public void setPreviewWebm(Url previewWebm) {
    this.previewWebm = previewWebm;
  }


  public VideoAssets sd(VideoSizeDetails sd) {
    this.sd = sd;
    return this;
  }

  /**
   * Get sd
   * @return sd
   */
  @javax.annotation.Nullable
  public VideoSizeDetails getSd() {
    return sd;
  }

  public void setSd(VideoSizeDetails sd) {
    this.sd = sd;
  }


  public VideoAssets thumbJpg(Url thumbJpg) {
    this.thumbJpg = thumbJpg;
    return this;
  }

  /**
   * Get thumbJpg
   * @return thumbJpg
   */
  @javax.annotation.Nullable
  public Url getThumbJpg() {
    return thumbJpg;
  }

  public void setThumbJpg(Url thumbJpg) {
    this.thumbJpg = thumbJpg;
  }


  public VideoAssets thumbJpgs(Urls thumbJpgs) {
    this.thumbJpgs = thumbJpgs;
    return this;
  }

  /**
   * Get thumbJpgs
   * @return thumbJpgs
   */
  @javax.annotation.Nullable
  public Urls getThumbJpgs() {
    return thumbJpgs;
  }

  public void setThumbJpgs(Urls thumbJpgs) {
    this.thumbJpgs = thumbJpgs;
  }


  public VideoAssets thumbMp4(Url thumbMp4) {
    this.thumbMp4 = thumbMp4;
    return this;
  }

  /**
   * Get thumbMp4
   * @return thumbMp4
   */
  @javax.annotation.Nullable
  public Url getThumbMp4() {
    return thumbMp4;
  }

  public void setThumbMp4(Url thumbMp4) {
    this.thumbMp4 = thumbMp4;
  }


  public VideoAssets thumbWebm(Url thumbWebm) {
    this.thumbWebm = thumbWebm;
    return this;
  }

  /**
   * Get thumbWebm
   * @return thumbWebm
   */
  @javax.annotation.Nullable
  public Url getThumbWebm() {
    return thumbWebm;
  }

  public void setThumbWebm(Url thumbWebm) {
    this.thumbWebm = thumbWebm;
  }


  public VideoAssets web(VideoSizeDetails web) {
    this.web = web;
    return this;
  }

  /**
   * Get web
   * @return web
   */
  @javax.annotation.Nullable
  public VideoSizeDetails getWeb() {
    return web;
  }

  public void setWeb(VideoSizeDetails web) {
    this.web = web;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    VideoAssets videoAssets = (VideoAssets) o;
    return Objects.equals(this._4k, videoAssets._4k) &&
        Objects.equals(this.hd, videoAssets.hd) &&
        Objects.equals(this.previewJpg, videoAssets.previewJpg) &&
        Objects.equals(this.previewMp4, videoAssets.previewMp4) &&
        Objects.equals(this.previewWebm, videoAssets.previewWebm) &&
        Objects.equals(this.sd, videoAssets.sd) &&
        Objects.equals(this.thumbJpg, videoAssets.thumbJpg) &&
        Objects.equals(this.thumbJpgs, videoAssets.thumbJpgs) &&
        Objects.equals(this.thumbMp4, videoAssets.thumbMp4) &&
        Objects.equals(this.thumbWebm, videoAssets.thumbWebm) &&
        Objects.equals(this.web, videoAssets.web);
  }

  @Override
  public int hashCode() {
    return Objects.hash(_4k, hd, previewJpg, previewMp4, previewWebm, sd, thumbJpg, thumbJpgs, thumbMp4, thumbWebm, web);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class VideoAssets {\n");
    sb.append("    _4k: ").append(toIndentedString(_4k)).append("\n");
    sb.append("    hd: ").append(toIndentedString(hd)).append("\n");
    sb.append("    previewJpg: ").append(toIndentedString(previewJpg)).append("\n");
    sb.append("    previewMp4: ").append(toIndentedString(previewMp4)).append("\n");
    sb.append("    previewWebm: ").append(toIndentedString(previewWebm)).append("\n");
    sb.append("    sd: ").append(toIndentedString(sd)).append("\n");
    sb.append("    thumbJpg: ").append(toIndentedString(thumbJpg)).append("\n");
    sb.append("    thumbJpgs: ").append(toIndentedString(thumbJpgs)).append("\n");
    sb.append("    thumbMp4: ").append(toIndentedString(thumbMp4)).append("\n");
    sb.append("    thumbWebm: ").append(toIndentedString(thumbWebm)).append("\n");
    sb.append("    web: ").append(toIndentedString(web)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("4k");
    openapiFields.add("hd");
    openapiFields.add("preview_jpg");
    openapiFields.add("preview_mp4");
    openapiFields.add("preview_webm");
    openapiFields.add("sd");
    openapiFields.add("thumb_jpg");
    openapiFields.add("thumb_jpgs");
    openapiFields.add("thumb_mp4");
    openapiFields.add("thumb_webm");
    openapiFields.add("web");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to VideoAssets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!VideoAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in VideoAssets is not found in the empty JSON string", VideoAssets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!VideoAssets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `VideoAssets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `4k`
      if (jsonObj.get("4k") != null && !jsonObj.get("4k").isJsonNull()) {
        VideoSizeDetails.validateJsonElement(jsonObj.get("4k"));
      }
      // validate the optional field `hd`
      if (jsonObj.get("hd") != null && !jsonObj.get("hd").isJsonNull()) {
        VideoSizeDetails.validateJsonElement(jsonObj.get("hd"));
      }
      // validate the optional field `preview_jpg`
      if (jsonObj.get("preview_jpg") != null && !jsonObj.get("preview_jpg").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("preview_jpg"));
      }
      // validate the optional field `preview_mp4`
      if (jsonObj.get("preview_mp4") != null && !jsonObj.get("preview_mp4").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("preview_mp4"));
      }
      // validate the optional field `preview_webm`
      if (jsonObj.get("preview_webm") != null && !jsonObj.get("preview_webm").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("preview_webm"));
      }
      // validate the optional field `sd`
      if (jsonObj.get("sd") != null && !jsonObj.get("sd").isJsonNull()) {
        VideoSizeDetails.validateJsonElement(jsonObj.get("sd"));
      }
      // validate the optional field `thumb_jpg`
      if (jsonObj.get("thumb_jpg") != null && !jsonObj.get("thumb_jpg").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("thumb_jpg"));
      }
      // validate the optional field `thumb_jpgs`
      if (jsonObj.get("thumb_jpgs") != null && !jsonObj.get("thumb_jpgs").isJsonNull()) {
        Urls.validateJsonElement(jsonObj.get("thumb_jpgs"));
      }
      // validate the optional field `thumb_mp4`
      if (jsonObj.get("thumb_mp4") != null && !jsonObj.get("thumb_mp4").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("thumb_mp4"));
      }
      // validate the optional field `thumb_webm`
      if (jsonObj.get("thumb_webm") != null && !jsonObj.get("thumb_webm").isJsonNull()) {
        Url.validateJsonElement(jsonObj.get("thumb_webm"));
      }
      // validate the optional field `web`
      if (jsonObj.get("web") != null && !jsonObj.get("web").isJsonNull()) {
        VideoSizeDetails.validateJsonElement(jsonObj.get("web"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!VideoAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'VideoAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<VideoAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(VideoAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<VideoAssets>() {
           @Override
           public void write(JsonWriter out, VideoAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public VideoAssets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of VideoAssets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of VideoAssets
   * @throws IOException if the JSON string is invalid with respect to VideoAssets
   */
  public static VideoAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, VideoAssets.class);
  }

  /**
   * Convert an instance of VideoAssets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

