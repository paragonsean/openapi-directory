/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.LicenseSFXRequest;
import org.openapitools.client.model.LicenseSFXResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.SFX;
import org.openapitools.client.model.SFXDataList;
import org.openapitools.client.model.SFXSearchResults;
import org.openapitools.client.model.SfxUrl;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SoundEffectsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SoundEffectsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SoundEffectsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for downloadSfx
     * @param id License ID (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadSfxCall(String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/licenses/{id}/downloads"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call downloadSfxValidateBeforeCall(String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling downloadSfx(Async)");
        }

        return downloadSfxCall(id, _callback);

    }

    /**
     * Download sound effects
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @return SfxUrl
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SfxUrl downloadSfx(String id) throws ApiException {
        ApiResponse<SfxUrl> localVarResp = downloadSfxWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Download sound effects
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @return ApiResponse&lt;SfxUrl&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SfxUrl> downloadSfxWithHttpInfo(String id) throws ApiException {
        okhttp3.Call localVarCall = downloadSfxValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<SfxUrl>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Download sound effects (asynchronously)
     * This endpoint redownloads sound effects that you have already received a license for. The download links in the response are valid for 8 hours.
     * @param id License ID (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call downloadSfxAsync(String id, final ApiCallback<SfxUrl> _callback) throws ApiException {

        okhttp3.Call localVarCall = downloadSfxValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<SfxUrl>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSfxDetails
     * @param id Audio track ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSfxDetailsCall(Integer id, Language language, String view, String library, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/{id}"
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSfxDetailsValidateBeforeCall(Integer id, Language language, String view, String library, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSfxDetails(Async)");
        }

        return getSfxDetailsCall(id, language, view, library, searchId, _callback);

    }

    /**
     * Get details about sound effects
     * This endpoint shows information about a sound effect.
     * @param id Audio track ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return SFX
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public SFX getSfxDetails(Integer id, Language language, String view, String library, String searchId) throws ApiException {
        ApiResponse<SFX> localVarResp = getSfxDetailsWithHttpInfo(id, language, view, library, searchId);
        return localVarResp.getData();
    }

    /**
     * Get details about sound effects
     * This endpoint shows information about a sound effect.
     * @param id Audio track ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;SFX&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFX> getSfxDetailsWithHttpInfo(Integer id, Language language, String view, String library, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getSfxDetailsValidateBeforeCall(id, language, view, library, searchId, null);
        Type localVarReturnType = new TypeToken<SFX>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about sound effects (asynchronously)
     * This endpoint shows information about a sound effect.
     * @param id Audio track ID (required)
     * @param language Language for the keywords and categories in the response (optional)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSfxDetailsAsync(Integer id, Language language, String view, String library, String searchId, final ApiCallback<SFX> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSfxDetailsValidateBeforeCall(id, language, view, library, searchId, _callback);
        Type localVarReturnType = new TypeToken<SFX>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSfxLicenseList
     * @param sfxId Show licenses for the specified sound effects ID (optional)
     * @param license Show sound effects that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param licenseId Filter by the license ID (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSfxLicenseListCall(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sfxId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sfx_id", sfxId));
        }

        if (license != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license", license));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (username != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("username", username));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (licenseId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("license_id", licenseId));
        }

        if (downloadAvailability != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("download_availability", downloadAvailability));
        }

        if (teamHistory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("team_history", teamHistory));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSfxLicenseListValidateBeforeCall(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory, final ApiCallback _callback) throws ApiException {
        return getSfxLicenseListCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, _callback);

    }

    /**
     * List sound effects licenses
     * This endpoint lists existing licenses.
     * @param sfxId Show licenses for the specified sound effects ID (optional)
     * @param license Show sound effects that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param licenseId Filter by the license ID (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return DownloadHistoryDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public DownloadHistoryDataList getSfxLicenseList(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory) throws ApiException {
        ApiResponse<DownloadHistoryDataList> localVarResp = getSfxLicenseListWithHttpInfo(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory);
        return localVarResp.getData();
    }

    /**
     * List sound effects licenses
     * This endpoint lists existing licenses.
     * @param sfxId Show licenses for the specified sound effects ID (optional)
     * @param license Show sound effects that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param licenseId Filter by the license ID (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @return ApiResponse&lt;DownloadHistoryDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DownloadHistoryDataList> getSfxLicenseListWithHttpInfo(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory) throws ApiException {
        okhttp3.Call localVarCall = getSfxLicenseListValidateBeforeCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, null);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List sound effects licenses (asynchronously)
     * This endpoint lists existing licenses.
     * @param sfxId Show licenses for the specified sound effects ID (optional)
     * @param license Show sound effects that are available with the specified license, such as &#x60;standard&#x60; or &#x60;enhanced&#x60;; prepending a &#x60;-&#x60; sign excludes results from that license (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort order (optional, default to newest)
     * @param username Filter licenses by username of licensee (optional)
     * @param startDate Show licenses created on or after the specified date (optional)
     * @param endDate Show licenses created before the specified date (optional)
     * @param licenseId Filter by the license ID (optional)
     * @param downloadAvailability Filter licenses by download availability (optional, default to all)
     * @param teamHistory Set to true to see license history for all members of your team. (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSfxLicenseListAsync(String sfxId, String license, Integer page, Integer perPage, String sort, String username, OffsetDateTime startDate, OffsetDateTime endDate, String licenseId, String downloadAvailability, Boolean teamHistory, final ApiCallback<DownloadHistoryDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSfxLicenseListValidateBeforeCall(sfxId, license, page, perPage, sort, username, startDate, endDate, licenseId, downloadAvailability, teamHistory, _callback);
        Type localVarReturnType = new TypeToken<DownloadHistoryDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getSfxListDetails
     * @param id One or more sound effect IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Language for the keywords and categories in the response (optional)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSfxListDetailsCall(List<String> id, String view, Language language, String library, String searchId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (library != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("library", library));
        }

        if (searchId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("search_id", searchId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSfxListDetailsValidateBeforeCall(List<String> id, String view, Language language, String library, String searchId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getSfxListDetails(Async)");
        }

        return getSfxListDetailsCall(id, view, language, library, searchId, _callback);

    }

    /**
     * List details about sound effects
     * This endpoint shows information about sound effects.
     * @param id One or more sound effect IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Language for the keywords and categories in the response (optional)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return SFXDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public SFXDataList getSfxListDetails(List<String> id, String view, Language language, String library, String searchId) throws ApiException {
        ApiResponse<SFXDataList> localVarResp = getSfxListDetailsWithHttpInfo(id, view, language, library, searchId);
        return localVarResp.getData();
    }

    /**
     * List details about sound effects
     * This endpoint shows information about sound effects.
     * @param id One or more sound effect IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Language for the keywords and categories in the response (optional)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @return ApiResponse&lt;SFXDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFXDataList> getSfxListDetailsWithHttpInfo(List<String> id, String view, Language language, String library, String searchId) throws ApiException {
        okhttp3.Call localVarCall = getSfxListDetailsValidateBeforeCall(id, view, language, library, searchId, null);
        Type localVarReturnType = new TypeToken<SFXDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List details about sound effects (asynchronously)
     * This endpoint shows information about sound effects.
     * @param id One or more sound effect IDs (required)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Language for the keywords and categories in the response (optional)
     * @param library Which library to fetch from (optional)
     * @param searchId The ID of the search that is related to this request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getSfxListDetailsAsync(List<String> id, String view, Language language, String library, String searchId, final ApiCallback<SFXDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSfxListDetailsValidateBeforeCall(id, view, language, library, searchId, _callback);
        Type localVarReturnType = new TypeToken<SFXDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for licensesSFX
     * @param licenseSFXRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licensesSFXCall(LicenseSFXRequest licenseSFXRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = licenseSFXRequest;

        // create path and map variables
        String localVarPath = "/v2/sfx/licenses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call licensesSFXValidateBeforeCall(LicenseSFXRequest licenseSFXRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'licenseSFXRequest' is set
        if (licenseSFXRequest == null) {
            throw new ApiException("Missing the required parameter 'licenseSFXRequest' when calling licensesSFX(Async)");
        }

        return licensesSFXCall(licenseSFXRequest, _callback);

    }

    /**
     * License sound effects
     * This endpoint licenses sounds effect assets.
     * @param licenseSFXRequest  (required)
     * @return LicenseSFXResultDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public LicenseSFXResultDataList licensesSFX(LicenseSFXRequest licenseSFXRequest) throws ApiException {
        ApiResponse<LicenseSFXResultDataList> localVarResp = licensesSFXWithHttpInfo(licenseSFXRequest);
        return localVarResp.getData();
    }

    /**
     * License sound effects
     * This endpoint licenses sounds effect assets.
     * @param licenseSFXRequest  (required)
     * @return ApiResponse&lt;LicenseSFXResultDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LicenseSFXResultDataList> licensesSFXWithHttpInfo(LicenseSFXRequest licenseSFXRequest) throws ApiException {
        okhttp3.Call localVarCall = licensesSFXValidateBeforeCall(licenseSFXRequest, null);
        Type localVarReturnType = new TypeToken<LicenseSFXResultDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * License sound effects (asynchronously)
     * This endpoint licenses sounds effect assets.
     * @param licenseSFXRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call licensesSFXAsync(LicenseSFXRequest licenseSFXRequest, final ApiCallback<LicenseSFXResultDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = licensesSFXValidateBeforeCall(licenseSFXRequest, _callback);
        Type localVarReturnType = new TypeToken<LicenseSFXResultDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchSFX
     * @param addedDate Show sound effects added on the specified date (optional)
     * @param addedDateStart Show sound effects added on or after the specified date (optional)
     * @param addedDateEnd Show sound effects added before the specified date (optional)
     * @param duration Show sound effects with the specified duration in seconds (optional)
     * @param durationFrom Show sound effects with the specified duration or longer in seconds (optional)
     * @param durationTo Show sound effects with the specified duration or shorter in seconds (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSFXCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/sfx/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (addedDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date", addedDate));
        }

        if (addedDateStart != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_start", addedDateStart));
        }

        if (addedDateEnd != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("added_date_end", addedDateEnd));
        }

        if (duration != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration", duration));
        }

        if (durationFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_from", durationFrom));
        }

        if (durationTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("duration_to", durationTo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (safe != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("safe", safe));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchSFXValidateBeforeCall(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language, final ApiCallback _callback) throws ApiException {
        return searchSFXCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, _callback);

    }

    /**
     * Search for sound effects
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * @param addedDate Show sound effects added on the specified date (optional)
     * @param addedDateStart Show sound effects added on or after the specified date (optional)
     * @param addedDateEnd Show sound effects added before the specified date (optional)
     * @param duration Show sound effects with the specified duration in seconds (optional)
     * @param durationFrom Show sound effects with the specified duration or longer in seconds (optional)
     * @param durationTo Show sound effects with the specified duration or shorter in seconds (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @return SFXSearchResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public SFXSearchResults searchSFX(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language) throws ApiException {
        ApiResponse<SFXSearchResults> localVarResp = searchSFXWithHttpInfo(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language);
        return localVarResp.getData();
    }

    /**
     * Search for sound effects
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * @param addedDate Show sound effects added on the specified date (optional)
     * @param addedDateStart Show sound effects added on or after the specified date (optional)
     * @param addedDateEnd Show sound effects added before the specified date (optional)
     * @param duration Show sound effects with the specified duration in seconds (optional)
     * @param durationFrom Show sound effects with the specified duration or longer in seconds (optional)
     * @param durationTo Show sound effects with the specified duration or shorter in seconds (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @return ApiResponse&lt;SFXSearchResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SFXSearchResults> searchSFXWithHttpInfo(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language) throws ApiException {
        okhttp3.Call localVarCall = searchSFXValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, null);
        Type localVarReturnType = new TypeToken<SFXSearchResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search for sound effects (asynchronously)
     * This endpoint searches for sound effects. If you specify more than one search parameter, the API uses an AND condition.
     * @param addedDate Show sound effects added on the specified date (optional)
     * @param addedDateStart Show sound effects added on or after the specified date (optional)
     * @param addedDateEnd Show sound effects added before the specified date (optional)
     * @param duration Show sound effects with the specified duration in seconds (optional)
     * @param durationFrom Show sound effects with the specified duration or longer in seconds (optional)
     * @param durationTo Show sound effects with the specified duration or shorter in seconds (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param safe Enable or disable safe search (optional, default to true)
     * @param sort Sort by (optional, default to popular)
     * @param view Amount of detail to render in the response (optional, default to minimal)
     * @param language Set query and result language (uses Accept-Language header if not set) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service Unavailable </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchSFXAsync(LocalDate addedDate, LocalDate addedDateStart, LocalDate addedDateEnd, Integer duration, Integer durationFrom, Integer durationTo, Integer page, Integer perPage, String query, Boolean safe, String sort, String view, Language language, final ApiCallback<SFXSearchResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchSFXValidateBeforeCall(addedDate, addedDateStart, addedDateEnd, duration, durationFrom, durationTo, page, perPage, query, safe, sort, view, language, _callback);
        Type localVarReturnType = new TypeToken<SFXSearchResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
