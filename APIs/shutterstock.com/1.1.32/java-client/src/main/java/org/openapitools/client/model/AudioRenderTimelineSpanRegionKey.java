/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * The key signature active at the beginning of the region
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class AudioRenderTimelineSpanRegionKey {
  /**
   * A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
   */
  @JsonAdapter(TonicAccidentalEnum.Adapter.class)
  public enum TonicAccidentalEnum {
    DOUBLE_FLAT("double flat"),
    
    FLAT("flat"),
    
    NATURAL("natural"),
    
    SHARP("sharp"),
    
    DOUBLE_SHARP("double sharp");

    private String value;

    TonicAccidentalEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TonicAccidentalEnum fromValue(String value) {
      for (TonicAccidentalEnum b : TonicAccidentalEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TonicAccidentalEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TonicAccidentalEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TonicAccidentalEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TonicAccidentalEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TonicAccidentalEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TONIC_ACCIDENTAL = "tonic_accidental";
  @SerializedName(SERIALIZED_NAME_TONIC_ACCIDENTAL)
  private TonicAccidentalEnum tonicAccidental;

  /**
   * A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
   */
  @JsonAdapter(TonicNoteEnum.Adapter.class)
  public enum TonicNoteEnum {
    C("c"),
    
    D("d"),
    
    E("e"),
    
    F("f"),
    
    G("g"),
    
    A("a"),
    
    B("b");

    private String value;

    TonicNoteEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TonicNoteEnum fromValue(String value) {
      for (TonicNoteEnum b : TonicNoteEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TonicNoteEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TonicNoteEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TonicNoteEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TonicNoteEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TonicNoteEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TONIC_NOTE = "tonic_note";
  @SerializedName(SERIALIZED_NAME_TONIC_NOTE)
  private TonicNoteEnum tonicNote;

  /**
   * The scale quality; if this field is not specified, the API selects the quality automatically
   */
  @JsonAdapter(TonicQualityEnum.Adapter.class)
  public enum TonicQualityEnum {
    MAJOR("major"),
    
    NATURAL_MINOR("natural_minor"),
    
    HARMONIC_MINOR("harmonic_minor"),
    
    MELODIC_MINOR("melodic_minor"),
    
    IONIAN("ionian"),
    
    DORIAN("dorian"),
    
    PHRYGIAN("phrygian"),
    
    LYDIAN("lydian"),
    
    MIXOLYDIAN("mixolydian"),
    
    AEOLIAN("aeolian"),
    
    LOCRIAN("locrian");

    private String value;

    TonicQualityEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static TonicQualityEnum fromValue(String value) {
      for (TonicQualityEnum b : TonicQualityEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<TonicQualityEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final TonicQualityEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public TonicQualityEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return TonicQualityEnum.fromValue(value);
      }
    }

    public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      String value = jsonElement.getAsString();
      TonicQualityEnum.fromValue(value);
    }
  }

  public static final String SERIALIZED_NAME_TONIC_QUALITY = "tonic_quality";
  @SerializedName(SERIALIZED_NAME_TONIC_QUALITY)
  private TonicQualityEnum tonicQuality;

  public AudioRenderTimelineSpanRegionKey() {
  }

  public AudioRenderTimelineSpanRegionKey tonicAccidental(TonicAccidentalEnum tonicAccidental) {
    this.tonicAccidental = tonicAccidental;
    return this;
  }

  /**
   * A text representation of the accidental; if this field is specified, the tonic_note field should also be specified
   * @return tonicAccidental
   */
  @javax.annotation.Nullable
  public TonicAccidentalEnum getTonicAccidental() {
    return tonicAccidental;
  }

  public void setTonicAccidental(TonicAccidentalEnum tonicAccidental) {
    this.tonicAccidental = tonicAccidental;
  }


  public AudioRenderTimelineSpanRegionKey tonicNote(TonicNoteEnum tonicNote) {
    this.tonicNote = tonicNote;
    return this;
  }

  /**
   * A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified
   * @return tonicNote
   */
  @javax.annotation.Nullable
  public TonicNoteEnum getTonicNote() {
    return tonicNote;
  }

  public void setTonicNote(TonicNoteEnum tonicNote) {
    this.tonicNote = tonicNote;
  }


  public AudioRenderTimelineSpanRegionKey tonicQuality(TonicQualityEnum tonicQuality) {
    this.tonicQuality = tonicQuality;
    return this;
  }

  /**
   * The scale quality; if this field is not specified, the API selects the quality automatically
   * @return tonicQuality
   */
  @javax.annotation.Nullable
  public TonicQualityEnum getTonicQuality() {
    return tonicQuality;
  }

  public void setTonicQuality(TonicQualityEnum tonicQuality) {
    this.tonicQuality = tonicQuality;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    AudioRenderTimelineSpanRegionKey audioRenderTimelineSpanRegionKey = (AudioRenderTimelineSpanRegionKey) o;
    return Objects.equals(this.tonicAccidental, audioRenderTimelineSpanRegionKey.tonicAccidental) &&
        Objects.equals(this.tonicNote, audioRenderTimelineSpanRegionKey.tonicNote) &&
        Objects.equals(this.tonicQuality, audioRenderTimelineSpanRegionKey.tonicQuality);
  }

  @Override
  public int hashCode() {
    return Objects.hash(tonicAccidental, tonicNote, tonicQuality);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class AudioRenderTimelineSpanRegionKey {\n");
    sb.append("    tonicAccidental: ").append(toIndentedString(tonicAccidental)).append("\n");
    sb.append("    tonicNote: ").append(toIndentedString(tonicNote)).append("\n");
    sb.append("    tonicQuality: ").append(toIndentedString(tonicQuality)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("tonic_accidental");
    openapiFields.add("tonic_note");
    openapiFields.add("tonic_quality");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to AudioRenderTimelineSpanRegionKey
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!AudioRenderTimelineSpanRegionKey.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in AudioRenderTimelineSpanRegionKey is not found in the empty JSON string", AudioRenderTimelineSpanRegionKey.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!AudioRenderTimelineSpanRegionKey.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `AudioRenderTimelineSpanRegionKey` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("tonic_accidental") != null && !jsonObj.get("tonic_accidental").isJsonNull()) && !jsonObj.get("tonic_accidental").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tonic_accidental` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tonic_accidental").toString()));
      }
      // validate the optional field `tonic_accidental`
      if (jsonObj.get("tonic_accidental") != null && !jsonObj.get("tonic_accidental").isJsonNull()) {
        TonicAccidentalEnum.validateJsonElement(jsonObj.get("tonic_accidental"));
      }
      if ((jsonObj.get("tonic_note") != null && !jsonObj.get("tonic_note").isJsonNull()) && !jsonObj.get("tonic_note").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tonic_note` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tonic_note").toString()));
      }
      // validate the optional field `tonic_note`
      if (jsonObj.get("tonic_note") != null && !jsonObj.get("tonic_note").isJsonNull()) {
        TonicNoteEnum.validateJsonElement(jsonObj.get("tonic_note"));
      }
      if ((jsonObj.get("tonic_quality") != null && !jsonObj.get("tonic_quality").isJsonNull()) && !jsonObj.get("tonic_quality").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `tonic_quality` to be a primitive type in the JSON string but got `%s`", jsonObj.get("tonic_quality").toString()));
      }
      // validate the optional field `tonic_quality`
      if (jsonObj.get("tonic_quality") != null && !jsonObj.get("tonic_quality").isJsonNull()) {
        TonicQualityEnum.validateJsonElement(jsonObj.get("tonic_quality"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!AudioRenderTimelineSpanRegionKey.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'AudioRenderTimelineSpanRegionKey' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<AudioRenderTimelineSpanRegionKey> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(AudioRenderTimelineSpanRegionKey.class));

       return (TypeAdapter<T>) new TypeAdapter<AudioRenderTimelineSpanRegionKey>() {
           @Override
           public void write(JsonWriter out, AudioRenderTimelineSpanRegionKey value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public AudioRenderTimelineSpanRegionKey read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of AudioRenderTimelineSpanRegionKey given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of AudioRenderTimelineSpanRegionKey
   * @throws IOException if the JSON string is invalid with respect to AudioRenderTimelineSpanRegionKey
   */
  public static AudioRenderTimelineSpanRegionKey fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, AudioRenderTimelineSpanRegionKey.class);
  }

  /**
   * Convert an instance of AudioRenderTimelineSpanRegionKey to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

