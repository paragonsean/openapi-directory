/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.DownloadHistoryMediaDetails;
import org.openapitools.client.model.DownloadHistoryRevshareDetails;
import org.openapitools.client.model.DownloadHistoryUserDetails;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a downloaded media item. Applicable for all media types, only one of &#39;audio&#39;, &#39;image&#39; or &#39;video&#39; will be in a single DownloadHistory object
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class DownloadHistory {
  public static final String SERIALIZED_NAME_AUDIO = "audio";
  @SerializedName(SERIALIZED_NAME_AUDIO)
  private DownloadHistoryMediaDetails audio;

  public static final String SERIALIZED_NAME_DOWNLOAD_TIME = "download_time";
  @SerializedName(SERIALIZED_NAME_DOWNLOAD_TIME)
  private OffsetDateTime downloadTime;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private DownloadHistoryMediaDetails image;

  public static final String SERIALIZED_NAME_IS_DOWNLOADABLE = "is_downloadable";
  @SerializedName(SERIALIZED_NAME_IS_DOWNLOADABLE)
  private Boolean isDownloadable;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_METADATA = "metadata";
  @SerializedName(SERIALIZED_NAME_METADATA)
  private Object metadata;

  public static final String SERIALIZED_NAME_REVSHARE = "revshare";
  @SerializedName(SERIALIZED_NAME_REVSHARE)
  private DownloadHistoryRevshareDetails revshare;

  public static final String SERIALIZED_NAME_SUBSCRIPTION_ID = "subscription_id";
  @SerializedName(SERIALIZED_NAME_SUBSCRIPTION_ID)
  private String subscriptionId;

  public static final String SERIALIZED_NAME_USER = "user";
  @SerializedName(SERIALIZED_NAME_USER)
  private DownloadHistoryUserDetails user;

  public static final String SERIALIZED_NAME_VIDEO = "video";
  @SerializedName(SERIALIZED_NAME_VIDEO)
  private DownloadHistoryMediaDetails video;

  public DownloadHistory() {
  }

  public DownloadHistory audio(DownloadHistoryMediaDetails audio) {
    this.audio = audio;
    return this;
  }

  /**
   * Get audio
   * @return audio
   */
  @javax.annotation.Nullable
  public DownloadHistoryMediaDetails getAudio() {
    return audio;
  }

  public void setAudio(DownloadHistoryMediaDetails audio) {
    this.audio = audio;
  }


  public DownloadHistory downloadTime(OffsetDateTime downloadTime) {
    this.downloadTime = downloadTime;
    return this;
  }

  /**
   * Date the media was downloaded the first time
   * @return downloadTime
   */
  @javax.annotation.Nonnull
  public OffsetDateTime getDownloadTime() {
    return downloadTime;
  }

  public void setDownloadTime(OffsetDateTime downloadTime) {
    this.downloadTime = downloadTime;
  }


  public DownloadHistory id(String id) {
    this.id = id;
    return this;
  }

  /**
   * ID of the download
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public DownloadHistory image(DownloadHistoryMediaDetails image) {
    this.image = image;
    return this;
  }

  /**
   * Get image
   * @return image
   */
  @javax.annotation.Nullable
  public DownloadHistoryMediaDetails getImage() {
    return image;
  }

  public void setImage(DownloadHistoryMediaDetails image) {
    this.image = image;
  }


  public DownloadHistory isDownloadable(Boolean isDownloadable) {
    this.isDownloadable = isDownloadable;
    return this;
  }

  /**
   * Specifies if the media is downloadable via its respective downloads endpoint
   * @return isDownloadable
   */
  @javax.annotation.Nullable
  public Boolean getIsDownloadable() {
    return isDownloadable;
  }

  public void setIsDownloadable(Boolean isDownloadable) {
    this.isDownloadable = isDownloadable;
  }


  public DownloadHistory license(String license) {
    this.license = license;
    return this;
  }

  /**
   * The name of the license of this download
   * @return license
   */
  @javax.annotation.Nonnull
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public DownloadHistory metadata(Object metadata) {
    this.metadata = metadata;
    return this;
  }

  /**
   * The metadata that was passed in the original licensing request
   * @return metadata
   */
  @javax.annotation.Nullable
  public Object getMetadata() {
    return metadata;
  }

  public void setMetadata(Object metadata) {
    this.metadata = metadata;
  }


  public DownloadHistory revshare(DownloadHistoryRevshareDetails revshare) {
    this.revshare = revshare;
    return this;
  }

  /**
   * Get revshare
   * @return revshare
   */
  @javax.annotation.Nullable
  public DownloadHistoryRevshareDetails getRevshare() {
    return revshare;
  }

  public void setRevshare(DownloadHistoryRevshareDetails revshare) {
    this.revshare = revshare;
  }


  public DownloadHistory subscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
    return this;
  }

  /**
   * ID of the subscription used to perform this download
   * @return subscriptionId
   */
  @javax.annotation.Nullable
  public String getSubscriptionId() {
    return subscriptionId;
  }

  public void setSubscriptionId(String subscriptionId) {
    this.subscriptionId = subscriptionId;
  }


  public DownloadHistory user(DownloadHistoryUserDetails user) {
    this.user = user;
    return this;
  }

  /**
   * Get user
   * @return user
   */
  @javax.annotation.Nullable
  public DownloadHistoryUserDetails getUser() {
    return user;
  }

  public void setUser(DownloadHistoryUserDetails user) {
    this.user = user;
  }


  public DownloadHistory video(DownloadHistoryMediaDetails video) {
    this.video = video;
    return this;
  }

  /**
   * Get video
   * @return video
   */
  @javax.annotation.Nullable
  public DownloadHistoryMediaDetails getVideo() {
    return video;
  }

  public void setVideo(DownloadHistoryMediaDetails video) {
    this.video = video;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DownloadHistory downloadHistory = (DownloadHistory) o;
    return Objects.equals(this.audio, downloadHistory.audio) &&
        Objects.equals(this.downloadTime, downloadHistory.downloadTime) &&
        Objects.equals(this.id, downloadHistory.id) &&
        Objects.equals(this.image, downloadHistory.image) &&
        Objects.equals(this.isDownloadable, downloadHistory.isDownloadable) &&
        Objects.equals(this.license, downloadHistory.license) &&
        Objects.equals(this.metadata, downloadHistory.metadata) &&
        Objects.equals(this.revshare, downloadHistory.revshare) &&
        Objects.equals(this.subscriptionId, downloadHistory.subscriptionId) &&
        Objects.equals(this.user, downloadHistory.user) &&
        Objects.equals(this.video, downloadHistory.video);
  }

  @Override
  public int hashCode() {
    return Objects.hash(audio, downloadTime, id, image, isDownloadable, license, metadata, revshare, subscriptionId, user, video);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DownloadHistory {\n");
    sb.append("    audio: ").append(toIndentedString(audio)).append("\n");
    sb.append("    downloadTime: ").append(toIndentedString(downloadTime)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    isDownloadable: ").append(toIndentedString(isDownloadable)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    metadata: ").append(toIndentedString(metadata)).append("\n");
    sb.append("    revshare: ").append(toIndentedString(revshare)).append("\n");
    sb.append("    subscriptionId: ").append(toIndentedString(subscriptionId)).append("\n");
    sb.append("    user: ").append(toIndentedString(user)).append("\n");
    sb.append("    video: ").append(toIndentedString(video)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("audio");
    openapiFields.add("download_time");
    openapiFields.add("id");
    openapiFields.add("image");
    openapiFields.add("is_downloadable");
    openapiFields.add("license");
    openapiFields.add("metadata");
    openapiFields.add("revshare");
    openapiFields.add("subscription_id");
    openapiFields.add("user");
    openapiFields.add("video");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("download_time");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("license");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to DownloadHistory
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!DownloadHistory.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DownloadHistory is not found in the empty JSON string", DownloadHistory.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!DownloadHistory.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DownloadHistory` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DownloadHistory.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `audio`
      if (jsonObj.get("audio") != null && !jsonObj.get("audio").isJsonNull()) {
        DownloadHistoryMediaDetails.validateJsonElement(jsonObj.get("audio"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `image`
      if (jsonObj.get("image") != null && !jsonObj.get("image").isJsonNull()) {
        DownloadHistoryMediaDetails.validateJsonElement(jsonObj.get("image"));
      }
      if (!jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      // validate the optional field `revshare`
      if (jsonObj.get("revshare") != null && !jsonObj.get("revshare").isJsonNull()) {
        DownloadHistoryRevshareDetails.validateJsonElement(jsonObj.get("revshare"));
      }
      if ((jsonObj.get("subscription_id") != null && !jsonObj.get("subscription_id").isJsonNull()) && !jsonObj.get("subscription_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `subscription_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("subscription_id").toString()));
      }
      // validate the optional field `user`
      if (jsonObj.get("user") != null && !jsonObj.get("user").isJsonNull()) {
        DownloadHistoryUserDetails.validateJsonElement(jsonObj.get("user"));
      }
      // validate the optional field `video`
      if (jsonObj.get("video") != null && !jsonObj.get("video").isJsonNull()) {
        DownloadHistoryMediaDetails.validateJsonElement(jsonObj.get("video"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DownloadHistory.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DownloadHistory' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DownloadHistory> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DownloadHistory.class));

       return (TypeAdapter<T>) new TypeAdapter<DownloadHistory>() {
           @Override
           public void write(JsonWriter out, DownloadHistory value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DownloadHistory read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of DownloadHistory given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of DownloadHistory
   * @throws IOException if the JSON string is invalid with respect to DownloadHistory
   */
  public static DownloadHistory fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DownloadHistory.class);
  }

  /**
   * Convert an instance of DownloadHistory to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

