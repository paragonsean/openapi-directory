/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.EditorialAssets;
import org.openapitools.client.model.EditorialCategory;
import org.openapitools.client.model.EditorialUpdatedContentCommercialStatus;
import org.openapitools.client.model.EditorialUpdatedContentRights;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about updated editorial content
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class EditorialUpdatedContent {
  public static final String SERIALIZED_NAME_ASPECT = "aspect";
  @SerializedName(SERIALIZED_NAME_ASPECT)
  private BigDecimal aspect;

  public static final String SERIALIZED_NAME_ASSETS = "assets";
  @SerializedName(SERIALIZED_NAME_ASSETS)
  private EditorialAssets assets;

  public static final String SERIALIZED_NAME_BYLINE = "byline";
  @SerializedName(SERIALIZED_NAME_BYLINE)
  private String byline;

  public static final String SERIALIZED_NAME_CAPTION = "caption";
  @SerializedName(SERIALIZED_NAME_CAPTION)
  private String caption;

  public static final String SERIALIZED_NAME_CATEGORIES = "categories";
  @SerializedName(SERIALIZED_NAME_CATEGORIES)
  private List<EditorialCategory> categories = new ArrayList<>();

  public static final String SERIALIZED_NAME_COMMERCIAL_STATUS = "commercial_status";
  @SerializedName(SERIALIZED_NAME_COMMERCIAL_STATUS)
  private EditorialUpdatedContentCommercialStatus commercialStatus;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_DATE_TAKEN = "date_taken";
  @SerializedName(SERIALIZED_NAME_DATE_TAKEN)
  private LocalDate dateTaken;

  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_KEYWORDS = "keywords";
  @SerializedName(SERIALIZED_NAME_KEYWORDS)
  private List<String> keywords = new ArrayList<>();

  public static final String SERIALIZED_NAME_RIGHTS = "rights";
  @SerializedName(SERIALIZED_NAME_RIGHTS)
  private EditorialUpdatedContentRights rights;

  public static final String SERIALIZED_NAME_SPECIAL_INSTRUCTIONS = "special_instructions";
  @SerializedName(SERIALIZED_NAME_SPECIAL_INSTRUCTIONS)
  private String specialInstructions;

  public static final String SERIALIZED_NAME_SUPPLIER_CODE = "supplier_code";
  @SerializedName(SERIALIZED_NAME_SUPPLIER_CODE)
  private String supplierCode;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public static final String SERIALIZED_NAME_UPDATES = "updates";
  @SerializedName(SERIALIZED_NAME_UPDATES)
  private List<String> updates = new ArrayList<>();

  public EditorialUpdatedContent() {
  }

  public EditorialUpdatedContent aspect(BigDecimal aspect) {
    this.aspect = aspect;
    return this;
  }

  /**
   * Get aspect
   * @return aspect
   */
  @javax.annotation.Nullable
  public BigDecimal getAspect() {
    return aspect;
  }

  public void setAspect(BigDecimal aspect) {
    this.aspect = aspect;
  }


  public EditorialUpdatedContent assets(EditorialAssets assets) {
    this.assets = assets;
    return this;
  }

  /**
   * Get assets
   * @return assets
   */
  @javax.annotation.Nullable
  public EditorialAssets getAssets() {
    return assets;
  }

  public void setAssets(EditorialAssets assets) {
    this.assets = assets;
  }


  public EditorialUpdatedContent byline(String byline) {
    this.byline = byline;
    return this;
  }

  /**
   * Get byline
   * @return byline
   */
  @javax.annotation.Nullable
  public String getByline() {
    return byline;
  }

  public void setByline(String byline) {
    this.byline = byline;
  }


  public EditorialUpdatedContent caption(String caption) {
    this.caption = caption;
    return this;
  }

  /**
   * Get caption
   * @return caption
   */
  @javax.annotation.Nullable
  public String getCaption() {
    return caption;
  }

  public void setCaption(String caption) {
    this.caption = caption;
  }


  public EditorialUpdatedContent categories(List<EditorialCategory> categories) {
    this.categories = categories;
    return this;
  }

  public EditorialUpdatedContent addCategoriesItem(EditorialCategory categoriesItem) {
    if (this.categories == null) {
      this.categories = new ArrayList<>();
    }
    this.categories.add(categoriesItem);
    return this;
  }

  /**
   * List of categories
   * @return categories
   */
  @javax.annotation.Nullable
  public List<EditorialCategory> getCategories() {
    return categories;
  }

  public void setCategories(List<EditorialCategory> categories) {
    this.categories = categories;
  }


  public EditorialUpdatedContent commercialStatus(EditorialUpdatedContentCommercialStatus commercialStatus) {
    this.commercialStatus = commercialStatus;
    return this;
  }

  /**
   * Get commercialStatus
   * @return commercialStatus
   */
  @javax.annotation.Nullable
  public EditorialUpdatedContentCommercialStatus getCommercialStatus() {
    return commercialStatus;
  }

  public void setCommercialStatus(EditorialUpdatedContentCommercialStatus commercialStatus) {
    this.commercialStatus = commercialStatus;
  }


  public EditorialUpdatedContent createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Get createdTime
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public EditorialUpdatedContent dateTaken(LocalDate dateTaken) {
    this.dateTaken = dateTaken;
    return this;
  }

  /**
   * Get dateTaken
   * @return dateTaken
   */
  @javax.annotation.Nullable
  public LocalDate getDateTaken() {
    return dateTaken;
  }

  public void setDateTaken(LocalDate dateTaken) {
    this.dateTaken = dateTaken;
  }


  public EditorialUpdatedContent description(String description) {
    this.description = description;
    return this;
  }

  /**
   * Get description
   * @return description
   */
  @javax.annotation.Nullable
  public String getDescription() {
    return description;
  }

  public void setDescription(String description) {
    this.description = description;
  }


  public EditorialUpdatedContent id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public EditorialUpdatedContent keywords(List<String> keywords) {
    this.keywords = keywords;
    return this;
  }

  public EditorialUpdatedContent addKeywordsItem(String keywordsItem) {
    if (this.keywords == null) {
      this.keywords = new ArrayList<>();
    }
    this.keywords.add(keywordsItem);
    return this;
  }

  /**
   * Get keywords
   * @return keywords
   */
  @javax.annotation.Nullable
  public List<String> getKeywords() {
    return keywords;
  }

  public void setKeywords(List<String> keywords) {
    this.keywords = keywords;
  }


  public EditorialUpdatedContent rights(EditorialUpdatedContentRights rights) {
    this.rights = rights;
    return this;
  }

  /**
   * Get rights
   * @return rights
   */
  @javax.annotation.Nullable
  public EditorialUpdatedContentRights getRights() {
    return rights;
  }

  public void setRights(EditorialUpdatedContentRights rights) {
    this.rights = rights;
  }


  public EditorialUpdatedContent specialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
    return this;
  }

  /**
   * Get specialInstructions
   * @return specialInstructions
   */
  @javax.annotation.Nullable
  public String getSpecialInstructions() {
    return specialInstructions;
  }

  public void setSpecialInstructions(String specialInstructions) {
    this.specialInstructions = specialInstructions;
  }


  public EditorialUpdatedContent supplierCode(String supplierCode) {
    this.supplierCode = supplierCode;
    return this;
  }

  /**
   * Get supplierCode
   * @return supplierCode
   */
  @javax.annotation.Nullable
  public String getSupplierCode() {
    return supplierCode;
  }

  public void setSupplierCode(String supplierCode) {
    this.supplierCode = supplierCode;
  }


  public EditorialUpdatedContent title(String title) {
    this.title = title;
    return this;
  }

  /**
   * Get title
   * @return title
   */
  @javax.annotation.Nullable
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public EditorialUpdatedContent updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Get updatedTime
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }


  public EditorialUpdatedContent updates(List<String> updates) {
    this.updates = updates;
    return this;
  }

  public EditorialUpdatedContent addUpdatesItem(String updatesItem) {
    if (this.updates == null) {
      this.updates = new ArrayList<>();
    }
    this.updates.add(updatesItem);
    return this;
  }

  /**
   * Get updates
   * @return updates
   */
  @javax.annotation.Nullable
  public List<String> getUpdates() {
    return updates;
  }

  public void setUpdates(List<String> updates) {
    this.updates = updates;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EditorialUpdatedContent editorialUpdatedContent = (EditorialUpdatedContent) o;
    return Objects.equals(this.aspect, editorialUpdatedContent.aspect) &&
        Objects.equals(this.assets, editorialUpdatedContent.assets) &&
        Objects.equals(this.byline, editorialUpdatedContent.byline) &&
        Objects.equals(this.caption, editorialUpdatedContent.caption) &&
        Objects.equals(this.categories, editorialUpdatedContent.categories) &&
        Objects.equals(this.commercialStatus, editorialUpdatedContent.commercialStatus) &&
        Objects.equals(this.createdTime, editorialUpdatedContent.createdTime) &&
        Objects.equals(this.dateTaken, editorialUpdatedContent.dateTaken) &&
        Objects.equals(this.description, editorialUpdatedContent.description) &&
        Objects.equals(this.id, editorialUpdatedContent.id) &&
        Objects.equals(this.keywords, editorialUpdatedContent.keywords) &&
        Objects.equals(this.rights, editorialUpdatedContent.rights) &&
        Objects.equals(this.specialInstructions, editorialUpdatedContent.specialInstructions) &&
        Objects.equals(this.supplierCode, editorialUpdatedContent.supplierCode) &&
        Objects.equals(this.title, editorialUpdatedContent.title) &&
        Objects.equals(this.updatedTime, editorialUpdatedContent.updatedTime) &&
        Objects.equals(this.updates, editorialUpdatedContent.updates);
  }

  @Override
  public int hashCode() {
    return Objects.hash(aspect, assets, byline, caption, categories, commercialStatus, createdTime, dateTaken, description, id, keywords, rights, specialInstructions, supplierCode, title, updatedTime, updates);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EditorialUpdatedContent {\n");
    sb.append("    aspect: ").append(toIndentedString(aspect)).append("\n");
    sb.append("    assets: ").append(toIndentedString(assets)).append("\n");
    sb.append("    byline: ").append(toIndentedString(byline)).append("\n");
    sb.append("    caption: ").append(toIndentedString(caption)).append("\n");
    sb.append("    categories: ").append(toIndentedString(categories)).append("\n");
    sb.append("    commercialStatus: ").append(toIndentedString(commercialStatus)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    dateTaken: ").append(toIndentedString(dateTaken)).append("\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    keywords: ").append(toIndentedString(keywords)).append("\n");
    sb.append("    rights: ").append(toIndentedString(rights)).append("\n");
    sb.append("    specialInstructions: ").append(toIndentedString(specialInstructions)).append("\n");
    sb.append("    supplierCode: ").append(toIndentedString(supplierCode)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("    updates: ").append(toIndentedString(updates)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("aspect");
    openapiFields.add("assets");
    openapiFields.add("byline");
    openapiFields.add("caption");
    openapiFields.add("categories");
    openapiFields.add("commercial_status");
    openapiFields.add("created_time");
    openapiFields.add("date_taken");
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("keywords");
    openapiFields.add("rights");
    openapiFields.add("special_instructions");
    openapiFields.add("supplier_code");
    openapiFields.add("title");
    openapiFields.add("updated_time");
    openapiFields.add("updates");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to EditorialUpdatedContent
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!EditorialUpdatedContent.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EditorialUpdatedContent is not found in the empty JSON string", EditorialUpdatedContent.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!EditorialUpdatedContent.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `EditorialUpdatedContent` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : EditorialUpdatedContent.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `assets`
      if (jsonObj.get("assets") != null && !jsonObj.get("assets").isJsonNull()) {
        EditorialAssets.validateJsonElement(jsonObj.get("assets"));
      }
      if ((jsonObj.get("byline") != null && !jsonObj.get("byline").isJsonNull()) && !jsonObj.get("byline").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `byline` to be a primitive type in the JSON string but got `%s`", jsonObj.get("byline").toString()));
      }
      if ((jsonObj.get("caption") != null && !jsonObj.get("caption").isJsonNull()) && !jsonObj.get("caption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `caption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("caption").toString()));
      }
      if (jsonObj.get("categories") != null && !jsonObj.get("categories").isJsonNull()) {
        JsonArray jsonArraycategories = jsonObj.getAsJsonArray("categories");
        if (jsonArraycategories != null) {
          // ensure the json data is an array
          if (!jsonObj.get("categories").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `categories` to be an array in the JSON string but got `%s`", jsonObj.get("categories").toString()));
          }

          // validate the optional field `categories` (array)
          for (int i = 0; i < jsonArraycategories.size(); i++) {
            EditorialCategory.validateJsonElement(jsonArraycategories.get(i));
          };
        }
      }
      // validate the optional field `commercial_status`
      if (jsonObj.get("commercial_status") != null && !jsonObj.get("commercial_status").isJsonNull()) {
        EditorialUpdatedContentCommercialStatus.validateJsonElement(jsonObj.get("commercial_status"));
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("keywords") != null && !jsonObj.get("keywords").isJsonNull() && !jsonObj.get("keywords").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `keywords` to be an array in the JSON string but got `%s`", jsonObj.get("keywords").toString()));
      }
      // validate the optional field `rights`
      if (jsonObj.get("rights") != null && !jsonObj.get("rights").isJsonNull()) {
        EditorialUpdatedContentRights.validateJsonElement(jsonObj.get("rights"));
      }
      if ((jsonObj.get("special_instructions") != null && !jsonObj.get("special_instructions").isJsonNull()) && !jsonObj.get("special_instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `special_instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("special_instructions").toString()));
      }
      if ((jsonObj.get("supplier_code") != null && !jsonObj.get("supplier_code").isJsonNull()) && !jsonObj.get("supplier_code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supplier_code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supplier_code").toString()));
      }
      if ((jsonObj.get("title") != null && !jsonObj.get("title").isJsonNull()) && !jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("updates") != null && !jsonObj.get("updates").isJsonNull() && !jsonObj.get("updates").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `updates` to be an array in the JSON string but got `%s`", jsonObj.get("updates").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EditorialUpdatedContent.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EditorialUpdatedContent' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EditorialUpdatedContent> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EditorialUpdatedContent.class));

       return (TypeAdapter<T>) new TypeAdapter<EditorialUpdatedContent>() {
           @Override
           public void write(JsonWriter out, EditorialUpdatedContent value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public EditorialUpdatedContent read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of EditorialUpdatedContent given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of EditorialUpdatedContent
   * @throws IOException if the JSON string is invalid with respect to EditorialUpdatedContent
   */
  public static EditorialUpdatedContent fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EditorialUpdatedContent.class);
  }

  /**
   * Convert an instance of EditorialUpdatedContent to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

