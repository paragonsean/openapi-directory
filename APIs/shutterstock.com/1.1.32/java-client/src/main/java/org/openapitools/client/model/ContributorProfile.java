/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.ContributorProfileSocialMedia;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Contributor profile data
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ContributorProfile {
  public static final String SERIALIZED_NAME_ABOUT = "about";
  @SerializedName(SERIALIZED_NAME_ABOUT)
  private String about;

  public static final String SERIALIZED_NAME_CONTRIBUTOR_TYPE = "contributor_type";
  @SerializedName(SERIALIZED_NAME_CONTRIBUTOR_TYPE)
  private List<String> contributorType = new ArrayList<>();

  public static final String SERIALIZED_NAME_DISPLAY_NAME = "display_name";
  @SerializedName(SERIALIZED_NAME_DISPLAY_NAME)
  private String displayName;

  public static final String SERIALIZED_NAME_EQUIPMENT = "equipment";
  @SerializedName(SERIALIZED_NAME_EQUIPMENT)
  private List<String> equipment = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_PORTFOLIO_URL = "portfolio_url";
  @SerializedName(SERIALIZED_NAME_PORTFOLIO_URL)
  private String portfolioUrl;

  public static final String SERIALIZED_NAME_SOCIAL_MEDIA = "social_media";
  @SerializedName(SERIALIZED_NAME_SOCIAL_MEDIA)
  private ContributorProfileSocialMedia socialMedia;

  public static final String SERIALIZED_NAME_STYLES = "styles";
  @SerializedName(SERIALIZED_NAME_STYLES)
  private List<String> styles = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUBJECTS = "subjects";
  @SerializedName(SERIALIZED_NAME_SUBJECTS)
  private List<String> subjects = new ArrayList<>();

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public ContributorProfile() {
  }

  public ContributorProfile about(String about) {
    this.about = about;
    return this;
  }

  /**
   * Short description of the contributors&#39; library
   * @return about
   */
  @javax.annotation.Nullable
  public String getAbout() {
    return about;
  }

  public void setAbout(String about) {
    this.about = about;
  }


  public ContributorProfile contributorType(List<String> contributorType) {
    this.contributorType = contributorType;
    return this;
  }

  public ContributorProfile addContributorTypeItem(String contributorTypeItem) {
    if (this.contributorType == null) {
      this.contributorType = new ArrayList<>();
    }
    this.contributorType.add(contributorTypeItem);
    return this;
  }

  /**
   * Type of content that the contributor specializes in (photographer, illustrator, etc)
   * @return contributorType
   */
  @javax.annotation.Nullable
  public List<String> getContributorType() {
    return contributorType;
  }

  public void setContributorType(List<String> contributorType) {
    this.contributorType = contributorType;
  }


  public ContributorProfile displayName(String displayName) {
    this.displayName = displayName;
    return this;
  }

  /**
   * Preferred name to be displayed for the contributor
   * @return displayName
   */
  @javax.annotation.Nullable
  public String getDisplayName() {
    return displayName;
  }

  public void setDisplayName(String displayName) {
    this.displayName = displayName;
  }


  public ContributorProfile equipment(List<String> equipment) {
    this.equipment = equipment;
    return this;
  }

  public ContributorProfile addEquipmentItem(String equipmentItem) {
    if (this.equipment == null) {
      this.equipment = new ArrayList<>();
    }
    this.equipment.add(equipmentItem);
    return this;
  }

  /**
   * List of equipment used by the contributor (Canon EOS 5D Mark II, etc)
   * @return equipment
   */
  @javax.annotation.Nullable
  public List<String> getEquipment() {
    return equipment;
  }

  public void setEquipment(List<String> equipment) {
    this.equipment = equipment;
  }


  public ContributorProfile id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Contributor ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public ContributorProfile location(String location) {
    this.location = location;
    return this;
  }

  /**
   * Country code representing the contributor&#39;s locale
   * @return location
   */
  @javax.annotation.Nullable
  public String getLocation() {
    return location;
  }

  public void setLocation(String location) {
    this.location = location;
  }


  public ContributorProfile portfolioUrl(String portfolioUrl) {
    this.portfolioUrl = portfolioUrl;
    return this;
  }

  /**
   * Web URL for the contributors&#39; profile
   * @return portfolioUrl
   */
  @javax.annotation.Nullable
  public String getPortfolioUrl() {
    return portfolioUrl;
  }

  public void setPortfolioUrl(String portfolioUrl) {
    this.portfolioUrl = portfolioUrl;
  }


  public ContributorProfile socialMedia(ContributorProfileSocialMedia socialMedia) {
    this.socialMedia = socialMedia;
    return this;
  }

  /**
   * Get socialMedia
   * @return socialMedia
   */
  @javax.annotation.Nullable
  public ContributorProfileSocialMedia getSocialMedia() {
    return socialMedia;
  }

  public void setSocialMedia(ContributorProfileSocialMedia socialMedia) {
    this.socialMedia = socialMedia;
  }


  public ContributorProfile styles(List<String> styles) {
    this.styles = styles;
    return this;
  }

  public ContributorProfile addStylesItem(String stylesItem) {
    if (this.styles == null) {
      this.styles = new ArrayList<>();
    }
    this.styles.add(stylesItem);
    return this;
  }

  /**
   * List of styles that the contributor specializes in (lifestyle, mixed media, etc)
   * @return styles
   */
  @javax.annotation.Nullable
  public List<String> getStyles() {
    return styles;
  }

  public void setStyles(List<String> styles) {
    this.styles = styles;
  }


  public ContributorProfile subjects(List<String> subjects) {
    this.subjects = subjects;
    return this;
  }

  public ContributorProfile addSubjectsItem(String subjectsItem) {
    if (this.subjects == null) {
      this.subjects = new ArrayList<>();
    }
    this.subjects.add(subjectsItem);
    return this;
  }

  /**
   * Generic list of subjects for contributors&#39; work (food_and_drink, holiday, people, etc)
   * @return subjects
   */
  @javax.annotation.Nullable
  public List<String> getSubjects() {
    return subjects;
  }

  public void setSubjects(List<String> subjects) {
    this.subjects = subjects;
  }


  public ContributorProfile website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Personal website for the contributor
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ContributorProfile contributorProfile = (ContributorProfile) o;
    return Objects.equals(this.about, contributorProfile.about) &&
        Objects.equals(this.contributorType, contributorProfile.contributorType) &&
        Objects.equals(this.displayName, contributorProfile.displayName) &&
        Objects.equals(this.equipment, contributorProfile.equipment) &&
        Objects.equals(this.id, contributorProfile.id) &&
        Objects.equals(this.location, contributorProfile.location) &&
        Objects.equals(this.portfolioUrl, contributorProfile.portfolioUrl) &&
        Objects.equals(this.socialMedia, contributorProfile.socialMedia) &&
        Objects.equals(this.styles, contributorProfile.styles) &&
        Objects.equals(this.subjects, contributorProfile.subjects) &&
        Objects.equals(this.website, contributorProfile.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(about, contributorType, displayName, equipment, id, location, portfolioUrl, socialMedia, styles, subjects, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ContributorProfile {\n");
    sb.append("    about: ").append(toIndentedString(about)).append("\n");
    sb.append("    contributorType: ").append(toIndentedString(contributorType)).append("\n");
    sb.append("    displayName: ").append(toIndentedString(displayName)).append("\n");
    sb.append("    equipment: ").append(toIndentedString(equipment)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    portfolioUrl: ").append(toIndentedString(portfolioUrl)).append("\n");
    sb.append("    socialMedia: ").append(toIndentedString(socialMedia)).append("\n");
    sb.append("    styles: ").append(toIndentedString(styles)).append("\n");
    sb.append("    subjects: ").append(toIndentedString(subjects)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("about");
    openapiFields.add("contributor_type");
    openapiFields.add("display_name");
    openapiFields.add("equipment");
    openapiFields.add("id");
    openapiFields.add("location");
    openapiFields.add("portfolio_url");
    openapiFields.add("social_media");
    openapiFields.add("styles");
    openapiFields.add("subjects");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ContributorProfile
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ContributorProfile.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ContributorProfile is not found in the empty JSON string", ContributorProfile.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ContributorProfile.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ContributorProfile` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ContributorProfile.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("about") != null && !jsonObj.get("about").isJsonNull()) && !jsonObj.get("about").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `about` to be a primitive type in the JSON string but got `%s`", jsonObj.get("about").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("contributor_type") != null && !jsonObj.get("contributor_type").isJsonNull() && !jsonObj.get("contributor_type").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `contributor_type` to be an array in the JSON string but got `%s`", jsonObj.get("contributor_type").toString()));
      }
      if ((jsonObj.get("display_name") != null && !jsonObj.get("display_name").isJsonNull()) && !jsonObj.get("display_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `display_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("display_name").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("equipment") != null && !jsonObj.get("equipment").isJsonNull() && !jsonObj.get("equipment").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `equipment` to be an array in the JSON string but got `%s`", jsonObj.get("equipment").toString()));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("portfolio_url") != null && !jsonObj.get("portfolio_url").isJsonNull()) && !jsonObj.get("portfolio_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `portfolio_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("portfolio_url").toString()));
      }
      // validate the optional field `social_media`
      if (jsonObj.get("social_media") != null && !jsonObj.get("social_media").isJsonNull()) {
        ContributorProfileSocialMedia.validateJsonElement(jsonObj.get("social_media"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("styles") != null && !jsonObj.get("styles").isJsonNull() && !jsonObj.get("styles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `styles` to be an array in the JSON string but got `%s`", jsonObj.get("styles").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("subjects") != null && !jsonObj.get("subjects").isJsonNull() && !jsonObj.get("subjects").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `subjects` to be an array in the JSON string but got `%s`", jsonObj.get("subjects").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ContributorProfile.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ContributorProfile' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ContributorProfile> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ContributorProfile.class));

       return (TypeAdapter<T>) new TypeAdapter<ContributorProfile>() {
           @Override
           public void write(JsonWriter out, ContributorProfile value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ContributorProfile read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ContributorProfile given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ContributorProfile
   * @throws IOException if the JSON string is invalid with respect to ContributorProfile
   */
  public static ContributorProfile fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ContributorProfile.class);
  }

  /**
   * Convert an instance of ContributorProfile to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

