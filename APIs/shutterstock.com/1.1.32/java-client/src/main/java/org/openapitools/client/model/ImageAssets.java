/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;
import org.openapitools.client.model.ImageSizeDetails;
import org.openapitools.client.model.Thumbnail;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about the assets that are part of an image
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class ImageAssets {
  public static final String SERIALIZED_NAME_HUGE_JPG = "huge_jpg";
  @SerializedName(SERIALIZED_NAME_HUGE_JPG)
  private ImageSizeDetails hugeJpg;

  public static final String SERIALIZED_NAME_HUGE_THUMB = "huge_thumb";
  @SerializedName(SERIALIZED_NAME_HUGE_THUMB)
  private Thumbnail hugeThumb;

  public static final String SERIALIZED_NAME_LARGE_THUMB = "large_thumb";
  @SerializedName(SERIALIZED_NAME_LARGE_THUMB)
  private Thumbnail largeThumb;

  public static final String SERIALIZED_NAME_MEDIUM_JPG = "medium_jpg";
  @SerializedName(SERIALIZED_NAME_MEDIUM_JPG)
  private ImageSizeDetails mediumJpg;

  public static final String SERIALIZED_NAME_PREVIEW = "preview";
  @SerializedName(SERIALIZED_NAME_PREVIEW)
  private Thumbnail preview;

  public static final String SERIALIZED_NAME_PREVIEW1000 = "preview_1000";
  @SerializedName(SERIALIZED_NAME_PREVIEW1000)
  private Thumbnail preview1000;

  public static final String SERIALIZED_NAME_PREVIEW1500 = "preview_1500";
  @SerializedName(SERIALIZED_NAME_PREVIEW1500)
  private Thumbnail preview1500;

  public static final String SERIALIZED_NAME_SMALL_JPG = "small_jpg";
  @SerializedName(SERIALIZED_NAME_SMALL_JPG)
  private ImageSizeDetails smallJpg;

  public static final String SERIALIZED_NAME_SMALL_THUMB = "small_thumb";
  @SerializedName(SERIALIZED_NAME_SMALL_THUMB)
  private Thumbnail smallThumb;

  public static final String SERIALIZED_NAME_SUPERSIZE_JPG = "supersize_jpg";
  @SerializedName(SERIALIZED_NAME_SUPERSIZE_JPG)
  private ImageSizeDetails supersizeJpg;

  public static final String SERIALIZED_NAME_VECTOR_EPS = "vector_eps";
  @SerializedName(SERIALIZED_NAME_VECTOR_EPS)
  private ImageSizeDetails vectorEps;

  public ImageAssets() {
  }

  public ImageAssets hugeJpg(ImageSizeDetails hugeJpg) {
    this.hugeJpg = hugeJpg;
    return this;
  }

  /**
   * Get hugeJpg
   * @return hugeJpg
   */
  @javax.annotation.Nullable
  public ImageSizeDetails getHugeJpg() {
    return hugeJpg;
  }

  public void setHugeJpg(ImageSizeDetails hugeJpg) {
    this.hugeJpg = hugeJpg;
  }


  public ImageAssets hugeThumb(Thumbnail hugeThumb) {
    this.hugeThumb = hugeThumb;
    return this;
  }

  /**
   * Get hugeThumb
   * @return hugeThumb
   */
  @javax.annotation.Nullable
  public Thumbnail getHugeThumb() {
    return hugeThumb;
  }

  public void setHugeThumb(Thumbnail hugeThumb) {
    this.hugeThumb = hugeThumb;
  }


  public ImageAssets largeThumb(Thumbnail largeThumb) {
    this.largeThumb = largeThumb;
    return this;
  }

  /**
   * Get largeThumb
   * @return largeThumb
   */
  @javax.annotation.Nullable
  public Thumbnail getLargeThumb() {
    return largeThumb;
  }

  public void setLargeThumb(Thumbnail largeThumb) {
    this.largeThumb = largeThumb;
  }


  public ImageAssets mediumJpg(ImageSizeDetails mediumJpg) {
    this.mediumJpg = mediumJpg;
    return this;
  }

  /**
   * Get mediumJpg
   * @return mediumJpg
   */
  @javax.annotation.Nullable
  public ImageSizeDetails getMediumJpg() {
    return mediumJpg;
  }

  public void setMediumJpg(ImageSizeDetails mediumJpg) {
    this.mediumJpg = mediumJpg;
  }


  public ImageAssets preview(Thumbnail preview) {
    this.preview = preview;
    return this;
  }

  /**
   * Get preview
   * @return preview
   */
  @javax.annotation.Nullable
  public Thumbnail getPreview() {
    return preview;
  }

  public void setPreview(Thumbnail preview) {
    this.preview = preview;
  }


  public ImageAssets preview1000(Thumbnail preview1000) {
    this.preview1000 = preview1000;
    return this;
  }

  /**
   * Get preview1000
   * @return preview1000
   */
  @javax.annotation.Nullable
  public Thumbnail getPreview1000() {
    return preview1000;
  }

  public void setPreview1000(Thumbnail preview1000) {
    this.preview1000 = preview1000;
  }


  public ImageAssets preview1500(Thumbnail preview1500) {
    this.preview1500 = preview1500;
    return this;
  }

  /**
   * Get preview1500
   * @return preview1500
   */
  @javax.annotation.Nullable
  public Thumbnail getPreview1500() {
    return preview1500;
  }

  public void setPreview1500(Thumbnail preview1500) {
    this.preview1500 = preview1500;
  }


  public ImageAssets smallJpg(ImageSizeDetails smallJpg) {
    this.smallJpg = smallJpg;
    return this;
  }

  /**
   * Get smallJpg
   * @return smallJpg
   */
  @javax.annotation.Nullable
  public ImageSizeDetails getSmallJpg() {
    return smallJpg;
  }

  public void setSmallJpg(ImageSizeDetails smallJpg) {
    this.smallJpg = smallJpg;
  }


  public ImageAssets smallThumb(Thumbnail smallThumb) {
    this.smallThumb = smallThumb;
    return this;
  }

  /**
   * Get smallThumb
   * @return smallThumb
   */
  @javax.annotation.Nullable
  public Thumbnail getSmallThumb() {
    return smallThumb;
  }

  public void setSmallThumb(Thumbnail smallThumb) {
    this.smallThumb = smallThumb;
  }


  public ImageAssets supersizeJpg(ImageSizeDetails supersizeJpg) {
    this.supersizeJpg = supersizeJpg;
    return this;
  }

  /**
   * Get supersizeJpg
   * @return supersizeJpg
   */
  @javax.annotation.Nullable
  public ImageSizeDetails getSupersizeJpg() {
    return supersizeJpg;
  }

  public void setSupersizeJpg(ImageSizeDetails supersizeJpg) {
    this.supersizeJpg = supersizeJpg;
  }


  public ImageAssets vectorEps(ImageSizeDetails vectorEps) {
    this.vectorEps = vectorEps;
    return this;
  }

  /**
   * Get vectorEps
   * @return vectorEps
   */
  @javax.annotation.Nullable
  public ImageSizeDetails getVectorEps() {
    return vectorEps;
  }

  public void setVectorEps(ImageSizeDetails vectorEps) {
    this.vectorEps = vectorEps;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ImageAssets imageAssets = (ImageAssets) o;
    return Objects.equals(this.hugeJpg, imageAssets.hugeJpg) &&
        Objects.equals(this.hugeThumb, imageAssets.hugeThumb) &&
        Objects.equals(this.largeThumb, imageAssets.largeThumb) &&
        Objects.equals(this.mediumJpg, imageAssets.mediumJpg) &&
        Objects.equals(this.preview, imageAssets.preview) &&
        Objects.equals(this.preview1000, imageAssets.preview1000) &&
        Objects.equals(this.preview1500, imageAssets.preview1500) &&
        Objects.equals(this.smallJpg, imageAssets.smallJpg) &&
        Objects.equals(this.smallThumb, imageAssets.smallThumb) &&
        Objects.equals(this.supersizeJpg, imageAssets.supersizeJpg) &&
        Objects.equals(this.vectorEps, imageAssets.vectorEps);
  }

  @Override
  public int hashCode() {
    return Objects.hash(hugeJpg, hugeThumb, largeThumb, mediumJpg, preview, preview1000, preview1500, smallJpg, smallThumb, supersizeJpg, vectorEps);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ImageAssets {\n");
    sb.append("    hugeJpg: ").append(toIndentedString(hugeJpg)).append("\n");
    sb.append("    hugeThumb: ").append(toIndentedString(hugeThumb)).append("\n");
    sb.append("    largeThumb: ").append(toIndentedString(largeThumb)).append("\n");
    sb.append("    mediumJpg: ").append(toIndentedString(mediumJpg)).append("\n");
    sb.append("    preview: ").append(toIndentedString(preview)).append("\n");
    sb.append("    preview1000: ").append(toIndentedString(preview1000)).append("\n");
    sb.append("    preview1500: ").append(toIndentedString(preview1500)).append("\n");
    sb.append("    smallJpg: ").append(toIndentedString(smallJpg)).append("\n");
    sb.append("    smallThumb: ").append(toIndentedString(smallThumb)).append("\n");
    sb.append("    supersizeJpg: ").append(toIndentedString(supersizeJpg)).append("\n");
    sb.append("    vectorEps: ").append(toIndentedString(vectorEps)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("huge_jpg");
    openapiFields.add("huge_thumb");
    openapiFields.add("large_thumb");
    openapiFields.add("medium_jpg");
    openapiFields.add("preview");
    openapiFields.add("preview_1000");
    openapiFields.add("preview_1500");
    openapiFields.add("small_jpg");
    openapiFields.add("small_thumb");
    openapiFields.add("supersize_jpg");
    openapiFields.add("vector_eps");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ImageAssets
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ImageAssets.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ImageAssets is not found in the empty JSON string", ImageAssets.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ImageAssets.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ImageAssets` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `huge_jpg`
      if (jsonObj.get("huge_jpg") != null && !jsonObj.get("huge_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonElement(jsonObj.get("huge_jpg"));
      }
      // validate the optional field `huge_thumb`
      if (jsonObj.get("huge_thumb") != null && !jsonObj.get("huge_thumb").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("huge_thumb"));
      }
      // validate the optional field `large_thumb`
      if (jsonObj.get("large_thumb") != null && !jsonObj.get("large_thumb").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("large_thumb"));
      }
      // validate the optional field `medium_jpg`
      if (jsonObj.get("medium_jpg") != null && !jsonObj.get("medium_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonElement(jsonObj.get("medium_jpg"));
      }
      // validate the optional field `preview`
      if (jsonObj.get("preview") != null && !jsonObj.get("preview").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("preview"));
      }
      // validate the optional field `preview_1000`
      if (jsonObj.get("preview_1000") != null && !jsonObj.get("preview_1000").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("preview_1000"));
      }
      // validate the optional field `preview_1500`
      if (jsonObj.get("preview_1500") != null && !jsonObj.get("preview_1500").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("preview_1500"));
      }
      // validate the optional field `small_jpg`
      if (jsonObj.get("small_jpg") != null && !jsonObj.get("small_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonElement(jsonObj.get("small_jpg"));
      }
      // validate the optional field `small_thumb`
      if (jsonObj.get("small_thumb") != null && !jsonObj.get("small_thumb").isJsonNull()) {
        Thumbnail.validateJsonElement(jsonObj.get("small_thumb"));
      }
      // validate the optional field `supersize_jpg`
      if (jsonObj.get("supersize_jpg") != null && !jsonObj.get("supersize_jpg").isJsonNull()) {
        ImageSizeDetails.validateJsonElement(jsonObj.get("supersize_jpg"));
      }
      // validate the optional field `vector_eps`
      if (jsonObj.get("vector_eps") != null && !jsonObj.get("vector_eps").isJsonNull()) {
        ImageSizeDetails.validateJsonElement(jsonObj.get("vector_eps"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ImageAssets.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ImageAssets' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ImageAssets> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ImageAssets.class));

       return (TypeAdapter<T>) new TypeAdapter<ImageAssets>() {
           @Override
           public void write(JsonWriter out, ImageAssets value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ImageAssets read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ImageAssets given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ImageAssets
   * @throws IOException if the JSON string is invalid with respect to ImageAssets
   */
  public static ImageAssets fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ImageAssets.class);
  }

  /**
   * Convert an instance of ImageAssets to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

