/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.AudioRendersListResults;
import java.math.BigDecimal;
import org.openapitools.client.model.CreateAudioRendersRequest;
import org.openapitools.client.model.DescriptorsListResult;
import org.openapitools.client.model.InstrumentsListResult;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CustomMusicApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CustomMusicApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CustomMusicApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createAudioRenders
     * @param createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAudioRendersCall(CreateAudioRendersRequest createAudioRendersRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createAudioRendersRequest;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/renders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAudioRendersValidateBeforeCall(CreateAudioRendersRequest createAudioRendersRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createAudioRendersRequest' is set
        if (createAudioRendersRequest == null) {
            throw new ApiException("Missing the required parameter 'createAudioRendersRequest' when calling createAudioRenders(Async)");
        }

        return createAudioRendersCall(createAudioRendersRequest, _callback);

    }

    /**
     * Create rendered audio
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * @param createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file (required)
     * @return AudioRendersListResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public AudioRendersListResults createAudioRenders(CreateAudioRendersRequest createAudioRendersRequest) throws ApiException {
        ApiResponse<AudioRendersListResults> localVarResp = createAudioRendersWithHttpInfo(createAudioRendersRequest);
        return localVarResp.getData();
    }

    /**
     * Create rendered audio
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * @param createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file (required)
     * @return ApiResponse&lt;AudioRendersListResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudioRendersListResults> createAudioRendersWithHttpInfo(CreateAudioRendersRequest createAudioRendersRequest) throws ApiException {
        okhttp3.Call localVarCall = createAudioRendersValidateBeforeCall(createAudioRendersRequest, null);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create rendered audio (asynchronously)
     * This endpoint creates rendered audio from timeline data. It returns a render ID that you can use to download the finished audio when it is ready. The render ID is valid for up to 48 hours.
     * @param createAudioRendersRequest Parameters for the audio, including the timeline and information about the output file (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAudioRendersAsync(CreateAudioRendersRequest createAudioRendersRequest, final ApiCallback<AudioRendersListResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAudioRendersValidateBeforeCall(createAudioRendersRequest, _callback);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for fetchRenders
     * @param id One or more render IDs (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRendersCall(List<String> id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/renders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call fetchRendersValidateBeforeCall(List<String> id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling fetchRenders(Async)");
        }

        return fetchRendersCall(id, _callback);

    }

    /**
     * Get details about audio renders
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * @param id One or more render IDs (required)
     * @return AudioRendersListResults
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public AudioRendersListResults fetchRenders(List<String> id) throws ApiException {
        ApiResponse<AudioRendersListResults> localVarResp = fetchRendersWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get details about audio renders
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * @param id One or more render IDs (required)
     * @return ApiResponse&lt;AudioRendersListResults&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudioRendersListResults> fetchRendersWithHttpInfo(List<String> id) throws ApiException {
        okhttp3.Call localVarCall = fetchRendersValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get details about audio renders (asynchronously)
     * This endpoint shows the status of one or more audio renders, including download links for completed audio.
     * @param id One or more render IDs (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call fetchRendersAsync(List<String> id, final ApiCallback<AudioRendersListResults> _callback) throws ApiException {

        okhttp3.Call localVarCall = fetchRendersValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<AudioRendersListResults>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomDescriptors
     * @param renderSpeedOver Show descriptors with an average render speed that is greater than or equal to the specified value (optional)
     * @param bandId Show descriptors that contain the specified band (case-sentsitive) (optional)
     * @param bandName Show descriptors with the specified band name (case-sensitive) (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param id Show descriptors with the specified IDs (case-sensitive) (optional)
     * @param instrumentName Show descriptors with the specified instrument name (case-sensitive) (optional)
     * @param instrumentId Show descriptors with the specified instrument ID (case-sensitive) (optional)
     * @param tempo Show descriptors whose tempo range includes the specified tempo in beats per minute (optional)
     * @param tempoTo Show descriptors with a tempo that is less than or equal to the specified number (optional)
     * @param tempoFrom Show descriptors that have a tempo range that includes the specified tempo in beats per minute (optional)
     * @param name Show descriptors with the specified name (case-sensitive) (optional)
     * @param tag Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomDescriptorsCall(BigDecimal renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, BigDecimal tempo, BigDecimal tempoTo, BigDecimal tempoFrom, String name, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/descriptors";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (renderSpeedOver != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("render_speed_over", renderSpeedOver));
        }

        if (bandId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band_id", bandId));
        }

        if (bandName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("band_name", bandName));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (instrumentName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument_name", instrumentName));
        }

        if (instrumentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instrument_id", instrumentId));
        }

        if (tempo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tempo", tempo));
        }

        if (tempoTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tempo_to", tempoTo));
        }

        if (tempoFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tempo_from", tempoFrom));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomDescriptorsValidateBeforeCall(BigDecimal renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, BigDecimal tempo, BigDecimal tempoTo, BigDecimal tempoFrom, String name, String tag, final ApiCallback _callback) throws ApiException {
        return listCustomDescriptorsCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, _callback);

    }

    /**
     * List computer audio descriptors
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * @param renderSpeedOver Show descriptors with an average render speed that is greater than or equal to the specified value (optional)
     * @param bandId Show descriptors that contain the specified band (case-sentsitive) (optional)
     * @param bandName Show descriptors with the specified band name (case-sensitive) (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param id Show descriptors with the specified IDs (case-sensitive) (optional)
     * @param instrumentName Show descriptors with the specified instrument name (case-sensitive) (optional)
     * @param instrumentId Show descriptors with the specified instrument ID (case-sensitive) (optional)
     * @param tempo Show descriptors whose tempo range includes the specified tempo in beats per minute (optional)
     * @param tempoTo Show descriptors with a tempo that is less than or equal to the specified number (optional)
     * @param tempoFrom Show descriptors that have a tempo range that includes the specified tempo in beats per minute (optional)
     * @param name Show descriptors with the specified name (case-sensitive) (optional)
     * @param tag Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive) (optional)
     * @return DescriptorsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public DescriptorsListResult listCustomDescriptors(BigDecimal renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, BigDecimal tempo, BigDecimal tempoTo, BigDecimal tempoFrom, String name, String tag) throws ApiException {
        ApiResponse<DescriptorsListResult> localVarResp = listCustomDescriptorsWithHttpInfo(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag);
        return localVarResp.getData();
    }

    /**
     * List computer audio descriptors
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * @param renderSpeedOver Show descriptors with an average render speed that is greater than or equal to the specified value (optional)
     * @param bandId Show descriptors that contain the specified band (case-sentsitive) (optional)
     * @param bandName Show descriptors with the specified band name (case-sensitive) (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param id Show descriptors with the specified IDs (case-sensitive) (optional)
     * @param instrumentName Show descriptors with the specified instrument name (case-sensitive) (optional)
     * @param instrumentId Show descriptors with the specified instrument ID (case-sensitive) (optional)
     * @param tempo Show descriptors whose tempo range includes the specified tempo in beats per minute (optional)
     * @param tempoTo Show descriptors with a tempo that is less than or equal to the specified number (optional)
     * @param tempoFrom Show descriptors that have a tempo range that includes the specified tempo in beats per minute (optional)
     * @param name Show descriptors with the specified name (case-sensitive) (optional)
     * @param tag Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive) (optional)
     * @return ApiResponse&lt;DescriptorsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DescriptorsListResult> listCustomDescriptorsWithHttpInfo(BigDecimal renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, BigDecimal tempo, BigDecimal tempoTo, BigDecimal tempoFrom, String name, String tag) throws ApiException {
        okhttp3.Call localVarCall = listCustomDescriptorsValidateBeforeCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, null);
        Type localVarReturnType = new TypeToken<DescriptorsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List computer audio descriptors (asynchronously)
     * This endpoint lists the descriptors that you can use in the audio regions in an audio render.
     * @param renderSpeedOver Show descriptors with an average render speed that is greater than or equal to the specified value (optional)
     * @param bandId Show descriptors that contain the specified band (case-sentsitive) (optional)
     * @param bandName Show descriptors with the specified band name (case-sensitive) (optional)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param id Show descriptors with the specified IDs (case-sensitive) (optional)
     * @param instrumentName Show descriptors with the specified instrument name (case-sensitive) (optional)
     * @param instrumentId Show descriptors with the specified instrument ID (case-sensitive) (optional)
     * @param tempo Show descriptors whose tempo range includes the specified tempo in beats per minute (optional)
     * @param tempoTo Show descriptors with a tempo that is less than or equal to the specified number (optional)
     * @param tempoFrom Show descriptors that have a tempo range that includes the specified tempo in beats per minute (optional)
     * @param name Show descriptors with the specified name (case-sensitive) (optional)
     * @param tag Show descriptors with the specified tag, such as Cinematic or Roomy (case-sensitive) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomDescriptorsAsync(BigDecimal renderSpeedOver, String bandId, String bandName, Integer page, Integer perPage, List<String> id, String instrumentName, String instrumentId, BigDecimal tempo, BigDecimal tempoTo, BigDecimal tempoFrom, String name, String tag, final ApiCallback<DescriptorsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomDescriptorsValidateBeforeCall(renderSpeedOver, bandId, bandName, page, perPage, id, instrumentName, instrumentId, tempo, tempoTo, tempoFrom, name, tag, _callback);
        Type localVarReturnType = new TypeToken<DescriptorsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listCustomInstruments
     * @param id Show instruments with the specified ID (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param page Page number (optional, default to 1)
     * @param name Show instruments with the specified name (case-sensitive) (optional)
     * @param tag Show instruments with the specified tag, such as Percussion or Strings (case-sensitive) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomInstrumentsCall(List<String> id, Integer perPage, Integer page, String name, String tag, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/ai/audio/instruments";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "id", id));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (name != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("name", name));
        }

        if (tag != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tag", tag));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode", "basic" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listCustomInstrumentsValidateBeforeCall(List<String> id, Integer perPage, Integer page, String name, String tag, final ApiCallback _callback) throws ApiException {
        return listCustomInstrumentsCall(id, perPage, page, name, tag, _callback);

    }

    /**
     * List computer audio instruments
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * @param id Show instruments with the specified ID (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param page Page number (optional, default to 1)
     * @param name Show instruments with the specified name (case-sensitive) (optional)
     * @param tag Show instruments with the specified tag, such as Percussion or Strings (case-sensitive) (optional)
     * @return InstrumentsListResult
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public InstrumentsListResult listCustomInstruments(List<String> id, Integer perPage, Integer page, String name, String tag) throws ApiException {
        ApiResponse<InstrumentsListResult> localVarResp = listCustomInstrumentsWithHttpInfo(id, perPage, page, name, tag);
        return localVarResp.getData();
    }

    /**
     * List computer audio instruments
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * @param id Show instruments with the specified ID (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param page Page number (optional, default to 1)
     * @param name Show instruments with the specified name (case-sensitive) (optional)
     * @param tag Show instruments with the specified tag, such as Percussion or Strings (case-sensitive) (optional)
     * @return ApiResponse&lt;InstrumentsListResult&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<InstrumentsListResult> listCustomInstrumentsWithHttpInfo(List<String> id, Integer perPage, Integer page, String name, String tag) throws ApiException {
        okhttp3.Call localVarCall = listCustomInstrumentsValidateBeforeCall(id, perPage, page, name, tag, null);
        Type localVarReturnType = new TypeToken<InstrumentsListResult>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List computer audio instruments (asynchronously)
     * This endpoint lists the instruments that you can include in computer audio. If you specify more than one search parameter, the API uses an AND condition.
     * @param id Show instruments with the specified ID (optional)
     * @param perPage Number of results per page (optional, default to 20)
     * @param page Page number (optional, default to 1)
     * @param name Show instruments with the specified name (case-sensitive) (optional)
     * @param tag Show instruments with the specified tag, such as Percussion or Strings (case-sensitive) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listCustomInstrumentsAsync(List<String> id, Integer perPage, Integer page, String name, String tag, final ApiCallback<InstrumentsListResult> _callback) throws ApiException {

        okhttp3.Call localVarCall = listCustomInstrumentsValidateBeforeCall(id, perPage, page, name, tag, _callback);
        Type localVarReturnType = new TypeToken<InstrumentsListResult>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
