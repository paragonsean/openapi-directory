/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CatalogCollection;
import org.openapitools.client.model.CatalogCollectionDataList;
import org.openapitools.client.model.CatalogCollectionItemDataList;
import org.openapitools.client.model.CreateCatalogCollection;
import org.openapitools.client.model.CreateCatalogCollectionItems;
import org.openapitools.client.model.RemoveCatalogCollectionItems;
import org.openapitools.client.model.UpdateCatalogCollection;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CatalogApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CatalogApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CatalogApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addToCollection
     * @param collectionId The ID of the collection to add assets to (required)
     * @param createCatalogCollectionItems Collection item attributes to add to collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addToCollectionCall(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCatalogCollectionItems;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}/items"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addToCollectionValidateBeforeCall(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling addToCollection(Async)");
        }

        // verify the required parameter 'createCatalogCollectionItems' is set
        if (createCatalogCollectionItems == null) {
            throw new ApiException("Missing the required parameter 'createCatalogCollectionItems' when calling addToCollection(Async)");
        }

        return addToCollectionCall(collectionId, createCatalogCollectionItems, _callback);

    }

    /**
     * Add items to catalog collections
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to add assets to (required)
     * @param createCatalogCollectionItems Collection item attributes to add to collection (required)
     * @return CatalogCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CatalogCollection addToCollection(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems) throws ApiException {
        ApiResponse<CatalogCollection> localVarResp = addToCollectionWithHttpInfo(collectionId, createCatalogCollectionItems);
        return localVarResp.getData();
    }

    /**
     * Add items to catalog collections
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to add assets to (required)
     * @param createCatalogCollectionItems Collection item attributes to add to collection (required)
     * @return ApiResponse&lt;CatalogCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogCollection> addToCollectionWithHttpInfo(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems) throws ApiException {
        okhttp3.Call localVarCall = addToCollectionValidateBeforeCall(collectionId, createCatalogCollectionItems, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add items to catalog collections (asynchronously)
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to add assets to (required)
     * @param createCatalogCollectionItems Collection item attributes to add to collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addToCollectionAsync(String collectionId, CreateCatalogCollectionItems createCatalogCollectionItems, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = addToCollectionValidateBeforeCall(collectionId, createCatalogCollectionItems, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createCollection
     * @param createCatalogCollection Create a catalog collection and, optionally, add items. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionCall(CreateCatalogCollection createCatalogCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = createCatalogCollection;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createCollectionValidateBeforeCall(CreateCatalogCollection createCatalogCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'createCatalogCollection' is set
        if (createCatalogCollection == null) {
            throw new ApiException("Missing the required parameter 'createCatalogCollection' when calling createCollection(Async)");
        }

        return createCollectionCall(createCatalogCollection, _callback);

    }

    /**
     * Create catalog collections
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use &#x60;PATCH /v2/catalog/collections/{collection_id}/items&#x60;.
     * @param createCatalogCollection Create a catalog collection and, optionally, add items. (required)
     * @return CatalogCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CatalogCollection createCollection(CreateCatalogCollection createCatalogCollection) throws ApiException {
        ApiResponse<CatalogCollection> localVarResp = createCollectionWithHttpInfo(createCatalogCollection);
        return localVarResp.getData();
    }

    /**
     * Create catalog collections
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use &#x60;PATCH /v2/catalog/collections/{collection_id}/items&#x60;.
     * @param createCatalogCollection Create a catalog collection and, optionally, add items. (required)
     * @return ApiResponse&lt;CatalogCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogCollection> createCollectionWithHttpInfo(CreateCatalogCollection createCatalogCollection) throws ApiException {
        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(createCatalogCollection, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create catalog collections (asynchronously)
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use &#x60;PATCH /v2/catalog/collections/{collection_id}/items&#x60;.
     * @param createCatalogCollection Create a catalog collection and, optionally, add items. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createCollectionAsync(CreateCatalogCollection createCatalogCollection, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = createCollectionValidateBeforeCall(createCatalogCollection, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteCollection
     * @param collectionId The ID of the collection to delete (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionCall(String collectionId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteCollectionValidateBeforeCall(String collectionId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteCollection(Async)");
        }

        return deleteCollectionCall(collectionId, _callback);

    }

    /**
     * Delete catalog collections
     * This endpoint deletes a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to delete (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public void deleteCollection(String collectionId) throws ApiException {
        deleteCollectionWithHttpInfo(collectionId);
    }

    /**
     * Delete catalog collections
     * This endpoint deletes a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to delete (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteCollectionWithHttpInfo(String collectionId) throws ApiException {
        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collectionId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete catalog collections (asynchronously)
     * This endpoint deletes a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to delete (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Collection not found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteCollectionAsync(String collectionId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteCollectionValidateBeforeCall(collectionId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteFromCollection
     * @param collectionId The ID of the collection to remove assets from (required)
     * @param removeCatalogCollectionItems Items to remove from the collection (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFromCollectionCall(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeCatalogCollectionItems;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}/items"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteFromCollectionValidateBeforeCall(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling deleteFromCollection(Async)");
        }

        // verify the required parameter 'removeCatalogCollectionItems' is set
        if (removeCatalogCollectionItems == null) {
            throw new ApiException("Missing the required parameter 'removeCatalogCollectionItems' when calling deleteFromCollection(Async)");
        }

        return deleteFromCollectionCall(collectionId, removeCatalogCollectionItems, _callback);

    }

    /**
     * Remove items from catalog collection
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to remove assets from (required)
     * @param removeCatalogCollectionItems Items to remove from the collection (required)
     * @return CatalogCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CatalogCollection deleteFromCollection(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems) throws ApiException {
        ApiResponse<CatalogCollection> localVarResp = deleteFromCollectionWithHttpInfo(collectionId, removeCatalogCollectionItems);
        return localVarResp.getData();
    }

    /**
     * Remove items from catalog collection
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to remove assets from (required)
     * @param removeCatalogCollectionItems Items to remove from the collection (required)
     * @return ApiResponse&lt;CatalogCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogCollection> deleteFromCollectionWithHttpInfo(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems) throws ApiException {
        okhttp3.Call localVarCall = deleteFromCollectionValidateBeforeCall(collectionId, removeCatalogCollectionItems, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove items from catalog collection (asynchronously)
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     * @param collectionId The ID of the collection to remove assets from (required)
     * @param removeCatalogCollectionItems Items to remove from the collection (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteFromCollectionAsync(String collectionId, RemoveCatalogCollectionItems removeCatalogCollectionItems, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteFromCollectionValidateBeforeCall(collectionId, removeCatalogCollectionItems, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCollections
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by (optional, default to newest)
     * @param shared Set to true to omit collections that you own and return only collections  that are shared with you (optional, default to false)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionsCall(Integer page, Integer perPage, String sort, Boolean shared, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (shared != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shared", shared));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCollectionsValidateBeforeCall(Integer page, Integer perPage, String sort, Boolean shared, final ApiCallback _callback) throws ApiException {
        return getCollectionsCall(page, perPage, sort, shared, _callback);

    }

    /**
     * List catalog collections
     * This endpoint returns a list of catalog collections.
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by (optional, default to newest)
     * @param shared Set to true to omit collections that you own and return only collections  that are shared with you (optional, default to false)
     * @return CatalogCollectionDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public CatalogCollectionDataList getCollections(Integer page, Integer perPage, String sort, Boolean shared) throws ApiException {
        ApiResponse<CatalogCollectionDataList> localVarResp = getCollectionsWithHttpInfo(page, perPage, sort, shared);
        return localVarResp.getData();
    }

    /**
     * List catalog collections
     * This endpoint returns a list of catalog collections.
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by (optional, default to newest)
     * @param shared Set to true to omit collections that you own and return only collections  that are shared with you (optional, default to false)
     * @return ApiResponse&lt;CatalogCollectionDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogCollectionDataList> getCollectionsWithHttpInfo(Integer page, Integer perPage, String sort, Boolean shared) throws ApiException {
        okhttp3.Call localVarCall = getCollectionsValidateBeforeCall(page, perPage, sort, shared, null);
        Type localVarReturnType = new TypeToken<CatalogCollectionDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List catalog collections (asynchronously)
     * This endpoint returns a list of catalog collections.
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param sort Sort by (optional, default to newest)
     * @param shared Set to true to omit collections that you own and return only collections  that are shared with you (optional, default to false)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid status value </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCollectionsAsync(Integer page, Integer perPage, String sort, Boolean shared, final ApiCallback<CatalogCollectionDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCollectionsValidateBeforeCall(page, perPage, sort, shared, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollectionDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchCatalog
     * @param sort Sort by (optional, default to newest)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param collectionId Filter by collection id (optional)
     * @param assetType Filter by asset type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCatalogCall(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/catalog/search";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (sort != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sort", sort));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        if (query != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("query", query));
        }

        if (collectionId != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "collection_id", collectionId));
        }

        if (assetType != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "asset_type", assetType));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchCatalogValidateBeforeCall(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType, final ApiCallback _callback) throws ApiException {
        return searchCatalogCall(sort, page, perPage, query, collectionId, assetType, _callback);

    }

    /**
     * Search catalogs for assets
     * This endpoint searches for assets in the account&#39;s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param sort Sort by (optional, default to newest)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param collectionId Filter by collection id (optional)
     * @param assetType Filter by asset type (optional)
     * @return CatalogCollectionItemDataList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public CatalogCollectionItemDataList searchCatalog(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType) throws ApiException {
        ApiResponse<CatalogCollectionItemDataList> localVarResp = searchCatalogWithHttpInfo(sort, page, perPage, query, collectionId, assetType);
        return localVarResp.getData();
    }

    /**
     * Search catalogs for assets
     * This endpoint searches for assets in the account&#39;s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param sort Sort by (optional, default to newest)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param collectionId Filter by collection id (optional)
     * @param assetType Filter by asset type (optional)
     * @return ApiResponse&lt;CatalogCollectionItemDataList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogCollectionItemDataList> searchCatalogWithHttpInfo(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType) throws ApiException {
        okhttp3.Call localVarCall = searchCatalogValidateBeforeCall(sort, page, perPage, query, collectionId, assetType, null);
        Type localVarReturnType = new TypeToken<CatalogCollectionItemDataList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Search catalogs for assets (asynchronously)
     * This endpoint searches for assets in the account&#39;s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     * @param sort Sort by (optional, default to newest)
     * @param page Page number (optional, default to 1)
     * @param perPage Number of results per page (optional, default to 20)
     * @param query One or more search terms separated by spaces (optional)
     * @param collectionId Filter by collection id (optional)
     * @param assetType Filter by asset type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchCatalogAsync(String sort, Integer page, Integer perPage, String query, List<String> collectionId, List<String> assetType, final ApiCallback<CatalogCollectionItemDataList> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchCatalogValidateBeforeCall(sort, page, perPage, query, collectionId, assetType, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollectionItemDataList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateCollection
     * @param collectionId ID of collection that needs to be modified (required)
     * @param updateCatalogCollection Collections Metadata to update (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionCall(String collectionId, UpdateCatalogCollection updateCatalogCollection, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateCatalogCollection;

        // create path and map variables
        String localVarPath = "/v2/catalog/collections/{collection_id}"
            .replace("{" + "collection_id" + "}", localVarApiClient.escapeString(collectionId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "customer_accessCode" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateCollectionValidateBeforeCall(String collectionId, UpdateCatalogCollection updateCatalogCollection, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'collectionId' is set
        if (collectionId == null) {
            throw new ApiException("Missing the required parameter 'collectionId' when calling updateCollection(Async)");
        }

        // verify the required parameter 'updateCatalogCollection' is set
        if (updateCatalogCollection == null) {
            throw new ApiException("Missing the required parameter 'updateCatalogCollection' when calling updateCollection(Async)");
        }

        return updateCollectionCall(collectionId, updateCatalogCollection, _callback);

    }

    /**
     * Update collection metadata
     * This endpoint updates the metadata of a catalog collection.
     * @param collectionId ID of collection that needs to be modified (required)
     * @param updateCatalogCollection Collections Metadata to update (required)
     * @return CatalogCollection
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public CatalogCollection updateCollection(String collectionId, UpdateCatalogCollection updateCatalogCollection) throws ApiException {
        ApiResponse<CatalogCollection> localVarResp = updateCollectionWithHttpInfo(collectionId, updateCatalogCollection);
        return localVarResp.getData();
    }

    /**
     * Update collection metadata
     * This endpoint updates the metadata of a catalog collection.
     * @param collectionId ID of collection that needs to be modified (required)
     * @param updateCatalogCollection Collections Metadata to update (required)
     * @return ApiResponse&lt;CatalogCollection&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CatalogCollection> updateCollectionWithHttpInfo(String collectionId, UpdateCatalogCollection updateCatalogCollection) throws ApiException {
        okhttp3.Call localVarCall = updateCollectionValidateBeforeCall(collectionId, updateCatalogCollection, null);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update collection metadata (asynchronously)
     * This endpoint updates the metadata of a catalog collection.
     * @param collectionId ID of collection that needs to be modified (required)
     * @param updateCatalogCollection Collections Metadata to update (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateCollectionAsync(String collectionId, UpdateCatalogCollection updateCatalogCollection, final ApiCallback<CatalogCollection> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateCollectionValidateBeforeCall(collectionId, updateCatalogCollection, _callback);
        Type localVarReturnType = new TypeToken<CatalogCollection>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
