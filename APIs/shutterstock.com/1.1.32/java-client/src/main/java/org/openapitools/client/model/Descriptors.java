/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.Bands;
import org.openapitools.client.model.Instruments;
import org.openapitools.client.model.Preview;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Information about a descriptor
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class Descriptors {
  public static final String SERIALIZED_NAME_AVERAGE_RENDER_SPEED = "average_render_speed";
  @SerializedName(SERIALIZED_NAME_AVERAGE_RENDER_SPEED)
  private BigDecimal averageRenderSpeed;

  public static final String SERIALIZED_NAME_BANDS = "bands";
  @SerializedName(SERIALIZED_NAME_BANDS)
  private List<Bands> bands = new ArrayList<>();

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_INSTRUMENTS = "instruments";
  @SerializedName(SERIALIZED_NAME_INSTRUMENTS)
  private List<Instruments> instruments = new ArrayList<>();

  public static final String SERIALIZED_NAME_MAX_TEMPO = "max_tempo";
  @SerializedName(SERIALIZED_NAME_MAX_TEMPO)
  private BigDecimal maxTempo;

  public static final String SERIALIZED_NAME_MIN_TEMPO = "min_tempo";
  @SerializedName(SERIALIZED_NAME_MIN_TEMPO)
  private BigDecimal minTempo;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PREVIEWS = "previews";
  @SerializedName(SERIALIZED_NAME_PREVIEWS)
  private List<Preview> previews = new ArrayList<>();

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = new ArrayList<>();

  public Descriptors() {
  }

  public Descriptors averageRenderSpeed(BigDecimal averageRenderSpeed) {
    this.averageRenderSpeed = averageRenderSpeed;
    return this;
  }

  /**
   * The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds
   * @return averageRenderSpeed
   */
  @javax.annotation.Nullable
  public BigDecimal getAverageRenderSpeed() {
    return averageRenderSpeed;
  }

  public void setAverageRenderSpeed(BigDecimal averageRenderSpeed) {
    this.averageRenderSpeed = averageRenderSpeed;
  }


  public Descriptors bands(List<Bands> bands) {
    this.bands = bands;
    return this;
  }

  public Descriptors addBandsItem(Bands bandsItem) {
    if (this.bands == null) {
      this.bands = new ArrayList<>();
    }
    this.bands.add(bandsItem);
    return this;
  }

  /**
   * The bands that are available to use this descriptor
   * @return bands
   */
  @javax.annotation.Nullable
  public List<Bands> getBands() {
    return bands;
  }

  public void setBands(List<Bands> bands) {
    this.bands = bands;
  }


  public Descriptors id(String id) {
    this.id = id;
    return this;
  }

  /**
   * The ID of the descriptor
   * @return id
   */
  @javax.annotation.Nullable
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public Descriptors instruments(List<Instruments> instruments) {
    this.instruments = instruments;
    return this;
  }

  public Descriptors addInstrumentsItem(Instruments instrumentsItem) {
    if (this.instruments == null) {
      this.instruments = new ArrayList<>();
    }
    this.instruments.add(instrumentsItem);
    return this;
  }

  /**
   * The instruments that can play with this descriptor
   * @return instruments
   */
  @javax.annotation.Nullable
  public List<Instruments> getInstruments() {
    return instruments;
  }

  public void setInstruments(List<Instruments> instruments) {
    this.instruments = instruments;
  }


  public Descriptors maxTempo(BigDecimal maxTempo) {
    this.maxTempo = maxTempo;
    return this;
  }

  /**
   * The maximum beats per minute that the descriptor is intended to be used with
   * @return maxTempo
   */
  @javax.annotation.Nullable
  public BigDecimal getMaxTempo() {
    return maxTempo;
  }

  public void setMaxTempo(BigDecimal maxTempo) {
    this.maxTempo = maxTempo;
  }


  public Descriptors minTempo(BigDecimal minTempo) {
    this.minTempo = minTempo;
    return this;
  }

  /**
   * The minimum beats per minute that the descriptor is intended to be used with
   * @return minTempo
   */
  @javax.annotation.Nullable
  public BigDecimal getMinTempo() {
    return minTempo;
  }

  public void setMinTempo(BigDecimal minTempo) {
    this.minTempo = minTempo;
  }


  public Descriptors name(String name) {
    this.name = name;
    return this;
  }

  /**
   * The name of the descriptor
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public Descriptors previews(List<Preview> previews) {
    this.previews = previews;
    return this;
  }

  public Descriptors addPreviewsItem(Preview previewsItem) {
    if (this.previews == null) {
      this.previews = new ArrayList<>();
    }
    this.previews.add(previewsItem);
    return this;
  }

  /**
   * Preview of the descriptor
   * @return previews
   */
  @javax.annotation.Nullable
  public List<Preview> getPreviews() {
    return previews;
  }

  public void setPreviews(List<Preview> previews) {
    this.previews = previews;
  }


  public Descriptors tags(List<String> tags) {
    this.tags = tags;
    return this;
  }

  public Descriptors addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

  /**
   * Tags that describe the descriptor
   * @return tags
   */
  @javax.annotation.Nullable
  public List<String> getTags() {
    return tags;
  }

  public void setTags(List<String> tags) {
    this.tags = tags;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Descriptors descriptors = (Descriptors) o;
    return Objects.equals(this.averageRenderSpeed, descriptors.averageRenderSpeed) &&
        Objects.equals(this.bands, descriptors.bands) &&
        Objects.equals(this.id, descriptors.id) &&
        Objects.equals(this.instruments, descriptors.instruments) &&
        Objects.equals(this.maxTempo, descriptors.maxTempo) &&
        Objects.equals(this.minTempo, descriptors.minTempo) &&
        Objects.equals(this.name, descriptors.name) &&
        Objects.equals(this.previews, descriptors.previews) &&
        Objects.equals(this.tags, descriptors.tags);
  }

  @Override
  public int hashCode() {
    return Objects.hash(averageRenderSpeed, bands, id, instruments, maxTempo, minTempo, name, previews, tags);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Descriptors {\n");
    sb.append("    averageRenderSpeed: ").append(toIndentedString(averageRenderSpeed)).append("\n");
    sb.append("    bands: ").append(toIndentedString(bands)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    instruments: ").append(toIndentedString(instruments)).append("\n");
    sb.append("    maxTempo: ").append(toIndentedString(maxTempo)).append("\n");
    sb.append("    minTempo: ").append(toIndentedString(minTempo)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    previews: ").append(toIndentedString(previews)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("average_render_speed");
    openapiFields.add("bands");
    openapiFields.add("id");
    openapiFields.add("instruments");
    openapiFields.add("max_tempo");
    openapiFields.add("min_tempo");
    openapiFields.add("name");
    openapiFields.add("previews");
    openapiFields.add("tags");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to Descriptors
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!Descriptors.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Descriptors is not found in the empty JSON string", Descriptors.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!Descriptors.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `Descriptors` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (jsonObj.get("bands") != null && !jsonObj.get("bands").isJsonNull()) {
        JsonArray jsonArraybands = jsonObj.getAsJsonArray("bands");
        if (jsonArraybands != null) {
          // ensure the json data is an array
          if (!jsonObj.get("bands").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `bands` to be an array in the JSON string but got `%s`", jsonObj.get("bands").toString()));
          }

          // validate the optional field `bands` (array)
          for (int i = 0; i < jsonArraybands.size(); i++) {
            Bands.validateJsonElement(jsonArraybands.get(i));
          };
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (jsonObj.get("instruments") != null && !jsonObj.get("instruments").isJsonNull()) {
        JsonArray jsonArrayinstruments = jsonObj.getAsJsonArray("instruments");
        if (jsonArrayinstruments != null) {
          // ensure the json data is an array
          if (!jsonObj.get("instruments").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `instruments` to be an array in the JSON string but got `%s`", jsonObj.get("instruments").toString()));
          }

          // validate the optional field `instruments` (array)
          for (int i = 0; i < jsonArrayinstruments.size(); i++) {
            Instruments.validateJsonElement(jsonArrayinstruments.get(i));
          };
        }
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if (jsonObj.get("previews") != null && !jsonObj.get("previews").isJsonNull()) {
        JsonArray jsonArraypreviews = jsonObj.getAsJsonArray("previews");
        if (jsonArraypreviews != null) {
          // ensure the json data is an array
          if (!jsonObj.get("previews").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `previews` to be an array in the JSON string but got `%s`", jsonObj.get("previews").toString()));
          }

          // validate the optional field `previews` (array)
          for (int i = 0; i < jsonArraypreviews.size(); i++) {
            Preview.validateJsonElement(jsonArraypreviews.get(i));
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("tags") != null && !jsonObj.get("tags").isJsonNull() && !jsonObj.get("tags").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tags` to be an array in the JSON string but got `%s`", jsonObj.get("tags").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Descriptors.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Descriptors' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Descriptors> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Descriptors.class));

       return (TypeAdapter<T>) new TypeAdapter<Descriptors>() {
           @Override
           public void write(JsonWriter out, Descriptors value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public Descriptors read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of Descriptors given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of Descriptors
   * @throws IOException if the JSON string is invalid with respect to Descriptors
   */
  public static Descriptors fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Descriptors.class);
  }

  /**
   * Convert an instance of Descriptors to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

