/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.Arrays;
import org.openapitools.client.model.FeaturedCollectionCoverItem;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * Metadata about a featured collection
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:41:47.722523-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class FeaturedCollection {
  public static final String SERIALIZED_NAME_COVER_ITEM = "cover_item";
  @SerializedName(SERIALIZED_NAME_COVER_ITEM)
  private FeaturedCollectionCoverItem coverItem;

  public static final String SERIALIZED_NAME_CREATED_TIME = "created_time";
  @SerializedName(SERIALIZED_NAME_CREATED_TIME)
  private OffsetDateTime createdTime;

  public static final String SERIALIZED_NAME_HERO_ITEM = "hero_item";
  @SerializedName(SERIALIZED_NAME_HERO_ITEM)
  private FeaturedCollectionCoverItem heroItem;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_ITEMS_UPDATED_TIME = "items_updated_time";
  @SerializedName(SERIALIZED_NAME_ITEMS_UPDATED_TIME)
  private OffsetDateTime itemsUpdatedTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_SHARE_URL = "share_url";
  @SerializedName(SERIALIZED_NAME_SHARE_URL)
  private String shareUrl;

  public static final String SERIALIZED_NAME_TOTAL_ITEM_COUNT = "total_item_count";
  @SerializedName(SERIALIZED_NAME_TOTAL_ITEM_COUNT)
  private Integer totalItemCount;

  public static final String SERIALIZED_NAME_UPDATED_TIME = "updated_time";
  @SerializedName(SERIALIZED_NAME_UPDATED_TIME)
  private OffsetDateTime updatedTime;

  public FeaturedCollection() {
  }

  public FeaturedCollection coverItem(FeaturedCollectionCoverItem coverItem) {
    this.coverItem = coverItem;
    return this;
  }

  /**
   * Get coverItem
   * @return coverItem
   */
  @javax.annotation.Nullable
  public FeaturedCollectionCoverItem getCoverItem() {
    return coverItem;
  }

  public void setCoverItem(FeaturedCollectionCoverItem coverItem) {
    this.coverItem = coverItem;
  }


  public FeaturedCollection createdTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
    return this;
  }

  /**
   * Date that the collection was created
   * @return createdTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getCreatedTime() {
    return createdTime;
  }

  public void setCreatedTime(OffsetDateTime createdTime) {
    this.createdTime = createdTime;
  }


  public FeaturedCollection heroItem(FeaturedCollectionCoverItem heroItem) {
    this.heroItem = heroItem;
    return this;
  }

  /**
   * Get heroItem
   * @return heroItem
   */
  @javax.annotation.Nullable
  public FeaturedCollectionCoverItem getHeroItem() {
    return heroItem;
  }

  public void setHeroItem(FeaturedCollectionCoverItem heroItem) {
    this.heroItem = heroItem;
  }


  public FeaturedCollection id(String id) {
    this.id = id;
    return this;
  }

  /**
   * Collection ID
   * @return id
   */
  @javax.annotation.Nonnull
  public String getId() {
    return id;
  }

  public void setId(String id) {
    this.id = id;
  }


  public FeaturedCollection itemsUpdatedTime(OffsetDateTime itemsUpdatedTime) {
    this.itemsUpdatedTime = itemsUpdatedTime;
    return this;
  }

  /**
   * Date that an item in the collection was last added or removed
   * @return itemsUpdatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getItemsUpdatedTime() {
    return itemsUpdatedTime;
  }

  public void setItemsUpdatedTime(OffsetDateTime itemsUpdatedTime) {
    this.itemsUpdatedTime = itemsUpdatedTime;
  }


  public FeaturedCollection name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Name of the collection
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public FeaturedCollection shareUrl(String shareUrl) {
    this.shareUrl = shareUrl;
    return this;
  }

  /**
   * Unique share url for the collection
   * @return shareUrl
   */
  @javax.annotation.Nullable
  public String getShareUrl() {
    return shareUrl;
  }

  public void setShareUrl(String shareUrl) {
    this.shareUrl = shareUrl;
  }


  public FeaturedCollection totalItemCount(Integer totalItemCount) {
    this.totalItemCount = totalItemCount;
    return this;
  }

  /**
   * Total number of items in the collection
   * @return totalItemCount
   */
  @javax.annotation.Nonnull
  public Integer getTotalItemCount() {
    return totalItemCount;
  }

  public void setTotalItemCount(Integer totalItemCount) {
    this.totalItemCount = totalItemCount;
  }


  public FeaturedCollection updatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
    return this;
  }

  /**
   * Date that the collection was last modified
   * @return updatedTime
   */
  @javax.annotation.Nullable
  public OffsetDateTime getUpdatedTime() {
    return updatedTime;
  }

  public void setUpdatedTime(OffsetDateTime updatedTime) {
    this.updatedTime = updatedTime;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    FeaturedCollection featuredCollection = (FeaturedCollection) o;
    return Objects.equals(this.coverItem, featuredCollection.coverItem) &&
        Objects.equals(this.createdTime, featuredCollection.createdTime) &&
        Objects.equals(this.heroItem, featuredCollection.heroItem) &&
        Objects.equals(this.id, featuredCollection.id) &&
        Objects.equals(this.itemsUpdatedTime, featuredCollection.itemsUpdatedTime) &&
        Objects.equals(this.name, featuredCollection.name) &&
        Objects.equals(this.shareUrl, featuredCollection.shareUrl) &&
        Objects.equals(this.totalItemCount, featuredCollection.totalItemCount) &&
        Objects.equals(this.updatedTime, featuredCollection.updatedTime);
  }

  @Override
  public int hashCode() {
    return Objects.hash(coverItem, createdTime, heroItem, id, itemsUpdatedTime, name, shareUrl, totalItemCount, updatedTime);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class FeaturedCollection {\n");
    sb.append("    coverItem: ").append(toIndentedString(coverItem)).append("\n");
    sb.append("    createdTime: ").append(toIndentedString(createdTime)).append("\n");
    sb.append("    heroItem: ").append(toIndentedString(heroItem)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    itemsUpdatedTime: ").append(toIndentedString(itemsUpdatedTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    shareUrl: ").append(toIndentedString(shareUrl)).append("\n");
    sb.append("    totalItemCount: ").append(toIndentedString(totalItemCount)).append("\n");
    sb.append("    updatedTime: ").append(toIndentedString(updatedTime)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("cover_item");
    openapiFields.add("created_time");
    openapiFields.add("hero_item");
    openapiFields.add("id");
    openapiFields.add("items_updated_time");
    openapiFields.add("name");
    openapiFields.add("share_url");
    openapiFields.add("total_item_count");
    openapiFields.add("updated_time");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("total_item_count");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to FeaturedCollection
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!FeaturedCollection.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in FeaturedCollection is not found in the empty JSON string", FeaturedCollection.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!FeaturedCollection.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `FeaturedCollection` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : FeaturedCollection.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `cover_item`
      if (jsonObj.get("cover_item") != null && !jsonObj.get("cover_item").isJsonNull()) {
        FeaturedCollectionCoverItem.validateJsonElement(jsonObj.get("cover_item"));
      }
      // validate the optional field `hero_item`
      if (jsonObj.get("hero_item") != null && !jsonObj.get("hero_item").isJsonNull()) {
        FeaturedCollectionCoverItem.validateJsonElement(jsonObj.get("hero_item"));
      }
      if (!jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("share_url") != null && !jsonObj.get("share_url").isJsonNull()) && !jsonObj.get("share_url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `share_url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("share_url").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!FeaturedCollection.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'FeaturedCollection' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<FeaturedCollection> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(FeaturedCollection.class));

       return (TypeAdapter<T>) new TypeAdapter<FeaturedCollection>() {
           @Override
           public void write(JsonWriter out, FeaturedCollection value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public FeaturedCollection read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of FeaturedCollection given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of FeaturedCollection
   * @throws IOException if the JSON string is invalid with respect to FeaturedCollection
   */
  public static FeaturedCollection fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, FeaturedCollection.class);
  }

  /**
   * Convert an instance of FeaturedCollection to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

