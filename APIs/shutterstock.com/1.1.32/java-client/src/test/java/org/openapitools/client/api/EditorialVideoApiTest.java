/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.EditorialVideoCategoryResults;
import org.openapitools.client.model.EditorialVideoContent;
import org.openapitools.client.model.EditorialVideoSearchResults;
import org.openapitools.client.model.LicenseEditorialContentResults;
import org.openapitools.client.model.LicenseEditorialVideoContentRequest;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EditorialVideoApi
 */
@Disabled
public class EditorialVideoApiTest {

    private final EditorialVideoApi api = new EditorialVideoApi();

    /**
     * Get editorial video content details
     *
     * This endpoint shows information about an editorial image, including a URL to a preview image and the sizes that it is available in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEditorialVideoTest() throws ApiException {
        String id = null;
        String country = null;
        String searchId = null;
        EditorialVideoContent response = api.getEditorialVideo(id, country, searchId);
        // TODO: test validations
    }

    /**
     * List editorial video licenses
     *
     * This endpoint lists existing editorial video licenses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getEditorialVideoLicenseListTest() throws ApiException {
        String videoId = null;
        String license = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        String username = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String downloadAvailability = null;
        Boolean teamHistory = null;
        DownloadHistoryDataList response = api.getEditorialVideoLicenseList(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        // TODO: test validations
    }

    /**
     * License editorial video content
     *
     * This endpoint gets licenses for one or more editorial videos. You must specify the country and one or more editorial videos to license. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licenseEditorialVideoTest() throws ApiException {
        LicenseEditorialVideoContentRequest licenseEditorialVideoContentRequest = null;
        LicenseEditorialContentResults response = api.licenseEditorialVideo(licenseEditorialVideoContentRequest);
        // TODO: test validations
    }

    /**
     * List editorial video categories
     *
     * This endpoint lists the categories that editorial videos can belong to, which are separate from the categories that other types of assets can belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEditorialVideoCategoriesTest() throws ApiException {
        EditorialVideoCategoryResults response = api.listEditorialVideoCategories();
        // TODO: test validations
    }

    /**
     * Search editorial video content
     *
     * This endpoint searches for editorial videos. If you specify more than one search parameter, the API uses an AND condition. For example, if you set the &#x60;category&#x60; parameter to \&quot;Alone,Performing\&quot; and also specify a &#x60;query&#x60; parameter, the results include only videos that match the query and are in both the Alone and Performing categories.  You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchEditorialVideosTest() throws ApiException {
        String country = null;
        String query = null;
        String sort = null;
        String category = null;
        List<String> supplierCode = null;
        LocalDate dateStart = null;
        LocalDate dateEnd = null;
        String resolution = null;
        BigDecimal fps = null;
        Integer perPage = null;
        String cursor = null;
        EditorialVideoSearchResults response = api.searchEditorialVideos(country, query, sort, category, supplierCode, dateStart, dateEnd, resolution, fps, perPage, cursor);
        // TODO: test validations
    }

}
