/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.CategoryDataList;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionCreateRequest;
import org.openapitools.client.model.CollectionCreateResponse;
import org.openapitools.client.model.CollectionDataList;
import org.openapitools.client.model.CollectionItemDataList;
import org.openapitools.client.model.CollectionItemRequest;
import org.openapitools.client.model.CollectionUpdateRequest;
import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.FeaturedCollection;
import org.openapitools.client.model.FeaturedCollectionDataList;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.LicenseVideoRequest;
import org.openapitools.client.model.LicenseVideoResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RedownloadVideo;
import org.openapitools.client.model.Suggestions;
import org.openapitools.client.model.UpdatedMediaDataList;
import org.openapitools.client.model.Url;
import org.openapitools.client.model.Video;
import org.openapitools.client.model.VideoCollectionItemDataList;
import org.openapitools.client.model.VideoDataList;
import org.openapitools.client.model.VideoSearchResults;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for VideosApi
 */
@Disabled
public class VideosApiTest {

    private final VideosApi api = new VideosApi();

    /**
     * Add videos to collections
     *
     * This endpoint adds one or more videos to a collection by video IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addVideoCollectionItemsTest() throws ApiException {
        String id = null;
        CollectionItemRequest collectionItemRequest = null;
        api.addVideoCollectionItems(id, collectionItemRequest);
        // TODO: test validations
    }

    /**
     * Create video collections
     *
     * This endpoint creates one or more collections (clipboxes). To add videos to collections, use &#x60;POST /v2/videos/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createVideoCollectionTest() throws ApiException {
        CollectionCreateRequest collectionCreateRequest = null;
        CollectionCreateResponse response = api.createVideoCollection(collectionCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete video collections
     *
     * This endpoint deletes a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVideoCollectionTest() throws ApiException {
        String id = null;
        api.deleteVideoCollection(id);
        // TODO: test validations
    }

    /**
     * Remove videos from collections
     *
     * This endpoint removes one or more videos from a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteVideoCollectionItemsTest() throws ApiException {
        String id = null;
        List<String> itemId = null;
        api.deleteVideoCollectionItems(id, itemId);
        // TODO: test validations
    }

    /**
     * Download videos
     *
     * This endpoint redownloads videos that you have already received a license for.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadVideosTest() throws ApiException {
        String id = null;
        RedownloadVideo redownloadVideo = null;
        Url response = api.downloadVideos(id, redownloadVideo);
        // TODO: test validations
    }

    /**
     * List similar videos
     *
     * This endpoint searches for videos that are similar to a video that you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void findSimilarVideosTest() throws ApiException {
        String id = null;
        Language language = null;
        Integer page = null;
        Integer perPage = null;
        String view = null;
        VideoSearchResults response = api.findSimilarVideos(id, language, page, perPage, view);
        // TODO: test validations
    }

    /**
     * Get the details of featured video collections
     *
     * This endpoint gets more detailed information about a featured video collection, including its cover video and timestamps for its creation and most recent update. To get the videos, use &#x60;GET /v2/videos/collections/featured/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeaturedVideoCollectionTest() throws ApiException {
        String id = null;
        String embed = null;
        FeaturedCollection response = api.getFeaturedVideoCollection(id, embed);
        // TODO: test validations
    }

    /**
     * Get the contents of featured video collections
     *
     * This endpoint lists the IDs of videos in a featured collection and the date that each was added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeaturedVideoCollectionItemsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        VideoCollectionItemDataList response = api.getFeaturedVideoCollectionItems(id, page, perPage);
        // TODO: test validations
    }

    /**
     * List featured video collections
     *
     * This endpoint lists featured video collections and a name and cover video for each collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeaturedVideoCollectionListTest() throws ApiException {
        String embed = null;
        FeaturedCollectionDataList response = api.getFeaturedVideoCollectionList(embed);
        // TODO: test validations
    }

    /**
     * List updated videos
     *
     * This endpoint lists videos that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show videos that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpdatedVideosTest() throws ApiException {
        LocalDate startDate = null;
        LocalDate endDate = null;
        String interval = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        UpdatedMediaDataList response = api.getUpdatedVideos(startDate, endDate, interval, page, perPage, sort);
        // TODO: test validations
    }

    /**
     * Get details about videos
     *
     * This endpoint shows information about a video, including URLs to previews and the sizes that it is available in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoTest() throws ApiException {
        String id = null;
        Language language = null;
        String view = null;
        String searchId = null;
        Video response = api.getVideo(id, language, view, searchId);
        // TODO: test validations
    }

    /**
     * Get the details of video collections
     *
     * This endpoint gets more detailed information about a collection, including the timestamp for its creation and the number of videos in it. To get the videos in collections, use GET /v2/videos/collections/{id}/items.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoCollectionTest() throws ApiException {
        String id = null;
        List<String> embed = null;
        String shareCode = null;
        Collection response = api.getVideoCollection(id, embed, shareCode);
        // TODO: test validations
    }

    /**
     * Get the contents of video collections
     *
     * This endpoint lists the IDs of videos in a collection and the date that each was added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoCollectionItemsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        String shareCode = null;
        String sort = null;
        CollectionItemDataList response = api.getVideoCollectionItems(id, page, perPage, shareCode, sort);
        // TODO: test validations
    }

    /**
     * List video collections
     *
     * This endpoint lists your collections of videos and their basic attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoCollectionListTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<String> embed = null;
        CollectionDataList response = api.getVideoCollectionList(page, perPage, embed);
        // TODO: test validations
    }

    /**
     * List video licenses
     *
     * This endpoint lists existing licenses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoLicenseListTest() throws ApiException {
        String videoId = null;
        String license = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        String username = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String downloadAvailability = null;
        Boolean teamHistory = null;
        DownloadHistoryDataList response = api.getVideoLicenseList(videoId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        // TODO: test validations
    }

    /**
     * List videos
     *
     * This endpoint lists information about one or more videos, including the aspect ratio and URLs to previews.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoListTest() throws ApiException {
        List<String> id = null;
        String view = null;
        String searchId = null;
        VideoDataList response = api.getVideoList(id, view, searchId);
        // TODO: test validations
    }

    /**
     * Get suggestions for a search term
     *
     * This endpoint provides autocomplete suggestions for partial search terms.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getVideoSuggestionsTest() throws ApiException {
        String query = null;
        Integer limit = null;
        Suggestions response = api.getVideoSuggestions(query, limit);
        // TODO: test validations
    }

    /**
     * License videos
     *
     * This endpoint gets licenses for one or more videos. You must specify the video IDs in the body parameter and the size and subscription ID either in the query parameter or with each video ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licenseVideosTest() throws ApiException {
        LicenseVideoRequest licenseVideoRequest = null;
        String subscriptionId = null;
        String size = null;
        String searchId = null;
        LicenseVideoResultDataList response = api.licenseVideos(licenseVideoRequest, subscriptionId, size, searchId);
        // TODO: test validations
    }

    /**
     * List video categories
     *
     * This endpoint lists the categories (Shutterstock-assigned genres) that videos can belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listVideoCategoriesTest() throws ApiException {
        Language language = null;
        CategoryDataList response = api.listVideoCategories(language);
        // TODO: test validations
    }

    /**
     * Rename video collections
     *
     * This endpoint sets a new name for a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameVideoCollectionTest() throws ApiException {
        String id = null;
        CollectionUpdateRequest collectionUpdateRequest = null;
        api.renameVideoCollection(id, collectionUpdateRequest);
        // TODO: test validations
    }

    /**
     * Search for videos
     *
     * This endpoint searches for videos. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchVideosTest() throws ApiException {
        LocalDate addedDate = null;
        LocalDate addedDateStart = null;
        LocalDate addedDateEnd = null;
        String aspectRatio = null;
        String category = null;
        List<String> contributor = null;
        List<String> contributorCountry = null;
        Integer duration = null;
        Integer durationFrom = null;
        Integer durationTo = null;
        BigDecimal fps = null;
        BigDecimal fpsFrom = null;
        BigDecimal fpsTo = null;
        Boolean keywordSafeSearch = null;
        Language language = null;
        List<String> license = null;
        List<String> model = null;
        Integer page = null;
        Integer perPage = null;
        String peopleAge = null;
        List<String> peopleEthnicity = null;
        String peopleGender = null;
        Integer peopleNumber = null;
        Boolean peopleModelReleased = null;
        String query = null;
        String resolution = null;
        Boolean safe = null;
        String sort = null;
        String view = null;
        VideoSearchResults response = api.searchVideos(addedDate, addedDateStart, addedDateEnd, aspectRatio, category, contributor, contributorCountry, duration, durationFrom, durationTo, fps, fpsFrom, fpsTo, keywordSafeSearch, language, license, model, page, perPage, peopleAge, peopleEthnicity, peopleGender, peopleNumber, peopleModelReleased, query, resolution, safe, sort, view);
        // TODO: test validations
    }

}
