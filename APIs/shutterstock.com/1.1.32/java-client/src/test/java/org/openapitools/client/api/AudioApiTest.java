/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.Audio;
import org.openapitools.client.model.AudioDataList;
import org.openapitools.client.model.AudioSearchResults;
import org.openapitools.client.model.AudioUrl;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionCreateRequest;
import org.openapitools.client.model.CollectionCreateResponse;
import org.openapitools.client.model.CollectionDataList;
import org.openapitools.client.model.CollectionItemDataList;
import org.openapitools.client.model.CollectionItemRequest;
import org.openapitools.client.model.CollectionUpdateRequest;
import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.GenreList;
import org.openapitools.client.model.InstrumentList;
import org.openapitools.client.model.LicenseAudioRequest;
import org.openapitools.client.model.LicenseAudioResultDataList;
import org.openapitools.client.model.MoodList;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for AudioApi
 */
@Disabled
public class AudioApiTest {

    private final AudioApi api = new AudioApi();

    /**
     * Add audio tracks to collections
     *
     * This endpoint adds one or more tracks to a collection by track IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTrackCollectionItemsTest() throws ApiException {
        String id = null;
        CollectionItemRequest collectionItemRequest = null;
        api.addTrackCollectionItems(id, collectionItemRequest);
        // TODO: test validations
    }

    /**
     * Create audio collections
     *
     * This endpoint creates one or more collections (soundboxes). To add tracks, use &#x60;POST /v2/audio/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createTrackCollectionTest() throws ApiException {
        CollectionCreateRequest collectionCreateRequest = null;
        CollectionCreateResponse response = api.createTrackCollection(collectionCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete audio collections
     *
     * This endpoint deletes a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrackCollectionTest() throws ApiException {
        String id = null;
        api.deleteTrackCollection(id);
        // TODO: test validations
    }

    /**
     * Remove audio tracks from collections
     *
     * This endpoint removes one or more tracks from a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteTrackCollectionItemsTest() throws ApiException {
        String id = null;
        List<String> itemId = null;
        api.deleteTrackCollectionItems(id, itemId);
        // TODO: test validations
    }

    /**
     * Download audio tracks
     *
     * This endpoint redownloads tracks that you have already received a license for. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadTracksTest() throws ApiException {
        String id = null;
        AudioUrl response = api.downloadTracks(id);
        // TODO: test validations
    }

    /**
     * Get details about audio tracks
     *
     * This endpoint shows information about a track, including its genres, instruments, and other attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackTest() throws ApiException {
        Integer id = null;
        String view = null;
        String searchId = null;
        Audio response = api.getTrack(id, view, searchId);
        // TODO: test validations
    }

    /**
     * Get the details of audio collections
     *
     * This endpoint gets more detailed information about a collection, including the number of items in it and when it was last updated. To get the tracks in collections, use &#x60;GET /v2/audio/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackCollectionTest() throws ApiException {
        String id = null;
        List<String> embed = null;
        String shareCode = null;
        Collection response = api.getTrackCollection(id, embed, shareCode);
        // TODO: test validations
    }

    /**
     * Get the contents of audio collections
     *
     * This endpoint lists the IDs of tracks in a collection and the date that each was added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackCollectionItemsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        String shareCode = null;
        String sort = null;
        CollectionItemDataList response = api.getTrackCollectionItems(id, page, perPage, shareCode, sort);
        // TODO: test validations
    }

    /**
     * List audio collections
     *
     * This endpoint lists your collections of audio tracks and their basic attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackCollectionListTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        List<String> embed = null;
        CollectionDataList response = api.getTrackCollectionList(page, perPage, embed);
        // TODO: test validations
    }

    /**
     * List audio licenses
     *
     * This endpoint lists existing licenses. You can filter the results according to the track ID to see if you have an existing license for a specific track.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackLicenseListTest() throws ApiException {
        String audioId = null;
        String license = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        String username = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String downloadAvailability = null;
        Boolean teamHistory = null;
        DownloadHistoryDataList response = api.getTrackLicenseList(audioId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        // TODO: test validations
    }

    /**
     * List audio tracks
     *
     * This endpoint lists information about one or more audio tracks, including the description and publication date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getTrackListTest() throws ApiException {
        List<String> id = null;
        String view = null;
        String searchId = null;
        AudioDataList response = api.getTrackList(id, view, searchId);
        // TODO: test validations
    }

    /**
     * License audio tracks
     *
     * This endpoint gets licenses for one or more tracks. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licenseTrackTest() throws ApiException {
        LicenseAudioRequest licenseAudioRequest = null;
        String license = null;
        String searchId = null;
        LicenseAudioResultDataList response = api.licenseTrack(licenseAudioRequest, license, searchId);
        // TODO: test validations
    }

    /**
     * List audio genres
     *
     * This endpoint returns a list of all audio genres.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listGenresTest() throws ApiException {
        String language = null;
        GenreList response = api.listGenres(language);
        // TODO: test validations
    }

    /**
     * List audio instruments
     *
     * This endpoint returns a list of all audio instruments.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listInstrumentsTest() throws ApiException {
        String language = null;
        InstrumentList response = api.listInstruments(language);
        // TODO: test validations
    }

    /**
     * List audio moods
     *
     * This endpoint returns a list of all audio moods.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listMoodsTest() throws ApiException {
        String language = null;
        MoodList response = api.listMoods(language);
        // TODO: test validations
    }

    /**
     * Rename audio collections
     *
     * This endpoint sets a new name for a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameTrackCollectionTest() throws ApiException {
        String id = null;
        CollectionUpdateRequest collectionUpdateRequest = null;
        api.renameTrackCollection(id, collectionUpdateRequest);
        // TODO: test validations
    }

    /**
     * Search for tracks
     *
     * This endpoint searches for tracks. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchTracksTest() throws ApiException {
        List<String> artists = null;
        Integer bpm = null;
        Integer bpmFrom = null;
        Integer bpmTo = null;
        Integer duration = null;
        Integer durationFrom = null;
        Integer durationTo = null;
        List<String> genre = null;
        Boolean isInstrumental = null;
        List<String> instruments = null;
        List<String> moods = null;
        Integer page = null;
        Integer perPage = null;
        String query = null;
        String sort = null;
        String sortOrder = null;
        String vocalDescription = null;
        String view = null;
        String fields = null;
        String library = null;
        String language = null;
        AudioSearchResults response = api.searchTracks(artists, bpm, bpmFrom, bpmTo, duration, durationFrom, durationTo, genre, isInstrumental, instruments, moods, page, perPage, query, sort, sortOrder, vocalDescription, view, fields, library, language);
        // TODO: test validations
    }

}
