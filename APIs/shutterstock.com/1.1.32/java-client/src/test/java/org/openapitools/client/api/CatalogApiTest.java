/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CatalogCollection;
import org.openapitools.client.model.CatalogCollectionDataList;
import org.openapitools.client.model.CatalogCollectionItemDataList;
import org.openapitools.client.model.CreateCatalogCollection;
import org.openapitools.client.model.CreateCatalogCollectionItems;
import org.openapitools.client.model.RemoveCatalogCollectionItems;
import org.openapitools.client.model.UpdateCatalogCollection;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for CatalogApi
 */
@Disabled
public class CatalogApiTest {

    private final CatalogApi api = new CatalogApi();

    /**
     * Add items to catalog collections
     *
     * This endpoint adds assets to a catalog collection. It also automatically adds the assets to the user&#39;s account&#39;s catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addToCollectionTest() throws ApiException {
        String collectionId = null;
        CreateCatalogCollectionItems createCatalogCollectionItems = null;
        CatalogCollection response = api.addToCollection(collectionId, createCatalogCollectionItems);
        // TODO: test validations
    }

    /**
     * Create catalog collections
     *
     * This endpoint creates a catalog collection and optionally adds assets. To add assets to the collection later, use &#x60;PATCH /v2/catalog/collections/{collection_id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createCollectionTest() throws ApiException {
        CreateCatalogCollection createCatalogCollection = null;
        CatalogCollection response = api.createCollection(createCatalogCollection);
        // TODO: test validations
    }

    /**
     * Delete catalog collections
     *
     * This endpoint deletes a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteCollectionTest() throws ApiException {
        String collectionId = null;
        api.deleteCollection(collectionId);
        // TODO: test validations
    }

    /**
     * Remove items from catalog collection
     *
     * This endpoint removes assets from a catalog collection. It does not remove the assets from the user&#39;s account&#39;s catalog.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteFromCollectionTest() throws ApiException {
        String collectionId = null;
        RemoveCatalogCollectionItems removeCatalogCollectionItems = null;
        CatalogCollection response = api.deleteFromCollection(collectionId, removeCatalogCollectionItems);
        // TODO: test validations
    }

    /**
     * List catalog collections
     *
     * This endpoint returns a list of catalog collections.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getCollectionsTest() throws ApiException {
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        Boolean shared = null;
        CatalogCollectionDataList response = api.getCollections(page, perPage, sort, shared);
        // TODO: test validations
    }

    /**
     * Search catalogs for assets
     *
     * This endpoint searches for assets in the account&#39;s catalog. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchCatalogTest() throws ApiException {
        String sort = null;
        Integer page = null;
        Integer perPage = null;
        String query = null;
        List<String> collectionId = null;
        List<String> assetType = null;
        CatalogCollectionItemDataList response = api.searchCatalog(sort, page, perPage, query, collectionId, assetType);
        // TODO: test validations
    }

    /**
     * Update collection metadata
     *
     * This endpoint updates the metadata of a catalog collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void updateCollectionTest() throws ApiException {
        String collectionId = null;
        UpdateCatalogCollection updateCatalogCollection = null;
        CatalogCollection response = api.updateCollection(collectionId, updateCatalogCollection);
        // TODO: test validations
    }

}
