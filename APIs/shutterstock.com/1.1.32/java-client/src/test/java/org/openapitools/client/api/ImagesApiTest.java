/*
 * Shutterstock API Explorer
 * The Shutterstock API provides access to Shutterstock's library of media, as well as information about customers' accounts and the contributors that provide the media.
 *
 * The version of the OpenAPI document: 1.1.32
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import java.math.BigDecimal;
import org.openapitools.client.model.BulkImageSearchResults;
import org.openapitools.client.model.BulkSearchImagesContributorCountryParameter;
import org.openapitools.client.model.BulkSearchImagesRegionParameter;
import org.openapitools.client.model.CategoryDataList;
import org.openapitools.client.model.Collection;
import org.openapitools.client.model.CollectionCreateRequest;
import org.openapitools.client.model.CollectionCreateResponse;
import org.openapitools.client.model.CollectionDataList;
import org.openapitools.client.model.CollectionItemDataList;
import org.openapitools.client.model.CollectionItemRequest;
import org.openapitools.client.model.CollectionUpdateRequest;
import org.openapitools.client.model.DownloadHistoryDataList;
import org.openapitools.client.model.FeaturedCollection;
import org.openapitools.client.model.FeaturedCollectionDataList;
import org.openapitools.client.model.Image;
import org.openapitools.client.model.ImageDataList;
import org.openapitools.client.model.ImageSearchResults;
import org.openapitools.client.model.Language;
import org.openapitools.client.model.LicenseImageRequest;
import org.openapitools.client.model.LicenseImageResultDataList;
import java.time.LocalDate;
import java.time.OffsetDateTime;
import org.openapitools.client.model.RecommendationDataList;
import org.openapitools.client.model.RedownloadImage;
import org.openapitools.client.model.SearchEntitiesRequest;
import org.openapitools.client.model.SearchEntitiesResponse;
import org.openapitools.client.model.SearchImage;
import org.openapitools.client.model.Suggestions;
import org.openapitools.client.model.UpdatedMediaDataList;
import org.openapitools.client.model.Url;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ImagesApi
 */
@Disabled
public class ImagesApiTest {

    private final ImagesApi api = new ImagesApi();

    /**
     * Add images to collections
     *
     * This endpoint adds one or more images to a collection by image IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addImageCollectionItemsTest() throws ApiException {
        String id = null;
        CollectionItemRequest collectionItemRequest = null;
        api.addImageCollectionItems(id, collectionItemRequest);
        // TODO: test validations
    }

    /**
     * Run multiple image searches
     *
     * This endpoint runs up to 5 image searches in a single request and returns up to 20 results per search. You can provide global search parameters in the query parameters and override them for each search in the body parameter. The query and body parameters are the same as in the &#x60;GET /v2/images/search&#x60; endpoint.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void bulkSearchImagesTest() throws ApiException {
        List<SearchImage> searchImage = null;
        LocalDate addedDate = null;
        LocalDate addedDateStart = null;
        BigDecimal aspectRatioMin = null;
        BigDecimal aspectRatioMax = null;
        BigDecimal aspectRatio = null;
        LocalDate addedDateEnd = null;
        String category = null;
        String color = null;
        List<String> contributor = null;
        BulkSearchImagesContributorCountryParameter contributorCountry = null;
        String fields = null;
        Integer height = null;
        Integer heightFrom = null;
        Integer heightTo = null;
        List<String> imageType = null;
        Boolean keywordSafeSearch = null;
        Language language = null;
        List<String> license = null;
        List<String> model = null;
        String orientation = null;
        Integer page = null;
        Integer perPage = null;
        Boolean peopleModelReleased = null;
        String peopleAge = null;
        List<String> peopleEthnicity = null;
        String peopleGender = null;
        Integer peopleNumber = null;
        BulkSearchImagesRegionParameter region = null;
        Boolean safe = null;
        String sort = null;
        Boolean spellcheckQuery = null;
        String view = null;
        Integer width = null;
        Integer widthFrom = null;
        Integer widthTo = null;
        BulkImageSearchResults response = api.bulkSearchImages(searchImage, addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
        // TODO: test validations
    }

    /**
     * Create image collections
     *
     * This endpoint creates one or more image collections (lightboxes). To add images to the collections, use &#x60;POST /v2/images/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void createImageCollectionTest() throws ApiException {
        CollectionCreateRequest collectionCreateRequest = null;
        CollectionCreateResponse response = api.createImageCollection(collectionCreateRequest);
        // TODO: test validations
    }

    /**
     * Delete image collections
     *
     * This endpoint deletes an image collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageCollectionTest() throws ApiException {
        String id = null;
        api.deleteImageCollection(id);
        // TODO: test validations
    }

    /**
     * Remove images from collections
     *
     * This endpoint removes one or more images from a collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteImageCollectionItemsTest() throws ApiException {
        String id = null;
        List<String> itemId = null;
        api.deleteImageCollectionItems(id, itemId);
        // TODO: test validations
    }

    /**
     * Download images
     *
     * This endpoint redownloads images that you have already received a license for. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void downloadImageTest() throws ApiException {
        String id = null;
        RedownloadImage redownloadImage = null;
        Url response = api.downloadImage(id, redownloadImage);
        // TODO: test validations
    }

    /**
     * Get the details of featured image collections
     *
     * This endpoint gets more detailed information about a featured collection, including its cover image and timestamps for its creation and most recent update. To get the images, use &#x60;GET /v2/images/collections/featured/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeaturedImageCollectionTest() throws ApiException {
        String id = null;
        String embed = null;
        String assetHint = null;
        FeaturedCollection response = api.getFeaturedImageCollection(id, embed, assetHint);
        // TODO: test validations
    }

    /**
     * Get the contents of featured image collections
     *
     * This endpoint lists the IDs of images in a featured collection and the date that each was added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeaturedImageCollectionItemsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        CollectionItemDataList response = api.getFeaturedImageCollectionItems(id, page, perPage);
        // TODO: test validations
    }

    /**
     * List featured image collections
     *
     * This endpoint lists featured collections of specific types and a name and cover image for each collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getFeaturedImageCollectionListTest() throws ApiException {
        String embed = null;
        List<String> type = null;
        String assetHint = null;
        FeaturedCollectionDataList response = api.getFeaturedImageCollectionList(embed, type, assetHint);
        // TODO: test validations
    }

    /**
     * Get details about images
     *
     * This endpoint shows information about an image, including a URL to a preview image and the sizes that it is available in.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageTest() throws ApiException {
        String id = null;
        Language language = null;
        String view = null;
        String searchId = null;
        Image response = api.getImage(id, language, view, searchId);
        // TODO: test validations
    }

    /**
     * Get the details of image collections
     *
     * This endpoint gets more detailed information about a collection, including its cover image and timestamps for its creation and most recent update. To get the images in collections, use &#x60;GET /v2/images/collections/{id}/items&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageCollectionTest() throws ApiException {
        String id = null;
        List<String> embed = null;
        String shareCode = null;
        Collection response = api.getImageCollection(id, embed, shareCode);
        // TODO: test validations
    }

    /**
     * Get the contents of image collections
     *
     * This endpoint lists the IDs of images in a collection and the date that each was added.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageCollectionItemsTest() throws ApiException {
        String id = null;
        Integer page = null;
        Integer perPage = null;
        String shareCode = null;
        String sort = null;
        CollectionItemDataList response = api.getImageCollectionItems(id, page, perPage, shareCode, sort);
        // TODO: test validations
    }

    /**
     * List image collections
     *
     * This endpoint lists your collections of images and their basic attributes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageCollectionListTest() throws ApiException {
        List<String> embed = null;
        Integer page = null;
        Integer perPage = null;
        CollectionDataList response = api.getImageCollectionList(embed, page, perPage);
        // TODO: test validations
    }

    /**
     * Get keywords from text
     *
     * This endpoint returns up to 10 important keywords from a block of plain text.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageKeywordSuggestionsTest() throws ApiException {
        SearchEntitiesRequest searchEntitiesRequest = null;
        SearchEntitiesResponse response = api.getImageKeywordSuggestions(searchEntitiesRequest);
        // TODO: test validations
    }

    /**
     * List image licenses
     *
     * This endpoint lists existing licenses.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageLicenseListTest() throws ApiException {
        String imageId = null;
        String license = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        String username = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        String downloadAvailability = null;
        Boolean teamHistory = null;
        DownloadHistoryDataList response = api.getImageLicenseList(imageId, license, page, perPage, sort, username, startDate, endDate, downloadAvailability, teamHistory);
        // TODO: test validations
    }

    /**
     * List images
     *
     * This endpoint lists information about one or more images, including the available sizes.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageListTest() throws ApiException {
        List<String> id = null;
        String view = null;
        String searchId = null;
        ImageDataList response = api.getImageList(id, view, searchId);
        // TODO: test validations
    }

    /**
     * List recommended images
     *
     * This endpoint returns images that customers put in the same collection as the specified image IDs.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageRecommendationsTest() throws ApiException {
        List<String> id = null;
        Integer maxItems = null;
        Boolean safe = null;
        RecommendationDataList response = api.getImageRecommendations(id, maxItems, safe);
        // TODO: test validations
    }

    /**
     * Get suggestions for a search term
     *
     * This endpoint provides autocomplete suggestions for partial search terms.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getImageSuggestionsTest() throws ApiException {
        String query = null;
        Integer limit = null;
        Suggestions response = api.getImageSuggestions(query, limit);
        // TODO: test validations
    }

    /**
     * List updated images
     *
     * This endpoint lists images that have been updated in the specified time period to update content management systems (CMS) or digital asset management (DAM) systems. In most cases, use the &#x60;interval&#x60; parameter to show images that were updated recently, but you can also use the &#x60;start_date&#x60; and &#x60;end_date&#x60; parameters to specify a range of no more than three days. Do not use the &#x60;interval&#x60; parameter with either &#x60;start_date&#x60; or &#x60;end_date&#x60;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getUpdatedImagesTest() throws ApiException {
        List<String> type = null;
        LocalDate startDate = null;
        LocalDate endDate = null;
        String interval = null;
        Integer page = null;
        Integer perPage = null;
        String sort = null;
        UpdatedMediaDataList response = api.getUpdatedImages(type, startDate, endDate, interval, page, perPage, sort);
        // TODO: test validations
    }

    /**
     * License images
     *
     * This endpoint gets licenses for one or more images. You must specify the image IDs in the body parameter and other details like the format, size, and subscription ID either in the query parameter or with each image ID in the body parameter. Values in the body parameter override values in the query parameters. The download links in the response are valid for 8 hours.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void licenseImagesTest() throws ApiException {
        LicenseImageRequest licenseImageRequest = null;
        String subscriptionId = null;
        String format = null;
        String size = null;
        String searchId = null;
        LicenseImageResultDataList response = api.licenseImages(licenseImageRequest, subscriptionId, format, size, searchId);
        // TODO: test validations
    }

    /**
     * List image categories
     *
     * This endpoint lists the categories (Shutterstock-assigned genres) that images can belong to.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listImageCategoriesTest() throws ApiException {
        Language language = null;
        CategoryDataList response = api.listImageCategories(language);
        // TODO: test validations
    }

    /**
     * List similar images
     *
     * This endpoint returns images that are visually similar to an image that you specify.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listSimilarImagesTest() throws ApiException {
        String id = null;
        Language language = null;
        Integer page = null;
        Integer perPage = null;
        String view = null;
        ImageSearchResults response = api.listSimilarImages(id, language, page, perPage, view);
        // TODO: test validations
    }

    /**
     * Rename image collections
     *
     * This endpoint sets a new name for an image collection.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void renameImageCollectionTest() throws ApiException {
        String id = null;
        CollectionUpdateRequest collectionUpdateRequest = null;
        api.renameImageCollection(id, collectionUpdateRequest);
        // TODO: test validations
    }

    /**
     * Search for images
     *
     * This endpoint searches for images. If you specify more than one search parameter, the API uses an AND condition. Array parameters can be specified multiple times; in this case, the API uses an AND or an OR condition with those values, depending on the parameter. You can also filter search terms out in the &#x60;query&#x60; parameter by prefixing the term with NOT. Free API accounts show results only from a limited library of media, not the full Shutterstock media library. Also, the number of search fields they can use in a request is limited.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void searchImagesTest() throws ApiException {
        LocalDate addedDate = null;
        LocalDate addedDateStart = null;
        BigDecimal aspectRatioMin = null;
        BigDecimal aspectRatioMax = null;
        BigDecimal aspectRatio = null;
        Boolean aiSearch = null;
        Integer aiLabelsLimit = null;
        String aiIndustry = null;
        String aiObjective = null;
        LocalDate addedDateEnd = null;
        String category = null;
        String color = null;
        List<String> contributor = null;
        BulkSearchImagesContributorCountryParameter contributorCountry = null;
        String fields = null;
        Integer height = null;
        Integer heightFrom = null;
        Integer heightTo = null;
        List<String> imageType = null;
        Boolean keywordSafeSearch = null;
        Language language = null;
        List<String> license = null;
        List<String> model = null;
        String orientation = null;
        Integer page = null;
        Integer perPage = null;
        Boolean peopleModelReleased = null;
        String peopleAge = null;
        List<String> peopleEthnicity = null;
        String peopleGender = null;
        Integer peopleNumber = null;
        String query = null;
        BulkSearchImagesRegionParameter region = null;
        Boolean safe = null;
        String sort = null;
        Boolean spellcheckQuery = null;
        String view = null;
        Integer width = null;
        Integer widthFrom = null;
        Integer widthTo = null;
        ImageSearchResults response = api.searchImages(addedDate, addedDateStart, aspectRatioMin, aspectRatioMax, aspectRatio, aiSearch, aiLabelsLimit, aiIndustry, aiObjective, addedDateEnd, category, color, contributor, contributorCountry, fields, height, heightFrom, heightTo, imageType, keywordSafeSearch, language, license, model, orientation, page, perPage, peopleModelReleased, peopleAge, peopleEthnicity, peopleGender, peopleNumber, query, region, safe, sort, spellcheckQuery, view, width, widthFrom, widthTo);
        // TODO: test validations
    }

}
