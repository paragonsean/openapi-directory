# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseAudio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_id: str=None, license: str=None, search_id: str=None):
        """LicenseAudio - a model defined in OpenAPI

        :param audio_id: The audio_id of this LicenseAudio.
        :param license: The license of this LicenseAudio.
        :param search_id: The search_id of this LicenseAudio.
        """
        self.openapi_types = {
            'audio_id': str,
            'license': str,
            'search_id': str
        }

        self.attribute_map = {
            'audio_id': 'audio_id',
            'license': 'license',
            'search_id': 'search_id'
        }

        self._audio_id = audio_id
        self._license = license
        self._search_id = search_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseAudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseAudio of this LicenseAudio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_id(self):
        """Gets the audio_id of this LicenseAudio.

        ID of the track being licensed

        :return: The audio_id of this LicenseAudio.
        :rtype: str
        """
        return self._audio_id

    @audio_id.setter
    def audio_id(self, audio_id):
        """Sets the audio_id of this LicenseAudio.

        ID of the track being licensed

        :param audio_id: The audio_id of this LicenseAudio.
        :type audio_id: str
        """
        if audio_id is None:
            raise ValueError("Invalid value for `audio_id`, must not be `None`")

        self._audio_id = audio_id

    @property
    def license(self):
        """Gets the license of this LicenseAudio.

        Type of license

        :return: The license of this LicenseAudio.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this LicenseAudio.

        Type of license

        :param license: The license of this LicenseAudio.
        :type license: str
        """
        allowed_values = ["audio_platform", "premier_music_basic", "premier_music_extended", "premier_music_pro", "premier_music_comp", "asset_all_music"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def search_id(self):
        """Gets the search_id of this LicenseAudio.

        ID of the search that led to this licensing event

        :return: The search_id of this LicenseAudio.
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this LicenseAudio.

        ID of the search that led to this licensing event

        :param search_id: The search_id of this LicenseAudio.
        :type search_id: str
        """

        self._search_id = search_id
