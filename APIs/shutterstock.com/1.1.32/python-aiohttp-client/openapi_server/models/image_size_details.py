# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageSizeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name: str=None, dpi: int=None, file_size: int=None, format: str=None, height: int=None, is_licensable: bool=None, width: int=None):
        """ImageSizeDetails - a model defined in OpenAPI

        :param display_name: The display_name of this ImageSizeDetails.
        :param dpi: The dpi of this ImageSizeDetails.
        :param file_size: The file_size of this ImageSizeDetails.
        :param format: The format of this ImageSizeDetails.
        :param height: The height of this ImageSizeDetails.
        :param is_licensable: The is_licensable of this ImageSizeDetails.
        :param width: The width of this ImageSizeDetails.
        """
        self.openapi_types = {
            'display_name': str,
            'dpi': int,
            'file_size': int,
            'format': str,
            'height': int,
            'is_licensable': bool,
            'width': int
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'dpi': 'dpi',
            'file_size': 'file_size',
            'format': 'format',
            'height': 'height',
            'is_licensable': 'is_licensable',
            'width': 'width'
        }

        self._display_name = display_name
        self._dpi = dpi
        self._file_size = file_size
        self._format = format
        self._height = height
        self._is_licensable = is_licensable
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageSizeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageSizeDetails of this ImageSizeDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self):
        """Gets the display_name of this ImageSizeDetails.

        Display name of this image size

        :return: The display_name of this ImageSizeDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ImageSizeDetails.

        Display name of this image size

        :param display_name: The display_name of this ImageSizeDetails.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def dpi(self):
        """Gets the dpi of this ImageSizeDetails.


        :return: The dpi of this ImageSizeDetails.
        :rtype: int
        """
        return self._dpi

    @dpi.setter
    def dpi(self, dpi):
        """Sets the dpi of this ImageSizeDetails.


        :param dpi: The dpi of this ImageSizeDetails.
        :type dpi: int
        """

        self._dpi = dpi

    @property
    def file_size(self):
        """Gets the file_size of this ImageSizeDetails.

        File size (in bytes) of this image size

        :return: The file_size of this ImageSizeDetails.
        :rtype: int
        """
        return self._file_size

    @file_size.setter
    def file_size(self, file_size):
        """Sets the file_size of this ImageSizeDetails.

        File size (in bytes) of this image size

        :param file_size: The file_size of this ImageSizeDetails.
        :type file_size: int
        """

        self._file_size = file_size

    @property
    def format(self):
        """Gets the format of this ImageSizeDetails.

        Format of this image size

        :return: The format of this ImageSizeDetails.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this ImageSizeDetails.

        Format of this image size

        :param format: The format of this ImageSizeDetails.
        :type format: str
        """

        self._format = format

    @property
    def height(self):
        """Gets the height of this ImageSizeDetails.

        Height of this image size

        :return: The height of this ImageSizeDetails.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this ImageSizeDetails.

        Height of this image size

        :param height: The height of this ImageSizeDetails.
        :type height: int
        """

        self._height = height

    @property
    def is_licensable(self):
        """Gets the is_licensable of this ImageSizeDetails.

        Whether or not this image can be licensed in this image size

        :return: The is_licensable of this ImageSizeDetails.
        :rtype: bool
        """
        return self._is_licensable

    @is_licensable.setter
    def is_licensable(self, is_licensable):
        """Sets the is_licensable of this ImageSizeDetails.

        Whether or not this image can be licensed in this image size

        :param is_licensable: The is_licensable of this ImageSizeDetails.
        :type is_licensable: bool
        """

        self._is_licensable = is_licensable

    @property
    def width(self):
        """Gets the width of this ImageSizeDetails.

        Width of this image size

        :return: The width of this ImageSizeDetails.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this ImageSizeDetails.

        Width of this image size

        :param width: The width of this ImageSizeDetails.
        :type width: int
        """

        self._width = width
