# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server.models.subscription import Subscription
from openapi_server import util


class SubscriptionDataList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[Subscription]=None, errors: List[Error]=None, message: str=None, page: int=None, per_page: int=None, total_count: int=None):
        """SubscriptionDataList - a model defined in OpenAPI

        :param data: The data of this SubscriptionDataList.
        :param errors: The errors of this SubscriptionDataList.
        :param message: The message of this SubscriptionDataList.
        :param page: The page of this SubscriptionDataList.
        :param per_page: The per_page of this SubscriptionDataList.
        :param total_count: The total_count of this SubscriptionDataList.
        """
        self.openapi_types = {
            'data': List[Subscription],
            'errors': List[Error],
            'message': str,
            'page': int,
            'per_page': int,
            'total_count': int
        }

        self.attribute_map = {
            'data': 'data',
            'errors': 'errors',
            'message': 'message',
            'page': 'page',
            'per_page': 'per_page',
            'total_count': 'total_count'
        }

        self._data = data
        self._errors = errors
        self._message = message
        self._page = page
        self._per_page = per_page
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SubscriptionDataList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SubscriptionDataList of this SubscriptionDataList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this SubscriptionDataList.

        Subscriptions retrieved from this user

        :return: The data of this SubscriptionDataList.
        :rtype: List[Subscription]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this SubscriptionDataList.

        Subscriptions retrieved from this user

        :param data: The data of this SubscriptionDataList.
        :type data: List[Subscription]
        """

        self._data = data

    @property
    def errors(self):
        """Gets the errors of this SubscriptionDataList.

        Error list; appears only if there was an error

        :return: The errors of this SubscriptionDataList.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this SubscriptionDataList.

        Error list; appears only if there was an error

        :param errors: The errors of this SubscriptionDataList.
        :type errors: List[Error]
        """

        self._errors = errors

    @property
    def message(self):
        """Gets the message of this SubscriptionDataList.

        Optional error message

        :return: The message of this SubscriptionDataList.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this SubscriptionDataList.

        Optional error message

        :param message: The message of this SubscriptionDataList.
        :type message: str
        """

        self._message = message

    @property
    def page(self):
        """Gets the page of this SubscriptionDataList.

        Current page that is being queried

        :return: The page of this SubscriptionDataList.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SubscriptionDataList.

        Current page that is being queried

        :param page: The page of this SubscriptionDataList.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this SubscriptionDataList.

        Amount of subscriptions to show per page

        :return: The per_page of this SubscriptionDataList.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this SubscriptionDataList.

        Amount of subscriptions to show per page

        :param per_page: The per_page of this SubscriptionDataList.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def total_count(self):
        """Gets the total_count of this SubscriptionDataList.

        Total number of subscriptions for this user

        :return: The total_count of this SubscriptionDataList.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this SubscriptionDataList.

        Total number of subscriptions for this user

        :param total_count: The total_count of this SubscriptionDataList.
        :type total_count: int
        """

        self._total_count = total_count
