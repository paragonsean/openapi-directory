# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.cookie import Cookie
from openapi_server.models.custom_size_dimensions import CustomSizeDimensions
from openapi_server import util


class LicenseImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_cookie: Cookie=None, custom_dimensions: CustomSizeDimensions=None, editorial_acknowledgement: bool=None, format: str='jpg', image_id: str=None, metadata: object=None, price: float=None, search_id: str=None, show_modal: bool=None, size: str=None, subscription_id: str=None, verification_code: str=None):
        """LicenseImage - a model defined in OpenAPI

        :param auth_cookie: The auth_cookie of this LicenseImage.
        :param custom_dimensions: The custom_dimensions of this LicenseImage.
        :param editorial_acknowledgement: The editorial_acknowledgement of this LicenseImage.
        :param format: The format of this LicenseImage.
        :param image_id: The image_id of this LicenseImage.
        :param metadata: The metadata of this LicenseImage.
        :param price: The price of this LicenseImage.
        :param search_id: The search_id of this LicenseImage.
        :param show_modal: The show_modal of this LicenseImage.
        :param size: The size of this LicenseImage.
        :param subscription_id: The subscription_id of this LicenseImage.
        :param verification_code: The verification_code of this LicenseImage.
        """
        self.openapi_types = {
            'auth_cookie': Cookie,
            'custom_dimensions': CustomSizeDimensions,
            'editorial_acknowledgement': bool,
            'format': str,
            'image_id': str,
            'metadata': object,
            'price': float,
            'search_id': str,
            'show_modal': bool,
            'size': str,
            'subscription_id': str,
            'verification_code': str
        }

        self.attribute_map = {
            'auth_cookie': 'auth_cookie',
            'custom_dimensions': 'custom_dimensions',
            'editorial_acknowledgement': 'editorial_acknowledgement',
            'format': 'format',
            'image_id': 'image_id',
            'metadata': 'metadata',
            'price': 'price',
            'search_id': 'search_id',
            'show_modal': 'show_modal',
            'size': 'size',
            'subscription_id': 'subscription_id',
            'verification_code': 'verification_code'
        }

        self._auth_cookie = auth_cookie
        self._custom_dimensions = custom_dimensions
        self._editorial_acknowledgement = editorial_acknowledgement
        self._format = format
        self._image_id = image_id
        self._metadata = metadata
        self._price = price
        self._search_id = search_id
        self._show_modal = show_modal
        self._size = size
        self._subscription_id = subscription_id
        self._verification_code = verification_code

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseImage of this LicenseImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_cookie(self):
        """Gets the auth_cookie of this LicenseImage.


        :return: The auth_cookie of this LicenseImage.
        :rtype: Cookie
        """
        return self._auth_cookie

    @auth_cookie.setter
    def auth_cookie(self, auth_cookie):
        """Sets the auth_cookie of this LicenseImage.


        :param auth_cookie: The auth_cookie of this LicenseImage.
        :type auth_cookie: Cookie
        """

        self._auth_cookie = auth_cookie

    @property
    def custom_dimensions(self):
        """Gets the custom_dimensions of this LicenseImage.


        :return: The custom_dimensions of this LicenseImage.
        :rtype: CustomSizeDimensions
        """
        return self._custom_dimensions

    @custom_dimensions.setter
    def custom_dimensions(self, custom_dimensions):
        """Sets the custom_dimensions of this LicenseImage.


        :param custom_dimensions: The custom_dimensions of this LicenseImage.
        :type custom_dimensions: CustomSizeDimensions
        """

        self._custom_dimensions = custom_dimensions

    @property
    def editorial_acknowledgement(self):
        """Gets the editorial_acknowledgement of this LicenseImage.

        Set to true to acknowledge the editorial agreement

        :return: The editorial_acknowledgement of this LicenseImage.
        :rtype: bool
        """
        return self._editorial_acknowledgement

    @editorial_acknowledgement.setter
    def editorial_acknowledgement(self, editorial_acknowledgement):
        """Sets the editorial_acknowledgement of this LicenseImage.

        Set to true to acknowledge the editorial agreement

        :param editorial_acknowledgement: The editorial_acknowledgement of this LicenseImage.
        :type editorial_acknowledgement: bool
        """

        self._editorial_acknowledgement = editorial_acknowledgement

    @property
    def format(self):
        """Gets the format of this LicenseImage.

        (Deprecated) Image format to download

        :return: The format of this LicenseImage.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this LicenseImage.

        (Deprecated) Image format to download

        :param format: The format of this LicenseImage.
        :type format: str
        """
        allowed_values = ["jpg"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def image_id(self):
        """Gets the image_id of this LicenseImage.

        Image ID

        :return: The image_id of this LicenseImage.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id):
        """Sets the image_id of this LicenseImage.

        Image ID

        :param image_id: The image_id of this LicenseImage.
        :type image_id: str
        """
        if image_id is None:
            raise ValueError("Invalid value for `image_id`, must not be `None`")

        self._image_id = image_id

    @property
    def metadata(self):
        """Gets the metadata of this LicenseImage.

        Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder

        :return: The metadata of this LicenseImage.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LicenseImage.

        Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder

        :param metadata: The metadata of this LicenseImage.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def price(self):
        """Gets the price of this LicenseImage.

        For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34

        :return: The price of this LicenseImage.
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this LicenseImage.

        For revenue-sharing transactions, the final cost to the end customer as a floating-point number in the transaction currency, such as 12.34

        :param price: The price of this LicenseImage.
        :type price: float
        """

        self._price = price

    @property
    def search_id(self):
        """Gets the search_id of this LicenseImage.

        ID of the search that led to this licensing transaction

        :return: The search_id of this LicenseImage.
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this LicenseImage.

        ID of the search that led to this licensing transaction

        :param search_id: The search_id of this LicenseImage.
        :type search_id: str
        """

        self._search_id = search_id

    @property
    def show_modal(self):
        """Gets the show_modal of this LicenseImage.

        (Deprecated)

        :return: The show_modal of this LicenseImage.
        :rtype: bool
        """
        return self._show_modal

    @show_modal.setter
    def show_modal(self, show_modal):
        """Sets the show_modal of this LicenseImage.

        (Deprecated)

        :param show_modal: The show_modal of this LicenseImage.
        :type show_modal: bool
        """

        self._show_modal = show_modal

    @property
    def size(self):
        """Gets the size of this LicenseImage.

        Image size to download

        :return: The size of this LicenseImage.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LicenseImage.

        Image size to download

        :param size: The size of this LicenseImage.
        :type size: str
        """
        allowed_values = ["small", "medium", "huge", "custom"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size

    @property
    def subscription_id(self):
        """Gets the subscription_id of this LicenseImage.

        ID of the subscription to use for the download.

        :return: The subscription_id of this LicenseImage.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this LicenseImage.

        ID of the subscription to use for the download.

        :param subscription_id: The subscription_id of this LicenseImage.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def verification_code(self):
        """Gets the verification_code of this LicenseImage.

        (Deprecated)

        :return: The verification_code of this LicenseImage.
        :rtype: str
        """
        return self._verification_code

    @verification_code.setter
    def verification_code(self, verification_code):
        """Sets the verification_code of this LicenseImage.

        (Deprecated)

        :param verification_code: The verification_code of this LicenseImage.
        :type verification_code: str
        """

        self._verification_code = verification_code
