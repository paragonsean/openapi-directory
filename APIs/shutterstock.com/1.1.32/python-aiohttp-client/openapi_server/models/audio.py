# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.album import Album
from openapi_server.models.artist import Artist
from openapi_server.models.audio_assets import AudioAssets
from openapi_server.models.contributor import Contributor
from openapi_server.models.model_release import ModelRelease
from openapi_server import util


class Audio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_date: date=None, affiliate_url: str=None, album: Album=None, artists: List[Artist]=None, assets: AudioAssets=None, bpm: int=None, contributor: Contributor=None, deleted_time: datetime=None, description: str=None, duration: float=None, genres: List[str]=None, id: str=None, instruments: List[str]=None, is_adult: bool=None, is_instrumental: bool=None, isrc: str=None, keywords: List[str]=None, language: str=None, lyrics: str=None, media_type: str=None, model_releases: List[ModelRelease]=None, moods: List[str]=None, published_time: datetime=None, recording_version: str=None, releases: List[str]=None, similar_artists: List[Artist]=None, submitted_time: datetime=None, title: str=None, updated_time: datetime=None, url: str=None, vocal_description: str=None):
        """Audio - a model defined in OpenAPI

        :param added_date: The added_date of this Audio.
        :param affiliate_url: The affiliate_url of this Audio.
        :param album: The album of this Audio.
        :param artists: The artists of this Audio.
        :param assets: The assets of this Audio.
        :param bpm: The bpm of this Audio.
        :param contributor: The contributor of this Audio.
        :param deleted_time: The deleted_time of this Audio.
        :param description: The description of this Audio.
        :param duration: The duration of this Audio.
        :param genres: The genres of this Audio.
        :param id: The id of this Audio.
        :param instruments: The instruments of this Audio.
        :param is_adult: The is_adult of this Audio.
        :param is_instrumental: The is_instrumental of this Audio.
        :param isrc: The isrc of this Audio.
        :param keywords: The keywords of this Audio.
        :param language: The language of this Audio.
        :param lyrics: The lyrics of this Audio.
        :param media_type: The media_type of this Audio.
        :param model_releases: The model_releases of this Audio.
        :param moods: The moods of this Audio.
        :param published_time: The published_time of this Audio.
        :param recording_version: The recording_version of this Audio.
        :param releases: The releases of this Audio.
        :param similar_artists: The similar_artists of this Audio.
        :param submitted_time: The submitted_time of this Audio.
        :param title: The title of this Audio.
        :param updated_time: The updated_time of this Audio.
        :param url: The url of this Audio.
        :param vocal_description: The vocal_description of this Audio.
        """
        self.openapi_types = {
            'added_date': date,
            'affiliate_url': str,
            'album': Album,
            'artists': List[Artist],
            'assets': AudioAssets,
            'bpm': int,
            'contributor': Contributor,
            'deleted_time': datetime,
            'description': str,
            'duration': float,
            'genres': List[str],
            'id': str,
            'instruments': List[str],
            'is_adult': bool,
            'is_instrumental': bool,
            'isrc': str,
            'keywords': List[str],
            'language': str,
            'lyrics': str,
            'media_type': str,
            'model_releases': List[ModelRelease],
            'moods': List[str],
            'published_time': datetime,
            'recording_version': str,
            'releases': List[str],
            'similar_artists': List[Artist],
            'submitted_time': datetime,
            'title': str,
            'updated_time': datetime,
            'url': str,
            'vocal_description': str
        }

        self.attribute_map = {
            'added_date': 'added_date',
            'affiliate_url': 'affiliate_url',
            'album': 'album',
            'artists': 'artists',
            'assets': 'assets',
            'bpm': 'bpm',
            'contributor': 'contributor',
            'deleted_time': 'deleted_time',
            'description': 'description',
            'duration': 'duration',
            'genres': 'genres',
            'id': 'id',
            'instruments': 'instruments',
            'is_adult': 'is_adult',
            'is_instrumental': 'is_instrumental',
            'isrc': 'isrc',
            'keywords': 'keywords',
            'language': 'language',
            'lyrics': 'lyrics',
            'media_type': 'media_type',
            'model_releases': 'model_releases',
            'moods': 'moods',
            'published_time': 'published_time',
            'recording_version': 'recording_version',
            'releases': 'releases',
            'similar_artists': 'similar_artists',
            'submitted_time': 'submitted_time',
            'title': 'title',
            'updated_time': 'updated_time',
            'url': 'url',
            'vocal_description': 'vocal_description'
        }

        self._added_date = added_date
        self._affiliate_url = affiliate_url
        self._album = album
        self._artists = artists
        self._assets = assets
        self._bpm = bpm
        self._contributor = contributor
        self._deleted_time = deleted_time
        self._description = description
        self._duration = duration
        self._genres = genres
        self._id = id
        self._instruments = instruments
        self._is_adult = is_adult
        self._is_instrumental = is_instrumental
        self._isrc = isrc
        self._keywords = keywords
        self._language = language
        self._lyrics = lyrics
        self._media_type = media_type
        self._model_releases = model_releases
        self._moods = moods
        self._published_time = published_time
        self._recording_version = recording_version
        self._releases = releases
        self._similar_artists = similar_artists
        self._submitted_time = submitted_time
        self._title = title
        self._updated_time = updated_time
        self._url = url
        self._vocal_description = vocal_description

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Audio':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Audio of this Audio.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_date(self):
        """Gets the added_date of this Audio.

        Date this track was added to the Shutterstock library

        :return: The added_date of this Audio.
        :rtype: date
        """
        return self._added_date

    @added_date.setter
    def added_date(self, added_date):
        """Sets the added_date of this Audio.

        Date this track was added to the Shutterstock library

        :param added_date: The added_date of this Audio.
        :type added_date: date
        """

        self._added_date = added_date

    @property
    def affiliate_url(self):
        """Gets the affiliate_url of this Audio.

        Affiliate referral link; appears only for registered affiliate partners

        :return: The affiliate_url of this Audio.
        :rtype: str
        """
        return self._affiliate_url

    @affiliate_url.setter
    def affiliate_url(self, affiliate_url):
        """Sets the affiliate_url of this Audio.

        Affiliate referral link; appears only for registered affiliate partners

        :param affiliate_url: The affiliate_url of this Audio.
        :type affiliate_url: str
        """

        self._affiliate_url = affiliate_url

    @property
    def album(self):
        """Gets the album of this Audio.


        :return: The album of this Audio.
        :rtype: Album
        """
        return self._album

    @album.setter
    def album(self, album):
        """Sets the album of this Audio.


        :param album: The album of this Audio.
        :type album: Album
        """

        self._album = album

    @property
    def artists(self):
        """Gets the artists of this Audio.

        List of artists

        :return: The artists of this Audio.
        :rtype: List[Artist]
        """
        return self._artists

    @artists.setter
    def artists(self, artists):
        """Sets the artists of this Audio.

        List of artists

        :param artists: The artists of this Audio.
        :type artists: List[Artist]
        """

        self._artists = artists

    @property
    def assets(self):
        """Gets the assets of this Audio.


        :return: The assets of this Audio.
        :rtype: AudioAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Audio.


        :param assets: The assets of this Audio.
        :type assets: AudioAssets
        """

        self._assets = assets

    @property
    def bpm(self):
        """Gets the bpm of this Audio.

        BPM (beats per minute) of this track

        :return: The bpm of this Audio.
        :rtype: int
        """
        return self._bpm

    @bpm.setter
    def bpm(self, bpm):
        """Sets the bpm of this Audio.

        BPM (beats per minute) of this track

        :param bpm: The bpm of this Audio.
        :type bpm: int
        """

        self._bpm = bpm

    @property
    def contributor(self):
        """Gets the contributor of this Audio.


        :return: The contributor of this Audio.
        :rtype: Contributor
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this Audio.


        :param contributor: The contributor of this Audio.
        :type contributor: Contributor
        """
        if contributor is None:
            raise ValueError("Invalid value for `contributor`, must not be `None`")

        self._contributor = contributor

    @property
    def deleted_time(self):
        """Gets the deleted_time of this Audio.


        :return: The deleted_time of this Audio.
        :rtype: datetime
        """
        return self._deleted_time

    @deleted_time.setter
    def deleted_time(self, deleted_time):
        """Sets the deleted_time of this Audio.


        :param deleted_time: The deleted_time of this Audio.
        :type deleted_time: datetime
        """

        self._deleted_time = deleted_time

    @property
    def description(self):
        """Gets the description of this Audio.

        Description of this track

        :return: The description of this Audio.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Audio.

        Description of this track

        :param description: The description of this Audio.
        :type description: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this Audio.

        Duration of this track in seconds

        :return: The duration of this Audio.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this Audio.

        Duration of this track in seconds

        :param duration: The duration of this Audio.
        :type duration: float
        """

        self._duration = duration

    @property
    def genres(self):
        """Gets the genres of this Audio.

        List of all genres for this track

        :return: The genres of this Audio.
        :rtype: List[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres):
        """Sets the genres of this Audio.

        List of all genres for this track

        :param genres: The genres of this Audio.
        :type genres: List[str]
        """

        self._genres = genres

    @property
    def id(self):
        """Gets the id of this Audio.

        Shutterstock ID of this track

        :return: The id of this Audio.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Audio.

        Shutterstock ID of this track

        :param id: The id of this Audio.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def instruments(self):
        """Gets the instruments of this Audio.

        List of all instruments that appear in this track

        :return: The instruments of this Audio.
        :rtype: List[str]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this Audio.

        List of all instruments that appear in this track

        :param instruments: The instruments of this Audio.
        :type instruments: List[str]
        """

        self._instruments = instruments

    @property
    def is_adult(self):
        """Gets the is_adult of this Audio.

        Whether or not this track contains adult content

        :return: The is_adult of this Audio.
        :rtype: bool
        """
        return self._is_adult

    @is_adult.setter
    def is_adult(self, is_adult):
        """Sets the is_adult of this Audio.

        Whether or not this track contains adult content

        :param is_adult: The is_adult of this Audio.
        :type is_adult: bool
        """

        self._is_adult = is_adult

    @property
    def is_instrumental(self):
        """Gets the is_instrumental of this Audio.

        Whether or not this track is purely instrumental (lacking lyrics)

        :return: The is_instrumental of this Audio.
        :rtype: bool
        """
        return self._is_instrumental

    @is_instrumental.setter
    def is_instrumental(self, is_instrumental):
        """Sets the is_instrumental of this Audio.

        Whether or not this track is purely instrumental (lacking lyrics)

        :param is_instrumental: The is_instrumental of this Audio.
        :type is_instrumental: bool
        """

        self._is_instrumental = is_instrumental

    @property
    def isrc(self):
        """Gets the isrc of this Audio.

        

        :return: The isrc of this Audio.
        :rtype: str
        """
        return self._isrc

    @isrc.setter
    def isrc(self, isrc):
        """Sets the isrc of this Audio.

        

        :param isrc: The isrc of this Audio.
        :type isrc: str
        """

        self._isrc = isrc

    @property
    def keywords(self):
        """Gets the keywords of this Audio.

        List of all keywords for this track

        :return: The keywords of this Audio.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Audio.

        List of all keywords for this track

        :param keywords: The keywords of this Audio.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def language(self):
        """Gets the language of this Audio.

        Language of this track's lyrics

        :return: The language of this Audio.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Audio.

        Language of this track's lyrics

        :param language: The language of this Audio.
        :type language: str
        """

        self._language = language

    @property
    def lyrics(self):
        """Gets the lyrics of this Audio.

        Lyrics of this track

        :return: The lyrics of this Audio.
        :rtype: str
        """
        return self._lyrics

    @lyrics.setter
    def lyrics(self, lyrics):
        """Sets the lyrics of this Audio.

        Lyrics of this track

        :param lyrics: The lyrics of this Audio.
        :type lyrics: str
        """

        self._lyrics = lyrics

    @property
    def media_type(self):
        """Gets the media_type of this Audio.

        Media type of this track; should always be \"audio\"

        :return: The media_type of this Audio.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Audio.

        Media type of this track; should always be \"audio\"

        :param media_type: The media_type of this Audio.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def model_releases(self):
        """Gets the model_releases of this Audio.

        List of all model releases for this track

        :return: The model_releases of this Audio.
        :rtype: List[ModelRelease]
        """
        return self._model_releases

    @model_releases.setter
    def model_releases(self, model_releases):
        """Sets the model_releases of this Audio.

        List of all model releases for this track

        :param model_releases: The model_releases of this Audio.
        :type model_releases: List[ModelRelease]
        """

        self._model_releases = model_releases

    @property
    def moods(self):
        """Gets the moods of this Audio.

        List of all moods of this track

        :return: The moods of this Audio.
        :rtype: List[str]
        """
        return self._moods

    @moods.setter
    def moods(self, moods):
        """Sets the moods of this Audio.

        List of all moods of this track

        :param moods: The moods of this Audio.
        :type moods: List[str]
        """

        self._moods = moods

    @property
    def published_time(self):
        """Gets the published_time of this Audio.

        Time this track was published

        :return: The published_time of this Audio.
        :rtype: datetime
        """
        return self._published_time

    @published_time.setter
    def published_time(self, published_time):
        """Sets the published_time of this Audio.

        Time this track was published

        :param published_time: The published_time of this Audio.
        :type published_time: datetime
        """

        self._published_time = published_time

    @property
    def recording_version(self):
        """Gets the recording_version of this Audio.

        Recording version of this track

        :return: The recording_version of this Audio.
        :rtype: str
        """
        return self._recording_version

    @recording_version.setter
    def recording_version(self, recording_version):
        """Sets the recording_version of this Audio.

        Recording version of this track

        :param recording_version: The recording_version of this Audio.
        :type recording_version: str
        """

        self._recording_version = recording_version

    @property
    def releases(self):
        """Gets the releases of this Audio.

        List of all releases of this track

        :return: The releases of this Audio.
        :rtype: List[str]
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this Audio.

        List of all releases of this track

        :param releases: The releases of this Audio.
        :type releases: List[str]
        """

        self._releases = releases

    @property
    def similar_artists(self):
        """Gets the similar_artists of this Audio.

        List of all similar artists of this track

        :return: The similar_artists of this Audio.
        :rtype: List[Artist]
        """
        return self._similar_artists

    @similar_artists.setter
    def similar_artists(self, similar_artists):
        """Sets the similar_artists of this Audio.

        List of all similar artists of this track

        :param similar_artists: The similar_artists of this Audio.
        :type similar_artists: List[Artist]
        """

        self._similar_artists = similar_artists

    @property
    def submitted_time(self):
        """Gets the submitted_time of this Audio.

        Time this track was submitted

        :return: The submitted_time of this Audio.
        :rtype: datetime
        """
        return self._submitted_time

    @submitted_time.setter
    def submitted_time(self, submitted_time):
        """Sets the submitted_time of this Audio.

        Time this track was submitted

        :param submitted_time: The submitted_time of this Audio.
        :type submitted_time: datetime
        """

        self._submitted_time = submitted_time

    @property
    def title(self):
        """Gets the title of this Audio.

        Title of this track

        :return: The title of this Audio.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this Audio.

        Title of this track

        :param title: The title of this Audio.
        :type title: str
        """

        self._title = title

    @property
    def updated_time(self):
        """Gets the updated_time of this Audio.

        Time this track was last updated

        :return: The updated_time of this Audio.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this Audio.

        Time this track was last updated

        :param updated_time: The updated_time of this Audio.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def url(self):
        """Gets the url of this Audio.

        

        :return: The url of this Audio.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Audio.

        

        :param url: The url of this Audio.
        :type url: str
        """

        self._url = url

    @property
    def vocal_description(self):
        """Gets the vocal_description of this Audio.

        Vocal description of this track

        :return: The vocal_description of this Audio.
        :rtype: str
        """
        return self._vocal_description

    @vocal_description.setter
    def vocal_description(self, vocal_description):
        """Sets the vocal_description of this Audio.

        Vocal description of this track

        :param vocal_description: The vocal_description of this Audio.
        :type vocal_description: str
        """

        self._vocal_description = vocal_description
