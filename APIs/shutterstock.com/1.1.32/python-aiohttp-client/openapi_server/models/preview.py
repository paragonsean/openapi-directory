# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Preview(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type: str=None, url: str=None):
        """Preview - a model defined in OpenAPI

        :param content_type: The content_type of this Preview.
        :param url: The url of this Preview.
        """
        self.openapi_types = {
            'content_type': str,
            'url': str
        }

        self.attribute_map = {
            'content_type': 'content_type',
            'url': 'url'
        }

        self._content_type = content_type
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Preview':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Preview of this Preview.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self):
        """Gets the content_type of this Preview.

        Content type of the preview, currently audio/mp3

        :return: The content_type of this Preview.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this Preview.

        Content type of the preview, currently audio/mp3

        :param content_type: The content_type of this Preview.
        :type content_type: str
        """
        allowed_values = ["audio/mp3"]  # noqa: E501
        if content_type not in allowed_values:
            raise ValueError(
                "Invalid value for `content_type` ({0}), must be one of {1}"
                .format(content_type, allowed_values)
            )

        self._content_type = content_type

    @property
    def url(self):
        """Gets the url of this Preview.

        Url of the instrument's preview file

        :return: The url of this Preview.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Preview.

        Url of the instrument's preview file

        :param url: The url of this Preview.
        :type url: str
        """

        self._url = url
