# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_collection_role_assignments_roles import CatalogCollectionRoleAssignmentsRoles
from openapi_server import util


class CatalogCollectionRoleAssignments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, collection_id: str=None, roles: CatalogCollectionRoleAssignmentsRoles=None):
        """CatalogCollectionRoleAssignments - a model defined in OpenAPI

        :param collection_id: The collection_id of this CatalogCollectionRoleAssignments.
        :param roles: The roles of this CatalogCollectionRoleAssignments.
        """
        self.openapi_types = {
            'collection_id': str,
            'roles': CatalogCollectionRoleAssignmentsRoles
        }

        self.attribute_map = {
            'collection_id': 'collection_id',
            'roles': 'roles'
        }

        self._collection_id = collection_id
        self._roles = roles

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCollectionRoleAssignments':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCollectionRoleAssignments of this CatalogCollectionRoleAssignments.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def collection_id(self):
        """Gets the collection_id of this CatalogCollectionRoleAssignments.


        :return: The collection_id of this CatalogCollectionRoleAssignments.
        :rtype: str
        """
        return self._collection_id

    @collection_id.setter
    def collection_id(self, collection_id):
        """Sets the collection_id of this CatalogCollectionRoleAssignments.


        :param collection_id: The collection_id of this CatalogCollectionRoleAssignments.
        :type collection_id: str
        """
        if collection_id is None:
            raise ValueError("Invalid value for `collection_id`, must not be `None`")

        self._collection_id = collection_id

    @property
    def roles(self):
        """Gets the roles of this CatalogCollectionRoleAssignments.


        :return: The roles of this CatalogCollectionRoleAssignments.
        :rtype: CatalogCollectionRoleAssignmentsRoles
        """
        return self._roles

    @roles.setter
    def roles(self, roles):
        """Sets the roles of this CatalogCollectionRoleAssignments.


        :param roles: The roles of this CatalogCollectionRoleAssignments.
        :type roles: CatalogCollectionRoleAssignmentsRoles
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")

        self._roles = roles
