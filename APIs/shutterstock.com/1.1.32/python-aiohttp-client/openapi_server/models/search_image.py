# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.language import Language
from openapi_server.models.search_image_contributor_country import SearchImageContributorCountry
from openapi_server.models.search_image_region import SearchImageRegion
from openapi_server import util


class SearchImage(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_date: date=None, added_date_end: date=None, added_date_start: date=None, aspect_ratio: float=None, aspect_ratio_max: float=None, aspect_ratio_min: float=None, authentic: bool=None, category: str=None, color: str=None, contributor: List[str]=None, contributor_country: SearchImageContributorCountry=None, fields: str=None, height: int=None, height_from: int=None, height_to: int=None, image_type: List[str]=None, keyword_safe_search: bool=True, language: Language=None, license: List[str]=["commercial"], model: List[str]=None, orientation: str=None, page: int=1, people_age: str=None, people_ethnicity: List[str]=None, people_gender: str=None, people_model_released: bool=None, people_number: int=None, per_page: int=20, query: str=None, region: SearchImageRegion=None, safe: bool=True, sort: str='popular', spellcheck_query: bool=True, view: str='minimal', width: int=None, width_from: int=None, width_to: int=None):
        """SearchImage - a model defined in OpenAPI

        :param added_date: The added_date of this SearchImage.
        :param added_date_end: The added_date_end of this SearchImage.
        :param added_date_start: The added_date_start of this SearchImage.
        :param aspect_ratio: The aspect_ratio of this SearchImage.
        :param aspect_ratio_max: The aspect_ratio_max of this SearchImage.
        :param aspect_ratio_min: The aspect_ratio_min of this SearchImage.
        :param authentic: The authentic of this SearchImage.
        :param category: The category of this SearchImage.
        :param color: The color of this SearchImage.
        :param contributor: The contributor of this SearchImage.
        :param contributor_country: The contributor_country of this SearchImage.
        :param fields: The fields of this SearchImage.
        :param height: The height of this SearchImage.
        :param height_from: The height_from of this SearchImage.
        :param height_to: The height_to of this SearchImage.
        :param image_type: The image_type of this SearchImage.
        :param keyword_safe_search: The keyword_safe_search of this SearchImage.
        :param language: The language of this SearchImage.
        :param license: The license of this SearchImage.
        :param model: The model of this SearchImage.
        :param orientation: The orientation of this SearchImage.
        :param page: The page of this SearchImage.
        :param people_age: The people_age of this SearchImage.
        :param people_ethnicity: The people_ethnicity of this SearchImage.
        :param people_gender: The people_gender of this SearchImage.
        :param people_model_released: The people_model_released of this SearchImage.
        :param people_number: The people_number of this SearchImage.
        :param per_page: The per_page of this SearchImage.
        :param query: The query of this SearchImage.
        :param region: The region of this SearchImage.
        :param safe: The safe of this SearchImage.
        :param sort: The sort of this SearchImage.
        :param spellcheck_query: The spellcheck_query of this SearchImage.
        :param view: The view of this SearchImage.
        :param width: The width of this SearchImage.
        :param width_from: The width_from of this SearchImage.
        :param width_to: The width_to of this SearchImage.
        """
        self.openapi_types = {
            'added_date': date,
            'added_date_end': date,
            'added_date_start': date,
            'aspect_ratio': float,
            'aspect_ratio_max': float,
            'aspect_ratio_min': float,
            'authentic': bool,
            'category': str,
            'color': str,
            'contributor': List[str],
            'contributor_country': SearchImageContributorCountry,
            'fields': str,
            'height': int,
            'height_from': int,
            'height_to': int,
            'image_type': List[str],
            'keyword_safe_search': bool,
            'language': Language,
            'license': List[str],
            'model': List[str],
            'orientation': str,
            'page': int,
            'people_age': str,
            'people_ethnicity': List[str],
            'people_gender': str,
            'people_model_released': bool,
            'people_number': int,
            'per_page': int,
            'query': str,
            'region': SearchImageRegion,
            'safe': bool,
            'sort': str,
            'spellcheck_query': bool,
            'view': str,
            'width': int,
            'width_from': int,
            'width_to': int
        }

        self.attribute_map = {
            'added_date': 'added_date',
            'added_date_end': 'added_date_end',
            'added_date_start': 'added_date_start',
            'aspect_ratio': 'aspect_ratio',
            'aspect_ratio_max': 'aspect_ratio_max',
            'aspect_ratio_min': 'aspect_ratio_min',
            'authentic': 'authentic',
            'category': 'category',
            'color': 'color',
            'contributor': 'contributor',
            'contributor_country': 'contributor_country',
            'fields': 'fields',
            'height': 'height',
            'height_from': 'height_from',
            'height_to': 'height_to',
            'image_type': 'image_type',
            'keyword_safe_search': 'keyword_safe_search',
            'language': 'language',
            'license': 'license',
            'model': 'model',
            'orientation': 'orientation',
            'page': 'page',
            'people_age': 'people_age',
            'people_ethnicity': 'people_ethnicity',
            'people_gender': 'people_gender',
            'people_model_released': 'people_model_released',
            'people_number': 'people_number',
            'per_page': 'per_page',
            'query': 'query',
            'region': 'region',
            'safe': 'safe',
            'sort': 'sort',
            'spellcheck_query': 'spellcheck_query',
            'view': 'view',
            'width': 'width',
            'width_from': 'width_from',
            'width_to': 'width_to'
        }

        self._added_date = added_date
        self._added_date_end = added_date_end
        self._added_date_start = added_date_start
        self._aspect_ratio = aspect_ratio
        self._aspect_ratio_max = aspect_ratio_max
        self._aspect_ratio_min = aspect_ratio_min
        self._authentic = authentic
        self._category = category
        self._color = color
        self._contributor = contributor
        self._contributor_country = contributor_country
        self._fields = fields
        self._height = height
        self._height_from = height_from
        self._height_to = height_to
        self._image_type = image_type
        self._keyword_safe_search = keyword_safe_search
        self._language = language
        self._license = license
        self._model = model
        self._orientation = orientation
        self._page = page
        self._people_age = people_age
        self._people_ethnicity = people_ethnicity
        self._people_gender = people_gender
        self._people_model_released = people_model_released
        self._people_number = people_number
        self._per_page = per_page
        self._query = query
        self._region = region
        self._safe = safe
        self._sort = sort
        self._spellcheck_query = spellcheck_query
        self._view = view
        self._width = width
        self._width_from = width_from
        self._width_to = width_to

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SearchImage':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SearchImage of this SearchImage.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_date(self):
        """Gets the added_date of this SearchImage.

        Show images added on the specified date

        :return: The added_date of this SearchImage.
        :rtype: date
        """
        return self._added_date

    @added_date.setter
    def added_date(self, added_date):
        """Sets the added_date of this SearchImage.

        Show images added on the specified date

        :param added_date: The added_date of this SearchImage.
        :type added_date: date
        """

        self._added_date = added_date

    @property
    def added_date_end(self):
        """Gets the added_date_end of this SearchImage.

        Show images added before the specified date

        :return: The added_date_end of this SearchImage.
        :rtype: date
        """
        return self._added_date_end

    @added_date_end.setter
    def added_date_end(self, added_date_end):
        """Sets the added_date_end of this SearchImage.

        Show images added before the specified date

        :param added_date_end: The added_date_end of this SearchImage.
        :type added_date_end: date
        """

        self._added_date_end = added_date_end

    @property
    def added_date_start(self):
        """Gets the added_date_start of this SearchImage.

        Show images added on or after the specified date

        :return: The added_date_start of this SearchImage.
        :rtype: date
        """
        return self._added_date_start

    @added_date_start.setter
    def added_date_start(self, added_date_start):
        """Sets the added_date_start of this SearchImage.

        Show images added on or after the specified date

        :param added_date_start: The added_date_start of this SearchImage.
        :type added_date_start: date
        """

        self._added_date_start = added_date_start

    @property
    def aspect_ratio(self):
        """Gets the aspect_ratio of this SearchImage.

        Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image

        :return: The aspect_ratio of this SearchImage.
        :rtype: float
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio):
        """Sets the aspect_ratio of this SearchImage.

        Show images with the specified aspect ratio, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image

        :param aspect_ratio: The aspect_ratio of this SearchImage.
        :type aspect_ratio: float
        """

        self._aspect_ratio = aspect_ratio

    @property
    def aspect_ratio_max(self):
        """Gets the aspect_ratio_max of this SearchImage.

        Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image

        :return: The aspect_ratio_max of this SearchImage.
        :rtype: float
        """
        return self._aspect_ratio_max

    @aspect_ratio_max.setter
    def aspect_ratio_max(self, aspect_ratio_max):
        """Sets the aspect_ratio_max of this SearchImage.

        Show images with the specified aspect ratio or lower, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image

        :param aspect_ratio_max: The aspect_ratio_max of this SearchImage.
        :type aspect_ratio_max: float
        """
        if aspect_ratio_max is not None and aspect_ratio_max < 0:
            raise ValueError("Invalid value for `aspect_ratio_max`, must be a value greater than or equal to `0`")

        self._aspect_ratio_max = aspect_ratio_max

    @property
    def aspect_ratio_min(self):
        """Gets the aspect_ratio_min of this SearchImage.

        Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image

        :return: The aspect_ratio_min of this SearchImage.
        :rtype: float
        """
        return self._aspect_ratio_min

    @aspect_ratio_min.setter
    def aspect_ratio_min(self, aspect_ratio_min):
        """Sets the aspect_ratio_min of this SearchImage.

        Show images with the specified aspect ratio or higher, using a positive decimal of the width divided by the height, such as 1.7778 for a 16:9 image

        :param aspect_ratio_min: The aspect_ratio_min of this SearchImage.
        :type aspect_ratio_min: float
        """
        if aspect_ratio_min is not None and aspect_ratio_min < 0:
            raise ValueError("Invalid value for `aspect_ratio_min`, must be a value greater than or equal to `0`")

        self._aspect_ratio_min = aspect_ratio_min

    @property
    def authentic(self):
        """Gets the authentic of this SearchImage.

        Show only authentic images

        :return: The authentic of this SearchImage.
        :rtype: bool
        """
        return self._authentic

    @authentic.setter
    def authentic(self, authentic):
        """Sets the authentic of this SearchImage.

        Show only authentic images

        :param authentic: The authentic of this SearchImage.
        :type authentic: bool
        """

        self._authentic = authentic

    @property
    def category(self):
        """Gets the category of this SearchImage.

        Show images with the specified Shutterstock-defined category; specify a category name or ID

        :return: The category of this SearchImage.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """Sets the category of this SearchImage.

        Show images with the specified Shutterstock-defined category; specify a category name or ID

        :param category: The category of this SearchImage.
        :type category: str
        """

        self._category = category

    @property
    def color(self):
        """Gets the color of this SearchImage.

        Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors

        :return: The color of this SearchImage.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this SearchImage.

        Specify either a hexadecimal color in the format '4F21EA' or 'grayscale'; the API returns images that use similar colors

        :param color: The color of this SearchImage.
        :type color: str
        """

        self._color = color

    @property
    def contributor(self):
        """Gets the contributor of this SearchImage.

        Show images with the specified contributor names or IDs, allows multiple

        :return: The contributor of this SearchImage.
        :rtype: List[str]
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this SearchImage.

        Show images with the specified contributor names or IDs, allows multiple

        :param contributor: The contributor of this SearchImage.
        :type contributor: List[str]
        """

        self._contributor = contributor

    @property
    def contributor_country(self):
        """Gets the contributor_country of this SearchImage.


        :return: The contributor_country of this SearchImage.
        :rtype: SearchImageContributorCountry
        """
        return self._contributor_country

    @contributor_country.setter
    def contributor_country(self, contributor_country):
        """Sets the contributor_country of this SearchImage.


        :param contributor_country: The contributor_country of this SearchImage.
        :type contributor_country: SearchImageContributorCountry
        """

        self._contributor_country = contributor_country

    @property
    def fields(self):
        """Gets the fields of this SearchImage.

        Fields to display in the response; see the documentation for the fields parameter in the overview section

        :return: The fields of this SearchImage.
        :rtype: str
        """
        return self._fields

    @fields.setter
    def fields(self, fields):
        """Sets the fields of this SearchImage.

        Fields to display in the response; see the documentation for the fields parameter in the overview section

        :param fields: The fields of this SearchImage.
        :type fields: str
        """

        self._fields = fields

    @property
    def height(self):
        """Gets the height of this SearchImage.

        (Deprecated; use height_from and height_to instead) Show images with the specified height

        :return: The height of this SearchImage.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this SearchImage.

        (Deprecated; use height_from and height_to instead) Show images with the specified height

        :param height: The height of this SearchImage.
        :type height: int
        """

        self._height = height

    @property
    def height_from(self):
        """Gets the height_from of this SearchImage.

        Show images with the specified height or larger, in pixels

        :return: The height_from of this SearchImage.
        :rtype: int
        """
        return self._height_from

    @height_from.setter
    def height_from(self, height_from):
        """Sets the height_from of this SearchImage.

        Show images with the specified height or larger, in pixels

        :param height_from: The height_from of this SearchImage.
        :type height_from: int
        """

        self._height_from = height_from

    @property
    def height_to(self):
        """Gets the height_to of this SearchImage.

        Show images with the specified height or smaller, in pixels

        :return: The height_to of this SearchImage.
        :rtype: int
        """
        return self._height_to

    @height_to.setter
    def height_to(self, height_to):
        """Sets the height_to of this SearchImage.

        Show images with the specified height or smaller, in pixels

        :param height_to: The height_to of this SearchImage.
        :type height_to: int
        """

        self._height_to = height_to

    @property
    def image_type(self):
        """Gets the image_type of this SearchImage.

        Show images of the specified type

        :return: The image_type of this SearchImage.
        :rtype: List[str]
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this SearchImage.

        Show images of the specified type

        :param image_type: The image_type of this SearchImage.
        :type image_type: List[str]
        """
        allowed_values = ["photo", "illustration", "vector"]  # noqa: E501
        if not set(image_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `image_type` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(image_type) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._image_type = image_type

    @property
    def keyword_safe_search(self):
        """Gets the keyword_safe_search of this SearchImage.

        Hide results with potentially unsafe keywords

        :return: The keyword_safe_search of this SearchImage.
        :rtype: bool
        """
        return self._keyword_safe_search

    @keyword_safe_search.setter
    def keyword_safe_search(self, keyword_safe_search):
        """Sets the keyword_safe_search of this SearchImage.

        Hide results with potentially unsafe keywords

        :param keyword_safe_search: The keyword_safe_search of this SearchImage.
        :type keyword_safe_search: bool
        """

        self._keyword_safe_search = keyword_safe_search

    @property
    def language(self):
        """Gets the language of this SearchImage.


        :return: The language of this SearchImage.
        :rtype: Language
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this SearchImage.


        :param language: The language of this SearchImage.
        :type language: Language
        """

        self._language = language

    @property
    def license(self):
        """Gets the license of this SearchImage.

        Show only images with the specified license

        :return: The license of this SearchImage.
        :rtype: List[str]
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this SearchImage.

        Show only images with the specified license

        :param license: The license of this SearchImage.
        :type license: List[str]
        """
        allowed_values = ["commercial", "editorial", "enhanced"]  # noqa: E501
        if not set(license).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `license` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(license) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._license = license

    @property
    def model(self):
        """Gets the model of this SearchImage.

        Show image results with the specified model IDs

        :return: The model of this SearchImage.
        :rtype: List[str]
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this SearchImage.

        Show image results with the specified model IDs

        :param model: The model of this SearchImage.
        :type model: List[str]
        """

        self._model = model

    @property
    def orientation(self):
        """Gets the orientation of this SearchImage.

        Show image results with horizontal or vertical orientation

        :return: The orientation of this SearchImage.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this SearchImage.

        Show image results with horizontal or vertical orientation

        :param orientation: The orientation of this SearchImage.
        :type orientation: str
        """
        allowed_values = ["horizontal", "vertical"]  # noqa: E501
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def page(self):
        """Gets the page of this SearchImage.

        Page number

        :return: The page of this SearchImage.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this SearchImage.

        Page number

        :param page: The page of this SearchImage.
        :type page: int
        """
        if page is not None and page < 1:
            raise ValueError("Invalid value for `page`, must be a value greater than or equal to `1`")

        self._page = page

    @property
    def people_age(self):
        """Gets the people_age of this SearchImage.

        Show images that feature people of the specified age category

        :return: The people_age of this SearchImage.
        :rtype: str
        """
        return self._people_age

    @people_age.setter
    def people_age(self, people_age):
        """Sets the people_age of this SearchImage.

        Show images that feature people of the specified age category

        :param people_age: The people_age of this SearchImage.
        :type people_age: str
        """
        allowed_values = ["infants", "children", "teenagers", "20s", "30s", "40s", "50s", "60s", "older"]  # noqa: E501
        if people_age not in allowed_values:
            raise ValueError(
                "Invalid value for `people_age` ({0}), must be one of {1}"
                .format(people_age, allowed_values)
            )

        self._people_age = people_age

    @property
    def people_ethnicity(self):
        """Gets the people_ethnicity of this SearchImage.

        Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities

        :return: The people_ethnicity of this SearchImage.
        :rtype: List[str]
        """
        return self._people_ethnicity

    @people_ethnicity.setter
    def people_ethnicity(self, people_ethnicity):
        """Sets the people_ethnicity of this SearchImage.

        Show images with people of the specified ethnicities, or start with NOT to show images without those ethnicities

        :param people_ethnicity: The people_ethnicity of this SearchImage.
        :type people_ethnicity: List[str]
        """
        allowed_values = ["african", "african_american", "black", "brazilian", "chinese", "caucasian", "east_asian", "hispanic", "japanese", "middle_eastern", "native_american", "pacific_islander", "south_asian", "southeast_asian", "other", "NOT african", "NOT african_american", "NOT black", "NOT brazilian", "NOT chinese", "NOT caucasian", "NOT east_asian", "NOT hispanic", "NOT japanese", "NOT middle_eastern", "NOT native_american", "NOT pacific_islander", "NOT south_asian", "NOT southeast_asian", "NOT other"]  # noqa: E501
        if not set(people_ethnicity).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `people_ethnicity` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(people_ethnicity) - set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._people_ethnicity = people_ethnicity

    @property
    def people_gender(self):
        """Gets the people_gender of this SearchImage.

        Show images with people of the specified gender

        :return: The people_gender of this SearchImage.
        :rtype: str
        """
        return self._people_gender

    @people_gender.setter
    def people_gender(self, people_gender):
        """Sets the people_gender of this SearchImage.

        Show images with people of the specified gender

        :param people_gender: The people_gender of this SearchImage.
        :type people_gender: str
        """
        allowed_values = ["male", "female", "both"]  # noqa: E501
        if people_gender not in allowed_values:
            raise ValueError(
                "Invalid value for `people_gender` ({0}), must be one of {1}"
                .format(people_gender, allowed_values)
            )

        self._people_gender = people_gender

    @property
    def people_model_released(self):
        """Gets the people_model_released of this SearchImage.

        Show images of people with a signed model release

        :return: The people_model_released of this SearchImage.
        :rtype: bool
        """
        return self._people_model_released

    @people_model_released.setter
    def people_model_released(self, people_model_released):
        """Sets the people_model_released of this SearchImage.

        Show images of people with a signed model release

        :param people_model_released: The people_model_released of this SearchImage.
        :type people_model_released: bool
        """

        self._people_model_released = people_model_released

    @property
    def people_number(self):
        """Gets the people_number of this SearchImage.

        Show images with the specified number of people

        :return: The people_number of this SearchImage.
        :rtype: int
        """
        return self._people_number

    @people_number.setter
    def people_number(self, people_number):
        """Sets the people_number of this SearchImage.

        Show images with the specified number of people

        :param people_number: The people_number of this SearchImage.
        :type people_number: int
        """
        if people_number is not None and people_number > 4:
            raise ValueError("Invalid value for `people_number`, must be a value less than or equal to `4`")
        if people_number is not None and people_number < 0:
            raise ValueError("Invalid value for `people_number`, must be a value greater than or equal to `0`")

        self._people_number = people_number

    @property
    def per_page(self):
        """Gets the per_page of this SearchImage.

        Number of results per page

        :return: The per_page of this SearchImage.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this SearchImage.

        Number of results per page

        :param per_page: The per_page of this SearchImage.
        :type per_page: int
        """
        if per_page is not None and per_page > 20:
            raise ValueError("Invalid value for `per_page`, must be a value less than or equal to `20`")
        if per_page is not None and per_page < 0:
            raise ValueError("Invalid value for `per_page`, must be a value greater than or equal to `0`")

        self._per_page = per_page

    @property
    def query(self):
        """Gets the query of this SearchImage.

        One or more search terms separated by spaces; you can use NOT to filter out images that match a term

        :return: The query of this SearchImage.
        :rtype: str
        """
        return self._query

    @query.setter
    def query(self, query):
        """Sets the query of this SearchImage.

        One or more search terms separated by spaces; you can use NOT to filter out images that match a term

        :param query: The query of this SearchImage.
        :type query: str
        """

        self._query = query

    @property
    def region(self):
        """Gets the region of this SearchImage.


        :return: The region of this SearchImage.
        :rtype: SearchImageRegion
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this SearchImage.


        :param region: The region of this SearchImage.
        :type region: SearchImageRegion
        """

        self._region = region

    @property
    def safe(self):
        """Gets the safe of this SearchImage.

        Enable or disable safe search

        :return: The safe of this SearchImage.
        :rtype: bool
        """
        return self._safe

    @safe.setter
    def safe(self, safe):
        """Sets the safe of this SearchImage.

        Enable or disable safe search

        :param safe: The safe of this SearchImage.
        :type safe: bool
        """

        self._safe = safe

    @property
    def sort(self):
        """Gets the sort of this SearchImage.

        Sort by

        :return: The sort of this SearchImage.
        :rtype: str
        """
        return self._sort

    @sort.setter
    def sort(self, sort):
        """Sets the sort of this SearchImage.

        Sort by

        :param sort: The sort of this SearchImage.
        :type sort: str
        """
        allowed_values = ["newest", "popular", "relevance", "random"]  # noqa: E501
        if sort not in allowed_values:
            raise ValueError(
                "Invalid value for `sort` ({0}), must be one of {1}"
                .format(sort, allowed_values)
            )

        self._sort = sort

    @property
    def spellcheck_query(self):
        """Gets the spellcheck_query of this SearchImage.

        Spellcheck the search query and return results on suggested spellings

        :return: The spellcheck_query of this SearchImage.
        :rtype: bool
        """
        return self._spellcheck_query

    @spellcheck_query.setter
    def spellcheck_query(self, spellcheck_query):
        """Sets the spellcheck_query of this SearchImage.

        Spellcheck the search query and return results on suggested spellings

        :param spellcheck_query: The spellcheck_query of this SearchImage.
        :type spellcheck_query: bool
        """

        self._spellcheck_query = spellcheck_query

    @property
    def view(self):
        """Gets the view of this SearchImage.

        Amount of detail to render in the response

        :return: The view of this SearchImage.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view):
        """Sets the view of this SearchImage.

        Amount of detail to render in the response

        :param view: The view of this SearchImage.
        :type view: str
        """
        allowed_values = ["minimal", "full"]  # noqa: E501
        if view not in allowed_values:
            raise ValueError(
                "Invalid value for `view` ({0}), must be one of {1}"
                .format(view, allowed_values)
            )

        self._view = view

    @property
    def width(self):
        """Gets the width of this SearchImage.

        (Deprecated; use width_from and width_to instead) Show images with the specified width

        :return: The width of this SearchImage.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this SearchImage.

        (Deprecated; use width_from and width_to instead) Show images with the specified width

        :param width: The width of this SearchImage.
        :type width: int
        """

        self._width = width

    @property
    def width_from(self):
        """Gets the width_from of this SearchImage.

        Show images with the specified width or larger, in pixels

        :return: The width_from of this SearchImage.
        :rtype: int
        """
        return self._width_from

    @width_from.setter
    def width_from(self, width_from):
        """Sets the width_from of this SearchImage.

        Show images with the specified width or larger, in pixels

        :param width_from: The width_from of this SearchImage.
        :type width_from: int
        """

        self._width_from = width_from

    @property
    def width_to(self):
        """Gets the width_to of this SearchImage.

        Show images with the specified width or smaller, in pixels

        :return: The width_to of this SearchImage.
        :rtype: int
        """
        return self._width_to

    @width_to.setter
    def width_to(self, width_to):
        """Sets the width_to of this SearchImage.

        Show images with the specified width or smaller, in pixels

        :param width_to: The width_to of this SearchImage.
        :type width_to: int
        """

        self._width_to = width_to
