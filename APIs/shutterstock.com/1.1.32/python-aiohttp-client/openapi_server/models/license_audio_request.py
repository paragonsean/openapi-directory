# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.license_audio import LicenseAudio
from openapi_server import util


class LicenseAudioRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: List[LicenseAudio]=None):
        """LicenseAudioRequest - a model defined in OpenAPI

        :param audio: The audio of this LicenseAudioRequest.
        """
        self.openapi_types = {
            'audio': List[LicenseAudio]
        }

        self.attribute_map = {
            'audio': 'audio'
        }

        self._audio = audio

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseAudioRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseAudioRequest of this LicenseAudioRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this LicenseAudioRequest.

        List of audio tracks to license

        :return: The audio of this LicenseAudioRequest.
        :rtype: List[LicenseAudio]
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this LicenseAudioRequest.

        List of audio tracks to license

        :param audio: The audio of this LicenseAudioRequest.
        :type audio: List[LicenseAudio]
        """
        if audio is None:
            raise ValueError("Invalid value for `audio`, must not be `None`")
        if audio is not None and len(audio) > 50:
            raise ValueError("Invalid value for `audio`, number of items must be less than or equal to `50`")

        self._audio = audio
