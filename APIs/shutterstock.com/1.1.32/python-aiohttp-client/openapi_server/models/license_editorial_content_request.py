# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.iso_country_code import ISOCountryCode
from openapi_server.models.license_editorial_content import LicenseEditorialContent
from openapi_server import util


class LicenseEditorialContentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country: ISOCountryCode=None, editorial: List[LicenseEditorialContent]=None):
        """LicenseEditorialContentRequest - a model defined in OpenAPI

        :param country: The country of this LicenseEditorialContentRequest.
        :param editorial: The editorial of this LicenseEditorialContentRequest.
        """
        self.openapi_types = {
            'country': ISOCountryCode,
            'editorial': List[LicenseEditorialContent]
        }

        self.attribute_map = {
            'country': 'country',
            'editorial': 'editorial'
        }

        self._country = country
        self._editorial = editorial

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseEditorialContentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseEditorialContentRequest of this LicenseEditorialContentRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country(self):
        """Gets the country of this LicenseEditorialContentRequest.


        :return: The country of this LicenseEditorialContentRequest.
        :rtype: ISOCountryCode
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this LicenseEditorialContentRequest.


        :param country: The country of this LicenseEditorialContentRequest.
        :type country: ISOCountryCode
        """
        if country is None:
            raise ValueError("Invalid value for `country`, must not be `None`")

        self._country = country

    @property
    def editorial(self):
        """Gets the editorial of this LicenseEditorialContentRequest.

        Editorial content to license

        :return: The editorial of this LicenseEditorialContentRequest.
        :rtype: List[LicenseEditorialContent]
        """
        return self._editorial

    @editorial.setter
    def editorial(self, editorial):
        """Sets the editorial of this LicenseEditorialContentRequest.

        Editorial content to license

        :param editorial: The editorial of this LicenseEditorialContentRequest.
        :type editorial: List[LicenseEditorialContent]
        """
        if editorial is None:
            raise ValueError("Invalid value for `editorial`, must not be `None`")

        self._editorial = editorial
