# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.category import Category
from openapi_server.models.contributor import Contributor
from openapi_server.models.image_assets import ImageAssets
from openapi_server.models.image_insights import ImageInsights
from openapi_server.models.model import Model
from openapi_server.models.model_release import ModelRelease
from openapi_server import util


class Image(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_date: date=None, affiliate_url: str=None, aspect: float=None, assets: ImageAssets=None, categories: List[Category]=None, contributor: Contributor=None, description: str=None, has_model_release: bool=None, has_property_release: bool=None, id: str=None, image_type: str=None, insights: ImageInsights=None, is_adult: bool=None, is_editorial: bool=None, is_illustration: bool=None, keywords: List[str]=None, media_type: str=None, model_releases: List[ModelRelease]=None, models: List[Model]=None, releases: List[str]=None, url: str=None):
        """Image - a model defined in OpenAPI

        :param added_date: The added_date of this Image.
        :param affiliate_url: The affiliate_url of this Image.
        :param aspect: The aspect of this Image.
        :param assets: The assets of this Image.
        :param categories: The categories of this Image.
        :param contributor: The contributor of this Image.
        :param description: The description of this Image.
        :param has_model_release: The has_model_release of this Image.
        :param has_property_release: The has_property_release of this Image.
        :param id: The id of this Image.
        :param image_type: The image_type of this Image.
        :param insights: The insights of this Image.
        :param is_adult: The is_adult of this Image.
        :param is_editorial: The is_editorial of this Image.
        :param is_illustration: The is_illustration of this Image.
        :param keywords: The keywords of this Image.
        :param media_type: The media_type of this Image.
        :param model_releases: The model_releases of this Image.
        :param models: The models of this Image.
        :param releases: The releases of this Image.
        :param url: The url of this Image.
        """
        self.openapi_types = {
            'added_date': date,
            'affiliate_url': str,
            'aspect': float,
            'assets': ImageAssets,
            'categories': List[Category],
            'contributor': Contributor,
            'description': str,
            'has_model_release': bool,
            'has_property_release': bool,
            'id': str,
            'image_type': str,
            'insights': ImageInsights,
            'is_adult': bool,
            'is_editorial': bool,
            'is_illustration': bool,
            'keywords': List[str],
            'media_type': str,
            'model_releases': List[ModelRelease],
            'models': List[Model],
            'releases': List[str],
            'url': str
        }

        self.attribute_map = {
            'added_date': 'added_date',
            'affiliate_url': 'affiliate_url',
            'aspect': 'aspect',
            'assets': 'assets',
            'categories': 'categories',
            'contributor': 'contributor',
            'description': 'description',
            'has_model_release': 'has_model_release',
            'has_property_release': 'has_property_release',
            'id': 'id',
            'image_type': 'image_type',
            'insights': 'insights',
            'is_adult': 'is_adult',
            'is_editorial': 'is_editorial',
            'is_illustration': 'is_illustration',
            'keywords': 'keywords',
            'media_type': 'media_type',
            'model_releases': 'model_releases',
            'models': 'models',
            'releases': 'releases',
            'url': 'url'
        }

        self._added_date = added_date
        self._affiliate_url = affiliate_url
        self._aspect = aspect
        self._assets = assets
        self._categories = categories
        self._contributor = contributor
        self._description = description
        self._has_model_release = has_model_release
        self._has_property_release = has_property_release
        self._id = id
        self._image_type = image_type
        self._insights = insights
        self._is_adult = is_adult
        self._is_editorial = is_editorial
        self._is_illustration = is_illustration
        self._keywords = keywords
        self._media_type = media_type
        self._model_releases = model_releases
        self._models = models
        self._releases = releases
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Image':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Image of this Image.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_date(self):
        """Gets the added_date of this Image.

        Date that the image was added by the contributor

        :return: The added_date of this Image.
        :rtype: date
        """
        return self._added_date

    @added_date.setter
    def added_date(self, added_date):
        """Sets the added_date of this Image.

        Date that the image was added by the contributor

        :param added_date: The added_date of this Image.
        :type added_date: date
        """

        self._added_date = added_date

    @property
    def affiliate_url(self):
        """Gets the affiliate_url of this Image.

        Affiliate referral link; appears only for registered affiliate partners

        :return: The affiliate_url of this Image.
        :rtype: str
        """
        return self._affiliate_url

    @affiliate_url.setter
    def affiliate_url(self, affiliate_url):
        """Sets the affiliate_url of this Image.

        Affiliate referral link; appears only for registered affiliate partners

        :param affiliate_url: The affiliate_url of this Image.
        :type affiliate_url: str
        """

        self._affiliate_url = affiliate_url

    @property
    def aspect(self):
        """Gets the aspect of this Image.

        Aspect ratio of the image in decimal format, such as 0.6667

        :return: The aspect of this Image.
        :rtype: float
        """
        return self._aspect

    @aspect.setter
    def aspect(self, aspect):
        """Sets the aspect of this Image.

        Aspect ratio of the image in decimal format, such as 0.6667

        :param aspect: The aspect of this Image.
        :type aspect: float
        """

        self._aspect = aspect

    @property
    def assets(self):
        """Gets the assets of this Image.


        :return: The assets of this Image.
        :rtype: ImageAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this Image.


        :param assets: The assets of this Image.
        :type assets: ImageAssets
        """

        self._assets = assets

    @property
    def categories(self):
        """Gets the categories of this Image.

        Categories that this image is a part of

        :return: The categories of this Image.
        :rtype: List[Category]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this Image.

        Categories that this image is a part of

        :param categories: The categories of this Image.
        :type categories: List[Category]
        """

        self._categories = categories

    @property
    def contributor(self):
        """Gets the contributor of this Image.


        :return: The contributor of this Image.
        :rtype: Contributor
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this Image.


        :param contributor: The contributor of this Image.
        :type contributor: Contributor
        """
        if contributor is None:
            raise ValueError("Invalid value for `contributor`, must not be `None`")

        self._contributor = contributor

    @property
    def description(self):
        """Gets the description of this Image.

        Detailed description of the image

        :return: The description of this Image.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Image.

        Detailed description of the image

        :param description: The description of this Image.
        :type description: str
        """

        self._description = description

    @property
    def has_model_release(self):
        """Gets the has_model_release of this Image.

        Indicates whether there are model releases for the image

        :return: The has_model_release of this Image.
        :rtype: bool
        """
        return self._has_model_release

    @has_model_release.setter
    def has_model_release(self, has_model_release):
        """Sets the has_model_release of this Image.

        Indicates whether there are model releases for the image

        :param has_model_release: The has_model_release of this Image.
        :type has_model_release: bool
        """

        self._has_model_release = has_model_release

    @property
    def has_property_release(self):
        """Gets the has_property_release of this Image.

        Indicates whether there are property releases for the image

        :return: The has_property_release of this Image.
        :rtype: bool
        """
        return self._has_property_release

    @has_property_release.setter
    def has_property_release(self, has_property_release):
        """Sets the has_property_release of this Image.

        Indicates whether there are property releases for the image

        :param has_property_release: The has_property_release of this Image.
        :type has_property_release: bool
        """

        self._has_property_release = has_property_release

    @property
    def id(self):
        """Gets the id of this Image.

        Image ID

        :return: The id of this Image.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Image.

        Image ID

        :param id: The id of this Image.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image_type(self):
        """Gets the image_type of this Image.

        Type of image

        :return: The image_type of this Image.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type):
        """Sets the image_type of this Image.

        Type of image

        :param image_type: The image_type of this Image.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def insights(self):
        """Gets the insights of this Image.


        :return: The insights of this Image.
        :rtype: ImageInsights
        """
        return self._insights

    @insights.setter
    def insights(self, insights):
        """Sets the insights of this Image.


        :param insights: The insights of this Image.
        :type insights: ImageInsights
        """

        self._insights = insights

    @property
    def is_adult(self):
        """Gets the is_adult of this Image.

        Whether or not this image contains adult content

        :return: The is_adult of this Image.
        :rtype: bool
        """
        return self._is_adult

    @is_adult.setter
    def is_adult(self, is_adult):
        """Sets the is_adult of this Image.

        Whether or not this image contains adult content

        :param is_adult: The is_adult of this Image.
        :type is_adult: bool
        """

        self._is_adult = is_adult

    @property
    def is_editorial(self):
        """Gets the is_editorial of this Image.

        Whether or not this image is editorial content

        :return: The is_editorial of this Image.
        :rtype: bool
        """
        return self._is_editorial

    @is_editorial.setter
    def is_editorial(self, is_editorial):
        """Sets the is_editorial of this Image.

        Whether or not this image is editorial content

        :param is_editorial: The is_editorial of this Image.
        :type is_editorial: bool
        """

        self._is_editorial = is_editorial

    @property
    def is_illustration(self):
        """Gets the is_illustration of this Image.

        Whether or not this image is an illustration

        :return: The is_illustration of this Image.
        :rtype: bool
        """
        return self._is_illustration

    @is_illustration.setter
    def is_illustration(self, is_illustration):
        """Sets the is_illustration of this Image.

        Whether or not this image is an illustration

        :param is_illustration: The is_illustration of this Image.
        :type is_illustration: bool
        """

        self._is_illustration = is_illustration

    @property
    def keywords(self):
        """Gets the keywords of this Image.

        Keywords associated with the content of this image

        :return: The keywords of this Image.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this Image.

        Keywords associated with the content of this image

        :param keywords: The keywords of this Image.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def media_type(self):
        """Gets the media_type of this Image.

        Media type of this image, should always be \"image\"

        :return: The media_type of this Image.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this Image.

        Media type of this image, should always be \"image\"

        :param media_type: The media_type of this Image.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def model_releases(self):
        """Gets the model_releases of this Image.

        List of model releases

        :return: The model_releases of this Image.
        :rtype: List[ModelRelease]
        """
        return self._model_releases

    @model_releases.setter
    def model_releases(self, model_releases):
        """Sets the model_releases of this Image.

        List of model releases

        :param model_releases: The model_releases of this Image.
        :type model_releases: List[ModelRelease]
        """

        self._model_releases = model_releases

    @property
    def models(self):
        """Gets the models of this Image.

        List of models

        :return: The models of this Image.
        :rtype: List[Model]
        """
        return self._models

    @models.setter
    def models(self, models):
        """Sets the models of this Image.

        List of models

        :param models: The models of this Image.
        :type models: List[Model]
        """

        self._models = models

    @property
    def releases(self):
        """Gets the releases of this Image.

        List of all releases of this image

        :return: The releases of this Image.
        :rtype: List[str]
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this Image.

        List of all releases of this image

        :param releases: The releases of this Image.
        :type releases: List[str]
        """

        self._releases = releases

    @property
    def url(self):
        """Gets the url of this Image.

        Link to image information page; included only for certain accounts

        :return: The url of this Image.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Image.

        Link to image information page; included only for certain accounts

        :param url: The url of this Image.
        :type url: str
        """

        self._url = url
