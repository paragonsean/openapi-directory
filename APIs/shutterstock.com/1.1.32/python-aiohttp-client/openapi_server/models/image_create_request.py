# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ImageCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, base64_image: str=None):
        """ImageCreateRequest - a model defined in OpenAPI

        :param base64_image: The base64_image of this ImageCreateRequest.
        """
        self.openapi_types = {
            'base64_image': str
        }

        self.attribute_map = {
            'base64_image': 'base64_image'
        }

        self._base64_image = base64_image

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageCreateRequest of this ImageCreateRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def base64_image(self):
        """Gets the base64_image of this ImageCreateRequest.

        A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height

        :return: The base64_image of this ImageCreateRequest.
        :rtype: str
        """
        return self._base64_image

    @base64_image.setter
    def base64_image(self, base64_image):
        """Sets the base64_image of this ImageCreateRequest.

        A Base 64 encoded jpeg or png; images can be no larger than 10mb and can be no larger than 10,000 pixels in width or height

        :param base64_image: The base64_image of this ImageCreateRequest.
        :type base64_image: str
        """
        if base64_image is None:
            raise ValueError("Invalid value for `base64_image`, must not be `None`")

        self._base64_image = base64_image
