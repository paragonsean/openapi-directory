# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class DownloadHistoryRevshareDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, purchase_amount: str=None, purchase_currency: str=None):
        """DownloadHistoryRevshareDetails - a model defined in OpenAPI

        :param purchase_amount: The purchase_amount of this DownloadHistoryRevshareDetails.
        :param purchase_currency: The purchase_currency of this DownloadHistoryRevshareDetails.
        """
        self.openapi_types = {
            'purchase_amount': str,
            'purchase_currency': str
        }

        self.attribute_map = {
            'purchase_amount': 'purchase_amount',
            'purchase_currency': 'purchase_currency'
        }

        self._purchase_amount = purchase_amount
        self._purchase_currency = purchase_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadHistoryRevshareDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DownloadHistoryRevshareDetails of this DownloadHistoryRevshareDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def purchase_amount(self):
        """Gets the purchase_amount of this DownloadHistoryRevshareDetails.

        The amount charged for the license

        :return: The purchase_amount of this DownloadHistoryRevshareDetails.
        :rtype: str
        """
        return self._purchase_amount

    @purchase_amount.setter
    def purchase_amount(self, purchase_amount):
        """Sets the purchase_amount of this DownloadHistoryRevshareDetails.

        The amount charged for the license

        :param purchase_amount: The purchase_amount of this DownloadHistoryRevshareDetails.
        :type purchase_amount: str
        """
        if purchase_amount is None:
            raise ValueError("Invalid value for `purchase_amount`, must not be `None`")

        self._purchase_amount = purchase_amount

    @property
    def purchase_currency(self):
        """Gets the purchase_currency of this DownloadHistoryRevshareDetails.

        The currency the amount was charged in

        :return: The purchase_currency of this DownloadHistoryRevshareDetails.
        :rtype: str
        """
        return self._purchase_currency

    @purchase_currency.setter
    def purchase_currency(self, purchase_currency):
        """Sets the purchase_currency of this DownloadHistoryRevshareDetails.

        The currency the amount was charged in

        :param purchase_currency: The purchase_currency of this DownloadHistoryRevshareDetails.
        :type purchase_currency: str
        """
        if purchase_currency is None:
            raise ValueError("Invalid value for `purchase_currency`, must not be `None`")

        self._purchase_currency = purchase_currency
