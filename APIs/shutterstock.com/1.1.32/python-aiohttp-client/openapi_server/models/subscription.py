# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.allotment import Allotment
from openapi_server.models.license_format import LicenseFormat
from openapi_server.models.price import Price
from openapi_server import util


class Subscription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allotment: Allotment=None, asset_type: str=None, description: str=None, expiration_time: datetime=None, formats: List[LicenseFormat]=None, id: str=None, license: str=None, metadata: object=None, price_per_download: Price=None):
        """Subscription - a model defined in OpenAPI

        :param allotment: The allotment of this Subscription.
        :param asset_type: The asset_type of this Subscription.
        :param description: The description of this Subscription.
        :param expiration_time: The expiration_time of this Subscription.
        :param formats: The formats of this Subscription.
        :param id: The id of this Subscription.
        :param license: The license of this Subscription.
        :param metadata: The metadata of this Subscription.
        :param price_per_download: The price_per_download of this Subscription.
        """
        self.openapi_types = {
            'allotment': Allotment,
            'asset_type': str,
            'description': str,
            'expiration_time': datetime,
            'formats': List[LicenseFormat],
            'id': str,
            'license': str,
            'metadata': object,
            'price_per_download': Price
        }

        self.attribute_map = {
            'allotment': 'allotment',
            'asset_type': 'asset_type',
            'description': 'description',
            'expiration_time': 'expiration_time',
            'formats': 'formats',
            'id': 'id',
            'license': 'license',
            'metadata': 'metadata',
            'price_per_download': 'price_per_download'
        }

        self._allotment = allotment
        self._asset_type = asset_type
        self._description = description
        self._expiration_time = expiration_time
        self._formats = formats
        self._id = id
        self._license = license
        self._metadata = metadata
        self._price_per_download = price_per_download

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Subscription':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Subscription of this Subscription.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allotment(self):
        """Gets the allotment of this Subscription.


        :return: The allotment of this Subscription.
        :rtype: Allotment
        """
        return self._allotment

    @allotment.setter
    def allotment(self, allotment):
        """Sets the allotment of this Subscription.


        :param allotment: The allotment of this Subscription.
        :type allotment: Allotment
        """

        self._allotment = allotment

    @property
    def asset_type(self):
        """Gets the asset_type of this Subscription.

        Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)

        :return: The asset_type of this Subscription.
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this Subscription.

        Identifier for the type of assets associated with this subscription (images, videos, audio, editorial)

        :param asset_type: The asset_type of this Subscription.
        :type asset_type: str
        """

        self._asset_type = asset_type

    @property
    def description(self):
        """Gets the description of this Subscription.

        Description of the subscription

        :return: The description of this Subscription.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Subscription.

        Description of the subscription

        :param description: The description of this Subscription.
        :type description: str
        """

        self._description = description

    @property
    def expiration_time(self):
        """Gets the expiration_time of this Subscription.

        Date the subscription ends

        :return: The expiration_time of this Subscription.
        :rtype: datetime
        """
        return self._expiration_time

    @expiration_time.setter
    def expiration_time(self, expiration_time):
        """Sets the expiration_time of this Subscription.

        Date the subscription ends

        :param expiration_time: The expiration_time of this Subscription.
        :type expiration_time: datetime
        """

        self._expiration_time = expiration_time

    @property
    def formats(self):
        """Gets the formats of this Subscription.

        List of formats that are licensable for the subscription

        :return: The formats of this Subscription.
        :rtype: List[LicenseFormat]
        """
        return self._formats

    @formats.setter
    def formats(self, formats):
        """Sets the formats of this Subscription.

        List of formats that are licensable for the subscription

        :param formats: The formats of this Subscription.
        :type formats: List[LicenseFormat]
        """

        self._formats = formats

    @property
    def id(self):
        """Gets the id of this Subscription.

        Unique internal identifier for the subscription

        :return: The id of this Subscription.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Subscription.

        Unique internal identifier for the subscription

        :param id: The id of this Subscription.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def license(self):
        """Gets the license of this Subscription.

        Internal identifier for the type of subscription

        :return: The license of this Subscription.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this Subscription.

        Internal identifier for the type of subscription

        :param license: The license of this Subscription.
        :type license: str
        """

        self._license = license

    @property
    def metadata(self):
        """Gets the metadata of this Subscription.

        Subscription metadata; different for each customer

        :return: The metadata of this Subscription.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this Subscription.

        Subscription metadata; different for each customer

        :param metadata: The metadata of this Subscription.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def price_per_download(self):
        """Gets the price_per_download of this Subscription.


        :return: The price_per_download of this Subscription.
        :rtype: Price
        """
        return self._price_per_download

    @price_per_download.setter
    def price_per_download(self, price_per_download):
        """Sets the price_per_download of this Subscription.


        :param price_per_download: The price_per_download of this Subscription.
        :type price_per_download: Price
        """

        self._price_per_download = price_per_download
