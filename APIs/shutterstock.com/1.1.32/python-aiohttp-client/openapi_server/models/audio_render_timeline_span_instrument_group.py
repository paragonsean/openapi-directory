# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_render_timeline_span_instrument_group_status import AudioRenderTimelineSpanInstrumentGroupStatus
from openapi_server import util


class AudioRenderTimelineSpanInstrumentGroup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instrument_group: str=None, statuses: List[AudioRenderTimelineSpanInstrumentGroupStatus]=None):
        """AudioRenderTimelineSpanInstrumentGroup - a model defined in OpenAPI

        :param instrument_group: The instrument_group of this AudioRenderTimelineSpanInstrumentGroup.
        :param statuses: The statuses of this AudioRenderTimelineSpanInstrumentGroup.
        """
        self.openapi_types = {
            'instrument_group': str,
            'statuses': List[AudioRenderTimelineSpanInstrumentGroupStatus]
        }

        self.attribute_map = {
            'instrument_group': 'instrument_group',
            'statuses': 'statuses'
        }

        self._instrument_group = instrument_group
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpanInstrumentGroup':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpanInstrumentGroup of this AudioRenderTimelineSpanInstrumentGroup.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instrument_group(self):
        """Gets the instrument_group of this AudioRenderTimelineSpanInstrumentGroup.

        The instrument ID

        :return: The instrument_group of this AudioRenderTimelineSpanInstrumentGroup.
        :rtype: str
        """
        return self._instrument_group

    @instrument_group.setter
    def instrument_group(self, instrument_group):
        """Sets the instrument_group of this AudioRenderTimelineSpanInstrumentGroup.

        The instrument ID

        :param instrument_group: The instrument_group of this AudioRenderTimelineSpanInstrumentGroup.
        :type instrument_group: str
        """
        if instrument_group is None:
            raise ValueError("Invalid value for `instrument_group`, must not be `None`")

        self._instrument_group = instrument_group

    @property
    def statuses(self):
        """Gets the statuses of this AudioRenderTimelineSpanInstrumentGroup.

        An array of status objects

        :return: The statuses of this AudioRenderTimelineSpanInstrumentGroup.
        :rtype: List[AudioRenderTimelineSpanInstrumentGroupStatus]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses):
        """Sets the statuses of this AudioRenderTimelineSpanInstrumentGroup.

        An array of status objects

        :param statuses: The statuses of this AudioRenderTimelineSpanInstrumentGroup.
        :type statuses: List[AudioRenderTimelineSpanInstrumentGroupStatus]
        """

        self._statuses = statuses
