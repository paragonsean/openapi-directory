# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioRendersFilesList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bits_sample: float=None, content_type: str=None, download_url: str=None, filename: str=None, frequency_hz: float=None, kbits_second: float=None, size_bytes: float=None, tracks: List[str]=None):
        """AudioRendersFilesList - a model defined in OpenAPI

        :param bits_sample: The bits_sample of this AudioRendersFilesList.
        :param content_type: The content_type of this AudioRendersFilesList.
        :param download_url: The download_url of this AudioRendersFilesList.
        :param filename: The filename of this AudioRendersFilesList.
        :param frequency_hz: The frequency_hz of this AudioRendersFilesList.
        :param kbits_second: The kbits_second of this AudioRendersFilesList.
        :param size_bytes: The size_bytes of this AudioRendersFilesList.
        :param tracks: The tracks of this AudioRendersFilesList.
        """
        self.openapi_types = {
            'bits_sample': float,
            'content_type': str,
            'download_url': str,
            'filename': str,
            'frequency_hz': float,
            'kbits_second': float,
            'size_bytes': float,
            'tracks': List[str]
        }

        self.attribute_map = {
            'bits_sample': 'bits_sample',
            'content_type': 'content_type',
            'download_url': 'download_url',
            'filename': 'filename',
            'frequency_hz': 'frequency_hz',
            'kbits_second': 'kbits_second',
            'size_bytes': 'size_bytes',
            'tracks': 'tracks'
        }

        self._bits_sample = bits_sample
        self._content_type = content_type
        self._download_url = download_url
        self._filename = filename
        self._frequency_hz = frequency_hz
        self._kbits_second = kbits_second
        self._size_bytes = size_bytes
        self._tracks = tracks

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRendersFilesList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRendersFilesList of this AudioRendersFilesList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bits_sample(self):
        """Gets the bits_sample of this AudioRendersFilesList.

        The bit depth of the audio files in bits/sample

        :return: The bits_sample of this AudioRendersFilesList.
        :rtype: float
        """
        return self._bits_sample

    @bits_sample.setter
    def bits_sample(self, bits_sample):
        """Sets the bits_sample of this AudioRendersFilesList.

        The bit depth of the audio files in bits/sample

        :param bits_sample: The bits_sample of this AudioRendersFilesList.
        :type bits_sample: float
        """
        if bits_sample is None:
            raise ValueError("Invalid value for `bits_sample`, must not be `None`")

        self._bits_sample = bits_sample

    @property
    def content_type(self):
        """Gets the content_type of this AudioRendersFilesList.

        The content-type of the file

        :return: The content_type of this AudioRendersFilesList.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this AudioRendersFilesList.

        The content-type of the file

        :param content_type: The content_type of this AudioRendersFilesList.
        :type content_type: str
        """
        if content_type is None:
            raise ValueError("Invalid value for `content_type`, must not be `None`")

        self._content_type = content_type

    @property
    def download_url(self):
        """Gets the download_url of this AudioRendersFilesList.

        The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed

        :return: The download_url of this AudioRendersFilesList.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this AudioRendersFilesList.

        The internet-accessible URL from which the file can be downloaded. Any redirects encountered when using this URL must be followed

        :param download_url: The download_url of this AudioRendersFilesList.
        :type download_url: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def filename(self):
        """Gets the filename of this AudioRendersFilesList.

        The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file

        :return: The filename of this AudioRendersFilesList.
        :rtype: str
        """
        return self._filename

    @filename.setter
    def filename(self, filename):
        """Sets the filename of this AudioRendersFilesList.

        The user-specified file name suggestion from the render request; this file name becomes the filename property of the Content-Disposition header when the user downloads the rendered audio file

        :param filename: The filename of this AudioRendersFilesList.
        :type filename: str
        """
        if filename is None:
            raise ValueError("Invalid value for `filename`, must not be `None`")

        self._filename = filename

    @property
    def frequency_hz(self):
        """Gets the frequency_hz of this AudioRendersFilesList.

        The Sample rate of the audio files in Hertz (Hz)

        :return: The frequency_hz of this AudioRendersFilesList.
        :rtype: float
        """
        return self._frequency_hz

    @frequency_hz.setter
    def frequency_hz(self, frequency_hz):
        """Sets the frequency_hz of this AudioRendersFilesList.

        The Sample rate of the audio files in Hertz (Hz)

        :param frequency_hz: The frequency_hz of this AudioRendersFilesList.
        :type frequency_hz: float
        """
        if frequency_hz is None:
            raise ValueError("Invalid value for `frequency_hz`, must not be `None`")

        self._frequency_hz = frequency_hz

    @property
    def kbits_second(self):
        """Gets the kbits_second of this AudioRendersFilesList.

        The data rate of the audio files in kilobits/second

        :return: The kbits_second of this AudioRendersFilesList.
        :rtype: float
        """
        return self._kbits_second

    @kbits_second.setter
    def kbits_second(self, kbits_second):
        """Sets the kbits_second of this AudioRendersFilesList.

        The data rate of the audio files in kilobits/second

        :param kbits_second: The kbits_second of this AudioRendersFilesList.
        :type kbits_second: float
        """
        if kbits_second is None:
            raise ValueError("Invalid value for `kbits_second`, must not be `None`")

        self._kbits_second = kbits_second

    @property
    def size_bytes(self):
        """Gets the size_bytes of this AudioRendersFilesList.

        Size of the file in bytes

        :return: The size_bytes of this AudioRendersFilesList.
        :rtype: float
        """
        return self._size_bytes

    @size_bytes.setter
    def size_bytes(self, size_bytes):
        """Sets the size_bytes of this AudioRendersFilesList.

        Size of the file in bytes

        :param size_bytes: The size_bytes of this AudioRendersFilesList.
        :type size_bytes: float
        """
        if size_bytes is None:
            raise ValueError("Invalid value for `size_bytes`, must not be `None`")

        self._size_bytes = size_bytes

    @property
    def tracks(self):
        """Gets the tracks of this AudioRendersFilesList.

        An array of track names included in the file

        :return: The tracks of this AudioRendersFilesList.
        :rtype: List[str]
        """
        return self._tracks

    @tracks.setter
    def tracks(self, tracks):
        """Sets the tracks of this AudioRendersFilesList.

        An array of track names included in the file

        :param tracks: The tracks of this AudioRendersFilesList.
        :type tracks: List[str]
        """
        if tracks is None:
            raise ValueError("Invalid value for `tracks`, must not be `None`")

        self._tracks = tracks
