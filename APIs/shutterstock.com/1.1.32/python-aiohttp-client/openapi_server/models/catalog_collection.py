# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_collection_item import CatalogCollectionItem
from openapi_server.models.catalog_collection_role_assignments import CatalogCollectionRoleAssignments
from openapi_server import util


class CatalogCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover_asset: CatalogCollectionItem=None, created_time: datetime=None, id: str=None, name: str=None, role_assignments: CatalogCollectionRoleAssignments=None, total_item_count: float=None, updated_time: datetime=None, visibility: str=None):
        """CatalogCollection - a model defined in OpenAPI

        :param cover_asset: The cover_asset of this CatalogCollection.
        :param created_time: The created_time of this CatalogCollection.
        :param id: The id of this CatalogCollection.
        :param name: The name of this CatalogCollection.
        :param role_assignments: The role_assignments of this CatalogCollection.
        :param total_item_count: The total_item_count of this CatalogCollection.
        :param updated_time: The updated_time of this CatalogCollection.
        :param visibility: The visibility of this CatalogCollection.
        """
        self.openapi_types = {
            'cover_asset': CatalogCollectionItem,
            'created_time': datetime,
            'id': str,
            'name': str,
            'role_assignments': CatalogCollectionRoleAssignments,
            'total_item_count': float,
            'updated_time': datetime,
            'visibility': str
        }

        self.attribute_map = {
            'cover_asset': 'cover_asset',
            'created_time': 'created_time',
            'id': 'id',
            'name': 'name',
            'role_assignments': 'role_assignments',
            'total_item_count': 'total_item_count',
            'updated_time': 'updated_time',
            'visibility': 'visibility'
        }

        self._cover_asset = cover_asset
        self._created_time = created_time
        self._id = id
        self._name = name
        self._role_assignments = role_assignments
        self._total_item_count = total_item_count
        self._updated_time = updated_time
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCollection of this CatalogCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover_asset(self):
        """Gets the cover_asset of this CatalogCollection.


        :return: The cover_asset of this CatalogCollection.
        :rtype: CatalogCollectionItem
        """
        return self._cover_asset

    @cover_asset.setter
    def cover_asset(self, cover_asset):
        """Sets the cover_asset of this CatalogCollection.


        :param cover_asset: The cover_asset of this CatalogCollection.
        :type cover_asset: CatalogCollectionItem
        """

        self._cover_asset = cover_asset

    @property
    def created_time(self):
        """Gets the created_time of this CatalogCollection.


        :return: The created_time of this CatalogCollection.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CatalogCollection.


        :param created_time: The created_time of this CatalogCollection.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def id(self):
        """Gets the id of this CatalogCollection.


        :return: The id of this CatalogCollection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogCollection.


        :param id: The id of this CatalogCollection.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this CatalogCollection.


        :return: The name of this CatalogCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CatalogCollection.


        :param name: The name of this CatalogCollection.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def role_assignments(self):
        """Gets the role_assignments of this CatalogCollection.


        :return: The role_assignments of this CatalogCollection.
        :rtype: CatalogCollectionRoleAssignments
        """
        return self._role_assignments

    @role_assignments.setter
    def role_assignments(self, role_assignments):
        """Sets the role_assignments of this CatalogCollection.


        :param role_assignments: The role_assignments of this CatalogCollection.
        :type role_assignments: CatalogCollectionRoleAssignments
        """
        if role_assignments is None:
            raise ValueError("Invalid value for `role_assignments`, must not be `None`")

        self._role_assignments = role_assignments

    @property
    def total_item_count(self):
        """Gets the total_item_count of this CatalogCollection.


        :return: The total_item_count of this CatalogCollection.
        :rtype: float
        """
        return self._total_item_count

    @total_item_count.setter
    def total_item_count(self, total_item_count):
        """Sets the total_item_count of this CatalogCollection.


        :param total_item_count: The total_item_count of this CatalogCollection.
        :type total_item_count: float
        """
        if total_item_count is None:
            raise ValueError("Invalid value for `total_item_count`, must not be `None`")

        self._total_item_count = total_item_count

    @property
    def updated_time(self):
        """Gets the updated_time of this CatalogCollection.


        :return: The updated_time of this CatalogCollection.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this CatalogCollection.


        :param updated_time: The updated_time of this CatalogCollection.
        :type updated_time: datetime
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")

        self._updated_time = updated_time

    @property
    def visibility(self):
        """Gets the visibility of this CatalogCollection.


        :return: The visibility of this CatalogCollection.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this CatalogCollection.


        :param visibility: The visibility of this CatalogCollection.
        :type visibility: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
