# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_render_timeline_span_instrument_group import AudioRenderTimelineSpanInstrumentGroup
from openapi_server.models.audio_render_timeline_span_region import AudioRenderTimelineSpanRegion
from openapi_server.models.audio_render_timeline_span_tempo_changes import AudioRenderTimelineSpanTempoChanges
from openapi_server import util


class AudioRenderTimelineSpan(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: float=None, instrument_groups: List[AudioRenderTimelineSpanInstrumentGroup]=None, regions: List[AudioRenderTimelineSpanRegion]=None, span_type: str=None, tempo: int=None, tempo_changes: List[AudioRenderTimelineSpanTempoChanges]=None, time: int=None):
        """AudioRenderTimelineSpan - a model defined in OpenAPI

        :param id: The id of this AudioRenderTimelineSpan.
        :param instrument_groups: The instrument_groups of this AudioRenderTimelineSpan.
        :param regions: The regions of this AudioRenderTimelineSpan.
        :param span_type: The span_type of this AudioRenderTimelineSpan.
        :param tempo: The tempo of this AudioRenderTimelineSpan.
        :param tempo_changes: The tempo_changes of this AudioRenderTimelineSpan.
        :param time: The time of this AudioRenderTimelineSpan.
        """
        self.openapi_types = {
            'id': float,
            'instrument_groups': List[AudioRenderTimelineSpanInstrumentGroup],
            'regions': List[AudioRenderTimelineSpanRegion],
            'span_type': str,
            'tempo': int,
            'tempo_changes': List[AudioRenderTimelineSpanTempoChanges],
            'time': int
        }

        self.attribute_map = {
            'id': 'id',
            'instrument_groups': 'instrument_groups',
            'regions': 'regions',
            'span_type': 'span_type',
            'tempo': 'tempo',
            'tempo_changes': 'tempo_changes',
            'time': 'time'
        }

        self._id = id
        self._instrument_groups = instrument_groups
        self._regions = regions
        self._span_type = span_type
        self._tempo = tempo
        self._tempo_changes = tempo_changes
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpan':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpan of this AudioRenderTimelineSpan.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this AudioRenderTimelineSpan.

        An identifier which must be unique within the parent span

        :return: The id of this AudioRenderTimelineSpan.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioRenderTimelineSpan.

        An identifier which must be unique within the parent span

        :param id: The id of this AudioRenderTimelineSpan.
        :type id: float
        """

        self._id = id

    @property
    def instrument_groups(self):
        """Gets the instrument_groups of this AudioRenderTimelineSpan.

        An array of instrument_group objects that are used in this span

        :return: The instrument_groups of this AudioRenderTimelineSpan.
        :rtype: List[AudioRenderTimelineSpanInstrumentGroup]
        """
        return self._instrument_groups

    @instrument_groups.setter
    def instrument_groups(self, instrument_groups):
        """Sets the instrument_groups of this AudioRenderTimelineSpan.

        An array of instrument_group objects that are used in this span

        :param instrument_groups: The instrument_groups of this AudioRenderTimelineSpan.
        :type instrument_groups: List[AudioRenderTimelineSpanInstrumentGroup]
        """

        self._instrument_groups = instrument_groups

    @property
    def regions(self):
        """Gets the regions of this AudioRenderTimelineSpan.

        An array of region objects within the span

        :return: The regions of this AudioRenderTimelineSpan.
        :rtype: List[AudioRenderTimelineSpanRegion]
        """
        return self._regions

    @regions.setter
    def regions(self, regions):
        """Sets the regions of this AudioRenderTimelineSpan.

        An array of region objects within the span

        :param regions: The regions of this AudioRenderTimelineSpan.
        :type regions: List[AudioRenderTimelineSpanRegion]
        """

        self._regions = regions

    @property
    def span_type(self):
        """Gets the span_type of this AudioRenderTimelineSpan.

        Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span

        :return: The span_type of this AudioRenderTimelineSpan.
        :rtype: str
        """
        return self._span_type

    @span_type.setter
    def span_type(self, span_type):
        """Sets the span_type of this AudioRenderTimelineSpan.

        Type of span; metered spans represent a pariod of time with music, and unmetered spans denote the end of the prior metered span

        :param span_type: The span_type of this AudioRenderTimelineSpan.
        :type span_type: str
        """
        allowed_values = ["metered", "unmetered"]  # noqa: E501
        if span_type not in allowed_values:
            raise ValueError(
                "Invalid value for `span_type` ({0}), must be one of {1}"
                .format(span_type, allowed_values)
            )

        self._span_type = span_type

    @property
    def tempo(self):
        """Gets the tempo of this AudioRenderTimelineSpan.

        The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo

        :return: The tempo of this AudioRenderTimelineSpan.
        :rtype: int
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioRenderTimelineSpan.

        The tempo, in beats per minute, at the start of the span; if not provided, the API selects a random tempo

        :param tempo: The tempo of this AudioRenderTimelineSpan.
        :type tempo: int
        """

        self._tempo = tempo

    @property
    def tempo_changes(self):
        """Gets the tempo_changes of this AudioRenderTimelineSpan.

        Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change

        :return: The tempo_changes of this AudioRenderTimelineSpan.
        :rtype: List[AudioRenderTimelineSpanTempoChanges]
        """
        return self._tempo_changes

    @tempo_changes.setter
    def tempo_changes(self, tempo_changes):
        """Sets the tempo_changes of this AudioRenderTimelineSpan.

        Two or more inflection points in a tempo curve; the API creates a smoothly changing tempo by using a linear interpolation of the time between each tempo change

        :param tempo_changes: The tempo_changes of this AudioRenderTimelineSpan.
        :type tempo_changes: List[AudioRenderTimelineSpanTempoChanges]
        """

        self._tempo_changes = tempo_changes

    @property
    def time(self):
        """Gets the time of this AudioRenderTimelineSpan.

        The absolute time, in seconds, at which the span starts

        :return: The time of this AudioRenderTimelineSpan.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AudioRenderTimelineSpan.

        The absolute time, in seconds, at which the span starts

        :param time: The time of this AudioRenderTimelineSpan.
        :type time: int
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
