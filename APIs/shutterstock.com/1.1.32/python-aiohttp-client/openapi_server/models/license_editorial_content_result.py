# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url import Url
from openapi_server import util


class LicenseEditorialContentResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allotment_charge: int=None, download: Url=None, editorial_id: str=None, error: str=None):
        """LicenseEditorialContentResult - a model defined in OpenAPI

        :param allotment_charge: The allotment_charge of this LicenseEditorialContentResult.
        :param download: The download of this LicenseEditorialContentResult.
        :param editorial_id: The editorial_id of this LicenseEditorialContentResult.
        :param error: The error of this LicenseEditorialContentResult.
        """
        self.openapi_types = {
            'allotment_charge': int,
            'download': Url,
            'editorial_id': str,
            'error': str
        }

        self.attribute_map = {
            'allotment_charge': 'allotment_charge',
            'download': 'download',
            'editorial_id': 'editorial_id',
            'error': 'error'
        }

        self._allotment_charge = allotment_charge
        self._download = download
        self._editorial_id = editorial_id
        self._error = error

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseEditorialContentResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseEditorialContentResult of this LicenseEditorialContentResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allotment_charge(self):
        """Gets the allotment_charge of this LicenseEditorialContentResult.

        For pre-paid plans, how many credits were used for the item license

        :return: The allotment_charge of this LicenseEditorialContentResult.
        :rtype: int
        """
        return self._allotment_charge

    @allotment_charge.setter
    def allotment_charge(self, allotment_charge):
        """Sets the allotment_charge of this LicenseEditorialContentResult.

        For pre-paid plans, how many credits were used for the item license

        :param allotment_charge: The allotment_charge of this LicenseEditorialContentResult.
        :type allotment_charge: int
        """

        self._allotment_charge = allotment_charge

    @property
    def download(self):
        """Gets the download of this LicenseEditorialContentResult.


        :return: The download of this LicenseEditorialContentResult.
        :rtype: Url
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this LicenseEditorialContentResult.


        :param download: The download of this LicenseEditorialContentResult.
        :type download: Url
        """

        self._download = download

    @property
    def editorial_id(self):
        """Gets the editorial_id of this LicenseEditorialContentResult.

        Editorial ID

        :return: The editorial_id of this LicenseEditorialContentResult.
        :rtype: str
        """
        return self._editorial_id

    @editorial_id.setter
    def editorial_id(self, editorial_id):
        """Sets the editorial_id of this LicenseEditorialContentResult.

        Editorial ID

        :param editorial_id: The editorial_id of this LicenseEditorialContentResult.
        :type editorial_id: str
        """
        if editorial_id is None:
            raise ValueError("Invalid value for `editorial_id`, must not be `None`")

        self._editorial_id = editorial_id

    @property
    def error(self):
        """Gets the error of this LicenseEditorialContentResult.


        :return: The error of this LicenseEditorialContentResult.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this LicenseEditorialContentResult.


        :param error: The error of this LicenseEditorialContentResult.
        :type error: str
        """

        self._error = error
