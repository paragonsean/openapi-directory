# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_size_details import ImageSizeDetails
from openapi_server.models.thumbnail import Thumbnail
from openapi_server import util


class EditorialAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, medium_jpg: ImageSizeDetails=None, original: ImageSizeDetails=None, small_jpg: ImageSizeDetails=None, thumb_170: Thumbnail=None, thumb_220: Thumbnail=None, watermark_1500: Thumbnail=None, watermark_450: Thumbnail=None):
        """EditorialAssets - a model defined in OpenAPI

        :param medium_jpg: The medium_jpg of this EditorialAssets.
        :param original: The original of this EditorialAssets.
        :param small_jpg: The small_jpg of this EditorialAssets.
        :param thumb_170: The thumb_170 of this EditorialAssets.
        :param thumb_220: The thumb_220 of this EditorialAssets.
        :param watermark_1500: The watermark_1500 of this EditorialAssets.
        :param watermark_450: The watermark_450 of this EditorialAssets.
        """
        self.openapi_types = {
            'medium_jpg': ImageSizeDetails,
            'original': ImageSizeDetails,
            'small_jpg': ImageSizeDetails,
            'thumb_170': Thumbnail,
            'thumb_220': Thumbnail,
            'watermark_1500': Thumbnail,
            'watermark_450': Thumbnail
        }

        self.attribute_map = {
            'medium_jpg': 'medium_jpg',
            'original': 'original',
            'small_jpg': 'small_jpg',
            'thumb_170': 'thumb_170',
            'thumb_220': 'thumb_220',
            'watermark_1500': 'watermark_1500',
            'watermark_450': 'watermark_450'
        }

        self._medium_jpg = medium_jpg
        self._original = original
        self._small_jpg = small_jpg
        self._thumb_170 = thumb_170
        self._thumb_220 = thumb_220
        self._watermark_1500 = watermark_1500
        self._watermark_450 = watermark_450

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorialAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditorialAssets of this EditorialAssets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def medium_jpg(self):
        """Gets the medium_jpg of this EditorialAssets.


        :return: The medium_jpg of this EditorialAssets.
        :rtype: ImageSizeDetails
        """
        return self._medium_jpg

    @medium_jpg.setter
    def medium_jpg(self, medium_jpg):
        """Sets the medium_jpg of this EditorialAssets.


        :param medium_jpg: The medium_jpg of this EditorialAssets.
        :type medium_jpg: ImageSizeDetails
        """

        self._medium_jpg = medium_jpg

    @property
    def original(self):
        """Gets the original of this EditorialAssets.


        :return: The original of this EditorialAssets.
        :rtype: ImageSizeDetails
        """
        return self._original

    @original.setter
    def original(self, original):
        """Sets the original of this EditorialAssets.


        :param original: The original of this EditorialAssets.
        :type original: ImageSizeDetails
        """

        self._original = original

    @property
    def small_jpg(self):
        """Gets the small_jpg of this EditorialAssets.


        :return: The small_jpg of this EditorialAssets.
        :rtype: ImageSizeDetails
        """
        return self._small_jpg

    @small_jpg.setter
    def small_jpg(self, small_jpg):
        """Sets the small_jpg of this EditorialAssets.


        :param small_jpg: The small_jpg of this EditorialAssets.
        :type small_jpg: ImageSizeDetails
        """

        self._small_jpg = small_jpg

    @property
    def thumb_170(self):
        """Gets the thumb_170 of this EditorialAssets.


        :return: The thumb_170 of this EditorialAssets.
        :rtype: Thumbnail
        """
        return self._thumb_170

    @thumb_170.setter
    def thumb_170(self, thumb_170):
        """Sets the thumb_170 of this EditorialAssets.


        :param thumb_170: The thumb_170 of this EditorialAssets.
        :type thumb_170: Thumbnail
        """

        self._thumb_170 = thumb_170

    @property
    def thumb_220(self):
        """Gets the thumb_220 of this EditorialAssets.


        :return: The thumb_220 of this EditorialAssets.
        :rtype: Thumbnail
        """
        return self._thumb_220

    @thumb_220.setter
    def thumb_220(self, thumb_220):
        """Sets the thumb_220 of this EditorialAssets.


        :param thumb_220: The thumb_220 of this EditorialAssets.
        :type thumb_220: Thumbnail
        """

        self._thumb_220 = thumb_220

    @property
    def watermark_1500(self):
        """Gets the watermark_1500 of this EditorialAssets.


        :return: The watermark_1500 of this EditorialAssets.
        :rtype: Thumbnail
        """
        return self._watermark_1500

    @watermark_1500.setter
    def watermark_1500(self, watermark_1500):
        """Sets the watermark_1500 of this EditorialAssets.


        :param watermark_1500: The watermark_1500 of this EditorialAssets.
        :type watermark_1500: Thumbnail
        """

        self._watermark_1500 = watermark_1500

    @property
    def watermark_450(self):
        """Gets the watermark_450 of this EditorialAssets.


        :return: The watermark_450 of this EditorialAssets.
        :rtype: Thumbnail
        """
        return self._watermark_450

    @watermark_450.setter
    def watermark_450(self, watermark_450):
        """Sets the watermark_450 of this EditorialAssets.


        :param watermark_450: The watermark_450 of this EditorialAssets.
        :type watermark_450: Thumbnail
        """

        self._watermark_450 = watermark_450
