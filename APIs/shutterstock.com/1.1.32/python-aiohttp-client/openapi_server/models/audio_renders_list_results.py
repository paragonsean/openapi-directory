# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_render_result import AudioRenderResult
from openapi_server import util


class AudioRendersListResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_renders: List[AudioRenderResult]=None):
        """AudioRendersListResults - a model defined in OpenAPI

        :param audio_renders: The audio_renders of this AudioRendersListResults.
        """
        self.openapi_types = {
            'audio_renders': List[AudioRenderResult]
        }

        self.attribute_map = {
            'audio_renders': 'audio_renders'
        }

        self._audio_renders = audio_renders

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRendersListResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRendersListResults of this AudioRendersListResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_renders(self):
        """Gets the audio_renders of this AudioRendersListResults.

        Audio render results

        :return: The audio_renders of this AudioRendersListResults.
        :rtype: List[AudioRenderResult]
        """
        return self._audio_renders

    @audio_renders.setter
    def audio_renders(self, audio_renders):
        """Sets the audio_renders of this AudioRendersListResults.

        Audio render results

        :param audio_renders: The audio_renders of this AudioRendersListResults.
        :type audio_renders: List[AudioRenderResult]
        """
        if audio_renders is None:
            raise ValueError("Invalid value for `audio_renders`, must not be `None`")

        self._audio_renders = audio_renders
