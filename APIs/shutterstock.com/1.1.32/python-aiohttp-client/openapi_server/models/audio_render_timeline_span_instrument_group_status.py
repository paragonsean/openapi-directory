# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioRenderTimelineSpanInstrumentGroupStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beat: float=None, status: str=None):
        """AudioRenderTimelineSpanInstrumentGroupStatus - a model defined in OpenAPI

        :param beat: The beat of this AudioRenderTimelineSpanInstrumentGroupStatus.
        :param status: The status of this AudioRenderTimelineSpanInstrumentGroupStatus.
        """
        self.openapi_types = {
            'beat': float,
            'status': str
        }

        self.attribute_map = {
            'beat': 'beat',
            'status': 'status'
        }

        self._beat = beat
        self._status = status

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpanInstrumentGroupStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpanInstrumentGroupStatus of this AudioRenderTimelineSpanInstrumentGroupStatus.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beat(self):
        """Gets the beat of this AudioRenderTimelineSpanInstrumentGroupStatus.

        The beat, relative to the span, at which the status begins

        :return: The beat of this AudioRenderTimelineSpanInstrumentGroupStatus.
        :rtype: float
        """
        return self._beat

    @beat.setter
    def beat(self, beat):
        """Sets the beat of this AudioRenderTimelineSpanInstrumentGroupStatus.

        The beat, relative to the span, at which the status begins

        :param beat: The beat of this AudioRenderTimelineSpanInstrumentGroupStatus.
        :type beat: float
        """
        if beat is None:
            raise ValueError("Invalid value for `beat`, must not be `None`")

        self._beat = beat

    @property
    def status(self):
        """Gets the status of this AudioRenderTimelineSpanInstrumentGroupStatus.

        Whether the instrument is playing or not

        :return: The status of this AudioRenderTimelineSpanInstrumentGroupStatus.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AudioRenderTimelineSpanInstrumentGroupStatus.

        Whether the instrument is playing or not

        :param status: The status of this AudioRenderTimelineSpanInstrumentGroupStatus.
        :type status: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
