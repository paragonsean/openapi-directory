# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_collection_item import CatalogCollectionItem
from openapi_server import util


class CatalogCollectionItemDataList(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[CatalogCollectionItem]=None, page: float=None, per_page: float=None, total_count: float=None):
        """CatalogCollectionItemDataList - a model defined in OpenAPI

        :param data: The data of this CatalogCollectionItemDataList.
        :param page: The page of this CatalogCollectionItemDataList.
        :param per_page: The per_page of this CatalogCollectionItemDataList.
        :param total_count: The total_count of this CatalogCollectionItemDataList.
        """
        self.openapi_types = {
            'data': List[CatalogCollectionItem],
            'page': float,
            'per_page': float,
            'total_count': float
        }

        self.attribute_map = {
            'data': 'data',
            'page': 'page',
            'per_page': 'per_page',
            'total_count': 'total_count'
        }

        self._data = data
        self._page = page
        self._per_page = per_page
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCollectionItemDataList':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCollectionItemDataList of this CatalogCollectionItemDataList.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this CatalogCollectionItemDataList.

        List of catalog collection items

        :return: The data of this CatalogCollectionItemDataList.
        :rtype: List[CatalogCollectionItem]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this CatalogCollectionItemDataList.

        List of catalog collection items

        :param data: The data of this CatalogCollectionItemDataList.
        :type data: List[CatalogCollectionItem]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def page(self):
        """Gets the page of this CatalogCollectionItemDataList.


        :return: The page of this CatalogCollectionItemDataList.
        :rtype: float
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this CatalogCollectionItemDataList.


        :param page: The page of this CatalogCollectionItemDataList.
        :type page: float
        """
        if page is None:
            raise ValueError("Invalid value for `page`, must not be `None`")

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this CatalogCollectionItemDataList.


        :return: The per_page of this CatalogCollectionItemDataList.
        :rtype: float
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this CatalogCollectionItemDataList.


        :param per_page: The per_page of this CatalogCollectionItemDataList.
        :type per_page: float
        """
        if per_page is None:
            raise ValueError("Invalid value for `per_page`, must not be `None`")

        self._per_page = per_page

    @property
    def total_count(self):
        """Gets the total_count of this CatalogCollectionItemDataList.


        :return: The total_count of this CatalogCollectionItemDataList.
        :rtype: float
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this CatalogCollectionItemDataList.


        :param total_count: The total_count of this CatalogCollectionItemDataList.
        :type total_count: float
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
