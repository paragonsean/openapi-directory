# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.preview import Preview
from openapi_server import util


class Instrument(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, name: str=None, previews: List[Preview]=None, tags: List[str]=None):
        """Instrument - a model defined in OpenAPI

        :param id: The id of this Instrument.
        :param name: The name of this Instrument.
        :param previews: The previews of this Instrument.
        :param tags: The tags of this Instrument.
        """
        self.openapi_types = {
            'id': str,
            'name': str,
            'previews': List[Preview],
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'previews': 'previews',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._previews = previews
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Instrument':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Instrument of this Instrument.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Instrument.

        The id of the instrument

        :return: The id of this Instrument.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Instrument.

        The id of the instrument

        :param id: The id of this Instrument.
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Instrument.

        Name of the instrument

        :return: The name of this Instrument.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Instrument.

        Name of the instrument

        :param name: The name of this Instrument.
        :type name: str
        """

        self._name = name

    @property
    def previews(self):
        """Gets the previews of this Instrument.

        Preview of the instrument

        :return: The previews of this Instrument.
        :rtype: List[Preview]
        """
        return self._previews

    @previews.setter
    def previews(self, previews):
        """Sets the previews of this Instrument.

        Preview of the instrument

        :param previews: The previews of this Instrument.
        :type previews: List[Preview]
        """

        self._previews = previews

    @property
    def tags(self):
        """Gets the tags of this Instrument.

        List of tags

        :return: The tags of this Instrument.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Instrument.

        List of tags

        :param tags: The tags of this Instrument.
        :type tags: List[str]
        """

        self._tags = tags
