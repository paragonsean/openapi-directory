# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editorial_cover_item import EditorialCoverItem
from openapi_server import util


class EditorialImageLivefeed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover_item: EditorialCoverItem=None, created_time: datetime=None, id: str=None, name: str=None, total_item_count: int=None):
        """EditorialImageLivefeed - a model defined in OpenAPI

        :param cover_item: The cover_item of this EditorialImageLivefeed.
        :param created_time: The created_time of this EditorialImageLivefeed.
        :param id: The id of this EditorialImageLivefeed.
        :param name: The name of this EditorialImageLivefeed.
        :param total_item_count: The total_item_count of this EditorialImageLivefeed.
        """
        self.openapi_types = {
            'cover_item': EditorialCoverItem,
            'created_time': datetime,
            'id': str,
            'name': str,
            'total_item_count': int
        }

        self.attribute_map = {
            'cover_item': 'cover_item',
            'created_time': 'created_time',
            'id': 'id',
            'name': 'name',
            'total_item_count': 'total_item_count'
        }

        self._cover_item = cover_item
        self._created_time = created_time
        self._id = id
        self._name = name
        self._total_item_count = total_item_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorialImageLivefeed':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditorialImageLivefeed of this EditorialImageLivefeed.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover_item(self):
        """Gets the cover_item of this EditorialImageLivefeed.


        :return: The cover_item of this EditorialImageLivefeed.
        :rtype: EditorialCoverItem
        """
        return self._cover_item

    @cover_item.setter
    def cover_item(self, cover_item):
        """Sets the cover_item of this EditorialImageLivefeed.


        :param cover_item: The cover_item of this EditorialImageLivefeed.
        :type cover_item: EditorialCoverItem
        """

        self._cover_item = cover_item

    @property
    def created_time(self):
        """Gets the created_time of this EditorialImageLivefeed.

        When the livefeed was initially created

        :return: The created_time of this EditorialImageLivefeed.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this EditorialImageLivefeed.

        When the livefeed was initially created

        :param created_time: The created_time of this EditorialImageLivefeed.
        :type created_time: datetime
        """

        self._created_time = created_time

    @property
    def id(self):
        """Gets the id of this EditorialImageLivefeed.

        Livefeed ID

        :return: The id of this EditorialImageLivefeed.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorialImageLivefeed.

        Livefeed ID

        :param id: The id of this EditorialImageLivefeed.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def name(self):
        """Gets the name of this EditorialImageLivefeed.

        Name of the livefeed

        :return: The name of this EditorialImageLivefeed.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this EditorialImageLivefeed.

        Name of the livefeed

        :param name: The name of this EditorialImageLivefeed.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def total_item_count(self):
        """Gets the total_item_count of this EditorialImageLivefeed.

        Total count of items in the livefeed

        :return: The total_item_count of this EditorialImageLivefeed.
        :rtype: int
        """
        return self._total_item_count

    @total_item_count.setter
    def total_item_count(self, total_item_count):
        """Sets the total_item_count of this EditorialImageLivefeed.

        Total count of items in the livefeed

        :param total_item_count: The total_item_count of this EditorialImageLivefeed.
        :type total_item_count: int
        """
        if total_item_count is None:
            raise ValueError("Invalid value for `total_item_count`, must not be `None`")

        self._total_item_count = total_item_count
