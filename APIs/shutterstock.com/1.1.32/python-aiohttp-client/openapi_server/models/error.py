# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code: str=None, data: str=None, items: List[object]=None, message: str=None, path: str=None):
        """Error - a model defined in OpenAPI

        :param code: The code of this Error.
        :param data: The data of this Error.
        :param items: The items of this Error.
        :param message: The message of this Error.
        :param path: The path of this Error.
        """
        self.openapi_types = {
            'code': str,
            'data': str,
            'items': List[object],
            'message': str,
            'path': str
        }

        self.attribute_map = {
            'code': 'code',
            'data': 'data',
            'items': 'items',
            'message': 'message',
            'path': 'path'
        }

        self._code = code
        self._data = data
        self._items = items
        self._message = message
        self._path = path

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Error of this Error.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self):
        """Gets the code of this Error.

        The error code of this error

        :return: The code of this Error.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Error.

        The error code of this error

        :param code: The code of this Error.
        :type code: str
        """

        self._code = code

    @property
    def data(self):
        """Gets the data of this Error.

        Debugging information about the error

        :return: The data of this Error.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this Error.

        Debugging information about the error

        :param data: The data of this Error.
        :type data: str
        """

        self._data = data

    @property
    def items(self):
        """Gets the items of this Error.

        A list of items that produced the error

        :return: The items of this Error.
        :rtype: List[object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this Error.

        A list of items that produced the error

        :param items: The items of this Error.
        :type items: List[object]
        """

        self._items = items

    @property
    def message(self):
        """Gets the message of this Error.

        Specific details about this error

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Error.

        Specific details about this error

        :param message: The message of this Error.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")

        self._message = message

    @property
    def path(self):
        """Gets the path of this Error.

        Internal code reference to the source of the error

        :return: The path of this Error.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this Error.

        Internal code reference to the source of the error

        :param path: The path of this Error.
        :type path: str
        """

        self._path = path
