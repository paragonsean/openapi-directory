# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CollectionItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_time: datetime=None, id: str=None, media_type: str=None):
        """CollectionItem - a model defined in OpenAPI

        :param added_time: The added_time of this CollectionItem.
        :param id: The id of this CollectionItem.
        :param media_type: The media_type of this CollectionItem.
        """
        self.openapi_types = {
            'added_time': datetime,
            'id': str,
            'media_type': str
        }

        self.attribute_map = {
            'added_time': 'added_time',
            'id': 'id',
            'media_type': 'media_type'
        }

        self._added_time = added_time
        self._id = id
        self._media_type = media_type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CollectionItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CollectionItem of this CollectionItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_time(self):
        """Gets the added_time of this CollectionItem.

        The date the item was added to the collection

        :return: The added_time of this CollectionItem.
        :rtype: datetime
        """
        return self._added_time

    @added_time.setter
    def added_time(self, added_time):
        """Sets the added_time of this CollectionItem.

        The date the item was added to the collection

        :param added_time: The added_time of this CollectionItem.
        :type added_time: datetime
        """

        self._added_time = added_time

    @property
    def id(self):
        """Gets the id of this CollectionItem.

        ID of the item

        :return: The id of this CollectionItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CollectionItem.

        ID of the item

        :param id: The id of this CollectionItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def media_type(self):
        """Gets the media_type of this CollectionItem.

        The media type of the item, such as image, video, or audio

        :return: The media_type of this CollectionItem.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this CollectionItem.

        The media type of the item, such as image, video, or audio

        :param media_type: The media_type of this CollectionItem.
        :type media_type: str
        """

        self._media_type = media_type
