# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AccessTokenDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, contributor_id: str=None, customer_id: str=None, expires_in: int=None, organization_id: str=None, realm: str=None, scopes: List[str]=None, user_id: str=None, username: str=None):
        """AccessTokenDetails - a model defined in OpenAPI

        :param client_id: The client_id of this AccessTokenDetails.
        :param contributor_id: The contributor_id of this AccessTokenDetails.
        :param customer_id: The customer_id of this AccessTokenDetails.
        :param expires_in: The expires_in of this AccessTokenDetails.
        :param organization_id: The organization_id of this AccessTokenDetails.
        :param realm: The realm of this AccessTokenDetails.
        :param scopes: The scopes of this AccessTokenDetails.
        :param user_id: The user_id of this AccessTokenDetails.
        :param username: The username of this AccessTokenDetails.
        """
        self.openapi_types = {
            'client_id': str,
            'contributor_id': str,
            'customer_id': str,
            'expires_in': int,
            'organization_id': str,
            'realm': str,
            'scopes': List[str],
            'user_id': str,
            'username': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'contributor_id': 'contributor_id',
            'customer_id': 'customer_id',
            'expires_in': 'expires_in',
            'organization_id': 'organization_id',
            'realm': 'realm',
            'scopes': 'scopes',
            'user_id': 'user_id',
            'username': 'username'
        }

        self._client_id = client_id
        self._contributor_id = contributor_id
        self._customer_id = customer_id
        self._expires_in = expires_in
        self._organization_id = organization_id
        self._realm = realm
        self._scopes = scopes
        self._user_id = user_id
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AccessTokenDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AccessTokenDetails of this AccessTokenDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this AccessTokenDetails.

        Client ID that is associated with the user

        :return: The client_id of this AccessTokenDetails.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this AccessTokenDetails.

        Client ID that is associated with the user

        :param client_id: The client_id of this AccessTokenDetails.
        :type client_id: str
        """

        self._client_id = client_id

    @property
    def contributor_id(self):
        """Gets the contributor_id of this AccessTokenDetails.

        Contributor ID that is associated with the user

        :return: The contributor_id of this AccessTokenDetails.
        :rtype: str
        """
        return self._contributor_id

    @contributor_id.setter
    def contributor_id(self, contributor_id):
        """Sets the contributor_id of this AccessTokenDetails.

        Contributor ID that is associated with the user

        :param contributor_id: The contributor_id of this AccessTokenDetails.
        :type contributor_id: str
        """

        self._contributor_id = contributor_id

    @property
    def customer_id(self):
        """Gets the customer_id of this AccessTokenDetails.

        Customer ID that is associated with the user

        :return: The customer_id of this AccessTokenDetails.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this AccessTokenDetails.

        Customer ID that is associated with the user

        :param customer_id: The customer_id of this AccessTokenDetails.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def expires_in(self):
        """Gets the expires_in of this AccessTokenDetails.

        Number of seconds until the access token expires; no expiration if this value is null

        :return: The expires_in of this AccessTokenDetails.
        :rtype: int
        """
        return self._expires_in

    @expires_in.setter
    def expires_in(self, expires_in):
        """Sets the expires_in of this AccessTokenDetails.

        Number of seconds until the access token expires; no expiration if this value is null

        :param expires_in: The expires_in of this AccessTokenDetails.
        :type expires_in: int
        """

        self._expires_in = expires_in

    @property
    def organization_id(self):
        """Gets the organization_id of this AccessTokenDetails.

        Organization ID that is associated with the user

        :return: The organization_id of this AccessTokenDetails.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this AccessTokenDetails.

        Organization ID that is associated with the user

        :param organization_id: The organization_id of this AccessTokenDetails.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def realm(self):
        """Gets the realm of this AccessTokenDetails.

        Type of access token

        :return: The realm of this AccessTokenDetails.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this AccessTokenDetails.

        Type of access token

        :param realm: The realm of this AccessTokenDetails.
        :type realm: str
        """
        allowed_values = ["customer", "contributor"]  # noqa: E501
        if realm not in allowed_values:
            raise ValueError(
                "Invalid value for `realm` ({0}), must be one of {1}"
                .format(realm, allowed_values)
            )

        self._realm = realm

    @property
    def scopes(self):
        """Gets the scopes of this AccessTokenDetails.

        Scopes that this access token provides when used as authentication

        :return: The scopes of this AccessTokenDetails.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes):
        """Sets the scopes of this AccessTokenDetails.

        Scopes that this access token provides when used as authentication

        :param scopes: The scopes of this AccessTokenDetails.
        :type scopes: List[str]
        """

        self._scopes = scopes

    @property
    def user_id(self):
        """Gets the user_id of this AccessTokenDetails.

        User ID that is associated with the user

        :return: The user_id of this AccessTokenDetails.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this AccessTokenDetails.

        User ID that is associated with the user

        :param user_id: The user_id of this AccessTokenDetails.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def username(self):
        """Gets the username of this AccessTokenDetails.

        User name that is associated with the user

        :return: The username of this AccessTokenDetails.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this AccessTokenDetails.

        User name that is associated with the user

        :param username: The username of this AccessTokenDetails.
        :type username: str
        """

        self._username = username
