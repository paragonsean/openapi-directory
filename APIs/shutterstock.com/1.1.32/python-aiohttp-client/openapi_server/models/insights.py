# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.insights_label_performance_inner import InsightsLabelPerformanceInner
from openapi_server import util


class Insights(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, label_performance: List[InsightsLabelPerformanceInner]=None):
        """Insights - a model defined in OpenAPI

        :param label_performance: The label_performance of this Insights.
        """
        self.openapi_types = {
            'label_performance': List[InsightsLabelPerformanceInner]
        }

        self.attribute_map = {
            'label_performance': 'label_performance'
        }

        self._label_performance = label_performance

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Insights':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Insights of this Insights.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def label_performance(self):
        """Gets the label_performance of this Insights.

        How effective the AI thinks an asset in the category is for the specified audience and objective, expressed as a percentile compared to other images

        :return: The label_performance of this Insights.
        :rtype: List[InsightsLabelPerformanceInner]
        """
        return self._label_performance

    @label_performance.setter
    def label_performance(self, label_performance):
        """Sets the label_performance of this Insights.

        How effective the AI thinks an asset in the category is for the specified audience and objective, expressed as a percentile compared to other images

        :param label_performance: The label_performance of this Insights.
        :type label_performance: List[InsightsLabelPerformanceInner]
        """
        if label_performance is None:
            raise ValueError("Invalid value for `label_performance`, must not be `None`")

        self._label_performance = label_performance
