# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateAccessTokenRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, client_id: str=None, client_secret: str=None, code: str=None, expires: bool=False, grant_type: str=None, realm: str='customer', refresh_token: str=None):
        """CreateAccessTokenRequest - a model defined in OpenAPI

        :param client_id: The client_id of this CreateAccessTokenRequest.
        :param client_secret: The client_secret of this CreateAccessTokenRequest.
        :param code: The code of this CreateAccessTokenRequest.
        :param expires: The expires of this CreateAccessTokenRequest.
        :param grant_type: The grant_type of this CreateAccessTokenRequest.
        :param realm: The realm of this CreateAccessTokenRequest.
        :param refresh_token: The refresh_token of this CreateAccessTokenRequest.
        """
        self.openapi_types = {
            'client_id': str,
            'client_secret': str,
            'code': str,
            'expires': bool,
            'grant_type': str,
            'realm': str,
            'refresh_token': str
        }

        self.attribute_map = {
            'client_id': 'client_id',
            'client_secret': 'client_secret',
            'code': 'code',
            'expires': 'expires',
            'grant_type': 'grant_type',
            'realm': 'realm',
            'refresh_token': 'refresh_token'
        }

        self._client_id = client_id
        self._client_secret = client_secret
        self._code = code
        self._expires = expires
        self._grant_type = grant_type
        self._realm = realm
        self._refresh_token = refresh_token

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CreateAccessTokenRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The createAccessToken_request of this CreateAccessTokenRequest.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def client_id(self):
        """Gets the client_id of this CreateAccessTokenRequest.

        Client ID (Consumer Key) of your application

        :return: The client_id of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._client_id

    @client_id.setter
    def client_id(self, client_id):
        """Sets the client_id of this CreateAccessTokenRequest.

        Client ID (Consumer Key) of your application

        :param client_id: The client_id of this CreateAccessTokenRequest.
        :type client_id: str
        """
        if client_id is None:
            raise ValueError("Invalid value for `client_id`, must not be `None`")

        self._client_id = client_id

    @property
    def client_secret(self):
        """Gets the client_secret of this CreateAccessTokenRequest.

        Client Secret (Consumer Secret) of your application

        :return: The client_secret of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this CreateAccessTokenRequest.

        Client Secret (Consumer Secret) of your application

        :param client_secret: The client_secret of this CreateAccessTokenRequest.
        :type client_secret: str
        """

        self._client_secret = client_secret

    @property
    def code(self):
        """Gets the code of this CreateAccessTokenRequest.

        Response code from the /oauth/authorize flow; required if grant_type=authorization_code

        :return: The code of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this CreateAccessTokenRequest.

        Response code from the /oauth/authorize flow; required if grant_type=authorization_code

        :param code: The code of this CreateAccessTokenRequest.
        :type code: str
        """

        self._code = code

    @property
    def expires(self):
        """Gets the expires of this CreateAccessTokenRequest.

        Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token

        :return: The expires of this CreateAccessTokenRequest.
        :rtype: bool
        """
        return self._expires

    @expires.setter
    def expires(self, expires):
        """Sets the expires of this CreateAccessTokenRequest.

        Whether or not the token expires, expiring tokens come with a refresh_token to renew the access_token

        :param expires: The expires of this CreateAccessTokenRequest.
        :type expires: bool
        """

        self._expires = expires

    @property
    def grant_type(self):
        """Gets the grant_type of this CreateAccessTokenRequest.

        Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants

        :return: The grant_type of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._grant_type

    @grant_type.setter
    def grant_type(self, grant_type):
        """Sets the grant_type of this CreateAccessTokenRequest.

        Grant type: authorization_code generates user tokens, client_credentials generates short-lived client grants

        :param grant_type: The grant_type of this CreateAccessTokenRequest.
        :type grant_type: str
        """
        allowed_values = ["authorization_code", "client_credentials", "refresh_token"]  # noqa: E501
        if grant_type not in allowed_values:
            raise ValueError(
                "Invalid value for `grant_type` ({0}), must be one of {1}"
                .format(grant_type, allowed_values)
            )

        self._grant_type = grant_type

    @property
    def realm(self):
        """Gets the realm of this CreateAccessTokenRequest.

        User type to be authorized (usually 'customer')

        :return: The realm of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._realm

    @realm.setter
    def realm(self, realm):
        """Sets the realm of this CreateAccessTokenRequest.

        User type to be authorized (usually 'customer')

        :param realm: The realm of this CreateAccessTokenRequest.
        :type realm: str
        """
        allowed_values = ["customer", "contributor"]  # noqa: E501
        if realm not in allowed_values:
            raise ValueError(
                "Invalid value for `realm` ({0}), must be one of {1}"
                .format(realm, allowed_values)
            )

        self._realm = realm

    @property
    def refresh_token(self):
        """Gets the refresh_token of this CreateAccessTokenRequest.

        Pass this along with grant_type=refresh_token to get a fresh access token

        :return: The refresh_token of this CreateAccessTokenRequest.
        :rtype: str
        """
        return self._refresh_token

    @refresh_token.setter
    def refresh_token(self, refresh_token):
        """Sets the refresh_token of this CreateAccessTokenRequest.

        Pass this along with grant_type=refresh_token to get a fresh access token

        :param refresh_token: The refresh_token of this CreateAccessTokenRequest.
        :type refresh_token: str
        """

        self._refresh_token = refresh_token
