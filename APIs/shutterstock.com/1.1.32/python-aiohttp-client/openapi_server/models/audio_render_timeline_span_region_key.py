# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioRenderTimelineSpanRegionKey(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tonic_accidental: str=None, tonic_note: str=None, tonic_quality: str=None):
        """AudioRenderTimelineSpanRegionKey - a model defined in OpenAPI

        :param tonic_accidental: The tonic_accidental of this AudioRenderTimelineSpanRegionKey.
        :param tonic_note: The tonic_note of this AudioRenderTimelineSpanRegionKey.
        :param tonic_quality: The tonic_quality of this AudioRenderTimelineSpanRegionKey.
        """
        self.openapi_types = {
            'tonic_accidental': str,
            'tonic_note': str,
            'tonic_quality': str
        }

        self.attribute_map = {
            'tonic_accidental': 'tonic_accidental',
            'tonic_note': 'tonic_note',
            'tonic_quality': 'tonic_quality'
        }

        self._tonic_accidental = tonic_accidental
        self._tonic_note = tonic_note
        self._tonic_quality = tonic_quality

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpanRegionKey':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpanRegion_key of this AudioRenderTimelineSpanRegionKey.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tonic_accidental(self):
        """Gets the tonic_accidental of this AudioRenderTimelineSpanRegionKey.

        A text representation of the accidental; if this field is specified, the tonic_note field should also be specified

        :return: The tonic_accidental of this AudioRenderTimelineSpanRegionKey.
        :rtype: str
        """
        return self._tonic_accidental

    @tonic_accidental.setter
    def tonic_accidental(self, tonic_accidental):
        """Sets the tonic_accidental of this AudioRenderTimelineSpanRegionKey.

        A text representation of the accidental; if this field is specified, the tonic_note field should also be specified

        :param tonic_accidental: The tonic_accidental of this AudioRenderTimelineSpanRegionKey.
        :type tonic_accidental: str
        """
        allowed_values = ["double flat", "flat", "natural", "sharp", "double sharp"]  # noqa: E501
        if tonic_accidental not in allowed_values:
            raise ValueError(
                "Invalid value for `tonic_accidental` ({0}), must be one of {1}"
                .format(tonic_accidental, allowed_values)
            )

        self._tonic_accidental = tonic_accidental

    @property
    def tonic_note(self):
        """Gets the tonic_note of this AudioRenderTimelineSpanRegionKey.

        A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified

        :return: The tonic_note of this AudioRenderTimelineSpanRegionKey.
        :rtype: str
        """
        return self._tonic_note

    @tonic_note.setter
    def tonic_note(self, tonic_note):
        """Sets the tonic_note of this AudioRenderTimelineSpanRegionKey.

        A text representation of the musical note; if this field is specified, the tonic_accidental field should also be specified

        :param tonic_note: The tonic_note of this AudioRenderTimelineSpanRegionKey.
        :type tonic_note: str
        """
        allowed_values = ["c", "d", "e", "f", "g", "a", "b"]  # noqa: E501
        if tonic_note not in allowed_values:
            raise ValueError(
                "Invalid value for `tonic_note` ({0}), must be one of {1}"
                .format(tonic_note, allowed_values)
            )

        self._tonic_note = tonic_note

    @property
    def tonic_quality(self):
        """Gets the tonic_quality of this AudioRenderTimelineSpanRegionKey.

        The scale quality; if this field is not specified, the API selects the quality automatically

        :return: The tonic_quality of this AudioRenderTimelineSpanRegionKey.
        :rtype: str
        """
        return self._tonic_quality

    @tonic_quality.setter
    def tonic_quality(self, tonic_quality):
        """Sets the tonic_quality of this AudioRenderTimelineSpanRegionKey.

        The scale quality; if this field is not specified, the API selects the quality automatically

        :param tonic_quality: The tonic_quality of this AudioRenderTimelineSpanRegionKey.
        :type tonic_quality: str
        """
        allowed_values = ["major", "natural_minor", "harmonic_minor", "melodic_minor", "ionian", "dorian", "phrygian", "lydian", "mixolydian", "aeolian", "locrian"]  # noqa: E501
        if tonic_quality not in allowed_values:
            raise ValueError(
                "Invalid value for `tonic_quality` ({0}), must be one of {1}"
                .format(tonic_quality, allowed_values)
            )

        self._tonic_quality = tonic_quality
