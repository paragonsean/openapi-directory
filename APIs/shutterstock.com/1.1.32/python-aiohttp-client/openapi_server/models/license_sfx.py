# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseSFX(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_layout: str=None, format: str=None, search_id: str=None, sfx_id: str=None, subscription_id: str=None):
        """LicenseSFX - a model defined in OpenAPI

        :param audio_layout: The audio_layout of this LicenseSFX.
        :param format: The format of this LicenseSFX.
        :param search_id: The search_id of this LicenseSFX.
        :param sfx_id: The sfx_id of this LicenseSFX.
        :param subscription_id: The subscription_id of this LicenseSFX.
        """
        self.openapi_types = {
            'audio_layout': str,
            'format': str,
            'search_id': str,
            'sfx_id': str,
            'subscription_id': str
        }

        self.attribute_map = {
            'audio_layout': 'audio_layout',
            'format': 'format',
            'search_id': 'search_id',
            'sfx_id': 'sfx_id',
            'subscription_id': 'subscription_id'
        }

        self._audio_layout = audio_layout
        self._format = format
        self._search_id = search_id
        self._sfx_id = sfx_id
        self._subscription_id = subscription_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseSFX':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseSFX of this LicenseSFX.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_layout(self):
        """Gets the audio_layout of this LicenseSFX.


        :return: The audio_layout of this LicenseSFX.
        :rtype: str
        """
        return self._audio_layout

    @audio_layout.setter
    def audio_layout(self, audio_layout):
        """Sets the audio_layout of this LicenseSFX.


        :param audio_layout: The audio_layout of this LicenseSFX.
        :type audio_layout: str
        """
        allowed_values = ["ambisonic", "5.1", "stereo"]  # noqa: E501
        if audio_layout not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_layout` ({0}), must be one of {1}"
                .format(audio_layout, allowed_values)
            )

        self._audio_layout = audio_layout

    @property
    def format(self):
        """Gets the format of this LicenseSFX.


        :return: The format of this LicenseSFX.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this LicenseSFX.


        :param format: The format of this LicenseSFX.
        :type format: str
        """
        allowed_values = ["wav", "mp3"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def search_id(self):
        """Gets the search_id of this LicenseSFX.

        ID of the search that led to this licensing event

        :return: The search_id of this LicenseSFX.
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this LicenseSFX.

        ID of the search that led to this licensing event

        :param search_id: The search_id of this LicenseSFX.
        :type search_id: str
        """

        self._search_id = search_id

    @property
    def sfx_id(self):
        """Gets the sfx_id of this LicenseSFX.

        ID of the sounds effect being licensed

        :return: The sfx_id of this LicenseSFX.
        :rtype: str
        """
        return self._sfx_id

    @sfx_id.setter
    def sfx_id(self, sfx_id):
        """Sets the sfx_id of this LicenseSFX.

        ID of the sounds effect being licensed

        :param sfx_id: The sfx_id of this LicenseSFX.
        :type sfx_id: str
        """
        if sfx_id is None:
            raise ValueError("Invalid value for `sfx_id`, must not be `None`")

        self._sfx_id = sfx_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this LicenseSFX.

        ID of the subscription to use for the download.

        :return: The subscription_id of this LicenseSFX.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this LicenseSFX.

        ID of the subscription to use for the download.

        :param subscription_id: The subscription_id of this LicenseSFX.
        :type subscription_id: str
        """
        if subscription_id is None:
            raise ValueError("Invalid value for `subscription_id`, must not be `None`")

        self._subscription_id = subscription_id
