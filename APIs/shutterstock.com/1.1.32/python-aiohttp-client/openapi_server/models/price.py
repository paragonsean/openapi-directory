# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Price(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, local_amount: float=None, local_currency: str=None):
        """Price - a model defined in OpenAPI

        :param local_amount: The local_amount of this Price.
        :param local_currency: The local_currency of this Price.
        """
        self.openapi_types = {
            'local_amount': float,
            'local_currency': str
        }

        self.attribute_map = {
            'local_amount': 'local_amount',
            'local_currency': 'local_currency'
        }

        self._local_amount = local_amount
        self._local_currency = local_currency

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Price':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Price of this Price.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def local_amount(self):
        """Gets the local_amount of this Price.

        Floating-point amount of the calculated rev-share price in the currency local_currency

        :return: The local_amount of this Price.
        :rtype: float
        """
        return self._local_amount

    @local_amount.setter
    def local_amount(self, local_amount):
        """Sets the local_amount of this Price.

        Floating-point amount of the calculated rev-share price in the currency local_currency

        :param local_amount: The local_amount of this Price.
        :type local_amount: float
        """

        self._local_amount = local_amount

    @property
    def local_currency(self):
        """Gets the local_currency of this Price.

        Currency of the rev-share price that was calculated

        :return: The local_currency of this Price.
        :rtype: str
        """
        return self._local_currency

    @local_currency.setter
    def local_currency(self, local_currency):
        """Sets the local_currency of this Price.

        Currency of the rev-share price that was calculated

        :param local_currency: The local_currency of this Price.
        :type local_currency: str
        """

        self._local_currency = local_currency
