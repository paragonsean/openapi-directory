# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editorial_video_content import EditorialVideoContent
from openapi_server import util


class EditorialVideoSearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, data: List[EditorialVideoContent]=None, message: str=None, next: str=None, page: int=None, per_page: int=None, prev: str=None, search_id: str=None, total_count: int=None):
        """EditorialVideoSearchResults - a model defined in OpenAPI

        :param data: The data of this EditorialVideoSearchResults.
        :param message: The message of this EditorialVideoSearchResults.
        :param next: The next of this EditorialVideoSearchResults.
        :param page: The page of this EditorialVideoSearchResults.
        :param per_page: The per_page of this EditorialVideoSearchResults.
        :param prev: The prev of this EditorialVideoSearchResults.
        :param search_id: The search_id of this EditorialVideoSearchResults.
        :param total_count: The total_count of this EditorialVideoSearchResults.
        """
        self.openapi_types = {
            'data': List[EditorialVideoContent],
            'message': str,
            'next': str,
            'page': int,
            'per_page': int,
            'prev': str,
            'search_id': str,
            'total_count': int
        }

        self.attribute_map = {
            'data': 'data',
            'message': 'message',
            'next': 'next',
            'page': 'page',
            'per_page': 'per_page',
            'prev': 'prev',
            'search_id': 'search_id',
            'total_count': 'total_count'
        }

        self._data = data
        self._message = message
        self._next = next
        self._page = page
        self._per_page = per_page
        self._prev = prev
        self._search_id = search_id
        self._total_count = total_count

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorialVideoSearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditorialVideoSearchResults of this EditorialVideoSearchResults.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def data(self):
        """Gets the data of this EditorialVideoSearchResults.

        Editorial items

        :return: The data of this EditorialVideoSearchResults.
        :rtype: List[EditorialVideoContent]
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this EditorialVideoSearchResults.

        Editorial items

        :param data: The data of this EditorialVideoSearchResults.
        :type data: List[EditorialVideoContent]
        """
        if data is None:
            raise ValueError("Invalid value for `data`, must not be `None`")

        self._data = data

    @property
    def message(self):
        """Gets the message of this EditorialVideoSearchResults.

        Optional error message

        :return: The message of this EditorialVideoSearchResults.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this EditorialVideoSearchResults.

        Optional error message

        :param message: The message of this EditorialVideoSearchResults.
        :type message: str
        """

        self._message = message

    @property
    def next(self):
        """Gets the next of this EditorialVideoSearchResults.

        Cursor value that represents the next page of results

        :return: The next of this EditorialVideoSearchResults.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next):
        """Sets the next of this EditorialVideoSearchResults.

        Cursor value that represents the next page of results

        :param next: The next of this EditorialVideoSearchResults.
        :type next: str
        """

        self._next = next

    @property
    def page(self):
        """Gets the page of this EditorialVideoSearchResults.

        Current page of the response

        :return: The page of this EditorialVideoSearchResults.
        :rtype: int
        """
        return self._page

    @page.setter
    def page(self, page):
        """Sets the page of this EditorialVideoSearchResults.

        Current page of the response

        :param page: The page of this EditorialVideoSearchResults.
        :type page: int
        """

        self._page = page

    @property
    def per_page(self):
        """Gets the per_page of this EditorialVideoSearchResults.

        Number of results per page

        :return: The per_page of this EditorialVideoSearchResults.
        :rtype: int
        """
        return self._per_page

    @per_page.setter
    def per_page(self, per_page):
        """Sets the per_page of this EditorialVideoSearchResults.

        Number of results per page

        :param per_page: The per_page of this EditorialVideoSearchResults.
        :type per_page: int
        """

        self._per_page = per_page

    @property
    def prev(self):
        """Gets the prev of this EditorialVideoSearchResults.

        Cursor value that represents the previous page of results

        :return: The prev of this EditorialVideoSearchResults.
        :rtype: str
        """
        return self._prev

    @prev.setter
    def prev(self, prev):
        """Sets the prev of this EditorialVideoSearchResults.

        Cursor value that represents the previous page of results

        :param prev: The prev of this EditorialVideoSearchResults.
        :type prev: str
        """

        self._prev = prev

    @property
    def search_id(self):
        """Gets the search_id of this EditorialVideoSearchResults.

        Unique identifier for the search request

        :return: The search_id of this EditorialVideoSearchResults.
        :rtype: str
        """
        return self._search_id

    @search_id.setter
    def search_id(self, search_id):
        """Sets the search_id of this EditorialVideoSearchResults.

        Unique identifier for the search request

        :param search_id: The search_id of this EditorialVideoSearchResults.
        :type search_id: str
        """

        self._search_id = search_id

    @property
    def total_count(self):
        """Gets the total_count of this EditorialVideoSearchResults.

        Total count of all results

        :return: The total_count of this EditorialVideoSearchResults.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count):
        """Sets the total_count of this EditorialVideoSearchResults.

        Total count of all results

        :param total_count: The total_count of this EditorialVideoSearchResults.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")

        self._total_count = total_count
