# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributor import Contributor
from openapi_server.models.sfx_assets import SFXAssets
from openapi_server import util


class SFX(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, added_date: date=None, affiliate_url: str=None, artist: str=None, assets: SFXAssets=None, contributor: Contributor=None, description: str=None, duration: float=None, id: str=None, keywords: List[str]=None, media_type: str=None, releases: List[str]=None, title: str=None, updated_time: datetime=None, url: str=None):
        """SFX - a model defined in OpenAPI

        :param added_date: The added_date of this SFX.
        :param affiliate_url: The affiliate_url of this SFX.
        :param artist: The artist of this SFX.
        :param assets: The assets of this SFX.
        :param contributor: The contributor of this SFX.
        :param description: The description of this SFX.
        :param duration: The duration of this SFX.
        :param id: The id of this SFX.
        :param keywords: The keywords of this SFX.
        :param media_type: The media_type of this SFX.
        :param releases: The releases of this SFX.
        :param title: The title of this SFX.
        :param updated_time: The updated_time of this SFX.
        :param url: The url of this SFX.
        """
        self.openapi_types = {
            'added_date': date,
            'affiliate_url': str,
            'artist': str,
            'assets': SFXAssets,
            'contributor': Contributor,
            'description': str,
            'duration': float,
            'id': str,
            'keywords': List[str],
            'media_type': str,
            'releases': List[str],
            'title': str,
            'updated_time': datetime,
            'url': str
        }

        self.attribute_map = {
            'added_date': 'added_date',
            'affiliate_url': 'affiliate_url',
            'artist': 'artist',
            'assets': 'assets',
            'contributor': 'contributor',
            'description': 'description',
            'duration': 'duration',
            'id': 'id',
            'keywords': 'keywords',
            'media_type': 'media_type',
            'releases': 'releases',
            'title': 'title',
            'updated_time': 'updated_time',
            'url': 'url'
        }

        self._added_date = added_date
        self._affiliate_url = affiliate_url
        self._artist = artist
        self._assets = assets
        self._contributor = contributor
        self._description = description
        self._duration = duration
        self._id = id
        self._keywords = keywords
        self._media_type = media_type
        self._releases = releases
        self._title = title
        self._updated_time = updated_time
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'SFX':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The SFX of this SFX.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def added_date(self):
        """Gets the added_date of this SFX.

        Date this sound effect was added to the Shutterstock library

        :return: The added_date of this SFX.
        :rtype: date
        """
        return self._added_date

    @added_date.setter
    def added_date(self, added_date):
        """Sets the added_date of this SFX.

        Date this sound effect was added to the Shutterstock library

        :param added_date: The added_date of this SFX.
        :type added_date: date
        """

        self._added_date = added_date

    @property
    def affiliate_url(self):
        """Gets the affiliate_url of this SFX.

        Affiliate referral link; appears only for registered affiliate partners

        :return: The affiliate_url of this SFX.
        :rtype: str
        """
        return self._affiliate_url

    @affiliate_url.setter
    def affiliate_url(self, affiliate_url):
        """Sets the affiliate_url of this SFX.

        Affiliate referral link; appears only for registered affiliate partners

        :param affiliate_url: The affiliate_url of this SFX.
        :type affiliate_url: str
        """

        self._affiliate_url = affiliate_url

    @property
    def artist(self):
        """Gets the artist of this SFX.

        Artist of the sound effect

        :return: The artist of this SFX.
        :rtype: str
        """
        return self._artist

    @artist.setter
    def artist(self, artist):
        """Sets the artist of this SFX.

        Artist of the sound effect

        :param artist: The artist of this SFX.
        :type artist: str
        """

        self._artist = artist

    @property
    def assets(self):
        """Gets the assets of this SFX.


        :return: The assets of this SFX.
        :rtype: SFXAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this SFX.


        :param assets: The assets of this SFX.
        :type assets: SFXAssets
        """

        self._assets = assets

    @property
    def contributor(self):
        """Gets the contributor of this SFX.


        :return: The contributor of this SFX.
        :rtype: Contributor
        """
        return self._contributor

    @contributor.setter
    def contributor(self, contributor):
        """Sets the contributor of this SFX.


        :param contributor: The contributor of this SFX.
        :type contributor: Contributor
        """
        if contributor is None:
            raise ValueError("Invalid value for `contributor`, must not be `None`")

        self._contributor = contributor

    @property
    def description(self):
        """Gets the description of this SFX.

        Description of this sound effect

        :return: The description of this SFX.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this SFX.

        Description of this sound effect

        :param description: The description of this SFX.
        :type description: str
        """

        self._description = description

    @property
    def duration(self):
        """Gets the duration of this SFX.

        Duration of this sound effect in seconds

        :return: The duration of this SFX.
        :rtype: float
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SFX.

        Duration of this sound effect in seconds

        :param duration: The duration of this SFX.
        :type duration: float
        """

        self._duration = duration

    @property
    def id(self):
        """Gets the id of this SFX.

        Shutterstock ID of this sound effect

        :return: The id of this SFX.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SFX.

        Shutterstock ID of this sound effect

        :param id: The id of this SFX.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this SFX.

        List of all keywords for this sound effect

        :return: The keywords of this SFX.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this SFX.

        List of all keywords for this sound effect

        :param keywords: The keywords of this SFX.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def media_type(self):
        """Gets the media_type of this SFX.

        Media type of this track; should always be \"sfx\"

        :return: The media_type of this SFX.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this SFX.

        Media type of this track; should always be \"sfx\"

        :param media_type: The media_type of this SFX.
        :type media_type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")

        self._media_type = media_type

    @property
    def releases(self):
        """Gets the releases of this SFX.

        List of all releases of this sound effect

        :return: The releases of this SFX.
        :rtype: List[str]
        """
        return self._releases

    @releases.setter
    def releases(self, releases):
        """Sets the releases of this SFX.

        List of all releases of this sound effect

        :param releases: The releases of this SFX.
        :type releases: List[str]
        """

        self._releases = releases

    @property
    def title(self):
        """Gets the title of this SFX.

        Title of this sound effect

        :return: The title of this SFX.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this SFX.

        Title of this sound effect

        :param title: The title of this SFX.
        :type title: str
        """

        self._title = title

    @property
    def updated_time(self):
        """Gets the updated_time of this SFX.

        Time this sound effect was last updated

        :return: The updated_time of this SFX.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this SFX.

        Time this sound effect was last updated

        :param updated_time: The updated_time of this SFX.
        :type updated_time: datetime
        """

        self._updated_time = updated_time

    @property
    def url(self):
        """Gets the url of this SFX.

        

        :return: The url of this SFX.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this SFX.

        

        :param url: The url of this SFX.
        :type url: str
        """

        self._url = url
