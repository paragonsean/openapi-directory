# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.bands import Bands
from openapi_server.models.instruments import Instruments
from openapi_server.models.preview import Preview
from openapi_server import util


class Descriptors(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, average_render_speed: float=None, bands: List[Bands]=None, id: str=None, instruments: List[Instruments]=None, max_tempo: float=None, min_tempo: float=None, name: str=None, previews: List[Preview]=None, tags: List[str]=None):
        """Descriptors - a model defined in OpenAPI

        :param average_render_speed: The average_render_speed of this Descriptors.
        :param bands: The bands of this Descriptors.
        :param id: The id of this Descriptors.
        :param instruments: The instruments of this Descriptors.
        :param max_tempo: The max_tempo of this Descriptors.
        :param min_tempo: The min_tempo of this Descriptors.
        :param name: The name of this Descriptors.
        :param previews: The previews of this Descriptors.
        :param tags: The tags of this Descriptors.
        """
        self.openapi_types = {
            'average_render_speed': float,
            'bands': List[Bands],
            'id': str,
            'instruments': List[Instruments],
            'max_tempo': float,
            'min_tempo': float,
            'name': str,
            'previews': List[Preview],
            'tags': List[str]
        }

        self.attribute_map = {
            'average_render_speed': 'average_render_speed',
            'bands': 'bands',
            'id': 'id',
            'instruments': 'instruments',
            'max_tempo': 'max_tempo',
            'min_tempo': 'min_tempo',
            'name': 'name',
            'previews': 'previews',
            'tags': 'tags'
        }

        self._average_render_speed = average_render_speed
        self._bands = bands
        self._id = id
        self._instruments = instruments
        self._max_tempo = max_tempo
        self._min_tempo = min_tempo
        self._name = name
        self._previews = previews
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Descriptors':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Descriptors of this Descriptors.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def average_render_speed(self):
        """Gets the average_render_speed of this Descriptors.

        The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds

        :return: The average_render_speed of this Descriptors.
        :rtype: float
        """
        return self._average_render_speed

    @average_render_speed.setter
    def average_render_speed(self, average_render_speed):
        """Sets the average_render_speed of this Descriptors.

        The average ratio of the length of the music to the time it takes to render; for example, a render speed of 3.0 generates 30 seconds of music in about 10 seconds

        :param average_render_speed: The average_render_speed of this Descriptors.
        :type average_render_speed: float
        """

        self._average_render_speed = average_render_speed

    @property
    def bands(self):
        """Gets the bands of this Descriptors.

        The bands that are available to use this descriptor

        :return: The bands of this Descriptors.
        :rtype: List[Bands]
        """
        return self._bands

    @bands.setter
    def bands(self, bands):
        """Sets the bands of this Descriptors.

        The bands that are available to use this descriptor

        :param bands: The bands of this Descriptors.
        :type bands: List[Bands]
        """

        self._bands = bands

    @property
    def id(self):
        """Gets the id of this Descriptors.

        The ID of the descriptor

        :return: The id of this Descriptors.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Descriptors.

        The ID of the descriptor

        :param id: The id of this Descriptors.
        :type id: str
        """

        self._id = id

    @property
    def instruments(self):
        """Gets the instruments of this Descriptors.

        The instruments that can play with this descriptor

        :return: The instruments of this Descriptors.
        :rtype: List[Instruments]
        """
        return self._instruments

    @instruments.setter
    def instruments(self, instruments):
        """Sets the instruments of this Descriptors.

        The instruments that can play with this descriptor

        :param instruments: The instruments of this Descriptors.
        :type instruments: List[Instruments]
        """

        self._instruments = instruments

    @property
    def max_tempo(self):
        """Gets the max_tempo of this Descriptors.

        The maximum beats per minute that the descriptor is intended to be used with

        :return: The max_tempo of this Descriptors.
        :rtype: float
        """
        return self._max_tempo

    @max_tempo.setter
    def max_tempo(self, max_tempo):
        """Sets the max_tempo of this Descriptors.

        The maximum beats per minute that the descriptor is intended to be used with

        :param max_tempo: The max_tempo of this Descriptors.
        :type max_tempo: float
        """

        self._max_tempo = max_tempo

    @property
    def min_tempo(self):
        """Gets the min_tempo of this Descriptors.

        The minimum beats per minute that the descriptor is intended to be used with

        :return: The min_tempo of this Descriptors.
        :rtype: float
        """
        return self._min_tempo

    @min_tempo.setter
    def min_tempo(self, min_tempo):
        """Sets the min_tempo of this Descriptors.

        The minimum beats per minute that the descriptor is intended to be used with

        :param min_tempo: The min_tempo of this Descriptors.
        :type min_tempo: float
        """

        self._min_tempo = min_tempo

    @property
    def name(self):
        """Gets the name of this Descriptors.

        The name of the descriptor

        :return: The name of this Descriptors.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Descriptors.

        The name of the descriptor

        :param name: The name of this Descriptors.
        :type name: str
        """

        self._name = name

    @property
    def previews(self):
        """Gets the previews of this Descriptors.

        Preview of the descriptor

        :return: The previews of this Descriptors.
        :rtype: List[Preview]
        """
        return self._previews

    @previews.setter
    def previews(self, previews):
        """Sets the previews of this Descriptors.

        Preview of the descriptor

        :param previews: The previews of this Descriptors.
        :type previews: List[Preview]
        """

        self._previews = previews

    @property
    def tags(self):
        """Gets the tags of this Descriptors.

        Tags that describe the descriptor

        :return: The tags of this Descriptors.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Descriptors.

        Tags that describe the descriptor

        :param tags: The tags of this Descriptors.
        :type tags: List[str]
        """

        self._tags = tags
