# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_asset_details import AudioAssetDetails
from openapi_server.models.shorts_loops_stems import ShortsLoopsStems
from openapi_server import util


class AudioAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_art: AudioAssetDetails=None, clean_audio: AudioAssetDetails=None, original_audio: AudioAssetDetails=None, preview_mp3: AudioAssetDetails=None, preview_ogg: AudioAssetDetails=None, shorts_loops_stems: ShortsLoopsStems=None, waveform: AudioAssetDetails=None):
        """AudioAssets - a model defined in OpenAPI

        :param album_art: The album_art of this AudioAssets.
        :param clean_audio: The clean_audio of this AudioAssets.
        :param original_audio: The original_audio of this AudioAssets.
        :param preview_mp3: The preview_mp3 of this AudioAssets.
        :param preview_ogg: The preview_ogg of this AudioAssets.
        :param shorts_loops_stems: The shorts_loops_stems of this AudioAssets.
        :param waveform: The waveform of this AudioAssets.
        """
        self.openapi_types = {
            'album_art': AudioAssetDetails,
            'clean_audio': AudioAssetDetails,
            'original_audio': AudioAssetDetails,
            'preview_mp3': AudioAssetDetails,
            'preview_ogg': AudioAssetDetails,
            'shorts_loops_stems': ShortsLoopsStems,
            'waveform': AudioAssetDetails
        }

        self.attribute_map = {
            'album_art': 'album_art',
            'clean_audio': 'clean_audio',
            'original_audio': 'original_audio',
            'preview_mp3': 'preview_mp3',
            'preview_ogg': 'preview_ogg',
            'shorts_loops_stems': 'shorts_loops_stems',
            'waveform': 'waveform'
        }

        self._album_art = album_art
        self._clean_audio = clean_audio
        self._original_audio = original_audio
        self._preview_mp3 = preview_mp3
        self._preview_ogg = preview_ogg
        self._shorts_loops_stems = shorts_loops_stems
        self._waveform = waveform

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioAssets of this AudioAssets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_art(self):
        """Gets the album_art of this AudioAssets.


        :return: The album_art of this AudioAssets.
        :rtype: AudioAssetDetails
        """
        return self._album_art

    @album_art.setter
    def album_art(self, album_art):
        """Sets the album_art of this AudioAssets.


        :param album_art: The album_art of this AudioAssets.
        :type album_art: AudioAssetDetails
        """

        self._album_art = album_art

    @property
    def clean_audio(self):
        """Gets the clean_audio of this AudioAssets.


        :return: The clean_audio of this AudioAssets.
        :rtype: AudioAssetDetails
        """
        return self._clean_audio

    @clean_audio.setter
    def clean_audio(self, clean_audio):
        """Sets the clean_audio of this AudioAssets.


        :param clean_audio: The clean_audio of this AudioAssets.
        :type clean_audio: AudioAssetDetails
        """

        self._clean_audio = clean_audio

    @property
    def original_audio(self):
        """Gets the original_audio of this AudioAssets.


        :return: The original_audio of this AudioAssets.
        :rtype: AudioAssetDetails
        """
        return self._original_audio

    @original_audio.setter
    def original_audio(self, original_audio):
        """Sets the original_audio of this AudioAssets.


        :param original_audio: The original_audio of this AudioAssets.
        :type original_audio: AudioAssetDetails
        """

        self._original_audio = original_audio

    @property
    def preview_mp3(self):
        """Gets the preview_mp3 of this AudioAssets.


        :return: The preview_mp3 of this AudioAssets.
        :rtype: AudioAssetDetails
        """
        return self._preview_mp3

    @preview_mp3.setter
    def preview_mp3(self, preview_mp3):
        """Sets the preview_mp3 of this AudioAssets.


        :param preview_mp3: The preview_mp3 of this AudioAssets.
        :type preview_mp3: AudioAssetDetails
        """

        self._preview_mp3 = preview_mp3

    @property
    def preview_ogg(self):
        """Gets the preview_ogg of this AudioAssets.


        :return: The preview_ogg of this AudioAssets.
        :rtype: AudioAssetDetails
        """
        return self._preview_ogg

    @preview_ogg.setter
    def preview_ogg(self, preview_ogg):
        """Sets the preview_ogg of this AudioAssets.


        :param preview_ogg: The preview_ogg of this AudioAssets.
        :type preview_ogg: AudioAssetDetails
        """

        self._preview_ogg = preview_ogg

    @property
    def shorts_loops_stems(self):
        """Gets the shorts_loops_stems of this AudioAssets.


        :return: The shorts_loops_stems of this AudioAssets.
        :rtype: ShortsLoopsStems
        """
        return self._shorts_loops_stems

    @shorts_loops_stems.setter
    def shorts_loops_stems(self, shorts_loops_stems):
        """Sets the shorts_loops_stems of this AudioAssets.


        :param shorts_loops_stems: The shorts_loops_stems of this AudioAssets.
        :type shorts_loops_stems: ShortsLoopsStems
        """

        self._shorts_loops_stems = shorts_loops_stems

    @property
    def waveform(self):
        """Gets the waveform of this AudioAssets.


        :return: The waveform of this AudioAssets.
        :rtype: AudioAssetDetails
        """
        return self._waveform

    @waveform.setter
    def waveform(self, waveform):
        """Sets the waveform of this AudioAssets.


        :param waveform: The waveform of this AudioAssets.
        :type waveform: AudioAssetDetails
        """

        self._waveform = waveform
