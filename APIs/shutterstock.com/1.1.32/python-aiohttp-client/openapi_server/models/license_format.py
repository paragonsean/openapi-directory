# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseFormat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description: str=None, format: str=None, media_type: str=None, min_resolution: int=None, size: str=None):
        """LicenseFormat - a model defined in OpenAPI

        :param description: The description of this LicenseFormat.
        :param format: The format of this LicenseFormat.
        :param media_type: The media_type of this LicenseFormat.
        :param min_resolution: The min_resolution of this LicenseFormat.
        :param size: The size of this LicenseFormat.
        """
        self.openapi_types = {
            'description': str,
            'format': str,
            'media_type': str,
            'min_resolution': int,
            'size': str
        }

        self.attribute_map = {
            'description': 'description',
            'format': 'format',
            'media_type': 'media_type',
            'min_resolution': 'min_resolution',
            'size': 'size'
        }

        self._description = description
        self._format = format
        self._media_type = media_type
        self._min_resolution = min_resolution
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseFormat':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseFormat of this LicenseFormat.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self):
        """Gets the description of this LicenseFormat.

        Description of the license

        :return: The description of this LicenseFormat.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this LicenseFormat.

        Description of the license

        :param description: The description of this LicenseFormat.
        :type description: str
        """

        self._description = description

    @property
    def format(self):
        """Gets the format of this LicenseFormat.

        Format or extension of the media, such as mpeg for videos or jpeg for images

        :return: The format of this LicenseFormat.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this LicenseFormat.

        Format or extension of the media, such as mpeg for videos or jpeg for images

        :param format: The format of this LicenseFormat.
        :type format: str
        """

        self._format = format

    @property
    def media_type(self):
        """Gets the media_type of this LicenseFormat.

        Media type of the license

        :return: The media_type of this LicenseFormat.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this LicenseFormat.

        Media type of the license

        :param media_type: The media_type of this LicenseFormat.
        :type media_type: str
        """
        allowed_values = ["image", "video", "audio", "editorial"]  # noqa: E501
        if media_type not in allowed_values:
            raise ValueError(
                "Invalid value for `media_type` ({0}), must be one of {1}"
                .format(media_type, allowed_values)
            )

        self._media_type = media_type

    @property
    def min_resolution(self):
        """Gets the min_resolution of this LicenseFormat.

        Width of the media, in pixels, allowed by this license

        :return: The min_resolution of this LicenseFormat.
        :rtype: int
        """
        return self._min_resolution

    @min_resolution.setter
    def min_resolution(self, min_resolution):
        """Sets the min_resolution of this LicenseFormat.

        Width of the media, in pixels, allowed by this license

        :param min_resolution: The min_resolution of this LicenseFormat.
        :type min_resolution: int
        """

        self._min_resolution = min_resolution

    @property
    def size(self):
        """Gets the size of this LicenseFormat.

        Keyword that details the size of the media, such as hd or sd for video, huge or vector for images

        :return: The size of this LicenseFormat.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LicenseFormat.

        Keyword that details the size of the media, such as hd or sd for video, huge or vector for images

        :param size: The size of this LicenseFormat.
        :type size: str
        """

        self._size = size
