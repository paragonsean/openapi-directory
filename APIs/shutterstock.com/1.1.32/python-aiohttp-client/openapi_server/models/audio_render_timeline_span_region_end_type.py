# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioRenderTimelineSpanRegionEndType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beat: float=None, event: str=None, type: str=None):
        """AudioRenderTimelineSpanRegionEndType - a model defined in OpenAPI

        :param beat: The beat of this AudioRenderTimelineSpanRegionEndType.
        :param event: The event of this AudioRenderTimelineSpanRegionEndType.
        :param type: The type of this AudioRenderTimelineSpanRegionEndType.
        """
        self.openapi_types = {
            'beat': float,
            'event': str,
            'type': str
        }

        self.attribute_map = {
            'beat': 'beat',
            'event': 'event',
            'type': 'type'
        }

        self._beat = beat
        self._event = event
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpanRegionEndType':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpanRegion_end_type of this AudioRenderTimelineSpanRegionEndType.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beat(self):
        """Gets the beat of this AudioRenderTimelineSpanRegionEndType.

        The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region

        :return: The beat of this AudioRenderTimelineSpanRegionEndType.
        :rtype: float
        """
        return self._beat

    @beat.setter
    def beat(self, beat):
        """Sets the beat of this AudioRenderTimelineSpanRegionEndType.

        The beat, relative to the start of the active region, at which the end_type begins; in other words, the ending starts on this beat of the region

        :param beat: The beat of this AudioRenderTimelineSpanRegionEndType.
        :type beat: float
        """
        if beat is None:
            raise ValueError("Invalid value for `beat`, must not be `None`")

        self._beat = beat

    @property
    def event(self):
        """Gets the event of this AudioRenderTimelineSpanRegionEndType.

        The type of event

        :return: The event of this AudioRenderTimelineSpanRegionEndType.
        :rtype: str
        """
        return self._event

    @event.setter
    def event(self, event):
        """Sets the event of this AudioRenderTimelineSpanRegionEndType.

        The type of event

        :param event: The event of this AudioRenderTimelineSpanRegionEndType.
        :type event: str
        """
        allowed_values = ["ending", "transition"]  # noqa: E501
        if event not in allowed_values:
            raise ValueError(
                "Invalid value for `event` ({0}), must be one of {1}"
                .format(event, allowed_values)
            )

        self._event = event

    @property
    def type(self):
        """Gets the type of this AudioRenderTimelineSpanRegionEndType.

        The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"

        :return: The type of this AudioRenderTimelineSpanRegionEndType.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AudioRenderTimelineSpanRegionEndType.

        The specific action to perform; if the event type is \"ending\" then this must be \"ringout\" and if event type is \"transition\" this must be \"cut\"

        :param type: The type of this AudioRenderTimelineSpanRegionEndType.
        :type type: str
        """
        allowed_values = ["ringout", "cut"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
