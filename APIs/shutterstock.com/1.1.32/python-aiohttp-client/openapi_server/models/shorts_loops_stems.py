# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.shorts_loops_stems_loops_value import ShortsLoopsStemsLoopsValue
from openapi_server import util


class ShortsLoopsStems(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, loops: Dict[str, ShortsLoopsStemsLoopsValue]=None, shorts: Dict[str, ShortsLoopsStemsLoopsValue]=None, stems: Dict[str, ShortsLoopsStemsLoopsValue]=None):
        """ShortsLoopsStems - a model defined in OpenAPI

        :param loops: The loops of this ShortsLoopsStems.
        :param shorts: The shorts of this ShortsLoopsStems.
        :param stems: The stems of this ShortsLoopsStems.
        """
        self.openapi_types = {
            'loops': Dict[str, ShortsLoopsStemsLoopsValue],
            'shorts': Dict[str, ShortsLoopsStemsLoopsValue],
            'stems': Dict[str, ShortsLoopsStemsLoopsValue]
        }

        self.attribute_map = {
            'loops': 'loops',
            'shorts': 'shorts',
            'stems': 'stems'
        }

        self._loops = loops
        self._shorts = shorts
        self._stems = stems

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ShortsLoopsStems':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ShortsLoopsStems of this ShortsLoopsStems.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def loops(self):
        """Gets the loops of this ShortsLoopsStems.


        :return: The loops of this ShortsLoopsStems.
        :rtype: Dict[str, ShortsLoopsStemsLoopsValue]
        """
        return self._loops

    @loops.setter
    def loops(self, loops):
        """Sets the loops of this ShortsLoopsStems.


        :param loops: The loops of this ShortsLoopsStems.
        :type loops: Dict[str, ShortsLoopsStemsLoopsValue]
        """

        self._loops = loops

    @property
    def shorts(self):
        """Gets the shorts of this ShortsLoopsStems.


        :return: The shorts of this ShortsLoopsStems.
        :rtype: Dict[str, ShortsLoopsStemsLoopsValue]
        """
        return self._shorts

    @shorts.setter
    def shorts(self, shorts):
        """Sets the shorts of this ShortsLoopsStems.


        :param shorts: The shorts of this ShortsLoopsStems.
        :type shorts: Dict[str, ShortsLoopsStemsLoopsValue]
        """

        self._shorts = shorts

    @property
    def stems(self):
        """Gets the stems of this ShortsLoopsStems.


        :return: The stems of this ShortsLoopsStems.
        :rtype: Dict[str, ShortsLoopsStemsLoopsValue]
        """
        return self._stems

    @stems.setter
    def stems(self, stems):
        """Sets the stems of this ShortsLoopsStems.


        :param stems: The stems of this ShortsLoopsStems.
        :type stems: Dict[str, ShortsLoopsStemsLoopsValue]
        """

        self._stems = stems
