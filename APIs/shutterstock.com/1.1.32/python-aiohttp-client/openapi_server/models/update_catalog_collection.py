# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.update_catalog_collection_cover_asset import UpdateCatalogCollectionCoverAsset
from openapi_server import util


class UpdateCatalogCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cover_asset: UpdateCatalogCollectionCoverAsset=None, name: str=None, visibility: str=None):
        """UpdateCatalogCollection - a model defined in OpenAPI

        :param cover_asset: The cover_asset of this UpdateCatalogCollection.
        :param name: The name of this UpdateCatalogCollection.
        :param visibility: The visibility of this UpdateCatalogCollection.
        """
        self.openapi_types = {
            'cover_asset': UpdateCatalogCollectionCoverAsset,
            'name': str,
            'visibility': str
        }

        self.attribute_map = {
            'cover_asset': 'cover_asset',
            'name': 'name',
            'visibility': 'visibility'
        }

        self._cover_asset = cover_asset
        self._name = name
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdateCatalogCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdateCatalogCollection of this UpdateCatalogCollection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cover_asset(self):
        """Gets the cover_asset of this UpdateCatalogCollection.


        :return: The cover_asset of this UpdateCatalogCollection.
        :rtype: UpdateCatalogCollectionCoverAsset
        """
        return self._cover_asset

    @cover_asset.setter
    def cover_asset(self, cover_asset):
        """Sets the cover_asset of this UpdateCatalogCollection.


        :param cover_asset: The cover_asset of this UpdateCatalogCollection.
        :type cover_asset: UpdateCatalogCollectionCoverAsset
        """

        self._cover_asset = cover_asset

    @property
    def name(self):
        """Gets the name of this UpdateCatalogCollection.


        :return: The name of this UpdateCatalogCollection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateCatalogCollection.


        :param name: The name of this UpdateCatalogCollection.
        :type name: str
        """
        if name is not None and len(name) > 100000:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `100000`")
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")

        self._name = name

    @property
    def visibility(self):
        """Gets the visibility of this UpdateCatalogCollection.


        :return: The visibility of this UpdateCatalogCollection.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this UpdateCatalogCollection.


        :param visibility: The visibility of this UpdateCatalogCollection.
        :type visibility: str
        """
        allowed_values = ["private", "public"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
