# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.editorial_category import EditorialCategory
from openapi_server.models.editorial_video_assets import EditorialVideoAssets
from openapi_server import util


class EditorialVideoContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect: float=None, assets: EditorialVideoAssets=None, byline: str=None, caption: str=None, categories: List[EditorialCategory]=None, date_taken: date=None, description: str=None, id: str=None, keywords: List[str]=None, title: str=None):
        """EditorialVideoContent - a model defined in OpenAPI

        :param aspect: The aspect of this EditorialVideoContent.
        :param assets: The assets of this EditorialVideoContent.
        :param byline: The byline of this EditorialVideoContent.
        :param caption: The caption of this EditorialVideoContent.
        :param categories: The categories of this EditorialVideoContent.
        :param date_taken: The date_taken of this EditorialVideoContent.
        :param description: The description of this EditorialVideoContent.
        :param id: The id of this EditorialVideoContent.
        :param keywords: The keywords of this EditorialVideoContent.
        :param title: The title of this EditorialVideoContent.
        """
        self.openapi_types = {
            'aspect': float,
            'assets': EditorialVideoAssets,
            'byline': str,
            'caption': str,
            'categories': List[EditorialCategory],
            'date_taken': date,
            'description': str,
            'id': str,
            'keywords': List[str],
            'title': str
        }

        self.attribute_map = {
            'aspect': 'aspect',
            'assets': 'assets',
            'byline': 'byline',
            'caption': 'caption',
            'categories': 'categories',
            'date_taken': 'date_taken',
            'description': 'description',
            'id': 'id',
            'keywords': 'keywords',
            'title': 'title'
        }

        self._aspect = aspect
        self._assets = assets
        self._byline = byline
        self._caption = caption
        self._categories = categories
        self._date_taken = date_taken
        self._description = description
        self._id = id
        self._keywords = keywords
        self._title = title

    @classmethod
    def from_dict(cls, dikt: dict) -> 'EditorialVideoContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The EditorialVideoContent of this EditorialVideoContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect(self):
        """Gets the aspect of this EditorialVideoContent.


        :return: The aspect of this EditorialVideoContent.
        :rtype: float
        """
        return self._aspect

    @aspect.setter
    def aspect(self, aspect):
        """Sets the aspect of this EditorialVideoContent.


        :param aspect: The aspect of this EditorialVideoContent.
        :type aspect: float
        """

        self._aspect = aspect

    @property
    def assets(self):
        """Gets the assets of this EditorialVideoContent.


        :return: The assets of this EditorialVideoContent.
        :rtype: EditorialVideoAssets
        """
        return self._assets

    @assets.setter
    def assets(self, assets):
        """Sets the assets of this EditorialVideoContent.


        :param assets: The assets of this EditorialVideoContent.
        :type assets: EditorialVideoAssets
        """

        self._assets = assets

    @property
    def byline(self):
        """Gets the byline of this EditorialVideoContent.


        :return: The byline of this EditorialVideoContent.
        :rtype: str
        """
        return self._byline

    @byline.setter
    def byline(self, byline):
        """Sets the byline of this EditorialVideoContent.


        :param byline: The byline of this EditorialVideoContent.
        :type byline: str
        """

        self._byline = byline

    @property
    def caption(self):
        """Gets the caption of this EditorialVideoContent.


        :return: The caption of this EditorialVideoContent.
        :rtype: str
        """
        return self._caption

    @caption.setter
    def caption(self, caption):
        """Sets the caption of this EditorialVideoContent.


        :param caption: The caption of this EditorialVideoContent.
        :type caption: str
        """

        self._caption = caption

    @property
    def categories(self):
        """Gets the categories of this EditorialVideoContent.

        List of categories

        :return: The categories of this EditorialVideoContent.
        :rtype: List[EditorialCategory]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """Sets the categories of this EditorialVideoContent.

        List of categories

        :param categories: The categories of this EditorialVideoContent.
        :type categories: List[EditorialCategory]
        """

        self._categories = categories

    @property
    def date_taken(self):
        """Gets the date_taken of this EditorialVideoContent.


        :return: The date_taken of this EditorialVideoContent.
        :rtype: date
        """
        return self._date_taken

    @date_taken.setter
    def date_taken(self, date_taken):
        """Sets the date_taken of this EditorialVideoContent.


        :param date_taken: The date_taken of this EditorialVideoContent.
        :type date_taken: date
        """

        self._date_taken = date_taken

    @property
    def description(self):
        """Gets the description of this EditorialVideoContent.


        :return: The description of this EditorialVideoContent.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this EditorialVideoContent.


        :param description: The description of this EditorialVideoContent.
        :type description: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this EditorialVideoContent.


        :return: The id of this EditorialVideoContent.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EditorialVideoContent.


        :param id: The id of this EditorialVideoContent.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def keywords(self):
        """Gets the keywords of this EditorialVideoContent.


        :return: The keywords of this EditorialVideoContent.
        :rtype: List[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this EditorialVideoContent.


        :param keywords: The keywords of this EditorialVideoContent.
        :type keywords: List[str]
        """

        self._keywords = keywords

    @property
    def title(self):
        """Gets the title of this EditorialVideoContent.


        :return: The title of this EditorialVideoContent.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this EditorialVideoContent.


        :param title: The title of this EditorialVideoContent.
        :type title: str
        """

        self._title = title
