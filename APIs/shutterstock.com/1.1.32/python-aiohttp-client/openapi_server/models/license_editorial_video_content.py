# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class LicenseEditorialVideoContent(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, editorial_id: str=None, license: str=None, metadata: object=None, size: str='original'):
        """LicenseEditorialVideoContent - a model defined in OpenAPI

        :param editorial_id: The editorial_id of this LicenseEditorialVideoContent.
        :param license: The license of this LicenseEditorialVideoContent.
        :param metadata: The metadata of this LicenseEditorialVideoContent.
        :param size: The size of this LicenseEditorialVideoContent.
        """
        self.openapi_types = {
            'editorial_id': str,
            'license': str,
            'metadata': object,
            'size': str
        }

        self.attribute_map = {
            'editorial_id': 'editorial_id',
            'license': 'license',
            'metadata': 'metadata',
            'size': 'size'
        }

        self._editorial_id = editorial_id
        self._license = license
        self._metadata = metadata
        self._size = size

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseEditorialVideoContent':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseEditorialVideoContent of this LicenseEditorialVideoContent.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def editorial_id(self):
        """Gets the editorial_id of this LicenseEditorialVideoContent.

        Editorial ID

        :return: The editorial_id of this LicenseEditorialVideoContent.
        :rtype: str
        """
        return self._editorial_id

    @editorial_id.setter
    def editorial_id(self, editorial_id):
        """Sets the editorial_id of this LicenseEditorialVideoContent.

        Editorial ID

        :param editorial_id: The editorial_id of this LicenseEditorialVideoContent.
        :type editorial_id: str
        """
        if editorial_id is None:
            raise ValueError("Invalid value for `editorial_id`, must not be `None`")

        self._editorial_id = editorial_id

    @property
    def license(self):
        """Gets the license of this LicenseEditorialVideoContent.

        License agreement to use for licensing

        :return: The license of this LicenseEditorialVideoContent.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this LicenseEditorialVideoContent.

        License agreement to use for licensing

        :param license: The license of this LicenseEditorialVideoContent.
        :type license: str
        """
        allowed_values = ["premier_editorial_video_digital_only", "premier_editorial_video_all_media", "premier_editorial_video_all_media_single_territory", "premier_editorial_video_comp"]  # noqa: E501
        if license not in allowed_values:
            raise ValueError(
                "Invalid value for `license` ({0}), must be one of {1}"
                .format(license, allowed_values)
            )

        self._license = license

    @property
    def metadata(self):
        """Gets the metadata of this LicenseEditorialVideoContent.

        Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder

        :return: The metadata of this LicenseEditorialVideoContent.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this LicenseEditorialVideoContent.

        Additional information for license requests for enterprise accounts and API subscriptions, 4 fields maximum; which fields are required is set by the account holder

        :param metadata: The metadata of this LicenseEditorialVideoContent.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def size(self):
        """Gets the size of this LicenseEditorialVideoContent.

        Asset size to download

        :return: The size of this LicenseEditorialVideoContent.
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this LicenseEditorialVideoContent.

        Asset size to download

        :param size: The size of this LicenseEditorialVideoContent.
        :type size: str
        """
        allowed_values = ["original"]  # noqa: E501
        if size not in allowed_values:
            raise ValueError(
                "Invalid value for `size` ({0}), must be one of {1}"
                .format(size, allowed_values)
            )

        self._size = size
