# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.contributor_profile_social_media import ContributorProfileSocialMedia
from openapi_server import util


class ContributorProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, about: str=None, contributor_type: List[str]=None, display_name: str=None, equipment: List[str]=None, id: str=None, location: str=None, portfolio_url: str=None, social_media: ContributorProfileSocialMedia=None, styles: List[str]=None, subjects: List[str]=None, website: str=None):
        """ContributorProfile - a model defined in OpenAPI

        :param about: The about of this ContributorProfile.
        :param contributor_type: The contributor_type of this ContributorProfile.
        :param display_name: The display_name of this ContributorProfile.
        :param equipment: The equipment of this ContributorProfile.
        :param id: The id of this ContributorProfile.
        :param location: The location of this ContributorProfile.
        :param portfolio_url: The portfolio_url of this ContributorProfile.
        :param social_media: The social_media of this ContributorProfile.
        :param styles: The styles of this ContributorProfile.
        :param subjects: The subjects of this ContributorProfile.
        :param website: The website of this ContributorProfile.
        """
        self.openapi_types = {
            'about': str,
            'contributor_type': List[str],
            'display_name': str,
            'equipment': List[str],
            'id': str,
            'location': str,
            'portfolio_url': str,
            'social_media': ContributorProfileSocialMedia,
            'styles': List[str],
            'subjects': List[str],
            'website': str
        }

        self.attribute_map = {
            'about': 'about',
            'contributor_type': 'contributor_type',
            'display_name': 'display_name',
            'equipment': 'equipment',
            'id': 'id',
            'location': 'location',
            'portfolio_url': 'portfolio_url',
            'social_media': 'social_media',
            'styles': 'styles',
            'subjects': 'subjects',
            'website': 'website'
        }

        self._about = about
        self._contributor_type = contributor_type
        self._display_name = display_name
        self._equipment = equipment
        self._id = id
        self._location = location
        self._portfolio_url = portfolio_url
        self._social_media = social_media
        self._styles = styles
        self._subjects = subjects
        self._website = website

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ContributorProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ContributorProfile of this ContributorProfile.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def about(self):
        """Gets the about of this ContributorProfile.

        Short description of the contributors' library

        :return: The about of this ContributorProfile.
        :rtype: str
        """
        return self._about

    @about.setter
    def about(self, about):
        """Sets the about of this ContributorProfile.

        Short description of the contributors' library

        :param about: The about of this ContributorProfile.
        :type about: str
        """

        self._about = about

    @property
    def contributor_type(self):
        """Gets the contributor_type of this ContributorProfile.

        Type of content that the contributor specializes in (photographer, illustrator, etc)

        :return: The contributor_type of this ContributorProfile.
        :rtype: List[str]
        """
        return self._contributor_type

    @contributor_type.setter
    def contributor_type(self, contributor_type):
        """Sets the contributor_type of this ContributorProfile.

        Type of content that the contributor specializes in (photographer, illustrator, etc)

        :param contributor_type: The contributor_type of this ContributorProfile.
        :type contributor_type: List[str]
        """

        self._contributor_type = contributor_type

    @property
    def display_name(self):
        """Gets the display_name of this ContributorProfile.

        Preferred name to be displayed for the contributor

        :return: The display_name of this ContributorProfile.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this ContributorProfile.

        Preferred name to be displayed for the contributor

        :param display_name: The display_name of this ContributorProfile.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def equipment(self):
        """Gets the equipment of this ContributorProfile.

        List of equipment used by the contributor (Canon EOS 5D Mark II, etc)

        :return: The equipment of this ContributorProfile.
        :rtype: List[str]
        """
        return self._equipment

    @equipment.setter
    def equipment(self, equipment):
        """Sets the equipment of this ContributorProfile.

        List of equipment used by the contributor (Canon EOS 5D Mark II, etc)

        :param equipment: The equipment of this ContributorProfile.
        :type equipment: List[str]
        """

        self._equipment = equipment

    @property
    def id(self):
        """Gets the id of this ContributorProfile.

        Contributor ID

        :return: The id of this ContributorProfile.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ContributorProfile.

        Contributor ID

        :param id: The id of this ContributorProfile.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def location(self):
        """Gets the location of this ContributorProfile.

        Country code representing the contributor's locale

        :return: The location of this ContributorProfile.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this ContributorProfile.

        Country code representing the contributor's locale

        :param location: The location of this ContributorProfile.
        :type location: str
        """

        self._location = location

    @property
    def portfolio_url(self):
        """Gets the portfolio_url of this ContributorProfile.

        Web URL for the contributors' profile

        :return: The portfolio_url of this ContributorProfile.
        :rtype: str
        """
        return self._portfolio_url

    @portfolio_url.setter
    def portfolio_url(self, portfolio_url):
        """Sets the portfolio_url of this ContributorProfile.

        Web URL for the contributors' profile

        :param portfolio_url: The portfolio_url of this ContributorProfile.
        :type portfolio_url: str
        """

        self._portfolio_url = portfolio_url

    @property
    def social_media(self):
        """Gets the social_media of this ContributorProfile.


        :return: The social_media of this ContributorProfile.
        :rtype: ContributorProfileSocialMedia
        """
        return self._social_media

    @social_media.setter
    def social_media(self, social_media):
        """Sets the social_media of this ContributorProfile.


        :param social_media: The social_media of this ContributorProfile.
        :type social_media: ContributorProfileSocialMedia
        """

        self._social_media = social_media

    @property
    def styles(self):
        """Gets the styles of this ContributorProfile.

        List of styles that the contributor specializes in (lifestyle, mixed media, etc)

        :return: The styles of this ContributorProfile.
        :rtype: List[str]
        """
        return self._styles

    @styles.setter
    def styles(self, styles):
        """Sets the styles of this ContributorProfile.

        List of styles that the contributor specializes in (lifestyle, mixed media, etc)

        :param styles: The styles of this ContributorProfile.
        :type styles: List[str]
        """

        self._styles = styles

    @property
    def subjects(self):
        """Gets the subjects of this ContributorProfile.

        Generic list of subjects for contributors' work (food_and_drink, holiday, people, etc)

        :return: The subjects of this ContributorProfile.
        :rtype: List[str]
        """
        return self._subjects

    @subjects.setter
    def subjects(self, subjects):
        """Sets the subjects of this ContributorProfile.

        Generic list of subjects for contributors' work (food_and_drink, holiday, people, etc)

        :param subjects: The subjects of this ContributorProfile.
        :type subjects: List[str]
        """

        self._subjects = subjects

    @property
    def website(self):
        """Gets the website of this ContributorProfile.

        Personal website for the contributor

        :return: The website of this ContributorProfile.
        :rtype: str
        """
        return self._website

    @website.setter
    def website(self, website):
        """Sets the website of this ContributorProfile.

        Personal website for the contributor

        :param website: The website of this ContributorProfile.
        :type website: str
        """

        self._website = website
