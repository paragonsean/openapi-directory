# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatedMedia(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: str=None, updated_time: datetime=None, updates: List[str]=None):
        """UpdatedMedia - a model defined in OpenAPI

        :param id: The id of this UpdatedMedia.
        :param updated_time: The updated_time of this UpdatedMedia.
        :param updates: The updates of this UpdatedMedia.
        """
        self.openapi_types = {
            'id': str,
            'updated_time': datetime,
            'updates': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'updated_time': 'updated_time',
            'updates': 'updates'
        }

        self._id = id
        self._updated_time = updated_time
        self._updates = updates

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UpdatedMedia':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UpdatedMedia of this UpdatedMedia.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this UpdatedMedia.

        ID of the media

        :return: The id of this UpdatedMedia.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UpdatedMedia.

        ID of the media

        :param id: The id of this UpdatedMedia.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def updated_time(self):
        """Gets the updated_time of this UpdatedMedia.

        Date that the media was updated

        :return: The updated_time of this UpdatedMedia.
        :rtype: datetime
        """
        return self._updated_time

    @updated_time.setter
    def updated_time(self, updated_time):
        """Sets the updated_time of this UpdatedMedia.

        Date that the media was updated

        :param updated_time: The updated_time of this UpdatedMedia.
        :type updated_time: datetime
        """
        if updated_time is None:
            raise ValueError("Invalid value for `updated_time`, must not be `None`")

        self._updated_time = updated_time

    @property
    def updates(self):
        """Gets the updates of this UpdatedMedia.

        Types of updates that were made to the piece of media

        :return: The updates of this UpdatedMedia.
        :rtype: List[str]
        """
        return self._updates

    @updates.setter
    def updates(self, updates):
        """Sets the updates of this UpdatedMedia.

        Types of updates that were made to the piece of media

        :param updates: The updates of this UpdatedMedia.
        :type updates: List[str]
        """
        if updates is None:
            raise ValueError("Invalid value for `updates`, must not be `None`")

        self._updates = updates
