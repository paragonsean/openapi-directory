# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.image_size_details import ImageSizeDetails
from openapi_server.models.thumbnail import Thumbnail
from openapi_server import util


class ImageAssets(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, huge_jpg: ImageSizeDetails=None, huge_thumb: Thumbnail=None, large_thumb: Thumbnail=None, medium_jpg: ImageSizeDetails=None, preview: Thumbnail=None, preview_1000: Thumbnail=None, preview_1500: Thumbnail=None, small_jpg: ImageSizeDetails=None, small_thumb: Thumbnail=None, supersize_jpg: ImageSizeDetails=None, vector_eps: ImageSizeDetails=None):
        """ImageAssets - a model defined in OpenAPI

        :param huge_jpg: The huge_jpg of this ImageAssets.
        :param huge_thumb: The huge_thumb of this ImageAssets.
        :param large_thumb: The large_thumb of this ImageAssets.
        :param medium_jpg: The medium_jpg of this ImageAssets.
        :param preview: The preview of this ImageAssets.
        :param preview_1000: The preview_1000 of this ImageAssets.
        :param preview_1500: The preview_1500 of this ImageAssets.
        :param small_jpg: The small_jpg of this ImageAssets.
        :param small_thumb: The small_thumb of this ImageAssets.
        :param supersize_jpg: The supersize_jpg of this ImageAssets.
        :param vector_eps: The vector_eps of this ImageAssets.
        """
        self.openapi_types = {
            'huge_jpg': ImageSizeDetails,
            'huge_thumb': Thumbnail,
            'large_thumb': Thumbnail,
            'medium_jpg': ImageSizeDetails,
            'preview': Thumbnail,
            'preview_1000': Thumbnail,
            'preview_1500': Thumbnail,
            'small_jpg': ImageSizeDetails,
            'small_thumb': Thumbnail,
            'supersize_jpg': ImageSizeDetails,
            'vector_eps': ImageSizeDetails
        }

        self.attribute_map = {
            'huge_jpg': 'huge_jpg',
            'huge_thumb': 'huge_thumb',
            'large_thumb': 'large_thumb',
            'medium_jpg': 'medium_jpg',
            'preview': 'preview',
            'preview_1000': 'preview_1000',
            'preview_1500': 'preview_1500',
            'small_jpg': 'small_jpg',
            'small_thumb': 'small_thumb',
            'supersize_jpg': 'supersize_jpg',
            'vector_eps': 'vector_eps'
        }

        self._huge_jpg = huge_jpg
        self._huge_thumb = huge_thumb
        self._large_thumb = large_thumb
        self._medium_jpg = medium_jpg
        self._preview = preview
        self._preview_1000 = preview_1000
        self._preview_1500 = preview_1500
        self._small_jpg = small_jpg
        self._small_thumb = small_thumb
        self._supersize_jpg = supersize_jpg
        self._vector_eps = vector_eps

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ImageAssets':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The ImageAssets of this ImageAssets.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def huge_jpg(self):
        """Gets the huge_jpg of this ImageAssets.


        :return: The huge_jpg of this ImageAssets.
        :rtype: ImageSizeDetails
        """
        return self._huge_jpg

    @huge_jpg.setter
    def huge_jpg(self, huge_jpg):
        """Sets the huge_jpg of this ImageAssets.


        :param huge_jpg: The huge_jpg of this ImageAssets.
        :type huge_jpg: ImageSizeDetails
        """

        self._huge_jpg = huge_jpg

    @property
    def huge_thumb(self):
        """Gets the huge_thumb of this ImageAssets.


        :return: The huge_thumb of this ImageAssets.
        :rtype: Thumbnail
        """
        return self._huge_thumb

    @huge_thumb.setter
    def huge_thumb(self, huge_thumb):
        """Sets the huge_thumb of this ImageAssets.


        :param huge_thumb: The huge_thumb of this ImageAssets.
        :type huge_thumb: Thumbnail
        """

        self._huge_thumb = huge_thumb

    @property
    def large_thumb(self):
        """Gets the large_thumb of this ImageAssets.


        :return: The large_thumb of this ImageAssets.
        :rtype: Thumbnail
        """
        return self._large_thumb

    @large_thumb.setter
    def large_thumb(self, large_thumb):
        """Sets the large_thumb of this ImageAssets.


        :param large_thumb: The large_thumb of this ImageAssets.
        :type large_thumb: Thumbnail
        """

        self._large_thumb = large_thumb

    @property
    def medium_jpg(self):
        """Gets the medium_jpg of this ImageAssets.


        :return: The medium_jpg of this ImageAssets.
        :rtype: ImageSizeDetails
        """
        return self._medium_jpg

    @medium_jpg.setter
    def medium_jpg(self, medium_jpg):
        """Sets the medium_jpg of this ImageAssets.


        :param medium_jpg: The medium_jpg of this ImageAssets.
        :type medium_jpg: ImageSizeDetails
        """

        self._medium_jpg = medium_jpg

    @property
    def preview(self):
        """Gets the preview of this ImageAssets.


        :return: The preview of this ImageAssets.
        :rtype: Thumbnail
        """
        return self._preview

    @preview.setter
    def preview(self, preview):
        """Sets the preview of this ImageAssets.


        :param preview: The preview of this ImageAssets.
        :type preview: Thumbnail
        """

        self._preview = preview

    @property
    def preview_1000(self):
        """Gets the preview_1000 of this ImageAssets.


        :return: The preview_1000 of this ImageAssets.
        :rtype: Thumbnail
        """
        return self._preview_1000

    @preview_1000.setter
    def preview_1000(self, preview_1000):
        """Sets the preview_1000 of this ImageAssets.


        :param preview_1000: The preview_1000 of this ImageAssets.
        :type preview_1000: Thumbnail
        """

        self._preview_1000 = preview_1000

    @property
    def preview_1500(self):
        """Gets the preview_1500 of this ImageAssets.


        :return: The preview_1500 of this ImageAssets.
        :rtype: Thumbnail
        """
        return self._preview_1500

    @preview_1500.setter
    def preview_1500(self, preview_1500):
        """Sets the preview_1500 of this ImageAssets.


        :param preview_1500: The preview_1500 of this ImageAssets.
        :type preview_1500: Thumbnail
        """

        self._preview_1500 = preview_1500

    @property
    def small_jpg(self):
        """Gets the small_jpg of this ImageAssets.


        :return: The small_jpg of this ImageAssets.
        :rtype: ImageSizeDetails
        """
        return self._small_jpg

    @small_jpg.setter
    def small_jpg(self, small_jpg):
        """Sets the small_jpg of this ImageAssets.


        :param small_jpg: The small_jpg of this ImageAssets.
        :type small_jpg: ImageSizeDetails
        """

        self._small_jpg = small_jpg

    @property
    def small_thumb(self):
        """Gets the small_thumb of this ImageAssets.


        :return: The small_thumb of this ImageAssets.
        :rtype: Thumbnail
        """
        return self._small_thumb

    @small_thumb.setter
    def small_thumb(self, small_thumb):
        """Sets the small_thumb of this ImageAssets.


        :param small_thumb: The small_thumb of this ImageAssets.
        :type small_thumb: Thumbnail
        """

        self._small_thumb = small_thumb

    @property
    def supersize_jpg(self):
        """Gets the supersize_jpg of this ImageAssets.


        :return: The supersize_jpg of this ImageAssets.
        :rtype: ImageSizeDetails
        """
        return self._supersize_jpg

    @supersize_jpg.setter
    def supersize_jpg(self, supersize_jpg):
        """Sets the supersize_jpg of this ImageAssets.


        :param supersize_jpg: The supersize_jpg of this ImageAssets.
        :type supersize_jpg: ImageSizeDetails
        """

        self._supersize_jpg = supersize_jpg

    @property
    def vector_eps(self):
        """Gets the vector_eps of this ImageAssets.


        :return: The vector_eps of this ImageAssets.
        :rtype: ImageSizeDetails
        """
        return self._vector_eps

    @vector_eps.setter
    def vector_eps(self, vector_eps):
        """Sets the vector_eps of this ImageAssets.


        :param vector_eps: The vector_eps of this ImageAssets.
        :type vector_eps: ImageSizeDetails
        """

        self._vector_eps = vector_eps
