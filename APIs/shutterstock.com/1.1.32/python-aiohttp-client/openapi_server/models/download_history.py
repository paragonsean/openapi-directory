# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.download_history_media_details import DownloadHistoryMediaDetails
from openapi_server.models.download_history_revshare_details import DownloadHistoryRevshareDetails
from openapi_server.models.download_history_user_details import DownloadHistoryUserDetails
from openapi_server import util


class DownloadHistory(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio: DownloadHistoryMediaDetails=None, download_time: datetime=None, id: str=None, image: DownloadHistoryMediaDetails=None, is_downloadable: bool=None, license: str=None, metadata: object=None, revshare: DownloadHistoryRevshareDetails=None, subscription_id: str=None, user: DownloadHistoryUserDetails=None, video: DownloadHistoryMediaDetails=None):
        """DownloadHistory - a model defined in OpenAPI

        :param audio: The audio of this DownloadHistory.
        :param download_time: The download_time of this DownloadHistory.
        :param id: The id of this DownloadHistory.
        :param image: The image of this DownloadHistory.
        :param is_downloadable: The is_downloadable of this DownloadHistory.
        :param license: The license of this DownloadHistory.
        :param metadata: The metadata of this DownloadHistory.
        :param revshare: The revshare of this DownloadHistory.
        :param subscription_id: The subscription_id of this DownloadHistory.
        :param user: The user of this DownloadHistory.
        :param video: The video of this DownloadHistory.
        """
        self.openapi_types = {
            'audio': DownloadHistoryMediaDetails,
            'download_time': datetime,
            'id': str,
            'image': DownloadHistoryMediaDetails,
            'is_downloadable': bool,
            'license': str,
            'metadata': object,
            'revshare': DownloadHistoryRevshareDetails,
            'subscription_id': str,
            'user': DownloadHistoryUserDetails,
            'video': DownloadHistoryMediaDetails
        }

        self.attribute_map = {
            'audio': 'audio',
            'download_time': 'download_time',
            'id': 'id',
            'image': 'image',
            'is_downloadable': 'is_downloadable',
            'license': 'license',
            'metadata': 'metadata',
            'revshare': 'revshare',
            'subscription_id': 'subscription_id',
            'user': 'user',
            'video': 'video'
        }

        self._audio = audio
        self._download_time = download_time
        self._id = id
        self._image = image
        self._is_downloadable = is_downloadable
        self._license = license
        self._metadata = metadata
        self._revshare = revshare
        self._subscription_id = subscription_id
        self._user = user
        self._video = video

    @classmethod
    def from_dict(cls, dikt: dict) -> 'DownloadHistory':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The DownloadHistory of this DownloadHistory.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio(self):
        """Gets the audio of this DownloadHistory.


        :return: The audio of this DownloadHistory.
        :rtype: DownloadHistoryMediaDetails
        """
        return self._audio

    @audio.setter
    def audio(self, audio):
        """Sets the audio of this DownloadHistory.


        :param audio: The audio of this DownloadHistory.
        :type audio: DownloadHistoryMediaDetails
        """

        self._audio = audio

    @property
    def download_time(self):
        """Gets the download_time of this DownloadHistory.

        Date the media was downloaded the first time

        :return: The download_time of this DownloadHistory.
        :rtype: datetime
        """
        return self._download_time

    @download_time.setter
    def download_time(self, download_time):
        """Sets the download_time of this DownloadHistory.

        Date the media was downloaded the first time

        :param download_time: The download_time of this DownloadHistory.
        :type download_time: datetime
        """
        if download_time is None:
            raise ValueError("Invalid value for `download_time`, must not be `None`")

        self._download_time = download_time

    @property
    def id(self):
        """Gets the id of this DownloadHistory.

        ID of the download

        :return: The id of this DownloadHistory.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DownloadHistory.

        ID of the download

        :param id: The id of this DownloadHistory.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def image(self):
        """Gets the image of this DownloadHistory.


        :return: The image of this DownloadHistory.
        :rtype: DownloadHistoryMediaDetails
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this DownloadHistory.


        :param image: The image of this DownloadHistory.
        :type image: DownloadHistoryMediaDetails
        """

        self._image = image

    @property
    def is_downloadable(self):
        """Gets the is_downloadable of this DownloadHistory.

        Specifies if the media is downloadable via its respective downloads endpoint

        :return: The is_downloadable of this DownloadHistory.
        :rtype: bool
        """
        return self._is_downloadable

    @is_downloadable.setter
    def is_downloadable(self, is_downloadable):
        """Sets the is_downloadable of this DownloadHistory.

        Specifies if the media is downloadable via its respective downloads endpoint

        :param is_downloadable: The is_downloadable of this DownloadHistory.
        :type is_downloadable: bool
        """

        self._is_downloadable = is_downloadable

    @property
    def license(self):
        """Gets the license of this DownloadHistory.

        The name of the license of this download

        :return: The license of this DownloadHistory.
        :rtype: str
        """
        return self._license

    @license.setter
    def license(self, license):
        """Sets the license of this DownloadHistory.

        The name of the license of this download

        :param license: The license of this DownloadHistory.
        :type license: str
        """
        if license is None:
            raise ValueError("Invalid value for `license`, must not be `None`")

        self._license = license

    @property
    def metadata(self):
        """Gets the metadata of this DownloadHistory.

        The metadata that was passed in the original licensing request

        :return: The metadata of this DownloadHistory.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DownloadHistory.

        The metadata that was passed in the original licensing request

        :param metadata: The metadata of this DownloadHistory.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def revshare(self):
        """Gets the revshare of this DownloadHistory.


        :return: The revshare of this DownloadHistory.
        :rtype: DownloadHistoryRevshareDetails
        """
        return self._revshare

    @revshare.setter
    def revshare(self, revshare):
        """Sets the revshare of this DownloadHistory.


        :param revshare: The revshare of this DownloadHistory.
        :type revshare: DownloadHistoryRevshareDetails
        """

        self._revshare = revshare

    @property
    def subscription_id(self):
        """Gets the subscription_id of this DownloadHistory.

        ID of the subscription used to perform this download

        :return: The subscription_id of this DownloadHistory.
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this DownloadHistory.

        ID of the subscription used to perform this download

        :param subscription_id: The subscription_id of this DownloadHistory.
        :type subscription_id: str
        """

        self._subscription_id = subscription_id

    @property
    def user(self):
        """Gets the user of this DownloadHistory.


        :return: The user of this DownloadHistory.
        :rtype: DownloadHistoryUserDetails
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DownloadHistory.


        :param user: The user of this DownloadHistory.
        :type user: DownloadHistoryUserDetails
        """

        self._user = user

    @property
    def video(self):
        """Gets the video of this DownloadHistory.


        :return: The video of this DownloadHistory.
        :rtype: DownloadHistoryMediaDetails
        """
        return self._video

    @video.setter
    def video(self, video):
        """Sets the video of this DownloadHistory.


        :param video: The video of this DownloadHistory.
        :type video: DownloadHistoryMediaDetails
        """

        self._video = video
