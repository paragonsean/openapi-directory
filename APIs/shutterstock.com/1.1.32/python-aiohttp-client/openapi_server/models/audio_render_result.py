# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_render_timeline import AudioRenderTimeline
from openapi_server.models.audio_renders_files_list import AudioRendersFilesList
from openapi_server import util


class AudioRenderResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date: datetime=None, files: List[AudioRendersFilesList]=None, id: str=None, preset: str=None, progress_percent: int=None, status: str=None, timeline: AudioRenderTimeline=None, updated_date: datetime=None):
        """AudioRenderResult - a model defined in OpenAPI

        :param created_date: The created_date of this AudioRenderResult.
        :param files: The files of this AudioRenderResult.
        :param id: The id of this AudioRenderResult.
        :param preset: The preset of this AudioRenderResult.
        :param progress_percent: The progress_percent of this AudioRenderResult.
        :param status: The status of this AudioRenderResult.
        :param timeline: The timeline of this AudioRenderResult.
        :param updated_date: The updated_date of this AudioRenderResult.
        """
        self.openapi_types = {
            'created_date': datetime,
            'files': List[AudioRendersFilesList],
            'id': str,
            'preset': str,
            'progress_percent': int,
            'status': str,
            'timeline': AudioRenderTimeline,
            'updated_date': datetime
        }

        self.attribute_map = {
            'created_date': 'created_date',
            'files': 'files',
            'id': 'id',
            'preset': 'preset',
            'progress_percent': 'progress_percent',
            'status': 'status',
            'timeline': 'timeline',
            'updated_date': 'updated_date'
        }

        self._created_date = created_date
        self._files = files
        self._id = id
        self._preset = preset
        self._progress_percent = progress_percent
        self._status = status
        self._timeline = timeline
        self._updated_date = updated_date

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderResult of this AudioRenderResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self):
        """Gets the created_date of this AudioRenderResult.

        The time the render was submitted to the API

        :return: The created_date of this AudioRenderResult.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date):
        """Sets the created_date of this AudioRenderResult.

        The time the render was submitted to the API

        :param created_date: The created_date of this AudioRenderResult.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def files(self):
        """Gets the files of this AudioRenderResult.

        The files associated with the render

        :return: The files of this AudioRenderResult.
        :rtype: List[AudioRendersFilesList]
        """
        return self._files

    @files.setter
    def files(self, files):
        """Sets the files of this AudioRenderResult.

        The files associated with the render

        :param files: The files of this AudioRenderResult.
        :type files: List[AudioRendersFilesList]
        """

        self._files = files

    @property
    def id(self):
        """Gets the id of this AudioRenderResult.

        The alphanumeric ID of the simple render

        :return: The id of this AudioRenderResult.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioRenderResult.

        The alphanumeric ID of the simple render

        :param id: The id of this AudioRenderResult.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def preset(self):
        """Gets the preset of this AudioRenderResult.

        The file format preset

        :return: The preset of this AudioRenderResult.
        :rtype: str
        """
        return self._preset

    @preset.setter
    def preset(self, preset):
        """Sets the preset of this AudioRenderResult.

        The file format preset

        :param preset: The preset of this AudioRenderResult.
        :type preset: str
        """
        allowed_values = ["MASTER_MP3", "MASTER_WAV", "STEMS_WAV"]  # noqa: E501
        if preset not in allowed_values:
            raise ValueError(
                "Invalid value for `preset` ({0}), must be one of {1}"
                .format(preset, allowed_values)
            )

        self._preset = preset

    @property
    def progress_percent(self):
        """Gets the progress_percent of this AudioRenderResult.

        The current progress of the render as a percentage

        :return: The progress_percent of this AudioRenderResult.
        :rtype: int
        """
        return self._progress_percent

    @progress_percent.setter
    def progress_percent(self, progress_percent):
        """Sets the progress_percent of this AudioRenderResult.

        The current progress of the render as a percentage

        :param progress_percent: The progress_percent of this AudioRenderResult.
        :type progress_percent: int
        """

        self._progress_percent = progress_percent

    @property
    def status(self):
        """Gets the status of this AudioRenderResult.

        A coarse progress indicator

        :return: The status of this AudioRenderResult.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this AudioRenderResult.

        A coarse progress indicator

        :param status: The status of this AudioRenderResult.
        :type status: str
        """
        allowed_values = ["WAITING_COMPOSE", "RUNNING_COMPOSE", "WAITING_RENDER", "RUNNING_RENDER", "CREATED", "FAILED_CREATE"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def timeline(self):
        """Gets the timeline of this AudioRenderResult.


        :return: The timeline of this AudioRenderResult.
        :rtype: AudioRenderTimeline
        """
        return self._timeline

    @timeline.setter
    def timeline(self, timeline):
        """Sets the timeline of this AudioRenderResult.


        :param timeline: The timeline of this AudioRenderResult.
        :type timeline: AudioRenderTimeline
        """
        if timeline is None:
            raise ValueError("Invalid value for `timeline`, must not be `None`")

        self._timeline = timeline

    @property
    def updated_date(self):
        """Gets the updated_date of this AudioRenderResult.

        The time that the audio output was uploaded

        :return: The updated_date of this AudioRenderResult.
        :rtype: datetime
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date):
        """Sets the updated_date of this AudioRenderResult.

        The time that the audio output was uploaded

        :param updated_date: The updated_date of this AudioRenderResult.
        :type updated_date: datetime
        """

        self._updated_date = updated_date
