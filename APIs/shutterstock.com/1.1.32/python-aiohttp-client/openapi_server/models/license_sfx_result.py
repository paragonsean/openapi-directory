# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.url import Url
from openapi_server import util


class LicenseSFXResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allotment_charge: int=None, download: Url=None, error: str=None, license_id: str=None, sfx_id: str=None):
        """LicenseSFXResult - a model defined in OpenAPI

        :param allotment_charge: The allotment_charge of this LicenseSFXResult.
        :param download: The download of this LicenseSFXResult.
        :param error: The error of this LicenseSFXResult.
        :param license_id: The license_id of this LicenseSFXResult.
        :param sfx_id: The sfx_id of this LicenseSFXResult.
        """
        self.openapi_types = {
            'allotment_charge': int,
            'download': Url,
            'error': str,
            'license_id': str,
            'sfx_id': str
        }

        self.attribute_map = {
            'allotment_charge': 'allotment_charge',
            'download': 'download',
            'error': 'error',
            'license_id': 'license_id',
            'sfx_id': 'sfx_id'
        }

        self._allotment_charge = allotment_charge
        self._download = download
        self._error = error
        self._license_id = license_id
        self._sfx_id = sfx_id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'LicenseSFXResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The LicenseSFXResult of this LicenseSFXResult.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allotment_charge(self):
        """Gets the allotment_charge of this LicenseSFXResult.

        Number of credits that this licensing event used

        :return: The allotment_charge of this LicenseSFXResult.
        :rtype: int
        """
        return self._allotment_charge

    @allotment_charge.setter
    def allotment_charge(self, allotment_charge):
        """Sets the allotment_charge of this LicenseSFXResult.

        Number of credits that this licensing event used

        :param allotment_charge: The allotment_charge of this LicenseSFXResult.
        :type allotment_charge: int
        """

        self._allotment_charge = allotment_charge

    @property
    def download(self):
        """Gets the download of this LicenseSFXResult.


        :return: The download of this LicenseSFXResult.
        :rtype: Url
        """
        return self._download

    @download.setter
    def download(self, download):
        """Sets the download of this LicenseSFXResult.


        :param download: The download of this LicenseSFXResult.
        :type download: Url
        """

        self._download = download

    @property
    def error(self):
        """Gets the error of this LicenseSFXResult.

        Error message, appears only if there was an error

        :return: The error of this LicenseSFXResult.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this LicenseSFXResult.

        Error message, appears only if there was an error

        :param error: The error of this LicenseSFXResult.
        :type error: str
        """

        self._error = error

    @property
    def license_id(self):
        """Gets the license_id of this LicenseSFXResult.

        ID of the license event

        :return: The license_id of this LicenseSFXResult.
        :rtype: str
        """
        return self._license_id

    @license_id.setter
    def license_id(self, license_id):
        """Sets the license_id of this LicenseSFXResult.

        ID of the license event

        :param license_id: The license_id of this LicenseSFXResult.
        :type license_id: str
        """

        self._license_id = license_id

    @property
    def sfx_id(self):
        """Gets the sfx_id of this LicenseSFXResult.

        Sound effects ID that was licensed

        :return: The sfx_id of this LicenseSFXResult.
        :rtype: str
        """
        return self._sfx_id

    @sfx_id.setter
    def sfx_id(self, sfx_id):
        """Sets the sfx_id of this LicenseSFXResult.

        Sound effects ID that was licensed

        :param sfx_id: The sfx_id of this LicenseSFXResult.
        :type sfx_id: str
        """
        if sfx_id is None:
            raise ValueError("Invalid value for `sfx_id`, must not be `None`")

        self._sfx_id = sfx_id
