# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class UserDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contributor_id: str=None, customer_id: str=None, email: str=None, first_name: str=None, full_name: str=None, id: str=None, is_premier: bool=None, is_premier_parent: bool=None, language: str=None, last_name: str=None, only_enhanced_license: bool=None, only_sensitive_use: bool=None, organization_id: str=None, premier_permissions: List[str]=None, username: str=None):
        """UserDetails - a model defined in OpenAPI

        :param contributor_id: The contributor_id of this UserDetails.
        :param customer_id: The customer_id of this UserDetails.
        :param email: The email of this UserDetails.
        :param first_name: The first_name of this UserDetails.
        :param full_name: The full_name of this UserDetails.
        :param id: The id of this UserDetails.
        :param is_premier: The is_premier of this UserDetails.
        :param is_premier_parent: The is_premier_parent of this UserDetails.
        :param language: The language of this UserDetails.
        :param last_name: The last_name of this UserDetails.
        :param only_enhanced_license: The only_enhanced_license of this UserDetails.
        :param only_sensitive_use: The only_sensitive_use of this UserDetails.
        :param organization_id: The organization_id of this UserDetails.
        :param premier_permissions: The premier_permissions of this UserDetails.
        :param username: The username of this UserDetails.
        """
        self.openapi_types = {
            'contributor_id': str,
            'customer_id': str,
            'email': str,
            'first_name': str,
            'full_name': str,
            'id': str,
            'is_premier': bool,
            'is_premier_parent': bool,
            'language': str,
            'last_name': str,
            'only_enhanced_license': bool,
            'only_sensitive_use': bool,
            'organization_id': str,
            'premier_permissions': List[str],
            'username': str
        }

        self.attribute_map = {
            'contributor_id': 'contributor_id',
            'customer_id': 'customer_id',
            'email': 'email',
            'first_name': 'first_name',
            'full_name': 'full_name',
            'id': 'id',
            'is_premier': 'is_premier',
            'is_premier_parent': 'is_premier_parent',
            'language': 'language',
            'last_name': 'last_name',
            'only_enhanced_license': 'only_enhanced_license',
            'only_sensitive_use': 'only_sensitive_use',
            'organization_id': 'organization_id',
            'premier_permissions': 'premier_permissions',
            'username': 'username'
        }

        self._contributor_id = contributor_id
        self._customer_id = customer_id
        self._email = email
        self._first_name = first_name
        self._full_name = full_name
        self._id = id
        self._is_premier = is_premier
        self._is_premier_parent = is_premier_parent
        self._language = language
        self._last_name = last_name
        self._only_enhanced_license = only_enhanced_license
        self._only_sensitive_use = only_sensitive_use
        self._organization_id = organization_id
        self._premier_permissions = premier_permissions
        self._username = username

    @classmethod
    def from_dict(cls, dikt: dict) -> 'UserDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The UserDetails of this UserDetails.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contributor_id(self):
        """Gets the contributor_id of this UserDetails.

        Unique internal identifier of the user, as a contributor

        :return: The contributor_id of this UserDetails.
        :rtype: str
        """
        return self._contributor_id

    @contributor_id.setter
    def contributor_id(self, contributor_id):
        """Sets the contributor_id of this UserDetails.

        Unique internal identifier of the user, as a contributor

        :param contributor_id: The contributor_id of this UserDetails.
        :type contributor_id: str
        """

        self._contributor_id = contributor_id

    @property
    def customer_id(self):
        """Gets the customer_id of this UserDetails.

        Unique internal identifier of the user, as a purchaser

        :return: The customer_id of this UserDetails.
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this UserDetails.

        Unique internal identifier of the user, as a purchaser

        :param customer_id: The customer_id of this UserDetails.
        :type customer_id: str
        """

        self._customer_id = customer_id

    @property
    def email(self):
        """Gets the email of this UserDetails.

        Email address of the user

        :return: The email of this UserDetails.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this UserDetails.

        Email address of the user

        :param email: The email of this UserDetails.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this UserDetails.

        First name of the user

        :return: The first_name of this UserDetails.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this UserDetails.

        First name of the user

        :param first_name: The first_name of this UserDetails.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def full_name(self):
        """Gets the full_name of this UserDetails.

        Full name including first, middle, and last name of the user

        :return: The full_name of this UserDetails.
        :rtype: str
        """
        return self._full_name

    @full_name.setter
    def full_name(self, full_name):
        """Sets the full_name of this UserDetails.

        Full name including first, middle, and last name of the user

        :param full_name: The full_name of this UserDetails.
        :type full_name: str
        """

        self._full_name = full_name

    @property
    def id(self):
        """Gets the id of this UserDetails.

        Unique internal identifier for the user, not tied to contributor or purchasing customer

        :return: The id of this UserDetails.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UserDetails.

        Unique internal identifier for the user, not tied to contributor or purchasing customer

        :param id: The id of this UserDetails.
        :type id: str
        """

        self._id = id

    @property
    def is_premier(self):
        """Gets the is_premier of this UserDetails.

        True if the user has access to the Premier collection, false otherwise

        :return: The is_premier of this UserDetails.
        :rtype: bool
        """
        return self._is_premier

    @is_premier.setter
    def is_premier(self, is_premier):
        """Sets the is_premier of this UserDetails.

        True if the user has access to the Premier collection, false otherwise

        :param is_premier: The is_premier of this UserDetails.
        :type is_premier: bool
        """

        self._is_premier = is_premier

    @property
    def is_premier_parent(self):
        """Gets the is_premier_parent of this UserDetails.

        True if the user has access to the Premier collection and also has child users

        :return: The is_premier_parent of this UserDetails.
        :rtype: bool
        """
        return self._is_premier_parent

    @is_premier_parent.setter
    def is_premier_parent(self, is_premier_parent):
        """Sets the is_premier_parent of this UserDetails.

        True if the user has access to the Premier collection and also has child users

        :param is_premier_parent: The is_premier_parent of this UserDetails.
        :type is_premier_parent: bool
        """

        self._is_premier_parent = is_premier_parent

    @property
    def language(self):
        """Gets the language of this UserDetails.

        Main language of the user account

        :return: The language of this UserDetails.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this UserDetails.

        Main language of the user account

        :param language: The language of this UserDetails.
        :type language: str
        """

        self._language = language

    @property
    def last_name(self):
        """Gets the last_name of this UserDetails.

        Last name of the user

        :return: The last_name of this UserDetails.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this UserDetails.

        Last name of the user

        :param last_name: The last_name of this UserDetails.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def only_enhanced_license(self):
        """Gets the only_enhanced_license of this UserDetails.

        True if the user has an enterprise license, false otherwise

        :return: The only_enhanced_license of this UserDetails.
        :rtype: bool
        """
        return self._only_enhanced_license

    @only_enhanced_license.setter
    def only_enhanced_license(self, only_enhanced_license):
        """Sets the only_enhanced_license of this UserDetails.

        True if the user has an enterprise license, false otherwise

        :param only_enhanced_license: The only_enhanced_license of this UserDetails.
        :type only_enhanced_license: bool
        """

        self._only_enhanced_license = only_enhanced_license

    @property
    def only_sensitive_use(self):
        """Gets the only_sensitive_use of this UserDetails.

        True if the user has access to sensitive use only, false otherwise

        :return: The only_sensitive_use of this UserDetails.
        :rtype: bool
        """
        return self._only_sensitive_use

    @only_sensitive_use.setter
    def only_sensitive_use(self, only_sensitive_use):
        """Sets the only_sensitive_use of this UserDetails.

        True if the user has access to sensitive use only, false otherwise

        :param only_sensitive_use: The only_sensitive_use of this UserDetails.
        :type only_sensitive_use: bool
        """

        self._only_sensitive_use = only_sensitive_use

    @property
    def organization_id(self):
        """Gets the organization_id of this UserDetails.

        Unique internal identifier for the user's organization, specific to Premier users

        :return: The organization_id of this UserDetails.
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this UserDetails.

        Unique internal identifier for the user's organization, specific to Premier users

        :param organization_id: The organization_id of this UserDetails.
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def premier_permissions(self):
        """Gets the premier_permissions of this UserDetails.

        List of permissions allowed through the Premier client

        :return: The premier_permissions of this UserDetails.
        :rtype: List[str]
        """
        return self._premier_permissions

    @premier_permissions.setter
    def premier_permissions(self, premier_permissions):
        """Sets the premier_permissions of this UserDetails.

        List of permissions allowed through the Premier client

        :param premier_permissions: The premier_permissions of this UserDetails.
        :type premier_permissions: List[str]
        """

        self._premier_permissions = premier_permissions

    @property
    def username(self):
        """Gets the username of this UserDetails.

        User name associated to the user

        :return: The username of this UserDetails.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username):
        """Sets the username of this UserDetails.

        User name associated to the user

        :param username: The username of this UserDetails.
        :type username: str
        """

        self._username = username
