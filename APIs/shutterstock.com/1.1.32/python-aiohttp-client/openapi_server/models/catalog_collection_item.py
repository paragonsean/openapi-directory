# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.catalog_collection_item_asset import CatalogCollectionItemAsset
from openapi_server import util


class CatalogCollectionItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, asset: CatalogCollectionItemAsset=None, collection_ids: List[str]=None, created_time: datetime=None, id: str=None):
        """CatalogCollectionItem - a model defined in OpenAPI

        :param asset: The asset of this CatalogCollectionItem.
        :param collection_ids: The collection_ids of this CatalogCollectionItem.
        :param created_time: The created_time of this CatalogCollectionItem.
        :param id: The id of this CatalogCollectionItem.
        """
        self.openapi_types = {
            'asset': CatalogCollectionItemAsset,
            'collection_ids': List[str],
            'created_time': datetime,
            'id': str
        }

        self.attribute_map = {
            'asset': 'asset',
            'collection_ids': 'collection_ids',
            'created_time': 'created_time',
            'id': 'id'
        }

        self._asset = asset
        self._collection_ids = collection_ids
        self._created_time = created_time
        self._id = id

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CatalogCollectionItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The CatalogCollectionItem of this CatalogCollectionItem.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def asset(self):
        """Gets the asset of this CatalogCollectionItem.


        :return: The asset of this CatalogCollectionItem.
        :rtype: CatalogCollectionItemAsset
        """
        return self._asset

    @asset.setter
    def asset(self, asset):
        """Sets the asset of this CatalogCollectionItem.


        :param asset: The asset of this CatalogCollectionItem.
        :type asset: CatalogCollectionItemAsset
        """
        if asset is None:
            raise ValueError("Invalid value for `asset`, must not be `None`")

        self._asset = asset

    @property
    def collection_ids(self):
        """Gets the collection_ids of this CatalogCollectionItem.

        The collection IDs that this asset belongs to

        :return: The collection_ids of this CatalogCollectionItem.
        :rtype: List[str]
        """
        return self._collection_ids

    @collection_ids.setter
    def collection_ids(self, collection_ids):
        """Sets the collection_ids of this CatalogCollectionItem.

        The collection IDs that this asset belongs to

        :param collection_ids: The collection_ids of this CatalogCollectionItem.
        :type collection_ids: List[str]
        """

        self._collection_ids = collection_ids

    @property
    def created_time(self):
        """Gets the created_time of this CatalogCollectionItem.


        :return: The created_time of this CatalogCollectionItem.
        :rtype: datetime
        """
        return self._created_time

    @created_time.setter
    def created_time(self, created_time):
        """Sets the created_time of this CatalogCollectionItem.


        :param created_time: The created_time of this CatalogCollectionItem.
        :type created_time: datetime
        """
        if created_time is None:
            raise ValueError("Invalid value for `created_time`, must not be `None`")

        self._created_time = created_time

    @property
    def id(self):
        """Gets the id of this CatalogCollectionItem.


        :return: The id of this CatalogCollectionItem.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CatalogCollectionItem.


        :param id: The id of this CatalogCollectionItem.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id
