# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.audio_render_timeline_span_region_end_type import AudioRenderTimelineSpanRegionEndType
from openapi_server.models.audio_render_timeline_span_region_key import AudioRenderTimelineSpanRegionKey
from openapi_server import util


class AudioRenderTimelineSpanRegion(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beat: int=None, descriptor: str=None, end_type: AudioRenderTimelineSpanRegionEndType=None, id: float=None, key: AudioRenderTimelineSpanRegionKey=None, region: str=None):
        """AudioRenderTimelineSpanRegion - a model defined in OpenAPI

        :param beat: The beat of this AudioRenderTimelineSpanRegion.
        :param descriptor: The descriptor of this AudioRenderTimelineSpanRegion.
        :param end_type: The end_type of this AudioRenderTimelineSpanRegion.
        :param id: The id of this AudioRenderTimelineSpanRegion.
        :param key: The key of this AudioRenderTimelineSpanRegion.
        :param region: The region of this AudioRenderTimelineSpanRegion.
        """
        self.openapi_types = {
            'beat': int,
            'descriptor': str,
            'end_type': AudioRenderTimelineSpanRegionEndType,
            'id': float,
            'key': AudioRenderTimelineSpanRegionKey,
            'region': str
        }

        self.attribute_map = {
            'beat': 'beat',
            'descriptor': 'descriptor',
            'end_type': 'end_type',
            'id': 'id',
            'key': 'key',
            'region': 'region'
        }

        self._beat = beat
        self._descriptor = descriptor
        self._end_type = end_type
        self._id = id
        self._key = key
        self._region = region

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpanRegion':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpanRegion of this AudioRenderTimelineSpanRegion.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beat(self):
        """Gets the beat of this AudioRenderTimelineSpanRegion.

        The beat, relative to the span, at which the region object's music begins

        :return: The beat of this AudioRenderTimelineSpanRegion.
        :rtype: int
        """
        return self._beat

    @beat.setter
    def beat(self, beat):
        """Sets the beat of this AudioRenderTimelineSpanRegion.

        The beat, relative to the span, at which the region object's music begins

        :param beat: The beat of this AudioRenderTimelineSpanRegion.
        :type beat: int
        """
        if beat is None:
            raise ValueError("Invalid value for `beat`, must not be `None`")

        self._beat = beat

    @property
    def descriptor(self):
        """Gets the descriptor of this AudioRenderTimelineSpanRegion.

        The descriptor ID needed to compose the music

        :return: The descriptor of this AudioRenderTimelineSpanRegion.
        :rtype: str
        """
        return self._descriptor

    @descriptor.setter
    def descriptor(self, descriptor):
        """Sets the descriptor of this AudioRenderTimelineSpanRegion.

        The descriptor ID needed to compose the music

        :param descriptor: The descriptor of this AudioRenderTimelineSpanRegion.
        :type descriptor: str
        """
        if descriptor is None:
            raise ValueError("Invalid value for `descriptor`, must not be `None`")

        self._descriptor = descriptor

    @property
    def end_type(self):
        """Gets the end_type of this AudioRenderTimelineSpanRegion.


        :return: The end_type of this AudioRenderTimelineSpanRegion.
        :rtype: AudioRenderTimelineSpanRegionEndType
        """
        return self._end_type

    @end_type.setter
    def end_type(self, end_type):
        """Sets the end_type of this AudioRenderTimelineSpanRegion.


        :param end_type: The end_type of this AudioRenderTimelineSpanRegion.
        :type end_type: AudioRenderTimelineSpanRegionEndType
        """

        self._end_type = end_type

    @property
    def id(self):
        """Gets the id of this AudioRenderTimelineSpanRegion.

        An identifier which must be unique within the parent span

        :return: The id of this AudioRenderTimelineSpanRegion.
        :rtype: float
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this AudioRenderTimelineSpanRegion.

        An identifier which must be unique within the parent span

        :param id: The id of this AudioRenderTimelineSpanRegion.
        :type id: float
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def key(self):
        """Gets the key of this AudioRenderTimelineSpanRegion.


        :return: The key of this AudioRenderTimelineSpanRegion.
        :rtype: AudioRenderTimelineSpanRegionKey
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this AudioRenderTimelineSpanRegion.


        :param key: The key of this AudioRenderTimelineSpanRegion.
        :type key: AudioRenderTimelineSpanRegionKey
        """

        self._key = key

    @property
    def region(self):
        """Gets the region of this AudioRenderTimelineSpanRegion.

        The type of region

        :return: The region of this AudioRenderTimelineSpanRegion.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this AudioRenderTimelineSpanRegion.

        The type of region

        :param region: The region of this AudioRenderTimelineSpanRegion.
        :type region: str
        """
        allowed_values = ["music", "silence"]  # noqa: E501
        if region not in allowed_values:
            raise ValueError(
                "Invalid value for `region` ({0}), must be one of {1}"
                .format(region, allowed_values)
            )

        self._region = region
