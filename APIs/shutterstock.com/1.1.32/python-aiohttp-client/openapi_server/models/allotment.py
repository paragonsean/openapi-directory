# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Allotment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, downloads_left: int=None, downloads_limit: int=None, end_time: datetime=None, start_time: datetime=None):
        """Allotment - a model defined in OpenAPI

        :param downloads_left: The downloads_left of this Allotment.
        :param downloads_limit: The downloads_limit of this Allotment.
        :param end_time: The end_time of this Allotment.
        :param start_time: The start_time of this Allotment.
        """
        self.openapi_types = {
            'downloads_left': int,
            'downloads_limit': int,
            'end_time': datetime,
            'start_time': datetime
        }

        self.attribute_map = {
            'downloads_left': 'downloads_left',
            'downloads_limit': 'downloads_limit',
            'end_time': 'end_time',
            'start_time': 'start_time'
        }

        self._downloads_left = downloads_left
        self._downloads_limit = downloads_limit
        self._end_time = end_time
        self._start_time = start_time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Allotment':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Allotment of this Allotment.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def downloads_left(self):
        """Gets the downloads_left of this Allotment.

        Number of credits remaining in the subscription

        :return: The downloads_left of this Allotment.
        :rtype: int
        """
        return self._downloads_left

    @downloads_left.setter
    def downloads_left(self, downloads_left):
        """Sets the downloads_left of this Allotment.

        Number of credits remaining in the subscription

        :param downloads_left: The downloads_left of this Allotment.
        :type downloads_left: int
        """

        self._downloads_left = downloads_left

    @property
    def downloads_limit(self):
        """Gets the downloads_limit of this Allotment.

        Total number of credits available to this subscription

        :return: The downloads_limit of this Allotment.
        :rtype: int
        """
        return self._downloads_limit

    @downloads_limit.setter
    def downloads_limit(self, downloads_limit):
        """Sets the downloads_limit of this Allotment.

        Total number of credits available to this subscription

        :param downloads_limit: The downloads_limit of this Allotment.
        :type downloads_limit: int
        """

        self._downloads_limit = downloads_limit

    @property
    def end_time(self):
        """Gets the end_time of this Allotment.

        Date the subscription ends

        :return: The end_time of this Allotment.
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this Allotment.

        Date the subscription ends

        :param end_time: The end_time of this Allotment.
        :type end_time: datetime
        """

        self._end_time = end_time

    @property
    def start_time(self):
        """Gets the start_time of this Allotment.

        Date the subscription started

        :return: The start_time of this Allotment.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time):
        """Sets the start_time of this Allotment.

        Date the subscription started

        :param start_time: The start_time of this Allotment.
        :type start_time: datetime
        """

        self._start_time = start_time
