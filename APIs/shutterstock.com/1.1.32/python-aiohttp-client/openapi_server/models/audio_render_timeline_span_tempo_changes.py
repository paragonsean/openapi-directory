# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class AudioRenderTimelineSpanTempoChanges(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, tempo: float=None, time: float=None):
        """AudioRenderTimelineSpanTempoChanges - a model defined in OpenAPI

        :param tempo: The tempo of this AudioRenderTimelineSpanTempoChanges.
        :param time: The time of this AudioRenderTimelineSpanTempoChanges.
        """
        self.openapi_types = {
            'tempo': float,
            'time': float
        }

        self.attribute_map = {
            'tempo': 'tempo',
            'time': 'time'
        }

        self._tempo = tempo
        self._time = time

    @classmethod
    def from_dict(cls, dikt: dict) -> 'AudioRenderTimelineSpanTempoChanges':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The AudioRenderTimelineSpanTempoChanges of this AudioRenderTimelineSpanTempoChanges.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def tempo(self):
        """Gets the tempo of this AudioRenderTimelineSpanTempoChanges.

        The tempo, in beats per minute, active at this time

        :return: The tempo of this AudioRenderTimelineSpanTempoChanges.
        :rtype: float
        """
        return self._tempo

    @tempo.setter
    def tempo(self, tempo):
        """Sets the tempo of this AudioRenderTimelineSpanTempoChanges.

        The tempo, in beats per minute, active at this time

        :param tempo: The tempo of this AudioRenderTimelineSpanTempoChanges.
        :type tempo: float
        """
        if tempo is None:
            raise ValueError("Invalid value for `tempo`, must not be `None`")

        self._tempo = tempo

    @property
    def time(self):
        """Gets the time of this AudioRenderTimelineSpanTempoChanges.

        The time, in seconds, at which the tempo exists

        :return: The time of this AudioRenderTimelineSpanTempoChanges.
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this AudioRenderTimelineSpanTempoChanges.

        The time, in seconds, at which the tempo exists

        :param time: The time of this AudioRenderTimelineSpanTempoChanges.
        :type time: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")

        self._time = time
