# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.calculate_reachable_range_post_data_parameters_avoid_areas import CalculateReachableRangePostDataParametersAvoidAreas
from openapi_server import util


class CalculateReachableRangePostDataParameters(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_vignette: List[str]=None, avoid_areas: CalculateReachableRangePostDataParametersAvoidAreas=None, avoid_vignette: List[str]=None):
        """CalculateReachableRangePostDataParameters - a model defined in OpenAPI

        :param allow_vignette: The allow_vignette of this CalculateReachableRangePostDataParameters.
        :param avoid_areas: The avoid_areas of this CalculateReachableRangePostDataParameters.
        :param avoid_vignette: The avoid_vignette of this CalculateReachableRangePostDataParameters.
        """
        self.openapi_types = {
            'allow_vignette': List[str],
            'avoid_areas': CalculateReachableRangePostDataParametersAvoidAreas,
            'avoid_vignette': List[str]
        }

        self.attribute_map = {
            'allow_vignette': 'allowVignette',
            'avoid_areas': 'avoidAreas',
            'avoid_vignette': 'avoidVignette'
        }

        self._allow_vignette = allow_vignette
        self._avoid_areas = avoid_areas
        self._avoid_vignette = avoid_vignette

    @classmethod
    def from_dict(cls, dikt: dict) -> 'CalculateReachableRangePostDataParameters':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The calculateReachableRangePostDataParameters of this CalculateReachableRangePostDataParameters.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_vignette(self):
        """Gets the allow_vignette of this CalculateReachableRangePostDataParameters.


        :return: The allow_vignette of this CalculateReachableRangePostDataParameters.
        :rtype: List[str]
        """
        return self._allow_vignette

    @allow_vignette.setter
    def allow_vignette(self, allow_vignette):
        """Sets the allow_vignette of this CalculateReachableRangePostDataParameters.


        :param allow_vignette: The allow_vignette of this CalculateReachableRangePostDataParameters.
        :type allow_vignette: List[str]
        """

        self._allow_vignette = allow_vignette

    @property
    def avoid_areas(self):
        """Gets the avoid_areas of this CalculateReachableRangePostDataParameters.


        :return: The avoid_areas of this CalculateReachableRangePostDataParameters.
        :rtype: CalculateReachableRangePostDataParametersAvoidAreas
        """
        return self._avoid_areas

    @avoid_areas.setter
    def avoid_areas(self, avoid_areas):
        """Sets the avoid_areas of this CalculateReachableRangePostDataParameters.


        :param avoid_areas: The avoid_areas of this CalculateReachableRangePostDataParameters.
        :type avoid_areas: CalculateReachableRangePostDataParametersAvoidAreas
        """

        self._avoid_areas = avoid_areas

    @property
    def avoid_vignette(self):
        """Gets the avoid_vignette of this CalculateReachableRangePostDataParameters.


        :return: The avoid_vignette of this CalculateReachableRangePostDataParameters.
        :rtype: List[str]
        """
        return self._avoid_vignette

    @avoid_vignette.setter
    def avoid_vignette(self, avoid_vignette):
        """Sets the avoid_vignette of this CalculateReachableRangePostDataParameters.


        :param avoid_vignette: The avoid_vignette of this CalculateReachableRangePostDataParameters.
        :type avoid_vignette: List[str]
        """

        self._avoid_vignette = avoid_vignette
