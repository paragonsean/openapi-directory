/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIRoutingApi.h"
#include "OAIServerConfiguration.h"
#include <QJsonArray>
#include <QJsonDocument>

namespace OpenAPI {

OAIRoutingApi::OAIRoutingApi(const int timeOut)
    : _timeOut(timeOut),
      _manager(nullptr),
      _isResponseCompressionEnabled(false),
      _isRequestCompressionEnabled(false) {
    initializeServerConfigs();
}

OAIRoutingApi::~OAIRoutingApi() {
}

void OAIRoutingApi::initializeServerConfigs() {
    //Default server
    QList<OAIServerConfiguration> defaultConf = QList<OAIServerConfiguration>();
    //varying endpoint server
    defaultConf.append(OAIServerConfiguration(
    QUrl("https://api.tomtom.com"),
    "No description provided",
    QMap<QString, OAIServerVariable>()));
    _serverConfigs.insert("routingVersionNumberCalculateReachableRangeOriginContentTypeGet", defaultConf);
    _serverIndices.insert("routingVersionNumberCalculateReachableRangeOriginContentTypeGet", 0);
    _serverConfigs.insert("routingVersionNumberCalculateReachableRangeOriginContentTypePost", defaultConf);
    _serverIndices.insert("routingVersionNumberCalculateReachableRangeOriginContentTypePost", 0);
    _serverConfigs.insert("routingVersionNumberCalculateRouteLocationsContentTypeGet", defaultConf);
    _serverIndices.insert("routingVersionNumberCalculateRouteLocationsContentTypeGet", 0);
    _serverConfigs.insert("routingVersionNumberCalculateRouteLocationsContentTypePost", defaultConf);
    _serverIndices.insert("routingVersionNumberCalculateRouteLocationsContentTypePost", 0);
}

/**
* returns 0 on success and -1, -2 or -3 on failure.
* -1 when the variable does not exist and -2 if the value is not defined in the enum and -3 if the operation or server index is not found
*/
int OAIRoutingApi::setDefaultServerValue(int serverIndex, const QString &operation, const QString &variable, const QString &value) {
    auto it = _serverConfigs.find(operation);
    if (it != _serverConfigs.end() && serverIndex < it.value().size()) {
      return _serverConfigs[operation][serverIndex].setDefaultValue(variable,value);
    }
    return -3;
}
void OAIRoutingApi::setServerIndex(const QString &operation, int serverIndex) {
    if (_serverIndices.contains(operation) && serverIndex < _serverConfigs.find(operation).value().size()) {
        _serverIndices[operation] = serverIndex;
    }
}

void OAIRoutingApi::setApiKey(const QString &apiKeyName, const QString &apiKey) {
    _apiKeys.insert(apiKeyName, apiKey);
}

void OAIRoutingApi::setBearerToken(const QString &token) {
    _bearerToken = token;
}

void OAIRoutingApi::setUsername(const QString &username) {
    _username = username;
}

void OAIRoutingApi::setPassword(const QString &password) {
    _password = password;
}


void OAIRoutingApi::setTimeOut(const int timeOut) {
    _timeOut = timeOut;
}

void OAIRoutingApi::setWorkingDirectory(const QString &path) {
    _workingDirectory = path;
}

void OAIRoutingApi::setNetworkAccessManager(QNetworkAccessManager* manager) {
    _manager = manager;
}

/**
    * Appends a new ServerConfiguration to the config map for a specific operation.
    * @param operation The id to the target operation.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    * returns the index of the new server config on success and -1 if the operation is not found
    */
int OAIRoutingApi::addServerConfiguration(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    if (_serverConfigs.contains(operation)) {
        _serverConfigs[operation].append(OAIServerConfiguration(
                    url,
                    description,
                    variables));
        return _serverConfigs[operation].size()-1;
    } else {
        return -1;
    }
}

/**
    * Appends a new ServerConfiguration to the config map for a all operations and sets the index to that server.
    * @param url A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRoutingApi::setNewServerForAllOperations(const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    for (auto keyIt = _serverIndices.keyBegin(); keyIt != _serverIndices.keyEnd(); keyIt++) {
        setServerIndex(*keyIt, addServerConfiguration(*keyIt, url, description, variables));
    }
}

/**
    * Appends a new ServerConfiguration to the config map for an operations and sets the index to that server.
    * @param URL A string that contains the URL of the server
    * @param description A String that describes the server
    * @param variables A map between a variable name and its value. The value is used for substitution in the server's URL template.
    */
void OAIRoutingApi::setNewServer(const QString &operation, const QUrl &url, const QString &description, const QMap<QString, OAIServerVariable> &variables) {
    setServerIndex(operation, addServerConfiguration(operation, url, description, variables));
}

void OAIRoutingApi::addHeaders(const QString &key, const QString &value) {
    _defaultHeaders.insert(key, value);
}

void OAIRoutingApi::enableRequestCompression() {
    _isRequestCompressionEnabled = true;
}

void OAIRoutingApi::enableResponseCompression() {
    _isResponseCompressionEnabled = true;
}

void OAIRoutingApi::abortRequests() {
    Q_EMIT abortRequestsSignal();
}

QString OAIRoutingApi::getParamStylePrefix(const QString &style) {
    if (style == "matrix") {
        return ";";
    } else if (style == "label") {
        return ".";
    } else if (style == "form") {
        return "&";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "&";
    } else if (style == "pipeDelimited") {
        return "&";
    } else {
        return "none";
    }
}

QString OAIRoutingApi::getParamStyleSuffix(const QString &style) {
    if (style == "matrix") {
        return "=";
    } else if (style == "label") {
        return "";
    } else if (style == "form") {
        return "=";
    } else if (style == "simple") {
        return "";
    } else if (style == "spaceDelimited") {
        return "=";
    } else if (style == "pipeDelimited") {
        return "=";
    } else {
        return "none";
    }
}

QString OAIRoutingApi::getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode) {

    if (style == "matrix") {
        return (isExplode) ? ";" + name + "=" : ",";

    } else if (style == "label") {
        return (isExplode) ? "." : ",";

    } else if (style == "form") {
        return (isExplode) ? "&" + name + "=" : ",";

    } else if (style == "simple") {
        return ",";
    } else if (style == "spaceDelimited") {
        return (isExplode) ? "&" + name + "=" : " ";

    } else if (style == "pipeDelimited") {
        return (isExplode) ? "&" + name + "=" : "|";

    } else if (style == "deepObject") {
        return (isExplode) ? "&" : "none";

    } else {
        return "none";
    }
}

void OAIRoutingApi::routingVersionNumberCalculateReachableRangeOriginContentTypeGet(const qint32 &version_number, const QString &origin, const QString &content_type, const ::OpenAPI::OptionalParam<float> &fuel_budget_in_liters, const ::OpenAPI::OptionalParam<float> &energy_budget_ink_wh, const ::OpenAPI::OptionalParam<float> &time_budget_in_sec, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &report, const ::OpenAPI::OptionalParam<QString> &depart_at, const ::OpenAPI::OptionalParam<QString> &arrive_at, const ::OpenAPI::OptionalParam<QString> &route_type, const ::OpenAPI::OptionalParam<bool> &traffic, const ::OpenAPI::OptionalParam<QString> &avoid, const ::OpenAPI::OptionalParam<QString> &travel_mode, const ::OpenAPI::OptionalParam<QString> &hilliness, const ::OpenAPI::OptionalParam<QString> &windingness, const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed, const ::OpenAPI::OptionalParam<qint32> &vehicle_weight, const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight, const ::OpenAPI::OptionalParam<float> &vehicle_length, const ::OpenAPI::OptionalParam<float> &vehicle_width, const ::OpenAPI::OptionalParam<float> &vehicle_height, const ::OpenAPI::OptionalParam<bool> &vehicle_commercial, const ::OpenAPI::OptionalParam<QString> &vehicle_load_type, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm, const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters, const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour, const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter, const ::OpenAPI::OptionalParam<float> &acceleration_efficiency, const ::OpenAPI::OptionalParam<float> &deceleration_efficiency, const ::OpenAPI::OptionalParam<float> &uphill_efficiency, const ::OpenAPI::OptionalParam<float> &downhill_efficiency, const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm) {
    QString fullPath = QString(_serverConfigs["routingVersionNumberCalculateReachableRangeOriginContentTypeGet"][_serverIndices.value("routingVersionNumberCalculateReachableRangeOriginContentTypeGet")].URL()+"/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}");
    
    if (_apiKeys.contains("api_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("api_key=").append(_apiKeys.find("api_key").value());
    }
    
    
    {
        QString version_numberPathParam("{");
        version_numberPathParam.append("versionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "versionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"versionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(version_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version_number)));
    }
    
    {
        QString originPathParam("{");
        originPathParam.append("origin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "origin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"origin"+pathSuffix : pathPrefix;
        fullPath.replace(originPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(origin)));
    }
    
    {
        QString content_typePathParam("{");
        content_typePathParam.append("contentType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentType"+pathSuffix : pathPrefix;
        fullPath.replace(content_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (fuel_budget_in_liters.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fuelBudgetInLiters", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fuelBudgetInLiters")).append(querySuffix).append(QUrl::toPercentEncoding(fuel_budget_in_liters.stringValue()));
    }
    if (energy_budget_ink_wh.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "energyBudgetInkWh", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("energyBudgetInkWh")).append(querySuffix).append(QUrl::toPercentEncoding(energy_budget_ink_wh.stringValue()));
    }
    if (time_budget_in_sec.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeBudgetInSec", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeBudgetInSec")).append(querySuffix).append(QUrl::toPercentEncoding(time_budget_in_sec.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (report.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "report", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("report")).append(querySuffix).append(QUrl::toPercentEncoding(report.stringValue()));
    }
    if (depart_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "departAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("departAt")).append(querySuffix).append(QUrl::toPercentEncoding(depart_at.stringValue()));
    }
    if (arrive_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "arriveAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("arriveAt")).append(querySuffix).append(QUrl::toPercentEncoding(arrive_at.stringValue()));
    }
    if (route_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "routeType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("routeType")).append(querySuffix).append(QUrl::toPercentEncoding(route_type.stringValue()));
    }
    if (traffic.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "traffic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("traffic")).append(querySuffix).append(QUrl::toPercentEncoding(traffic.stringValue()));
    }
    if (avoid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "avoid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("avoid")).append(querySuffix).append(QUrl::toPercentEncoding(avoid.stringValue()));
    }
    if (travel_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "travelMode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("travelMode")).append(querySuffix).append(QUrl::toPercentEncoding(travel_mode.stringValue()));
    }
    if (hilliness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "hilliness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("hilliness")).append(querySuffix).append(QUrl::toPercentEncoding(hilliness.stringValue()));
    }
    if (windingness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "windingness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("windingness")).append(querySuffix).append(QUrl::toPercentEncoding(windingness.stringValue()));
    }
    if (vehicle_max_speed.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleMaxSpeed", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleMaxSpeed")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_max_speed.stringValue()));
    }
    if (vehicle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_weight.stringValue()));
    }
    if (vehicle_axle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleAxleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleAxleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_axle_weight.stringValue()));
    }
    if (vehicle_length.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLength", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLength")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_length.stringValue()));
    }
    if (vehicle_width.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWidth", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWidth")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_width.stringValue()));
    }
    if (vehicle_height.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleHeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleHeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_height.stringValue()));
    }
    if (vehicle_commercial.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleCommercial", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleCommercial")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_commercial.stringValue()));
    }
    if (vehicle_load_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLoadType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLoadType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_load_type.stringValue()));
    }
    if (constant_speed_consumption_in_liters_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInLitersPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInLitersPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_in_liters_per_hundredkm.stringValue()));
    }
    if (current_fuel_in_liters.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentFuelInLiters", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentFuelInLiters")).append(querySuffix).append(QUrl::toPercentEncoding(current_fuel_in_liters.stringValue()));
    }
    if (auxiliary_power_in_liters_per_hour.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "auxiliaryPowerInLitersPerHour", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("auxiliaryPowerInLitersPerHour")).append(querySuffix).append(QUrl::toPercentEncoding(auxiliary_power_in_liters_per_hour.stringValue()));
    }
    if (fuel_energy_density_in_m_joules_per_liter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fuelEnergyDensityInMJoulesPerLiter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fuelEnergyDensityInMJoulesPerLiter")).append(querySuffix).append(QUrl::toPercentEncoding(fuel_energy_density_in_m_joules_per_liter.stringValue()));
    }
    if (acceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "accelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("accelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(acceleration_efficiency.stringValue()));
    }
    if (deceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "decelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("decelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(deceleration_efficiency.stringValue()));
    }
    if (uphill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "uphillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("uphillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(uphill_efficiency.stringValue()));
    }
    if (downhill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "downhillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("downhillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(downhill_efficiency.stringValue()));
    }
    if (vehicle_engine_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleEngineType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleEngineType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_engine_type.stringValue()));
    }
    if (constant_speed_consumption_ink_wh_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInkWhPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInkWhPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_ink_wh_per_hundredkm.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRoutingApi::routingVersionNumberCalculateReachableRangeOriginContentTypeGetCallback);
    connect(this, &OAIRoutingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRoutingApi::routingVersionNumberCalculateReachableRangeOriginContentTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignal();
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalE(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalError(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRoutingApi::routingVersionNumberCalculateReachableRangeOriginContentTypePost(const qint32 &version_number, const QString &origin, const QString &content_type, const ::OpenAPI::OptionalParam<float> &fuel_budget_in_liters, const ::OpenAPI::OptionalParam<float> &energy_budget_ink_wh, const ::OpenAPI::OptionalParam<float> &time_budget_in_sec, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &report, const ::OpenAPI::OptionalParam<QString> &depart_at, const ::OpenAPI::OptionalParam<QString> &arrive_at, const ::OpenAPI::OptionalParam<QString> &route_type, const ::OpenAPI::OptionalParam<bool> &traffic, const ::OpenAPI::OptionalParam<QString> &avoid, const ::OpenAPI::OptionalParam<QString> &travel_mode, const ::OpenAPI::OptionalParam<QString> &hilliness, const ::OpenAPI::OptionalParam<QString> &windingness, const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed, const ::OpenAPI::OptionalParam<qint32> &vehicle_weight, const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight, const ::OpenAPI::OptionalParam<float> &vehicle_length, const ::OpenAPI::OptionalParam<float> &vehicle_width, const ::OpenAPI::OptionalParam<float> &vehicle_height, const ::OpenAPI::OptionalParam<bool> &vehicle_commercial, const ::OpenAPI::OptionalParam<QString> &vehicle_load_type, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm, const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters, const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour, const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter, const ::OpenAPI::OptionalParam<float> &acceleration_efficiency, const ::OpenAPI::OptionalParam<float> &deceleration_efficiency, const ::OpenAPI::OptionalParam<float> &uphill_efficiency, const ::OpenAPI::OptionalParam<float> &downhill_efficiency, const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm, const ::OpenAPI::OptionalParam<OAICalculateReachableRangePostDataParameters> &oai_calculate_reachable_range_post_data_parameters) {
    QString fullPath = QString(_serverConfigs["routingVersionNumberCalculateReachableRangeOriginContentTypePost"][_serverIndices.value("routingVersionNumberCalculateReachableRangeOriginContentTypePost")].URL()+"/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}");
    
    if (_apiKeys.contains("api_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("api_key=").append(_apiKeys.find("api_key").value());
    }
    
    
    {
        QString version_numberPathParam("{");
        version_numberPathParam.append("versionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "versionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"versionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(version_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version_number)));
    }
    
    {
        QString originPathParam("{");
        originPathParam.append("origin").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "origin", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"origin"+pathSuffix : pathPrefix;
        fullPath.replace(originPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(origin)));
    }
    
    {
        QString content_typePathParam("{");
        content_typePathParam.append("contentType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentType"+pathSuffix : pathPrefix;
        fullPath.replace(content_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (fuel_budget_in_liters.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fuelBudgetInLiters", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fuelBudgetInLiters")).append(querySuffix).append(QUrl::toPercentEncoding(fuel_budget_in_liters.stringValue()));
    }
    if (energy_budget_ink_wh.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "energyBudgetInkWh", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("energyBudgetInkWh")).append(querySuffix).append(QUrl::toPercentEncoding(energy_budget_ink_wh.stringValue()));
    }
    if (time_budget_in_sec.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "timeBudgetInSec", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("timeBudgetInSec")).append(querySuffix).append(QUrl::toPercentEncoding(time_budget_in_sec.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (report.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "report", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("report")).append(querySuffix).append(QUrl::toPercentEncoding(report.stringValue()));
    }
    if (depart_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "departAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("departAt")).append(querySuffix).append(QUrl::toPercentEncoding(depart_at.stringValue()));
    }
    if (arrive_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "arriveAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("arriveAt")).append(querySuffix).append(QUrl::toPercentEncoding(arrive_at.stringValue()));
    }
    if (route_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "routeType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("routeType")).append(querySuffix).append(QUrl::toPercentEncoding(route_type.stringValue()));
    }
    if (traffic.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "traffic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("traffic")).append(querySuffix).append(QUrl::toPercentEncoding(traffic.stringValue()));
    }
    if (avoid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "avoid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("avoid")).append(querySuffix).append(QUrl::toPercentEncoding(avoid.stringValue()));
    }
    if (travel_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "travelMode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("travelMode")).append(querySuffix).append(QUrl::toPercentEncoding(travel_mode.stringValue()));
    }
    if (hilliness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "hilliness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("hilliness")).append(querySuffix).append(QUrl::toPercentEncoding(hilliness.stringValue()));
    }
    if (windingness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "windingness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("windingness")).append(querySuffix).append(QUrl::toPercentEncoding(windingness.stringValue()));
    }
    if (vehicle_max_speed.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleMaxSpeed", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleMaxSpeed")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_max_speed.stringValue()));
    }
    if (vehicle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_weight.stringValue()));
    }
    if (vehicle_axle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleAxleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleAxleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_axle_weight.stringValue()));
    }
    if (vehicle_length.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLength", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLength")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_length.stringValue()));
    }
    if (vehicle_width.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWidth", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWidth")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_width.stringValue()));
    }
    if (vehicle_height.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleHeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleHeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_height.stringValue()));
    }
    if (vehicle_commercial.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleCommercial", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleCommercial")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_commercial.stringValue()));
    }
    if (vehicle_load_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLoadType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLoadType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_load_type.stringValue()));
    }
    if (constant_speed_consumption_in_liters_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInLitersPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInLitersPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_in_liters_per_hundredkm.stringValue()));
    }
    if (current_fuel_in_liters.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentFuelInLiters", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentFuelInLiters")).append(querySuffix).append(QUrl::toPercentEncoding(current_fuel_in_liters.stringValue()));
    }
    if (auxiliary_power_in_liters_per_hour.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "auxiliaryPowerInLitersPerHour", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("auxiliaryPowerInLitersPerHour")).append(querySuffix).append(QUrl::toPercentEncoding(auxiliary_power_in_liters_per_hour.stringValue()));
    }
    if (fuel_energy_density_in_m_joules_per_liter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fuelEnergyDensityInMJoulesPerLiter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fuelEnergyDensityInMJoulesPerLiter")).append(querySuffix).append(QUrl::toPercentEncoding(fuel_energy_density_in_m_joules_per_liter.stringValue()));
    }
    if (acceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "accelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("accelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(acceleration_efficiency.stringValue()));
    }
    if (deceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "decelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("decelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(deceleration_efficiency.stringValue()));
    }
    if (uphill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "uphillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("uphillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(uphill_efficiency.stringValue()));
    }
    if (downhill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "downhillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("downhillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(downhill_efficiency.stringValue()));
    }
    if (vehicle_engine_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleEngineType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleEngineType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_engine_type.stringValue()));
    }
    if (constant_speed_consumption_ink_wh_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInkWhPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInkWhPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_ink_wh_per_hundredkm.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_calculate_reachable_range_post_data_parameters.hasValue()){

        
        QByteArray output = oai_calculate_reachable_range_post_data_parameters.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRoutingApi::routingVersionNumberCalculateReachableRangeOriginContentTypePostCallback);
    connect(this, &OAIRoutingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRoutingApi::routingVersionNumberCalculateReachableRangeOriginContentTypePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypePostSignal();
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalE(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalError(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRoutingApi::routingVersionNumberCalculateRouteLocationsContentTypeGet(const qint32 &version_number, const QString &locations, const QString &content_type, const ::OpenAPI::OptionalParam<qint32> &max_alternatives, const ::OpenAPI::OptionalParam<QString> &alternative_type, const ::OpenAPI::OptionalParam<qint32> &min_deviation_distance, const ::OpenAPI::OptionalParam<qint32> &min_deviation_time, const ::OpenAPI::OptionalParam<QString> &instructions_type, const ::OpenAPI::OptionalParam<QString> &language, const ::OpenAPI::OptionalParam<bool> &compute_best_order, const ::OpenAPI::OptionalParam<QString> &route_representation, const ::OpenAPI::OptionalParam<QString> &compute_travel_time_for, const ::OpenAPI::OptionalParam<qint32> &vehicle_heading, const ::OpenAPI::OptionalParam<QString> &section_type, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &report, const ::OpenAPI::OptionalParam<QString> &depart_at, const ::OpenAPI::OptionalParam<QString> &arrive_at, const ::OpenAPI::OptionalParam<QString> &route_type, const ::OpenAPI::OptionalParam<bool> &traffic, const ::OpenAPI::OptionalParam<QString> &avoid, const ::OpenAPI::OptionalParam<QString> &travel_mode, const ::OpenAPI::OptionalParam<QString> &hilliness, const ::OpenAPI::OptionalParam<QString> &windingness, const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed, const ::OpenAPI::OptionalParam<qint32> &vehicle_weight, const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight, const ::OpenAPI::OptionalParam<float> &vehicle_length, const ::OpenAPI::OptionalParam<float> &vehicle_width, const ::OpenAPI::OptionalParam<float> &vehicle_height, const ::OpenAPI::OptionalParam<bool> &vehicle_commercial, const ::OpenAPI::OptionalParam<QString> &vehicle_load_type, const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm, const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters, const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour, const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter, const ::OpenAPI::OptionalParam<float> &acceleration_efficiency, const ::OpenAPI::OptionalParam<float> &deceleration_efficiency, const ::OpenAPI::OptionalParam<float> &uphill_efficiency, const ::OpenAPI::OptionalParam<float> &downhill_efficiency, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm) {
    QString fullPath = QString(_serverConfigs["routingVersionNumberCalculateRouteLocationsContentTypeGet"][_serverIndices.value("routingVersionNumberCalculateRouteLocationsContentTypeGet")].URL()+"/routing/{versionNumber}/calculateRoute/{locations}/{contentType}");
    
    if (_apiKeys.contains("api_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("api_key=").append(_apiKeys.find("api_key").value());
    }
    
    
    {
        QString version_numberPathParam("{");
        version_numberPathParam.append("versionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "versionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"versionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(version_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version_number)));
    }
    
    {
        QString locationsPathParam("{");
        locationsPathParam.append("locations").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "locations", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"locations"+pathSuffix : pathPrefix;
        fullPath.replace(locationsPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(locations)));
    }
    
    {
        QString content_typePathParam("{");
        content_typePathParam.append("contentType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentType"+pathSuffix : pathPrefix;
        fullPath.replace(content_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (max_alternatives.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxAlternatives", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxAlternatives")).append(querySuffix).append(QUrl::toPercentEncoding(max_alternatives.stringValue()));
    }
    if (alternative_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "alternativeType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("alternativeType")).append(querySuffix).append(QUrl::toPercentEncoding(alternative_type.stringValue()));
    }
    if (min_deviation_distance.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "minDeviationDistance", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("minDeviationDistance")).append(querySuffix).append(QUrl::toPercentEncoding(min_deviation_distance.stringValue()));
    }
    if (min_deviation_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "minDeviationTime", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("minDeviationTime")).append(querySuffix).append(QUrl::toPercentEncoding(min_deviation_time.stringValue()));
    }
    if (instructions_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instructionsType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instructionsType")).append(querySuffix).append(QUrl::toPercentEncoding(instructions_type.stringValue()));
    }
    if (language.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "language", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("language")).append(querySuffix).append(QUrl::toPercentEncoding(language.stringValue()));
    }
    if (compute_best_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "computeBestOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("computeBestOrder")).append(querySuffix).append(QUrl::toPercentEncoding(compute_best_order.stringValue()));
    }
    if (route_representation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "routeRepresentation", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("routeRepresentation")).append(querySuffix).append(QUrl::toPercentEncoding(route_representation.stringValue()));
    }
    if (compute_travel_time_for.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "computeTravelTimeFor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("computeTravelTimeFor")).append(querySuffix).append(QUrl::toPercentEncoding(compute_travel_time_for.stringValue()));
    }
    if (vehicle_heading.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleHeading", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleHeading")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_heading.stringValue()));
    }
    if (section_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sectionType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sectionType")).append(querySuffix).append(QUrl::toPercentEncoding(section_type.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (report.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "report", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("report")).append(querySuffix).append(QUrl::toPercentEncoding(report.stringValue()));
    }
    if (depart_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "departAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("departAt")).append(querySuffix).append(QUrl::toPercentEncoding(depart_at.stringValue()));
    }
    if (arrive_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "arriveAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("arriveAt")).append(querySuffix).append(QUrl::toPercentEncoding(arrive_at.stringValue()));
    }
    if (route_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "routeType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("routeType")).append(querySuffix).append(QUrl::toPercentEncoding(route_type.stringValue()));
    }
    if (traffic.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "traffic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("traffic")).append(querySuffix).append(QUrl::toPercentEncoding(traffic.stringValue()));
    }
    if (avoid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "avoid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("avoid")).append(querySuffix).append(QUrl::toPercentEncoding(avoid.stringValue()));
    }
    if (travel_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "travelMode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("travelMode")).append(querySuffix).append(QUrl::toPercentEncoding(travel_mode.stringValue()));
    }
    if (hilliness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "hilliness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("hilliness")).append(querySuffix).append(QUrl::toPercentEncoding(hilliness.stringValue()));
    }
    if (windingness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "windingness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("windingness")).append(querySuffix).append(QUrl::toPercentEncoding(windingness.stringValue()));
    }
    if (vehicle_max_speed.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleMaxSpeed", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleMaxSpeed")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_max_speed.stringValue()));
    }
    if (vehicle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_weight.stringValue()));
    }
    if (vehicle_axle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleAxleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleAxleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_axle_weight.stringValue()));
    }
    if (vehicle_length.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLength", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLength")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_length.stringValue()));
    }
    if (vehicle_width.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWidth", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWidth")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_width.stringValue()));
    }
    if (vehicle_height.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleHeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleHeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_height.stringValue()));
    }
    if (vehicle_commercial.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleCommercial", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleCommercial")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_commercial.stringValue()));
    }
    if (vehicle_load_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLoadType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLoadType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_load_type.stringValue()));
    }
    if (vehicle_engine_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleEngineType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleEngineType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_engine_type.stringValue()));
    }
    if (constant_speed_consumption_in_liters_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInLitersPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInLitersPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_in_liters_per_hundredkm.stringValue()));
    }
    if (current_fuel_in_liters.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentFuelInLiters", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentFuelInLiters")).append(querySuffix).append(QUrl::toPercentEncoding(current_fuel_in_liters.stringValue()));
    }
    if (auxiliary_power_in_liters_per_hour.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "auxiliaryPowerInLitersPerHour", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("auxiliaryPowerInLitersPerHour")).append(querySuffix).append(QUrl::toPercentEncoding(auxiliary_power_in_liters_per_hour.stringValue()));
    }
    if (fuel_energy_density_in_m_joules_per_liter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fuelEnergyDensityInMJoulesPerLiter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fuelEnergyDensityInMJoulesPerLiter")).append(querySuffix).append(QUrl::toPercentEncoding(fuel_energy_density_in_m_joules_per_liter.stringValue()));
    }
    if (acceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "accelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("accelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(acceleration_efficiency.stringValue()));
    }
    if (deceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "decelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("decelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(deceleration_efficiency.stringValue()));
    }
    if (uphill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "uphillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("uphillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(uphill_efficiency.stringValue()));
    }
    if (downhill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "downhillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("downhillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(downhill_efficiency.stringValue()));
    }
    if (constant_speed_consumption_ink_wh_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInkWhPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInkWhPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_ink_wh_per_hundredkm.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "GET");


    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRoutingApi::routingVersionNumberCalculateRouteLocationsContentTypeGetCallback);
    connect(this, &OAIRoutingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRoutingApi::routingVersionNumberCalculateRouteLocationsContentTypeGetCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypeGetSignal();
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypeGetSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypeGetSignalE(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypeGetSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypeGetSignalError(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypeGetSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRoutingApi::routingVersionNumberCalculateRouteLocationsContentTypePost(const qint32 &version_number, const QString &locations, const QString &content_type, const ::OpenAPI::OptionalParam<qint32> &max_alternatives, const ::OpenAPI::OptionalParam<QString> &alternative_type, const ::OpenAPI::OptionalParam<qint32> &min_deviation_distance, const ::OpenAPI::OptionalParam<qint32> &min_deviation_time, const ::OpenAPI::OptionalParam<QString> &instructions_type, const ::OpenAPI::OptionalParam<QString> &language, const ::OpenAPI::OptionalParam<bool> &compute_best_order, const ::OpenAPI::OptionalParam<QString> &route_representation, const ::OpenAPI::OptionalParam<QString> &compute_travel_time_for, const ::OpenAPI::OptionalParam<qint32> &vehicle_heading, const ::OpenAPI::OptionalParam<QString> &section_type, const ::OpenAPI::OptionalParam<QString> &callback, const ::OpenAPI::OptionalParam<QString> &report, const ::OpenAPI::OptionalParam<QString> &depart_at, const ::OpenAPI::OptionalParam<QString> &arrive_at, const ::OpenAPI::OptionalParam<QString> &route_type, const ::OpenAPI::OptionalParam<bool> &traffic, const ::OpenAPI::OptionalParam<QString> &avoid, const ::OpenAPI::OptionalParam<QString> &travel_mode, const ::OpenAPI::OptionalParam<QString> &hilliness, const ::OpenAPI::OptionalParam<QString> &windingness, const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed, const ::OpenAPI::OptionalParam<qint32> &vehicle_weight, const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight, const ::OpenAPI::OptionalParam<float> &vehicle_length, const ::OpenAPI::OptionalParam<float> &vehicle_width, const ::OpenAPI::OptionalParam<float> &vehicle_height, const ::OpenAPI::OptionalParam<bool> &vehicle_commercial, const ::OpenAPI::OptionalParam<QString> &vehicle_load_type, const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm, const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters, const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour, const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter, const ::OpenAPI::OptionalParam<float> &acceleration_efficiency, const ::OpenAPI::OptionalParam<float> &deceleration_efficiency, const ::OpenAPI::OptionalParam<float> &uphill_efficiency, const ::OpenAPI::OptionalParam<float> &downhill_efficiency, const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm, const ::OpenAPI::OptionalParam<OAICalculateRoutePostDataParameters> &oai_calculate_route_post_data_parameters) {
    QString fullPath = QString(_serverConfigs["routingVersionNumberCalculateRouteLocationsContentTypePost"][_serverIndices.value("routingVersionNumberCalculateRouteLocationsContentTypePost")].URL()+"/routing/{versionNumber}/calculateRoute/{locations}/{contentType}");
    
    if (_apiKeys.contains("api_key")) {
        if (fullPath.indexOf("?") > 0)
            fullPath.append("&");
        else
            fullPath.append("?");
        fullPath.append("api_key=").append(_apiKeys.find("api_key").value());
    }
    
    
    {
        QString version_numberPathParam("{");
        version_numberPathParam.append("versionNumber").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "versionNumber", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"versionNumber"+pathSuffix : pathPrefix;
        fullPath.replace(version_numberPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(version_number)));
    }
    
    {
        QString locationsPathParam("{");
        locationsPathParam.append("locations").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "locations", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"locations"+pathSuffix : pathPrefix;
        fullPath.replace(locationsPathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(locations)));
    }
    
    {
        QString content_typePathParam("{");
        content_typePathParam.append("contentType").append("}");
        QString pathPrefix, pathSuffix, pathDelimiter;
        QString pathStyle = "simple";
        if (pathStyle == "")
            pathStyle = "simple";
        pathPrefix = getParamStylePrefix(pathStyle);
        pathSuffix = getParamStyleSuffix(pathStyle);
        pathDelimiter = getParamStyleDelimiter(pathStyle, "contentType", false);
        QString paramString = (pathStyle == "matrix") ? pathPrefix+"contentType"+pathSuffix : pathPrefix;
        fullPath.replace(content_typePathParam, paramString+QUrl::toPercentEncoding(::OpenAPI::toStringValue(content_type)));
    }
    QString queryPrefix, querySuffix, queryDelimiter, queryStyle;
    if (max_alternatives.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "maxAlternatives", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("maxAlternatives")).append(querySuffix).append(QUrl::toPercentEncoding(max_alternatives.stringValue()));
    }
    if (alternative_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "alternativeType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("alternativeType")).append(querySuffix).append(QUrl::toPercentEncoding(alternative_type.stringValue()));
    }
    if (min_deviation_distance.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "minDeviationDistance", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("minDeviationDistance")).append(querySuffix).append(QUrl::toPercentEncoding(min_deviation_distance.stringValue()));
    }
    if (min_deviation_time.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "minDeviationTime", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("minDeviationTime")).append(querySuffix).append(QUrl::toPercentEncoding(min_deviation_time.stringValue()));
    }
    if (instructions_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "instructionsType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("instructionsType")).append(querySuffix).append(QUrl::toPercentEncoding(instructions_type.stringValue()));
    }
    if (language.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "language", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("language")).append(querySuffix).append(QUrl::toPercentEncoding(language.stringValue()));
    }
    if (compute_best_order.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "computeBestOrder", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("computeBestOrder")).append(querySuffix).append(QUrl::toPercentEncoding(compute_best_order.stringValue()));
    }
    if (route_representation.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "routeRepresentation", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("routeRepresentation")).append(querySuffix).append(QUrl::toPercentEncoding(route_representation.stringValue()));
    }
    if (compute_travel_time_for.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "computeTravelTimeFor", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("computeTravelTimeFor")).append(querySuffix).append(QUrl::toPercentEncoding(compute_travel_time_for.stringValue()));
    }
    if (vehicle_heading.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleHeading", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleHeading")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_heading.stringValue()));
    }
    if (section_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "sectionType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("sectionType")).append(querySuffix).append(QUrl::toPercentEncoding(section_type.stringValue()));
    }
    if (callback.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "callback", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("callback")).append(querySuffix).append(QUrl::toPercentEncoding(callback.stringValue()));
    }
    if (report.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "report", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("report")).append(querySuffix).append(QUrl::toPercentEncoding(report.stringValue()));
    }
    if (depart_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "departAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("departAt")).append(querySuffix).append(QUrl::toPercentEncoding(depart_at.stringValue()));
    }
    if (arrive_at.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "arriveAt", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("arriveAt")).append(querySuffix).append(QUrl::toPercentEncoding(arrive_at.stringValue()));
    }
    if (route_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "routeType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("routeType")).append(querySuffix).append(QUrl::toPercentEncoding(route_type.stringValue()));
    }
    if (traffic.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "traffic", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("traffic")).append(querySuffix).append(QUrl::toPercentEncoding(traffic.stringValue()));
    }
    if (avoid.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "avoid", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("avoid")).append(querySuffix).append(QUrl::toPercentEncoding(avoid.stringValue()));
    }
    if (travel_mode.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "travelMode", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("travelMode")).append(querySuffix).append(QUrl::toPercentEncoding(travel_mode.stringValue()));
    }
    if (hilliness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "hilliness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("hilliness")).append(querySuffix).append(QUrl::toPercentEncoding(hilliness.stringValue()));
    }
    if (windingness.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "windingness", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("windingness")).append(querySuffix).append(QUrl::toPercentEncoding(windingness.stringValue()));
    }
    if (vehicle_max_speed.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleMaxSpeed", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleMaxSpeed")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_max_speed.stringValue()));
    }
    if (vehicle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_weight.stringValue()));
    }
    if (vehicle_axle_weight.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleAxleWeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleAxleWeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_axle_weight.stringValue()));
    }
    if (vehicle_length.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLength", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLength")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_length.stringValue()));
    }
    if (vehicle_width.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleWidth", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleWidth")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_width.stringValue()));
    }
    if (vehicle_height.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleHeight", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleHeight")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_height.stringValue()));
    }
    if (vehicle_commercial.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleCommercial", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleCommercial")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_commercial.stringValue()));
    }
    if (vehicle_load_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleLoadType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleLoadType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_load_type.stringValue()));
    }
    if (vehicle_engine_type.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "vehicleEngineType", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("vehicleEngineType")).append(querySuffix).append(QUrl::toPercentEncoding(vehicle_engine_type.stringValue()));
    }
    if (constant_speed_consumption_in_liters_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInLitersPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInLitersPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_in_liters_per_hundredkm.stringValue()));
    }
    if (current_fuel_in_liters.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "currentFuelInLiters", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("currentFuelInLiters")).append(querySuffix).append(QUrl::toPercentEncoding(current_fuel_in_liters.stringValue()));
    }
    if (auxiliary_power_in_liters_per_hour.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "auxiliaryPowerInLitersPerHour", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("auxiliaryPowerInLitersPerHour")).append(querySuffix).append(QUrl::toPercentEncoding(auxiliary_power_in_liters_per_hour.stringValue()));
    }
    if (fuel_energy_density_in_m_joules_per_liter.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "fuelEnergyDensityInMJoulesPerLiter", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("fuelEnergyDensityInMJoulesPerLiter")).append(querySuffix).append(QUrl::toPercentEncoding(fuel_energy_density_in_m_joules_per_liter.stringValue()));
    }
    if (acceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "accelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("accelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(acceleration_efficiency.stringValue()));
    }
    if (deceleration_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "decelerationEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("decelerationEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(deceleration_efficiency.stringValue()));
    }
    if (uphill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "uphillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("uphillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(uphill_efficiency.stringValue()));
    }
    if (downhill_efficiency.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "downhillEfficiency", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("downhillEfficiency")).append(querySuffix).append(QUrl::toPercentEncoding(downhill_efficiency.stringValue()));
    }
    if (constant_speed_consumption_ink_wh_per_hundredkm.hasValue())
    {
        queryStyle = "form";
        if (queryStyle == "")
            queryStyle = "form";
        queryPrefix = getParamStylePrefix(queryStyle);
        querySuffix = getParamStyleSuffix(queryStyle);
        queryDelimiter = getParamStyleDelimiter(queryStyle, "constantSpeedConsumptionInkWhPerHundredkm", true);
        if (fullPath.indexOf("?") > 0)
            fullPath.append(queryPrefix);
        else
            fullPath.append("?");

        fullPath.append(QUrl::toPercentEncoding("constantSpeedConsumptionInkWhPerHundredkm")).append(querySuffix).append(QUrl::toPercentEncoding(constant_speed_consumption_ink_wh_per_hundredkm.stringValue()));
    }
    OAIHttpRequestWorker *worker = new OAIHttpRequestWorker(this, _manager);
    worker->setTimeOut(_timeOut);
    worker->setWorkingDirectory(_workingDirectory);
    OAIHttpRequestInput input(fullPath, "POST");

    if (oai_calculate_route_post_data_parameters.hasValue()){

        
        QByteArray output = oai_calculate_route_post_data_parameters.value().asJson().toUtf8();
        input.request_body.append(output);
    }
    for (auto keyValueIt = _defaultHeaders.keyValueBegin(); keyValueIt != _defaultHeaders.keyValueEnd(); keyValueIt++) {
        input.headers.insert(keyValueIt->first, keyValueIt->second);
    }


    connect(worker, &OAIHttpRequestWorker::on_execution_finished, this, &OAIRoutingApi::routingVersionNumberCalculateRouteLocationsContentTypePostCallback);
    connect(this, &OAIRoutingApi::abortRequestsSignal, worker, &QObject::deleteLater);
    connect(worker, &QObject::destroyed, this, [this]() {
        if (findChildren<OAIHttpRequestWorker*>().count() == 0) {
            Q_EMIT allPendingRequestsCompleted();
        }
    });

    worker->execute(&input);
}

void OAIRoutingApi::routingVersionNumberCalculateRouteLocationsContentTypePostCallback(OAIHttpRequestWorker *worker) {
    QString error_str = worker->error_str;
    QNetworkReply::NetworkError error_type = worker->error_type;

    if (worker->error_type != QNetworkReply::NoError) {
        error_str = QString("%1, %2").arg(worker->error_str, QString(worker->response));
    }
    worker->deleteLater();

    if (worker->error_type == QNetworkReply::NoError) {
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypePostSignal();
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypePostSignalFull(worker);
    } else {

#if defined(_MSC_VER)
// For MSVC
#pragma warning(push)
#pragma warning(disable : 4996)
#elif defined(__clang__)
// For Clang
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#elif defined(__GNUC__)
// For GCC
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wdeprecated-declarations"
#endif

        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypePostSignalE(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypePostSignalEFull(worker, error_type, error_str);

#if defined(_MSC_VER)
#pragma warning(pop)
#elif defined(__clang__)
#pragma clang diagnostic pop
#elif defined(__GNUC__)
#pragma GCC diagnostic pop
#endif

        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypePostSignalError(error_type, error_str);
        Q_EMIT routingVersionNumberCalculateRouteLocationsContentTypePostSignalErrorFull(worker, error_type, error_str);
    }
}

void OAIRoutingApi::tokenAvailable(){

    oauthToken token;
    switch (_OauthMethod) {
    case 1: //implicit flow
        token = _implicitFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _implicitFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 2: //authorization flow
        token = _authFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _authFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 3: //client credentials flow
        token = _credentialFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    case 4: //resource owner password flow
        token = _passwordFlow.getToken(_latestScope.join(" "));
        if(token.isValid()){
            _latestInput.headers.insert("Authorization", "Bearer " + token.getToken());
            _latestWorker->execute(&_latestInput);
        }else{
            _credentialFlow.removeToken(_latestScope.join(" "));
            qDebug() << "Could not retrieve a valid token";
        }
        break;
    default:
        qDebug() << "No Oauth method set!";
        break;
    }
}
} // namespace OpenAPI
