/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateRoutePostDataParameters.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateRoutePostDataParameters::OAICalculateRoutePostDataParameters(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateRoutePostDataParameters::OAICalculateRoutePostDataParameters() {
    this->initializeModel();
}

OAICalculateRoutePostDataParameters::~OAICalculateRoutePostDataParameters() {}

void OAICalculateRoutePostDataParameters::initializeModel() {

    m_allow_vignette_isSet = false;
    m_allow_vignette_isValid = false;

    m_avoid_areas_isSet = false;
    m_avoid_areas_isValid = false;

    m_avoid_vignette_isSet = false;
    m_avoid_vignette_isValid = false;

    m_supporting_points_isSet = false;
    m_supporting_points_isValid = false;
}

void OAICalculateRoutePostDataParameters::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateRoutePostDataParameters::fromJsonObject(QJsonObject json) {

    m_allow_vignette_isValid = ::OpenAPI::fromJsonValue(m_allow_vignette, json[QString("allowVignette")]);
    m_allow_vignette_isSet = !json[QString("allowVignette")].isNull() && m_allow_vignette_isValid;

    m_avoid_areas_isValid = ::OpenAPI::fromJsonValue(m_avoid_areas, json[QString("avoidAreas")]);
    m_avoid_areas_isSet = !json[QString("avoidAreas")].isNull() && m_avoid_areas_isValid;

    m_avoid_vignette_isValid = ::OpenAPI::fromJsonValue(m_avoid_vignette, json[QString("avoidVignette")]);
    m_avoid_vignette_isSet = !json[QString("avoidVignette")].isNull() && m_avoid_vignette_isValid;

    m_supporting_points_isValid = ::OpenAPI::fromJsonValue(m_supporting_points, json[QString("supportingPoints")]);
    m_supporting_points_isSet = !json[QString("supportingPoints")].isNull() && m_supporting_points_isValid;
}

QString OAICalculateRoutePostDataParameters::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateRoutePostDataParameters::asJsonObject() const {
    QJsonObject obj;
    if (m_allow_vignette.size() > 0) {
        obj.insert(QString("allowVignette"), ::OpenAPI::toJsonValue(m_allow_vignette));
    }
    if (m_avoid_areas.isSet()) {
        obj.insert(QString("avoidAreas"), ::OpenAPI::toJsonValue(m_avoid_areas));
    }
    if (m_avoid_vignette.size() > 0) {
        obj.insert(QString("avoidVignette"), ::OpenAPI::toJsonValue(m_avoid_vignette));
    }
    if (m_supporting_points.size() > 0) {
        obj.insert(QString("supportingPoints"), ::OpenAPI::toJsonValue(m_supporting_points));
    }
    return obj;
}

QList<QString> OAICalculateRoutePostDataParameters::getAllowVignette() const {
    return m_allow_vignette;
}
void OAICalculateRoutePostDataParameters::setAllowVignette(const QList<QString> &allow_vignette) {
    m_allow_vignette = allow_vignette;
    m_allow_vignette_isSet = true;
}

bool OAICalculateRoutePostDataParameters::is_allow_vignette_Set() const{
    return m_allow_vignette_isSet;
}

bool OAICalculateRoutePostDataParameters::is_allow_vignette_Valid() const{
    return m_allow_vignette_isValid;
}

OAICalculateReachableRangePostDataParameters_avoidAreas OAICalculateRoutePostDataParameters::getAvoidAreas() const {
    return m_avoid_areas;
}
void OAICalculateRoutePostDataParameters::setAvoidAreas(const OAICalculateReachableRangePostDataParameters_avoidAreas &avoid_areas) {
    m_avoid_areas = avoid_areas;
    m_avoid_areas_isSet = true;
}

bool OAICalculateRoutePostDataParameters::is_avoid_areas_Set() const{
    return m_avoid_areas_isSet;
}

bool OAICalculateRoutePostDataParameters::is_avoid_areas_Valid() const{
    return m_avoid_areas_isValid;
}

QList<QString> OAICalculateRoutePostDataParameters::getAvoidVignette() const {
    return m_avoid_vignette;
}
void OAICalculateRoutePostDataParameters::setAvoidVignette(const QList<QString> &avoid_vignette) {
    m_avoid_vignette = avoid_vignette;
    m_avoid_vignette_isSet = true;
}

bool OAICalculateRoutePostDataParameters::is_avoid_vignette_Set() const{
    return m_avoid_vignette_isSet;
}

bool OAICalculateRoutePostDataParameters::is_avoid_vignette_Valid() const{
    return m_avoid_vignette_isValid;
}

QList<OAICalculateRoutePostDataParameters_supportingPoints_inner> OAICalculateRoutePostDataParameters::getSupportingPoints() const {
    return m_supporting_points;
}
void OAICalculateRoutePostDataParameters::setSupportingPoints(const QList<OAICalculateRoutePostDataParameters_supportingPoints_inner> &supporting_points) {
    m_supporting_points = supporting_points;
    m_supporting_points_isSet = true;
}

bool OAICalculateRoutePostDataParameters::is_supporting_points_Set() const{
    return m_supporting_points_isSet;
}

bool OAICalculateRoutePostDataParameters::is_supporting_points_Valid() const{
    return m_supporting_points_isValid;
}

bool OAICalculateRoutePostDataParameters::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_allow_vignette.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_areas.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_avoid_vignette.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_supporting_points.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateRoutePostDataParameters::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
