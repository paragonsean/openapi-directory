/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

/*
 * OAICalculateRoutePostDataParameters.h
 *
 * 
 */

#ifndef OAICalculateRoutePostDataParameters_H
#define OAICalculateRoutePostDataParameters_H

#include <QJsonObject>

#include "OAICalculateReachableRangePostDataParameters_avoidAreas.h"
#include "OAICalculateRoutePostDataParameters_supportingPoints_inner.h"
#include <QList>
#include <QString>

#include "OAIEnum.h"
#include "OAIObject.h"

namespace OpenAPI {
class OAICalculateReachableRangePostDataParameters_avoidAreas;
class OAICalculateRoutePostDataParameters_supportingPoints_inner;

class OAICalculateRoutePostDataParameters : public OAIObject {
public:
    OAICalculateRoutePostDataParameters();
    OAICalculateRoutePostDataParameters(QString json);
    ~OAICalculateRoutePostDataParameters() override;

    QString asJson() const override;
    QJsonObject asJsonObject() const override;
    void fromJsonObject(QJsonObject json) override;
    void fromJson(QString jsonString) override;

    QList<QString> getAllowVignette() const;
    void setAllowVignette(const QList<QString> &allow_vignette);
    bool is_allow_vignette_Set() const;
    bool is_allow_vignette_Valid() const;

    OAICalculateReachableRangePostDataParameters_avoidAreas getAvoidAreas() const;
    void setAvoidAreas(const OAICalculateReachableRangePostDataParameters_avoidAreas &avoid_areas);
    bool is_avoid_areas_Set() const;
    bool is_avoid_areas_Valid() const;

    QList<QString> getAvoidVignette() const;
    void setAvoidVignette(const QList<QString> &avoid_vignette);
    bool is_avoid_vignette_Set() const;
    bool is_avoid_vignette_Valid() const;

    QList<OAICalculateRoutePostDataParameters_supportingPoints_inner> getSupportingPoints() const;
    void setSupportingPoints(const QList<OAICalculateRoutePostDataParameters_supportingPoints_inner> &supporting_points);
    bool is_supporting_points_Set() const;
    bool is_supporting_points_Valid() const;

    virtual bool isSet() const override;
    virtual bool isValid() const override;

private:
    void initializeModel();

    QList<QString> m_allow_vignette;
    bool m_allow_vignette_isSet;
    bool m_allow_vignette_isValid;

    OAICalculateReachableRangePostDataParameters_avoidAreas m_avoid_areas;
    bool m_avoid_areas_isSet;
    bool m_avoid_areas_isValid;

    QList<QString> m_avoid_vignette;
    bool m_avoid_vignette_isSet;
    bool m_avoid_vignette_isValid;

    QList<OAICalculateRoutePostDataParameters_supportingPoints_inner> m_supporting_points;
    bool m_supporting_points_isSet;
    bool m_supporting_points_isValid;
};

} // namespace OpenAPI

Q_DECLARE_METATYPE(OpenAPI::OAICalculateRoutePostDataParameters)

#endif // OAICalculateRoutePostDataParameters_H
