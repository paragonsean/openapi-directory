/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRoutingApi_H
#define OAI_OAIRoutingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAICalculateReachableRangePostDataParameters.h"
#include "OAICalculateRoutePostDataParameters.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRoutingApi : public QObject {
    Q_OBJECT

public:
    OAIRoutingApi(const int timeOut = 0);
    ~OAIRoutingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  origin QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  fuel_budget_in_liters float [optional]
    * @param[in]  energy_budget_ink_wh float [optional]
    * @param[in]  time_budget_in_sec float [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  report QString [optional]
    * @param[in]  depart_at QString [optional]
    * @param[in]  arrive_at QString [optional]
    * @param[in]  route_type QString [optional]
    * @param[in]  traffic bool [optional]
    * @param[in]  avoid QString [optional]
    * @param[in]  travel_mode QString [optional]
    * @param[in]  hilliness QString [optional]
    * @param[in]  windingness QString [optional]
    * @param[in]  vehicle_max_speed qint32 [optional]
    * @param[in]  vehicle_weight qint32 [optional]
    * @param[in]  vehicle_axle_weight qint32 [optional]
    * @param[in]  vehicle_length float [optional]
    * @param[in]  vehicle_width float [optional]
    * @param[in]  vehicle_height float [optional]
    * @param[in]  vehicle_commercial bool [optional]
    * @param[in]  vehicle_load_type QString [optional]
    * @param[in]  constant_speed_consumption_in_liters_per_hundredkm QString [optional]
    * @param[in]  current_fuel_in_liters float [optional]
    * @param[in]  auxiliary_power_in_liters_per_hour float [optional]
    * @param[in]  fuel_energy_density_in_m_joules_per_liter float [optional]
    * @param[in]  acceleration_efficiency float [optional]
    * @param[in]  deceleration_efficiency float [optional]
    * @param[in]  uphill_efficiency float [optional]
    * @param[in]  downhill_efficiency float [optional]
    * @param[in]  vehicle_engine_type QString [optional]
    * @param[in]  constant_speed_consumption_ink_wh_per_hundredkm QString [optional]
    */
    virtual void routingVersionNumberCalculateReachableRangeOriginContentTypeGet(const qint32 &version_number, const QString &origin, const QString &content_type, const ::OpenAPI::OptionalParam<float> &fuel_budget_in_liters = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &energy_budget_ink_wh = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &time_budget_in_sec = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depart_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arrive_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &traffic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &avoid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &travel_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hilliness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &windingness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &vehicle_length = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_width = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_height = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &vehicle_commercial = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &vehicle_load_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &acceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &deceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &uphill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &downhill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  origin QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  fuel_budget_in_liters float [optional]
    * @param[in]  energy_budget_ink_wh float [optional]
    * @param[in]  time_budget_in_sec float [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  report QString [optional]
    * @param[in]  depart_at QString [optional]
    * @param[in]  arrive_at QString [optional]
    * @param[in]  route_type QString [optional]
    * @param[in]  traffic bool [optional]
    * @param[in]  avoid QString [optional]
    * @param[in]  travel_mode QString [optional]
    * @param[in]  hilliness QString [optional]
    * @param[in]  windingness QString [optional]
    * @param[in]  vehicle_max_speed qint32 [optional]
    * @param[in]  vehicle_weight qint32 [optional]
    * @param[in]  vehicle_axle_weight qint32 [optional]
    * @param[in]  vehicle_length float [optional]
    * @param[in]  vehicle_width float [optional]
    * @param[in]  vehicle_height float [optional]
    * @param[in]  vehicle_commercial bool [optional]
    * @param[in]  vehicle_load_type QString [optional]
    * @param[in]  constant_speed_consumption_in_liters_per_hundredkm QString [optional]
    * @param[in]  current_fuel_in_liters float [optional]
    * @param[in]  auxiliary_power_in_liters_per_hour float [optional]
    * @param[in]  fuel_energy_density_in_m_joules_per_liter float [optional]
    * @param[in]  acceleration_efficiency float [optional]
    * @param[in]  deceleration_efficiency float [optional]
    * @param[in]  uphill_efficiency float [optional]
    * @param[in]  downhill_efficiency float [optional]
    * @param[in]  vehicle_engine_type QString [optional]
    * @param[in]  constant_speed_consumption_ink_wh_per_hundredkm QString [optional]
    * @param[in]  oai_calculate_reachable_range_post_data_parameters OAICalculateReachableRangePostDataParameters [optional]
    */
    virtual void routingVersionNumberCalculateReachableRangeOriginContentTypePost(const qint32 &version_number, const QString &origin, const QString &content_type, const ::OpenAPI::OptionalParam<float> &fuel_budget_in_liters = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &energy_budget_ink_wh = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &time_budget_in_sec = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depart_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arrive_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &traffic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &avoid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &travel_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hilliness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &windingness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &vehicle_length = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_width = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_height = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &vehicle_commercial = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &vehicle_load_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &acceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &deceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &uphill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &downhill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICalculateReachableRangePostDataParameters> &oai_calculate_reachable_range_post_data_parameters = ::OpenAPI::OptionalParam<OAICalculateReachableRangePostDataParameters>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  locations QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  max_alternatives qint32 [optional]
    * @param[in]  alternative_type QString [optional]
    * @param[in]  min_deviation_distance qint32 [optional]
    * @param[in]  min_deviation_time qint32 [optional]
    * @param[in]  instructions_type QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  compute_best_order bool [optional]
    * @param[in]  route_representation QString [optional]
    * @param[in]  compute_travel_time_for QString [optional]
    * @param[in]  vehicle_heading qint32 [optional]
    * @param[in]  section_type QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  report QString [optional]
    * @param[in]  depart_at QString [optional]
    * @param[in]  arrive_at QString [optional]
    * @param[in]  route_type QString [optional]
    * @param[in]  traffic bool [optional]
    * @param[in]  avoid QString [optional]
    * @param[in]  travel_mode QString [optional]
    * @param[in]  hilliness QString [optional]
    * @param[in]  windingness QString [optional]
    * @param[in]  vehicle_max_speed qint32 [optional]
    * @param[in]  vehicle_weight qint32 [optional]
    * @param[in]  vehicle_axle_weight qint32 [optional]
    * @param[in]  vehicle_length float [optional]
    * @param[in]  vehicle_width float [optional]
    * @param[in]  vehicle_height float [optional]
    * @param[in]  vehicle_commercial bool [optional]
    * @param[in]  vehicle_load_type QString [optional]
    * @param[in]  vehicle_engine_type QString [optional]
    * @param[in]  constant_speed_consumption_in_liters_per_hundredkm QString [optional]
    * @param[in]  current_fuel_in_liters float [optional]
    * @param[in]  auxiliary_power_in_liters_per_hour float [optional]
    * @param[in]  fuel_energy_density_in_m_joules_per_liter float [optional]
    * @param[in]  acceleration_efficiency float [optional]
    * @param[in]  deceleration_efficiency float [optional]
    * @param[in]  uphill_efficiency float [optional]
    * @param[in]  downhill_efficiency float [optional]
    * @param[in]  constant_speed_consumption_ink_wh_per_hundredkm QString [optional]
    */
    virtual void routingVersionNumberCalculateRouteLocationsContentTypeGet(const qint32 &version_number, const QString &locations, const QString &content_type, const ::OpenAPI::OptionalParam<qint32> &max_alternatives = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alternative_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_deviation_distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_deviation_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &instructions_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &compute_best_order = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &route_representation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &compute_travel_time_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_heading = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &section_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depart_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arrive_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &traffic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &avoid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &travel_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hilliness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &windingness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &vehicle_length = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_width = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_height = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &vehicle_commercial = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &vehicle_load_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &acceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &deceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &uphill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &downhill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  locations QString [required]
    * @param[in]  content_type QString [required]
    * @param[in]  max_alternatives qint32 [optional]
    * @param[in]  alternative_type QString [optional]
    * @param[in]  min_deviation_distance qint32 [optional]
    * @param[in]  min_deviation_time qint32 [optional]
    * @param[in]  instructions_type QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  compute_best_order bool [optional]
    * @param[in]  route_representation QString [optional]
    * @param[in]  compute_travel_time_for QString [optional]
    * @param[in]  vehicle_heading qint32 [optional]
    * @param[in]  section_type QString [optional]
    * @param[in]  callback QString [optional]
    * @param[in]  report QString [optional]
    * @param[in]  depart_at QString [optional]
    * @param[in]  arrive_at QString [optional]
    * @param[in]  route_type QString [optional]
    * @param[in]  traffic bool [optional]
    * @param[in]  avoid QString [optional]
    * @param[in]  travel_mode QString [optional]
    * @param[in]  hilliness QString [optional]
    * @param[in]  windingness QString [optional]
    * @param[in]  vehicle_max_speed qint32 [optional]
    * @param[in]  vehicle_weight qint32 [optional]
    * @param[in]  vehicle_axle_weight qint32 [optional]
    * @param[in]  vehicle_length float [optional]
    * @param[in]  vehicle_width float [optional]
    * @param[in]  vehicle_height float [optional]
    * @param[in]  vehicle_commercial bool [optional]
    * @param[in]  vehicle_load_type QString [optional]
    * @param[in]  vehicle_engine_type QString [optional]
    * @param[in]  constant_speed_consumption_in_liters_per_hundredkm QString [optional]
    * @param[in]  current_fuel_in_liters float [optional]
    * @param[in]  auxiliary_power_in_liters_per_hour float [optional]
    * @param[in]  fuel_energy_density_in_m_joules_per_liter float [optional]
    * @param[in]  acceleration_efficiency float [optional]
    * @param[in]  deceleration_efficiency float [optional]
    * @param[in]  uphill_efficiency float [optional]
    * @param[in]  downhill_efficiency float [optional]
    * @param[in]  constant_speed_consumption_ink_wh_per_hundredkm QString [optional]
    * @param[in]  oai_calculate_route_post_data_parameters OAICalculateRoutePostDataParameters [optional]
    */
    virtual void routingVersionNumberCalculateRouteLocationsContentTypePost(const qint32 &version_number, const QString &locations, const QString &content_type, const ::OpenAPI::OptionalParam<qint32> &max_alternatives = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &alternative_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_deviation_distance = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &min_deviation_time = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &instructions_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &compute_best_order = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &route_representation = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &compute_travel_time_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_heading = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &section_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &report = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &depart_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &arrive_at = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &route_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &traffic = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &avoid = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &travel_mode = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &hilliness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &windingness = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_max_speed = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &vehicle_axle_weight = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<float> &vehicle_length = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_width = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &vehicle_height = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<bool> &vehicle_commercial = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<QString> &vehicle_load_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vehicle_engine_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_in_liters_per_hundredkm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &current_fuel_in_liters = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &auxiliary_power_in_liters_per_hour = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &fuel_energy_density_in_m_joules_per_liter = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &acceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &deceleration_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &uphill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &downhill_efficiency = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<QString> &constant_speed_consumption_ink_wh_per_hundredkm = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAICalculateRoutePostDataParameters> &oai_calculate_route_post_data_parameters = ::OpenAPI::OptionalParam<OAICalculateRoutePostDataParameters>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetCallback(OAIHttpRequestWorker *worker);
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostCallback(OAIHttpRequestWorker *worker);
    void routingVersionNumberCalculateRouteLocationsContentTypeGetCallback(OAIHttpRequestWorker *worker);
    void routingVersionNumberCalculateRouteLocationsContentTypePostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignal();
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostSignal();
    void routingVersionNumberCalculateRouteLocationsContentTypeGetSignal();
    void routingVersionNumberCalculateRouteLocationsContentTypePostSignal();


    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalFull(OAIHttpRequestWorker *worker);
    void routingVersionNumberCalculateRouteLocationsContentTypeGetSignalFull(OAIHttpRequestWorker *worker);
    void routingVersionNumberCalculateRouteLocationsContentTypePostSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalError() instead")
    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalError() instead")
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateRouteLocationsContentTypeGetSignalError() instead")
    void routingVersionNumberCalculateRouteLocationsContentTypeGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateRouteLocationsContentTypeGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateRouteLocationsContentTypePostSignalError() instead")
    void routingVersionNumberCalculateRouteLocationsContentTypePostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateRouteLocationsContentTypePostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalErrorFull() instead")
    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateReachableRangeOriginContentTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalErrorFull() instead")
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateReachableRangeOriginContentTypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateRouteLocationsContentTypeGetSignalErrorFull() instead")
    void routingVersionNumberCalculateRouteLocationsContentTypeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateRouteLocationsContentTypeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use routingVersionNumberCalculateRouteLocationsContentTypePostSignalErrorFull() instead")
    void routingVersionNumberCalculateRouteLocationsContentTypePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void routingVersionNumberCalculateRouteLocationsContentTypePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
