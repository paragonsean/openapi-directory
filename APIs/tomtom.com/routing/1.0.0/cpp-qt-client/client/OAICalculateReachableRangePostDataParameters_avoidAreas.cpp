/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAICalculateReachableRangePostDataParameters_avoidAreas.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAICalculateReachableRangePostDataParameters_avoidAreas::OAICalculateReachableRangePostDataParameters_avoidAreas(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAICalculateReachableRangePostDataParameters_avoidAreas::OAICalculateReachableRangePostDataParameters_avoidAreas() {
    this->initializeModel();
}

OAICalculateReachableRangePostDataParameters_avoidAreas::~OAICalculateReachableRangePostDataParameters_avoidAreas() {}

void OAICalculateReachableRangePostDataParameters_avoidAreas::initializeModel() {

    m_rectangles_isSet = false;
    m_rectangles_isValid = false;
}

void OAICalculateReachableRangePostDataParameters_avoidAreas::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAICalculateReachableRangePostDataParameters_avoidAreas::fromJsonObject(QJsonObject json) {

    m_rectangles_isValid = ::OpenAPI::fromJsonValue(m_rectangles, json[QString("rectangles")]);
    m_rectangles_isSet = !json[QString("rectangles")].isNull() && m_rectangles_isValid;
}

QString OAICalculateReachableRangePostDataParameters_avoidAreas::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAICalculateReachableRangePostDataParameters_avoidAreas::asJsonObject() const {
    QJsonObject obj;
    if (m_rectangles.size() > 0) {
        obj.insert(QString("rectangles"), ::OpenAPI::toJsonValue(m_rectangles));
    }
    return obj;
}

QList<OAICalculateReachableRangePostDataParameters_avoidAreas_rectangles_inner> OAICalculateReachableRangePostDataParameters_avoidAreas::getRectangles() const {
    return m_rectangles;
}
void OAICalculateReachableRangePostDataParameters_avoidAreas::setRectangles(const QList<OAICalculateReachableRangePostDataParameters_avoidAreas_rectangles_inner> &rectangles) {
    m_rectangles = rectangles;
    m_rectangles_isSet = true;
}

bool OAICalculateReachableRangePostDataParameters_avoidAreas::is_rectangles_Set() const{
    return m_rectangles_isSet;
}

bool OAICalculateReachableRangePostDataParameters_avoidAreas::is_rectangles_Valid() const{
    return m_rectangles_isValid;
}

bool OAICalculateReachableRangePostDataParameters_avoidAreas::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_rectangles.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAICalculateReachableRangePostDataParameters_avoidAreas::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
