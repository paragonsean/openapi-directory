/*
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.CalculateReachableRangePostDataParametersAvoidAreas;
import org.openapitools.client.model.CalculateRoutePostDataParametersSupportingPointsInner;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * CalculateRoutePostDataParameters
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:54:53.715746-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class CalculateRoutePostDataParameters {
  public static final String SERIALIZED_NAME_ALLOW_VIGNETTE = "allowVignette";
  @SerializedName(SERIALIZED_NAME_ALLOW_VIGNETTE)
  private List<String> allowVignette = new ArrayList<>();

  public static final String SERIALIZED_NAME_AVOID_AREAS = "avoidAreas";
  @SerializedName(SERIALIZED_NAME_AVOID_AREAS)
  private CalculateReachableRangePostDataParametersAvoidAreas avoidAreas;

  public static final String SERIALIZED_NAME_AVOID_VIGNETTE = "avoidVignette";
  @SerializedName(SERIALIZED_NAME_AVOID_VIGNETTE)
  private List<String> avoidVignette = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUPPORTING_POINTS = "supportingPoints";
  @SerializedName(SERIALIZED_NAME_SUPPORTING_POINTS)
  private List<CalculateRoutePostDataParametersSupportingPointsInner> supportingPoints = new ArrayList<>();

  public CalculateRoutePostDataParameters() {
  }

  public CalculateRoutePostDataParameters allowVignette(List<String> allowVignette) {
    this.allowVignette = allowVignette;
    return this;
  }

  public CalculateRoutePostDataParameters addAllowVignetteItem(String allowVignetteItem) {
    if (this.allowVignette == null) {
      this.allowVignette = new ArrayList<>();
    }
    this.allowVignette.add(allowVignetteItem);
    return this;
  }

  /**
   * Get allowVignette
   * @return allowVignette
   */
  @javax.annotation.Nullable
  public List<String> getAllowVignette() {
    return allowVignette;
  }

  public void setAllowVignette(List<String> allowVignette) {
    this.allowVignette = allowVignette;
  }


  public CalculateRoutePostDataParameters avoidAreas(CalculateReachableRangePostDataParametersAvoidAreas avoidAreas) {
    this.avoidAreas = avoidAreas;
    return this;
  }

  /**
   * Get avoidAreas
   * @return avoidAreas
   */
  @javax.annotation.Nullable
  public CalculateReachableRangePostDataParametersAvoidAreas getAvoidAreas() {
    return avoidAreas;
  }

  public void setAvoidAreas(CalculateReachableRangePostDataParametersAvoidAreas avoidAreas) {
    this.avoidAreas = avoidAreas;
  }


  public CalculateRoutePostDataParameters avoidVignette(List<String> avoidVignette) {
    this.avoidVignette = avoidVignette;
    return this;
  }

  public CalculateRoutePostDataParameters addAvoidVignetteItem(String avoidVignetteItem) {
    if (this.avoidVignette == null) {
      this.avoidVignette = new ArrayList<>();
    }
    this.avoidVignette.add(avoidVignetteItem);
    return this;
  }

  /**
   * Get avoidVignette
   * @return avoidVignette
   */
  @javax.annotation.Nullable
  public List<String> getAvoidVignette() {
    return avoidVignette;
  }

  public void setAvoidVignette(List<String> avoidVignette) {
    this.avoidVignette = avoidVignette;
  }


  public CalculateRoutePostDataParameters supportingPoints(List<CalculateRoutePostDataParametersSupportingPointsInner> supportingPoints) {
    this.supportingPoints = supportingPoints;
    return this;
  }

  public CalculateRoutePostDataParameters addSupportingPointsItem(CalculateRoutePostDataParametersSupportingPointsInner supportingPointsItem) {
    if (this.supportingPoints == null) {
      this.supportingPoints = new ArrayList<>();
    }
    this.supportingPoints.add(supportingPointsItem);
    return this;
  }

  /**
   * Get supportingPoints
   * @return supportingPoints
   */
  @javax.annotation.Nullable
  public List<CalculateRoutePostDataParametersSupportingPointsInner> getSupportingPoints() {
    return supportingPoints;
  }

  public void setSupportingPoints(List<CalculateRoutePostDataParametersSupportingPointsInner> supportingPoints) {
    this.supportingPoints = supportingPoints;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CalculateRoutePostDataParameters calculateRoutePostDataParameters = (CalculateRoutePostDataParameters) o;
    return Objects.equals(this.allowVignette, calculateRoutePostDataParameters.allowVignette) &&
        Objects.equals(this.avoidAreas, calculateRoutePostDataParameters.avoidAreas) &&
        Objects.equals(this.avoidVignette, calculateRoutePostDataParameters.avoidVignette) &&
        Objects.equals(this.supportingPoints, calculateRoutePostDataParameters.supportingPoints);
  }

  @Override
  public int hashCode() {
    return Objects.hash(allowVignette, avoidAreas, avoidVignette, supportingPoints);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CalculateRoutePostDataParameters {\n");
    sb.append("    allowVignette: ").append(toIndentedString(allowVignette)).append("\n");
    sb.append("    avoidAreas: ").append(toIndentedString(avoidAreas)).append("\n");
    sb.append("    avoidVignette: ").append(toIndentedString(avoidVignette)).append("\n");
    sb.append("    supportingPoints: ").append(toIndentedString(supportingPoints)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("allowVignette");
    openapiFields.add("avoidAreas");
    openapiFields.add("avoidVignette");
    openapiFields.add("supportingPoints");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to CalculateRoutePostDataParameters
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!CalculateRoutePostDataParameters.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CalculateRoutePostDataParameters is not found in the empty JSON string", CalculateRoutePostDataParameters.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!CalculateRoutePostDataParameters.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `CalculateRoutePostDataParameters` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the optional json data is an array if present
      if (jsonObj.get("allowVignette") != null && !jsonObj.get("allowVignette").isJsonNull() && !jsonObj.get("allowVignette").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `allowVignette` to be an array in the JSON string but got `%s`", jsonObj.get("allowVignette").toString()));
      }
      // validate the optional field `avoidAreas`
      if (jsonObj.get("avoidAreas") != null && !jsonObj.get("avoidAreas").isJsonNull()) {
        CalculateReachableRangePostDataParametersAvoidAreas.validateJsonElement(jsonObj.get("avoidAreas"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("avoidVignette") != null && !jsonObj.get("avoidVignette").isJsonNull() && !jsonObj.get("avoidVignette").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `avoidVignette` to be an array in the JSON string but got `%s`", jsonObj.get("avoidVignette").toString()));
      }
      if (jsonObj.get("supportingPoints") != null && !jsonObj.get("supportingPoints").isJsonNull()) {
        JsonArray jsonArraysupportingPoints = jsonObj.getAsJsonArray("supportingPoints");
        if (jsonArraysupportingPoints != null) {
          // ensure the json data is an array
          if (!jsonObj.get("supportingPoints").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `supportingPoints` to be an array in the JSON string but got `%s`", jsonObj.get("supportingPoints").toString()));
          }

          // validate the optional field `supportingPoints` (array)
          for (int i = 0; i < jsonArraysupportingPoints.size(); i++) {
            CalculateRoutePostDataParametersSupportingPointsInner.validateJsonElement(jsonArraysupportingPoints.get(i));
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CalculateRoutePostDataParameters.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CalculateRoutePostDataParameters' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CalculateRoutePostDataParameters> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CalculateRoutePostDataParameters.class));

       return (TypeAdapter<T>) new TypeAdapter<CalculateRoutePostDataParameters>() {
           @Override
           public void write(JsonWriter out, CalculateRoutePostDataParameters value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public CalculateRoutePostDataParameters read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of CalculateRoutePostDataParameters given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of CalculateRoutePostDataParameters
   * @throws IOException if the JSON string is invalid with respect to CalculateRoutePostDataParameters
   */
  public static CalculateRoutePostDataParameters fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CalculateRoutePostDataParameters.class);
  }

  /**
   * Convert an instance of CalculateRoutePostDataParameters to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

