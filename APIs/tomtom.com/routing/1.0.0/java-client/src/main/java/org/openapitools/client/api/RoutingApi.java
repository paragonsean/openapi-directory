/*
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.CalculateReachableRangePostDataParameters;
import org.openapitools.client.model.CalculateRoutePostDataParameters;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RoutingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RoutingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RoutingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for routingVersionNumberCalculateReachableRangeOriginContentTypeGet
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateReachableRangeOriginContentTypeGetCall(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "contentType" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fuelBudgetInLiters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuelBudgetInLiters", fuelBudgetInLiters));
        }

        if (energyBudgetInkWh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("energyBudgetInkWh", energyBudgetInkWh));
        }

        if (timeBudgetInSec != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeBudgetInSec", timeBudgetInSec));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (report != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report", report));
        }

        if (departAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departAt", departAt));
        }

        if (arriveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arriveAt", arriveAt));
        }

        if (routeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeType", routeType));
        }

        if (traffic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("traffic", traffic));
        }

        if (avoid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avoid", avoid));
        }

        if (travelMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelMode", travelMode));
        }

        if (hilliness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hilliness", hilliness));
        }

        if (windingness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windingness", windingness));
        }

        if (vehicleMaxSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleMaxSpeed", vehicleMaxSpeed));
        }

        if (vehicleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWeight", vehicleWeight));
        }

        if (vehicleAxleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleAxleWeight", vehicleAxleWeight));
        }

        if (vehicleLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLength", vehicleLength));
        }

        if (vehicleWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWidth", vehicleWidth));
        }

        if (vehicleHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleHeight", vehicleHeight));
        }

        if (vehicleCommercial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleCommercial", vehicleCommercial));
        }

        if (vehicleLoadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLoadType", vehicleLoadType));
        }

        if (constantSpeedConsumptionInLitersPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInLitersPerHundredkm", constantSpeedConsumptionInLitersPerHundredkm));
        }

        if (currentFuelInLiters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentFuelInLiters", currentFuelInLiters));
        }

        if (auxiliaryPowerInLitersPerHour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auxiliaryPowerInLitersPerHour", auxiliaryPowerInLitersPerHour));
        }

        if (fuelEnergyDensityInMJoulesPerLiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuelEnergyDensityInMJoulesPerLiter", fuelEnergyDensityInMJoulesPerLiter));
        }

        if (accelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accelerationEfficiency", accelerationEfficiency));
        }

        if (decelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decelerationEfficiency", decelerationEfficiency));
        }

        if (uphillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uphillEfficiency", uphillEfficiency));
        }

        if (downhillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downhillEfficiency", downhillEfficiency));
        }

        if (vehicleEngineType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleEngineType", vehicleEngineType));
        }

        if (constantSpeedConsumptionInkWhPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInkWhPerHundredkm", constantSpeedConsumptionInkWhPerHundredkm));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routingVersionNumberCalculateReachableRangeOriginContentTypeGetValidateBeforeCall(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateReachableRangeOriginContentTypeGet(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling routingVersionNumberCalculateReachableRangeOriginContentTypeGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateReachableRangeOriginContentTypeGet(Async)");
        }

        return routingVersionNumberCalculateReachableRangeOriginContentTypeGetCall(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, _callback);

    }

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public void routingVersionNumberCalculateReachableRangeOriginContentTypeGet(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm) throws ApiException {
        routingVersionNumberCalculateReachableRangeOriginContentTypeGetWithHttpInfo(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm);
    }

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> routingVersionNumberCalculateReachableRangeOriginContentTypeGetWithHttpInfo(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm) throws ApiException {
        okhttp3.Call localVarCall = routingVersionNumberCalculateReachableRangeOriginContentTypeGetValidateBeforeCall(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reachable Range (asynchronously)
     * Calculates a set of locations that can be reached from the origin point.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateReachableRangeOriginContentTypeGetAsync(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = routingVersionNumberCalculateReachableRangeOriginContentTypeGetValidateBeforeCall(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for routingVersionNumberCalculateReachableRangeOriginContentTypePost
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateReachableRangePostDataParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateReachableRangeOriginContentTypePostCall(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calculateReachableRangePostDataParameters;

        // create path and map variables
        String localVarPath = "/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "origin" + "}", localVarApiClient.escapeString(origin.toString()))
            .replace("{" + "contentType" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (fuelBudgetInLiters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuelBudgetInLiters", fuelBudgetInLiters));
        }

        if (energyBudgetInkWh != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("energyBudgetInkWh", energyBudgetInkWh));
        }

        if (timeBudgetInSec != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timeBudgetInSec", timeBudgetInSec));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (report != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report", report));
        }

        if (departAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departAt", departAt));
        }

        if (arriveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arriveAt", arriveAt));
        }

        if (routeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeType", routeType));
        }

        if (traffic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("traffic", traffic));
        }

        if (avoid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avoid", avoid));
        }

        if (travelMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelMode", travelMode));
        }

        if (hilliness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hilliness", hilliness));
        }

        if (windingness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windingness", windingness));
        }

        if (vehicleMaxSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleMaxSpeed", vehicleMaxSpeed));
        }

        if (vehicleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWeight", vehicleWeight));
        }

        if (vehicleAxleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleAxleWeight", vehicleAxleWeight));
        }

        if (vehicleLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLength", vehicleLength));
        }

        if (vehicleWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWidth", vehicleWidth));
        }

        if (vehicleHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleHeight", vehicleHeight));
        }

        if (vehicleCommercial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleCommercial", vehicleCommercial));
        }

        if (vehicleLoadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLoadType", vehicleLoadType));
        }

        if (constantSpeedConsumptionInLitersPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInLitersPerHundredkm", constantSpeedConsumptionInLitersPerHundredkm));
        }

        if (currentFuelInLiters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentFuelInLiters", currentFuelInLiters));
        }

        if (auxiliaryPowerInLitersPerHour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auxiliaryPowerInLitersPerHour", auxiliaryPowerInLitersPerHour));
        }

        if (fuelEnergyDensityInMJoulesPerLiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuelEnergyDensityInMJoulesPerLiter", fuelEnergyDensityInMJoulesPerLiter));
        }

        if (accelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accelerationEfficiency", accelerationEfficiency));
        }

        if (decelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decelerationEfficiency", decelerationEfficiency));
        }

        if (uphillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uphillEfficiency", uphillEfficiency));
        }

        if (downhillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downhillEfficiency", downhillEfficiency));
        }

        if (vehicleEngineType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleEngineType", vehicleEngineType));
        }

        if (constantSpeedConsumptionInkWhPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInkWhPerHundredkm", constantSpeedConsumptionInkWhPerHundredkm));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routingVersionNumberCalculateReachableRangeOriginContentTypePostValidateBeforeCall(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateReachableRangeOriginContentTypePost(Async)");
        }

        // verify the required parameter 'origin' is set
        if (origin == null) {
            throw new ApiException("Missing the required parameter 'origin' when calling routingVersionNumberCalculateReachableRangeOriginContentTypePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateReachableRangeOriginContentTypePost(Async)");
        }

        return routingVersionNumberCalculateReachableRangeOriginContentTypePostCall(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, calculateReachableRangePostDataParameters, _callback);

    }

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateReachableRangePostDataParameters  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public void routingVersionNumberCalculateReachableRangeOriginContentTypePost(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters) throws ApiException {
        routingVersionNumberCalculateReachableRangeOriginContentTypePostWithHttpInfo(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, calculateReachableRangePostDataParameters);
    }

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateReachableRangePostDataParameters  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> routingVersionNumberCalculateReachableRangeOriginContentTypePostWithHttpInfo(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters) throws ApiException {
        okhttp3.Call localVarCall = routingVersionNumberCalculateReachableRangeOriginContentTypePostValidateBeforeCall(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, calculateReachableRangePostDataParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reachable Range (asynchronously)
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param origin Point from which the range calculation should start. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param fuelBudgetInLiters Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model. (optional)
     * @param energyBudgetInkWh Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model. (optional)
     * @param timeBudgetInSec Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateReachableRangePostDataParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a range was calculated and the body of the response contains the polygon description and further data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified or are mutually exclusive, or the origin point specified in the request is not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateReachableRangeOriginContentTypePostAsync(Integer versionNumber, String origin, String contentType, Float fuelBudgetInLiters, Float energyBudgetInkWh, Float timeBudgetInSec, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String vehicleEngineType, String constantSpeedConsumptionInkWhPerHundredkm, CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = routingVersionNumberCalculateReachableRangeOriginContentTypePostValidateBeforeCall(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, calculateReachableRangePostDataParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for routingVersionNumberCalculateRouteLocationsContentTypeGet
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateRouteLocationsContentTypeGetCall(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "locations" + "}", localVarApiClient.escapeString(locations.toString()))
            .replace("{" + "contentType" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxAlternatives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAlternatives", maxAlternatives));
        }

        if (alternativeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alternativeType", alternativeType));
        }

        if (minDeviationDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDeviationDistance", minDeviationDistance));
        }

        if (minDeviationTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDeviationTime", minDeviationTime));
        }

        if (instructionsType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructionsType", instructionsType));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (computeBestOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("computeBestOrder", computeBestOrder));
        }

        if (routeRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeRepresentation", routeRepresentation));
        }

        if (computeTravelTimeFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("computeTravelTimeFor", computeTravelTimeFor));
        }

        if (vehicleHeading != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleHeading", vehicleHeading));
        }

        if (sectionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sectionType", sectionType));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (report != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report", report));
        }

        if (departAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departAt", departAt));
        }

        if (arriveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arriveAt", arriveAt));
        }

        if (routeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeType", routeType));
        }

        if (traffic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("traffic", traffic));
        }

        if (avoid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avoid", avoid));
        }

        if (travelMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelMode", travelMode));
        }

        if (hilliness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hilliness", hilliness));
        }

        if (windingness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windingness", windingness));
        }

        if (vehicleMaxSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleMaxSpeed", vehicleMaxSpeed));
        }

        if (vehicleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWeight", vehicleWeight));
        }

        if (vehicleAxleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleAxleWeight", vehicleAxleWeight));
        }

        if (vehicleLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLength", vehicleLength));
        }

        if (vehicleWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWidth", vehicleWidth));
        }

        if (vehicleHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleHeight", vehicleHeight));
        }

        if (vehicleCommercial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleCommercial", vehicleCommercial));
        }

        if (vehicleLoadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLoadType", vehicleLoadType));
        }

        if (vehicleEngineType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleEngineType", vehicleEngineType));
        }

        if (constantSpeedConsumptionInLitersPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInLitersPerHundredkm", constantSpeedConsumptionInLitersPerHundredkm));
        }

        if (currentFuelInLiters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentFuelInLiters", currentFuelInLiters));
        }

        if (auxiliaryPowerInLitersPerHour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auxiliaryPowerInLitersPerHour", auxiliaryPowerInLitersPerHour));
        }

        if (fuelEnergyDensityInMJoulesPerLiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuelEnergyDensityInMJoulesPerLiter", fuelEnergyDensityInMJoulesPerLiter));
        }

        if (accelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accelerationEfficiency", accelerationEfficiency));
        }

        if (decelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decelerationEfficiency", decelerationEfficiency));
        }

        if (uphillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uphillEfficiency", uphillEfficiency));
        }

        if (downhillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downhillEfficiency", downhillEfficiency));
        }

        if (constantSpeedConsumptionInkWhPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInkWhPerHundredkm", constantSpeedConsumptionInkWhPerHundredkm));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routingVersionNumberCalculateRouteLocationsContentTypeGetValidateBeforeCall(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateRouteLocationsContentTypeGet(Async)");
        }

        // verify the required parameter 'locations' is set
        if (locations == null) {
            throw new ApiException("Missing the required parameter 'locations' when calling routingVersionNumberCalculateRouteLocationsContentTypeGet(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateRouteLocationsContentTypeGet(Async)");
        }

        return routingVersionNumberCalculateRouteLocationsContentTypeGetCall(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, _callback);

    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public void routingVersionNumberCalculateRouteLocationsContentTypeGet(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm) throws ApiException {
        routingVersionNumberCalculateRouteLocationsContentTypeGetWithHttpInfo(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm);
    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> routingVersionNumberCalculateRouteLocationsContentTypeGetWithHttpInfo(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm) throws ApiException {
        okhttp3.Call localVarCall = routingVersionNumberCalculateRouteLocationsContentTypeGetValidateBeforeCall(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Calculate Route (asynchronously)
     * Calculates a route between an origin and a destination.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateRouteLocationsContentTypeGetAsync(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = routingVersionNumberCalculateRouteLocationsContentTypeGetValidateBeforeCall(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for routingVersionNumberCalculateRouteLocationsContentTypePost
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateRoutePostDataParameters  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateRouteLocationsContentTypePostCall(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, CalculateRoutePostDataParameters calculateRoutePostDataParameters, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = calculateRoutePostDataParameters;

        // create path and map variables
        String localVarPath = "/routing/{versionNumber}/calculateRoute/{locations}/{contentType}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "locations" + "}", localVarApiClient.escapeString(locations.toString()))
            .replace("{" + "contentType" + "}", localVarApiClient.escapeString(contentType.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxAlternatives != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxAlternatives", maxAlternatives));
        }

        if (alternativeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("alternativeType", alternativeType));
        }

        if (minDeviationDistance != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDeviationDistance", minDeviationDistance));
        }

        if (minDeviationTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minDeviationTime", minDeviationTime));
        }

        if (instructionsType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("instructionsType", instructionsType));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (computeBestOrder != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("computeBestOrder", computeBestOrder));
        }

        if (routeRepresentation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeRepresentation", routeRepresentation));
        }

        if (computeTravelTimeFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("computeTravelTimeFor", computeTravelTimeFor));
        }

        if (vehicleHeading != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleHeading", vehicleHeading));
        }

        if (sectionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("sectionType", sectionType));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        if (report != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("report", report));
        }

        if (departAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("departAt", departAt));
        }

        if (arriveAt != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("arriveAt", arriveAt));
        }

        if (routeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routeType", routeType));
        }

        if (traffic != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("traffic", traffic));
        }

        if (avoid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("avoid", avoid));
        }

        if (travelMode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("travelMode", travelMode));
        }

        if (hilliness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("hilliness", hilliness));
        }

        if (windingness != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("windingness", windingness));
        }

        if (vehicleMaxSpeed != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleMaxSpeed", vehicleMaxSpeed));
        }

        if (vehicleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWeight", vehicleWeight));
        }

        if (vehicleAxleWeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleAxleWeight", vehicleAxleWeight));
        }

        if (vehicleLength != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLength", vehicleLength));
        }

        if (vehicleWidth != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleWidth", vehicleWidth));
        }

        if (vehicleHeight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleHeight", vehicleHeight));
        }

        if (vehicleCommercial != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleCommercial", vehicleCommercial));
        }

        if (vehicleLoadType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleLoadType", vehicleLoadType));
        }

        if (vehicleEngineType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("vehicleEngineType", vehicleEngineType));
        }

        if (constantSpeedConsumptionInLitersPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInLitersPerHundredkm", constantSpeedConsumptionInLitersPerHundredkm));
        }

        if (currentFuelInLiters != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("currentFuelInLiters", currentFuelInLiters));
        }

        if (auxiliaryPowerInLitersPerHour != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("auxiliaryPowerInLitersPerHour", auxiliaryPowerInLitersPerHour));
        }

        if (fuelEnergyDensityInMJoulesPerLiter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fuelEnergyDensityInMJoulesPerLiter", fuelEnergyDensityInMJoulesPerLiter));
        }

        if (accelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accelerationEfficiency", accelerationEfficiency));
        }

        if (decelerationEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("decelerationEfficiency", decelerationEfficiency));
        }

        if (uphillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("uphillEfficiency", uphillEfficiency));
        }

        if (downhillEfficiency != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("downhillEfficiency", downhillEfficiency));
        }

        if (constantSpeedConsumptionInkWhPerHundredkm != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("constantSpeedConsumptionInkWhPerHundredkm", constantSpeedConsumptionInkWhPerHundredkm));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "application/xml"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call routingVersionNumberCalculateRouteLocationsContentTypePostValidateBeforeCall(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, CalculateRoutePostDataParameters calculateRoutePostDataParameters, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateRouteLocationsContentTypePost(Async)");
        }

        // verify the required parameter 'locations' is set
        if (locations == null) {
            throw new ApiException("Missing the required parameter 'locations' when calling routingVersionNumberCalculateRouteLocationsContentTypePost(Async)");
        }

        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateRouteLocationsContentTypePost(Async)");
        }

        return routingVersionNumberCalculateRouteLocationsContentTypePostCall(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, calculateRoutePostDataParameters, _callback);

    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateRoutePostDataParameters  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public void routingVersionNumberCalculateRouteLocationsContentTypePost(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, CalculateRoutePostDataParameters calculateRoutePostDataParameters) throws ApiException {
        routingVersionNumberCalculateRouteLocationsContentTypePostWithHttpInfo(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, calculateRoutePostDataParameters);
    }

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateRoutePostDataParameters  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> routingVersionNumberCalculateRouteLocationsContentTypePostWithHttpInfo(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, CalculateRoutePostDataParameters calculateRoutePostDataParameters) throws ApiException {
        okhttp3.Call localVarCall = routingVersionNumberCalculateRouteLocationsContentTypePostValidateBeforeCall(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, calculateRoutePostDataParameters, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Calculate Route (asynchronously)
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     * @param versionNumber Service version number. The current value is 1. (required)
     * @param locations Locations through which the calculated route must pass. (required)
     * @param contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters. (required)
     * @param maxAlternatives Number of alternative routes to be calculated. (optional, default to 0)
     * @param alternativeType Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route. (optional, default to anyRoute)
     * @param minDeviationDistance All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point. (optional, default to 0)
     * @param minDeviationTime All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point. (optional, default to 0)
     * @param instructionsType If specified, guidance instructions will be returned (if available). (optional)
     * @param language The language parameter determines the language of the guidance messages. (optional, default to en-GB)
     * @param computeBestOrder Re-order the route waypoints to reduce the route length. (optional, default to false)
     * @param routeRepresentation Specifies the representation of the set of routes provided as a response. (optional, default to polyline)
     * @param computeTravelTimeFor Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time. (optional, default to none)
     * @param vehicleHeading The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.). (optional)
     * @param sectionType Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic (optional, default to travelMode)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to callback)
     * @param report Specifies which data should be reported for diagnosis purposes. (optional)
     * @param departAt The date and time of departure from the origin point. Departure times apart from &lt;i&gt;now&lt;/i&gt; must be specified as a dateTime. (optional, default to now)
     * @param arriveAt The date and time of arrival at the destination point. It must be specified as a dateTime. (optional)
     * @param routeType The type of route requested. (optional, default to fastest)
     * @param traffic Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used. (optional, default to true)
     * @param avoid Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads (optional)
     * @param travelMode The mode of travel for the requested route. (optional, default to car)
     * @param hilliness Degree of hilliness for calculating a thrilling route. (optional, default to normal)
     * @param windingness Amount that a thrilling route should wind. (optional, default to normal)
     * @param vehicleMaxSpeed Maximum speed of the vehicle in km/hour. (optional, default to 0)
     * @param vehicleWeight Weight of the vehicle in kilograms. (optional, default to 0)
     * @param vehicleAxleWeight Weight per axle of the vehicle in kg. (optional, default to 0)
     * @param vehicleLength Length of the vehicle in meters. (optional, default to 0)
     * @param vehicleWidth Width of the vehicle in meters. (optional, default to 0)
     * @param vehicleHeight Height of the vehicle in meters. (optional, default to 0)
     * @param vehicleCommercial Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads. (optional, default to false)
     * @param vehicleLoadType Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - &lt;i&gt;USHazmatClass1&lt;/i&gt; Explosives   - &lt;i&gt;USHazmatClass2&lt;/i&gt; Compressed gas   - &lt;i&gt;USHazmatClass3&lt;/i&gt; Flammable liquids   - &lt;i&gt;USHazmatClass4&lt;/i&gt; Flammable solids   - &lt;i&gt;USHazmatClass5&lt;/i&gt; Oxidizers   - &lt;i&gt;USHazmatClass6&lt;/i&gt; Poisons   - &lt;i&gt;USHazmatClass7&lt;/i&gt; Radioactive   - &lt;i&gt;USHazmatClass8&lt;/i&gt; Corrosives   - &lt;i&gt;USHazmatClass9&lt;/i&gt; Miscellaneous  Use these for routing in all other countries:    - &lt;i&gt;otherHazmatExplosive&lt;/i&gt; Explosives   - &lt;i&gt;otherHazmatGeneral&lt;/i&gt; Miscellaneous   - &lt;i&gt;otherHazmatHarmfulToWater&lt;/i&gt; Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for &lt;b&gt;travelMode&lt;/b&gt;&#x3D;&lt;i&gt;truck&lt;/i&gt;. (optional)
     * @param vehicleEngineType Engine type of the vehicle. (optional, default to combustion)
     * @param constantSpeedConsumptionInLitersPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param currentFuelInLiters Specifies the current supply of fuel in liters. (optional)
     * @param auxiliaryPowerInLitersPerHour Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour. (optional)
     * @param fuelEnergyDensityInMJoulesPerLiter Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ). (optional)
     * @param accelerationEfficiency Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param decelerationEfficiency Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost). (optional)
     * @param uphillEfficiency Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed). (optional)
     * @param downhillEfficiency Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost). (optional)
     * @param constantSpeedConsumptionInkWhPerHundredkm Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs. (optional)
     * @param calculateRoutePostDataParameters  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: a route was calculated and the body of the response contains the route description and any other requested data. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad request: one or more parameters were incorrectly specified, are mutually exclusive, the points in the request are not connected by the road network or the points in the request are not near enough to a road. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Permission, capacity, or authentication issues:   - Forbidden   - Not authorized   - Account inactive   - Account over queries per second limit   - Account over rate limit   - Rate limit exceeded </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found: the requested resource could not be found, but it may be available again in the future. </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the client used a HTTP method other than GET or POST. </td><td>  -  </td></tr>
        <tr><td> 408 </td><td> Request timeout. </td><td>  -  </td></tr>
        <tr><td> 414 </td><td> Requested uri is too long. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
        <tr><td> 502 </td><td> Internal network connectivity issue. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> Service currently unavailable. </td><td>  -  </td></tr>
        <tr><td> 504 </td><td> Internal network connectivity issue or a request that has taken too long to complete. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Service not found. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call routingVersionNumberCalculateRouteLocationsContentTypePostAsync(Integer versionNumber, String locations, String contentType, Integer maxAlternatives, String alternativeType, Integer minDeviationDistance, Integer minDeviationTime, String instructionsType, String language, Boolean computeBestOrder, String routeRepresentation, String computeTravelTimeFor, Integer vehicleHeading, String sectionType, String paramCallback, String report, String departAt, String arriveAt, String routeType, Boolean traffic, String avoid, String travelMode, String hilliness, String windingness, Integer vehicleMaxSpeed, Integer vehicleWeight, Integer vehicleAxleWeight, Float vehicleLength, Float vehicleWidth, Float vehicleHeight, Boolean vehicleCommercial, String vehicleLoadType, String vehicleEngineType, String constantSpeedConsumptionInLitersPerHundredkm, Float currentFuelInLiters, Float auxiliaryPowerInLitersPerHour, Float fuelEnergyDensityInMJoulesPerLiter, Float accelerationEfficiency, Float decelerationEfficiency, Float uphillEfficiency, Float downhillEfficiency, String constantSpeedConsumptionInkWhPerHundredkm, CalculateRoutePostDataParameters calculateRoutePostDataParameters, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = routingVersionNumberCalculateRouteLocationsContentTypePostValidateBeforeCall(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, calculateRoutePostDataParameters, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
