/*
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.CalculateReachableRangePostDataParameters;
import org.openapitools.client.model.CalculateRoutePostDataParameters;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RoutingApi
 */
@Disabled
public class RoutingApiTest {

    private final RoutingApi api = new RoutingApi();

    /**
     * Reachable Range
     *
     * Calculates a set of locations that can be reached from the origin point.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routingVersionNumberCalculateReachableRangeOriginContentTypeGetTest() throws ApiException {
        Integer versionNumber = null;
        String origin = null;
        String contentType = null;
        Float fuelBudgetInLiters = null;
        Float energyBudgetInkWh = null;
        Float timeBudgetInSec = null;
        String paramCallback = null;
        String report = null;
        String departAt = null;
        String arriveAt = null;
        String routeType = null;
        Boolean traffic = null;
        String avoid = null;
        String travelMode = null;
        String hilliness = null;
        String windingness = null;
        Integer vehicleMaxSpeed = null;
        Integer vehicleWeight = null;
        Integer vehicleAxleWeight = null;
        Float vehicleLength = null;
        Float vehicleWidth = null;
        Float vehicleHeight = null;
        Boolean vehicleCommercial = null;
        String vehicleLoadType = null;
        String constantSpeedConsumptionInLitersPerHundredkm = null;
        Float currentFuelInLiters = null;
        Float auxiliaryPowerInLitersPerHour = null;
        Float fuelEnergyDensityInMJoulesPerLiter = null;
        Float accelerationEfficiency = null;
        Float decelerationEfficiency = null;
        Float uphillEfficiency = null;
        Float downhillEfficiency = null;
        String vehicleEngineType = null;
        String constantSpeedConsumptionInkWhPerHundredkm = null;
        api.routingVersionNumberCalculateReachableRangeOriginContentTypeGet(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm);
        // TODO: test validations
    }

    /**
     * Reachable Range
     *
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routingVersionNumberCalculateReachableRangeOriginContentTypePostTest() throws ApiException {
        Integer versionNumber = null;
        String origin = null;
        String contentType = null;
        Float fuelBudgetInLiters = null;
        Float energyBudgetInkWh = null;
        Float timeBudgetInSec = null;
        String paramCallback = null;
        String report = null;
        String departAt = null;
        String arriveAt = null;
        String routeType = null;
        Boolean traffic = null;
        String avoid = null;
        String travelMode = null;
        String hilliness = null;
        String windingness = null;
        Integer vehicleMaxSpeed = null;
        Integer vehicleWeight = null;
        Integer vehicleAxleWeight = null;
        Float vehicleLength = null;
        Float vehicleWidth = null;
        Float vehicleHeight = null;
        Boolean vehicleCommercial = null;
        String vehicleLoadType = null;
        String constantSpeedConsumptionInLitersPerHundredkm = null;
        Float currentFuelInLiters = null;
        Float auxiliaryPowerInLitersPerHour = null;
        Float fuelEnergyDensityInMJoulesPerLiter = null;
        Float accelerationEfficiency = null;
        Float decelerationEfficiency = null;
        Float uphillEfficiency = null;
        Float downhillEfficiency = null;
        String vehicleEngineType = null;
        String constantSpeedConsumptionInkWhPerHundredkm = null;
        CalculateReachableRangePostDataParameters calculateReachableRangePostDataParameters = null;
        api.routingVersionNumberCalculateReachableRangeOriginContentTypePost(versionNumber, origin, contentType, fuelBudgetInLiters, energyBudgetInkWh, timeBudgetInSec, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, vehicleEngineType, constantSpeedConsumptionInkWhPerHundredkm, calculateReachableRangePostDataParameters);
        // TODO: test validations
    }

    /**
     * Calculate Route
     *
     * Calculates a route between an origin and a destination.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routingVersionNumberCalculateRouteLocationsContentTypeGetTest() throws ApiException {
        Integer versionNumber = null;
        String locations = null;
        String contentType = null;
        Integer maxAlternatives = null;
        String alternativeType = null;
        Integer minDeviationDistance = null;
        Integer minDeviationTime = null;
        String instructionsType = null;
        String language = null;
        Boolean computeBestOrder = null;
        String routeRepresentation = null;
        String computeTravelTimeFor = null;
        Integer vehicleHeading = null;
        String sectionType = null;
        String paramCallback = null;
        String report = null;
        String departAt = null;
        String arriveAt = null;
        String routeType = null;
        Boolean traffic = null;
        String avoid = null;
        String travelMode = null;
        String hilliness = null;
        String windingness = null;
        Integer vehicleMaxSpeed = null;
        Integer vehicleWeight = null;
        Integer vehicleAxleWeight = null;
        Float vehicleLength = null;
        Float vehicleWidth = null;
        Float vehicleHeight = null;
        Boolean vehicleCommercial = null;
        String vehicleLoadType = null;
        String vehicleEngineType = null;
        String constantSpeedConsumptionInLitersPerHundredkm = null;
        Float currentFuelInLiters = null;
        Float auxiliaryPowerInLitersPerHour = null;
        Float fuelEnergyDensityInMJoulesPerLiter = null;
        Float accelerationEfficiency = null;
        Float decelerationEfficiency = null;
        Float uphillEfficiency = null;
        Float downhillEfficiency = null;
        String constantSpeedConsumptionInkWhPerHundredkm = null;
        api.routingVersionNumberCalculateRouteLocationsContentTypeGet(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm);
        // TODO: test validations
    }

    /**
     * Calculate Route
     *
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: &lt;em&gt;supportingPoints&lt;/em&gt;, &lt;em&gt;allowVignette&lt;/em&gt;, &lt;em&gt;avoidVignette&lt;/em&gt;, &lt;em&gt;avoidAreas&lt;/em&gt;.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void routingVersionNumberCalculateRouteLocationsContentTypePostTest() throws ApiException {
        Integer versionNumber = null;
        String locations = null;
        String contentType = null;
        Integer maxAlternatives = null;
        String alternativeType = null;
        Integer minDeviationDistance = null;
        Integer minDeviationTime = null;
        String instructionsType = null;
        String language = null;
        Boolean computeBestOrder = null;
        String routeRepresentation = null;
        String computeTravelTimeFor = null;
        Integer vehicleHeading = null;
        String sectionType = null;
        String paramCallback = null;
        String report = null;
        String departAt = null;
        String arriveAt = null;
        String routeType = null;
        Boolean traffic = null;
        String avoid = null;
        String travelMode = null;
        String hilliness = null;
        String windingness = null;
        Integer vehicleMaxSpeed = null;
        Integer vehicleWeight = null;
        Integer vehicleAxleWeight = null;
        Float vehicleLength = null;
        Float vehicleWidth = null;
        Float vehicleHeight = null;
        Boolean vehicleCommercial = null;
        String vehicleLoadType = null;
        String vehicleEngineType = null;
        String constantSpeedConsumptionInLitersPerHundredkm = null;
        Float currentFuelInLiters = null;
        Float auxiliaryPowerInLitersPerHour = null;
        Float fuelEnergyDensityInMJoulesPerLiter = null;
        Float accelerationEfficiency = null;
        Float decelerationEfficiency = null;
        Float uphillEfficiency = null;
        Float downhillEfficiency = null;
        String constantSpeedConsumptionInkWhPerHundredkm = null;
        CalculateRoutePostDataParameters calculateRoutePostDataParameters = null;
        api.routingVersionNumberCalculateRouteLocationsContentTypePost(versionNumber, locations, contentType, maxAlternatives, alternativeType, minDeviationDistance, minDeviationTime, instructionsType, language, computeBestOrder, routeRepresentation, computeTravelTimeFor, vehicleHeading, sectionType, paramCallback, report, departAt, arriveAt, routeType, traffic, avoid, travelMode, hilliness, windingness, vehicleMaxSpeed, vehicleWeight, vehicleAxleWeight, vehicleLength, vehicleWidth, vehicleHeight, vehicleCommercial, vehicleLoadType, vehicleEngineType, constantSpeedConsumptionInLitersPerHundredkm, currentFuelInLiters, auxiliaryPowerInLitersPerHour, fuelEnergyDensityInMJoulesPerLiter, accelerationEfficiency, decelerationEfficiency, uphillEfficiency, downhillEfficiency, constantSpeedConsumptionInkWhPerHundredkm, calculateRoutePostDataParameters);
        // TODO: test validations
    }

}
