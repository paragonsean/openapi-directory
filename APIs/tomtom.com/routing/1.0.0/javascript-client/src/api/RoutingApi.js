/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import CalculateReachableRangePostDataParameters from '../model/CalculateReachableRangePostDataParameters';
import CalculateRoutePostDataParameters from '../model/CalculateRoutePostDataParameters';

/**
* Routing service.
* @module api/RoutingApi
* @version 1.0.0
*/
export default class RoutingApi {

    /**
    * Constructs a new RoutingApi. 
    * @alias module:api/RoutingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the routingVersionNumberCalculateReachableRangeOriginContentTypeGet operation.
     * @callback module:api/RoutingApi~routingVersionNumberCalculateReachableRangeOriginContentTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point.
     * @param {module:model/Number} versionNumber Service version number. The current value is 1.
     * @param {String} origin Point from which the range calculation should start.
     * @param {module:model/String} contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} [fuelBudgetInLiters] Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
     * @param {Number} [energyBudgetInkWh] Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
     * @param {Number} [timeBudgetInSec] Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
     * @param {String} [callback = 'callback')] Specifies the jsonp callback method.
     * @param {module:model/String} [report] Specifies which data should be reported for diagnosis purposes.
     * @param {String} [departAt = 'now')] The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
     * @param {String} [arriveAt] The date and time of arrival at the destination point. It must be specified as a dateTime.
     * @param {module:model/String} [routeType = 'fastest')] The type of route requested.
     * @param {Boolean} [traffic = true)] Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
     * @param {String} [avoid] Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
     * @param {module:model/String} [travelMode = 'car')] The mode of travel for the requested route.
     * @param {module:model/String} [hilliness = 'normal')] Degree of hilliness for calculating a thrilling route.
     * @param {module:model/String} [windingness = 'normal')] Amount that a thrilling route should wind.
     * @param {Number} [vehicleMaxSpeed = 0)] Maximum speed of the vehicle in km/hour.
     * @param {Number} [vehicleWeight = 0)] Weight of the vehicle in kilograms.
     * @param {Number} [vehicleAxleWeight = 0)] Weight per axle of the vehicle in kg.
     * @param {Number} [vehicleLength = 0)] Length of the vehicle in meters.
     * @param {Number} [vehicleWidth = 0)] Width of the vehicle in meters.
     * @param {Number} [vehicleHeight = 0)] Height of the vehicle in meters.
     * @param {Boolean} [vehicleCommercial = false)] Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
     * @param {String} [vehicleLoadType] Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
     * @param {String} [constantSpeedConsumptionInLitersPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {Number} [currentFuelInLiters] Specifies the current supply of fuel in liters.
     * @param {Number} [auxiliaryPowerInLitersPerHour] Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
     * @param {Number} [fuelEnergyDensityInMJoulesPerLiter] Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
     * @param {Number} [accelerationEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [decelerationEfficiency] Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
     * @param {Number} [uphillEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [downhillEfficiency] Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
     * @param {module:model/String} [vehicleEngineType = 'combustion')] Engine type of the vehicle.
     * @param {String} [constantSpeedConsumptionInkWhPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {module:api/RoutingApi~routingVersionNumberCalculateReachableRangeOriginContentTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routingVersionNumberCalculateReachableRangeOriginContentTypeGet(versionNumber, origin, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateReachableRangeOriginContentTypeGet");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling routingVersionNumberCalculateReachableRangeOriginContentTypeGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateReachableRangeOriginContentTypeGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'origin': origin,
        'contentType': contentType
      };
      let queryParams = {
        'fuelBudgetInLiters': opts['fuelBudgetInLiters'],
        'energyBudgetInkWh': opts['energyBudgetInkWh'],
        'timeBudgetInSec': opts['timeBudgetInSec'],
        'callback': opts['callback'],
        'report': opts['report'],
        'departAt': opts['departAt'],
        'arriveAt': opts['arriveAt'],
        'routeType': opts['routeType'],
        'traffic': opts['traffic'],
        'avoid': opts['avoid'],
        'travelMode': opts['travelMode'],
        'hilliness': opts['hilliness'],
        'windingness': opts['windingness'],
        'vehicleMaxSpeed': opts['vehicleMaxSpeed'],
        'vehicleWeight': opts['vehicleWeight'],
        'vehicleAxleWeight': opts['vehicleAxleWeight'],
        'vehicleLength': opts['vehicleLength'],
        'vehicleWidth': opts['vehicleWidth'],
        'vehicleHeight': opts['vehicleHeight'],
        'vehicleCommercial': opts['vehicleCommercial'],
        'vehicleLoadType': opts['vehicleLoadType'],
        'constantSpeedConsumptionInLitersPerHundredkm': opts['constantSpeedConsumptionInLitersPerHundredkm'],
        'currentFuelInLiters': opts['currentFuelInLiters'],
        'auxiliaryPowerInLitersPerHour': opts['auxiliaryPowerInLitersPerHour'],
        'fuelEnergyDensityInMJoulesPerLiter': opts['fuelEnergyDensityInMJoulesPerLiter'],
        'accelerationEfficiency': opts['accelerationEfficiency'],
        'decelerationEfficiency': opts['decelerationEfficiency'],
        'uphillEfficiency': opts['uphillEfficiency'],
        'downhillEfficiency': opts['downhillEfficiency'],
        'vehicleEngineType': opts['vehicleEngineType'],
        'constantSpeedConsumptionInkWhPerHundredkm': opts['constantSpeedConsumptionInkWhPerHundredkm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routingVersionNumberCalculateReachableRangeOriginContentTypePost operation.
     * @callback module:api/RoutingApi~routingVersionNumberCalculateReachableRangeOriginContentTypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reachable Range
     * Calculates a set of locations that can be reached from the origin point. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
     * @param {module:model/Number} versionNumber Service version number. The current value is 1.
     * @param {String} origin Point from which the range calculation should start.
     * @param {module:model/String} contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} [fuelBudgetInLiters] Fuel budget in liters. Determines the maximum vehicle range using the specified Combustion Consumption Model.
     * @param {Number} [energyBudgetInkWh] Electric energy budget in kilowatt hours (kWh). Determines the maximum vehicle range using the specified Electric Consumption Model.
     * @param {Number} [timeBudgetInSec] Time budget in seconds. Determines the maximum vehicle range using the specified driving time. The consumption parameters in the request will only affect eco-routes, and thereby indirectly the driving time.
     * @param {String} [callback = 'callback')] Specifies the jsonp callback method.
     * @param {module:model/String} [report] Specifies which data should be reported for diagnosis purposes.
     * @param {String} [departAt = 'now')] The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
     * @param {String} [arriveAt] The date and time of arrival at the destination point. It must be specified as a dateTime.
     * @param {module:model/String} [routeType = 'fastest')] The type of route requested.
     * @param {Boolean} [traffic = true)] Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
     * @param {String} [avoid] Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools
     * @param {module:model/String} [travelMode = 'car')] The mode of travel for the requested route.
     * @param {module:model/String} [hilliness = 'normal')] Degree of hilliness for calculating a thrilling route.
     * @param {module:model/String} [windingness = 'normal')] Amount that a thrilling route should wind.
     * @param {Number} [vehicleMaxSpeed = 0)] Maximum speed of the vehicle in km/hour.
     * @param {Number} [vehicleWeight = 0)] Weight of the vehicle in kilograms.
     * @param {Number} [vehicleAxleWeight = 0)] Weight per axle of the vehicle in kg.
     * @param {Number} [vehicleLength = 0)] Length of the vehicle in meters.
     * @param {Number} [vehicleWidth = 0)] Width of the vehicle in meters.
     * @param {Number} [vehicleHeight = 0)] Height of the vehicle in meters.
     * @param {Boolean} [vehicleCommercial = false)] Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
     * @param {String} [vehicleLoadType] Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
     * @param {String} [constantSpeedConsumptionInLitersPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {Number} [currentFuelInLiters] Specifies the current supply of fuel in liters.
     * @param {Number} [auxiliaryPowerInLitersPerHour] Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
     * @param {Number} [fuelEnergyDensityInMJoulesPerLiter] Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
     * @param {Number} [accelerationEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [decelerationEfficiency] Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
     * @param {Number} [uphillEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [downhillEfficiency] Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
     * @param {module:model/String} [vehicleEngineType = 'combustion')] Engine type of the vehicle.
     * @param {String} [constantSpeedConsumptionInkWhPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {module:model/CalculateReachableRangePostDataParameters} [calculateReachableRangePostDataParameters] 
     * @param {module:api/RoutingApi~routingVersionNumberCalculateReachableRangeOriginContentTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routingVersionNumberCalculateReachableRangeOriginContentTypePost(versionNumber, origin, contentType, opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateReachableRangePostDataParameters'];
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateReachableRangeOriginContentTypePost");
      }
      // verify the required parameter 'origin' is set
      if (origin === undefined || origin === null) {
        throw new Error("Missing the required parameter 'origin' when calling routingVersionNumberCalculateReachableRangeOriginContentTypePost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateReachableRangeOriginContentTypePost");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'origin': origin,
        'contentType': contentType
      };
      let queryParams = {
        'fuelBudgetInLiters': opts['fuelBudgetInLiters'],
        'energyBudgetInkWh': opts['energyBudgetInkWh'],
        'timeBudgetInSec': opts['timeBudgetInSec'],
        'callback': opts['callback'],
        'report': opts['report'],
        'departAt': opts['departAt'],
        'arriveAt': opts['arriveAt'],
        'routeType': opts['routeType'],
        'traffic': opts['traffic'],
        'avoid': opts['avoid'],
        'travelMode': opts['travelMode'],
        'hilliness': opts['hilliness'],
        'windingness': opts['windingness'],
        'vehicleMaxSpeed': opts['vehicleMaxSpeed'],
        'vehicleWeight': opts['vehicleWeight'],
        'vehicleAxleWeight': opts['vehicleAxleWeight'],
        'vehicleLength': opts['vehicleLength'],
        'vehicleWidth': opts['vehicleWidth'],
        'vehicleHeight': opts['vehicleHeight'],
        'vehicleCommercial': opts['vehicleCommercial'],
        'vehicleLoadType': opts['vehicleLoadType'],
        'constantSpeedConsumptionInLitersPerHundredkm': opts['constantSpeedConsumptionInLitersPerHundredkm'],
        'currentFuelInLiters': opts['currentFuelInLiters'],
        'auxiliaryPowerInLitersPerHour': opts['auxiliaryPowerInLitersPerHour'],
        'fuelEnergyDensityInMJoulesPerLiter': opts['fuelEnergyDensityInMJoulesPerLiter'],
        'accelerationEfficiency': opts['accelerationEfficiency'],
        'decelerationEfficiency': opts['decelerationEfficiency'],
        'uphillEfficiency': opts['uphillEfficiency'],
        'downhillEfficiency': opts['downhillEfficiency'],
        'vehicleEngineType': opts['vehicleEngineType'],
        'constantSpeedConsumptionInkWhPerHundredkm': opts['constantSpeedConsumptionInkWhPerHundredkm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing/{versionNumber}/calculateReachableRange/{origin}/{contentType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routingVersionNumberCalculateRouteLocationsContentTypeGet operation.
     * @callback module:api/RoutingApi~routingVersionNumberCalculateRouteLocationsContentTypeGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination.
     * @param {module:model/Number} versionNumber Service version number. The current value is 1.
     * @param {String} locations Locations through which the calculated route must pass.
     * @param {module:model/String} contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxAlternatives = 0)] Number of alternative routes to be calculated.
     * @param {module:model/String} [alternativeType = 'anyRoute')] Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
     * @param {Number} [minDeviationDistance = 0)] All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
     * @param {Number} [minDeviationTime = 0)] All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
     * @param {module:model/String} [instructionsType] If specified, guidance instructions will be returned (if available).
     * @param {String} [language = 'en-GB')] The language parameter determines the language of the guidance messages.
     * @param {Boolean} [computeBestOrder = false)] Re-order the route waypoints to reduce the route length.
     * @param {module:model/String} [routeRepresentation = 'polyline')] Specifies the representation of the set of routes provided as a response.
     * @param {module:model/String} [computeTravelTimeFor = 'none')] Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
     * @param {Number} [vehicleHeading] The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
     * @param {String} [sectionType = 'travelMode')] Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
     * @param {String} [callback = 'callback')] Specifies the jsonp callback method.
     * @param {module:model/String} [report] Specifies which data should be reported for diagnosis purposes.
     * @param {String} [departAt = 'now')] The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
     * @param {String} [arriveAt] The date and time of arrival at the destination point. It must be specified as a dateTime.
     * @param {module:model/String} [routeType = 'fastest')] The type of route requested.
     * @param {Boolean} [traffic = true)] Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
     * @param {String} [avoid] Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
     * @param {module:model/String} [travelMode = 'car')] The mode of travel for the requested route.
     * @param {module:model/String} [hilliness = 'normal')] Degree of hilliness for calculating a thrilling route.
     * @param {module:model/String} [windingness = 'normal')] Amount that a thrilling route should wind.
     * @param {Number} [vehicleMaxSpeed = 0)] Maximum speed of the vehicle in km/hour.
     * @param {Number} [vehicleWeight = 0)] Weight of the vehicle in kilograms.
     * @param {Number} [vehicleAxleWeight = 0)] Weight per axle of the vehicle in kg.
     * @param {Number} [vehicleLength = 0)] Length of the vehicle in meters.
     * @param {Number} [vehicleWidth = 0)] Width of the vehicle in meters.
     * @param {Number} [vehicleHeight = 0)] Height of the vehicle in meters.
     * @param {Boolean} [vehicleCommercial = false)] Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
     * @param {String} [vehicleLoadType] Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
     * @param {module:model/String} [vehicleEngineType = 'combustion')] Engine type of the vehicle.
     * @param {String} [constantSpeedConsumptionInLitersPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {Number} [currentFuelInLiters] Specifies the current supply of fuel in liters.
     * @param {Number} [auxiliaryPowerInLitersPerHour] Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
     * @param {Number} [fuelEnergyDensityInMJoulesPerLiter] Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
     * @param {Number} [accelerationEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [decelerationEfficiency] Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
     * @param {Number} [uphillEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [downhillEfficiency] Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
     * @param {String} [constantSpeedConsumptionInkWhPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {module:api/RoutingApi~routingVersionNumberCalculateRouteLocationsContentTypeGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routingVersionNumberCalculateRouteLocationsContentTypeGet(versionNumber, locations, contentType, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateRouteLocationsContentTypeGet");
      }
      // verify the required parameter 'locations' is set
      if (locations === undefined || locations === null) {
        throw new Error("Missing the required parameter 'locations' when calling routingVersionNumberCalculateRouteLocationsContentTypeGet");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateRouteLocationsContentTypeGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'locations': locations,
        'contentType': contentType
      };
      let queryParams = {
        'maxAlternatives': opts['maxAlternatives'],
        'alternativeType': opts['alternativeType'],
        'minDeviationDistance': opts['minDeviationDistance'],
        'minDeviationTime': opts['minDeviationTime'],
        'instructionsType': opts['instructionsType'],
        'language': opts['language'],
        'computeBestOrder': opts['computeBestOrder'],
        'routeRepresentation': opts['routeRepresentation'],
        'computeTravelTimeFor': opts['computeTravelTimeFor'],
        'vehicleHeading': opts['vehicleHeading'],
        'sectionType': opts['sectionType'],
        'callback': opts['callback'],
        'report': opts['report'],
        'departAt': opts['departAt'],
        'arriveAt': opts['arriveAt'],
        'routeType': opts['routeType'],
        'traffic': opts['traffic'],
        'avoid': opts['avoid'],
        'travelMode': opts['travelMode'],
        'hilliness': opts['hilliness'],
        'windingness': opts['windingness'],
        'vehicleMaxSpeed': opts['vehicleMaxSpeed'],
        'vehicleWeight': opts['vehicleWeight'],
        'vehicleAxleWeight': opts['vehicleAxleWeight'],
        'vehicleLength': opts['vehicleLength'],
        'vehicleWidth': opts['vehicleWidth'],
        'vehicleHeight': opts['vehicleHeight'],
        'vehicleCommercial': opts['vehicleCommercial'],
        'vehicleLoadType': opts['vehicleLoadType'],
        'vehicleEngineType': opts['vehicleEngineType'],
        'constantSpeedConsumptionInLitersPerHundredkm': opts['constantSpeedConsumptionInLitersPerHundredkm'],
        'currentFuelInLiters': opts['currentFuelInLiters'],
        'auxiliaryPowerInLitersPerHour': opts['auxiliaryPowerInLitersPerHour'],
        'fuelEnergyDensityInMJoulesPerLiter': opts['fuelEnergyDensityInMJoulesPerLiter'],
        'accelerationEfficiency': opts['accelerationEfficiency'],
        'decelerationEfficiency': opts['decelerationEfficiency'],
        'uphillEfficiency': opts['uphillEfficiency'],
        'downhillEfficiency': opts['downhillEfficiency'],
        'constantSpeedConsumptionInkWhPerHundredkm': opts['constantSpeedConsumptionInkWhPerHundredkm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the routingVersionNumberCalculateRouteLocationsContentTypePost operation.
     * @callback module:api/RoutingApi~routingVersionNumberCalculateRouteLocationsContentTypePostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Calculate Route
     * Calculates a route between an origin and a destination. POST method handles additionally parameters: <em>supportingPoints</em>, <em>allowVignette</em>, <em>avoidVignette</em>, <em>avoidAreas</em>.
     * @param {module:model/Number} versionNumber Service version number. The current value is 1.
     * @param {String} locations Locations through which the calculated route must pass.
     * @param {module:model/String} contentType The content type of the response structure. If the content type is jsonp, a callback method can be specified in the query parameters.
     * @param {Object} opts Optional parameters
     * @param {Number} [maxAlternatives = 0)] Number of alternative routes to be calculated.
     * @param {module:model/String} [alternativeType = 'anyRoute')] Determines whether the alternative routes to be calculated should be better with respect to the planning criteria provided than the reference route.
     * @param {Number} [minDeviationDistance = 0)] All alternative routes will follow the reference route for the specified minimum number of meters starting from the origin point.
     * @param {Number} [minDeviationTime = 0)] All alternative routes will follow the reference route for the specified minimum number of seconds starting from the origin point.
     * @param {module:model/String} [instructionsType] If specified, guidance instructions will be returned (if available).
     * @param {String} [language = 'en-GB')] The language parameter determines the language of the guidance messages.
     * @param {Boolean} [computeBestOrder = false)] Re-order the route waypoints to reduce the route length.
     * @param {module:model/String} [routeRepresentation = 'polyline')] Specifies the representation of the set of routes provided as a response.
     * @param {module:model/String} [computeTravelTimeFor = 'none')] Specifies whether to return additional travel times using different types of traffic information (none, historic, live) as well as the default best-estimate travel time.
     * @param {Number} [vehicleHeading] The directional heading of the vehicle in degrees. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.).
     * @param {String} [sectionType = 'travelMode')] Specifies which section types are explicitly reported in the route response. Can be specified multiple times.   - carTrain, ferry, tunnel or motorway   - pedestrian   - tollRoad   - tollVignette   - country   - travelMode   - traffic
     * @param {String} [callback = 'callback')] Specifies the jsonp callback method.
     * @param {module:model/String} [report] Specifies which data should be reported for diagnosis purposes.
     * @param {String} [departAt = 'now')] The date and time of departure from the origin point. Departure times apart from <i>now</i> must be specified as a dateTime.
     * @param {String} [arriveAt] The date and time of arrival at the destination point. It must be specified as a dateTime.
     * @param {module:model/String} [routeType = 'fastest')] The type of route requested.
     * @param {Boolean} [traffic = true)] Determines whether current traffic is used in route calculations. Note that information on historic road speeds is always used.
     * @param {String} [avoid] Specifies whether the routing engine should try to avoid specific types of road segment when calculating the route. Can be specified multiple times. Possible values:   - tollRoads   - motorways   - ferries   - unpavedRoads   - carpools   - alreadyUsedRoads
     * @param {module:model/String} [travelMode = 'car')] The mode of travel for the requested route.
     * @param {module:model/String} [hilliness = 'normal')] Degree of hilliness for calculating a thrilling route.
     * @param {module:model/String} [windingness = 'normal')] Amount that a thrilling route should wind.
     * @param {Number} [vehicleMaxSpeed = 0)] Maximum speed of the vehicle in km/hour.
     * @param {Number} [vehicleWeight = 0)] Weight of the vehicle in kilograms.
     * @param {Number} [vehicleAxleWeight = 0)] Weight per axle of the vehicle in kg.
     * @param {Number} [vehicleLength = 0)] Length of the vehicle in meters.
     * @param {Number} [vehicleWidth = 0)] Width of the vehicle in meters.
     * @param {Number} [vehicleHeight = 0)] Height of the vehicle in meters.
     * @param {Boolean} [vehicleCommercial = false)] Indicates that the vehicle is used for commercial purposes. This means it may not be allowed on certain roads.
     * @param {String} [vehicleLoadType] Indicates what kinds of hazardous materials the vehicle is carrying (if any). This means it may not be allowed on certain roads. Use these for routing in the US:    - <i>USHazmatClass1</i> Explosives   - <i>USHazmatClass2</i> Compressed gas   - <i>USHazmatClass3</i> Flammable liquids   - <i>USHazmatClass4</i> Flammable solids   - <i>USHazmatClass5</i> Oxidizers   - <i>USHazmatClass6</i> Poisons   - <i>USHazmatClass7</i> Radioactive   - <i>USHazmatClass8</i> Corrosives   - <i>USHazmatClass9</i> Miscellaneous  Use these for routing in all other countries:    - <i>otherHazmatExplosive</i> Explosives   - <i>otherHazmatGeneral</i> Miscellaneous   - <i>otherHazmatHarmfulToWater</i> Harmful to water  vehicleLoadType can be specified multiple times. This parameter is currently only considered for <b>travelMode</b>=<i>truck</i>.
     * @param {module:model/String} [vehicleEngineType = 'combustion')] Engine type of the vehicle.
     * @param {String} [constantSpeedConsumptionInLitersPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {Number} [currentFuelInLiters] Specifies the current supply of fuel in liters.
     * @param {Number} [auxiliaryPowerInLitersPerHour] Specifies the amount of fuel consumed for sustaining auxiliary systems of the vehicle, in liters per hour.
     * @param {Number} [fuelEnergyDensityInMJoulesPerLiter] Specifies the amount of chemical energy stored in one liter of fuel in megajoules (MJ).
     * @param {Number} [accelerationEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to kinetic energy when the vehicle accelerates (i.e. KineticEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [decelerationEfficiency] Specifies the efficiency of converting kinetic energy to saved (not consumed) fuel when the vehicle decelerates (i.e. ChemicalEnergySaved/KineticEnergyLost).
     * @param {Number} [uphillEfficiency] Specifies the efficiency of converting chemical energy stored in fuel to potential energy when the vehicle gains elevation (i.e. PotentialEnergyGained/ChemicalEnergyConsumed).
     * @param {Number} [downhillEfficiency] Specifies the efficiency of converting potential energy to saved (not consumed) fuel when the vehicle loses elevation (i.e. ChemicalEnergySaved/PotentialEnergyLost).
     * @param {String} [constantSpeedConsumptionInkWhPerHundredkm] Specifies the speed-dependent component of consumption. Provided as an unordered list of speed/consumption-rate pairs.
     * @param {module:model/CalculateRoutePostDataParameters} [calculateRoutePostDataParameters] 
     * @param {module:api/RoutingApi~routingVersionNumberCalculateRouteLocationsContentTypePostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    routingVersionNumberCalculateRouteLocationsContentTypePost(versionNumber, locations, contentType, opts, callback) {
      opts = opts || {};
      let postBody = opts['calculateRoutePostDataParameters'];
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling routingVersionNumberCalculateRouteLocationsContentTypePost");
      }
      // verify the required parameter 'locations' is set
      if (locations === undefined || locations === null) {
        throw new Error("Missing the required parameter 'locations' when calling routingVersionNumberCalculateRouteLocationsContentTypePost");
      }
      // verify the required parameter 'contentType' is set
      if (contentType === undefined || contentType === null) {
        throw new Error("Missing the required parameter 'contentType' when calling routingVersionNumberCalculateRouteLocationsContentTypePost");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'locations': locations,
        'contentType': contentType
      };
      let queryParams = {
        'maxAlternatives': opts['maxAlternatives'],
        'alternativeType': opts['alternativeType'],
        'minDeviationDistance': opts['minDeviationDistance'],
        'minDeviationTime': opts['minDeviationTime'],
        'instructionsType': opts['instructionsType'],
        'language': opts['language'],
        'computeBestOrder': opts['computeBestOrder'],
        'routeRepresentation': opts['routeRepresentation'],
        'computeTravelTimeFor': opts['computeTravelTimeFor'],
        'vehicleHeading': opts['vehicleHeading'],
        'sectionType': opts['sectionType'],
        'callback': opts['callback'],
        'report': opts['report'],
        'departAt': opts['departAt'],
        'arriveAt': opts['arriveAt'],
        'routeType': opts['routeType'],
        'traffic': opts['traffic'],
        'avoid': opts['avoid'],
        'travelMode': opts['travelMode'],
        'hilliness': opts['hilliness'],
        'windingness': opts['windingness'],
        'vehicleMaxSpeed': opts['vehicleMaxSpeed'],
        'vehicleWeight': opts['vehicleWeight'],
        'vehicleAxleWeight': opts['vehicleAxleWeight'],
        'vehicleLength': opts['vehicleLength'],
        'vehicleWidth': opts['vehicleWidth'],
        'vehicleHeight': opts['vehicleHeight'],
        'vehicleCommercial': opts['vehicleCommercial'],
        'vehicleLoadType': opts['vehicleLoadType'],
        'vehicleEngineType': opts['vehicleEngineType'],
        'constantSpeedConsumptionInLitersPerHundredkm': opts['constantSpeedConsumptionInLitersPerHundredkm'],
        'currentFuelInLiters': opts['currentFuelInLiters'],
        'auxiliaryPowerInLitersPerHour': opts['auxiliaryPowerInLitersPerHour'],
        'fuelEnergyDensityInMJoulesPerLiter': opts['fuelEnergyDensityInMJoulesPerLiter'],
        'accelerationEfficiency': opts['accelerationEfficiency'],
        'decelerationEfficiency': opts['decelerationEfficiency'],
        'uphillEfficiency': opts['uphillEfficiency'],
        'downhillEfficiency': opts['downhillEfficiency'],
        'constantSpeedConsumptionInkWhPerHundredkm': opts['constantSpeedConsumptionInkWhPerHundredkm']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json', 'application/xml'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/routing/{versionNumber}/calculateRoute/{locations}/{contentType}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
