/**
 * Routing
 * Routing consists of the following service: <b>Calculate Route</b> Calculates a route between an origin and a destination, passing through waypoints (if specified). Additional routing parameters like traffic, avoidance conditions, departure/arrival time etc. can be taken into account. <b>Calculate Reachable Range</b> Calculates a set of locations that can be reached from the origin point, subject to the available fuel or energy budget that is specified in the request.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.Routing);
  }
}(this, function(expect, Routing) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new Routing.RoutingApi();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('RoutingApi', function() {
    describe('routingVersionNumberCalculateReachableRangeOriginContentTypeGet', function() {
      it('should call routingVersionNumberCalculateReachableRangeOriginContentTypeGet successfully', function(done) {
        //uncomment below and update the code to test routingVersionNumberCalculateReachableRangeOriginContentTypeGet
        //instance.routingVersionNumberCalculateReachableRangeOriginContentTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('routingVersionNumberCalculateReachableRangeOriginContentTypePost', function() {
      it('should call routingVersionNumberCalculateReachableRangeOriginContentTypePost successfully', function(done) {
        //uncomment below and update the code to test routingVersionNumberCalculateReachableRangeOriginContentTypePost
        //instance.routingVersionNumberCalculateReachableRangeOriginContentTypePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('routingVersionNumberCalculateRouteLocationsContentTypeGet', function() {
      it('should call routingVersionNumberCalculateRouteLocationsContentTypeGet successfully', function(done) {
        //uncomment below and update the code to test routingVersionNumberCalculateRouteLocationsContentTypeGet
        //instance.routingVersionNumberCalculateRouteLocationsContentTypeGet(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
    describe('routingVersionNumberCalculateRouteLocationsContentTypePost', function() {
      it('should call routingVersionNumberCalculateRouteLocationsContentTypePost successfully', function(done) {
        //uncomment below and update the code to test routingVersionNumberCalculateRouteLocationsContentTypePost
        //instance.routingVersionNumberCalculateRouteLocationsContentTypePost(function(error) {
        //  if (error) throw error;
        //expect().to.be();
        //});
        done();
      });
    });
  });

}));
