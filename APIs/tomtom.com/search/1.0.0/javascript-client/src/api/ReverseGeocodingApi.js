/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* ReverseGeocoding service.
* @module api/ReverseGeocodingApi
* @version 1.0.0
*/
export default class ReverseGeocodingApi {

    /**
    * Constructs a new ReverseGeocodingApi. 
    * @alias module:api/ReverseGeocodingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchVersionNumberReverseGeocodeCrossStreetPositionExtGet operation.
     * @callback module:api/ReverseGeocodingApi~searchVersionNumberReverseGeocodeCrossStreetPositionExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Cross Street lookup
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} position This is specified as a comma separated string composed of lat., lon.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 1)] Maximum number of cross-streets to return.
     * @param {Boolean} [spatialKeys = false)] If the \"spatialKeys\" flag is set, the response will also contain a proprietary geospatial keys for a specified location.
     * @param {Number} [heading] The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     * @param {Number} [radius = 10000)] The maximum distance in meters from the specified position for the reverse geocoder to consider.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {module:api/ReverseGeocodingApi~searchVersionNumberReverseGeocodeCrossStreetPositionExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberReverseGeocodeCrossStreetPositionExtGet(versionNumber, position, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberReverseGeocodeCrossStreetPositionExtGet");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling searchVersionNumberReverseGeocodeCrossStreetPositionExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberReverseGeocodeCrossStreetPositionExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'position': position,
        'ext': ext
      };
      let queryParams = {
        'limit': opts['limit'],
        'spatialKeys': opts['spatialKeys'],
        'heading': opts['heading'],
        'radius': opts['radius'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/reverseGeocode/crossStreet/{position}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberReverseGeocodePositionExtGet operation.
     * @callback module:api/ReverseGeocodingApi~searchVersionNumberReverseGeocodePositionExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Reverse Geocode
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} position This is specified as a comma separated string composed of lat., lon.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [spatialKeys = false)] If the \"spatialKeys\" flag is set, the response will also contain a proprietary geospatial keys for a specified location.
     * @param {Boolean} [returnSpeedLimit = false)] To enable return of the posted speed limit (where available).
     * @param {Number} [heading] The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     * @param {Number} [radius = 10000)] The maximum distance in meters from the specified position for the reverse geocoder to consider.
     * @param {String} [number] If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number.
     * @param {Boolean} [returnRoadUse = false)] Enables return of the road use array for reverse geocodes at street level.
     * @param {String} [roadUse] Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: [\"LimitedAccess\", \"Arterial\", \"Terminal\", \"Ramp\", \"Rotary\", \"LocalStreet\"].
     * @param {String} [callback = 'cb')] Specifies the jsonp callback method.
     * @param {module:api/ReverseGeocodingApi~searchVersionNumberReverseGeocodePositionExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberReverseGeocodePositionExtGet(versionNumber, position, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberReverseGeocodePositionExtGet");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling searchVersionNumberReverseGeocodePositionExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberReverseGeocodePositionExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'position': position,
        'ext': ext
      };
      let queryParams = {
        'spatialKeys': opts['spatialKeys'],
        'returnSpeedLimit': opts['returnSpeedLimit'],
        'heading': opts['heading'],
        'radius': opts['radius'],
        'number': opts['number'],
        'returnRoadUse': opts['returnRoadUse'],
        'roadUse': opts['roadUse'],
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/reverseGeocode/{position}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
