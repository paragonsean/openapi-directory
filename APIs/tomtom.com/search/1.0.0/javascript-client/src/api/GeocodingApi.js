/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Geocoding service.
* @module api/GeocodingApi
* @version 1.0.0
*/
export default class GeocodingApi {

    /**
    * Constructs a new GeocodingApi. 
    * @alias module:api/GeocodingApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchVersionNumberGeocodeQueryExtGet operation.
     * @callback module:api/GeocodingApi~searchVersionNumberGeocodeQueryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geocode
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [storeResult = false)] If the \"storeResult\" flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use.
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [lat] Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [lon] Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [radius] If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/GeocodingApi~searchVersionNumberGeocodeQueryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberGeocodeQueryExtGet(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeocodeQueryExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberGeocodeQueryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberGeocodeQueryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'storeResult': opts['storeResult'],
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/geocode/{query}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberStructuredGeocodeExtGet operation.
     * @callback module:api/GeocodingApi~searchVersionNumberStructuredGeocodeExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Structured Geocode
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {module:model/String} ext Expected response format.
     * @param {String} countryCode 2 or 3 letter country code (e.g.: FR, ES).
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [streetNumber] The street number for the structured address.
     * @param {String} [streetName] The street name for the structured address.
     * @param {String} [crossStreet] The cross street name for the structured address.
     * @param {String} [municipality] The municipality (city/town) for the structured address.
     * @param {String} [municipalitySubdivision] The municipality subdivision (sub/super city) for the structured address.
     * @param {String} [countryTertiarySubdivision] The named area for the structured address.
     * @param {String} [countrySecondarySubdivision] The county for the structured address.
     * @param {String} [countrySubdivision] The state or province for the structured address.
     * @param {String} [postalCode] The zip code or postal code for the structured address.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {module:api/GeocodingApi~searchVersionNumberStructuredGeocodeExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberStructuredGeocodeExtGet(versionNumber, ext, countryCode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberStructuredGeocodeExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberStructuredGeocodeExtGet");
      }
      // verify the required parameter 'countryCode' is set
      if (countryCode === undefined || countryCode === null) {
        throw new Error("Missing the required parameter 'countryCode' when calling searchVersionNumberStructuredGeocodeExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'ext': ext
      };
      let queryParams = {
        'countryCode': countryCode,
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'streetNumber': opts['streetNumber'],
        'streetName': opts['streetName'],
        'crossStreet': opts['crossStreet'],
        'municipality': opts['municipality'],
        'municipalitySubdivision': opts['municipalitySubdivision'],
        'countryTertiarySubdivision': opts['countryTertiarySubdivision'],
        'countrySecondarySubdivision': opts['countrySecondarySubdivision'],
        'countrySubdivision': opts['countrySubdivision'],
        'postalCode': opts['postalCode'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/structuredGeocode.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
