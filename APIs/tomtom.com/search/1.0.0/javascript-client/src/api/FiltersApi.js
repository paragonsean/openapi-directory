/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchVersionNumberGeometryFilterExtPostRequest from '../model/SearchVersionNumberGeometryFilterExtPostRequest';
import SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest from '../model/SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest';

/**
* Filters service.
* @module api/FiltersApi
* @version 1.0.0
*/
export default class FiltersApi {

    /**
    * Constructs a new FiltersApi. 
    * @alias module:api/FiltersApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchVersionNumberGeometryFilterExtGet operation.
     * @callback module:api/FiltersApi~searchVersionNumberGeometryFilterExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geometry Filter
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {module:model/String} ext Expected response format.
     * @param {String} geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON.
     * @param {String} poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in.
     * @param {module:api/FiltersApi~searchVersionNumberGeometryFilterExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberGeometryFilterExtGet(versionNumber, ext, geometryList, poiList, callback) {
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometryFilterExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberGeometryFilterExtGet");
      }
      // verify the required parameter 'geometryList' is set
      if (geometryList === undefined || geometryList === null) {
        throw new Error("Missing the required parameter 'geometryList' when calling searchVersionNumberGeometryFilterExtGet");
      }
      // verify the required parameter 'poiList' is set
      if (poiList === undefined || poiList === null) {
        throw new Error("Missing the required parameter 'poiList' when calling searchVersionNumberGeometryFilterExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'ext': ext
      };
      let queryParams = {
        'geometryList': geometryList,
        'poiList': poiList
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/geometryFilter.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberGeometryFilterExtPost operation.
     * @callback module:api/FiltersApi~searchVersionNumberGeometryFilterExtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geometry Filter
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {module:model/SearchVersionNumberGeometryFilterExtPostRequest} [searchVersionNumberGeometryFilterExtPostRequest] 
     * @param {module:api/FiltersApi~searchVersionNumberGeometryFilterExtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberGeometryFilterExtPost(versionNumber, ext, opts, callback) {
      opts = opts || {};
      let postBody = opts['searchVersionNumberGeometryFilterExtPostRequest'];
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometryFilterExtPost");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberGeometryFilterExtPost");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'ext': ext
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/geometryFilter.{ext}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberRoutedFilterPositionHeadingExtGet operation.
     * @callback module:api/FiltersApi~searchVersionNumberRoutedFilterPositionHeadingExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Routed Filter
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} position This is specified as a comma separated string composed of lat., lon.
     * @param {Number} heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     * @param {module:model/String} ext Expected response format.
     * @param {String} poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in.
     * @param {Object} opts Optional parameters
     * @param {Number} [routingTimeout = 4000)] Only return results that arrive from routing engine within this time limit.
     * @param {module:api/FiltersApi~searchVersionNumberRoutedFilterPositionHeadingExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberRoutedFilterPositionHeadingExtGet(versionNumber, position, heading, ext, poiList, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet");
      }
      // verify the required parameter 'heading' is set
      if (heading === undefined || heading === null) {
        throw new Error("Missing the required parameter 'heading' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet");
      }
      // verify the required parameter 'poiList' is set
      if (poiList === undefined || poiList === null) {
        throw new Error("Missing the required parameter 'poiList' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'position': position,
        'heading': heading,
        'ext': ext
      };
      let queryParams = {
        'poiList': poiList,
        'routingTimeout': opts['routingTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/routedFilter/{position}/{heading}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberRoutedFilterPositionHeadingExtPost operation.
     * @callback module:api/FiltersApi~searchVersionNumberRoutedFilterPositionHeadingExtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Routed Filter
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} position This is specified as a comma separated string composed of lat., lon.
     * @param {Number} heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Number} [routingTimeout = 4000)] Only return results that arrive from routing engine within this time limit.
     * @param {module:model/SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest} [searchVersionNumberRoutedFilterPositionHeadingExtPostRequest] 
     * @param {module:api/FiltersApi~searchVersionNumberRoutedFilterPositionHeadingExtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberRoutedFilterPositionHeadingExtPost(versionNumber, position, heading, ext, opts, callback) {
      opts = opts || {};
      let postBody = opts['searchVersionNumberRoutedFilterPositionHeadingExtPostRequest'];
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost");
      }
      // verify the required parameter 'heading' is set
      if (heading === undefined || heading === null) {
        throw new Error("Missing the required parameter 'heading' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'position': position,
        'heading': heading,
        'ext': ext
      };
      let queryParams = {
        'routingTimeout': opts['routingTimeout']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/routedFilter/{position}/{heading}.{ext}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
