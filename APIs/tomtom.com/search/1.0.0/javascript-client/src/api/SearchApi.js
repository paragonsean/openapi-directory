/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import SearchVersionNumberGeometrySearchQueryExtPostRequest from '../model/SearchVersionNumberGeometrySearchQueryExtPostRequest';
import SearchVersionNumberSearchAlongRouteQueryExtPostRequest from '../model/SearchVersionNumberSearchAlongRouteQueryExtPostRequest';

/**
* Search service.
* @module api/SearchApi
* @version 1.0.0
*/
export default class SearchApi {

    /**
    * Constructs a new SearchApi. 
    * @alias module:api/SearchApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the searchVersionNumberCSCategoryExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberCSCategoryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Low Bandwith Category Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} category Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [lat] Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [lon] Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [radius] If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/SearchApi~searchVersionNumberCSCategoryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberCSCategoryExtGet(versionNumber, category, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberCSCategoryExtGet");
      }
      // verify the required parameter 'category' is set
      if (category === undefined || category === null) {
        throw new Error("Missing the required parameter 'category' when calling searchVersionNumberCSCategoryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberCSCategoryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'category': category,
        'ext': ext
      };
      let queryParams = {
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'idxSet': opts['idxSet'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/cS/{category}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberCategorySearchQueryExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberCategorySearchQueryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Category Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [lat] Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [lon] Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [radius] If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/SearchApi~searchVersionNumberCategorySearchQueryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberCategorySearchQueryExtGet(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberCategorySearchQueryExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberCategorySearchQueryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberCategorySearchQueryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/categorySearch/{query}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberGeometrySearchQueryExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberGeometrySearchQueryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geometry Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {String} [geometryList] List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:api/SearchApi~searchVersionNumberGeometrySearchQueryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberGeometrySearchQueryExtGet(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometrySearchQueryExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberGeometrySearchQueryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberGeometrySearchQueryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'geometryList': opts['geometryList'],
        'limit': opts['limit'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'idxSet': opts['idxSet']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/geometrySearch/{query}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberGeometrySearchQueryExtPost operation.
     * @callback module:api/SearchApi~searchVersionNumberGeometrySearchQueryExtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Geometry Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:model/SearchVersionNumberGeometrySearchQueryExtPostRequest} [searchVersionNumberGeometrySearchQueryExtPostRequest] 
     * @param {module:api/SearchApi~searchVersionNumberGeometrySearchQueryExtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberGeometrySearchQueryExtPost(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = opts['searchVersionNumberGeometrySearchQueryExtPostRequest'];
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometrySearchQueryExtPost");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberGeometrySearchQueryExtPost");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberGeometrySearchQueryExtPost");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'limit': opts['limit'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'idxSet': opts['idxSet']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/geometrySearch/{query}.{ext}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberNearbySearchExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberNearbySearchExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Nearby Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {module:model/String} ext Expected response format.
     * @param {Number} lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [radius = 10000)] If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {Number} [minFuzzyLevel = 1)] Minimum fuzziness level to be used.
     * @param {Number} [maxFuzzyLevel = 2)] Maximum fuzziness level to be used.
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/SearchApi~searchVersionNumberNearbySearchExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberNearbySearchExtGet(versionNumber, ext, lat, lon, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberNearbySearchExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberNearbySearchExtGet");
      }
      // verify the required parameter 'lat' is set
      if (lat === undefined || lat === null) {
        throw new Error("Missing the required parameter 'lat' when calling searchVersionNumberNearbySearchExtGet");
      }
      // verify the required parameter 'lon' is set
      if (lon === undefined || lon === null) {
        throw new Error("Missing the required parameter 'lon' when calling searchVersionNumberNearbySearchExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'ext': ext
      };
      let queryParams = {
        'lat': lat,
        'lon': lon,
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'minFuzzyLevel': opts['minFuzzyLevel'],
        'maxFuzzyLevel': opts['maxFuzzyLevel'],
        'idxSet': opts['idxSet'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/nearbySearch/.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberPoiSearchQueryExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberPoiSearchQueryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Points of Interest Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [lat] Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [lon] Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [radius] If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/SearchApi~searchVersionNumberPoiSearchQueryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberPoiSearchQueryExtGet(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberPoiSearchQueryExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberPoiSearchQueryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberPoiSearchQueryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/poiSearch/{query}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberRoutedSearchQueryPositionHeadingExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberRoutedSearchQueryPositionHeadingExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Routed Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {String} position This is specified as a comma separated string composed of lat., lon.
     * @param {Number} heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.)
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [multiplier = 2)] Multiplies the limit by N to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit.
     * @param {Number} [routingTimeout = 4000)] Only return results that arrive from routing engine within this time limit.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:api/SearchApi~searchVersionNumberRoutedSearchQueryPositionHeadingExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(versionNumber, query, position, heading, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet");
      }
      // verify the required parameter 'heading' is set
      if (heading === undefined || heading === null) {
        throw new Error("Missing the required parameter 'heading' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'position': position,
        'heading': heading,
        'ext': ext
      };
      let queryParams = {
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'multiplier': opts['multiplier'],
        'routingTimeout': opts['routingTimeout'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'idxSet': opts['idxSet']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/routedSearch/{query}/{position}/{heading}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberSQueryExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberSQueryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Low bandwith Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [lat] Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [lon] Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [radius] If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/SearchApi~searchVersionNumberSQueryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberSQueryExtGet(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberSQueryExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberSQueryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberSQueryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'idxSet': opts['idxSet'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/s/{query}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberSearchAlongRouteQueryExtPost operation.
     * @callback module:api/SearchApi~searchVersionNumberSearchAlongRouteQueryExtPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Along Route Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.
     * @param {module:model/String} ext Expected response format.
     * @param {Number} maxDetourTime Maximum detour time
     * @param {Object} opts Optional parameters
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {module:model/SearchVersionNumberSearchAlongRouteQueryExtPostRequest} [searchVersionNumberSearchAlongRouteQueryExtPostRequest] 
     * @param {module:api/SearchApi~searchVersionNumberSearchAlongRouteQueryExtPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberSearchAlongRouteQueryExtPost(versionNumber, query, ext, maxDetourTime, opts, callback) {
      opts = opts || {};
      let postBody = opts['searchVersionNumberSearchAlongRouteQueryExtPostRequest'];
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberSearchAlongRouteQueryExtPost");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberSearchAlongRouteQueryExtPost");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberSearchAlongRouteQueryExtPost");
      }
      // verify the required parameter 'maxDetourTime' is set
      if (maxDetourTime === undefined || maxDetourTime === null) {
        throw new Error("Missing the required parameter 'maxDetourTime' when calling searchVersionNumberSearchAlongRouteQueryExtPost");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'maxDetourTime': maxDetourTime,
        'limit': opts['limit']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/searchAlongRoute/{query}.{ext}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the searchVersionNumberSearchQueryExtGet operation.
     * @callback module:api/SearchApi~searchVersionNumberSearchQueryExtGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Fuzzy Search
     * @param {module:model/Number} versionNumber Service version number. The current value is 2.
     * @param {String} query Query string. Must be properly URL encoded.  To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found <a href=\"/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo\">here</a>.
     * @param {module:model/String} ext Expected response format.
     * @param {Object} opts Optional parameters
     * @param {Boolean} [typeahead = false)] If the \"typeahead\" flag is set, the query will be interpreted as a partial input and the search will enter <b>predictive</b> mode.
     * @param {Number} [limit = 10)] Maximum number of search results that will be returned.
     * @param {Number} [ofs = 0)] Starting offset of the returned results within the full result set.
     * @param {String} [countrySet] Comma separated string of country codes. This will limit the search to the specified countries.
     * @param {Number} [lat] Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [lon] Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point.
     * @param {Number} [radius] If radius <b>and</b> position are set, the results will be constrained to the defined area. The radius parameter is specified in meters.
     * @param {String} [topLeft] Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [btmRight] Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon.
     * @param {String} [language] Language in which search results should be returned. Should be one of <a href=\"/search-api/search-api-documentation/supported-languages\">supported IETF language tags</a>, case insensitive.
     * @param {String} [extendedPostalCodesFor] Indexes for which extended postal codes should be included in the results. Available indexes are:   - <b>Addr</b> = Address ranges   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of Interest   - <b>Str</b> = Streets   - <b>XStr</b> = Cross Streets (intersections)
     * @param {Number} [minFuzzyLevel = 1)] Minimum fuzziness level to be used.
     * @param {Number} [maxFuzzyLevel = 2)] Maximum fuzziness level to be used.
     * @param {String} [idxSet] A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - <b>Addr</b> = Address range interpolation (when there is no PAD)   - <b>Geo</b> = Geographies   - <b>PAD</b> = Point Addresses   - <b>POI</b> = Points of interest   - <b>Str</b> = Streets   - <b>Xstr</b> = Cross Streets (intersections)
     * @param {module:model/String} [view = 'Unified')] Geopolitical View.
     * @param {module:api/SearchApi~searchVersionNumberSearchQueryExtGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    searchVersionNumberSearchQueryExtGet(versionNumber, query, ext, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling searchVersionNumberSearchQueryExtGet");
      }
      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling searchVersionNumberSearchQueryExtGet");
      }
      // verify the required parameter 'ext' is set
      if (ext === undefined || ext === null) {
        throw new Error("Missing the required parameter 'ext' when calling searchVersionNumberSearchQueryExtGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'query': query,
        'ext': ext
      };
      let queryParams = {
        'typeahead': opts['typeahead'],
        'limit': opts['limit'],
        'ofs': opts['ofs'],
        'countrySet': opts['countrySet'],
        'lat': opts['lat'],
        'lon': opts['lon'],
        'radius': opts['radius'],
        'topLeft': opts['topLeft'],
        'btmRight': opts['btmRight'],
        'language': opts['language'],
        'extendedPostalCodesFor': opts['extendedPostalCodesFor'],
        'minFuzzyLevel': opts['minFuzzyLevel'],
        'maxFuzzyLevel': opts['maxFuzzyLevel'],
        'idxSet': opts['idxSet'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/search/{versionNumber}/search/{query}.{ext}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
