/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner() {
    this->initializeModel();
}

OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::~OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner() {}

void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::initializeModel() {

    m_position_isSet = false;
    m_position_isValid = false;

    m_radius_isSet = false;
    m_radius_isValid = false;

    m_type_isSet = false;
    m_type_isValid = false;

    m_vertices_isSet = false;
    m_vertices_isValid = false;
}

void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::fromJsonObject(QJsonObject json) {

    m_position_isValid = ::OpenAPI::fromJsonValue(m_position, json[QString("position")]);
    m_position_isSet = !json[QString("position")].isNull() && m_position_isValid;

    m_radius_isValid = ::OpenAPI::fromJsonValue(m_radius, json[QString("radius")]);
    m_radius_isSet = !json[QString("radius")].isNull() && m_radius_isValid;

    m_type_isValid = ::OpenAPI::fromJsonValue(m_type, json[QString("type")]);
    m_type_isSet = !json[QString("type")].isNull() && m_type_isValid;

    m_vertices_isValid = ::OpenAPI::fromJsonValue(m_vertices, json[QString("vertices")]);
    m_vertices_isSet = !json[QString("vertices")].isNull() && m_vertices_isValid;
}

QString OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_position_isSet) {
        obj.insert(QString("position"), ::OpenAPI::toJsonValue(m_position));
    }
    if (m_radius_isSet) {
        obj.insert(QString("radius"), ::OpenAPI::toJsonValue(m_radius));
    }
    if (m_type_isSet) {
        obj.insert(QString("type"), ::OpenAPI::toJsonValue(m_type));
    }
    if (m_vertices.size() > 0) {
        obj.insert(QString("vertices"), ::OpenAPI::toJsonValue(m_vertices));
    }
    return obj;
}

QString OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::getPosition() const {
    return m_position;
}
void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::setPosition(const QString &position) {
    m_position = position;
    m_position_isSet = true;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_position_Set() const{
    return m_position_isSet;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_position_Valid() const{
    return m_position_isValid;
}

qint32 OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::getRadius() const {
    return m_radius;
}
void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::setRadius(const qint32 &radius) {
    m_radius = radius;
    m_radius_isSet = true;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_radius_Set() const{
    return m_radius_isSet;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_radius_Valid() const{
    return m_radius_isValid;
}

QString OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::getType() const {
    return m_type;
}
void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::setType(const QString &type) {
    m_type = type;
    m_type_isSet = true;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_type_Set() const{
    return m_type_isSet;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_type_Valid() const{
    return m_type_isValid;
}

QList<QString> OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::getVertices() const {
    return m_vertices;
}
void OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::setVertices(const QList<QString> &vertices) {
    m_vertices = vertices;
    m_vertices_isSet = true;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_vertices_Set() const{
    return m_vertices_isSet;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::is_vertices_Valid() const{
    return m_vertices_isValid;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_position_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_radius_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_type_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_vertices.size() > 0) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_search__versionNumber__geometryFilter__ext__post_request_geometryList_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
