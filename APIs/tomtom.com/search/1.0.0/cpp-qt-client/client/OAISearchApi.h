/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAISearchApi_H
#define OAI_OAISearchApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAI_search__versionNumber__geometrySearch__query___ext__post_request.h"
#include "OAI_search__versionNumber__searchAlongRoute__query___ext__post_request.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAISearchApi : public QObject {
    Q_OBJECT

public:
    OAISearchApi(const int timeOut = 0);
    ~OAISearchApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  category QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  lon float [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  idx_set QString [optional]
    * @param[in]  view QString [optional]
    */
    Q_DECL_DEPRECATED virtual void searchVersionNumberCSCategoryExtGet(const qint32 &version_number, const QString &category, const QString &ext, const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lon = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  lon float [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void searchVersionNumberCategorySearchQueryExtGet(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lon = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  geometry_list QString [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  idx_set QString [optional]
    */
    virtual void searchVersionNumberGeometrySearchQueryExtGet(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<QString> &geometry_list = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  idx_set QString [optional]
    * @param[in]  oai_search__version_number__geometry_search__query___ext__post_request OAI_search__versionNumber__geometrySearch__query___ext__post_request [optional]
    */
    virtual void searchVersionNumberGeometrySearchQueryExtPost(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<OAI_search__versionNumber__geometrySearch__query___ext__post_request> &oai_search__version_number__geometry_search__query___ext__post_request = ::OpenAPI::OptionalParam<OAI_search__versionNumber__geometrySearch__query___ext__post_request>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  ext QString [required]
    * @param[in]  lat float [required]
    * @param[in]  lon float [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  min_fuzzy_level qint32 [optional]
    * @param[in]  max_fuzzy_level qint32 [optional]
    * @param[in]  idx_set QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void searchVersionNumberNearbySearchExtGet(const qint32 &version_number, const QString &ext, const float &lat, const float &lon, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_fuzzy_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_fuzzy_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  lon float [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void searchVersionNumberPoiSearchQueryExtGet(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lon = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  position QString [required]
    * @param[in]  heading float [required]
    * @param[in]  ext QString [required]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  multiplier qint32 [optional]
    * @param[in]  routing_timeout qint32 [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  idx_set QString [optional]
    */
    Q_DECL_DEPRECATED virtual void searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(const qint32 &version_number, const QString &query, const QString &position, const float &heading, const QString &ext, const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &multiplier = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &routing_timeout = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  lon float [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  idx_set QString [optional]
    * @param[in]  view QString [optional]
    */
    Q_DECL_DEPRECATED virtual void searchVersionNumberSQueryExtGet(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lon = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  max_detour_time qint32 [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  oai_search__version_number__search_along_route__query___ext__post_request OAI_search__versionNumber__searchAlongRoute__query___ext__post_request [optional]
    */
    virtual void searchVersionNumberSearchAlongRouteQueryExtPost(const qint32 &version_number, const QString &query, const QString &ext, const qint32 &max_detour_time, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<OAI_search__versionNumber__searchAlongRoute__query___ext__post_request> &oai_search__version_number__search_along_route__query___ext__post_request = ::OpenAPI::OptionalParam<OAI_search__versionNumber__searchAlongRoute__query___ext__post_request>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  lon float [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  min_fuzzy_level qint32 [optional]
    * @param[in]  max_fuzzy_level qint32 [optional]
    * @param[in]  idx_set QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void searchVersionNumberSearchQueryExtGet(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lon = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &min_fuzzy_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &max_fuzzy_level = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &idx_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void searchVersionNumberCSCategoryExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberCategorySearchQueryExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberGeometrySearchQueryExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberGeometrySearchQueryExtPostCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberNearbySearchExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberPoiSearchQueryExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberSQueryExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberSearchAlongRouteQueryExtPostCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberSearchQueryExtGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void searchVersionNumberCSCategoryExtGetSignal();
    void searchVersionNumberCategorySearchQueryExtGetSignal();
    void searchVersionNumberGeometrySearchQueryExtGetSignal();
    void searchVersionNumberGeometrySearchQueryExtPostSignal();
    void searchVersionNumberNearbySearchExtGetSignal();
    void searchVersionNumberPoiSearchQueryExtGetSignal();
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignal();
    void searchVersionNumberSQueryExtGetSignal();
    void searchVersionNumberSearchAlongRouteQueryExtPostSignal();
    void searchVersionNumberSearchQueryExtGetSignal();


    void searchVersionNumberCSCategoryExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberCategorySearchQueryExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberGeometrySearchQueryExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberGeometrySearchQueryExtPostSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberNearbySearchExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberPoiSearchQueryExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberSQueryExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberSearchAlongRouteQueryExtPostSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberSearchQueryExtGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use searchVersionNumberCSCategoryExtGetSignalError() instead")
    void searchVersionNumberCSCategoryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberCSCategoryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberCategorySearchQueryExtGetSignalError() instead")
    void searchVersionNumberCategorySearchQueryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberCategorySearchQueryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberGeometrySearchQueryExtGetSignalError() instead")
    void searchVersionNumberGeometrySearchQueryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberGeometrySearchQueryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberGeometrySearchQueryExtPostSignalError() instead")
    void searchVersionNumberGeometrySearchQueryExtPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberGeometrySearchQueryExtPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberNearbySearchExtGetSignalError() instead")
    void searchVersionNumberNearbySearchExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberNearbySearchExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberPoiSearchQueryExtGetSignalError() instead")
    void searchVersionNumberPoiSearchQueryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberPoiSearchQueryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalError() instead")
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberSQueryExtGetSignalError() instead")
    void searchVersionNumberSQueryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberSQueryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberSearchAlongRouteQueryExtPostSignalError() instead")
    void searchVersionNumberSearchAlongRouteQueryExtPostSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberSearchAlongRouteQueryExtPostSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberSearchQueryExtGetSignalError() instead")
    void searchVersionNumberSearchQueryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberSearchQueryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use searchVersionNumberCSCategoryExtGetSignalErrorFull() instead")
    void searchVersionNumberCSCategoryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberCSCategoryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberCategorySearchQueryExtGetSignalErrorFull() instead")
    void searchVersionNumberCategorySearchQueryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberCategorySearchQueryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberGeometrySearchQueryExtGetSignalErrorFull() instead")
    void searchVersionNumberGeometrySearchQueryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberGeometrySearchQueryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberGeometrySearchQueryExtPostSignalErrorFull() instead")
    void searchVersionNumberGeometrySearchQueryExtPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberGeometrySearchQueryExtPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberNearbySearchExtGetSignalErrorFull() instead")
    void searchVersionNumberNearbySearchExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberNearbySearchExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberPoiSearchQueryExtGetSignalErrorFull() instead")
    void searchVersionNumberPoiSearchQueryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberPoiSearchQueryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalErrorFull() instead")
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberRoutedSearchQueryPositionHeadingExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberSQueryExtGetSignalErrorFull() instead")
    void searchVersionNumberSQueryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberSQueryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberSearchAlongRouteQueryExtPostSignalErrorFull() instead")
    void searchVersionNumberSearchAlongRouteQueryExtPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberSearchAlongRouteQueryExtPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberSearchQueryExtGetSignalErrorFull() instead")
    void searchVersionNumberSearchQueryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberSearchQueryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
