/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAI_search__versionNumber__searchAlongRoute__query___ext__post_request.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::OAI_search__versionNumber__searchAlongRoute__query___ext__post_request(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::OAI_search__versionNumber__searchAlongRoute__query___ext__post_request() {
    this->initializeModel();
}

OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::~OAI_search__versionNumber__searchAlongRoute__query___ext__post_request() {}

void OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::initializeModel() {

    m_route_isSet = false;
    m_route_isValid = false;
}

void OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::fromJsonObject(QJsonObject json) {

    m_route_isValid = ::OpenAPI::fromJsonValue(m_route, json[QString("route")]);
    m_route_isSet = !json[QString("route")].isNull() && m_route_isValid;
}

QString OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::asJsonObject() const {
    QJsonObject obj;
    if (m_route.isSet()) {
        obj.insert(QString("route"), ::OpenAPI::toJsonValue(m_route));
    }
    return obj;
}

OAI_search__versionNumber__searchAlongRoute__query___ext__post_request_route OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::getRoute() const {
    return m_route;
}
void OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::setRoute(const OAI_search__versionNumber__searchAlongRoute__query___ext__post_request_route &route) {
    m_route = route;
    m_route_isSet = true;
}

bool OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::is_route_Set() const{
    return m_route_isSet;
}

bool OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::is_route_Valid() const{
    return m_route_isValid;
}

bool OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_route.isSet()) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAI_search__versionNumber__searchAlongRoute__query___ext__post_request::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
