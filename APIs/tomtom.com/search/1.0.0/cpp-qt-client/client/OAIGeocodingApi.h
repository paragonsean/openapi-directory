/**
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeocodingApi_H
#define OAI_OAIGeocodingApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeocodingApi : public QObject {
    Q_OBJECT

public:
    OAIGeocodingApi(const int timeOut = 0);
    ~OAIGeocodingApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  query QString [required]
    * @param[in]  ext QString [required]
    * @param[in]  store_result bool [optional]
    * @param[in]  typeahead bool [optional]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  country_set QString [optional]
    * @param[in]  lat float [optional]
    * @param[in]  lon float [optional]
    * @param[in]  radius qint32 [optional]
    * @param[in]  top_left QString [optional]
    * @param[in]  btm_right QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void searchVersionNumberGeocodeQueryExtGet(const qint32 &version_number, const QString &query, const QString &ext, const ::OpenAPI::OptionalParam<bool> &store_result = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<bool> &typeahead = ::OpenAPI::OptionalParam<bool>(), const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &country_set = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<float> &lat = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<float> &lon = ::OpenAPI::OptionalParam<float>(), const ::OpenAPI::OptionalParam<qint32> &radius = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &top_left = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &btm_right = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  ext QString [required]
    * @param[in]  country_code QString [required]
    * @param[in]  limit qint32 [optional]
    * @param[in]  ofs qint32 [optional]
    * @param[in]  street_number QString [optional]
    * @param[in]  street_name QString [optional]
    * @param[in]  cross_street QString [optional]
    * @param[in]  municipality QString [optional]
    * @param[in]  municipality_subdivision QString [optional]
    * @param[in]  country_tertiary_subdivision QString [optional]
    * @param[in]  country_secondary_subdivision QString [optional]
    * @param[in]  country_subdivision QString [optional]
    * @param[in]  postal_code QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  extended_postal_codes_for QString [optional]
    */
    virtual void searchVersionNumberStructuredGeocodeExtGet(const qint32 &version_number, const QString &ext, const QString &country_code, const ::OpenAPI::OptionalParam<qint32> &limit = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &ofs = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &street_number = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &street_name = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &cross_street = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &municipality = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &municipality_subdivision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_tertiary_subdivision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_secondary_subdivision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &country_subdivision = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &postal_code = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extended_postal_codes_for = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void searchVersionNumberGeocodeQueryExtGetCallback(OAIHttpRequestWorker *worker);
    void searchVersionNumberStructuredGeocodeExtGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void searchVersionNumberGeocodeQueryExtGetSignal();
    void searchVersionNumberStructuredGeocodeExtGetSignal();


    void searchVersionNumberGeocodeQueryExtGetSignalFull(OAIHttpRequestWorker *worker);
    void searchVersionNumberStructuredGeocodeExtGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use searchVersionNumberGeocodeQueryExtGetSignalError() instead")
    void searchVersionNumberGeocodeQueryExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberGeocodeQueryExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberStructuredGeocodeExtGetSignalError() instead")
    void searchVersionNumberStructuredGeocodeExtGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberStructuredGeocodeExtGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use searchVersionNumberGeocodeQueryExtGetSignalErrorFull() instead")
    void searchVersionNumberGeocodeQueryExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberGeocodeQueryExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use searchVersionNumberStructuredGeocodeExtGetSignalErrorFull() instead")
    void searchVersionNumberStructuredGeocodeExtGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void searchVersionNumberStructuredGeocodeExtGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
