/*
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchVersionNumberGeometrySearchQueryExtPostRequest;
import org.openapitools.client.model.SearchVersionNumberSearchAlongRouteQueryExtPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SearchApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SearchApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SearchApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchVersionNumberCSCategoryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param category Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberCSCategoryExtGetCall(Integer versionNumber, String category, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/cS/{category}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "category" + "}", localVarApiClient.escapeString(category.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberCSCategoryExtGetValidateBeforeCall(Integer versionNumber, String category, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberCSCategoryExtGet(Async)");
        }

        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling searchVersionNumberCSCategoryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberCSCategoryExtGet(Async)");
        }

        return searchVersionNumberCSCategoryExtGetCall(versionNumber, category, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view, _callback);

    }

    /**
     * Low Bandwith Category Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param category Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void searchVersionNumberCSCategoryExtGet(Integer versionNumber, String category, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view) throws ApiException {
        searchVersionNumberCSCategoryExtGetWithHttpInfo(versionNumber, category, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view);
    }

    /**
     * Low Bandwith Category Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param category Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchVersionNumberCSCategoryExtGetWithHttpInfo(Integer versionNumber, String category, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberCSCategoryExtGetValidateBeforeCall(versionNumber, category, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Low Bandwith Category Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param category Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberCSCategoryExtGetAsync(Integer versionNumber, String category, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberCSCategoryExtGetValidateBeforeCall(versionNumber, category, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberCategorySearchQueryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberCategorySearchQueryExtGetCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/categorySearch/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberCategorySearchQueryExtGetValidateBeforeCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberCategorySearchQueryExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberCategorySearchQueryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberCategorySearchQueryExtGet(Async)");
        }

        return searchVersionNumberCategorySearchQueryExtGetCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, _callback);

    }

    /**
     * Category Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberCategorySearchQueryExtGet(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view) throws ApiException {
        searchVersionNumberCategorySearchQueryExtGetWithHttpInfo(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view);
    }

    /**
     * Category Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberCategorySearchQueryExtGetWithHttpInfo(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberCategorySearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Category Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberCategorySearchQueryExtGetAsync(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberCategorySearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberGeometrySearchQueryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (optional)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometrySearchQueryExtGetCall(Integer versionNumber, String query, String ext, String geometryList, Integer limit, String language, String extendedPostalCodesFor, String idxSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/geometrySearch/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (geometryList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometryList", geometryList));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberGeometrySearchQueryExtGetValidateBeforeCall(Integer versionNumber, String query, String ext, String geometryList, Integer limit, String language, String extendedPostalCodesFor, String idxSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometrySearchQueryExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberGeometrySearchQueryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberGeometrySearchQueryExtGet(Async)");
        }

        return searchVersionNumberGeometrySearchQueryExtGetCall(versionNumber, query, ext, geometryList, limit, language, extendedPostalCodesFor, idxSet, _callback);

    }

    /**
     * Geometry Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (optional)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberGeometrySearchQueryExtGet(Integer versionNumber, String query, String ext, String geometryList, Integer limit, String language, String extendedPostalCodesFor, String idxSet) throws ApiException {
        searchVersionNumberGeometrySearchQueryExtGetWithHttpInfo(versionNumber, query, ext, geometryList, limit, language, extendedPostalCodesFor, idxSet);
    }

    /**
     * Geometry Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (optional)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberGeometrySearchQueryExtGetWithHttpInfo(Integer versionNumber, String query, String ext, String geometryList, Integer limit, String language, String extendedPostalCodesFor, String idxSet) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberGeometrySearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, geometryList, limit, language, extendedPostalCodesFor, idxSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Geometry Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (optional)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometrySearchQueryExtGetAsync(Integer versionNumber, String query, String ext, String geometryList, Integer limit, String language, String extendedPostalCodesFor, String idxSet, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberGeometrySearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, geometryList, limit, language, extendedPostalCodesFor, idxSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberGeometrySearchQueryExtPost
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param searchVersionNumberGeometrySearchQueryExtPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometrySearchQueryExtPostCall(Integer versionNumber, String query, String ext, Integer limit, String language, String extendedPostalCodesFor, String idxSet, SearchVersionNumberGeometrySearchQueryExtPostRequest searchVersionNumberGeometrySearchQueryExtPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchVersionNumberGeometrySearchQueryExtPostRequest;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/geometrySearch/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberGeometrySearchQueryExtPostValidateBeforeCall(Integer versionNumber, String query, String ext, Integer limit, String language, String extendedPostalCodesFor, String idxSet, SearchVersionNumberGeometrySearchQueryExtPostRequest searchVersionNumberGeometrySearchQueryExtPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometrySearchQueryExtPost(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberGeometrySearchQueryExtPost(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberGeometrySearchQueryExtPost(Async)");
        }

        return searchVersionNumberGeometrySearchQueryExtPostCall(versionNumber, query, ext, limit, language, extendedPostalCodesFor, idxSet, searchVersionNumberGeometrySearchQueryExtPostRequest, _callback);

    }

    /**
     * Geometry Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param searchVersionNumberGeometrySearchQueryExtPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberGeometrySearchQueryExtPost(Integer versionNumber, String query, String ext, Integer limit, String language, String extendedPostalCodesFor, String idxSet, SearchVersionNumberGeometrySearchQueryExtPostRequest searchVersionNumberGeometrySearchQueryExtPostRequest) throws ApiException {
        searchVersionNumberGeometrySearchQueryExtPostWithHttpInfo(versionNumber, query, ext, limit, language, extendedPostalCodesFor, idxSet, searchVersionNumberGeometrySearchQueryExtPostRequest);
    }

    /**
     * Geometry Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param searchVersionNumberGeometrySearchQueryExtPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberGeometrySearchQueryExtPostWithHttpInfo(Integer versionNumber, String query, String ext, Integer limit, String language, String extendedPostalCodesFor, String idxSet, SearchVersionNumberGeometrySearchQueryExtPostRequest searchVersionNumberGeometrySearchQueryExtPostRequest) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberGeometrySearchQueryExtPostValidateBeforeCall(versionNumber, query, ext, limit, language, extendedPostalCodesFor, idxSet, searchVersionNumberGeometrySearchQueryExtPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Geometry Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param searchVersionNumberGeometrySearchQueryExtPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometrySearchQueryExtPostAsync(Integer versionNumber, String query, String ext, Integer limit, String language, String extendedPostalCodesFor, String idxSet, SearchVersionNumberGeometrySearchQueryExtPostRequest searchVersionNumberGeometrySearchQueryExtPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberGeometrySearchQueryExtPostValidateBeforeCall(versionNumber, query, ext, limit, language, extendedPostalCodesFor, idxSet, searchVersionNumberGeometrySearchQueryExtPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberNearbySearchExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param radius If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional, default to 10000)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberNearbySearchExtGetCall(Integer versionNumber, String ext, Float lat, Float lon, Integer limit, Integer ofs, String countrySet, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/nearbySearch/.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (minFuzzyLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFuzzyLevel", minFuzzyLevel));
        }

        if (maxFuzzyLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFuzzyLevel", maxFuzzyLevel));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberNearbySearchExtGetValidateBeforeCall(Integer versionNumber, String ext, Float lat, Float lon, Integer limit, Integer ofs, String countrySet, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberNearbySearchExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberNearbySearchExtGet(Async)");
        }

        // verify the required parameter 'lat' is set
        if (lat == null) {
            throw new ApiException("Missing the required parameter 'lat' when calling searchVersionNumberNearbySearchExtGet(Async)");
        }

        // verify the required parameter 'lon' is set
        if (lon == null) {
            throw new ApiException("Missing the required parameter 'lon' when calling searchVersionNumberNearbySearchExtGet(Async)");
        }

        return searchVersionNumberNearbySearchExtGetCall(versionNumber, ext, lat, lon, limit, ofs, countrySet, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view, _callback);

    }

    /**
     * Nearby Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param radius If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional, default to 10000)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberNearbySearchExtGet(Integer versionNumber, String ext, Float lat, Float lon, Integer limit, Integer ofs, String countrySet, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view) throws ApiException {
        searchVersionNumberNearbySearchExtGetWithHttpInfo(versionNumber, ext, lat, lon, limit, ofs, countrySet, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view);
    }

    /**
     * Nearby Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param radius If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional, default to 10000)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberNearbySearchExtGetWithHttpInfo(Integer versionNumber, String ext, Float lat, Float lon, Integer limit, Integer ofs, String countrySet, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberNearbySearchExtGetValidateBeforeCall(versionNumber, ext, lat, lon, limit, ofs, countrySet, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Nearby Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param radius If radius and position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional, default to 10000)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberNearbySearchExtGetAsync(Integer versionNumber, String ext, Float lat, Float lon, Integer limit, Integer ofs, String countrySet, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberNearbySearchExtGetValidateBeforeCall(versionNumber, ext, lat, lon, limit, ofs, countrySet, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberPoiSearchQueryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberPoiSearchQueryExtGetCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/poiSearch/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberPoiSearchQueryExtGetValidateBeforeCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberPoiSearchQueryExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberPoiSearchQueryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberPoiSearchQueryExtGet(Async)");
        }

        return searchVersionNumberPoiSearchQueryExtGetCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, _callback);

    }

    /**
     * Points of Interest Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberPoiSearchQueryExtGet(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view) throws ApiException {
        searchVersionNumberPoiSearchQueryExtGetWithHttpInfo(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view);
    }

    /**
     * Points of Interest Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberPoiSearchQueryExtGetWithHttpInfo(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberPoiSearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Points of Interest Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberPoiSearchQueryExtGetAsync(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberPoiSearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberRoutedSearchQueryPositionHeadingExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param multiplier Multiplies the limit by N to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit. (optional, default to 2)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberRoutedSearchQueryPositionHeadingExtGetCall(Integer versionNumber, String query, String position, Float heading, String ext, Boolean typeahead, Integer limit, Integer multiplier, Integer routingTimeout, String language, String extendedPostalCodesFor, String idxSet, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/routedSearch/{query}/{position}/{heading}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "position" + "}", localVarApiClient.escapeString(position.toString()))
            .replace("{" + "heading" + "}", localVarApiClient.escapeString(heading.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (multiplier != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("multiplier", multiplier));
        }

        if (routingTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routingTimeout", routingTimeout));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberRoutedSearchQueryPositionHeadingExtGetValidateBeforeCall(Integer versionNumber, String query, String position, Float heading, String ext, Boolean typeahead, Integer limit, Integer multiplier, Integer routingTimeout, String language, String extendedPostalCodesFor, String idxSet, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'heading' is set
        if (heading == null) {
            throw new ApiException("Missing the required parameter 'heading' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(Async)");
        }

        return searchVersionNumberRoutedSearchQueryPositionHeadingExtGetCall(versionNumber, query, position, heading, ext, typeahead, limit, multiplier, routingTimeout, language, extendedPostalCodesFor, idxSet, _callback);

    }

    /**
     * Routed Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param multiplier Multiplies the limit by N to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit. (optional, default to 2)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void searchVersionNumberRoutedSearchQueryPositionHeadingExtGet(Integer versionNumber, String query, String position, Float heading, String ext, Boolean typeahead, Integer limit, Integer multiplier, Integer routingTimeout, String language, String extendedPostalCodesFor, String idxSet) throws ApiException {
        searchVersionNumberRoutedSearchQueryPositionHeadingExtGetWithHttpInfo(versionNumber, query, position, heading, ext, typeahead, limit, multiplier, routingTimeout, language, extendedPostalCodesFor, idxSet);
    }

    /**
     * Routed Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param multiplier Multiplies the limit by N to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit. (optional, default to 2)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchVersionNumberRoutedSearchQueryPositionHeadingExtGetWithHttpInfo(Integer versionNumber, String query, String position, Float heading, String ext, Boolean typeahead, Integer limit, Integer multiplier, Integer routingTimeout, String language, String extendedPostalCodesFor, String idxSet) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberRoutedSearchQueryPositionHeadingExtGetValidateBeforeCall(versionNumber, query, position, heading, ext, typeahead, limit, multiplier, routingTimeout, language, extendedPostalCodesFor, idxSet, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Routed Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param multiplier Multiplies the limit by N to gather more candidate POIs, which will then be sorted by drive distance, returning only the top candidates according to the limit. (optional, default to 2)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberRoutedSearchQueryPositionHeadingExtGetAsync(Integer versionNumber, String query, String position, Float heading, String ext, Boolean typeahead, Integer limit, Integer multiplier, Integer routingTimeout, String language, String extendedPostalCodesFor, String idxSet, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberRoutedSearchQueryPositionHeadingExtGetValidateBeforeCall(versionNumber, query, position, heading, ext, typeahead, limit, multiplier, routingTimeout, language, extendedPostalCodesFor, idxSet, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberSQueryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberSQueryExtGetCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/s/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberSQueryExtGetValidateBeforeCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberSQueryExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberSQueryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberSQueryExtGet(Async)");
        }

        return searchVersionNumberSQueryExtGetCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view, _callback);

    }

    /**
     * Low bandwith Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void searchVersionNumberSQueryExtGet(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view) throws ApiException {
        searchVersionNumberSQueryExtGetWithHttpInfo(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view);
    }

    /**
     * Low bandwith Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchVersionNumberSQueryExtGetWithHttpInfo(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberSQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Low bandwith Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberSQueryExtGetAsync(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String idxSet, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberSQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, idxSet, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberSearchAlongRouteQueryExtPost
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param maxDetourTime Maximum detour time (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param searchVersionNumberSearchAlongRouteQueryExtPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberSearchAlongRouteQueryExtPostCall(Integer versionNumber, String query, String ext, Integer maxDetourTime, Integer limit, SearchVersionNumberSearchAlongRouteQueryExtPostRequest searchVersionNumberSearchAlongRouteQueryExtPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchVersionNumberSearchAlongRouteQueryExtPostRequest;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/searchAlongRoute/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (maxDetourTime != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxDetourTime", maxDetourTime));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberSearchAlongRouteQueryExtPostValidateBeforeCall(Integer versionNumber, String query, String ext, Integer maxDetourTime, Integer limit, SearchVersionNumberSearchAlongRouteQueryExtPostRequest searchVersionNumberSearchAlongRouteQueryExtPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberSearchAlongRouteQueryExtPost(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberSearchAlongRouteQueryExtPost(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberSearchAlongRouteQueryExtPost(Async)");
        }

        // verify the required parameter 'maxDetourTime' is set
        if (maxDetourTime == null) {
            throw new ApiException("Missing the required parameter 'maxDetourTime' when calling searchVersionNumberSearchAlongRouteQueryExtPost(Async)");
        }

        return searchVersionNumberSearchAlongRouteQueryExtPostCall(versionNumber, query, ext, maxDetourTime, limit, searchVersionNumberSearchAlongRouteQueryExtPostRequest, _callback);

    }

    /**
     * Along Route Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param maxDetourTime Maximum detour time (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param searchVersionNumberSearchAlongRouteQueryExtPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberSearchAlongRouteQueryExtPost(Integer versionNumber, String query, String ext, Integer maxDetourTime, Integer limit, SearchVersionNumberSearchAlongRouteQueryExtPostRequest searchVersionNumberSearchAlongRouteQueryExtPostRequest) throws ApiException {
        searchVersionNumberSearchAlongRouteQueryExtPostWithHttpInfo(versionNumber, query, ext, maxDetourTime, limit, searchVersionNumberSearchAlongRouteQueryExtPostRequest);
    }

    /**
     * Along Route Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param maxDetourTime Maximum detour time (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param searchVersionNumberSearchAlongRouteQueryExtPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberSearchAlongRouteQueryExtPostWithHttpInfo(Integer versionNumber, String query, String ext, Integer maxDetourTime, Integer limit, SearchVersionNumberSearchAlongRouteQueryExtPostRequest searchVersionNumberSearchAlongRouteQueryExtPostRequest) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberSearchAlongRouteQueryExtPostValidateBeforeCall(versionNumber, query, ext, maxDetourTime, limit, searchVersionNumberSearchAlongRouteQueryExtPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Along Route Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param maxDetourTime Maximum detour time (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param searchVersionNumberSearchAlongRouteQueryExtPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberSearchAlongRouteQueryExtPostAsync(Integer versionNumber, String query, String ext, Integer maxDetourTime, Integer limit, SearchVersionNumberSearchAlongRouteQueryExtPostRequest searchVersionNumberSearchAlongRouteQueryExtPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberSearchAlongRouteQueryExtPostValidateBeforeCall(versionNumber, query, ext, maxDetourTime, limit, searchVersionNumberSearchAlongRouteQueryExtPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberSearchQueryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded.  To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found &lt;a href&#x3D;\&quot;/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo\&quot;&gt;here&lt;/a&gt;. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberSearchQueryExtGetCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/search/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (minFuzzyLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("minFuzzyLevel", minFuzzyLevel));
        }

        if (maxFuzzyLevel != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("maxFuzzyLevel", maxFuzzyLevel));
        }

        if (idxSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("idxSet", idxSet));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberSearchQueryExtGetValidateBeforeCall(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberSearchQueryExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberSearchQueryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberSearchQueryExtGet(Async)");
        }

        return searchVersionNumberSearchQueryExtGetCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view, _callback);

    }

    /**
     * Fuzzy Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded.  To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found &lt;a href&#x3D;\&quot;/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo\&quot;&gt;here&lt;/a&gt;. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberSearchQueryExtGet(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view) throws ApiException {
        searchVersionNumberSearchQueryExtGetWithHttpInfo(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view);
    }

    /**
     * Fuzzy Search
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded.  To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found &lt;a href&#x3D;\&quot;/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo\&quot;&gt;here&lt;/a&gt;. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberSearchQueryExtGetWithHttpInfo(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberSearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Fuzzy Search (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded.  To perform a reverse geocode, the user can provide latitude and longitude coordinates directly in the query. More information can be found &lt;a href&#x3D;\&quot;/search-api/search-api-documentation-search/fuzzy-search#AdditionalInfo\&quot;&gt;here&lt;/a&gt;. (required)
     * @param ext Expected response format. (required)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param minFuzzyLevel Minimum fuzziness level to be used. (optional, default to 1)
     * @param maxFuzzyLevel Maximum fuzziness level to be used. (optional, default to 2)
     * @param idxSet A comma separated list of indexes which should be utilized for the search. Item order does not matter. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address range interpolation (when there is no PAD)   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;Xstr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberSearchQueryExtGetAsync(Integer versionNumber, String query, String ext, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, Integer minFuzzyLevel, Integer maxFuzzyLevel, String idxSet, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberSearchQueryExtGetValidateBeforeCall(versionNumber, query, ext, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, minFuzzyLevel, maxFuzzyLevel, idxSet, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
