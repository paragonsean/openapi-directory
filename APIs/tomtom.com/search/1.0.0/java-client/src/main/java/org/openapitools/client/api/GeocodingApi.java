/*
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeocodingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeocodingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public GeocodingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchVersionNumberGeocodeQueryExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param storeResult If the \&quot;storeResult\&quot; flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use. (optional, default to false)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeocodeQueryExtGetCall(Integer versionNumber, String query, String ext, Boolean storeResult, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/geocode/{query}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "query" + "}", localVarApiClient.escapeString(query.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (storeResult != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("storeResult", storeResult));
        }

        if (typeahead != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("typeahead", typeahead));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (countrySet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySet", countrySet));
        }

        if (lat != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lat", lat));
        }

        if (lon != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lon", lon));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (topLeft != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("topLeft", topLeft));
        }

        if (btmRight != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("btmRight", btmRight));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberGeocodeQueryExtGetValidateBeforeCall(Integer versionNumber, String query, String ext, Boolean storeResult, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeocodeQueryExtGet(Async)");
        }

        // verify the required parameter 'query' is set
        if (query == null) {
            throw new ApiException("Missing the required parameter 'query' when calling searchVersionNumberGeocodeQueryExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberGeocodeQueryExtGet(Async)");
        }

        return searchVersionNumberGeocodeQueryExtGetCall(versionNumber, query, ext, storeResult, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, _callback);

    }

    /**
     * Geocode
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param storeResult If the \&quot;storeResult\&quot; flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use. (optional, default to false)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberGeocodeQueryExtGet(Integer versionNumber, String query, String ext, Boolean storeResult, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view) throws ApiException {
        searchVersionNumberGeocodeQueryExtGetWithHttpInfo(versionNumber, query, ext, storeResult, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view);
    }

    /**
     * Geocode
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param storeResult If the \&quot;storeResult\&quot; flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use. (optional, default to false)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberGeocodeQueryExtGetWithHttpInfo(Integer versionNumber, String query, String ext, Boolean storeResult, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberGeocodeQueryExtGetValidateBeforeCall(versionNumber, query, ext, storeResult, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Geocode (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param query Query string. Must be properly URL encoded. (required)
     * @param ext Expected response format. (required)
     * @param storeResult If the \&quot;storeResult\&quot; flag is set, the query will be interpreted as a stored geocode and will be billed according to the terms of use. (optional, default to false)
     * @param typeahead If the \&quot;typeahead\&quot; flag is set, the query will be interpreted as a partial input and the search will enter &lt;b&gt;predictive&lt;/b&gt; mode. (optional, default to false)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param countrySet Comma separated string of country codes. This will limit the search to the specified countries. (optional)
     * @param lat Latitude where results should be biased. NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param lon Longitude where results should be biased NOTE: supplying a lat/lon without a radius will return search results biased to that point. (optional)
     * @param radius If radius &lt;b&gt;and&lt;/b&gt; position are set, the results will be constrained to the defined area. The radius parameter is specified in meters. (optional)
     * @param topLeft Top left position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param btmRight Bottom right position of the bounding box. This is specified as a comma separated string composed of lat., lon. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param view Geopolitical View. (optional, default to Unified)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeocodeQueryExtGetAsync(Integer versionNumber, String query, String ext, Boolean storeResult, Boolean typeahead, Integer limit, Integer ofs, String countrySet, Float lat, Float lon, Integer radius, String topLeft, String btmRight, String language, String extendedPostalCodesFor, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberGeocodeQueryExtGetValidateBeforeCall(versionNumber, query, ext, storeResult, typeahead, limit, ofs, countrySet, lat, lon, radius, topLeft, btmRight, language, extendedPostalCodesFor, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberStructuredGeocodeExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param countryCode 2 or 3 letter country code (e.g.: FR, ES). (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param streetNumber The street number for the structured address. (optional)
     * @param streetName The street name for the structured address. (optional)
     * @param crossStreet The cross street name for the structured address. (optional)
     * @param municipality The municipality (city/town) for the structured address. (optional)
     * @param municipalitySubdivision The municipality subdivision (sub/super city) for the structured address. (optional)
     * @param countryTertiarySubdivision The named area for the structured address. (optional)
     * @param countrySecondarySubdivision The county for the structured address. (optional)
     * @param countrySubdivision The state or province for the structured address. (optional)
     * @param postalCode The zip code or postal code for the structured address. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberStructuredGeocodeExtGetCall(Integer versionNumber, String ext, String countryCode, Integer limit, Integer ofs, String streetNumber, String streetName, String crossStreet, String municipality, String municipalitySubdivision, String countryTertiarySubdivision, String countrySecondarySubdivision, String countrySubdivision, String postalCode, String language, String extendedPostalCodesFor, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/structuredGeocode.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (ofs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("ofs", ofs));
        }

        if (streetNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetNumber", streetNumber));
        }

        if (streetName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("streetName", streetName));
        }

        if (crossStreet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("crossStreet", crossStreet));
        }

        if (municipality != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("municipality", municipality));
        }

        if (municipalitySubdivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("municipalitySubdivision", municipalitySubdivision));
        }

        if (countryTertiarySubdivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryTertiarySubdivision", countryTertiarySubdivision));
        }

        if (countrySecondarySubdivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySecondarySubdivision", countrySecondarySubdivision));
        }

        if (countrySubdivision != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countrySubdivision", countrySubdivision));
        }

        if (postalCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("postalCode", postalCode));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (extendedPostalCodesFor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extendedPostalCodesFor", extendedPostalCodesFor));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberStructuredGeocodeExtGetValidateBeforeCall(Integer versionNumber, String ext, String countryCode, Integer limit, Integer ofs, String streetNumber, String streetName, String crossStreet, String municipality, String municipalitySubdivision, String countryTertiarySubdivision, String countrySecondarySubdivision, String countrySubdivision, String postalCode, String language, String extendedPostalCodesFor, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberStructuredGeocodeExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberStructuredGeocodeExtGet(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling searchVersionNumberStructuredGeocodeExtGet(Async)");
        }

        return searchVersionNumberStructuredGeocodeExtGetCall(versionNumber, ext, countryCode, limit, ofs, streetNumber, streetName, crossStreet, municipality, municipalitySubdivision, countryTertiarySubdivision, countrySecondarySubdivision, countrySubdivision, postalCode, language, extendedPostalCodesFor, _callback);

    }

    /**
     * Structured Geocode
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param countryCode 2 or 3 letter country code (e.g.: FR, ES). (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param streetNumber The street number for the structured address. (optional)
     * @param streetName The street name for the structured address. (optional)
     * @param crossStreet The cross street name for the structured address. (optional)
     * @param municipality The municipality (city/town) for the structured address. (optional)
     * @param municipalitySubdivision The municipality subdivision (sub/super city) for the structured address. (optional)
     * @param countryTertiarySubdivision The named area for the structured address. (optional)
     * @param countrySecondarySubdivision The county for the structured address. (optional)
     * @param countrySubdivision The state or province for the structured address. (optional)
     * @param postalCode The zip code or postal code for the structured address. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberStructuredGeocodeExtGet(Integer versionNumber, String ext, String countryCode, Integer limit, Integer ofs, String streetNumber, String streetName, String crossStreet, String municipality, String municipalitySubdivision, String countryTertiarySubdivision, String countrySecondarySubdivision, String countrySubdivision, String postalCode, String language, String extendedPostalCodesFor) throws ApiException {
        searchVersionNumberStructuredGeocodeExtGetWithHttpInfo(versionNumber, ext, countryCode, limit, ofs, streetNumber, streetName, crossStreet, municipality, municipalitySubdivision, countryTertiarySubdivision, countrySecondarySubdivision, countrySubdivision, postalCode, language, extendedPostalCodesFor);
    }

    /**
     * Structured Geocode
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param countryCode 2 or 3 letter country code (e.g.: FR, ES). (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param streetNumber The street number for the structured address. (optional)
     * @param streetName The street name for the structured address. (optional)
     * @param crossStreet The cross street name for the structured address. (optional)
     * @param municipality The municipality (city/town) for the structured address. (optional)
     * @param municipalitySubdivision The municipality subdivision (sub/super city) for the structured address. (optional)
     * @param countryTertiarySubdivision The named area for the structured address. (optional)
     * @param countrySecondarySubdivision The county for the structured address. (optional)
     * @param countrySubdivision The state or province for the structured address. (optional)
     * @param postalCode The zip code or postal code for the structured address. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberStructuredGeocodeExtGetWithHttpInfo(Integer versionNumber, String ext, String countryCode, Integer limit, Integer ofs, String streetNumber, String streetName, String crossStreet, String municipality, String municipalitySubdivision, String countryTertiarySubdivision, String countrySecondarySubdivision, String countrySubdivision, String postalCode, String language, String extendedPostalCodesFor) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberStructuredGeocodeExtGetValidateBeforeCall(versionNumber, ext, countryCode, limit, ofs, streetNumber, streetName, crossStreet, municipality, municipalitySubdivision, countryTertiarySubdivision, countrySecondarySubdivision, countrySubdivision, postalCode, language, extendedPostalCodesFor, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Structured Geocode (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param countryCode 2 or 3 letter country code (e.g.: FR, ES). (required)
     * @param limit Maximum number of search results that will be returned. (optional, default to 10)
     * @param ofs Starting offset of the returned results within the full result set. (optional, default to 0)
     * @param streetNumber The street number for the structured address. (optional)
     * @param streetName The street name for the structured address. (optional)
     * @param crossStreet The cross street name for the structured address. (optional)
     * @param municipality The municipality (city/town) for the structured address. (optional)
     * @param municipalitySubdivision The municipality subdivision (sub/super city) for the structured address. (optional)
     * @param countryTertiarySubdivision The named area for the structured address. (optional)
     * @param countrySecondarySubdivision The county for the structured address. (optional)
     * @param countrySubdivision The state or province for the structured address. (optional)
     * @param postalCode The zip code or postal code for the structured address. (optional)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param extendedPostalCodesFor Indexes for which extended postal codes should be included in the results. Available indexes are:   - &lt;b&gt;Addr&lt;/b&gt; &#x3D; Address ranges   - &lt;b&gt;Geo&lt;/b&gt; &#x3D; Geographies   - &lt;b&gt;PAD&lt;/b&gt; &#x3D; Point Addresses   - &lt;b&gt;POI&lt;/b&gt; &#x3D; Points of Interest   - &lt;b&gt;Str&lt;/b&gt; &#x3D; Streets   - &lt;b&gt;XStr&lt;/b&gt; &#x3D; Cross Streets (intersections) (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberStructuredGeocodeExtGetAsync(Integer versionNumber, String ext, String countryCode, Integer limit, Integer ofs, String streetNumber, String streetName, String crossStreet, String municipality, String municipalitySubdivision, String countryTertiarySubdivision, String countrySecondarySubdivision, String countrySubdivision, String postalCode, String language, String extendedPostalCodesFor, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberStructuredGeocodeExtGetValidateBeforeCall(versionNumber, ext, countryCode, limit, ofs, streetNumber, streetName, crossStreet, municipality, municipalitySubdivision, countryTertiarySubdivision, countrySecondarySubdivision, countrySubdivision, postalCode, language, extendedPostalCodesFor, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
