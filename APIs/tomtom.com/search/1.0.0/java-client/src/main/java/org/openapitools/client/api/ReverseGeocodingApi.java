/*
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ReverseGeocodingApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ReverseGeocodingApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ReverseGeocodingApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchVersionNumberReverseGeocodeCrossStreetPositionExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of cross-streets to return. (optional, default to 1)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberReverseGeocodeCrossStreetPositionExtGetCall(Integer versionNumber, String position, String ext, Integer limit, Boolean spatialKeys, Float heading, Integer radius, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/reverseGeocode/crossStreet/{position}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "position" + "}", localVarApiClient.escapeString(position.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (spatialKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spatialKeys", spatialKeys));
        }

        if (heading != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heading", heading));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberReverseGeocodeCrossStreetPositionExtGetValidateBeforeCall(Integer versionNumber, String position, String ext, Integer limit, Boolean spatialKeys, Float heading, Integer radius, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberReverseGeocodeCrossStreetPositionExtGet(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling searchVersionNumberReverseGeocodeCrossStreetPositionExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberReverseGeocodeCrossStreetPositionExtGet(Async)");
        }

        return searchVersionNumberReverseGeocodeCrossStreetPositionExtGetCall(versionNumber, position, ext, limit, spatialKeys, heading, radius, language, _callback);

    }

    /**
     * Cross Street lookup
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of cross-streets to return. (optional, default to 1)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberReverseGeocodeCrossStreetPositionExtGet(Integer versionNumber, String position, String ext, Integer limit, Boolean spatialKeys, Float heading, Integer radius, String language) throws ApiException {
        searchVersionNumberReverseGeocodeCrossStreetPositionExtGetWithHttpInfo(versionNumber, position, ext, limit, spatialKeys, heading, radius, language);
    }

    /**
     * Cross Street lookup
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of cross-streets to return. (optional, default to 1)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberReverseGeocodeCrossStreetPositionExtGetWithHttpInfo(Integer versionNumber, String position, String ext, Integer limit, Boolean spatialKeys, Float heading, Integer radius, String language) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberReverseGeocodeCrossStreetPositionExtGetValidateBeforeCall(versionNumber, position, ext, limit, spatialKeys, heading, radius, language, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Cross Street lookup (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param limit Maximum number of cross-streets to return. (optional, default to 1)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param language Language in which search results should be returned. Should be one of &lt;a href&#x3D;\&quot;/search-api/search-api-documentation/supported-languages\&quot;&gt;supported IETF language tags&lt;/a&gt;, case insensitive. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberReverseGeocodeCrossStreetPositionExtGetAsync(Integer versionNumber, String position, String ext, Integer limit, Boolean spatialKeys, Float heading, Integer radius, String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberReverseGeocodeCrossStreetPositionExtGetValidateBeforeCall(versionNumber, position, ext, limit, spatialKeys, heading, radius, language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberReverseGeocodePositionExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param returnSpeedLimit To enable return of the posted speed limit (where available). (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param number If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number. (optional)
     * @param returnRoadUse Enables return of the road use array for reverse geocodes at street level. (optional, default to false)
     * @param roadUse Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: [\&quot;LimitedAccess\&quot;, \&quot;Arterial\&quot;, \&quot;Terminal\&quot;, \&quot;Ramp\&quot;, \&quot;Rotary\&quot;, \&quot;LocalStreet\&quot;]. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to cb)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberReverseGeocodePositionExtGetCall(Integer versionNumber, String position, String ext, Boolean spatialKeys, Boolean returnSpeedLimit, Float heading, Integer radius, String number, Boolean returnRoadUse, String roadUse, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/reverseGeocode/{position}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "position" + "}", localVarApiClient.escapeString(position.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (spatialKeys != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("spatialKeys", spatialKeys));
        }

        if (returnSpeedLimit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnSpeedLimit", returnSpeedLimit));
        }

        if (heading != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("heading", heading));
        }

        if (radius != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("radius", radius));
        }

        if (number != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("number", number));
        }

        if (returnRoadUse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnRoadUse", returnRoadUse));
        }

        if (roadUse != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("roadUse", roadUse));
        }

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberReverseGeocodePositionExtGetValidateBeforeCall(Integer versionNumber, String position, String ext, Boolean spatialKeys, Boolean returnSpeedLimit, Float heading, Integer radius, String number, Boolean returnRoadUse, String roadUse, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberReverseGeocodePositionExtGet(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling searchVersionNumberReverseGeocodePositionExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberReverseGeocodePositionExtGet(Async)");
        }

        return searchVersionNumberReverseGeocodePositionExtGetCall(versionNumber, position, ext, spatialKeys, returnSpeedLimit, heading, radius, number, returnRoadUse, roadUse, paramCallback, _callback);

    }

    /**
     * Reverse Geocode
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param returnSpeedLimit To enable return of the posted speed limit (where available). (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param number If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number. (optional)
     * @param returnRoadUse Enables return of the road use array for reverse geocodes at street level. (optional, default to false)
     * @param roadUse Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: [\&quot;LimitedAccess\&quot;, \&quot;Arterial\&quot;, \&quot;Terminal\&quot;, \&quot;Ramp\&quot;, \&quot;Rotary\&quot;, \&quot;LocalStreet\&quot;]. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to cb)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberReverseGeocodePositionExtGet(Integer versionNumber, String position, String ext, Boolean spatialKeys, Boolean returnSpeedLimit, Float heading, Integer radius, String number, Boolean returnRoadUse, String roadUse, String paramCallback) throws ApiException {
        searchVersionNumberReverseGeocodePositionExtGetWithHttpInfo(versionNumber, position, ext, spatialKeys, returnSpeedLimit, heading, radius, number, returnRoadUse, roadUse, paramCallback);
    }

    /**
     * Reverse Geocode
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param returnSpeedLimit To enable return of the posted speed limit (where available). (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param number If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number. (optional)
     * @param returnRoadUse Enables return of the road use array for reverse geocodes at street level. (optional, default to false)
     * @param roadUse Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: [\&quot;LimitedAccess\&quot;, \&quot;Arterial\&quot;, \&quot;Terminal\&quot;, \&quot;Ramp\&quot;, \&quot;Rotary\&quot;, \&quot;LocalStreet\&quot;]. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to cb)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberReverseGeocodePositionExtGetWithHttpInfo(Integer versionNumber, String position, String ext, Boolean spatialKeys, Boolean returnSpeedLimit, Float heading, Integer radius, String number, Boolean returnRoadUse, String roadUse, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberReverseGeocodePositionExtGetValidateBeforeCall(versionNumber, position, ext, spatialKeys, returnSpeedLimit, heading, radius, number, returnRoadUse, roadUse, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Reverse Geocode (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param ext Expected response format. (required)
     * @param spatialKeys If the \&quot;spatialKeys\&quot; flag is set, the response will also contain a proprietary geospatial keys for a specified location. (optional, default to false)
     * @param returnSpeedLimit To enable return of the posted speed limit (where available). (optional, default to false)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (optional)
     * @param radius The maximum distance in meters from the specified position for the reverse geocoder to consider. (optional, default to 10000)
     * @param number If a number is sent in along with the request, the response may include the side of the street (Left/Right) and an offset position for that number. (optional)
     * @param returnRoadUse Enables return of the road use array for reverse geocodes at street level. (optional, default to false)
     * @param roadUse Restricts reverse geocodes to a certain type of road use. The road use array for reverse geocodes can be one or more of: [\&quot;LimitedAccess\&quot;, \&quot;Arterial\&quot;, \&quot;Terminal\&quot;, \&quot;Ramp\&quot;, \&quot;Rotary\&quot;, \&quot;LocalStreet\&quot;]. (optional)
     * @param paramCallback Specifies the jsonp callback method. (optional, default to cb)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberReverseGeocodePositionExtGetAsync(Integer versionNumber, String position, String ext, Boolean spatialKeys, Boolean returnSpeedLimit, Float heading, Integer radius, String number, Boolean returnRoadUse, String roadUse, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberReverseGeocodePositionExtGetValidateBeforeCall(versionNumber, position, ext, spatialKeys, returnSpeedLimit, heading, radius, number, returnRoadUse, roadUse, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
