/*
 * Search
 * Search API is a RESTful API that allows developers to run a single line fuzzy search for addresses and POIs. Search API returns the latitude/longitude of a specific address, cross street, geographic feature, or point of interest (POI).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.SearchVersionNumberGeometryFilterExtPostRequest;
import org.openapitools.client.model.SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FiltersApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FiltersApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FiltersApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for searchVersionNumberGeometryFilterExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometryFilterExtGetCall(Integer versionNumber, String ext, String geometryList, String poiList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/geometryFilter.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (geometryList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("geometryList", geometryList));
        }

        if (poiList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poiList", poiList));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberGeometryFilterExtGetValidateBeforeCall(Integer versionNumber, String ext, String geometryList, String poiList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometryFilterExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberGeometryFilterExtGet(Async)");
        }

        // verify the required parameter 'geometryList' is set
        if (geometryList == null) {
            throw new ApiException("Missing the required parameter 'geometryList' when calling searchVersionNumberGeometryFilterExtGet(Async)");
        }

        // verify the required parameter 'poiList' is set
        if (poiList == null) {
            throw new ApiException("Missing the required parameter 'poiList' when calling searchVersionNumberGeometryFilterExtGet(Async)");
        }

        return searchVersionNumberGeometryFilterExtGetCall(versionNumber, ext, geometryList, poiList, _callback);

    }

    /**
     * Geometry Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberGeometryFilterExtGet(Integer versionNumber, String ext, String geometryList, String poiList) throws ApiException {
        searchVersionNumberGeometryFilterExtGetWithHttpInfo(versionNumber, ext, geometryList, poiList);
    }

    /**
     * Geometry Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberGeometryFilterExtGetWithHttpInfo(Integer versionNumber, String ext, String geometryList, String poiList) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberGeometryFilterExtGetValidateBeforeCall(versionNumber, ext, geometryList, poiList, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Geometry Filter (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param geometryList List of geometries to filter by. Available types are CIRCLE (with the radius expressed in meters) and POLYGON. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometryFilterExtGetAsync(Integer versionNumber, String ext, String geometryList, String poiList, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberGeometryFilterExtGetValidateBeforeCall(versionNumber, ext, geometryList, poiList, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberGeometryFilterExtPost
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param searchVersionNumberGeometryFilterExtPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometryFilterExtPostCall(Integer versionNumber, String ext, SearchVersionNumberGeometryFilterExtPostRequest searchVersionNumberGeometryFilterExtPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchVersionNumberGeometryFilterExtPostRequest;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/geometryFilter.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberGeometryFilterExtPostValidateBeforeCall(Integer versionNumber, String ext, SearchVersionNumberGeometryFilterExtPostRequest searchVersionNumberGeometryFilterExtPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberGeometryFilterExtPost(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberGeometryFilterExtPost(Async)");
        }

        return searchVersionNumberGeometryFilterExtPostCall(versionNumber, ext, searchVersionNumberGeometryFilterExtPostRequest, _callback);

    }

    /**
     * Geometry Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param searchVersionNumberGeometryFilterExtPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public void searchVersionNumberGeometryFilterExtPost(Integer versionNumber, String ext, SearchVersionNumberGeometryFilterExtPostRequest searchVersionNumberGeometryFilterExtPostRequest) throws ApiException {
        searchVersionNumberGeometryFilterExtPostWithHttpInfo(versionNumber, ext, searchVersionNumberGeometryFilterExtPostRequest);
    }

    /**
     * Geometry Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param searchVersionNumberGeometryFilterExtPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> searchVersionNumberGeometryFilterExtPostWithHttpInfo(Integer versionNumber, String ext, SearchVersionNumberGeometryFilterExtPostRequest searchVersionNumberGeometryFilterExtPostRequest) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberGeometryFilterExtPostValidateBeforeCall(versionNumber, ext, searchVersionNumberGeometryFilterExtPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Geometry Filter (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param ext Expected response format. (required)
     * @param searchVersionNumberGeometryFilterExtPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call searchVersionNumberGeometryFilterExtPostAsync(Integer versionNumber, String ext, SearchVersionNumberGeometryFilterExtPostRequest searchVersionNumberGeometryFilterExtPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberGeometryFilterExtPostValidateBeforeCall(versionNumber, ext, searchVersionNumberGeometryFilterExtPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberRoutedFilterPositionHeadingExtGet
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberRoutedFilterPositionHeadingExtGetCall(Integer versionNumber, String position, Float heading, String ext, String poiList, Integer routingTimeout, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/routedFilter/{position}/{heading}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "position" + "}", localVarApiClient.escapeString(position.toString()))
            .replace("{" + "heading" + "}", localVarApiClient.escapeString(heading.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (poiList != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("poiList", poiList));
        }

        if (routingTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routingTimeout", routingTimeout));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberRoutedFilterPositionHeadingExtGetValidateBeforeCall(Integer versionNumber, String position, Float heading, String ext, String poiList, Integer routingTimeout, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'heading' is set
        if (heading == null) {
            throw new ApiException("Missing the required parameter 'heading' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet(Async)");
        }

        // verify the required parameter 'poiList' is set
        if (poiList == null) {
            throw new ApiException("Missing the required parameter 'poiList' when calling searchVersionNumberRoutedFilterPositionHeadingExtGet(Async)");
        }

        return searchVersionNumberRoutedFilterPositionHeadingExtGetCall(versionNumber, position, heading, ext, poiList, routingTimeout, _callback);

    }

    /**
     * Routed Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void searchVersionNumberRoutedFilterPositionHeadingExtGet(Integer versionNumber, String position, Float heading, String ext, String poiList, Integer routingTimeout) throws ApiException {
        searchVersionNumberRoutedFilterPositionHeadingExtGetWithHttpInfo(versionNumber, position, heading, ext, poiList, routingTimeout);
    }

    /**
     * Routed Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchVersionNumberRoutedFilterPositionHeadingExtGetWithHttpInfo(Integer versionNumber, String position, Float heading, String ext, String poiList, Integer routingTimeout) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberRoutedFilterPositionHeadingExtGetValidateBeforeCall(versionNumber, position, heading, ext, poiList, routingTimeout, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Routed Filter (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param poiList List of POIs to filter. The only required attribute of a POI is position, everything else is optional and will be echoed back when passed in. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberRoutedFilterPositionHeadingExtGetAsync(Integer versionNumber, String position, Float heading, String ext, String poiList, Integer routingTimeout, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberRoutedFilterPositionHeadingExtGetValidateBeforeCall(versionNumber, position, heading, ext, poiList, routingTimeout, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for searchVersionNumberRoutedFilterPositionHeadingExtPost
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param searchVersionNumberRoutedFilterPositionHeadingExtPostRequest  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberRoutedFilterPositionHeadingExtPostCall(Integer versionNumber, String position, Float heading, String ext, Integer routingTimeout, SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest searchVersionNumberRoutedFilterPositionHeadingExtPostRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = searchVersionNumberRoutedFilterPositionHeadingExtPostRequest;

        // create path and map variables
        String localVarPath = "/search/{versionNumber}/routedFilter/{position}/{heading}.{ext}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "position" + "}", localVarApiClient.escapeString(position.toString()))
            .replace("{" + "heading" + "}", localVarApiClient.escapeString(heading.toString()))
            .replace("{" + "ext" + "}", localVarApiClient.escapeString(ext.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (routingTimeout != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("routingTimeout", routingTimeout));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call searchVersionNumberRoutedFilterPositionHeadingExtPostValidateBeforeCall(Integer versionNumber, String position, Float heading, String ext, Integer routingTimeout, SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest searchVersionNumberRoutedFilterPositionHeadingExtPostRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost(Async)");
        }

        // verify the required parameter 'position' is set
        if (position == null) {
            throw new ApiException("Missing the required parameter 'position' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost(Async)");
        }

        // verify the required parameter 'heading' is set
        if (heading == null) {
            throw new ApiException("Missing the required parameter 'heading' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost(Async)");
        }

        // verify the required parameter 'ext' is set
        if (ext == null) {
            throw new ApiException("Missing the required parameter 'ext' when calling searchVersionNumberRoutedFilterPositionHeadingExtPost(Async)");
        }

        return searchVersionNumberRoutedFilterPositionHeadingExtPostCall(versionNumber, position, heading, ext, routingTimeout, searchVersionNumberRoutedFilterPositionHeadingExtPostRequest, _callback);

    }

    /**
     * Routed Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param searchVersionNumberRoutedFilterPositionHeadingExtPostRequest  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void searchVersionNumberRoutedFilterPositionHeadingExtPost(Integer versionNumber, String position, Float heading, String ext, Integer routingTimeout, SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest searchVersionNumberRoutedFilterPositionHeadingExtPostRequest) throws ApiException {
        searchVersionNumberRoutedFilterPositionHeadingExtPostWithHttpInfo(versionNumber, position, heading, ext, routingTimeout, searchVersionNumberRoutedFilterPositionHeadingExtPostRequest);
    }

    /**
     * Routed Filter
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param searchVersionNumberRoutedFilterPositionHeadingExtPostRequest  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> searchVersionNumberRoutedFilterPositionHeadingExtPostWithHttpInfo(Integer versionNumber, String position, Float heading, String ext, Integer routingTimeout, SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest searchVersionNumberRoutedFilterPositionHeadingExtPostRequest) throws ApiException {
        okhttp3.Call localVarCall = searchVersionNumberRoutedFilterPositionHeadingExtPostValidateBeforeCall(versionNumber, position, heading, ext, routingTimeout, searchVersionNumberRoutedFilterPositionHeadingExtPostRequest, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Routed Filter (asynchronously)
     * 
     * @param versionNumber Service version number. The current value is 2. (required)
     * @param position This is specified as a comma separated string composed of lat., lon. (required)
     * @param heading The directional heading in degrees, usually similar to the course along a road segment. Entered in degrees, measured clockwise from north (so north is 0, east is 90, etc.) (required)
     * @param ext Expected response format. (required)
     * @param routingTimeout Only return results that arrive from routing engine within this time limit. (optional, default to 4000)
     * @param searchVersionNumberRoutedFilterPositionHeadingExtPostRequest  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK: the search successfully returned zero or more results. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request: one or more parameters were incorrectly specified. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden: possible causes include:   - Service requires SSL   - Not authorized   - Rate or volume limit exceeded   - Unknown referer </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method Not Allowed: the HTTP method (GET, POST, etc) is not supported for this request. </td><td>  -  </td></tr>
        <tr><td> 596 </td><td> Not Found: the HTTP request method (GET, POST, etc) or path is incorrect. </td><td>  -  </td></tr>
        <tr><td> 5XX </td><td> An error occurred while processing the request. Please try again later. </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call searchVersionNumberRoutedFilterPositionHeadingExtPostAsync(Integer versionNumber, String position, Float heading, String ext, Integer routingTimeout, SearchVersionNumberRoutedFilterPositionHeadingExtPostRequest searchVersionNumberRoutedFilterPositionHeadingExtPostRequest, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = searchVersionNumberRoutedFilterPositionHeadingExtPostValidateBeforeCall(versionNumber, position, heading, ext, routingTimeout, searchVersionNumberRoutedFilterPositionHeadingExtPostRequest, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
