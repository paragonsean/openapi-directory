/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Copyrights service.
* @module api/CopyrightsApi
* @version 1.0.0
*/
export default class CopyrightsApi {

    /**
    * Constructs a new CopyrightsApi. 
    * @alias module:api/CopyrightsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapVersionNumberCopyrightsCaptionFormatGet operation.
     * @callback module:api/CopyrightsApi~mapVersionNumberCopyrightsCaptionFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Captions
     * This API returns copyright captions for the map service.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1.
     * @param {module:model/String} format Format of the response
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Specifies the jsonp callback method. Only used when format is jsonp
     * @param {module:api/CopyrightsApi~mapVersionNumberCopyrightsCaptionFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberCopyrightsCaptionFormatGet(versionNumber, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsCaptionFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsCaptionFormatGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'format': format
      };
      let queryParams = {
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/copyrights/caption.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapVersionNumberCopyrightsFormatGet operation.
     * @callback module:api/CopyrightsApi~mapVersionNumberCopyrightsFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copyrights whole world
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1
     * @param {module:model/String} format Format of the response
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Specifies the jsonp callback method. Only used when format is jsonp
     * @param {module:api/CopyrightsApi~mapVersionNumberCopyrightsFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberCopyrightsFormatGet(versionNumber, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsFormatGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'format': format
      };
      let queryParams = {
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/copyrights.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet operation.
     * @callback module:api/CopyrightsApi~mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copyrights bounding box
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1
     * @param {module:model/String} format Format of the response
     * @param {Number} minLon Minimum longitude coordinate of bounding box defined in terms of latitude/longitude.
     * @param {Number} minLat Minimum latitude coordinate of bounding box defined in terms of latitude/longitude.
     * @param {Number} maxLon Maximum longitude coordinate of bounding box defined in terms of latitude/longitude.
     * @param {Number} maxLat Maximum latitude coordinate of bounding box defined in terms of latitude/longitude.
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Specifies the jsonp callback method. Only used when format is jsonp.
     * @param {module:api/CopyrightsApi~mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(versionNumber, format, minLon, minLat, maxLon, maxLat, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet");
      }
      // verify the required parameter 'minLon' is set
      if (minLon === undefined || minLon === null) {
        throw new Error("Missing the required parameter 'minLon' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet");
      }
      // verify the required parameter 'minLat' is set
      if (minLat === undefined || minLat === null) {
        throw new Error("Missing the required parameter 'minLat' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet");
      }
      // verify the required parameter 'maxLon' is set
      if (maxLon === undefined || maxLon === null) {
        throw new Error("Missing the required parameter 'maxLon' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet");
      }
      // verify the required parameter 'maxLat' is set
      if (maxLat === undefined || maxLat === null) {
        throw new Error("Missing the required parameter 'maxLat' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'format': format,
        'minLon': minLon,
        'minLat': minLat,
        'maxLon': maxLon,
        'maxLat': maxLat
      };
      let queryParams = {
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/copyrights/{minLon}/{minLat}/{maxLon}/{maxLat}.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapVersionNumberCopyrightsZoomXYFormatGet operation.
     * @callback module:api/CopyrightsApi~mapVersionNumberCopyrightsZoomXYFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Copyrights tile
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1
     * @param {module:model/String} format Format of the response
     * @param {module:model/Number} zoom Zoom level of tile to be rendered. Only used for tile-level copyright calls.
     * @param {Number} X X coordinate of the tile on zoom grid. Only used for tile-level copyright calls.
     * @param {Number} Y Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls.
     * @param {Object} opts Optional parameters
     * @param {String} [callback] Specifies the jsonp callback method. Only used when format is jsonp.
     * @param {module:api/CopyrightsApi~mapVersionNumberCopyrightsZoomXYFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberCopyrightsZoomXYFormatGet(versionNumber, format, zoom, X, Y, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsZoomXYFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsZoomXYFormatGet");
      }
      // verify the required parameter 'zoom' is set
      if (zoom === undefined || zoom === null) {
        throw new Error("Missing the required parameter 'zoom' when calling mapVersionNumberCopyrightsZoomXYFormatGet");
      }
      // verify the required parameter 'X' is set
      if (X === undefined || X === null) {
        throw new Error("Missing the required parameter 'X' when calling mapVersionNumberCopyrightsZoomXYFormatGet");
      }
      // verify the required parameter 'Y' is set
      if (Y === undefined || Y === null) {
        throw new Error("Missing the required parameter 'Y' when calling mapVersionNumberCopyrightsZoomXYFormatGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'format': format,
        'zoom': zoom,
        'X': X,
        'Y': Y
      };
      let queryParams = {
        'callback': opts['callback']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/copyrights/{zoom}/{X}/{Y}.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
