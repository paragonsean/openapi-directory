/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Vector service.
* @module api/VectorApi
* @version 1.0.0
*/
export default class VectorApi {

    /**
    * Constructs a new VectorApi. 
    * @alias module:api/VectorApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapVersionNumberTileLayerStyleZoomXYPbfGet operation.
     * @callback module:api/VectorApi~mapVersionNumberTileLayerStyleZoomXYPbfGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tile
     * The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1
     * @param {module:model/String} layer Layer of tile to be rendered
     * @param {module:model/String} style Style of tile to be rendered
     * @param {module:model/Number} zoom Zoom level of tile to be rendered
     * @param {Number} X x coordinate of tile on zoom grid
     * @param {Number} Y y coordinate of tile on zoom grid
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [view] Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for an explanation of how this works in live services.
     * @param {String} [language = 'NGT')] Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place's local official language and script (where available). See the <a href=\"/maps-api/maps-api-documentation-vector/tile\">documentation</a> for a full list of options.
     * @param {module:api/VectorApi~mapVersionNumberTileLayerStyleZoomXYPbfGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberTileLayerStyleZoomXYPbfGet(versionNumber, layer, style, zoom, X, Y, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet");
      }
      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet");
      }
      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet");
      }
      // verify the required parameter 'zoom' is set
      if (zoom === undefined || zoom === null) {
        throw new Error("Missing the required parameter 'zoom' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet");
      }
      // verify the required parameter 'X' is set
      if (X === undefined || X === null) {
        throw new Error("Missing the required parameter 'X' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet");
      }
      // verify the required parameter 'Y' is set
      if (Y === undefined || Y === null) {
        throw new Error("Missing the required parameter 'Y' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'layer': layer,
        'style': style,
        'zoom': zoom,
        'X': X,
        'Y': Y
      };
      let queryParams = {
        'view': opts['view'],
        'language': opts['language']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/tile/{layer}/{style}/{zoom}/{X}/{Y}.pbf', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
