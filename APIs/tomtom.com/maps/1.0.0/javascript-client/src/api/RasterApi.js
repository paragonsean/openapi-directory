/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Raster service.
* @module api/RasterApi
* @version 1.0.0
*/
export default class RasterApi {

    /**
    * Constructs a new RasterApi. 
    * @alias module:api/RasterApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the mapVersionNumberStaticimageGet operation.
     * @callback module:api/RasterApi~mapVersionNumberStaticimageGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Static Image
     * The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1.
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [layer = 'basic')] Layer of image to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.
     * @param {module:model/String} [style = 'main')] Map style to be returned
     * @param {module:model/String} [format = 'png')] Image format to be returned
     * @param {module:model/Number} [zoom = 12)] Zoom level of map image to be returned.
     * @param {String} [center] Coordinates for the center point of the image. Must be used with the <strong>width</strong> and <strong>height</strong> parameters; cannot be used with <strong>bbox</strong>. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910).
     * @param {Number} [width = 512)] Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192.
     * @param {Number} [height = 512)] Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192.
     * @param {String} [bbox] Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values <strong>must</strong> be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with <strong>center</strong>, <strong>width</strong>, or <strong>height</strong> parameters.
     * @param {module:model/String} [view] Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-api/maps-api-documentation-raster/raster-tile\">documentation</a> for an explanation of how this works in live services.
     * @param {module:api/RasterApi~mapVersionNumberStaticimageGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberStaticimageGet(versionNumber, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberStaticimageGet");
      }

      let pathParams = {
        'versionNumber': versionNumber
      };
      let queryParams = {
        'layer': opts['layer'],
        'style': opts['style'],
        'format': opts['format'],
        'zoom': opts['zoom'],
        'center': opts['center'],
        'width': opts['width'],
        'height': opts['height'],
        'bbox': opts['bbox'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/staticimage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapVersionNumberTileLayerStyleZoomXYFormatGet operation.
     * @callback module:api/RasterApi~mapVersionNumberTileLayerStyleZoomXYFormatGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Tile
     * The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1.
     * @param {module:model/String} layer Layer of tile to be rendered. <em>Hybrid</em> and <em>labels</em> are intended for layering with other data and are only available in <em>png</em> format.
     * @param {module:model/String} style Style of tile to be rendered
     * @param {module:model/Number} zoom Zoom level of tile to be rendered
     * @param {Number} X x coordinate of tile on zoom grid
     * @param {Number} Y y coordinate of tile on zoom grid
     * @param {module:model/String} format Format of the response.
     * @param {Object} opts Optional parameters
     * @param {module:model/Number} [tileSize = 256)] Tile dimensions in pixels. <em>512</em> is only available for the <em>main</em> style and <em>basic</em> or <em>labels</em> layers.
     * @param {module:model/String} [view] Geopolitical view. Determines rendering of disputed areas. See the <a href=\"/maps-sdk-web/functional-examples#geopolitical-views\">documentation</a> for an explanation of how this works in live services.
     * @param {module:api/RasterApi~mapVersionNumberTileLayerStyleZoomXYFormatGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberTileLayerStyleZoomXYFormatGet(versionNumber, layer, style, zoom, X, Y, format, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }
      // verify the required parameter 'layer' is set
      if (layer === undefined || layer === null) {
        throw new Error("Missing the required parameter 'layer' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }
      // verify the required parameter 'style' is set
      if (style === undefined || style === null) {
        throw new Error("Missing the required parameter 'style' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }
      // verify the required parameter 'zoom' is set
      if (zoom === undefined || zoom === null) {
        throw new Error("Missing the required parameter 'zoom' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }
      // verify the required parameter 'X' is set
      if (X === undefined || X === null) {
        throw new Error("Missing the required parameter 'X' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }
      // verify the required parameter 'Y' is set
      if (Y === undefined || Y === null) {
        throw new Error("Missing the required parameter 'Y' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'layer': layer,
        'style': style,
        'zoom': zoom,
        'X': X,
        'Y': Y,
        'format': format
      };
      let queryParams = {
        'tileSize': opts['tileSize'],
        'view': opts['view']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/tile/{layer}/{style}/{zoom}/{X}/{Y}.{format}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
