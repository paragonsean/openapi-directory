/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* WMSWMTS service.
* @module api/WMSWMTSApi
* @version 1.0.0
*/
export default class WMSWMTSApi {

    /**
    * Constructs a new WMSWMTSApi. 
    * @alias module:api/WMSWMTSApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCapabilities operation.
     * @callback module:api/WMSWMTSApi~getCapabilitiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetCapabilities
     * The GetCapabilities call is part of TomTom's implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.
     * @param {module:model/Number} versionNumber 
     * @param {module:model/String} service 
     * @param {module:model/String} request 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [version] WMS service version
     * @param {module:api/WMSWMTSApi~getCapabilitiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getCapabilities(versionNumber, service, request, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling getCapabilities");
      }
      // verify the required parameter 'service' is set
      if (service === undefined || service === null) {
        throw new Error("Missing the required parameter 'service' when calling getCapabilities");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling getCapabilities");
      }

      let pathParams = {
        'versionNumber': versionNumber
      };
      let queryParams = {
        'service': service,
        'request': request,
        'version': opts['version']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/wms//', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getMap operation.
     * @callback module:api/WMSWMTSApi~getMapCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * GetMap
     * The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1
     * @param {module:model/String} request Request type
     * @param {module:model/String} srs Projection used in describing the <b>bbox</b> EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785)
     * @param {String} bbox Bounding box in the projection stated in <b>srs</b> (minLon,minLat,maxLon,maxLat)
     * @param {Number} width Width of the resulting image, in pixels Maximum value is 2048
     * @param {Number} height Height of the resulting image, in pixels Maximum value is 2048
     * @param {module:model/String} format Image format to be returned
     * @param {module:model/String} layers Map layers requested Currently only the basic layer is available
     * @param {module:model/String} version WMS service version
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [styles] Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank.
     * @param {module:model/String} [service] Service type
     * @param {module:api/WMSWMTSApi~getMapCallback} callback The callback function, accepting three arguments: error, data, response
     */
    getMap(versionNumber, request, srs, bbox, width, height, format, layers, version, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling getMap");
      }
      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling getMap");
      }
      // verify the required parameter 'srs' is set
      if (srs === undefined || srs === null) {
        throw new Error("Missing the required parameter 'srs' when calling getMap");
      }
      // verify the required parameter 'bbox' is set
      if (bbox === undefined || bbox === null) {
        throw new Error("Missing the required parameter 'bbox' when calling getMap");
      }
      // verify the required parameter 'width' is set
      if (width === undefined || width === null) {
        throw new Error("Missing the required parameter 'width' when calling getMap");
      }
      // verify the required parameter 'height' is set
      if (height === undefined || height === null) {
        throw new Error("Missing the required parameter 'height' when calling getMap");
      }
      // verify the required parameter 'format' is set
      if (format === undefined || format === null) {
        throw new Error("Missing the required parameter 'format' when calling getMap");
      }
      // verify the required parameter 'layers' is set
      if (layers === undefined || layers === null) {
        throw new Error("Missing the required parameter 'layers' when calling getMap");
      }
      // verify the required parameter 'version' is set
      if (version === undefined || version === null) {
        throw new Error("Missing the required parameter 'version' when calling getMap");
      }

      let pathParams = {
        'versionNumber': versionNumber
      };
      let queryParams = {
        'request': request,
        'srs': srs,
        'bbox': bbox,
        'width': width,
        'height': height,
        'format': format,
        'layers': layers,
        'styles': opts['styles'],
        'service': opts['service'],
        'version': version
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['api_key'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/wms/', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet operation.
     * @callback module:api/WMSWMTSApi~mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * WMTS
     * The WMTS GetCapabilities call implements version 1.0.0 of the <a href=\"http://www.opengeospatial.org/standards/wmts\">Web Map Tile Service</a> (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom's raster map tile service. See the <a href=\"/maps-api/maps-api-documentation-raster/wmts\">documentation</a> for more information on WMTS.
     * @param {module:model/Number} versionNumber Version of the service to call. The current version is 1
     * @param {String} key Your API key for calling this service.
     * @param {module:model/String} wmtsVersion 
     * @param {module:api/WMSWMTSApi~mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet(versionNumber, key, wmtsVersion, callback) {
      let postBody = null;
      // verify the required parameter 'versionNumber' is set
      if (versionNumber === undefined || versionNumber === null) {
        throw new Error("Missing the required parameter 'versionNumber' when calling mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet");
      }
      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet");
      }
      // verify the required parameter 'wmtsVersion' is set
      if (wmtsVersion === undefined || wmtsVersion === null) {
        throw new Error("Missing the required parameter 'wmtsVersion' when calling mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet");
      }

      let pathParams = {
        'versionNumber': versionNumber,
        'key': key,
        'wmtsVersion': wmtsVersion
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/map/{versionNumber}/wmts/{key}/{wmtsVersion}/WMTSCapabilities.xml', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
