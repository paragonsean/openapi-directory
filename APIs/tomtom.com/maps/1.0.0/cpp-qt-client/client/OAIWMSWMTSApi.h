/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIWMSWMTSApi_H
#define OAI_OAIWMSWMTSApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIWMSWMTSApi : public QObject {
    Q_OBJECT

public:
    OAIWMSWMTSApi(const int timeOut = 0);
    ~OAIWMSWMTSApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  service QString [required]
    * @param[in]  request QString [required]
    * @param[in]  version QString [optional]
    */
    virtual void getCapabilities(const qint32 &version_number, const QString &service, const QString &request, const ::OpenAPI::OptionalParam<QString> &version = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  request QString [required]
    * @param[in]  srs QString [required]
    * @param[in]  bbox QString [required]
    * @param[in]  width qint32 [required]
    * @param[in]  height qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  layers QString [required]
    * @param[in]  version QString [required]
    * @param[in]  styles QString [optional]
    * @param[in]  service QString [optional]
    */
    virtual void getMap(const qint32 &version_number, const QString &request, const QString &srs, const QString &bbox, const qint32 &width, const qint32 &height, const QString &format, const QString &layers, const QString &version, const ::OpenAPI::OptionalParam<QString> &styles = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &service = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  key QString [required]
    * @param[in]  wmts_version QString [required]
    */
    virtual void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet(const qint32 &version_number, const QString &key, const QString &wmts_version);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void getCapabilitiesCallback(OAIHttpRequestWorker *worker);
    void getMapCallback(OAIHttpRequestWorker *worker);
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void getCapabilitiesSignal();
    void getMapSignal();
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignal();


    void getCapabilitiesSignalFull(OAIHttpRequestWorker *worker);
    void getMapSignalFull(OAIHttpRequestWorker *worker);
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use getCapabilitiesSignalError() instead")
    void getCapabilitiesSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getCapabilitiesSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMapSignalError() instead")
    void getMapSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void getMapSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalError() instead")
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use getCapabilitiesSignalErrorFull() instead")
    void getCapabilitiesSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getCapabilitiesSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use getMapSignalErrorFull() instead")
    void getMapSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void getMapSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalErrorFull() instead")
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
