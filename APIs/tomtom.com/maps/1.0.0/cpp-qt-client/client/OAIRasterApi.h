/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIRasterApi_H
#define OAI_OAIRasterApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIRasterApi : public QObject {
    Q_OBJECT

public:
    OAIRasterApi(const int timeOut = 0);
    ~OAIRasterApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  layer QString [optional]
    * @param[in]  style QString [optional]
    * @param[in]  format QString [optional]
    * @param[in]  zoom qint32 [optional]
    * @param[in]  center QString [optional]
    * @param[in]  width qint32 [optional]
    * @param[in]  height qint32 [optional]
    * @param[in]  bbox QString [optional]
    * @param[in]  view QString [optional]
    */
    virtual void mapVersionNumberStaticimageGet(const qint32 &version_number, const ::OpenAPI::OptionalParam<QString> &layer = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &style = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &format = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &zoom = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &center = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<qint32> &width = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<qint32> &height = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &bbox = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  layer QString [required]
    * @param[in]  style QString [required]
    * @param[in]  zoom qint32 [required]
    * @param[in]  x qint32 [required]
    * @param[in]  y qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  tile_size qint32 [optional]
    * @param[in]  view QString [optional]
    */
    virtual void mapVersionNumberTileLayerStyleZoomXYFormatGet(const qint32 &version_number, const QString &layer, const QString &style, const qint32 &zoom, const qint32 &x, const qint32 &y, const QString &format, const ::OpenAPI::OptionalParam<qint32> &tile_size = ::OpenAPI::OptionalParam<qint32>(), const ::OpenAPI::OptionalParam<QString> &view = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mapVersionNumberStaticimageGetCallback(OAIHttpRequestWorker *worker);
    void mapVersionNumberTileLayerStyleZoomXYFormatGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mapVersionNumberStaticimageGetSignal();
    void mapVersionNumberTileLayerStyleZoomXYFormatGetSignal();


    void mapVersionNumberStaticimageGetSignalFull(OAIHttpRequestWorker *worker);
    void mapVersionNumberTileLayerStyleZoomXYFormatGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use mapVersionNumberStaticimageGetSignalError() instead")
    void mapVersionNumberStaticimageGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberStaticimageGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberTileLayerStyleZoomXYFormatGetSignalError() instead")
    void mapVersionNumberTileLayerStyleZoomXYFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberTileLayerStyleZoomXYFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mapVersionNumberStaticimageGetSignalErrorFull() instead")
    void mapVersionNumberStaticimageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberStaticimageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberTileLayerStyleZoomXYFormatGetSignalErrorFull() instead")
    void mapVersionNumberTileLayerStyleZoomXYFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberTileLayerStyleZoomXYFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
