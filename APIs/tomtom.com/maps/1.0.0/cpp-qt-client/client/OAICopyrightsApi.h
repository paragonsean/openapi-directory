/**
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAICopyrightsApi_H
#define OAI_OAICopyrightsApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAICopyrightsApi : public QObject {
    Q_OBJECT

public:
    OAICopyrightsApi(const int timeOut = 0);
    ~OAICopyrightsApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  callback QString [optional]
    */
    virtual void mapVersionNumberCopyrightsCaptionFormatGet(const qint32 &version_number, const QString &format, const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  callback QString [optional]
    */
    virtual void mapVersionNumberCopyrightsFormatGet(const qint32 &version_number, const QString &format, const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  min_lon double [required]
    * @param[in]  min_lat double [required]
    * @param[in]  max_lon double [required]
    * @param[in]  max_lat double [required]
    * @param[in]  callback QString [optional]
    */
    virtual void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(const qint32 &version_number, const QString &format, const double &min_lon, const double &min_lat, const double &max_lon, const double &max_lat, const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  version_number qint32 [required]
    * @param[in]  format QString [required]
    * @param[in]  zoom qint32 [required]
    * @param[in]  x qint32 [required]
    * @param[in]  y qint32 [required]
    * @param[in]  callback QString [optional]
    */
    virtual void mapVersionNumberCopyrightsZoomXYFormatGet(const qint32 &version_number, const QString &format, const qint32 &zoom, const qint32 &x, const qint32 &y, const ::OpenAPI::OptionalParam<QString> &callback = ::OpenAPI::OptionalParam<QString>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void mapVersionNumberCopyrightsCaptionFormatGetCallback(OAIHttpRequestWorker *worker);
    void mapVersionNumberCopyrightsFormatGetCallback(OAIHttpRequestWorker *worker);
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetCallback(OAIHttpRequestWorker *worker);
    void mapVersionNumberCopyrightsZoomXYFormatGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void mapVersionNumberCopyrightsCaptionFormatGetSignal();
    void mapVersionNumberCopyrightsFormatGetSignal();
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignal();
    void mapVersionNumberCopyrightsZoomXYFormatGetSignal();


    void mapVersionNumberCopyrightsCaptionFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void mapVersionNumberCopyrightsFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalFull(OAIHttpRequestWorker *worker);
    void mapVersionNumberCopyrightsZoomXYFormatGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsCaptionFormatGetSignalError() instead")
    void mapVersionNumberCopyrightsCaptionFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsCaptionFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsFormatGetSignalError() instead")
    void mapVersionNumberCopyrightsFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalError() instead")
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsZoomXYFormatGetSignalError() instead")
    void mapVersionNumberCopyrightsZoomXYFormatGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsZoomXYFormatGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsCaptionFormatGetSignalErrorFull() instead")
    void mapVersionNumberCopyrightsCaptionFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsCaptionFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsFormatGetSignalErrorFull() instead")
    void mapVersionNumberCopyrightsFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalErrorFull() instead")
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use mapVersionNumberCopyrightsZoomXYFormatGetSignalErrorFull() instead")
    void mapVersionNumberCopyrightsZoomXYFormatGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void mapVersionNumberCopyrightsZoomXYFormatGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
