/*
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WmsWmtsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WmsWmtsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WmsWmtsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getCapabilities
     * @param versionNumber  (required)
     * @param service  (required)
     * @param request  (required)
     * @param version WMS service version (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCapabilitiesCall(Integer versionNumber, String service, String request, String version, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/wms//"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (request != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request", request));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCapabilitiesValidateBeforeCall(Integer versionNumber, String service, String request, String version, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling getCapabilities(Async)");
        }

        // verify the required parameter 'service' is set
        if (service == null) {
            throw new ApiException("Missing the required parameter 'service' when calling getCapabilities(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getCapabilities(Async)");
        }

        return getCapabilitiesCall(versionNumber, service, request, version, _callback);

    }

    /**
     * GetCapabilities
     * The GetCapabilities call is part of TomTom&#39;s implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.
     * @param versionNumber  (required)
     * @param service  (required)
     * @param request  (required)
     * @param version WMS service version (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public void getCapabilities(Integer versionNumber, String service, String request, String version) throws ApiException {
        getCapabilitiesWithHttpInfo(versionNumber, service, request, version);
    }

    /**
     * GetCapabilities
     * The GetCapabilities call is part of TomTom&#39;s implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.
     * @param versionNumber  (required)
     * @param service  (required)
     * @param request  (required)
     * @param version WMS service version (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getCapabilitiesWithHttpInfo(Integer versionNumber, String service, String request, String version) throws ApiException {
        okhttp3.Call localVarCall = getCapabilitiesValidateBeforeCall(versionNumber, service, request, version, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * GetCapabilities (asynchronously)
     * The GetCapabilities call is part of TomTom&#39;s implementation of version 1.1.1 the Web Map Service (WMS). It provides descriptions of the other calls that are available in the implementation.
     * @param versionNumber  (required)
     * @param service  (required)
     * @param request  (required)
     * @param version WMS service version (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCapabilitiesAsync(Integer versionNumber, String service, String request, String version, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCapabilitiesValidateBeforeCall(versionNumber, service, request, version, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getMap
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param request Request type (required)
     * @param srs Projection used in describing the &lt;b&gt;bbox&lt;/b&gt; EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
     * @param bbox Bounding box in the projection stated in &lt;b&gt;srs&lt;/b&gt; (minLon,minLat,maxLon,maxLat) (required)
     * @param width Width of the resulting image, in pixels Maximum value is 2048 (required)
     * @param height Height of the resulting image, in pixels Maximum value is 2048 (required)
     * @param format Image format to be returned (required)
     * @param layers Map layers requested Currently only the basic layer is available (required)
     * @param version WMS service version (required)
     * @param styles Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank. (optional)
     * @param service Service type (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapCall(Integer versionNumber, String request, String srs, String bbox, Integer width, Integer height, String format, String layers, String version, String styles, String service, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/wms/"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (request != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("request", request));
        }

        if (srs != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("srs", srs));
        }

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (layers != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("layers", layers));
        }

        if (styles != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("styles", styles));
        }

        if (service != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("service", service));
        }

        if (version != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("version", version));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getMapValidateBeforeCall(Integer versionNumber, String request, String srs, String bbox, Integer width, Integer height, String format, String layers, String version, String styles, String service, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling getMap(Async)");
        }

        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling getMap(Async)");
        }

        // verify the required parameter 'srs' is set
        if (srs == null) {
            throw new ApiException("Missing the required parameter 'srs' when calling getMap(Async)");
        }

        // verify the required parameter 'bbox' is set
        if (bbox == null) {
            throw new ApiException("Missing the required parameter 'bbox' when calling getMap(Async)");
        }

        // verify the required parameter 'width' is set
        if (width == null) {
            throw new ApiException("Missing the required parameter 'width' when calling getMap(Async)");
        }

        // verify the required parameter 'height' is set
        if (height == null) {
            throw new ApiException("Missing the required parameter 'height' when calling getMap(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling getMap(Async)");
        }

        // verify the required parameter 'layers' is set
        if (layers == null) {
            throw new ApiException("Missing the required parameter 'layers' when calling getMap(Async)");
        }

        // verify the required parameter 'version' is set
        if (version == null) {
            throw new ApiException("Missing the required parameter 'version' when calling getMap(Async)");
        }

        return getMapCall(versionNumber, request, srs, bbox, width, height, format, layers, version, styles, service, _callback);

    }

    /**
     * GetMap
     * The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param request Request type (required)
     * @param srs Projection used in describing the &lt;b&gt;bbox&lt;/b&gt; EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
     * @param bbox Bounding box in the projection stated in &lt;b&gt;srs&lt;/b&gt; (minLon,minLat,maxLon,maxLat) (required)
     * @param width Width of the resulting image, in pixels Maximum value is 2048 (required)
     * @param height Height of the resulting image, in pixels Maximum value is 2048 (required)
     * @param format Image format to be returned (required)
     * @param layers Map layers requested Currently only the basic layer is available (required)
     * @param version WMS service version (required)
     * @param styles Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank. (optional)
     * @param service Service type (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public void getMap(Integer versionNumber, String request, String srs, String bbox, Integer width, Integer height, String format, String layers, String version, String styles, String service) throws ApiException {
        getMapWithHttpInfo(versionNumber, request, srs, bbox, width, height, format, layers, version, styles, service);
    }

    /**
     * GetMap
     * The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param request Request type (required)
     * @param srs Projection used in describing the &lt;b&gt;bbox&lt;/b&gt; EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
     * @param bbox Bounding box in the projection stated in &lt;b&gt;srs&lt;/b&gt; (minLon,minLat,maxLon,maxLat) (required)
     * @param width Width of the resulting image, in pixels Maximum value is 2048 (required)
     * @param height Height of the resulting image, in pixels Maximum value is 2048 (required)
     * @param format Image format to be returned (required)
     * @param layers Map layers requested Currently only the basic layer is available (required)
     * @param version WMS service version (required)
     * @param styles Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank. (optional)
     * @param service Service type (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> getMapWithHttpInfo(Integer versionNumber, String request, String srs, String bbox, Integer width, Integer height, String format, String layers, String version, String styles, String service) throws ApiException {
        okhttp3.Call localVarCall = getMapValidateBeforeCall(versionNumber, request, srs, bbox, width, height, format, layers, version, styles, service, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * GetMap (asynchronously)
     * The GetMap call implements the Web Map Service 1.1.1 standard to access TomTom raster map tiles. This service is described in the response to the GetCapabilities API call.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param request Request type (required)
     * @param srs Projection used in describing the &lt;b&gt;bbox&lt;/b&gt; EPSG:3857 is recommended, particularly at higher zoom levels. (Note that EPSG:3857 is functionally equivalent to EPSG:900913/EPSG:3785) (required)
     * @param bbox Bounding box in the projection stated in &lt;b&gt;srs&lt;/b&gt; (minLon,minLat,maxLon,maxLat) (required)
     * @param width Width of the resulting image, in pixels Maximum value is 2048 (required)
     * @param height Height of the resulting image, in pixels Maximum value is 2048 (required)
     * @param format Image format to be returned (required)
     * @param layers Map layers requested Currently only the basic layer is available (required)
     * @param version WMS service version (required)
     * @param styles Map styles to be returned. Currently, no styles are available. This parameter is present for forward compatibility; it must be used and left blank. (optional)
     * @param service Service type (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 202 </td><td> &lt;b&gt;Accepted&lt;/b&gt;: Received by the interface, but there is a WMS exception in processing it. Possible causes include:   - one or more required parameters is missing   - unsupported or unrecognized parameter value   - malformed bounding box requested   - invalid map dimensions requested                                   This code is returned if the parameters of the request were malformed. The response includes a detailed explanation in the Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for the request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMS service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getMapAsync(Integer versionNumber, String request, String srs, String bbox, Integer width, Integer height, String format, String layers, String version, String styles, String service, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = getMapValidateBeforeCall(versionNumber, request, srs, bbox, width, height, format, layers, version, styles, service, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param key Your API key for calling this service. (required)
     * @param wmtsVersion  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Probably malformed syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMTS service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetCall(Integer versionNumber, String key, String wmtsVersion, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/wmts/{key}/{wmtsVersion}/WMTSCapabilities.xml"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "key" + "}", localVarApiClient.escapeString(key.toString()))
            .replace("{" + "wmtsVersion" + "}", localVarApiClient.escapeString(wmtsVersion.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetValidateBeforeCall(Integer versionNumber, String key, String wmtsVersion, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet(Async)");
        }

        // verify the required parameter 'key' is set
        if (key == null) {
            throw new ApiException("Missing the required parameter 'key' when calling mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet(Async)");
        }

        // verify the required parameter 'wmtsVersion' is set
        if (wmtsVersion == null) {
            throw new ApiException("Missing the required parameter 'wmtsVersion' when calling mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet(Async)");
        }

        return mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetCall(versionNumber, key, wmtsVersion, _callback);

    }

    /**
     * WMTS
     * The WMTS GetCapabilities call implements version 1.0.0 of the &lt;a href&#x3D;\&quot;http://www.opengeospatial.org/standards/wmts\&quot;&gt;Web Map Tile Service&lt;/a&gt; (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom&#39;s raster map tile service. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/wmts\&quot;&gt;documentation&lt;/a&gt; for more information on WMTS.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param key Your API key for calling this service. (required)
     * @param wmtsVersion  (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Probably malformed syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMTS service </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGet(Integer versionNumber, String key, String wmtsVersion) throws ApiException {
        mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetWithHttpInfo(versionNumber, key, wmtsVersion);
    }

    /**
     * WMTS
     * The WMTS GetCapabilities call implements version 1.0.0 of the &lt;a href&#x3D;\&quot;http://www.opengeospatial.org/standards/wmts\&quot;&gt;Web Map Tile Service&lt;/a&gt; (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom&#39;s raster map tile service. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/wmts\&quot;&gt;documentation&lt;/a&gt; for more information on WMTS.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param key Your API key for calling this service. (required)
     * @param wmtsVersion  (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Probably malformed syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMTS service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetWithHttpInfo(Integer versionNumber, String key, String wmtsVersion) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetValidateBeforeCall(versionNumber, key, wmtsVersion, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * WMTS (asynchronously)
     * The WMTS GetCapabilities call implements version 1.0.0 of the &lt;a href&#x3D;\&quot;http://www.opengeospatial.org/standards/wmts\&quot;&gt;Web Map Tile Service&lt;/a&gt; (WMTS) standard. It returns metadata that allows compatible calling systems to construct calls to TomTom&#39;s raster map tile service. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/wmts\&quot;&gt;documentation&lt;/a&gt; for more information on WMTS.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param key Your API key for calling this service. (required)
     * @param wmtsVersion  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Probably malformed syntax </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Unauthorized&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom WMTS service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetAsync(Integer versionNumber, String key, String wmtsVersion, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberWmtsKeyWmtsVersionWMTSCapabilitiesXmlGetValidateBeforeCall(versionNumber, key, wmtsVersion, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
