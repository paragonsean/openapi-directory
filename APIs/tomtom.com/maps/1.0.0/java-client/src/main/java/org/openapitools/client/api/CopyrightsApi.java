/*
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CopyrightsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CopyrightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public CopyrightsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapVersionNumberCopyrightsCaptionFormatGet
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsCaptionFormatGetCall(Integer versionNumber, String format, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/copyrights/caption.{format}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberCopyrightsCaptionFormatGetValidateBeforeCall(Integer versionNumber, String format, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsCaptionFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsCaptionFormatGet(Async)");
        }

        return mapVersionNumberCopyrightsCaptionFormatGetCall(versionNumber, format, paramCallback, _callback);

    }

    /**
     * Captions
     * This API returns copyright captions for the map service.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberCopyrightsCaptionFormatGet(Integer versionNumber, String format, String paramCallback) throws ApiException {
        mapVersionNumberCopyrightsCaptionFormatGetWithHttpInfo(versionNumber, format, paramCallback);
    }

    /**
     * Captions
     * This API returns copyright captions for the map service.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberCopyrightsCaptionFormatGetWithHttpInfo(Integer versionNumber, String format, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberCopyrightsCaptionFormatGetValidateBeforeCall(versionNumber, format, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Captions (asynchronously)
     * This API returns copyright captions for the map service.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsCaptionFormatGetAsync(Integer versionNumber, String format, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberCopyrightsCaptionFormatGetValidateBeforeCall(versionNumber, format, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapVersionNumberCopyrightsFormatGet
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsFormatGetCall(Integer versionNumber, String format, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/copyrights.{format}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberCopyrightsFormatGetValidateBeforeCall(Integer versionNumber, String format, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsFormatGet(Async)");
        }

        return mapVersionNumberCopyrightsFormatGetCall(versionNumber, format, paramCallback, _callback);

    }

    /**
     * Copyrights whole world
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberCopyrightsFormatGet(Integer versionNumber, String format, String paramCallback) throws ApiException {
        mapVersionNumberCopyrightsFormatGetWithHttpInfo(versionNumber, format, paramCallback);
    }

    /**
     * Copyrights whole world
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberCopyrightsFormatGetWithHttpInfo(Integer versionNumber, String format, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberCopyrightsFormatGetValidateBeforeCall(versionNumber, format, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copyrights whole world (asynchronously)
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the whole world.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsFormatGetAsync(Integer versionNumber, String format, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberCopyrightsFormatGetValidateBeforeCall(versionNumber, format, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param minLon Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param minLat Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLon Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLat Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - minLon n is out of range [-180,180]: the requested minimum longitude coordinate is out of possible range   - minLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range   - maxLon n is out of range [-180,180]: the requested maximum longitude coordinate is out of possible range   - maxLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetCall(Integer versionNumber, String format, BigDecimal minLon, BigDecimal minLat, BigDecimal maxLon, BigDecimal maxLat, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/copyrights/{minLon}/{minLat}/{maxLon}/{maxLat}.{format}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()))
            .replace("{" + "minLon" + "}", localVarApiClient.escapeString(minLon.toString()))
            .replace("{" + "minLat" + "}", localVarApiClient.escapeString(minLat.toString()))
            .replace("{" + "maxLon" + "}", localVarApiClient.escapeString(maxLon.toString()))
            .replace("{" + "maxLat" + "}", localVarApiClient.escapeString(maxLat.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetValidateBeforeCall(Integer versionNumber, String format, BigDecimal minLon, BigDecimal minLat, BigDecimal maxLon, BigDecimal maxLat, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Async)");
        }

        // verify the required parameter 'minLon' is set
        if (minLon == null) {
            throw new ApiException("Missing the required parameter 'minLon' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Async)");
        }

        // verify the required parameter 'minLat' is set
        if (minLat == null) {
            throw new ApiException("Missing the required parameter 'minLat' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Async)");
        }

        // verify the required parameter 'maxLon' is set
        if (maxLon == null) {
            throw new ApiException("Missing the required parameter 'maxLon' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Async)");
        }

        // verify the required parameter 'maxLat' is set
        if (maxLat == null) {
            throw new ApiException("Missing the required parameter 'maxLat' when calling mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Async)");
        }

        return mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetCall(versionNumber, format, minLon, minLat, maxLon, maxLat, paramCallback, _callback);

    }

    /**
     * Copyrights bounding box
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param minLon Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param minLat Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLon Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLat Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - minLon n is out of range [-180,180]: the requested minimum longitude coordinate is out of possible range   - minLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range   - maxLon n is out of range [-180,180]: the requested maximum longitude coordinate is out of possible range   - maxLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGet(Integer versionNumber, String format, BigDecimal minLon, BigDecimal minLat, BigDecimal maxLon, BigDecimal maxLat, String paramCallback) throws ApiException {
        mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetWithHttpInfo(versionNumber, format, minLon, minLat, maxLon, maxLat, paramCallback);
    }

    /**
     * Copyrights bounding box
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param minLon Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param minLat Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLon Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLat Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - minLon n is out of range [-180,180]: the requested minimum longitude coordinate is out of possible range   - minLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range   - maxLon n is out of range [-180,180]: the requested maximum longitude coordinate is out of possible range   - maxLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetWithHttpInfo(Integer versionNumber, String format, BigDecimal minLon, BigDecimal minLat, BigDecimal maxLon, BigDecimal maxLat, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetValidateBeforeCall(versionNumber, format, minLon, minLat, maxLon, maxLat, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copyrights bounding box (asynchronously)
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for a specific bounding box.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param minLon Minimum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param minLat Minimum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLon Maximum longitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param maxLat Maximum latitude coordinate of bounding box defined in terms of latitude/longitude. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - minLon n is out of range [-180,180]: the requested minimum longitude coordinate is out of possible range   - minLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range   - maxLon n is out of range [-180,180]: the requested maximum longitude coordinate is out of possible range   - maxLat n is out of range [-90,90]: the requested minimum latitude coordinate is out of possible range </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetAsync(Integer versionNumber, String format, BigDecimal minLon, BigDecimal minLat, BigDecimal maxLon, BigDecimal maxLat, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberCopyrightsMinLonMinLatMaxLonMaxLatFormatGetValidateBeforeCall(versionNumber, format, minLon, minLat, maxLon, maxLat, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapVersionNumberCopyrightsZoomXYFormatGet
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param zoom Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
     * @param X X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param Y Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsZoomXYFormatGetCall(Integer versionNumber, String format, Integer zoom, Integer X, Integer Y, String paramCallback, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/copyrights/{zoom}/{X}/{Y}.{format}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()))
            .replace("{" + "zoom" + "}", localVarApiClient.escapeString(zoom.toString()))
            .replace("{" + "X" + "}", localVarApiClient.escapeString(X.toString()))
            .replace("{" + "Y" + "}", localVarApiClient.escapeString(Y.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (paramCallback != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("callback", paramCallback));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberCopyrightsZoomXYFormatGetValidateBeforeCall(Integer versionNumber, String format, Integer zoom, Integer X, Integer Y, String paramCallback, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberCopyrightsZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling mapVersionNumberCopyrightsZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'zoom' is set
        if (zoom == null) {
            throw new ApiException("Missing the required parameter 'zoom' when calling mapVersionNumberCopyrightsZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'X' is set
        if (X == null) {
            throw new ApiException("Missing the required parameter 'X' when calling mapVersionNumberCopyrightsZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'Y' is set
        if (Y == null) {
            throw new ApiException("Missing the required parameter 'Y' when calling mapVersionNumberCopyrightsZoomXYFormatGet(Async)");
        }

        return mapVersionNumberCopyrightsZoomXYFormatGetCall(versionNumber, format, zoom, X, Y, paramCallback, _callback);

    }

    /**
     * Copyrights tile
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param zoom Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
     * @param X X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param Y Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberCopyrightsZoomXYFormatGet(Integer versionNumber, String format, Integer zoom, Integer X, Integer Y, String paramCallback) throws ApiException {
        mapVersionNumberCopyrightsZoomXYFormatGetWithHttpInfo(versionNumber, format, zoom, X, Y, paramCallback);
    }

    /**
     * Copyrights tile
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param zoom Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
     * @param X X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param Y Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberCopyrightsZoomXYFormatGetWithHttpInfo(Integer versionNumber, String format, Integer zoom, Integer X, Integer Y, String paramCallback) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberCopyrightsZoomXYFormatGetValidateBeforeCall(versionNumber, format, zoom, X, Y, paramCallback, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Copyrights tile (asynchronously)
     * The Copyrights API returns copyright information for the Maps API Raster Tile Service in JSON, JSONP, or XML format. This call returns copyright information for the a specific map tile.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param format Format of the response (required)
     * @param zoom Zoom level of tile to be rendered. Only used for tile-level copyright calls. (required)
     * @param X X coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param Y Y coordinate of the tile on zoom grid. Only used for tile-level copyright calls. (required)
     * @param paramCallback Specifies the jsonp callback method. Only used when format is jsonp. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 304 </td><td> &lt;b&gt;Not Modified&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Malformed request&lt;/b&gt;: malformed syntax. Possible causes include:   - requested syntax is not available </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Parameters out of range. Possible causes include:   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level) </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;: Supplied API key is not valid for this request </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Copyrights API service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberCopyrightsZoomXYFormatGetAsync(Integer versionNumber, String format, Integer zoom, Integer X, Integer Y, String paramCallback, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberCopyrightsZoomXYFormatGetValidateBeforeCall(versionNumber, format, zoom, X, Y, paramCallback, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
