/*
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class VectorApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public VectorApi() {
        this(Configuration.getDefaultApiClient());
    }

    public VectorApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapVersionNumberTileLayerStyleZoomXYPbfGet
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param layer Layer of tile to be rendered (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param language Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place&#39;s local official language and script (where available). See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for a full list of options. (optional, default to NGT)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt;&#x3D; 22: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:    - the supplied API key is not valid for this request   - the requested view is not available in your country </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Vector Tile service </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable&lt;/b&gt;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberTileLayerStyleZoomXYPbfGetCall(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String view, String language, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/tile/{layer}/{style}/{zoom}/{X}/{Y}.pbf"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "layer" + "}", localVarApiClient.escapeString(layer.toString()))
            .replace("{" + "style" + "}", localVarApiClient.escapeString(style.toString()))
            .replace("{" + "zoom" + "}", localVarApiClient.escapeString(zoom.toString()))
            .replace("{" + "X" + "}", localVarApiClient.escapeString(X.toString()))
            .replace("{" + "Y" + "}", localVarApiClient.escapeString(Y.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberTileLayerStyleZoomXYPbfGetValidateBeforeCall(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String view, String language, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet(Async)");
        }

        // verify the required parameter 'layer' is set
        if (layer == null) {
            throw new ApiException("Missing the required parameter 'layer' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet(Async)");
        }

        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet(Async)");
        }

        // verify the required parameter 'zoom' is set
        if (zoom == null) {
            throw new ApiException("Missing the required parameter 'zoom' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet(Async)");
        }

        // verify the required parameter 'X' is set
        if (X == null) {
            throw new ApiException("Missing the required parameter 'X' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet(Async)");
        }

        // verify the required parameter 'Y' is set
        if (Y == null) {
            throw new ApiException("Missing the required parameter 'Y' when calling mapVersionNumberTileLayerStyleZoomXYPbfGet(Async)");
        }

        return mapVersionNumberTileLayerStyleZoomXYPbfGetCall(versionNumber, layer, style, zoom, X, Y, view, language, _callback);

    }

    /**
     * Tile
     * The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param layer Layer of tile to be rendered (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param language Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place&#39;s local official language and script (where available). See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for a full list of options. (optional, default to NGT)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt;&#x3D; 22: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:    - the supplied API key is not valid for this request   - the requested view is not available in your country </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Vector Tile service </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable&lt;/b&gt;. </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberTileLayerStyleZoomXYPbfGet(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String view, String language) throws ApiException {
        mapVersionNumberTileLayerStyleZoomXYPbfGetWithHttpInfo(versionNumber, layer, style, zoom, X, Y, view, language);
    }

    /**
     * Tile
     * The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param layer Layer of tile to be rendered (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param language Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place&#39;s local official language and script (where available). See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for a full list of options. (optional, default to NGT)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt;&#x3D; 22: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:    - the supplied API key is not valid for this request   - the requested view is not available in your country </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Vector Tile service </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable&lt;/b&gt;. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberTileLayerStyleZoomXYPbfGetWithHttpInfo(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String view, String language) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberTileLayerStyleZoomXYPbfGetValidateBeforeCall(versionNumber, layer, style, zoom, X, Y, view, language, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Tile (asynchronously)
     * The Maps API Vector Service delivers vector tiles, which are representations of square sections of map data.
     * @param versionNumber Version of the service to call. The current version is 1 (required)
     * @param layer Layer of tile to be rendered (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param language Language to be used for labels in the response. The default is NGT: Neutral Ground Truth, which uses each place&#39;s local official language and script (where available). See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-vector/tile\&quot;&gt;documentation&lt;/a&gt; for a full list of options. (optional, default to NGT)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt;&#x3D; 22: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:    - the supplied API key is not valid for this request   - the requested view is not available in your country </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Vector Tile service </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable&lt;/b&gt;. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberTileLayerStyleZoomXYPbfGetAsync(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String view, String language, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberTileLayerStyleZoomXYPbfGetValidateBeforeCall(versionNumber, layer, style, zoom, X, Y, view, language, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
