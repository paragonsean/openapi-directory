/*
 * Maps
 * The Maps API web services suite offers the following APIs:   - Raster   The Maps Raster API renders map data that is divided into gridded sections called tiles. Tiles are square images (png or jpg format) in various sizes which are available at 19 different zoom levels, ranging from 0 to 20. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 20, the world is divided into 2<sup>40</sup> tiles.   - Vector   Similar to Maps Raster API, the Maps Vector API serves data on different zoom level ranging from 0 to 22. For zoom level 0, the entire earth is displayed on one single tile, while at zoom level 22, the world is divided into 2<sup>44</sup> tiles.   The Maps Vector Service delivers geographic map data packaged in a vector representation of squared sections called vector tiles. Each tile includes pre-defined collections of map features (points, lines, road shapes, water polygons, building footprints, ect.) delivered in one of the specified vector formats. Format of the tile is formally described using protobuf schema.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;



import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RasterApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public RasterApi() {
        this(Configuration.getDefaultApiClient());
    }

    public RasterApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for mapVersionNumberStaticimageGet
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of image to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (optional, default to basic)
     * @param style Map style to be returned (optional, default to main)
     * @param format Image format to be returned (optional, default to png)
     * @param zoom Zoom level of map image to be returned. (optional, default to 12)
     * @param center Coordinates for the center point of the image. Must be used with the &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; parameters; cannot be used with &lt;strong&gt;bbox&lt;/strong&gt;. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910). (optional)
     * @param width Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param height Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param bbox Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values &lt;strong&gt;must&lt;/strong&gt; be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with &lt;strong&gt;center&lt;/strong&gt;, &lt;strong&gt;width&lt;/strong&gt;, or &lt;strong&gt;height&lt;/strong&gt; parameters. (optional)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/raster-tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad Request&lt;/b&gt;: Received by the interface, but there is an error in the request, such as:   - one or more of the required parameters is missing   - unsupported or unrecognized parameter value   - two or more mutually exclusive parameters are used in the same query (e.g. mixing center/width/height and bbox.)   - minimum latitude is greater than maximum latitude in a bbox call   - layer containing alpha channel is requested in format not supporting the alpha channel This code is returned if the required parameters of the request were malformed. A detailed exception explanation is returned in a response in form of Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - supplied API key is not valid for the request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the Static Map Service. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable.&lt;/b&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberStaticimageGetCall(Integer versionNumber, String layer, String style, String format, Integer zoom, String center, Integer width, Integer height, String bbox, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/staticimage"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (layer != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("layer", layer));
        }

        if (style != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("style", style));
        }

        if (format != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("format", format));
        }

        if (zoom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("zoom", zoom));
        }

        if (center != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("center", center));
        }

        if (width != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("width", width));
        }

        if (height != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("height", height));
        }

        if (bbox != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("bbox", bbox));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberStaticimageGetValidateBeforeCall(Integer versionNumber, String layer, String style, String format, Integer zoom, String center, Integer width, Integer height, String bbox, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberStaticimageGet(Async)");
        }

        return mapVersionNumberStaticimageGetCall(versionNumber, layer, style, format, zoom, center, width, height, bbox, view, _callback);

    }

    /**
     * Static Image
     * The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of image to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (optional, default to basic)
     * @param style Map style to be returned (optional, default to main)
     * @param format Image format to be returned (optional, default to png)
     * @param zoom Zoom level of map image to be returned. (optional, default to 12)
     * @param center Coordinates for the center point of the image. Must be used with the &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; parameters; cannot be used with &lt;strong&gt;bbox&lt;/strong&gt;. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910). (optional)
     * @param width Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param height Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param bbox Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values &lt;strong&gt;must&lt;/strong&gt; be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with &lt;strong&gt;center&lt;/strong&gt;, &lt;strong&gt;width&lt;/strong&gt;, or &lt;strong&gt;height&lt;/strong&gt; parameters. (optional)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/raster-tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad Request&lt;/b&gt;: Received by the interface, but there is an error in the request, such as:   - one or more of the required parameters is missing   - unsupported or unrecognized parameter value   - two or more mutually exclusive parameters are used in the same query (e.g. mixing center/width/height and bbox.)   - minimum latitude is greater than maximum latitude in a bbox call   - layer containing alpha channel is requested in format not supporting the alpha channel This code is returned if the required parameters of the request were malformed. A detailed exception explanation is returned in a response in form of Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - supplied API key is not valid for the request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the Static Map Service. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable.&lt;/b&gt; </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberStaticimageGet(Integer versionNumber, String layer, String style, String format, Integer zoom, String center, Integer width, Integer height, String bbox, String view) throws ApiException {
        mapVersionNumberStaticimageGetWithHttpInfo(versionNumber, layer, style, format, zoom, center, width, height, bbox, view);
    }

    /**
     * Static Image
     * The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of image to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (optional, default to basic)
     * @param style Map style to be returned (optional, default to main)
     * @param format Image format to be returned (optional, default to png)
     * @param zoom Zoom level of map image to be returned. (optional, default to 12)
     * @param center Coordinates for the center point of the image. Must be used with the &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; parameters; cannot be used with &lt;strong&gt;bbox&lt;/strong&gt;. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910). (optional)
     * @param width Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param height Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param bbox Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values &lt;strong&gt;must&lt;/strong&gt; be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with &lt;strong&gt;center&lt;/strong&gt;, &lt;strong&gt;width&lt;/strong&gt;, or &lt;strong&gt;height&lt;/strong&gt; parameters. (optional)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/raster-tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad Request&lt;/b&gt;: Received by the interface, but there is an error in the request, such as:   - one or more of the required parameters is missing   - unsupported or unrecognized parameter value   - two or more mutually exclusive parameters are used in the same query (e.g. mixing center/width/height and bbox.)   - minimum latitude is greater than maximum latitude in a bbox call   - layer containing alpha channel is requested in format not supporting the alpha channel This code is returned if the required parameters of the request were malformed. A detailed exception explanation is returned in a response in form of Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - supplied API key is not valid for the request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the Static Map Service. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable.&lt;/b&gt; </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberStaticimageGetWithHttpInfo(Integer versionNumber, String layer, String style, String format, Integer zoom, String center, Integer width, Integer height, String bbox, String view) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberStaticimageGetValidateBeforeCall(versionNumber, layer, style, format, zoom, center, width, height, bbox, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Static Image (asynchronously)
     * The Static Image service renders a rectangular raster image in the style, size, and zoom level specified. The image can be requested using either a center point plus width and height or a bounding box.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of image to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (optional, default to basic)
     * @param style Map style to be returned (optional, default to main)
     * @param format Image format to be returned (optional, default to png)
     * @param zoom Zoom level of map image to be returned. (optional, default to 12)
     * @param center Coordinates for the center point of the image. Must be used with the &lt;strong&gt;width&lt;/strong&gt; and &lt;strong&gt;height&lt;/strong&gt; parameters; cannot be used with &lt;strong&gt;bbox&lt;/strong&gt;. Uses EPSG:3857 projection (functionally equivalent to EPSG:900910). (optional)
     * @param width Width of the resulting image in pixels. Width must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param height Height of the resulting image in pixels. Height must be a positive integer between 1 and 8192. (optional, default to 512)
     * @param bbox Bounding box for the image, using EPSG:3857 projection (functionally equivalent to EPSG:900910). Values &lt;strong&gt;must&lt;/strong&gt; be in the order of minLon, minLat, maxLon, maxLat. MaxLat must be greater than minLat. Longitude values can be on both sides of the 180th meridian. Cannot be used with &lt;strong&gt;center&lt;/strong&gt;, &lt;strong&gt;width&lt;/strong&gt;, or &lt;strong&gt;height&lt;/strong&gt; parameters. (optional)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-api/maps-api-documentation-raster/raster-tile\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad Request&lt;/b&gt;: Received by the interface, but there is an error in the request, such as:   - one or more of the required parameters is missing   - unsupported or unrecognized parameter value   - two or more mutually exclusive parameters are used in the same query (e.g. mixing center/width/height and bbox.)   - minimum latitude is greater than maximum latitude in a bbox call   - layer containing alpha channel is requested in format not supporting the alpha channel This code is returned if the required parameters of the request were malformed. A detailed exception explanation is returned in a response in form of Service Exception Report. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - supplied API key is not valid for the request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the Static Map Service. </td><td>  -  </td></tr>
        <tr><td> 503 </td><td> &lt;b&gt;Service currently unavailable.&lt;/b&gt; </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberStaticimageGetAsync(Integer versionNumber, String layer, String style, String format, Integer zoom, String center, Integer width, Integer height, String bbox, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberStaticimageGetValidateBeforeCall(versionNumber, layer, style, format, zoom, center, width, height, bbox, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for mapVersionNumberTileLayerStyleZoomXYFormatGet
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of tile to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param format Format of the response. (required)
     * @param tileSize Tile dimensions in pixels. &lt;em&gt;512&lt;/em&gt; is only available for the &lt;em&gt;main&lt;/em&gt; style and &lt;em&gt;basic&lt;/em&gt; or &lt;em&gt;labels&lt;/em&gt; layers. (optional, default to 256)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-sdk-web/functional-examples#geopolitical-views\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> &lt;b&gt;Found&lt;/b&gt;: URL redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - the supplied API key is not valid for this request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Raster Tile service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberTileLayerStyleZoomXYFormatGetCall(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String format, Integer tileSize, String view, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/map/{versionNumber}/tile/{layer}/{style}/{zoom}/{X}/{Y}.{format}"
            .replace("{" + "versionNumber" + "}", localVarApiClient.escapeString(versionNumber.toString()))
            .replace("{" + "layer" + "}", localVarApiClient.escapeString(layer.toString()))
            .replace("{" + "style" + "}", localVarApiClient.escapeString(style.toString()))
            .replace("{" + "zoom" + "}", localVarApiClient.escapeString(zoom.toString()))
            .replace("{" + "X" + "}", localVarApiClient.escapeString(X.toString()))
            .replace("{" + "Y" + "}", localVarApiClient.escapeString(Y.toString()))
            .replace("{" + "format" + "}", localVarApiClient.escapeString(format.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (tileSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("tileSize", tileSize));
        }

        if (view != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("view", view));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "api_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call mapVersionNumberTileLayerStyleZoomXYFormatGetValidateBeforeCall(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String format, Integer tileSize, String view, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'versionNumber' is set
        if (versionNumber == null) {
            throw new ApiException("Missing the required parameter 'versionNumber' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'layer' is set
        if (layer == null) {
            throw new ApiException("Missing the required parameter 'layer' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'style' is set
        if (style == null) {
            throw new ApiException("Missing the required parameter 'style' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'zoom' is set
        if (zoom == null) {
            throw new ApiException("Missing the required parameter 'zoom' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'X' is set
        if (X == null) {
            throw new ApiException("Missing the required parameter 'X' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'Y' is set
        if (Y == null) {
            throw new ApiException("Missing the required parameter 'Y' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        // verify the required parameter 'format' is set
        if (format == null) {
            throw new ApiException("Missing the required parameter 'format' when calling mapVersionNumberTileLayerStyleZoomXYFormatGet(Async)");
        }

        return mapVersionNumberTileLayerStyleZoomXYFormatGetCall(versionNumber, layer, style, zoom, X, Y, format, tileSize, view, _callback);

    }

    /**
     * Tile
     * The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of tile to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param format Format of the response. (required)
     * @param tileSize Tile dimensions in pixels. &lt;em&gt;512&lt;/em&gt; is only available for the &lt;em&gt;main&lt;/em&gt; style and &lt;em&gt;basic&lt;/em&gt; or &lt;em&gt;labels&lt;/em&gt; layers. (optional, default to 256)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-sdk-web/functional-examples#geopolitical-views\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> &lt;b&gt;Found&lt;/b&gt;: URL redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - the supplied API key is not valid for this request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Raster Tile service </td><td>  -  </td></tr>
     </table>
     */
    public void mapVersionNumberTileLayerStyleZoomXYFormatGet(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String format, Integer tileSize, String view) throws ApiException {
        mapVersionNumberTileLayerStyleZoomXYFormatGetWithHttpInfo(versionNumber, layer, style, zoom, X, Y, format, tileSize, view);
    }

    /**
     * Tile
     * The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of tile to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param format Format of the response. (required)
     * @param tileSize Tile dimensions in pixels. &lt;em&gt;512&lt;/em&gt; is only available for the &lt;em&gt;main&lt;/em&gt; style and &lt;em&gt;basic&lt;/em&gt; or &lt;em&gt;labels&lt;/em&gt; layers. (optional, default to 256)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-sdk-web/functional-examples#geopolitical-views\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> &lt;b&gt;Found&lt;/b&gt;: URL redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - the supplied API key is not valid for this request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Raster Tile service </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> mapVersionNumberTileLayerStyleZoomXYFormatGetWithHttpInfo(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String format, Integer tileSize, String view) throws ApiException {
        okhttp3.Call localVarCall = mapVersionNumberTileLayerStyleZoomXYFormatGetValidateBeforeCall(versionNumber, layer, style, zoom, X, Y, format, tileSize, view, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Tile (asynchronously)
     * The Maps API Raster Service delivers raster tiles, which are representations of square sections of map data.
     * @param versionNumber Version of the service to call. The current version is 1. (required)
     * @param layer Layer of tile to be rendered. &lt;em&gt;Hybrid&lt;/em&gt; and &lt;em&gt;labels&lt;/em&gt; are intended for layering with other data and are only available in &lt;em&gt;png&lt;/em&gt; format. (required)
     * @param style Style of tile to be rendered (required)
     * @param zoom Zoom level of tile to be rendered (required)
     * @param X x coordinate of tile on zoom grid (required)
     * @param Y y coordinate of tile on zoom grid (required)
     * @param format Format of the response. (required)
     * @param tileSize Tile dimensions in pixels. &lt;em&gt;512&lt;/em&gt; is only available for the &lt;em&gt;main&lt;/em&gt; style and &lt;em&gt;basic&lt;/em&gt; or &lt;em&gt;labels&lt;/em&gt; layers. (optional, default to 256)
     * @param view Geopolitical view. Determines rendering of disputed areas. See the &lt;a href&#x3D;\&quot;/maps-sdk-web/functional-examples#geopolitical-views\&quot;&gt;documentation&lt;/a&gt; for an explanation of how this works in live services. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> &lt;b&gt;OK&lt;/b&gt; </td><td>  -  </td></tr>
        <tr><td> 302 </td><td> &lt;b&gt;Found&lt;/b&gt;: URL redirection </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> &lt;b&gt;Bad request&lt;/b&gt;: Usually the result of malformed syntax:   - the given combination of layer, style, and query parameters is not supported   - zoom n is out of range 0 &lt;&#x3D; zoom &lt; 19: the requested zoom level is out of the possible range   - x n is out of range [0,m]: the requested x coordinate is out of the possible range (the value of m will vary depending on zoom level)   - y n is out of range [0,m]: the requested y coordinate is out of the possible range (the value of m will vary depending on zoom level)   - the requested view is not supported </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> &lt;b&gt;Forbidden&lt;/b&gt;:   - the supplied API key is not valid for this request   - the requested view is not available in the country where the request was sent from </td><td>  -  </td></tr>
        <tr><td> 410 </td><td> &lt;b&gt;Gone&lt;/b&gt;: Request for unsupported format </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> &lt;b&gt;Internal Server Error&lt;/b&gt;: There is a problem with the TomTom Maps API Raster Tile service </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call mapVersionNumberTileLayerStyleZoomXYFormatGetAsync(Integer versionNumber, String layer, String style, Integer zoom, Integer X, Integer Y, String format, Integer tileSize, String view, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = mapVersionNumberTileLayerStyleZoomXYFormatGetValidateBeforeCall(versionNumber, layer, style, zoom, X, Y, format, tileSize, view, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
}
