/**
 * Geneea Natural Language Processing
 * <div class=\"api-description\">     <h2>Authentication</h2>     <p>For all calls, supply your API key. <a href=\"https://www.geneea.com/pricing\">Sign up to <em>obtain the key</em></a>.</p>     <p>         Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted (HTTPS)</em> protocols.         However, for security reasons, we strongly encourage using only the encrypted version.     </p>     <p>The API key should be supplied as either a request parameter <code>user_key</code> or in <code>Authorization</code> header.</p>     <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>      <h2>API operations</h2>     <p>         All API operations can perform analysis on supplied raw text or on text extracted from a given URL.         Optionally, one can supply additional information which can make the result more precise. An example         of such information would be the language of text or a particular text extractor for URL resources.     </p>     <p>The supported types of analyses are:</p>     <ul>         <li><strong>lemmatization</strong> &longrightarrow;             Finds out lemmata (basic forms) of all the words in the document.         </li>         <li><strong>correction</strong> &longrightarrow;             Performs correction (diacritization) on all the words in the document.         </li>         <li><strong>topic detection</strong> &longrightarrow;             Determines a topic of the document, e.g. finance or sports.         </li>         <li><strong>sentiment analysis</strong> &longrightarrow;             Determines a sentiment of the document, i.e. how positive or negative the document is.         </li>         <li><strong>named entity recognition</strong> &longrightarrow;             Finds named entities (like person, location, date etc.) mentioned the the document.         </li>     </ul>      <h2>Encoding</h2>     <p>The supplied text is expected to be in UTF-8 encoding, this is especially important for non-english texts.</p>      <h2>Returned values</h2>     <p>The API calls always return objects in serialized JSON format in UTF-8 encoding.</p>     <p>         If any error occurs, the HTTP response code will be in the range <code>4xx</code> (client-side error) or         <code>5xx</code> (server-side error). In this situation, the body of the response will contain information         about the error in JSON format, with <code>exception</code> and <code>message</code> values.     </p>      <h2>URL limitations</h2>     <p>         All the requests are semantically <code>GET</code>. However, for longer texts, you may run into issues         with URL length limit. Therefore, it's possible to always issue a <code>POST</code> request with all         the parameters encoded as a JSON in the request body.     </p>     <p>Example:</p>     <pre><code>         POST /s1/sentiment         Content-Type: application/json          {\"text\":\"There is no harm in being sometimes wrong - especially if one is promptly found out.\"}     </code></pre>     <p>This is equivalent to <code>GET /s1/sentiment?text=There%20is%20no%20harm...</code></p>      <h2>Request limitations</h2>     <p>         The API has other limitations concerning the size of the HTTP requests. The maximum allowed size of any         POST request body is <em>512 KiB</em>. For request with a URL resource, the maximum allowed number of         extracted characters from each such resource is <em>100,000</em>.     </p>      <h2>Terms of Service</h2>     <p>         By using the API, you agree to our         <a href=\"https://www.geneea.com/terms.html\" target=\"_blank\">Terms of Service Agreement</a>.     </p>      <h2>More information</h2>     <p>         <a href=\"https://help.geneea.com/index.html\" target=\"_blank\">         The Interpretor Public Documentation         </a>     </p> </div> 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAILemmatizeResponse.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAILemmatizeResponse::OAILemmatizeResponse(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAILemmatizeResponse::OAILemmatizeResponse() {
    this->initializeModel();
}

OAILemmatizeResponse::~OAILemmatizeResponse() {}

void OAILemmatizeResponse::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_language_isSet = false;
    m_language_isValid = false;

    m_lemmatized_text_isSet = false;
    m_lemmatized_text_isValid = false;

    m_text_isSet = false;
    m_text_isValid = false;
}

void OAILemmatizeResponse::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAILemmatizeResponse::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_language_isValid = ::OpenAPI::fromJsonValue(m_language, json[QString("language")]);
    m_language_isSet = !json[QString("language")].isNull() && m_language_isValid;

    m_lemmatized_text_isValid = ::OpenAPI::fromJsonValue(m_lemmatized_text, json[QString("lemmatizedText")]);
    m_lemmatized_text_isSet = !json[QString("lemmatizedText")].isNull() && m_lemmatized_text_isValid;

    m_text_isValid = ::OpenAPI::fromJsonValue(m_text, json[QString("text")]);
    m_text_isSet = !json[QString("text")].isNull() && m_text_isValid;
}

QString OAILemmatizeResponse::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAILemmatizeResponse::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_language_isSet) {
        obj.insert(QString("language"), ::OpenAPI::toJsonValue(m_language));
    }
    if (m_lemmatized_text_isSet) {
        obj.insert(QString("lemmatizedText"), ::OpenAPI::toJsonValue(m_lemmatized_text));
    }
    if (m_text_isSet) {
        obj.insert(QString("text"), ::OpenAPI::toJsonValue(m_text));
    }
    return obj;
}

QString OAILemmatizeResponse::getId() const {
    return m_id;
}
void OAILemmatizeResponse::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAILemmatizeResponse::is_id_Set() const{
    return m_id_isSet;
}

bool OAILemmatizeResponse::is_id_Valid() const{
    return m_id_isValid;
}

QString OAILemmatizeResponse::getLanguage() const {
    return m_language;
}
void OAILemmatizeResponse::setLanguage(const QString &language) {
    m_language = language;
    m_language_isSet = true;
}

bool OAILemmatizeResponse::is_language_Set() const{
    return m_language_isSet;
}

bool OAILemmatizeResponse::is_language_Valid() const{
    return m_language_isValid;
}

QString OAILemmatizeResponse::getLemmatizedText() const {
    return m_lemmatized_text;
}
void OAILemmatizeResponse::setLemmatizedText(const QString &lemmatized_text) {
    m_lemmatized_text = lemmatized_text;
    m_lemmatized_text_isSet = true;
}

bool OAILemmatizeResponse::is_lemmatized_text_Set() const{
    return m_lemmatized_text_isSet;
}

bool OAILemmatizeResponse::is_lemmatized_text_Valid() const{
    return m_lemmatized_text_isValid;
}

QString OAILemmatizeResponse::getText() const {
    return m_text;
}
void OAILemmatizeResponse::setText(const QString &text) {
    m_text = text;
    m_text_isSet = true;
}

bool OAILemmatizeResponse::is_text_Set() const{
    return m_text_isSet;
}

bool OAILemmatizeResponse::is_text_Valid() const{
    return m_text_isValid;
}

bool OAILemmatizeResponse::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_language_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_lemmatized_text_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_text_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAILemmatizeResponse::isValid() const {
    // only required properties are required for the object to be considered valid
    return m_language_isValid && m_lemmatized_text_isValid && true;
}

} // namespace OpenAPI
