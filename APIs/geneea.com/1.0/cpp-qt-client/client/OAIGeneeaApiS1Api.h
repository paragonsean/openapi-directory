/**
 * Geneea Natural Language Processing
 * <div class=\"api-description\">     <h2>Authentication</h2>     <p>For all calls, supply your API key. <a href=\"https://www.geneea.com/pricing\">Sign up to <em>obtain the key</em></a>.</p>     <p>         Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted (HTTPS)</em> protocols.         However, for security reasons, we strongly encourage using only the encrypted version.     </p>     <p>The API key should be supplied as either a request parameter <code>user_key</code> or in <code>Authorization</code> header.</p>     <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>      <h2>API operations</h2>     <p>         All API operations can perform analysis on supplied raw text or on text extracted from a given URL.         Optionally, one can supply additional information which can make the result more precise. An example         of such information would be the language of text or a particular text extractor for URL resources.     </p>     <p>The supported types of analyses are:</p>     <ul>         <li><strong>lemmatization</strong> &longrightarrow;             Finds out lemmata (basic forms) of all the words in the document.         </li>         <li><strong>correction</strong> &longrightarrow;             Performs correction (diacritization) on all the words in the document.         </li>         <li><strong>topic detection</strong> &longrightarrow;             Determines a topic of the document, e.g. finance or sports.         </li>         <li><strong>sentiment analysis</strong> &longrightarrow;             Determines a sentiment of the document, i.e. how positive or negative the document is.         </li>         <li><strong>named entity recognition</strong> &longrightarrow;             Finds named entities (like person, location, date etc.) mentioned the the document.         </li>     </ul>      <h2>Encoding</h2>     <p>The supplied text is expected to be in UTF-8 encoding, this is especially important for non-english texts.</p>      <h2>Returned values</h2>     <p>The API calls always return objects in serialized JSON format in UTF-8 encoding.</p>     <p>         If any error occurs, the HTTP response code will be in the range <code>4xx</code> (client-side error) or         <code>5xx</code> (server-side error). In this situation, the body of the response will contain information         about the error in JSON format, with <code>exception</code> and <code>message</code> values.     </p>      <h2>URL limitations</h2>     <p>         All the requests are semantically <code>GET</code>. However, for longer texts, you may run into issues         with URL length limit. Therefore, it's possible to always issue a <code>POST</code> request with all         the parameters encoded as a JSON in the request body.     </p>     <p>Example:</p>     <pre><code>         POST /s1/sentiment         Content-Type: application/json          {\"text\":\"There is no harm in being sometimes wrong - especially if one is promptly found out.\"}     </code></pre>     <p>This is equivalent to <code>GET /s1/sentiment?text=There%20is%20no%20harm...</code></p>      <h2>Request limitations</h2>     <p>         The API has other limitations concerning the size of the HTTP requests. The maximum allowed size of any         POST request body is <em>512 KiB</em>. For request with a URL resource, the maximum allowed number of         extracted characters from each such resource is <em>100,000</em>.     </p>      <h2>Terms of Service</h2>     <p>         By using the API, you agree to our         <a href=\"https://www.geneea.com/terms.html\" target=\"_blank\">Terms of Service Agreement</a>.     </p>      <h2>More information</h2>     <p>         <a href=\"https://help.geneea.com/index.html\" target=\"_blank\">         The Interpretor Public Documentation         </a>     </p> </div> 
 *
 * The version of the OpenAPI document: 1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIGeneeaApiS1Api_H
#define OAI_OAIGeneeaApiS1Api_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include "OAIEntitiesResponse.h"
#include "OAILemmatizeResponse.h"
#include "OAIObject.h"
#include "OAIRequest.h"
#include "OAISentimentResponse.h"
#include "OAITopicResponse.h"
#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIGeneeaApiS1Api : public QObject {
    Q_OBJECT

public:
    OAIGeneeaApiS1Api(const int timeOut = 0);
    ~OAIGeneeaApiS1Api();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  extractor QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  return_text_info bool [optional]
    */
    virtual void correctionGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extractor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_text_info = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIRequest [optional]
    */
    virtual void correctionPost(const ::OpenAPI::OptionalParam<OAIRequest> &body = ::OpenAPI::OptionalParam<OAIRequest>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  extractor QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  return_text_info bool [optional]
    */
    virtual void entitiesGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extractor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_text_info = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIRequest [optional]
    */
    virtual void entitiesPost(const ::OpenAPI::OptionalParam<OAIRequest> &body = ::OpenAPI::OptionalParam<OAIRequest>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  extractor QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  return_text_info bool [optional]
    */
    virtual void lemmatizeGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extractor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_text_info = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIRequest [optional]
    */
    virtual void lemmatizePost(const ::OpenAPI::OptionalParam<OAIRequest> &body = ::OpenAPI::OptionalParam<OAIRequest>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  extractor QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  return_text_info bool [optional]
    */
    virtual void sentimentGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extractor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_text_info = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIRequest [optional]
    */
    virtual void sentimentPost(const ::OpenAPI::OptionalParam<OAIRequest> &body = ::OpenAPI::OptionalParam<OAIRequest>());

    /**
    * @param[in]  id QString [optional]
    * @param[in]  text QString [optional]
    * @param[in]  url QString [optional]
    * @param[in]  extractor QString [optional]
    * @param[in]  language QString [optional]
    * @param[in]  return_text_info bool [optional]
    */
    virtual void topicGet(const ::OpenAPI::OptionalParam<QString> &id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &text = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &url = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &extractor = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &language = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<bool> &return_text_info = ::OpenAPI::OptionalParam<bool>());

    /**
    * @param[in]  body OAIRequest [optional]
    */
    virtual void topicPost(const ::OpenAPI::OptionalParam<OAIRequest> &body = ::OpenAPI::OptionalParam<OAIRequest>());


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void correctionGetCallback(OAIHttpRequestWorker *worker);
    void correctionPostCallback(OAIHttpRequestWorker *worker);
    void entitiesGetCallback(OAIHttpRequestWorker *worker);
    void entitiesPostCallback(OAIHttpRequestWorker *worker);
    void lemmatizeGetCallback(OAIHttpRequestWorker *worker);
    void lemmatizePostCallback(OAIHttpRequestWorker *worker);
    void sentimentGetCallback(OAIHttpRequestWorker *worker);
    void sentimentPostCallback(OAIHttpRequestWorker *worker);
    void topicGetCallback(OAIHttpRequestWorker *worker);
    void topicPostCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void correctionGetSignal(OAIObject summary);
    void correctionPostSignal(OAIObject summary);
    void entitiesGetSignal(OAIEntitiesResponse summary);
    void entitiesPostSignal(OAIEntitiesResponse summary);
    void lemmatizeGetSignal(OAILemmatizeResponse summary);
    void lemmatizePostSignal(OAILemmatizeResponse summary);
    void sentimentGetSignal(OAISentimentResponse summary);
    void sentimentPostSignal(OAISentimentResponse summary);
    void topicGetSignal(OAITopicResponse summary);
    void topicPostSignal(OAITopicResponse summary);


    void correctionGetSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void correctionPostSignalFull(OAIHttpRequestWorker *worker, OAIObject summary);
    void entitiesGetSignalFull(OAIHttpRequestWorker *worker, OAIEntitiesResponse summary);
    void entitiesPostSignalFull(OAIHttpRequestWorker *worker, OAIEntitiesResponse summary);
    void lemmatizeGetSignalFull(OAIHttpRequestWorker *worker, OAILemmatizeResponse summary);
    void lemmatizePostSignalFull(OAIHttpRequestWorker *worker, OAILemmatizeResponse summary);
    void sentimentGetSignalFull(OAIHttpRequestWorker *worker, OAISentimentResponse summary);
    void sentimentPostSignalFull(OAIHttpRequestWorker *worker, OAISentimentResponse summary);
    void topicGetSignalFull(OAIHttpRequestWorker *worker, OAITopicResponse summary);
    void topicPostSignalFull(OAIHttpRequestWorker *worker, OAITopicResponse summary);

    Q_DECL_DEPRECATED_X("Use correctionGetSignalError() instead")
    void correctionGetSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void correctionGetSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use correctionPostSignalError() instead")
    void correctionPostSignalE(OAIObject summary, QNetworkReply::NetworkError error_type, QString error_str);
    void correctionPostSignalError(OAIObject summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesGetSignalError() instead")
    void entitiesGetSignalE(OAIEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesGetSignalError(OAIEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesPostSignalError() instead")
    void entitiesPostSignalE(OAIEntitiesResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesPostSignalError(OAIEntitiesResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lemmatizeGetSignalError() instead")
    void lemmatizeGetSignalE(OAILemmatizeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lemmatizeGetSignalError(OAILemmatizeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lemmatizePostSignalError() instead")
    void lemmatizePostSignalE(OAILemmatizeResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void lemmatizePostSignalError(OAILemmatizeResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentGetSignalError() instead")
    void sentimentGetSignalE(OAISentimentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentGetSignalError(OAISentimentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentPostSignalError() instead")
    void sentimentPostSignalE(OAISentimentResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentPostSignalError(OAISentimentResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicGetSignalError() instead")
    void topicGetSignalE(OAITopicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicGetSignalError(OAITopicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicPostSignalError() instead")
    void topicPostSignalE(OAITopicResponse summary, QNetworkReply::NetworkError error_type, QString error_str);
    void topicPostSignalError(OAITopicResponse summary, QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use correctionGetSignalErrorFull() instead")
    void correctionGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void correctionGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use correctionPostSignalErrorFull() instead")
    void correctionPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void correctionPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesGetSignalErrorFull() instead")
    void entitiesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use entitiesPostSignalErrorFull() instead")
    void entitiesPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void entitiesPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lemmatizeGetSignalErrorFull() instead")
    void lemmatizeGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lemmatizeGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use lemmatizePostSignalErrorFull() instead")
    void lemmatizePostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void lemmatizePostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentGetSignalErrorFull() instead")
    void sentimentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use sentimentPostSignalErrorFull() instead")
    void sentimentPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void sentimentPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicGetSignalErrorFull() instead")
    void topicGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use topicPostSignalErrorFull() instead")
    void topicPostSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void topicPostSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
