/**
 * Geneea Natural Language Processing
 * <div class=\"api-description\">     <h2>Authentication</h2>     <p>For all calls, supply your API key. <a href=\"https://www.geneea.com/pricing\">Sign up to <em>obtain the key</em></a>.</p>     <p>         Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted (HTTPS)</em> protocols.         However, for security reasons, we strongly encourage using only the encrypted version.     </p>     <p>The API key should be supplied as either a request parameter <code>user_key</code> or in <code>Authorization</code> header.</p>     <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>      <h2>API operations</h2>     <p>         All API operations can perform analysis on supplied raw text or on text extracted from a given URL.         Optionally, one can supply additional information which can make the result more precise. An example         of such information would be the language of text or a particular text extractor for URL resources.     </p>     <p>The supported types of analyses are:</p>     <ul>         <li><strong>lemmatization</strong> &longrightarrow;             Finds out lemmata (basic forms) of all the words in the document.         </li>         <li><strong>correction</strong> &longrightarrow;             Performs correction (diacritization) on all the words in the document.         </li>         <li><strong>topic detection</strong> &longrightarrow;             Determines a topic of the document, e.g. finance or sports.         </li>         <li><strong>sentiment analysis</strong> &longrightarrow;             Determines a sentiment of the document, i.e. how positive or negative the document is.         </li>         <li><strong>named entity recognition</strong> &longrightarrow;             Finds named entities (like person, location, date etc.) mentioned the the document.         </li>     </ul>      <h2>Encoding</h2>     <p>The supplied text is expected to be in UTF-8 encoding, this is especially important for non-english texts.</p>      <h2>Returned values</h2>     <p>The API calls always return objects in serialized JSON format in UTF-8 encoding.</p>     <p>         If any error occurs, the HTTP response code will be in the range <code>4xx</code> (client-side error) or         <code>5xx</code> (server-side error). In this situation, the body of the response will contain information         about the error in JSON format, with <code>exception</code> and <code>message</code> values.     </p>      <h2>URL limitations</h2>     <p>         All the requests are semantically <code>GET</code>. However, for longer texts, you may run into issues         with URL length limit. Therefore, it's possible to always issue a <code>POST</code> request with all         the parameters encoded as a JSON in the request body.     </p>     <p>Example:</p>     <pre><code>         POST /s1/sentiment         Content-Type: application/json          {\"text\":\"There is no harm in being sometimes wrong - especially if one is promptly found out.\"}     </code></pre>     <p>This is equivalent to <code>GET /s1/sentiment?text=There%20is%20no%20harm...</code></p>      <h2>Request limitations</h2>     <p>         The API has other limitations concerning the size of the HTTP requests. The maximum allowed size of any         POST request body is <em>512 KiB</em>. For request with a URL resource, the maximum allowed number of         extracted characters from each such resource is <em>100,000</em>.     </p>      <h2>Terms of Service</h2>     <p>         By using the API, you agree to our         <a href=\"https://www.geneea.com/terms.html\" target=\"_blank\">Terms of Service Agreement</a>.     </p>      <h2>More information</h2>     <p>         <a href=\"https://help.geneea.com/index.html\" target=\"_blank\">         The Interpretor Public Documentation         </a>     </p> </div> 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import EntitiesResponse from '../model/EntitiesResponse';
import LemmatizeResponse from '../model/LemmatizeResponse';
import Request from '../model/Request';
import SentimentResponse from '../model/SentimentResponse';
import TopicResponse from '../model/TopicResponse';

/**
* GeneeaApiS1 service.
* @module api/GeneeaApiS1Api
* @version 1.0
*/
export default class GeneeaApiS1Api {

    /**
    * Constructs a new GeneeaApiS1Api. 
    * @alias module:api/GeneeaApiS1Api
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the correctionGet operation.
     * @callback module:api/GeneeaApiS1Api~correctionGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs text correction (diacritization) on the given document
     * <br/><strong>Possible options:</strong><p class=\"markdown\">An optional parameter <code>diacritize</code> with values <code>yes</code>, <code>no</code> or <code>auto</code> indicate whether the text diacritization will be performed. The default value is <code>auto</code>.</p>
     * @param {Object} opts Optional parameters
     * @param {String} [id] document ID
     * @param {String} [text] raw document text
     * @param {String} [url] document URL
     * @param {module:model/String} [extractor] document extractor
     * @param {String} [language] document language
     * @param {Boolean} [returnTextInfo] 
     * @param {module:api/GeneeaApiS1Api~correctionGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    correctionGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'text': opts['text'],
        'url': opts['url'],
        'extractor': opts['extractor'],
        'language': opts['language'],
        'returnTextInfo': opts['returnTextInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/s1/correction', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the correctionPost operation.
     * @callback module:api/GeneeaApiS1Api~correctionPostCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs text correction (diacritization) on the given document
     * <strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre><br/><strong>Possible options:</strong><p class=\"markdown\">An optional parameter <code>diacritize</code> with values <code>yes</code>, <code>no</code> or <code>auto</code> indicate whether the text diacritization will be performed. The default value is <code>auto</code>.</p>
     * @param {Object} opts Optional parameters
     * @param {module:model/Request} [body] request
     * @param {module:api/GeneeaApiS1Api~correctionPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    correctionPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/s1/correction', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitiesGet operation.
     * @callback module:api/GeneeaApiS1Api~entitiesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs named-entity recognition on the given document
     * entitiesGet
     * @param {Object} opts Optional parameters
     * @param {String} [id] document ID
     * @param {String} [text] raw document text
     * @param {String} [url] document URL
     * @param {module:model/String} [extractor] document extractor
     * @param {String} [language] document language
     * @param {Boolean} [returnTextInfo] 
     * @param {module:api/GeneeaApiS1Api~entitiesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitiesResponse}
     */
    entitiesGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'text': opts['text'],
        'url': opts['url'],
        'extractor': opts['extractor'],
        'language': opts['language'],
        'returnTextInfo': opts['returnTextInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = EntitiesResponse;
      return this.apiClient.callApi(
        '/s1/entities', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the entitiesPost operation.
     * @callback module:api/GeneeaApiS1Api~entitiesPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntitiesResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs named-entity recognition on the given document
     * <strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>
     * @param {Object} opts Optional parameters
     * @param {module:model/Request} [body] request
     * @param {module:api/GeneeaApiS1Api~entitiesPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntitiesResponse}
     */
    entitiesPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = EntitiesResponse;
      return this.apiClient.callApi(
        '/s1/entities', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lemmatizeGet operation.
     * @callback module:api/GeneeaApiS1Api~lemmatizeGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LemmatizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs lemmatization on the given document
     * lemmatizeGet
     * @param {Object} opts Optional parameters
     * @param {String} [id] document ID
     * @param {String} [text] raw document text
     * @param {String} [url] document URL
     * @param {module:model/String} [extractor] document extractor
     * @param {String} [language] document language
     * @param {Boolean} [returnTextInfo] 
     * @param {module:api/GeneeaApiS1Api~lemmatizeGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LemmatizeResponse}
     */
    lemmatizeGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'text': opts['text'],
        'url': opts['url'],
        'extractor': opts['extractor'],
        'language': opts['language'],
        'returnTextInfo': opts['returnTextInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = LemmatizeResponse;
      return this.apiClient.callApi(
        '/s1/lemmatize', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the lemmatizePost operation.
     * @callback module:api/GeneeaApiS1Api~lemmatizePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/LemmatizeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs lemmatization on the given document
     * <strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>
     * @param {Object} opts Optional parameters
     * @param {module:model/Request} [body] request
     * @param {module:api/GeneeaApiS1Api~lemmatizePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/LemmatizeResponse}
     */
    lemmatizePost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = LemmatizeResponse;
      return this.apiClient.callApi(
        '/s1/lemmatize', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentimentGet operation.
     * @callback module:api/GeneeaApiS1Api~sentimentGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SentimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs sentiment analysis on the given document
     * sentimentGet
     * @param {Object} opts Optional parameters
     * @param {String} [id] document ID
     * @param {String} [text] raw document text
     * @param {String} [url] document URL
     * @param {module:model/String} [extractor] document extractor
     * @param {String} [language] document language
     * @param {Boolean} [returnTextInfo] 
     * @param {module:api/GeneeaApiS1Api~sentimentGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SentimentResponse}
     */
    sentimentGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'text': opts['text'],
        'url': opts['url'],
        'extractor': opts['extractor'],
        'language': opts['language'],
        'returnTextInfo': opts['returnTextInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = SentimentResponse;
      return this.apiClient.callApi(
        '/s1/sentiment', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the sentimentPost operation.
     * @callback module:api/GeneeaApiS1Api~sentimentPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/SentimentResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs sentiment analysis on the given document
     * <strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>
     * @param {Object} opts Optional parameters
     * @param {module:model/Request} [body] request
     * @param {module:api/GeneeaApiS1Api~sentimentPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/SentimentResponse}
     */
    sentimentPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = SentimentResponse;
      return this.apiClient.callApi(
        '/s1/sentiment', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicGet operation.
     * @callback module:api/GeneeaApiS1Api~topicGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs topic detection on the given document
     * topicGet
     * @param {Object} opts Optional parameters
     * @param {String} [id] document ID
     * @param {String} [text] raw document text
     * @param {String} [url] document URL
     * @param {module:model/String} [extractor] document extractor
     * @param {String} [language] document language
     * @param {Boolean} [returnTextInfo] 
     * @param {module:api/GeneeaApiS1Api~topicGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicResponse}
     */
    topicGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'id': opts['id'],
        'text': opts['text'],
        'url': opts['url'],
        'extractor': opts['extractor'],
        'language': opts['language'],
        'returnTextInfo': opts['returnTextInfo']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = TopicResponse;
      return this.apiClient.callApi(
        '/s1/topic', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the topicPost operation.
     * @callback module:api/GeneeaApiS1Api~topicPostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TopicResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Performs topic detection on the given document
     * <strong>Notes:</strong><br/>Valid JSON cannot contain newline characters. These have to be escaped. (See also <a href=\"https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\" target=\"_blank\">Interpretor documentation</a>)<br/>Fields <code>text</code> and <code>url</code> are mutually exclusive.<br/><strong>Examples:</strong><pre><code>{\"text\": \"Hello world!\"}</code></pre><pre><code>{\"url\": \"https://en.wikipedia.org/wiki/Pyrrhuloxia\"}</code></pre>
     * @param {Object} opts Optional parameters
     * @param {module:model/Request} [body] request
     * @param {module:api/GeneeaApiS1Api~topicPostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TopicResponse}
     */
    topicPost(opts, callback) {
      opts = opts || {};
      let postBody = opts['body'];

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['user_key'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = TopicResponse;
      return this.apiClient.callApi(
        '/s1/topic', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
