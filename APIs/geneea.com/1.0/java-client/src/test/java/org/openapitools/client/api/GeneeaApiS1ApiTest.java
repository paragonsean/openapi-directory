/*
 * Geneea Natural Language Processing
 * <div class=\"api-description\">     <h2>Authentication</h2>     <p>For all calls, supply your API key. <a href=\"https://www.geneea.com/pricing\">Sign up to <em>obtain the key</em></a>.</p>     <p>         Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted (HTTPS)</em> protocols.         However, for security reasons, we strongly encourage using only the encrypted version.     </p>     <p>The API key should be supplied as either a request parameter <code>user_key</code> or in <code>Authorization</code> header.</p>     <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>      <h2>API operations</h2>     <p>         All API operations can perform analysis on supplied raw text or on text extracted from a given URL.         Optionally, one can supply additional information which can make the result more precise. An example         of such information would be the language of text or a particular text extractor for URL resources.     </p>     <p>The supported types of analyses are:</p>     <ul>         <li><strong>lemmatization</strong> &longrightarrow;             Finds out lemmata (basic forms) of all the words in the document.         </li>         <li><strong>correction</strong> &longrightarrow;             Performs correction (diacritization) on all the words in the document.         </li>         <li><strong>topic detection</strong> &longrightarrow;             Determines a topic of the document, e.g. finance or sports.         </li>         <li><strong>sentiment analysis</strong> &longrightarrow;             Determines a sentiment of the document, i.e. how positive or negative the document is.         </li>         <li><strong>named entity recognition</strong> &longrightarrow;             Finds named entities (like person, location, date etc.) mentioned the the document.         </li>     </ul>      <h2>Encoding</h2>     <p>The supplied text is expected to be in UTF-8 encoding, this is especially important for non-english texts.</p>      <h2>Returned values</h2>     <p>The API calls always return objects in serialized JSON format in UTF-8 encoding.</p>     <p>         If any error occurs, the HTTP response code will be in the range <code>4xx</code> (client-side error) or         <code>5xx</code> (server-side error). In this situation, the body of the response will contain information         about the error in JSON format, with <code>exception</code> and <code>message</code> values.     </p>      <h2>URL limitations</h2>     <p>         All the requests are semantically <code>GET</code>. However, for longer texts, you may run into issues         with URL length limit. Therefore, it's possible to always issue a <code>POST</code> request with all         the parameters encoded as a JSON in the request body.     </p>     <p>Example:</p>     <pre><code>         POST /s1/sentiment         Content-Type: application/json          {\"text\":\"There is no harm in being sometimes wrong - especially if one is promptly found out.\"}     </code></pre>     <p>This is equivalent to <code>GET /s1/sentiment?text=There%20is%20no%20harm...</code></p>      <h2>Request limitations</h2>     <p>         The API has other limitations concerning the size of the HTTP requests. The maximum allowed size of any         POST request body is <em>512 KiB</em>. For request with a URL resource, the maximum allowed number of         extracted characters from each such resource is <em>100,000</em>.     </p>      <h2>Terms of Service</h2>     <p>         By using the API, you agree to our         <a href=\"https://www.geneea.com/terms.html\" target=\"_blank\">Terms of Service Agreement</a>.     </p>      <h2>More information</h2>     <p>         <a href=\"https://help.geneea.com/index.html\" target=\"_blank\">         The Interpretor Public Documentation         </a>     </p> </div> 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiException;
import org.openapitools.client.model.EntitiesResponse;
import org.openapitools.client.model.LemmatizeResponse;
import org.openapitools.client.model.Request;
import org.openapitools.client.model.SentimentResponse;
import org.openapitools.client.model.TopicResponse;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for GeneeaApiS1Api
 */
@Disabled
public class GeneeaApiS1ApiTest {

    private final GeneeaApiS1Api api = new GeneeaApiS1Api();

    /**
     * Performs text correction (diacritization) on the given document
     *
     * &lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void correctionGetTest() throws ApiException {
        String id = null;
        String text = null;
        String url = null;
        String extractor = null;
        String language = null;
        Boolean returnTextInfo = null;
        Object response = api.correctionGet(id, text, url, extractor, language, returnTextInfo);
        // TODO: test validations
    }

    /**
     * Performs text correction (diacritization) on the given document
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void correctionPostTest() throws ApiException {
        Request body = null;
        Object response = api.correctionPost(body);
        // TODO: test validations
    }

    /**
     * Performs named-entity recognition on the given document
     *
     * entitiesGet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesGetTest() throws ApiException {
        String id = null;
        String text = null;
        String url = null;
        String extractor = null;
        String language = null;
        Boolean returnTextInfo = null;
        EntitiesResponse response = api.entitiesGet(id, text, url, extractor, language, returnTextInfo);
        // TODO: test validations
    }

    /**
     * Performs named-entity recognition on the given document
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void entitiesPostTest() throws ApiException {
        Request body = null;
        EntitiesResponse response = api.entitiesPost(body);
        // TODO: test validations
    }

    /**
     * Performs lemmatization on the given document
     *
     * lemmatizeGet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lemmatizeGetTest() throws ApiException {
        String id = null;
        String text = null;
        String url = null;
        String extractor = null;
        String language = null;
        Boolean returnTextInfo = null;
        LemmatizeResponse response = api.lemmatizeGet(id, text, url, extractor, language, returnTextInfo);
        // TODO: test validations
    }

    /**
     * Performs lemmatization on the given document
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void lemmatizePostTest() throws ApiException {
        Request body = null;
        LemmatizeResponse response = api.lemmatizePost(body);
        // TODO: test validations
    }

    /**
     * Performs sentiment analysis on the given document
     *
     * sentimentGet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sentimentGetTest() throws ApiException {
        String id = null;
        String text = null;
        String url = null;
        String extractor = null;
        String language = null;
        Boolean returnTextInfo = null;
        SentimentResponse response = api.sentimentGet(id, text, url, extractor, language, returnTextInfo);
        // TODO: test validations
    }

    /**
     * Performs sentiment analysis on the given document
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void sentimentPostTest() throws ApiException {
        Request body = null;
        SentimentResponse response = api.sentimentPost(body);
        // TODO: test validations
    }

    /**
     * Performs topic detection on the given document
     *
     * topicGet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicGetTest() throws ApiException {
        String id = null;
        String text = null;
        String url = null;
        String extractor = null;
        String language = null;
        Boolean returnTextInfo = null;
        TopicResponse response = api.topicGet(id, text, url, extractor, language, returnTextInfo);
        // TODO: test validations
    }

    /**
     * Performs topic detection on the given document
     *
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void topicPostTest() throws ApiException {
        Request body = null;
        TopicResponse response = api.topicPost(body);
        // TODO: test validations
    }

}
