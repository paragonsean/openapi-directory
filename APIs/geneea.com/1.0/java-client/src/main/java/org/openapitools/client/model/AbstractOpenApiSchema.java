/*
 * Geneea Natural Language Processing
 * <div class=\"api-description\">     <h2>Authentication</h2>     <p>For all calls, supply your API key. <a href=\"https://www.geneea.com/pricing\">Sign up to <em>obtain the key</em></a>.</p>     <p>         Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted (HTTPS)</em> protocols.         However, for security reasons, we strongly encourage using only the encrypted version.     </p>     <p>The API key should be supplied as either a request parameter <code>user_key</code> or in <code>Authorization</code> header.</p>     <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>      <h2>API operations</h2>     <p>         All API operations can perform analysis on supplied raw text or on text extracted from a given URL.         Optionally, one can supply additional information which can make the result more precise. An example         of such information would be the language of text or a particular text extractor for URL resources.     </p>     <p>The supported types of analyses are:</p>     <ul>         <li><strong>lemmatization</strong> &longrightarrow;             Finds out lemmata (basic forms) of all the words in the document.         </li>         <li><strong>correction</strong> &longrightarrow;             Performs correction (diacritization) on all the words in the document.         </li>         <li><strong>topic detection</strong> &longrightarrow;             Determines a topic of the document, e.g. finance or sports.         </li>         <li><strong>sentiment analysis</strong> &longrightarrow;             Determines a sentiment of the document, i.e. how positive or negative the document is.         </li>         <li><strong>named entity recognition</strong> &longrightarrow;             Finds named entities (like person, location, date etc.) mentioned the the document.         </li>     </ul>      <h2>Encoding</h2>     <p>The supplied text is expected to be in UTF-8 encoding, this is especially important for non-english texts.</p>      <h2>Returned values</h2>     <p>The API calls always return objects in serialized JSON format in UTF-8 encoding.</p>     <p>         If any error occurs, the HTTP response code will be in the range <code>4xx</code> (client-side error) or         <code>5xx</code> (server-side error). In this situation, the body of the response will contain information         about the error in JSON format, with <code>exception</code> and <code>message</code> values.     </p>      <h2>URL limitations</h2>     <p>         All the requests are semantically <code>GET</code>. However, for longer texts, you may run into issues         with URL length limit. Therefore, it's possible to always issue a <code>POST</code> request with all         the parameters encoded as a JSON in the request body.     </p>     <p>Example:</p>     <pre><code>         POST /s1/sentiment         Content-Type: application/json          {\"text\":\"There is no harm in being sometimes wrong - especially if one is promptly found out.\"}     </code></pre>     <p>This is equivalent to <code>GET /s1/sentiment?text=There%20is%20no%20harm...</code></p>      <h2>Request limitations</h2>     <p>         The API has other limitations concerning the size of the HTTP requests. The maximum allowed size of any         POST request body is <em>512 KiB</em>. For request with a URL resource, the maximum allowed number of         extracted characters from each such resource is <em>100,000</em>.     </p>      <h2>Terms of Service</h2>     <p>         By using the API, you agree to our         <a href=\"https://www.geneea.com/terms.html\" target=\"_blank\">Terms of Service Agreement</a>.     </p>      <h2>More information</h2>     <p>         <a href=\"https://help.geneea.com/index.html\" target=\"_blank\">         The Interpretor Public Documentation         </a>     </p> </div> 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import org.openapitools.client.ApiException;
import java.util.Objects;
import java.lang.reflect.Type;
import java.util.Map;

/**
 * Abstract class for oneOf,anyOf schemas defined in OpenAPI spec
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T11:58:23.309073-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public abstract class AbstractOpenApiSchema {

    // store the actual instance of the schema/object
    private Object instance;

    // is nullable
    private Boolean isNullable;

    // schema type (e.g. oneOf, anyOf)
    private final String schemaType;

    public AbstractOpenApiSchema(String schemaType, Boolean isNullable) {
        this.schemaType = schemaType;
        this.isNullable = isNullable;
    }

    /**
     * Get the list of oneOf/anyOf composed schemas allowed to be stored in this object
     *
     * @return an instance of the actual schema/object
     */
    public abstract Map<String, Class<?>> getSchemas();

    /**
     * Get the actual instance
     *
     * @return an instance of the actual schema/object
     */
    //@JsonValue
    public Object getActualInstance() {return instance;}

    /**
     * Set the actual instance
     *
     * @param instance the actual instance of the schema/object
     */
    public void setActualInstance(Object instance) {this.instance = instance;}

    /**
     * Get the instant recursively when the schemas defined in oneOf/anyof happen to be oneOf/anyOf schema as well
     *
     * @return an instance of the actual schema/object
     */
    public Object getActualInstanceRecursively() {
        return getActualInstanceRecursively(this);
    }

    private Object getActualInstanceRecursively(AbstractOpenApiSchema object) {
        if (object.getActualInstance() == null) {
            return null;
        } else if (object.getActualInstance() instanceof AbstractOpenApiSchema) {
            return getActualInstanceRecursively((AbstractOpenApiSchema)object.getActualInstance());
        } else {
            return object.getActualInstance();
        }
    }

    /**
     * Get the schema type (e.g. anyOf, oneOf)
     *
     * @return the schema type
     */
    public String getSchemaType() {
        return schemaType;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("class ").append(getClass()).append(" {\n");
        sb.append("    instance: ").append(toIndentedString(instance)).append("\n");
        sb.append("    isNullable: ").append(toIndentedString(isNullable)).append("\n");
        sb.append("    schemaType: ").append(toIndentedString(schemaType)).append("\n");
        sb.append("}");
        return sb.toString();
    }

    /**
     * Convert the given object to string with each line indented by 4 spaces
     * (except the first line).
     */
    private String toIndentedString(Object o) {
        if (o == null) {
            return "null";
        }
        return o.toString().replace("\n", "\n    ");
    }

    public boolean equals(Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AbstractOpenApiSchema a = (AbstractOpenApiSchema) o;
        return Objects.equals(this.instance, a.instance) &&
            Objects.equals(this.isNullable, a.isNullable) &&
            Objects.equals(this.schemaType, a.schemaType);
    }

    @Override
    public int hashCode() {
        return Objects.hash(instance, isNullable, schemaType);
    }

    /**
     * Is nullable
     *
     * @return true if it's nullable
     */
    public Boolean isNullable() {
        if (Boolean.TRUE.equals(isNullable)) {
            return Boolean.TRUE;
        } else {
            return Boolean.FALSE;
        }
    }



}
