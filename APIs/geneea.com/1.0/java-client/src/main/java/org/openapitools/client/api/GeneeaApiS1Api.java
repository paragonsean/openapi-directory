/*
 * Geneea Natural Language Processing
 * <div class=\"api-description\">     <h2>Authentication</h2>     <p>For all calls, supply your API key. <a href=\"https://www.geneea.com/pricing\">Sign up to <em>obtain the key</em></a>.</p>     <p>         Our API supports both <em>unencrypted (HTTP)</em> and <em>encrypted (HTTPS)</em> protocols.         However, for security reasons, we strongly encourage using only the encrypted version.     </p>     <p>The API key should be supplied as either a request parameter <code>user_key</code> or in <code>Authorization</code> header.</p>     <pre><code>Authorization: user_key &lt;YOUR_API_KEY&gt;</code></pre>      <h2>API operations</h2>     <p>         All API operations can perform analysis on supplied raw text or on text extracted from a given URL.         Optionally, one can supply additional information which can make the result more precise. An example         of such information would be the language of text or a particular text extractor for URL resources.     </p>     <p>The supported types of analyses are:</p>     <ul>         <li><strong>lemmatization</strong> &longrightarrow;             Finds out lemmata (basic forms) of all the words in the document.         </li>         <li><strong>correction</strong> &longrightarrow;             Performs correction (diacritization) on all the words in the document.         </li>         <li><strong>topic detection</strong> &longrightarrow;             Determines a topic of the document, e.g. finance or sports.         </li>         <li><strong>sentiment analysis</strong> &longrightarrow;             Determines a sentiment of the document, i.e. how positive or negative the document is.         </li>         <li><strong>named entity recognition</strong> &longrightarrow;             Finds named entities (like person, location, date etc.) mentioned the the document.         </li>     </ul>      <h2>Encoding</h2>     <p>The supplied text is expected to be in UTF-8 encoding, this is especially important for non-english texts.</p>      <h2>Returned values</h2>     <p>The API calls always return objects in serialized JSON format in UTF-8 encoding.</p>     <p>         If any error occurs, the HTTP response code will be in the range <code>4xx</code> (client-side error) or         <code>5xx</code> (server-side error). In this situation, the body of the response will contain information         about the error in JSON format, with <code>exception</code> and <code>message</code> values.     </p>      <h2>URL limitations</h2>     <p>         All the requests are semantically <code>GET</code>. However, for longer texts, you may run into issues         with URL length limit. Therefore, it's possible to always issue a <code>POST</code> request with all         the parameters encoded as a JSON in the request body.     </p>     <p>Example:</p>     <pre><code>         POST /s1/sentiment         Content-Type: application/json          {\"text\":\"There is no harm in being sometimes wrong - especially if one is promptly found out.\"}     </code></pre>     <p>This is equivalent to <code>GET /s1/sentiment?text=There%20is%20no%20harm...</code></p>      <h2>Request limitations</h2>     <p>         The API has other limitations concerning the size of the HTTP requests. The maximum allowed size of any         POST request body is <em>512 KiB</em>. For request with a URL resource, the maximum allowed number of         extracted characters from each such resource is <em>100,000</em>.     </p>      <h2>Terms of Service</h2>     <p>         By using the API, you agree to our         <a href=\"https://www.geneea.com/terms.html\" target=\"_blank\">Terms of Service Agreement</a>.     </p>      <h2>More information</h2>     <p>         <a href=\"https://help.geneea.com/index.html\" target=\"_blank\">         The Interpretor Public Documentation         </a>     </p> </div> 
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.EntitiesResponse;
import org.openapitools.client.model.LemmatizeResponse;
import org.openapitools.client.model.Request;
import org.openapitools.client.model.SentimentResponse;
import org.openapitools.client.model.TopicResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class GeneeaApiS1Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeneeaApiS1Api() {
        this(Configuration.getDefaultApiClient());
    }

    public GeneeaApiS1Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for correctionGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call correctionGetCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s1/correction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (extractor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extractor", extractor));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (returnTextInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnTextInfo", returnTextInfo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call correctionGetValidateBeforeCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        return correctionGetCall(id, text, url, extractor, language, returnTextInfo, _callback);

    }

    /**
     * Performs text correction (diacritization) on the given document
     * &lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object correctionGet(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        ApiResponse<Object> localVarResp = correctionGetWithHttpInfo(id, text, url, extractor, language, returnTextInfo);
        return localVarResp.getData();
    }

    /**
     * Performs text correction (diacritization) on the given document
     * &lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> correctionGetWithHttpInfo(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        okhttp3.Call localVarCall = correctionGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs text correction (diacritization) on the given document (asynchronously)
     * &lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call correctionGetAsync(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = correctionGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for correctionPost
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call correctionPostCall(Request body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/s1/correction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call correctionPostValidateBeforeCall(Request body, final ApiCallback _callback) throws ApiException {
        return correctionPostCall(body, _callback);

    }

    /**
     * Performs text correction (diacritization) on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     * @param body request (optional)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public Object correctionPost(Request body) throws ApiException {
        ApiResponse<Object> localVarResp = correctionPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Performs text correction (diacritization) on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     * @param body request (optional)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> correctionPostWithHttpInfo(Request body) throws ApiException {
        okhttp3.Call localVarCall = correctionPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs text correction (diacritization) on the given document (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;br/&gt;&lt;strong&gt;Possible options:&lt;/strong&gt;&lt;p class&#x3D;\&quot;markdown\&quot;&gt;An optional parameter &lt;code&gt;diacritize&lt;/code&gt; with values &lt;code&gt;yes&lt;/code&gt;, &lt;code&gt;no&lt;/code&gt; or &lt;code&gt;auto&lt;/code&gt; indicate whether the text diacritization will be performed. The default value is &lt;code&gt;auto&lt;/code&gt;.&lt;/p&gt;
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call correctionPostAsync(Request body, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = correctionPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesGetCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s1/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (extractor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extractor", extractor));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (returnTextInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnTextInfo", returnTextInfo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesGetValidateBeforeCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        return entitiesGetCall(id, text, url, extractor, language, returnTextInfo, _callback);

    }

    /**
     * Performs named-entity recognition on the given document
     * entitiesGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return EntitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntitiesResponse entitiesGet(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        ApiResponse<EntitiesResponse> localVarResp = entitiesGetWithHttpInfo(id, text, url, extractor, language, returnTextInfo);
        return localVarResp.getData();
    }

    /**
     * Performs named-entity recognition on the given document
     * entitiesGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return ApiResponse&lt;EntitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntitiesResponse> entitiesGetWithHttpInfo(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        okhttp3.Call localVarCall = entitiesGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, null);
        Type localVarReturnType = new TypeToken<EntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs named-entity recognition on the given document (asynchronously)
     * entitiesGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesGetAsync(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback<EntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, _callback);
        Type localVarReturnType = new TypeToken<EntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for entitiesPost
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesPostCall(Request body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/s1/entities";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call entitiesPostValidateBeforeCall(Request body, final ApiCallback _callback) throws ApiException {
        return entitiesPostCall(body, _callback);

    }

    /**
     * Performs named-entity recognition on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return EntitiesResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public EntitiesResponse entitiesPost(Request body) throws ApiException {
        ApiResponse<EntitiesResponse> localVarResp = entitiesPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Performs named-entity recognition on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return ApiResponse&lt;EntitiesResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<EntitiesResponse> entitiesPostWithHttpInfo(Request body) throws ApiException {
        okhttp3.Call localVarCall = entitiesPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<EntitiesResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs named-entity recognition on the given document (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call entitiesPostAsync(Request body, final ApiCallback<EntitiesResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = entitiesPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<EntitiesResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lemmatizeGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lemmatizeGetCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s1/lemmatize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (extractor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extractor", extractor));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (returnTextInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnTextInfo", returnTextInfo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lemmatizeGetValidateBeforeCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        return lemmatizeGetCall(id, text, url, extractor, language, returnTextInfo, _callback);

    }

    /**
     * Performs lemmatization on the given document
     * lemmatizeGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return LemmatizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public LemmatizeResponse lemmatizeGet(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        ApiResponse<LemmatizeResponse> localVarResp = lemmatizeGetWithHttpInfo(id, text, url, extractor, language, returnTextInfo);
        return localVarResp.getData();
    }

    /**
     * Performs lemmatization on the given document
     * lemmatizeGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return ApiResponse&lt;LemmatizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LemmatizeResponse> lemmatizeGetWithHttpInfo(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        okhttp3.Call localVarCall = lemmatizeGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, null);
        Type localVarReturnType = new TypeToken<LemmatizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs lemmatization on the given document (asynchronously)
     * lemmatizeGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lemmatizeGetAsync(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback<LemmatizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lemmatizeGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, _callback);
        Type localVarReturnType = new TypeToken<LemmatizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for lemmatizePost
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lemmatizePostCall(Request body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/s1/lemmatize";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call lemmatizePostValidateBeforeCall(Request body, final ApiCallback _callback) throws ApiException {
        return lemmatizePostCall(body, _callback);

    }

    /**
     * Performs lemmatization on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return LemmatizeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public LemmatizeResponse lemmatizePost(Request body) throws ApiException {
        ApiResponse<LemmatizeResponse> localVarResp = lemmatizePostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Performs lemmatization on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return ApiResponse&lt;LemmatizeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<LemmatizeResponse> lemmatizePostWithHttpInfo(Request body) throws ApiException {
        okhttp3.Call localVarCall = lemmatizePostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<LemmatizeResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs lemmatization on the given document (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call lemmatizePostAsync(Request body, final ApiCallback<LemmatizeResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = lemmatizePostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<LemmatizeResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sentimentGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentGetCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s1/sentiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (extractor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extractor", extractor));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (returnTextInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnTextInfo", returnTextInfo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sentimentGetValidateBeforeCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        return sentimentGetCall(id, text, url, extractor, language, returnTextInfo, _callback);

    }

    /**
     * Performs sentiment analysis on the given document
     * sentimentGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return SentimentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SentimentResponse sentimentGet(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        ApiResponse<SentimentResponse> localVarResp = sentimentGetWithHttpInfo(id, text, url, extractor, language, returnTextInfo);
        return localVarResp.getData();
    }

    /**
     * Performs sentiment analysis on the given document
     * sentimentGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return ApiResponse&lt;SentimentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SentimentResponse> sentimentGetWithHttpInfo(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        okhttp3.Call localVarCall = sentimentGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, null);
        Type localVarReturnType = new TypeToken<SentimentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs sentiment analysis on the given document (asynchronously)
     * sentimentGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentGetAsync(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback<SentimentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sentimentGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, _callback);
        Type localVarReturnType = new TypeToken<SentimentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for sentimentPost
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentPostCall(Request body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/s1/sentiment";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sentimentPostValidateBeforeCall(Request body, final ApiCallback _callback) throws ApiException {
        return sentimentPostCall(body, _callback);

    }

    /**
     * Performs sentiment analysis on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return SentimentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public SentimentResponse sentimentPost(Request body) throws ApiException {
        ApiResponse<SentimentResponse> localVarResp = sentimentPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Performs sentiment analysis on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return ApiResponse&lt;SentimentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<SentimentResponse> sentimentPostWithHttpInfo(Request body) throws ApiException {
        okhttp3.Call localVarCall = sentimentPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<SentimentResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs sentiment analysis on the given document (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call sentimentPostAsync(Request body, final ApiCallback<SentimentResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = sentimentPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<SentimentResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicGetCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/s1/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (id != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("id", id));
        }

        if (text != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("text", text));
        }

        if (url != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("url", url));
        }

        if (extractor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("extractor", extractor));
        }

        if (language != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("language", language));
        }

        if (returnTextInfo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("returnTextInfo", returnTextInfo));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicGetValidateBeforeCall(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback _callback) throws ApiException {
        return topicGetCall(id, text, url, extractor, language, returnTextInfo, _callback);

    }

    /**
     * Performs topic detection on the given document
     * topicGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return TopicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TopicResponse topicGet(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        ApiResponse<TopicResponse> localVarResp = topicGetWithHttpInfo(id, text, url, extractor, language, returnTextInfo);
        return localVarResp.getData();
    }

    /**
     * Performs topic detection on the given document
     * topicGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @return ApiResponse&lt;TopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicResponse> topicGetWithHttpInfo(String id, String text, String url, String extractor, String language, Boolean returnTextInfo) throws ApiException {
        okhttp3.Call localVarCall = topicGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, null);
        Type localVarReturnType = new TypeToken<TopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs topic detection on the given document (asynchronously)
     * topicGet
     * @param id document ID (optional)
     * @param text raw document text (optional)
     * @param url document URL (optional)
     * @param extractor document extractor (optional)
     * @param language document language (optional)
     * @param returnTextInfo  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicGetAsync(String id, String text, String url, String extractor, String language, Boolean returnTextInfo, final ApiCallback<TopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicGetValidateBeforeCall(id, text, url, extractor, language, returnTextInfo, _callback);
        Type localVarReturnType = new TypeToken<TopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for topicPost
     * @param body request (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicPostCall(Request body, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/s1/topic";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "user_key" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call topicPostValidateBeforeCall(Request body, final ApiCallback _callback) throws ApiException {
        return topicPostCall(body, _callback);

    }

    /**
     * Performs topic detection on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return TopicResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public TopicResponse topicPost(Request body) throws ApiException {
        ApiResponse<TopicResponse> localVarResp = topicPostWithHttpInfo(body);
        return localVarResp.getData();
    }

    /**
     * Performs topic detection on the given document
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @return ApiResponse&lt;TopicResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TopicResponse> topicPostWithHttpInfo(Request body) throws ApiException {
        okhttp3.Call localVarCall = topicPostValidateBeforeCall(body, null);
        Type localVarReturnType = new TypeToken<TopicResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Performs topic detection on the given document (asynchronously)
     * &lt;strong&gt;Notes:&lt;/strong&gt;&lt;br/&gt;Valid JSON cannot contain newline characters. These have to be escaped. (See also &lt;a href&#x3D;\&quot;https://geneea.atlassian.net/wiki/display/IPD/The+Interpretor+API+Public+Documentation#TheInterpretorAPIPublicDocumentation-Interactiveonlinedocumentation\&quot; target&#x3D;\&quot;_blank\&quot;&gt;Interpretor documentation&lt;/a&gt;)&lt;br/&gt;Fields &lt;code&gt;text&lt;/code&gt; and &lt;code&gt;url&lt;/code&gt; are mutually exclusive.&lt;br/&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;pre&gt;&lt;code&gt;{\&quot;text\&quot;: \&quot;Hello world!\&quot;}&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;{\&quot;url\&quot;: \&quot;https://en.wikipedia.org/wiki/Pyrrhuloxia\&quot;}&lt;/code&gt;&lt;/pre&gt;
     * @param body request (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Description was not specified </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call topicPostAsync(Request body, final ApiCallback<TopicResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = topicPostValidateBeforeCall(body, _callback);
        Type localVarReturnType = new TypeToken<TopicResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
