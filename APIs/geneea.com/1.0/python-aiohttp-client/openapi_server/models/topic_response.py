# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.label import Label
from openapi_server import util


class TopicResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, id: str=None, labels: List[Label]=None, language: str=None, text: str=None, topic: str=None):
        """TopicResponse - a model defined in OpenAPI

        :param confidence: The confidence of this TopicResponse.
        :param id: The id of this TopicResponse.
        :param labels: The labels of this TopicResponse.
        :param language: The language of this TopicResponse.
        :param text: The text of this TopicResponse.
        :param topic: The topic of this TopicResponse.
        """
        self.openapi_types = {
            'confidence': float,
            'id': str,
            'labels': List[Label],
            'language': str,
            'text': str,
            'topic': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'id': 'id',
            'labels': 'labels',
            'language': 'language',
            'text': 'text',
            'topic': 'topic'
        }

        self._confidence = confidence
        self._id = id
        self._labels = labels
        self._language = language
        self._text = text
        self._topic = topic

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TopicResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TopicResponse of this TopicResponse.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this TopicResponse.

        Confidence for the detected topic

        :return: The confidence of this TopicResponse.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this TopicResponse.

        Confidence for the detected topic

        :param confidence: The confidence of this TopicResponse.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")

        self._confidence = confidence

    @property
    def id(self):
        """Gets the id of this TopicResponse.

        Unique identifier of the document

        :return: The id of this TopicResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TopicResponse.

        Unique identifier of the document

        :param id: The id of this TopicResponse.
        :type id: str
        """

        self._id = id

    @property
    def labels(self):
        """Gets the labels of this TopicResponse.

        Probabilistic distribution over possible topic labels

        :return: The labels of this TopicResponse.
        :rtype: List[Label]
        """
        return self._labels

    @labels.setter
    def labels(self, labels):
        """Sets the labels of this TopicResponse.

        Probabilistic distribution over possible topic labels

        :param labels: The labels of this TopicResponse.
        :type labels: List[Label]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")

        self._labels = labels

    @property
    def language(self):
        """Gets the language of this TopicResponse.

        The used language of the document

        :return: The language of this TopicResponse.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this TopicResponse.

        The used language of the document

        :param language: The language of this TopicResponse.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def text(self):
        """Gets the text of this TopicResponse.

        The raw text of the document which has been analysed

        :return: The text of this TopicResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this TopicResponse.

        The raw text of the document which has been analysed

        :param text: The text of this TopicResponse.
        :type text: str
        """

        self._text = text

    @property
    def topic(self):
        """Gets the topic of this TopicResponse.

        Detected topic of the document

        :return: The topic of this TopicResponse.
        :rtype: str
        """
        return self._topic

    @topic.setter
    def topic(self, topic):
        """Sets the topic of this TopicResponse.

        Detected topic of the document

        :param topic: The topic of this TopicResponse.
        :type topic: str
        """
        if topic is None:
            raise ValueError("Invalid value for `topic`, must not be `None`")

        self._topic = topic
