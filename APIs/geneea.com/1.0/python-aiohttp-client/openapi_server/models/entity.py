# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Entity(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entity: str=None, links: object=None, sentiment: float=None, text_offset: int=None, type: str=None):
        """Entity - a model defined in OpenAPI

        :param entity: The entity of this Entity.
        :param links: The links of this Entity.
        :param sentiment: The sentiment of this Entity.
        :param text_offset: The text_offset of this Entity.
        :param type: The type of this Entity.
        """
        self.openapi_types = {
            'entity': str,
            'links': object,
            'sentiment': float,
            'text_offset': int,
            'type': str
        }

        self.attribute_map = {
            'entity': 'entity',
            'links': 'links',
            'sentiment': 'sentiment',
            'text_offset': 'textOffset',
            'type': 'type'
        }

        self._entity = entity
        self._links = links
        self._sentiment = sentiment
        self._text_offset = text_offset
        self._type = type

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Entity':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Entity of this Entity.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entity(self):
        """Gets the entity of this Entity.

        Disambiguated and standardized form of the entity

        :return: The entity of this Entity.
        :rtype: str
        """
        return self._entity

    @entity.setter
    def entity(self, entity):
        """Sets the entity of this Entity.

        Disambiguated and standardized form of the entity

        :param entity: The entity of this Entity.
        :type entity: str
        """
        if entity is None:
            raise ValueError("Invalid value for `entity`, must not be `None`")

        self._entity = entity

    @property
    def links(self):
        """Gets the links of this Entity.

        Disambiguation links for the entity, e.g. its DBpedia page

        :return: The links of this Entity.
        :rtype: object
        """
        return self._links

    @links.setter
    def links(self, links):
        """Sets the links of this Entity.

        Disambiguation links for the entity, e.g. its DBpedia page

        :param links: The links of this Entity.
        :type links: object
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")

        self._links = links

    @property
    def sentiment(self):
        """Gets the sentiment of this Entity.

        Detected sentiment of the entity (value from -1.0 to 1.0)

        :return: The sentiment of this Entity.
        :rtype: float
        """
        return self._sentiment

    @sentiment.setter
    def sentiment(self, sentiment):
        """Sets the sentiment of this Entity.

        Detected sentiment of the entity (value from -1.0 to 1.0)

        :param sentiment: The sentiment of this Entity.
        :type sentiment: float
        """

        self._sentiment = sentiment

    @property
    def text_offset(self):
        """Gets the text_offset of this Entity.

        Character offset in the text (starting from 0)

        :return: The text_offset of this Entity.
        :rtype: int
        """
        return self._text_offset

    @text_offset.setter
    def text_offset(self, text_offset):
        """Sets the text_offset of this Entity.

        Character offset in the text (starting from 0)

        :param text_offset: The text_offset of this Entity.
        :type text_offset: int
        """
        if text_offset is None:
            raise ValueError("Invalid value for `text_offset`, must not be `None`")

        self._text_offset = text_offset

    @property
    def type(self):
        """Gets the type of this Entity.

        Detected type of the entity

        :return: The type of this Entity.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Entity.

        Detected type of the entity

        :param type: The type of this Entity.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")

        self._type = type
