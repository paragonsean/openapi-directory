# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class ResponseForTheTextCorrection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, corrected: bool=None, corrected_text: str=None, diacritized: bool=None, id: str=None, language: str=None, text: str=None):
        """ResponseForTheTextCorrection - a model defined in OpenAPI

        :param corrected: The corrected of this ResponseForTheTextCorrection.
        :param corrected_text: The corrected_text of this ResponseForTheTextCorrection.
        :param diacritized: The diacritized of this ResponseForTheTextCorrection.
        :param id: The id of this ResponseForTheTextCorrection.
        :param language: The language of this ResponseForTheTextCorrection.
        :param text: The text of this ResponseForTheTextCorrection.
        """
        self.openapi_types = {
            'corrected': bool,
            'corrected_text': str,
            'diacritized': bool,
            'id': str,
            'language': str,
            'text': str
        }

        self.attribute_map = {
            'corrected': 'corrected',
            'corrected_text': 'correctedText',
            'diacritized': 'diacritized',
            'id': 'id',
            'language': 'language',
            'text': 'text'
        }

        self._corrected = corrected
        self._corrected_text = corrected_text
        self._diacritized = diacritized
        self._id = id
        self._language = language
        self._text = text

    @classmethod
    def from_dict(cls, dikt: dict) -> 'ResponseForTheTextCorrection':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Response_for_the_text_correction of this ResponseForTheTextCorrection.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def corrected(self):
        """Gets the corrected of this ResponseForTheTextCorrection.


        :return: The corrected of this ResponseForTheTextCorrection.
        :rtype: bool
        """
        return self._corrected

    @corrected.setter
    def corrected(self, corrected):
        """Sets the corrected of this ResponseForTheTextCorrection.


        :param corrected: The corrected of this ResponseForTheTextCorrection.
        :type corrected: bool
        """

        self._corrected = corrected

    @property
    def corrected_text(self):
        """Gets the corrected_text of this ResponseForTheTextCorrection.

        Corrected text of the document

        :return: The corrected_text of this ResponseForTheTextCorrection.
        :rtype: str
        """
        return self._corrected_text

    @corrected_text.setter
    def corrected_text(self, corrected_text):
        """Sets the corrected_text of this ResponseForTheTextCorrection.

        Corrected text of the document

        :param corrected_text: The corrected_text of this ResponseForTheTextCorrection.
        :type corrected_text: str
        """
        if corrected_text is None:
            raise ValueError("Invalid value for `corrected_text`, must not be `None`")

        self._corrected_text = corrected_text

    @property
    def diacritized(self):
        """Gets the diacritized of this ResponseForTheTextCorrection.


        :return: The diacritized of this ResponseForTheTextCorrection.
        :rtype: bool
        """
        return self._diacritized

    @diacritized.setter
    def diacritized(self, diacritized):
        """Sets the diacritized of this ResponseForTheTextCorrection.


        :param diacritized: The diacritized of this ResponseForTheTextCorrection.
        :type diacritized: bool
        """

        self._diacritized = diacritized

    @property
    def id(self):
        """Gets the id of this ResponseForTheTextCorrection.

        Unique identifier of the document

        :return: The id of this ResponseForTheTextCorrection.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ResponseForTheTextCorrection.

        Unique identifier of the document

        :param id: The id of this ResponseForTheTextCorrection.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this ResponseForTheTextCorrection.

        The used language of the document

        :return: The language of this ResponseForTheTextCorrection.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this ResponseForTheTextCorrection.

        The used language of the document

        :param language: The language of this ResponseForTheTextCorrection.
        :type language: str
        """
        if language is None:
            raise ValueError("Invalid value for `language`, must not be `None`")

        self._language = language

    @property
    def text(self):
        """Gets the text of this ResponseForTheTextCorrection.

        The raw text of the document which has been analysed

        :return: The text of this ResponseForTheTextCorrection.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this ResponseForTheTextCorrection.

        The raw text of the document which has been analysed

        :param text: The text of this ResponseForTheTextCorrection.
        :type text: str
        """

        self._text = text
