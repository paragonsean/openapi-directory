# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Label(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, confidence: float=None, label: str=None):
        """Label - a model defined in OpenAPI

        :param confidence: The confidence of this Label.
        :param label: The label of this Label.
        """
        self.openapi_types = {
            'confidence': float,
            'label': str
        }

        self.attribute_map = {
            'confidence': 'confidence',
            'label': 'label'
        }

        self._confidence = confidence
        self._label = label

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Label':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Label of this Label.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def confidence(self):
        """Gets the confidence of this Label.

        Confidence (probability) of this label

        :return: The confidence of this Label.
        :rtype: float
        """
        return self._confidence

    @confidence.setter
    def confidence(self, confidence):
        """Sets the confidence of this Label.

        Confidence (probability) of this label

        :param confidence: The confidence of this Label.
        :type confidence: float
        """
        if confidence is None:
            raise ValueError("Invalid value for `confidence`, must not be `None`")

        self._confidence = confidence

    @property
    def label(self):
        """Gets the label of this Label.

        The value of this label

        :return: The label of this Label.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this Label.

        The value of this label

        :param label: The label of this Label.
        :type label: str
        """
        if label is None:
            raise ValueError("Invalid value for `label`, must not be `None`")

        self._label = label
