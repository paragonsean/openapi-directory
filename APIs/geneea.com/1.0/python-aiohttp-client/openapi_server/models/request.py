# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Request(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, extractor: str=None, id: str=None, language: str=None, options: object=None, return_text_info: bool=None, text: str=None, url: str=None):
        """Request - a model defined in OpenAPI

        :param extractor: The extractor of this Request.
        :param id: The id of this Request.
        :param language: The language of this Request.
        :param options: The options of this Request.
        :param return_text_info: The return_text_info of this Request.
        :param text: The text of this Request.
        :param url: The url of this Request.
        """
        self.openapi_types = {
            'extractor': str,
            'id': str,
            'language': str,
            'options': object,
            'return_text_info': bool,
            'text': str,
            'url': str
        }

        self.attribute_map = {
            'extractor': 'extractor',
            'id': 'id',
            'language': 'language',
            'options': 'options',
            'return_text_info': 'returnTextInfo',
            'text': 'text',
            'url': 'url'
        }

        self._extractor = extractor
        self._id = id
        self._language = language
        self._options = options
        self._return_text_info = return_text_info
        self._text = text
        self._url = url

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Request':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Request of this Request.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def extractor(self):
        """Gets the extractor of this Request.

        [optional] Text extractor to be used when analyzing HTML document

        :return: The extractor of this Request.
        :rtype: str
        """
        return self._extractor

    @extractor.setter
    def extractor(self, extractor):
        """Sets the extractor of this Request.

        [optional] Text extractor to be used when analyzing HTML document

        :param extractor: The extractor of this Request.
        :type extractor: str
        """
        allowed_values = ["default", "article", "keep-everything"]  # noqa: E501
        if extractor not in allowed_values:
            raise ValueError(
                "Invalid value for `extractor` ({0}), must be one of {1}"
                .format(extractor, allowed_values)
            )

        self._extractor = extractor

    @property
    def id(self):
        """Gets the id of this Request.

        Unique identifier of the document, it's optional

        :return: The id of this Request.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Request.

        Unique identifier of the document, it's optional

        :param id: The id of this Request.
        :type id: str
        """

        self._id = id

    @property
    def language(self):
        """Gets the language of this Request.

        [optional] The language of the document, auto-detection will be used if omitted

        :return: The language of this Request.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this Request.

        [optional] The language of the document, auto-detection will be used if omitted

        :param language: The language of this Request.
        :type language: str
        """

        self._language = language

    @property
    def options(self):
        """Gets the options of this Request.

        [optional] Additional options for the internal modules (key-value pairs)

        :return: The options of this Request.
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this Request.

        [optional] Additional options for the internal modules (key-value pairs)

        :param options: The options of this Request.
        :type options: object
        """

        self._options = options

    @property
    def return_text_info(self):
        """Gets the return_text_info of this Request.

        [optional] Indicates whether to return the source text within the response object

        :return: The return_text_info of this Request.
        :rtype: bool
        """
        return self._return_text_info

    @return_text_info.setter
    def return_text_info(self, return_text_info):
        """Sets the return_text_info of this Request.

        [optional] Indicates whether to return the source text within the response object

        :param return_text_info: The return_text_info of this Request.
        :type return_text_info: bool
        """

        self._return_text_info = return_text_info

    @property
    def text(self):
        """Gets the text of this Request.

        The raw text to be analyzed, mutually exclusive with the 'url' parameter

        :return: The text of this Request.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text):
        """Sets the text of this Request.

        The raw text to be analyzed, mutually exclusive with the 'url' parameter

        :param text: The text of this Request.
        :type text: str
        """

        self._text = text

    @property
    def url(self):
        """Gets the url of this Request.

        URL of a document to be analysed, mutually exclusive with the 'text' parameter

        :return: The url of this Request.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this Request.

        URL of a document to be analysed, mutually exclusive with the 'text' parameter

        :param url: The url of this Request.
        :type url: str
        """

        self._url = url
