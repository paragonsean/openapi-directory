/**
 * Ntropy Transaction API v1
 * Ntropy Transaction API for transaction classification & management  Contact Support:  Name: API Support  Email: api@ntropy.network
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetABatchOfBusinessTransactionClassificationResults_200_response.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetABatchOfBusinessTransactionClassificationResults_200_response::OAIGetABatchOfBusinessTransactionClassificationResults_200_response(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetABatchOfBusinessTransactionClassificationResults_200_response::OAIGetABatchOfBusinessTransactionClassificationResults_200_response() {
    this->initializeModel();
}

OAIGetABatchOfBusinessTransactionClassificationResults_200_response::~OAIGetABatchOfBusinessTransactionClassificationResults_200_response() {}

void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::initializeModel() {

    m_id_isSet = false;
    m_id_isValid = false;

    m_progress_isSet = false;
    m_progress_isValid = false;

    m_results_isSet = false;
    m_results_isValid = false;

    m_status_isSet = false;
    m_status_isValid = false;

    m_updated_at_isSet = false;
    m_updated_at_isValid = false;
}

void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::fromJsonObject(QJsonObject json) {

    m_id_isValid = ::OpenAPI::fromJsonValue(m_id, json[QString("id")]);
    m_id_isSet = !json[QString("id")].isNull() && m_id_isValid;

    m_progress_isValid = ::OpenAPI::fromJsonValue(m_progress, json[QString("progress")]);
    m_progress_isSet = !json[QString("progress")].isNull() && m_progress_isValid;

    m_results_isValid = ::OpenAPI::fromJsonValue(m_results, json[QString("results")]);
    m_results_isSet = !json[QString("results")].isNull() && m_results_isValid;

    m_status_isValid = ::OpenAPI::fromJsonValue(m_status, json[QString("status")]);
    m_status_isSet = !json[QString("status")].isNull() && m_status_isValid;

    m_updated_at_isValid = ::OpenAPI::fromJsonValue(m_updated_at, json[QString("updated_at")]);
    m_updated_at_isSet = !json[QString("updated_at")].isNull() && m_updated_at_isValid;
}

QString OAIGetABatchOfBusinessTransactionClassificationResults_200_response::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetABatchOfBusinessTransactionClassificationResults_200_response::asJsonObject() const {
    QJsonObject obj;
    if (m_id_isSet) {
        obj.insert(QString("id"), ::OpenAPI::toJsonValue(m_id));
    }
    if (m_progress_isSet) {
        obj.insert(QString("progress"), ::OpenAPI::toJsonValue(m_progress));
    }
    if (m_results.size() > 0) {
        obj.insert(QString("results"), ::OpenAPI::toJsonValue(m_results));
    }
    if (m_status_isSet) {
        obj.insert(QString("status"), ::OpenAPI::toJsonValue(m_status));
    }
    if (m_updated_at_isSet) {
        obj.insert(QString("updated_at"), ::OpenAPI::toJsonValue(m_updated_at));
    }
    return obj;
}

QString OAIGetABatchOfBusinessTransactionClassificationResults_200_response::getId() const {
    return m_id;
}
void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::setId(const QString &id) {
    m_id = id;
    m_id_isSet = true;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_id_Set() const{
    return m_id_isSet;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_id_Valid() const{
    return m_id_isValid;
}

double OAIGetABatchOfBusinessTransactionClassificationResults_200_response::getProgress() const {
    return m_progress;
}
void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::setProgress(const double &progress) {
    m_progress = progress;
    m_progress_isSet = true;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_progress_Set() const{
    return m_progress_isSet;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_progress_Valid() const{
    return m_progress_isValid;
}

QList<OAIGetABatchOfBusinessTransactionClassificationResults_200_response_results_inner> OAIGetABatchOfBusinessTransactionClassificationResults_200_response::getResults() const {
    return m_results;
}
void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::setResults(const QList<OAIGetABatchOfBusinessTransactionClassificationResults_200_response_results_inner> &results) {
    m_results = results;
    m_results_isSet = true;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_results_Set() const{
    return m_results_isSet;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_results_Valid() const{
    return m_results_isValid;
}

QString OAIGetABatchOfBusinessTransactionClassificationResults_200_response::getStatus() const {
    return m_status;
}
void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::setStatus(const QString &status) {
    m_status = status;
    m_status_isSet = true;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_status_Set() const{
    return m_status_isSet;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_status_Valid() const{
    return m_status_isValid;
}

QString OAIGetABatchOfBusinessTransactionClassificationResults_200_response::getUpdatedAt() const {
    return m_updated_at;
}
void OAIGetABatchOfBusinessTransactionClassificationResults_200_response::setUpdatedAt(const QString &updated_at) {
    m_updated_at = updated_at;
    m_updated_at_isSet = true;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_updated_at_Set() const{
    return m_updated_at_isSet;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::is_updated_at_Valid() const{
    return m_updated_at_isValid;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_progress_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_results.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_status_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_updated_at_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetABatchOfBusinessTransactionClassificationResults_200_response::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
