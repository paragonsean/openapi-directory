/**
 * Ntropy Transaction API v1
 * Ntropy Transaction API for transaction classification & management  Contact Support:  Name: API Support  Email: api@ntropy.network
 *
 * The version of the OpenAPI document: 1.0.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#include "OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner.h"

#include <QDebug>
#include <QJsonArray>
#include <QJsonDocument>
#include <QObject>

#include "OAIHelpers.h"

namespace OpenAPI {

OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner(QString json) {
    this->initializeModel();
    this->fromJson(json);
}

OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner() {
    this->initializeModel();
}

OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::~OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner() {}

void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::initializeModel() {

    m_contact_isSet = false;
    m_contact_isValid = false;

    m_labels_isSet = false;
    m_labels_isValid = false;

    m_location_isSet = false;
    m_location_isValid = false;

    m_logo_isSet = false;
    m_logo_isValid = false;

    m_merchant_isSet = false;
    m_merchant_isValid = false;

    m_person_isSet = false;
    m_person_isValid = false;

    m_rating_isSet = false;
    m_rating_isValid = false;

    m_transaction_id_isSet = false;
    m_transaction_id_isValid = false;

    m_website_isSet = false;
    m_website_isValid = false;
}

void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::fromJson(QString jsonString) {
    QByteArray array(jsonString.toStdString().c_str());
    QJsonDocument doc = QJsonDocument::fromJson(array);
    QJsonObject jsonObject = doc.object();
    this->fromJsonObject(jsonObject);
}

void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::fromJsonObject(QJsonObject json) {

    m_contact_isValid = ::OpenAPI::fromJsonValue(m_contact, json[QString("contact")]);
    m_contact_isSet = !json[QString("contact")].isNull() && m_contact_isValid;

    m_labels_isValid = ::OpenAPI::fromJsonValue(m_labels, json[QString("labels")]);
    m_labels_isSet = !json[QString("labels")].isNull() && m_labels_isValid;

    m_location_isValid = ::OpenAPI::fromJsonValue(m_location, json[QString("location")]);
    m_location_isSet = !json[QString("location")].isNull() && m_location_isValid;

    m_logo_isValid = ::OpenAPI::fromJsonValue(m_logo, json[QString("logo")]);
    m_logo_isSet = !json[QString("logo")].isNull() && m_logo_isValid;

    m_merchant_isValid = ::OpenAPI::fromJsonValue(m_merchant, json[QString("merchant")]);
    m_merchant_isSet = !json[QString("merchant")].isNull() && m_merchant_isValid;

    m_person_isValid = ::OpenAPI::fromJsonValue(m_person, json[QString("person")]);
    m_person_isSet = !json[QString("person")].isNull() && m_person_isValid;

    m_rating_isValid = ::OpenAPI::fromJsonValue(m_rating, json[QString("rating")]);
    m_rating_isSet = !json[QString("rating")].isNull() && m_rating_isValid;

    m_transaction_id_isValid = ::OpenAPI::fromJsonValue(m_transaction_id, json[QString("transaction_id")]);
    m_transaction_id_isSet = !json[QString("transaction_id")].isNull() && m_transaction_id_isValid;

    m_website_isValid = ::OpenAPI::fromJsonValue(m_website, json[QString("website")]);
    m_website_isSet = !json[QString("website")].isNull() && m_website_isValid;
}

QString OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::asJson() const {
    QJsonObject obj = this->asJsonObject();
    QJsonDocument doc(obj);
    QByteArray bytes = doc.toJson();
    return QString(bytes);
}

QJsonObject OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::asJsonObject() const {
    QJsonObject obj;
    if (m_contact.isSet()) {
        obj.insert(QString("contact"), ::OpenAPI::toJsonValue(m_contact));
    }
    if (m_labels.size() > 0) {
        obj.insert(QString("labels"), ::OpenAPI::toJsonValue(m_labels));
    }
    if (m_location.isSet()) {
        obj.insert(QString("location"), ::OpenAPI::toJsonValue(m_location));
    }
    if (m_logo_isSet) {
        obj.insert(QString("logo"), ::OpenAPI::toJsonValue(m_logo));
    }
    if (m_merchant_isSet) {
        obj.insert(QString("merchant"), ::OpenAPI::toJsonValue(m_merchant));
    }
    if (m_person_isSet) {
        obj.insert(QString("person"), ::OpenAPI::toJsonValue(m_person));
    }
    if (m_rating.isSet()) {
        obj.insert(QString("rating"), ::OpenAPI::toJsonValue(m_rating));
    }
    if (m_transaction_id_isSet) {
        obj.insert(QString("transaction_id"), ::OpenAPI::toJsonValue(m_transaction_id));
    }
    if (m_website_isSet) {
        obj.insert(QString("website"), ::OpenAPI::toJsonValue(m_website));
    }
    return obj;
}

OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner_contact OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getContact() const {
    return m_contact;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setContact(const OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner_contact &contact) {
    m_contact = contact;
    m_contact_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_contact_Set() const{
    return m_contact_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_contact_Valid() const{
    return m_contact_isValid;
}

QList<QString> OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getLabels() const {
    return m_labels;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setLabels(const QList<QString> &labels) {
    m_labels = labels;
    m_labels_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_labels_Set() const{
    return m_labels_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_labels_Valid() const{
    return m_labels_isValid;
}

OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner_location OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getLocation() const {
    return m_location;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setLocation(const OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner_location &location) {
    m_location = location;
    m_location_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_location_Set() const{
    return m_location_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_location_Valid() const{
    return m_location_isValid;
}

QString OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getLogo() const {
    return m_logo;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setLogo(const QString &logo) {
    m_logo = logo;
    m_logo_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_logo_Set() const{
    return m_logo_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_logo_Valid() const{
    return m_logo_isValid;
}

QString OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getMerchant() const {
    return m_merchant;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setMerchant(const QString &merchant) {
    m_merchant = merchant;
    m_merchant_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_merchant_Set() const{
    return m_merchant_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_merchant_Valid() const{
    return m_merchant_isValid;
}

QString OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getPerson() const {
    return m_person;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setPerson(const QString &person) {
    m_person = person;
    m_person_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_person_Set() const{
    return m_person_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_person_Valid() const{
    return m_person_isValid;
}

OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner_rating OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getRating() const {
    return m_rating;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setRating(const OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner_rating &rating) {
    m_rating = rating;
    m_rating_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_rating_Set() const{
    return m_rating_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_rating_Valid() const{
    return m_rating_isValid;
}

QString OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getTransactionId() const {
    return m_transaction_id;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setTransactionId(const QString &transaction_id) {
    m_transaction_id = transaction_id;
    m_transaction_id_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_transaction_id_Set() const{
    return m_transaction_id_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_transaction_id_Valid() const{
    return m_transaction_id_isValid;
}

QString OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::getWebsite() const {
    return m_website;
}
void OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::setWebsite(const QString &website) {
    m_website = website;
    m_website_isSet = true;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_website_Set() const{
    return m_website_isSet;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::is_website_Valid() const{
    return m_website_isValid;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::isSet() const {
    bool isObjectUpdated = false;
    do {
        if (m_contact.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_labels.size() > 0) {
            isObjectUpdated = true;
            break;
        }

        if (m_location.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_logo_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_merchant_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_person_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_rating.isSet()) {
            isObjectUpdated = true;
            break;
        }

        if (m_transaction_id_isSet) {
            isObjectUpdated = true;
            break;
        }

        if (m_website_isSet) {
            isObjectUpdated = true;
            break;
        }
    } while (false);
    return isObjectUpdated;
}

bool OAIGetABatchOfConsumerTransactionClassificationResults_200_response_results_inner::isValid() const {
    // only required properties are required for the object to be considered valid
    return true;
}

} // namespace OpenAPI
