/*
 * Ntropy Transaction API v1
 * Ntropy Transaction API for transaction classification & management  Contact Support:  Name: API Support  Email: api@ntropy.network
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import org.openapitools.client.model.GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact;
import org.openapitools.client.model.GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation;
import org.openapitools.client.model.GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-10-12T12:31:04.314184-04:00[America/New_York]", comments = "Generator version: 7.9.0")
public class GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner {
  public static final String SERIALIZED_NAME_CONTACT = "contact";
  @SerializedName(SERIALIZED_NAME_CONTACT)
  private GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact contact;

  public static final String SERIALIZED_NAME_LABELS = "labels";
  @SerializedName(SERIALIZED_NAME_LABELS)
  private List<String> labels = new ArrayList<>();

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation location;

  public static final String SERIALIZED_NAME_LOGO = "logo";
  @SerializedName(SERIALIZED_NAME_LOGO)
  private String logo;

  public static final String SERIALIZED_NAME_MERCHANT = "merchant";
  @SerializedName(SERIALIZED_NAME_MERCHANT)
  private String merchant;

  public static final String SERIALIZED_NAME_PERSON = "person";
  @SerializedName(SERIALIZED_NAME_PERSON)
  private String person;

  public static final String SERIALIZED_NAME_RATING = "rating";
  @SerializedName(SERIALIZED_NAME_RATING)
  private GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating rating;

  public static final String SERIALIZED_NAME_TRANSACTION_ID = "transaction_id";
  @SerializedName(SERIALIZED_NAME_TRANSACTION_ID)
  private String transactionId;

  public static final String SERIALIZED_NAME_WEBSITE = "website";
  @SerializedName(SERIALIZED_NAME_WEBSITE)
  private String website;

  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner() {
  }

  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner contact(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact contact) {
    this.contact = contact;
    return this;
  }

  /**
   * Get contact
   * @return contact
   */
  @javax.annotation.Nullable
  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact getContact() {
    return contact;
  }

  public void setContact(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact contact) {
    this.contact = contact;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner labels(List<String> labels) {
    this.labels = labels;
    return this;
  }

  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner addLabelsItem(String labelsItem) {
    if (this.labels == null) {
      this.labels = new ArrayList<>();
    }
    this.labels.add(labelsItem);
    return this;
  }

  /**
   * Get labels
   * @return labels
   */
  @javax.annotation.Nullable
  public List<String> getLabels() {
    return labels;
  }

  public void setLabels(List<String> labels) {
    this.labels = labels;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner location(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation location) {
    this.location = location;
    return this;
  }

  /**
   * Get location
   * @return location
   */
  @javax.annotation.Nullable
  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation getLocation() {
    return location;
  }

  public void setLocation(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation location) {
    this.location = location;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner logo(String logo) {
    this.logo = logo;
    return this;
  }

  /**
   * Get logo
   * @return logo
   */
  @javax.annotation.Nullable
  public String getLogo() {
    return logo;
  }

  public void setLogo(String logo) {
    this.logo = logo;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner merchant(String merchant) {
    this.merchant = merchant;
    return this;
  }

  /**
   * Get merchant
   * @return merchant
   */
  @javax.annotation.Nullable
  public String getMerchant() {
    return merchant;
  }

  public void setMerchant(String merchant) {
    this.merchant = merchant;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner person(String person) {
    this.person = person;
    return this;
  }

  /**
   * Get person
   * @return person
   */
  @javax.annotation.Nullable
  public String getPerson() {
    return person;
  }

  public void setPerson(String person) {
    this.person = person;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner rating(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating rating) {
    this.rating = rating;
    return this;
  }

  /**
   * Get rating
   * @return rating
   */
  @javax.annotation.Nullable
  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating getRating() {
    return rating;
  }

  public void setRating(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating rating) {
    this.rating = rating;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner transactionId(String transactionId) {
    this.transactionId = transactionId;
    return this;
  }

  /**
   * Get transactionId
   * @return transactionId
   */
  @javax.annotation.Nullable
  public String getTransactionId() {
    return transactionId;
  }

  public void setTransactionId(String transactionId) {
    this.transactionId = transactionId;
  }


  public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner website(String website) {
    this.website = website;
    return this;
  }

  /**
   * Get website
   * @return website
   */
  @javax.annotation.Nullable
  public String getWebsite() {
    return website;
  }

  public void setWebsite(String website) {
    this.website = website;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner = (GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner) o;
    return Objects.equals(this.contact, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.contact) &&
        Objects.equals(this.labels, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.labels) &&
        Objects.equals(this.location, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.location) &&
        Objects.equals(this.logo, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.logo) &&
        Objects.equals(this.merchant, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.merchant) &&
        Objects.equals(this.person, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.person) &&
        Objects.equals(this.rating, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.rating) &&
        Objects.equals(this.transactionId, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.transactionId) &&
        Objects.equals(this.website, getABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.website);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contact, labels, location, logo, merchant, person, rating, transactionId, website);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner {\n");
    sb.append("    contact: ").append(toIndentedString(contact)).append("\n");
    sb.append("    labels: ").append(toIndentedString(labels)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    logo: ").append(toIndentedString(logo)).append("\n");
    sb.append("    merchant: ").append(toIndentedString(merchant)).append("\n");
    sb.append("    person: ").append(toIndentedString(person)).append("\n");
    sb.append("    rating: ").append(toIndentedString(rating)).append("\n");
    sb.append("    transactionId: ").append(toIndentedString(transactionId)).append("\n");
    sb.append("    website: ").append(toIndentedString(website)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contact");
    openapiFields.add("labels");
    openapiFields.add("location");
    openapiFields.add("logo");
    openapiFields.add("merchant");
    openapiFields.add("person");
    openapiFields.add("rating");
    openapiFields.add("transaction_id");
    openapiFields.add("website");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner is not found in the empty JSON string", GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // validate the optional field `contact`
      if (jsonObj.get("contact") != null && !jsonObj.get("contact").isJsonNull()) {
        GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerContact.validateJsonElement(jsonObj.get("contact"));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("labels") != null && !jsonObj.get("labels").isJsonNull() && !jsonObj.get("labels").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `labels` to be an array in the JSON string but got `%s`", jsonObj.get("labels").toString()));
      }
      // validate the optional field `location`
      if (jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) {
        GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerLocation.validateJsonElement(jsonObj.get("location"));
      }
      if ((jsonObj.get("logo") != null && !jsonObj.get("logo").isJsonNull()) && !jsonObj.get("logo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `logo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("logo").toString()));
      }
      if ((jsonObj.get("merchant") != null && !jsonObj.get("merchant").isJsonNull()) && !jsonObj.get("merchant").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `merchant` to be a primitive type in the JSON string but got `%s`", jsonObj.get("merchant").toString()));
      }
      if ((jsonObj.get("person") != null && !jsonObj.get("person").isJsonNull()) && !jsonObj.get("person").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `person` to be a primitive type in the JSON string but got `%s`", jsonObj.get("person").toString()));
      }
      // validate the optional field `rating`
      if (jsonObj.get("rating") != null && !jsonObj.get("rating").isJsonNull()) {
        GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInnerRating.validateJsonElement(jsonObj.get("rating"));
      }
      if ((jsonObj.get("transaction_id") != null && !jsonObj.get("transaction_id").isJsonNull()) && !jsonObj.get("transaction_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `transaction_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("transaction_id").toString()));
      }
      if ((jsonObj.get("website") != null && !jsonObj.get("website").isJsonNull()) && !jsonObj.get("website").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `website` to be a primitive type in the JSON string but got `%s`", jsonObj.get("website").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner>() {
           @Override
           public void write(JsonWriter out, GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner
   * @throws IOException if the JSON string is invalid with respect to GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner
   */
  public static GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner.class);
  }

  /**
   * Convert an instance of GetABatchOfConsumerTransactionClassificationResults200ResponseResultsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

