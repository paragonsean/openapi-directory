# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Workspace(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at: str=None, id: int=None, identifier: str=None, is_master_workspace: bool=None):
        """Workspace - a model defined in OpenAPI

        :param created_at: The created_at of this Workspace.
        :param id: The id of this Workspace.
        :param identifier: The identifier of this Workspace.
        :param is_master_workspace: The is_master_workspace of this Workspace.
        """
        self.openapi_types = {
            'created_at': str,
            'id': int,
            'identifier': str,
            'is_master_workspace': bool
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'identifier': 'identifier',
            'is_master_workspace': 'is_master_workspace'
        }

        self._created_at = created_at
        self._id = id
        self._identifier = identifier
        self._is_master_workspace = is_master_workspace

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Workspace':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Workspace of this Workspace.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self):
        """Gets the created_at of this Workspace.


        :return: The created_at of this Workspace.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Workspace.


        :param created_at: The created_at of this Workspace.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self):
        """Gets the id of this Workspace.

        Internal workspace id

        :return: The id of this Workspace.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Workspace.

        Internal workspace id

        :param id: The id of this Workspace.
        :type id: int
        """

        self._id = id

    @property
    def identifier(self):
        """Gets the identifier of this Workspace.

        The unique workspace idenfitifer specified by your application

        :return: The identifier of this Workspace.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this Workspace.

        The unique workspace idenfitifer specified by your application

        :param identifier: The identifier of this Workspace.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def is_master_workspace(self):
        """Gets the is_master_workspace of this Workspace.

        True if a master workspace

        :return: The is_master_workspace of this Workspace.
        :rtype: bool
        """
        return self._is_master_workspace

    @is_master_workspace.setter
    def is_master_workspace(self, is_master_workspace):
        """Sets the is_master_workspace of this Workspace.

        True if a master workspace

        :param is_master_workspace: The is_master_workspace of this Workspace.
        :type is_master_workspace: bool
        """

        self._is_master_workspace = is_master_workspace
