# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Template(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, modified: str=None, name: str=None, owner: bool=None, tags: List[str]=None):
        """Template - a model defined in OpenAPI

        :param id: The id of this Template.
        :param modified: The modified of this Template.
        :param name: The name of this Template.
        :param owner: The owner of this Template.
        :param tags: The tags of this Template.
        """
        self.openapi_types = {
            'id': int,
            'modified': str,
            'name': str,
            'owner': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'modified': 'modified',
            'name': 'name',
            'owner': 'owner',
            'tags': 'tags'
        }

        self._id = id
        self._modified = modified
        self._name = name
        self._owner = owner
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Template':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Template of this Template.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self):
        """Gets the id of this Template.

        Unique identifier

        :return: The id of this Template.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Template.

        Unique identifier

        :param id: The id of this Template.
        :type id: int
        """

        self._id = id

    @property
    def modified(self):
        """Gets the modified of this Template.

        Timestamp when the template was modified

        :return: The modified of this Template.
        :rtype: str
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this Template.

        Timestamp when the template was modified

        :param modified: The modified of this Template.
        :type modified: str
        """

        self._modified = modified

    @property
    def name(self):
        """Gets the name of this Template.

        Template name

        :return: The name of this Template.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Template.

        Template name

        :param name: The name of this Template.
        :type name: str
        """

        self._name = name

    @property
    def owner(self):
        """Gets the owner of this Template.

        Indicates if the workspace is the owner of the template

        :return: The owner of this Template.
        :rtype: bool
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Template.

        Indicates if the workspace is the owner of the template

        :param owner: The owner of this Template.
        :type owner: bool
        """

        self._owner = owner

    @property
    def tags(self):
        """Gets the tags of this Template.

        A list of tags assigned to a template

        :return: The tags of this Template.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this Template.

        A list of tags assigned to a template

        :param tags: The tags of this Template.
        :type tags: List[str]
        """

        self._tags = tags
