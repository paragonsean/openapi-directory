# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_definition_layout_margins import TemplateDefinitionLayoutMargins
from openapi_server.models.template_definition_layout_repeat_layout import TemplateDefinitionLayoutRepeatLayout
from openapi_server import util


class TemplateDefinitionNewLayout(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, empty_labels: int=None, format: str=None, height: float=None, margins: TemplateDefinitionLayoutMargins=None, orientation: str=None, repeat_layout: TemplateDefinitionLayoutRepeatLayout=None, rotaion: int=None, unit: str=None, width: float=None):
        """TemplateDefinitionNewLayout - a model defined in OpenAPI

        :param empty_labels: The empty_labels of this TemplateDefinitionNewLayout.
        :param format: The format of this TemplateDefinitionNewLayout.
        :param height: The height of this TemplateDefinitionNewLayout.
        :param margins: The margins of this TemplateDefinitionNewLayout.
        :param orientation: The orientation of this TemplateDefinitionNewLayout.
        :param repeat_layout: The repeat_layout of this TemplateDefinitionNewLayout.
        :param rotaion: The rotaion of this TemplateDefinitionNewLayout.
        :param unit: The unit of this TemplateDefinitionNewLayout.
        :param width: The width of this TemplateDefinitionNewLayout.
        """
        self.openapi_types = {
            'empty_labels': int,
            'format': str,
            'height': float,
            'margins': TemplateDefinitionLayoutMargins,
            'orientation': str,
            'repeat_layout': TemplateDefinitionLayoutRepeatLayout,
            'rotaion': int,
            'unit': str,
            'width': float
        }

        self.attribute_map = {
            'empty_labels': 'emptyLabels',
            'format': 'format',
            'height': 'height',
            'margins': 'margins',
            'orientation': 'orientation',
            'repeat_layout': 'repeatLayout',
            'rotaion': 'rotaion',
            'unit': 'unit',
            'width': 'width'
        }

        self._empty_labels = empty_labels
        self._format = format
        self._height = height
        self._margins = margins
        self._orientation = orientation
        self._repeat_layout = repeat_layout
        self._rotaion = rotaion
        self._unit = unit
        self._width = width

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateDefinitionNewLayout':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateDefinitionNew_layout of this TemplateDefinitionNewLayout.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def empty_labels(self):
        """Gets the empty_labels of this TemplateDefinitionNewLayout.

        Defines how many pages or labels should be empty

        :return: The empty_labels of this TemplateDefinitionNewLayout.
        :rtype: int
        """
        return self._empty_labels

    @empty_labels.setter
    def empty_labels(self, empty_labels):
        """Sets the empty_labels of this TemplateDefinitionNewLayout.

        Defines how many pages or labels should be empty

        :param empty_labels: The empty_labels of this TemplateDefinitionNewLayout.
        :type empty_labels: int
        """

        self._empty_labels = empty_labels

    @property
    def format(self):
        """Gets the format of this TemplateDefinitionNewLayout.

        Defines template page size

        :return: The format of this TemplateDefinitionNewLayout.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this TemplateDefinitionNewLayout.

        Defines template page size

        :param format: The format of this TemplateDefinitionNewLayout.
        :type format: str
        """
        allowed_values = ["A4", "letter", "custom"]  # noqa: E501
        if format not in allowed_values:
            raise ValueError(
                "Invalid value for `format` ({0}), must be one of {1}"
                .format(format, allowed_values)
            )

        self._format = format

    @property
    def height(self):
        """Gets the height of this TemplateDefinitionNewLayout.

        Page height in units

        :return: The height of this TemplateDefinitionNewLayout.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this TemplateDefinitionNewLayout.

        Page height in units

        :param height: The height of this TemplateDefinitionNewLayout.
        :type height: float
        """

        self._height = height

    @property
    def margins(self):
        """Gets the margins of this TemplateDefinitionNewLayout.


        :return: The margins of this TemplateDefinitionNewLayout.
        :rtype: TemplateDefinitionLayoutMargins
        """
        return self._margins

    @margins.setter
    def margins(self, margins):
        """Sets the margins of this TemplateDefinitionNewLayout.


        :param margins: The margins of this TemplateDefinitionNewLayout.
        :type margins: TemplateDefinitionLayoutMargins
        """

        self._margins = margins

    @property
    def orientation(self):
        """Gets the orientation of this TemplateDefinitionNewLayout.

        Page orientation

        :return: The orientation of this TemplateDefinitionNewLayout.
        :rtype: str
        """
        return self._orientation

    @orientation.setter
    def orientation(self, orientation):
        """Sets the orientation of this TemplateDefinitionNewLayout.

        Page orientation

        :param orientation: The orientation of this TemplateDefinitionNewLayout.
        :type orientation: str
        """
        allowed_values = ["portrait", "landscape"]  # noqa: E501
        if orientation not in allowed_values:
            raise ValueError(
                "Invalid value for `orientation` ({0}), must be one of {1}"
                .format(orientation, allowed_values)
            )

        self._orientation = orientation

    @property
    def repeat_layout(self):
        """Gets the repeat_layout of this TemplateDefinitionNewLayout.


        :return: The repeat_layout of this TemplateDefinitionNewLayout.
        :rtype: TemplateDefinitionLayoutRepeatLayout
        """
        return self._repeat_layout

    @repeat_layout.setter
    def repeat_layout(self, repeat_layout):
        """Sets the repeat_layout of this TemplateDefinitionNewLayout.


        :param repeat_layout: The repeat_layout of this TemplateDefinitionNewLayout.
        :type repeat_layout: TemplateDefinitionLayoutRepeatLayout
        """

        self._repeat_layout = repeat_layout

    @property
    def rotaion(self):
        """Gets the rotaion of this TemplateDefinitionNewLayout.

        Page rotation in degrees

        :return: The rotaion of this TemplateDefinitionNewLayout.
        :rtype: int
        """
        return self._rotaion

    @rotaion.setter
    def rotaion(self, rotaion):
        """Sets the rotaion of this TemplateDefinitionNewLayout.

        Page rotation in degrees

        :param rotaion: The rotaion of this TemplateDefinitionNewLayout.
        :type rotaion: int
        """
        allowed_values = [0, 90, 180, 270]  # noqa: E501
        if rotaion not in allowed_values:
            raise ValueError(
                "Invalid value for `rotaion` ({0}), must be one of {1}"
                .format(rotaion, allowed_values)
            )

        self._rotaion = rotaion

    @property
    def unit(self):
        """Gets the unit of this TemplateDefinitionNewLayout.

        Measure unit

        :return: The unit of this TemplateDefinitionNewLayout.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this TemplateDefinitionNewLayout.

        Measure unit

        :param unit: The unit of this TemplateDefinitionNewLayout.
        :type unit: str
        """
        allowed_values = ["cm", "in"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def width(self):
        """Gets the width of this TemplateDefinitionNewLayout.

        Page width in units

        :return: The width of this TemplateDefinitionNewLayout.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this TemplateDefinitionNewLayout.

        Page width in units

        :param width: The width of this TemplateDefinitionNewLayout.
        :type width: float
        """

        self._width = width
