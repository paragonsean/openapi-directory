# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server import util


class Component(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, cls: str=None, data_index: str=None, height: float=None, id: str=None, left: float=None, top: float=None, value: str=None, width: float=None, zindex: int=None):
        """Component - a model defined in OpenAPI

        :param cls: The cls of this Component.
        :param data_index: The data_index of this Component.
        :param height: The height of this Component.
        :param id: The id of this Component.
        :param left: The left of this Component.
        :param top: The top of this Component.
        :param value: The value of this Component.
        :param width: The width of this Component.
        :param zindex: The zindex of this Component.
        """
        self.openapi_types = {
            'cls': str,
            'data_index': str,
            'height': float,
            'id': str,
            'left': float,
            'top': float,
            'value': str,
            'width': float,
            'zindex': int
        }

        self.attribute_map = {
            'cls': 'cls',
            'data_index': 'dataIndex',
            'height': 'height',
            'id': 'id',
            'left': 'left',
            'top': 'top',
            'value': 'value',
            'width': 'width',
            'zindex': 'zindex'
        }

        self._cls = cls
        self._data_index = data_index
        self._height = height
        self._id = id
        self._left = left
        self._top = top
        self._value = value
        self._width = width
        self._zindex = zindex

    @classmethod
    def from_dict(cls, dikt: dict) -> 'Component':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The Component of this Component.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cls(self):
        """Gets the cls of this Component.

        Defines component class/type

        :return: The cls of this Component.
        :rtype: str
        """
        return self._cls

    @cls.setter
    def cls(self, cls):
        """Sets the cls of this Component.

        Defines component class/type

        :param cls: The cls of this Component.
        :type cls: str
        """
        allowed_values = ["labelComponent", "numberComponent", "textComponent", "imageComponent", "dateComponent", "hlineComponent", "vlineComponent", "tableComponent", "compositeComponent", "barcodeComponent", "qrcodeComponent", "chartComponent", "rectangleComponent", "headerComponent", "footerComponent", "checkboxComponent", "radioComponent"]  # noqa: E501
        if cls not in allowed_values:
            raise ValueError(
                "Invalid value for `cls` ({0}), must be one of {1}"
                .format(cls, allowed_values)
            )

        self._cls = cls

    @property
    def data_index(self):
        """Gets the data_index of this Component.

        Defines data field for Table and Container components which are used to iterate over list of items

        :return: The data_index of this Component.
        :rtype: str
        """
        return self._data_index

    @data_index.setter
    def data_index(self, data_index):
        """Sets the data_index of this Component.

        Defines data field for Table and Container components which are used to iterate over list of items

        :param data_index: The data_index of this Component.
        :type data_index: str
        """

        self._data_index = data_index

    @property
    def height(self):
        """Gets the height of this Component.

        Height in units

        :return: The height of this Component.
        :rtype: float
        """
        return self._height

    @height.setter
    def height(self, height):
        """Sets the height of this Component.

        Height in units

        :param height: The height of this Component.
        :type height: float
        """

        self._height = height

    @property
    def id(self):
        """Gets the id of this Component.

        Component id

        :return: The id of this Component.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Component.

        Component id

        :param id: The id of this Component.
        :type id: str
        """

        self._id = id

    @property
    def left(self):
        """Gets the left of this Component.

        Position from the page left in units

        :return: The left of this Component.
        :rtype: float
        """
        return self._left

    @left.setter
    def left(self, left):
        """Sets the left of this Component.

        Position from the page left in units

        :param left: The left of this Component.
        :type left: float
        """

        self._left = left

    @property
    def top(self):
        """Gets the top of this Component.

        Position from the page top in units

        :return: The top of this Component.
        :rtype: float
        """
        return self._top

    @top.setter
    def top(self, top):
        """Sets the top of this Component.

        Position from the page top in units

        :param top: The top of this Component.
        :type top: float
        """

        self._top = top

    @property
    def value(self):
        """Gets the value of this Component.

        Component value

        :return: The value of this Component.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Component.

        Component value

        :param value: The value of this Component.
        :type value: str
        """

        self._value = value

    @property
    def width(self):
        """Gets the width of this Component.

        Width in units

        :return: The width of this Component.
        :rtype: float
        """
        return self._width

    @width.setter
    def width(self, width):
        """Sets the width of this Component.

        Width in units

        :param width: The width of this Component.
        :type width: float
        """

        self._width = width

    @property
    def zindex(self):
        """Gets the zindex of this Component.

        Defines the rendering order on page. Components with smaller zindex are rendered before

        :return: The zindex of this Component.
        :rtype: int
        """
        return self._zindex

    @zindex.setter
    def zindex(self, zindex):
        """Sets the zindex of this Component.

        Defines the rendering order on page. Components with smaller zindex are rendered before

        :param zindex: The zindex of this Component.
        :type zindex: int
        """

        self._zindex = zindex
