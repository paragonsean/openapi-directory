# coding: utf-8

from datetime import date, datetime

from typing import List, Dict, Type

from openapi_server.models.base_model import Model
from openapi_server.models.template_definition_new_layout import TemplateDefinitionNewLayout
from openapi_server.models.template_definition_pages_inner import TemplateDefinitionPagesInner
from openapi_server import util


class TemplateDefinitionNew(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_draft: bool=None, layout: TemplateDefinitionNewLayout=None, name: str=None, pages: List[TemplateDefinitionPagesInner]=None, tags: List[str]=None):
        """TemplateDefinitionNew - a model defined in OpenAPI

        :param is_draft: The is_draft of this TemplateDefinitionNew.
        :param layout: The layout of this TemplateDefinitionNew.
        :param name: The name of this TemplateDefinitionNew.
        :param pages: The pages of this TemplateDefinitionNew.
        :param tags: The tags of this TemplateDefinitionNew.
        """
        self.openapi_types = {
            'is_draft': bool,
            'layout': TemplateDefinitionNewLayout,
            'name': str,
            'pages': List[TemplateDefinitionPagesInner],
            'tags': List[str]
        }

        self.attribute_map = {
            'is_draft': 'isDraft',
            'layout': 'layout',
            'name': 'name',
            'pages': 'pages',
            'tags': 'tags'
        }

        self._is_draft = is_draft
        self._layout = layout
        self._name = name
        self._pages = pages
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt: dict) -> 'TemplateDefinitionNew':
        """Returns the dict as a model

        :param dikt: A dict.
        :return: The TemplateDefinitionNew of this TemplateDefinitionNew.
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_draft(self):
        """Gets the is_draft of this TemplateDefinitionNew.

        Indicates if the template is a draft or published.

        :return: The is_draft of this TemplateDefinitionNew.
        :rtype: bool
        """
        return self._is_draft

    @is_draft.setter
    def is_draft(self, is_draft):
        """Sets the is_draft of this TemplateDefinitionNew.

        Indicates if the template is a draft or published.

        :param is_draft: The is_draft of this TemplateDefinitionNew.
        :type is_draft: bool
        """

        self._is_draft = is_draft

    @property
    def layout(self):
        """Gets the layout of this TemplateDefinitionNew.


        :return: The layout of this TemplateDefinitionNew.
        :rtype: TemplateDefinitionNewLayout
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """Sets the layout of this TemplateDefinitionNew.


        :param layout: The layout of this TemplateDefinitionNew.
        :type layout: TemplateDefinitionNewLayout
        """

        self._layout = layout

    @property
    def name(self):
        """Gets the name of this TemplateDefinitionNew.

        Template name

        :return: The name of this TemplateDefinitionNew.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TemplateDefinitionNew.

        Template name

        :param name: The name of this TemplateDefinitionNew.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def pages(self):
        """Gets the pages of this TemplateDefinitionNew.

        Defines page or label size, margins and components on page or label

        :return: The pages of this TemplateDefinitionNew.
        :rtype: List[TemplateDefinitionPagesInner]
        """
        return self._pages

    @pages.setter
    def pages(self, pages):
        """Sets the pages of this TemplateDefinitionNew.

        Defines page or label size, margins and components on page or label

        :param pages: The pages of this TemplateDefinitionNew.
        :type pages: List[TemplateDefinitionPagesInner]
        """

        self._pages = pages

    @property
    def tags(self):
        """Gets the tags of this TemplateDefinitionNew.

        A list of tags assigned to a template

        :return: The tags of this TemplateDefinitionNew.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this TemplateDefinitionNew.

        A list of tags assigned to a template

        :param tags: The tags of this TemplateDefinitionNew.
        :type tags: List[str]
        """

        self._tags = tags
