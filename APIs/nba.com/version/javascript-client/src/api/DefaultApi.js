/**
 * NBA Stats API
 * The destination for current and historic NBA statistics.
 *
 * The version of the OpenAPI document: version
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";

/**
* Default service.
* @module api/DefaultApi
* @version version
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the allstarballotpredictorGet operation.
     * @callback module:api/DefaultApi~allstarballotpredictorGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} westPlayer1 
     * @param {String} westPlayer2 
     * @param {String} westPlayer3 
     * @param {String} westPlayer4 
     * @param {String} westPlayer5 
     * @param {String} eastPlayer1 
     * @param {String} eastPlayer2 
     * @param {String} eastPlayer3 
     * @param {String} eastPlayer4 
     * @param {String} eastPlayer5 
     * @param {Object} opts Optional parameters
     * @param {String} [pointCap] 
     * @param {module:api/DefaultApi~allstarballotpredictorGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    allstarballotpredictorGet(westPlayer1, westPlayer2, westPlayer3, westPlayer4, westPlayer5, eastPlayer1, eastPlayer2, eastPlayer3, eastPlayer4, eastPlayer5, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'westPlayer1' is set
      if (westPlayer1 === undefined || westPlayer1 === null) {
        throw new Error("Missing the required parameter 'westPlayer1' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'westPlayer2' is set
      if (westPlayer2 === undefined || westPlayer2 === null) {
        throw new Error("Missing the required parameter 'westPlayer2' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'westPlayer3' is set
      if (westPlayer3 === undefined || westPlayer3 === null) {
        throw new Error("Missing the required parameter 'westPlayer3' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'westPlayer4' is set
      if (westPlayer4 === undefined || westPlayer4 === null) {
        throw new Error("Missing the required parameter 'westPlayer4' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'westPlayer5' is set
      if (westPlayer5 === undefined || westPlayer5 === null) {
        throw new Error("Missing the required parameter 'westPlayer5' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'eastPlayer1' is set
      if (eastPlayer1 === undefined || eastPlayer1 === null) {
        throw new Error("Missing the required parameter 'eastPlayer1' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'eastPlayer2' is set
      if (eastPlayer2 === undefined || eastPlayer2 === null) {
        throw new Error("Missing the required parameter 'eastPlayer2' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'eastPlayer3' is set
      if (eastPlayer3 === undefined || eastPlayer3 === null) {
        throw new Error("Missing the required parameter 'eastPlayer3' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'eastPlayer4' is set
      if (eastPlayer4 === undefined || eastPlayer4 === null) {
        throw new Error("Missing the required parameter 'eastPlayer4' when calling allstarballotpredictorGet");
      }
      // verify the required parameter 'eastPlayer5' is set
      if (eastPlayer5 === undefined || eastPlayer5 === null) {
        throw new Error("Missing the required parameter 'eastPlayer5' when calling allstarballotpredictorGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PointCap': opts['pointCap'],
        'WestPlayer1': westPlayer1,
        'WestPlayer2': westPlayer2,
        'WestPlayer3': westPlayer3,
        'WestPlayer4': westPlayer4,
        'WestPlayer5': westPlayer5,
        'EastPlayer1': eastPlayer1,
        'EastPlayer2': eastPlayer2,
        'EastPlayer3': eastPlayer3,
        'EastPlayer4': eastPlayer4,
        'EastPlayer5': eastPlayer5
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/allstarballotpredictor', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoreGet operation.
     * @callback module:api/DefaultApi~boxscoreGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [gameID] 
     * @param {String} [startPeriod] 
     * @param {String} [endPeriod] 
     * @param {String} [startRange] 
     * @param {String} [endRange] 
     * @param {String} [rangeType] 
     * @param {module:api/DefaultApi~boxscoreGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoreGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'GameID': opts['gameID'],
        'StartPeriod': opts['startPeriod'],
        'EndPeriod': opts['endPeriod'],
        'StartRange': opts['startRange'],
        'EndRange': opts['endRange'],
        'RangeType': opts['rangeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscore', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoreadvancedGet operation.
     * @callback module:api/DefaultApi~boxscoreadvancedGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [gameID] 
     * @param {String} [startPeriod] 
     * @param {String} [endPeriod] 
     * @param {String} [startRange] 
     * @param {String} [endRange] 
     * @param {String} [rangeType] 
     * @param {module:api/DefaultApi~boxscoreadvancedGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoreadvancedGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'GameID': opts['gameID'],
        'StartPeriod': opts['startPeriod'],
        'EndPeriod': opts['endPeriod'],
        'StartRange': opts['startRange'],
        'EndRange': opts['endRange'],
        'RangeType': opts['rangeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoreadvanced', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoreadvancedv2Get operation.
     * @callback module:api/DefaultApi~boxscoreadvancedv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {String} startRange 
     * @param {String} endRange 
     * @param {String} rangeType 
     * @param {module:api/DefaultApi~boxscoreadvancedv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoreadvancedv2Get(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscoreadvancedv2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling boxscoreadvancedv2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling boxscoreadvancedv2Get");
      }
      // verify the required parameter 'startRange' is set
      if (startRange === undefined || startRange === null) {
        throw new Error("Missing the required parameter 'startRange' when calling boxscoreadvancedv2Get");
      }
      // verify the required parameter 'endRange' is set
      if (endRange === undefined || endRange === null) {
        throw new Error("Missing the required parameter 'endRange' when calling boxscoreadvancedv2Get");
      }
      // verify the required parameter 'rangeType' is set
      if (rangeType === undefined || rangeType === null) {
        throw new Error("Missing the required parameter 'rangeType' when calling boxscoreadvancedv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod,
        'StartRange': startRange,
        'EndRange': endRange,
        'RangeType': rangeType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoreadvancedv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscorefourfactorsGet operation.
     * @callback module:api/DefaultApi~boxscorefourfactorsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [gameID] 
     * @param {String} [startPeriod] 
     * @param {String} [endPeriod] 
     * @param {String} [startRange] 
     * @param {String} [endRange] 
     * @param {String} [rangeType] 
     * @param {module:api/DefaultApi~boxscorefourfactorsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscorefourfactorsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'GameID': opts['gameID'],
        'StartPeriod': opts['startPeriod'],
        'EndPeriod': opts['endPeriod'],
        'StartRange': opts['startRange'],
        'EndRange': opts['endRange'],
        'RangeType': opts['rangeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscorefourfactors', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscorefourfactorsv2Get operation.
     * @callback module:api/DefaultApi~boxscorefourfactorsv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {String} startRange 
     * @param {String} endRange 
     * @param {String} rangeType 
     * @param {module:api/DefaultApi~boxscorefourfactorsv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscorefourfactorsv2Get(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscorefourfactorsv2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling boxscorefourfactorsv2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling boxscorefourfactorsv2Get");
      }
      // verify the required parameter 'startRange' is set
      if (startRange === undefined || startRange === null) {
        throw new Error("Missing the required parameter 'startRange' when calling boxscorefourfactorsv2Get");
      }
      // verify the required parameter 'endRange' is set
      if (endRange === undefined || endRange === null) {
        throw new Error("Missing the required parameter 'endRange' when calling boxscorefourfactorsv2Get");
      }
      // verify the required parameter 'rangeType' is set
      if (rangeType === undefined || rangeType === null) {
        throw new Error("Missing the required parameter 'rangeType' when calling boxscorefourfactorsv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod,
        'StartRange': startRange,
        'EndRange': endRange,
        'RangeType': rangeType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscorefourfactorsv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoremiscGet operation.
     * @callback module:api/DefaultApi~boxscoremiscGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [gameID] 
     * @param {String} [startPeriod] 
     * @param {String} [endPeriod] 
     * @param {String} [startRange] 
     * @param {String} [endRange] 
     * @param {String} [rangeType] 
     * @param {module:api/DefaultApi~boxscoremiscGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoremiscGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'GameID': opts['gameID'],
        'StartPeriod': opts['startPeriod'],
        'EndPeriod': opts['endPeriod'],
        'StartRange': opts['startRange'],
        'EndRange': opts['endRange'],
        'RangeType': opts['rangeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoremisc', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoremiscv2Get operation.
     * @callback module:api/DefaultApi~boxscoremiscv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {String} startRange 
     * @param {String} endRange 
     * @param {String} rangeType 
     * @param {module:api/DefaultApi~boxscoremiscv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoremiscv2Get(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscoremiscv2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling boxscoremiscv2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling boxscoremiscv2Get");
      }
      // verify the required parameter 'startRange' is set
      if (startRange === undefined || startRange === null) {
        throw new Error("Missing the required parameter 'startRange' when calling boxscoremiscv2Get");
      }
      // verify the required parameter 'endRange' is set
      if (endRange === undefined || endRange === null) {
        throw new Error("Missing the required parameter 'endRange' when calling boxscoremiscv2Get");
      }
      // verify the required parameter 'rangeType' is set
      if (rangeType === undefined || rangeType === null) {
        throw new Error("Missing the required parameter 'rangeType' when calling boxscoremiscv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod,
        'StartRange': startRange,
        'EndRange': endRange,
        'RangeType': rangeType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoremiscv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoreplayertrackv2Get operation.
     * @callback module:api/DefaultApi~boxscoreplayertrackv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {module:api/DefaultApi~boxscoreplayertrackv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoreplayertrackv2Get(gameID, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscoreplayertrackv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoreplayertrackv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscorescoringGet operation.
     * @callback module:api/DefaultApi~boxscorescoringGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [gameID] 
     * @param {String} [startPeriod] 
     * @param {String} [endPeriod] 
     * @param {String} [startRange] 
     * @param {String} [endRange] 
     * @param {String} [rangeType] 
     * @param {module:api/DefaultApi~boxscorescoringGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscorescoringGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'GameID': opts['gameID'],
        'StartPeriod': opts['startPeriod'],
        'EndPeriod': opts['endPeriod'],
        'StartRange': opts['startRange'],
        'EndRange': opts['endRange'],
        'RangeType': opts['rangeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscorescoring', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscorescoringv2Get operation.
     * @callback module:api/DefaultApi~boxscorescoringv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {String} startRange 
     * @param {String} endRange 
     * @param {String} rangeType 
     * @param {module:api/DefaultApi~boxscorescoringv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscorescoringv2Get(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscorescoringv2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling boxscorescoringv2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling boxscorescoringv2Get");
      }
      // verify the required parameter 'startRange' is set
      if (startRange === undefined || startRange === null) {
        throw new Error("Missing the required parameter 'startRange' when calling boxscorescoringv2Get");
      }
      // verify the required parameter 'endRange' is set
      if (endRange === undefined || endRange === null) {
        throw new Error("Missing the required parameter 'endRange' when calling boxscorescoringv2Get");
      }
      // verify the required parameter 'rangeType' is set
      if (rangeType === undefined || rangeType === null) {
        throw new Error("Missing the required parameter 'rangeType' when calling boxscorescoringv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod,
        'StartRange': startRange,
        'EndRange': endRange,
        'RangeType': rangeType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscorescoringv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoresummaryv2Get operation.
     * @callback module:api/DefaultApi~boxscoresummaryv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {module:api/DefaultApi~boxscoresummaryv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoresummaryv2Get(gameID, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscoresummaryv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoresummaryv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoretraditionalv2Get operation.
     * @callback module:api/DefaultApi~boxscoretraditionalv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {String} startRange 
     * @param {String} endRange 
     * @param {String} rangeType 
     * @param {module:api/DefaultApi~boxscoretraditionalv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoretraditionalv2Get(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscoretraditionalv2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling boxscoretraditionalv2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling boxscoretraditionalv2Get");
      }
      // verify the required parameter 'startRange' is set
      if (startRange === undefined || startRange === null) {
        throw new Error("Missing the required parameter 'startRange' when calling boxscoretraditionalv2Get");
      }
      // verify the required parameter 'endRange' is set
      if (endRange === undefined || endRange === null) {
        throw new Error("Missing the required parameter 'endRange' when calling boxscoretraditionalv2Get");
      }
      // verify the required parameter 'rangeType' is set
      if (rangeType === undefined || rangeType === null) {
        throw new Error("Missing the required parameter 'rangeType' when calling boxscoretraditionalv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod,
        'StartRange': startRange,
        'EndRange': endRange,
        'RangeType': rangeType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoretraditionalv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoreusageGet operation.
     * @callback module:api/DefaultApi~boxscoreusageGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [gameID] 
     * @param {String} [startPeriod] 
     * @param {String} [endPeriod] 
     * @param {String} [startRange] 
     * @param {String} [endRange] 
     * @param {String} [rangeType] 
     * @param {module:api/DefaultApi~boxscoreusageGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoreusageGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'GameID': opts['gameID'],
        'StartPeriod': opts['startPeriod'],
        'EndPeriod': opts['endPeriod'],
        'StartRange': opts['startRange'],
        'EndRange': opts['endRange'],
        'RangeType': opts['rangeType']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoreusage', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the boxscoreusagev2Get operation.
     * @callback module:api/DefaultApi~boxscoreusagev2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {String} startRange 
     * @param {String} endRange 
     * @param {String} rangeType 
     * @param {module:api/DefaultApi~boxscoreusagev2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    boxscoreusagev2Get(gameID, startPeriod, endPeriod, startRange, endRange, rangeType, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling boxscoreusagev2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling boxscoreusagev2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling boxscoreusagev2Get");
      }
      // verify the required parameter 'startRange' is set
      if (startRange === undefined || startRange === null) {
        throw new Error("Missing the required parameter 'startRange' when calling boxscoreusagev2Get");
      }
      // verify the required parameter 'endRange' is set
      if (endRange === undefined || endRange === null) {
        throw new Error("Missing the required parameter 'endRange' when calling boxscoreusagev2Get");
      }
      // verify the required parameter 'rangeType' is set
      if (rangeType === undefined || rangeType === null) {
        throw new Error("Missing the required parameter 'rangeType' when calling boxscoreusagev2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod,
        'StartRange': startRange,
        'EndRange': endRange,
        'RangeType': rangeType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/boxscoreusagev2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commonTeamYearsGet operation.
     * @callback module:api/DefaultApi~commonTeamYearsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {module:api/DefaultApi~commonTeamYearsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commonTeamYearsGet(leagueID, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling commonTeamYearsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/commonTeamYears', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commonallplayersGet operation.
     * @callback module:api/DefaultApi~commonallplayersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} season 
     * @param {String} isOnlyCurrentSeason 
     * @param {module:api/DefaultApi~commonallplayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commonallplayersGet(leagueID, season, isOnlyCurrentSeason, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling commonallplayersGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling commonallplayersGet");
      }
      // verify the required parameter 'isOnlyCurrentSeason' is set
      if (isOnlyCurrentSeason === undefined || isOnlyCurrentSeason === null) {
        throw new Error("Missing the required parameter 'isOnlyCurrentSeason' when calling commonallplayersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'Season': season,
        'IsOnlyCurrentSeason': isOnlyCurrentSeason
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/commonallplayers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commonplayerinfoGet operation.
     * @callback module:api/DefaultApi~commonplayerinfoGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} playerID 
     * @param {module:api/DefaultApi~commonplayerinfoGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commonplayerinfoGet(playerID, callback) {
      let postBody = null;
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling commonplayerinfoGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PlayerID': playerID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/commonplayerinfo', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commonplayoffseriesGet operation.
     * @callback module:api/DefaultApi~commonplayoffseriesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} season 
     * @param {module:api/DefaultApi~commonplayoffseriesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commonplayoffseriesGet(leagueID, season, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling commonplayoffseriesGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling commonplayoffseriesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'Season': season
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/commonplayoffseries', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the commonteamrosterGet operation.
     * @callback module:api/DefaultApi~commonteamrosterGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} season 
     * @param {String} teamID 
     * @param {module:api/DefaultApi~commonteamrosterGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    commonteamrosterGet(season, teamID, callback) {
      let postBody = null;
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling commonteamrosterGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling commonteamrosterGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'Season': season,
        'TeamID': teamID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/commonteamroster', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the draftcombinedrillresultsGet operation.
     * @callback module:api/DefaultApi~draftcombinedrillresultsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonYear 
     * @param {module:api/DefaultApi~draftcombinedrillresultsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    draftcombinedrillresultsGet(leagueID, seasonYear, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling draftcombinedrillresultsGet");
      }
      // verify the required parameter 'seasonYear' is set
      if (seasonYear === undefined || seasonYear === null) {
        throw new Error("Missing the required parameter 'seasonYear' when calling draftcombinedrillresultsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonYear': seasonYear
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/draftcombinedrillresults', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the draftcombinenonstationaryshootingGet operation.
     * @callback module:api/DefaultApi~draftcombinenonstationaryshootingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonYear 
     * @param {module:api/DefaultApi~draftcombinenonstationaryshootingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    draftcombinenonstationaryshootingGet(leagueID, seasonYear, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling draftcombinenonstationaryshootingGet");
      }
      // verify the required parameter 'seasonYear' is set
      if (seasonYear === undefined || seasonYear === null) {
        throw new Error("Missing the required parameter 'seasonYear' when calling draftcombinenonstationaryshootingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonYear': seasonYear
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/draftcombinenonstationaryshooting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the draftcombineplayeranthroGet operation.
     * @callback module:api/DefaultApi~draftcombineplayeranthroGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonYear 
     * @param {module:api/DefaultApi~draftcombineplayeranthroGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    draftcombineplayeranthroGet(leagueID, seasonYear, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling draftcombineplayeranthroGet");
      }
      // verify the required parameter 'seasonYear' is set
      if (seasonYear === undefined || seasonYear === null) {
        throw new Error("Missing the required parameter 'seasonYear' when calling draftcombineplayeranthroGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonYear': seasonYear
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/draftcombineplayeranthro', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the draftcombinespotshootingGet operation.
     * @callback module:api/DefaultApi~draftcombinespotshootingGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonYear 
     * @param {module:api/DefaultApi~draftcombinespotshootingGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    draftcombinespotshootingGet(leagueID, seasonYear, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling draftcombinespotshootingGet");
      }
      // verify the required parameter 'seasonYear' is set
      if (seasonYear === undefined || seasonYear === null) {
        throw new Error("Missing the required parameter 'seasonYear' when calling draftcombinespotshootingGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonYear': seasonYear
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/draftcombinespotshooting', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the draftcombinestatsGet operation.
     * @callback module:api/DefaultApi~draftcombinestatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonYear 
     * @param {module:api/DefaultApi~draftcombinestatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    draftcombinestatsGet(leagueID, seasonYear, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling draftcombinestatsGet");
      }
      // verify the required parameter 'seasonYear' is set
      if (seasonYear === undefined || seasonYear === null) {
        throw new Error("Missing the required parameter 'seasonYear' when calling draftcombinestatsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonYear': seasonYear
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/draftcombinestats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the drafthistoryGet operation.
     * @callback module:api/DefaultApi~drafthistoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {module:api/DefaultApi~drafthistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    drafthistoryGet(leagueID, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling drafthistoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/drafthistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the franchisehistoryGet operation.
     * @callback module:api/DefaultApi~franchisehistoryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {module:api/DefaultApi~franchisehistoryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    franchisehistoryGet(leagueID, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling franchisehistoryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/franchisehistory', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the homepageleadersGet operation.
     * @callback module:api/DefaultApi~homepageleadersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} statCategory 
     * @param {String} leagueID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerOrTeam 
     * @param {String} playerScope 
     * @param {String} gameScope 
     * @param {Object} opts Optional parameters
     * @param {String} [game] 
     * @param {String} [player] 
     * @param {module:api/DefaultApi~homepageleadersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    homepageleadersGet(statCategory, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statCategory' is set
      if (statCategory === undefined || statCategory === null) {
        throw new Error("Missing the required parameter 'statCategory' when calling homepageleadersGet");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling homepageleadersGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling homepageleadersGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling homepageleadersGet");
      }
      // verify the required parameter 'playerOrTeam' is set
      if (playerOrTeam === undefined || playerOrTeam === null) {
        throw new Error("Missing the required parameter 'playerOrTeam' when calling homepageleadersGet");
      }
      // verify the required parameter 'playerScope' is set
      if (playerScope === undefined || playerScope === null) {
        throw new Error("Missing the required parameter 'playerScope' when calling homepageleadersGet");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling homepageleadersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'StatCategory': statCategory,
        'LeagueID': leagueID,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerOrTeam': playerOrTeam,
        'Game': opts['game'],
        'Player': opts['player'],
        'PlayerScope': playerScope,
        'GameScope': gameScope
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/homepageleaders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the homepagev2Get operation.
     * @callback module:api/DefaultApi~homepagev2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} statType 
     * @param {String} leagueID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerOrTeam 
     * @param {String} playerScope 
     * @param {String} gameScope 
     * @param {Object} opts Optional parameters
     * @param {String} [game] 
     * @param {String} [player] 
     * @param {module:api/DefaultApi~homepagev2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    homepagev2Get(statType, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'statType' is set
      if (statType === undefined || statType === null) {
        throw new Error("Missing the required parameter 'statType' when calling homepagev2Get");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling homepagev2Get");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling homepagev2Get");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling homepagev2Get");
      }
      // verify the required parameter 'playerOrTeam' is set
      if (playerOrTeam === undefined || playerOrTeam === null) {
        throw new Error("Missing the required parameter 'playerOrTeam' when calling homepagev2Get");
      }
      // verify the required parameter 'playerScope' is set
      if (playerScope === undefined || playerScope === null) {
        throw new Error("Missing the required parameter 'playerScope' when calling homepagev2Get");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling homepagev2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'StatType': statType,
        'LeagueID': leagueID,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerOrTeam': playerOrTeam,
        'Game': opts['game'],
        'Player': opts['player'],
        'PlayerScope': playerScope,
        'GameScope': gameScope
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/homepagev2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaderstilesGet operation.
     * @callback module:api/DefaultApi~leaderstilesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} stat 
     * @param {String} leagueID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerOrTeam 
     * @param {String} playerScope 
     * @param {String} gameScope 
     * @param {Object} opts Optional parameters
     * @param {String} [game] 
     * @param {String} [player] 
     * @param {module:api/DefaultApi~leaderstilesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaderstilesGet(stat, leagueID, season, seasonType, playerOrTeam, playerScope, gameScope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'stat' is set
      if (stat === undefined || stat === null) {
        throw new Error("Missing the required parameter 'stat' when calling leaderstilesGet");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leaderstilesGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaderstilesGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaderstilesGet");
      }
      // verify the required parameter 'playerOrTeam' is set
      if (playerOrTeam === undefined || playerOrTeam === null) {
        throw new Error("Missing the required parameter 'playerOrTeam' when calling leaderstilesGet");
      }
      // verify the required parameter 'playerScope' is set
      if (playerScope === undefined || playerScope === null) {
        throw new Error("Missing the required parameter 'playerScope' when calling leaderstilesGet");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling leaderstilesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'Stat': stat,
        'LeagueID': leagueID,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerOrTeam': playerOrTeam,
        'Game': opts['game'],
        'Player': opts['player'],
        'PlayerScope': playerScope,
        'GameScope': gameScope
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaderstiles', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashlineupsGet operation.
     * @callback module:api/DefaultApi~leaguedashlineupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} groupQuantity 
     * @param {String} seasonType 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~leaguedashlineupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashlineupsGet(groupQuantity, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'groupQuantity' is set
      if (groupQuantity === undefined || groupQuantity === null) {
        throw new Error("Missing the required parameter 'groupQuantity' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashlineupsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashlineupsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'GroupQuantity': groupQuantity,
        'SeasonType': seasonType,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashlineups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashplayerbiostatsGet operation.
     * @callback module:api/DefaultApi~leaguedashplayerbiostatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} leagueID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {module:api/DefaultApi~leaguedashplayerbiostatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashplayerbiostatsGet(perMode, leagueID, season, seasonType, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashplayerbiostatsGet");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leaguedashplayerbiostatsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashplayerbiostatsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashplayerbiostatsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'LeagueID': leagueID,
        'Season': season,
        'SeasonType': seasonType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashplayerbiostats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashplayerclutchGet operation.
     * @callback module:api/DefaultApi~leaguedashplayerclutchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clutchTime 
     * @param {String} aheadBehind 
     * @param {String} pointDiff 
     * @param {String} gameScope 
     * @param {String} playerExperience 
     * @param {String} playerPosition 
     * @param {String} starterBench 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~leaguedashplayerclutchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashplayerclutchGet(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'clutchTime' is set
      if (clutchTime === undefined || clutchTime === null) {
        throw new Error("Missing the required parameter 'clutchTime' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'aheadBehind' is set
      if (aheadBehind === undefined || aheadBehind === null) {
        throw new Error("Missing the required parameter 'aheadBehind' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'pointDiff' is set
      if (pointDiff === undefined || pointDiff === null) {
        throw new Error("Missing the required parameter 'pointDiff' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'playerExperience' is set
      if (playerExperience === undefined || playerExperience === null) {
        throw new Error("Missing the required parameter 'playerExperience' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'playerPosition' is set
      if (playerPosition === undefined || playerPosition === null) {
        throw new Error("Missing the required parameter 'playerPosition' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'starterBench' is set
      if (starterBench === undefined || starterBench === null) {
        throw new Error("Missing the required parameter 'starterBench' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashplayerclutchGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashplayerclutchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClutchTime': clutchTime,
        'AheadBehind': aheadBehind,
        'PointDiff': pointDiff,
        'GameScope': gameScope,
        'PlayerExperience': playerExperience,
        'PlayerPosition': playerPosition,
        'StarterBench': starterBench,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashplayerclutch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashplayerptshotGet operation.
     * @callback module:api/DefaultApi~leaguedashplayerptshotGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {module:api/DefaultApi~leaguedashplayerptshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashplayerptshotGet(leagueID, perMode, season, seasonType, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leaguedashplayerptshotGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashplayerptshotGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashplayerptshotGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashplayerptshotGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashplayerptshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashplayershotlocationsGet operation.
     * @callback module:api/DefaultApi~leaguedashplayershotlocationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {String} distanceRange 
     * @param {String} gameScope 
     * @param {String} playerExperience 
     * @param {String} playerPosition 
     * @param {String} starterBench 
     * @param {module:api/DefaultApi~leaguedashplayershotlocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashplayershotlocationsGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'distanceRange' is set
      if (distanceRange === undefined || distanceRange === null) {
        throw new Error("Missing the required parameter 'distanceRange' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'playerExperience' is set
      if (playerExperience === undefined || playerExperience === null) {
        throw new Error("Missing the required parameter 'playerExperience' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'playerPosition' is set
      if (playerPosition === undefined || playerPosition === null) {
        throw new Error("Missing the required parameter 'playerPosition' when calling leaguedashplayershotlocationsGet");
      }
      // verify the required parameter 'starterBench' is set
      if (starterBench === undefined || starterBench === null) {
        throw new Error("Missing the required parameter 'starterBench' when calling leaguedashplayershotlocationsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames,
        'DistanceRange': distanceRange,
        'GameScope': gameScope,
        'PlayerExperience': playerExperience,
        'PlayerPosition': playerPosition,
        'StarterBench': starterBench
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashplayershotlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashplayerstatsGet operation.
     * @callback module:api/DefaultApi~leaguedashplayerstatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameScope 
     * @param {String} playerExperience 
     * @param {String} playerPosition 
     * @param {String} starterBench 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~leaguedashplayerstatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashplayerstatsGet(gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'playerExperience' is set
      if (playerExperience === undefined || playerExperience === null) {
        throw new Error("Missing the required parameter 'playerExperience' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'playerPosition' is set
      if (playerPosition === undefined || playerPosition === null) {
        throw new Error("Missing the required parameter 'playerPosition' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'starterBench' is set
      if (starterBench === undefined || starterBench === null) {
        throw new Error("Missing the required parameter 'starterBench' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashplayerstatsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashplayerstatsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameScope': gameScope,
        'PlayerExperience': playerExperience,
        'PlayerPosition': playerPosition,
        'StarterBench': starterBench,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashplayerstats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashptdefendGet operation.
     * @callback module:api/DefaultApi~leaguedashptdefendGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} defenseCategory 
     * @param {module:api/DefaultApi~leaguedashptdefendGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashptdefendGet(leagueID, perMode, season, seasonType, defenseCategory, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leaguedashptdefendGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashptdefendGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashptdefendGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashptdefendGet");
      }
      // verify the required parameter 'defenseCategory' is set
      if (defenseCategory === undefined || defenseCategory === null) {
        throw new Error("Missing the required parameter 'defenseCategory' when calling leaguedashptdefendGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'DefenseCategory': defenseCategory
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashptdefend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashptteamdefendGet operation.
     * @callback module:api/DefaultApi~leaguedashptteamdefendGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} defenseCategory 
     * @param {module:api/DefaultApi~leaguedashptteamdefendGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashptteamdefendGet(leagueID, perMode, season, seasonType, defenseCategory, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leaguedashptteamdefendGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashptteamdefendGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashptteamdefendGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashptteamdefendGet");
      }
      // verify the required parameter 'defenseCategory' is set
      if (defenseCategory === undefined || defenseCategory === null) {
        throw new Error("Missing the required parameter 'defenseCategory' when calling leaguedashptteamdefendGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'DefenseCategory': defenseCategory
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashptteamdefend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashteamclutchGet operation.
     * @callback module:api/DefaultApi~leaguedashteamclutchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} clutchTime 
     * @param {String} aheadBehind 
     * @param {String} pointDiff 
     * @param {String} gameScope 
     * @param {String} playerExperience 
     * @param {String} playerPosition 
     * @param {String} starterBench 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~leaguedashteamclutchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashteamclutchGet(clutchTime, aheadBehind, pointDiff, gameScope, playerExperience, playerPosition, starterBench, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'clutchTime' is set
      if (clutchTime === undefined || clutchTime === null) {
        throw new Error("Missing the required parameter 'clutchTime' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'aheadBehind' is set
      if (aheadBehind === undefined || aheadBehind === null) {
        throw new Error("Missing the required parameter 'aheadBehind' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'pointDiff' is set
      if (pointDiff === undefined || pointDiff === null) {
        throw new Error("Missing the required parameter 'pointDiff' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'playerExperience' is set
      if (playerExperience === undefined || playerExperience === null) {
        throw new Error("Missing the required parameter 'playerExperience' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'playerPosition' is set
      if (playerPosition === undefined || playerPosition === null) {
        throw new Error("Missing the required parameter 'playerPosition' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'starterBench' is set
      if (starterBench === undefined || starterBench === null) {
        throw new Error("Missing the required parameter 'starterBench' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashteamclutchGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashteamclutchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'ClutchTime': clutchTime,
        'AheadBehind': aheadBehind,
        'PointDiff': pointDiff,
        'GameScope': gameScope,
        'PlayerExperience': playerExperience,
        'PlayerPosition': playerPosition,
        'StarterBench': starterBench,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashteamclutch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashteamptshotGet operation.
     * @callback module:api/DefaultApi~leaguedashteamptshotGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {module:api/DefaultApi~leaguedashteamptshotGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashteamptshotGet(leagueID, perMode, season, seasonType, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leaguedashteamptshotGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashteamptshotGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashteamptshotGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashteamptshotGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashteamptshot', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashteamshotlocationsGet operation.
     * @callback module:api/DefaultApi~leaguedashteamshotlocationsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {String} distanceRange 
     * @param {String} gameScope 
     * @param {String} playerExperience 
     * @param {String} playerPosition 
     * @param {String} starterBench 
     * @param {module:api/DefaultApi~leaguedashteamshotlocationsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashteamshotlocationsGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, distanceRange, gameScope, playerExperience, playerPosition, starterBench, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'distanceRange' is set
      if (distanceRange === undefined || distanceRange === null) {
        throw new Error("Missing the required parameter 'distanceRange' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'gameScope' is set
      if (gameScope === undefined || gameScope === null) {
        throw new Error("Missing the required parameter 'gameScope' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'playerExperience' is set
      if (playerExperience === undefined || playerExperience === null) {
        throw new Error("Missing the required parameter 'playerExperience' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'playerPosition' is set
      if (playerPosition === undefined || playerPosition === null) {
        throw new Error("Missing the required parameter 'playerPosition' when calling leaguedashteamshotlocationsGet");
      }
      // verify the required parameter 'starterBench' is set
      if (starterBench === undefined || starterBench === null) {
        throw new Error("Missing the required parameter 'starterBench' when calling leaguedashteamshotlocationsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames,
        'DistanceRange': distanceRange,
        'GameScope': gameScope,
        'PlayerExperience': playerExperience,
        'PlayerPosition': playerPosition,
        'StarterBench': starterBench
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashteamshotlocations', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leaguedashteamstatsGet operation.
     * @callback module:api/DefaultApi~leaguedashteamstatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~leaguedashteamstatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leaguedashteamstatsGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling leaguedashteamstatsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling leaguedashteamstatsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leaguedashteamstats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the leagueleadersGet operation.
     * @callback module:api/DefaultApi~leagueleadersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} scope 
     * @param {Object} opts Optional parameters
     * @param {String} [statCategory] 
     * @param {module:api/DefaultApi~leagueleadersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    leagueleadersGet(leagueID, perMode, season, seasonType, scope, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling leagueleadersGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling leagueleadersGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling leagueleadersGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling leagueleadersGet");
      }
      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling leagueleadersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'PerMode': perMode,
        'StatCategory': opts['statCategory'],
        'Season': season,
        'SeasonType': seasonType,
        'Scope': scope
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/leagueleaders', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playbyplayGet operation.
     * @callback module:api/DefaultApi~playbyplayGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {module:api/DefaultApi~playbyplayGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playbyplayGet(gameID, startPeriod, endPeriod, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling playbyplayGet");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling playbyplayGet");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling playbyplayGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playbyplay', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playbyplayv2Get operation.
     * @callback module:api/DefaultApi~playbyplayv2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameID 
     * @param {String} startPeriod 
     * @param {String} endPeriod 
     * @param {module:api/DefaultApi~playbyplayv2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playbyplayv2Get(gameID, startPeriod, endPeriod, callback) {
      let postBody = null;
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling playbyplayv2Get");
      }
      // verify the required parameter 'startPeriod' is set
      if (startPeriod === undefined || startPeriod === null) {
        throw new Error("Missing the required parameter 'startPeriod' when calling playbyplayv2Get");
      }
      // verify the required parameter 'endPeriod' is set
      if (endPeriod === undefined || endPeriod === null) {
        throw new Error("Missing the required parameter 'endPeriod' when calling playbyplayv2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameID': gameID,
        'StartPeriod': startPeriod,
        'EndPeriod': endPeriod
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playbyplayv2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playercareerstatsGet operation.
     * @callback module:api/DefaultApi~playercareerstatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} playerID 
     * @param {module:api/DefaultApi~playercareerstatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playercareerstatsGet(perMode, playerID, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playercareerstatsGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playercareerstatsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'PlayerID': playerID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playercareerstats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playercompareGet operation.
     * @callback module:api/DefaultApi~playercompareGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} playerIDList 
     * @param {String} vsPlayerIDList 
     * @param {String} seasonType 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playercompareGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playercompareGet(playerIDList, vsPlayerIDList, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'playerIDList' is set
      if (playerIDList === undefined || playerIDList === null) {
        throw new Error("Missing the required parameter 'playerIDList' when calling playercompareGet");
      }
      // verify the required parameter 'vsPlayerIDList' is set
      if (vsPlayerIDList === undefined || vsPlayerIDList === null) {
        throw new Error("Missing the required parameter 'vsPlayerIDList' when calling playercompareGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playercompareGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playercompareGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playercompareGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playercompareGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playercompareGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playercompareGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playercompareGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playercompareGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playercompareGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playercompareGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playercompareGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playercompareGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playercompareGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playercompareGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playercompareGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playercompareGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playercompareGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playercompareGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playercompareGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PlayerIDList': playerIDList,
        'VsPlayerIDList': vsPlayerIDList,
        'SeasonType': seasonType,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playercompare', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbyclutchGet operation.
     * @callback module:api/DefaultApi~playerdashboardbyclutchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbyclutchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbyclutchGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbyclutchGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbyclutchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbyclutch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbygamesplitsGet operation.
     * @callback module:api/DefaultApi~playerdashboardbygamesplitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbygamesplitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbygamesplitsGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbygamesplitsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbygamesplitsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbygamesplits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbygeneralsplitsGet operation.
     * @callback module:api/DefaultApi~playerdashboardbygeneralsplitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbygeneralsplitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbygeneralsplitsGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbygeneralsplitsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbygeneralsplits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbylastngamesGet operation.
     * @callback module:api/DefaultApi~playerdashboardbylastngamesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbylastngamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbylastngamesGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbylastngamesGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbylastngamesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbylastngames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbyopponentGet operation.
     * @callback module:api/DefaultApi~playerdashboardbyopponentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbyopponentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbyopponentGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbyopponentGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbyopponentGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbyopponent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbyshootingsplitsGet operation.
     * @callback module:api/DefaultApi~playerdashboardbyshootingsplitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbyshootingsplitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbyshootingsplitsGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbyshootingsplitsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbyshootingsplits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbyteamperformanceGet operation.
     * @callback module:api/DefaultApi~playerdashboardbyteamperformanceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbyteamperformanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbyteamperformanceGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbyteamperformanceGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbyteamperformance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashboardbyyearoveryearGet operation.
     * @callback module:api/DefaultApi~playerdashboardbyyearoveryearGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashboardbyyearoveryearGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashboardbyyearoveryearGet(measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, playerID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashboardbyyearoveryearGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashboardbyyearoveryear', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashptpassGet operation.
     * @callback module:api/DefaultApi~playerdashptpassGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashptpassGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashptpassGet(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashptpassGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashptpassGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashptpassGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashptpassGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling playerdashptpassGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashptpassGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashptpassGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashptpassGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashptpassGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashptpassGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashptpassGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashptpassGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashptpassGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashptpassGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashptpassGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashptpass', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashptrebGet operation.
     * @callback module:api/DefaultApi~playerdashptrebGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashptrebGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashptrebGet(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashptrebGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashptrebGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashptrebGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashptrebGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling playerdashptrebGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashptrebGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashptrebGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashptrebGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashptrebGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashptrebGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashptrebGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashptrebGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashptrebGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashptrebGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashptrebGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashptrebGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashptrebGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashptreb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashptreboundlogsGet operation.
     * @callback module:api/DefaultApi~playerdashptreboundlogsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [season] 
     * @param {String} [seasonType] 
     * @param {String} [playerID] 
     * @param {String} [teamID] 
     * @param {String} [outcome] 
     * @param {String} [location] 
     * @param {String} [month] 
     * @param {String} [seasonSegment] 
     * @param {String} [dateFrom] 
     * @param {String} [dateTo] 
     * @param {String} [opponentTeamID] 
     * @param {String} [vsConference] 
     * @param {String} [vsDivision] 
     * @param {String} [gameSegment] 
     * @param {String} [period] 
     * @param {String} [lastNGames] 
     * @param {module:api/DefaultApi~playerdashptreboundlogsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashptreboundlogsGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'Season': opts['season'],
        'SeasonType': opts['seasonType'],
        'PlayerID': opts['playerID'],
        'TeamID': opts['teamID'],
        'Outcome': opts['outcome'],
        'Location': opts['location'],
        'Month': opts['month'],
        'SeasonSegment': opts['seasonSegment'],
        'DateFrom': opts['dateFrom'],
        'DateTo': opts['dateTo'],
        'OpponentTeamID': opts['opponentTeamID'],
        'VsConference': opts['vsConference'],
        'VsDivision': opts['vsDivision'],
        'GameSegment': opts['gameSegment'],
        'Period': opts['period'],
        'LastNGames': opts['lastNGames']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashptreboundlogs', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashptshotdefendGet operation.
     * @callback module:api/DefaultApi~playerdashptshotdefendGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashptshotdefendGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashptshotdefendGet(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashptshotdefendGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashptshotdefendGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashptshotdefend', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashptshotlogGet operation.
     * @callback module:api/DefaultApi~playerdashptshotlogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {Object} opts Optional parameters
     * @param {String} [leagueID] 
     * @param {String} [season] 
     * @param {String} [seasonType] 
     * @param {String} [playerID] 
     * @param {String} [teamID] 
     * @param {module:api/DefaultApi~playerdashptshotlogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashptshotlogGet(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': opts['leagueID'],
        'Season': opts['season'],
        'SeasonType': opts['seasonType'],
        'PlayerID': opts['playerID'],
        'TeamID': opts['teamID']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashptshotlog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerdashptshotsGet operation.
     * @callback module:api/DefaultApi~playerdashptshotsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} playerID 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playerdashptshotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerdashptshotsGet(perMode, season, seasonType, playerID, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playerdashptshotsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playerdashptshotsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'PlayerID': playerID,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerdashptshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playergamelogGet operation.
     * @callback module:api/DefaultApi~playergamelogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} playerID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {module:api/DefaultApi~playergamelogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playergamelogGet(playerID, season, seasonType, callback) {
      let postBody = null;
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playergamelogGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playergamelogGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playergamelogGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PlayerID': playerID,
        'Season': season,
        'SeasonType': seasonType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playergamelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerprofileGet operation.
     * @callback module:api/DefaultApi~playerprofileGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} playerID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} graphStartSeason 
     * @param {String} graphEndSeason 
     * @param {String} graphStat 
     * @param {module:api/DefaultApi~playerprofileGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerprofileGet(leagueID, playerID, season, seasonType, graphStartSeason, graphEndSeason, graphStat, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling playerprofileGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerprofileGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playerprofileGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playerprofileGet");
      }
      // verify the required parameter 'graphStartSeason' is set
      if (graphStartSeason === undefined || graphStartSeason === null) {
        throw new Error("Missing the required parameter 'graphStartSeason' when calling playerprofileGet");
      }
      // verify the required parameter 'graphEndSeason' is set
      if (graphEndSeason === undefined || graphEndSeason === null) {
        throw new Error("Missing the required parameter 'graphEndSeason' when calling playerprofileGet");
      }
      // verify the required parameter 'graphStat' is set
      if (graphStat === undefined || graphStat === null) {
        throw new Error("Missing the required parameter 'graphStat' when calling playerprofileGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'PlayerID': playerID,
        'Season': season,
        'SeasonType': seasonType,
        'GraphStartSeason': graphStartSeason,
        'GraphEndSeason': graphEndSeason,
        'GraphStat': graphStat
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerprofile', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playerprofilev2Get operation.
     * @callback module:api/DefaultApi~playerprofilev2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} playerID 
     * @param {module:api/DefaultApi~playerprofilev2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playerprofilev2Get(perMode, playerID, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playerprofilev2Get");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playerprofilev2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'PlayerID': playerID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playerprofilev2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playersvsplayersGet operation.
     * @callback module:api/DefaultApi~playersvsplayersGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} playerTeamID 
     * @param {String} playerID1 
     * @param {String} playerID2 
     * @param {String} playerID3 
     * @param {String} playerID4 
     * @param {String} playerID5 
     * @param {String} vsTeamID 
     * @param {String} vsPlayerID1 
     * @param {String} vsPlayerID2 
     * @param {String} vsPlayerID3 
     * @param {String} vsPlayerID4 
     * @param {String} vsPlayerID5 
     * @param {String} seasonType 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playersvsplayersGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playersvsplayersGet(playerTeamID, playerID1, playerID2, playerID3, playerID4, playerID5, vsTeamID, vsPlayerID1, vsPlayerID2, vsPlayerID3, vsPlayerID4, vsPlayerID5, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'playerTeamID' is set
      if (playerTeamID === undefined || playerTeamID === null) {
        throw new Error("Missing the required parameter 'playerTeamID' when calling playersvsplayersGet");
      }
      // verify the required parameter 'playerID1' is set
      if (playerID1 === undefined || playerID1 === null) {
        throw new Error("Missing the required parameter 'playerID1' when calling playersvsplayersGet");
      }
      // verify the required parameter 'playerID2' is set
      if (playerID2 === undefined || playerID2 === null) {
        throw new Error("Missing the required parameter 'playerID2' when calling playersvsplayersGet");
      }
      // verify the required parameter 'playerID3' is set
      if (playerID3 === undefined || playerID3 === null) {
        throw new Error("Missing the required parameter 'playerID3' when calling playersvsplayersGet");
      }
      // verify the required parameter 'playerID4' is set
      if (playerID4 === undefined || playerID4 === null) {
        throw new Error("Missing the required parameter 'playerID4' when calling playersvsplayersGet");
      }
      // verify the required parameter 'playerID5' is set
      if (playerID5 === undefined || playerID5 === null) {
        throw new Error("Missing the required parameter 'playerID5' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsTeamID' is set
      if (vsTeamID === undefined || vsTeamID === null) {
        throw new Error("Missing the required parameter 'vsTeamID' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsPlayerID1' is set
      if (vsPlayerID1 === undefined || vsPlayerID1 === null) {
        throw new Error("Missing the required parameter 'vsPlayerID1' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsPlayerID2' is set
      if (vsPlayerID2 === undefined || vsPlayerID2 === null) {
        throw new Error("Missing the required parameter 'vsPlayerID2' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsPlayerID3' is set
      if (vsPlayerID3 === undefined || vsPlayerID3 === null) {
        throw new Error("Missing the required parameter 'vsPlayerID3' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsPlayerID4' is set
      if (vsPlayerID4 === undefined || vsPlayerID4 === null) {
        throw new Error("Missing the required parameter 'vsPlayerID4' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsPlayerID5' is set
      if (vsPlayerID5 === undefined || vsPlayerID5 === null) {
        throw new Error("Missing the required parameter 'vsPlayerID5' when calling playersvsplayersGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playersvsplayersGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playersvsplayersGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playersvsplayersGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playersvsplayersGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playersvsplayersGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playersvsplayersGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playersvsplayersGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playersvsplayersGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playersvsplayersGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playersvsplayersGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playersvsplayersGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playersvsplayersGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playersvsplayersGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playersvsplayersGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playersvsplayersGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playersvsplayersGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playersvsplayersGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playersvsplayersGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PlayerTeamID': playerTeamID,
        'PlayerID1': playerID1,
        'PlayerID2': playerID2,
        'PlayerID3': playerID3,
        'PlayerID4': playerID4,
        'PlayerID5': playerID5,
        'VsTeamID': vsTeamID,
        'VsPlayerID1': vsPlayerID1,
        'VsPlayerID2': vsPlayerID2,
        'VsPlayerID3': vsPlayerID3,
        'VsPlayerID4': vsPlayerID4,
        'VsPlayerID5': vsPlayerID5,
        'SeasonType': seasonType,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playersvsplayers', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playervsplayerGet operation.
     * @callback module:api/DefaultApi~playervsplayerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} playerID 
     * @param {String} vsPlayerID 
     * @param {String} seasonType 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~playervsplayerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playervsplayerGet(playerID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling playervsplayerGet");
      }
      // verify the required parameter 'vsPlayerID' is set
      if (vsPlayerID === undefined || vsPlayerID === null) {
        throw new Error("Missing the required parameter 'vsPlayerID' when calling playervsplayerGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling playervsplayerGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling playervsplayerGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling playervsplayerGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling playervsplayerGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling playervsplayerGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling playervsplayerGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling playervsplayerGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling playervsplayerGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling playervsplayerGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling playervsplayerGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling playervsplayerGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling playervsplayerGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling playervsplayerGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling playervsplayerGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling playervsplayerGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling playervsplayerGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling playervsplayerGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling playervsplayerGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling playervsplayerGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PlayerID': playerID,
        'VsPlayerID': vsPlayerID,
        'SeasonType': seasonType,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playervsplayer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the playoffpictureGet operation.
     * @callback module:api/DefaultApi~playoffpictureGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonID 
     * @param {module:api/DefaultApi~playoffpictureGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    playoffpictureGet(leagueID, seasonID, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling playoffpictureGet");
      }
      // verify the required parameter 'seasonID' is set
      if (seasonID === undefined || seasonID === null) {
        throw new Error("Missing the required parameter 'seasonID' when calling playoffpictureGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonID': seasonID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/playoffpicture', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoreboardGet operation.
     * @callback module:api/DefaultApi~scoreboardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameDate 
     * @param {String} leagueID 
     * @param {String} dayOffset 
     * @param {module:api/DefaultApi~scoreboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scoreboardGet(gameDate, leagueID, dayOffset, callback) {
      let postBody = null;
      // verify the required parameter 'gameDate' is set
      if (gameDate === undefined || gameDate === null) {
        throw new Error("Missing the required parameter 'gameDate' when calling scoreboardGet");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling scoreboardGet");
      }
      // verify the required parameter 'dayOffset' is set
      if (dayOffset === undefined || dayOffset === null) {
        throw new Error("Missing the required parameter 'dayOffset' when calling scoreboardGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameDate': gameDate,
        'LeagueID': leagueID,
        'DayOffset': dayOffset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scoreboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the scoreboardV2Get operation.
     * @callback module:api/DefaultApi~scoreboardV2GetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} gameDate 
     * @param {String} leagueID 
     * @param {String} dayOffset 
     * @param {module:api/DefaultApi~scoreboardV2GetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    scoreboardV2Get(gameDate, leagueID, dayOffset, callback) {
      let postBody = null;
      // verify the required parameter 'gameDate' is set
      if (gameDate === undefined || gameDate === null) {
        throw new Error("Missing the required parameter 'gameDate' when calling scoreboardV2Get");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling scoreboardV2Get");
      }
      // verify the required parameter 'dayOffset' is set
      if (dayOffset === undefined || dayOffset === null) {
        throw new Error("Missing the required parameter 'dayOffset' when calling scoreboardV2Get");
      }

      let pathParams = {
      };
      let queryParams = {
        'GameDate': gameDate,
        'LeagueID': leagueID,
        'DayOffset': dayOffset
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/scoreboardV2', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shotchartdetailGet operation.
     * @callback module:api/DefaultApi~shotchartdetailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} playerID 
     * @param {String} gameID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} position 
     * @param {String} rookieYear 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {String} contextMeasure 
     * @param {module:api/DefaultApi~shotchartdetailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shotchartdetailGet(seasonType, teamID, playerID, gameID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, position, rookieYear, gameSegment, period, lastNGames, contextMeasure, callback) {
      let postBody = null;
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling shotchartdetailGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling shotchartdetailGet");
      }
      // verify the required parameter 'playerID' is set
      if (playerID === undefined || playerID === null) {
        throw new Error("Missing the required parameter 'playerID' when calling shotchartdetailGet");
      }
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling shotchartdetailGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling shotchartdetailGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling shotchartdetailGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling shotchartdetailGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling shotchartdetailGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling shotchartdetailGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling shotchartdetailGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling shotchartdetailGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling shotchartdetailGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling shotchartdetailGet");
      }
      // verify the required parameter 'position' is set
      if (position === undefined || position === null) {
        throw new Error("Missing the required parameter 'position' when calling shotchartdetailGet");
      }
      // verify the required parameter 'rookieYear' is set
      if (rookieYear === undefined || rookieYear === null) {
        throw new Error("Missing the required parameter 'rookieYear' when calling shotchartdetailGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling shotchartdetailGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling shotchartdetailGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling shotchartdetailGet");
      }
      // verify the required parameter 'contextMeasure' is set
      if (contextMeasure === undefined || contextMeasure === null) {
        throw new Error("Missing the required parameter 'contextMeasure' when calling shotchartdetailGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'SeasonType': seasonType,
        'TeamID': teamID,
        'PlayerID': playerID,
        'GameID': gameID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'Position': position,
        'RookieYear': rookieYear,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames,
        'ContextMeasure': contextMeasure
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shotchartdetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the shotchartlineupdetailGet operation.
     * @callback module:api/DefaultApi~shotchartlineupdetailGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {String} gameID 
     * @param {String} GROUP_ID 
     * @param {String} contextMeasure 
     * @param {String} contextFilter 
     * @param {module:api/DefaultApi~shotchartlineupdetailGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    shotchartlineupdetailGet(leagueID, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, gameID, GROUP_ID, contextMeasure, contextFilter, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'GROUP_ID' is set
      if (GROUP_ID === undefined || GROUP_ID === null) {
        throw new Error("Missing the required parameter 'GROUP_ID' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'contextMeasure' is set
      if (contextMeasure === undefined || contextMeasure === null) {
        throw new Error("Missing the required parameter 'contextMeasure' when calling shotchartlineupdetailGet");
      }
      // verify the required parameter 'contextFilter' is set
      if (contextFilter === undefined || contextFilter === null) {
        throw new Error("Missing the required parameter 'contextFilter' when calling shotchartlineupdetailGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'Season': season,
        'SeasonType': seasonType,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames,
        'GameID': gameID,
        'GROUP_ID': GROUP_ID,
        'ContextMeasure': contextMeasure,
        'ContextFilter': contextFilter
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/shotchartlineupdetail', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbyclutchGet operation.
     * @callback module:api/DefaultApi~teamdashboardbyclutchGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbyclutchGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbyclutchGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbyclutchGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbyclutchGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbyclutch', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbygamesplitsGet operation.
     * @callback module:api/DefaultApi~teamdashboardbygamesplitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbygamesplitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbygamesplitsGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbygamesplitsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbygamesplitsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbygamesplits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbygeneralsplitsGet operation.
     * @callback module:api/DefaultApi~teamdashboardbygeneralsplitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbygeneralsplitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbygeneralsplitsGet(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbygeneralsplitsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbygeneralsplitsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'SeasonType': seasonType,
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbygeneralsplits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbylastngamesGet operation.
     * @callback module:api/DefaultApi~teamdashboardbylastngamesGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbylastngamesGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbylastngamesGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbylastngamesGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbylastngamesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbylastngames', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbyopponentGet operation.
     * @callback module:api/DefaultApi~teamdashboardbyopponentGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbyopponentGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbyopponentGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbyopponentGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbyopponentGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbyopponent', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbyshootingsplitsGet operation.
     * @callback module:api/DefaultApi~teamdashboardbyshootingsplitsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbyshootingsplitsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbyshootingsplitsGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbyshootingsplitsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbyshootingsplitsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbyshootingsplits', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbyteamperformanceGet operation.
     * @callback module:api/DefaultApi~teamdashboardbyteamperformanceGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbyteamperformanceGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbyteamperformanceGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbyteamperformanceGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbyteamperformanceGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbyteamperformance', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashboardbyyearoveryearGet operation.
     * @callback module:api/DefaultApi~teamdashboardbyyearoveryearGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashboardbyyearoveryearGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashboardbyyearoveryearGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashboardbyyearoveryearGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashboardbyyearoveryearGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashboardbyyearoveryear', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashlineupsGet operation.
     * @callback module:api/DefaultApi~teamdashlineupsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} groupQuantity 
     * @param {String} gameID 
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashlineupsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashlineupsGet(groupQuantity, gameID, seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'groupQuantity' is set
      if (groupQuantity === undefined || groupQuantity === null) {
        throw new Error("Missing the required parameter 'groupQuantity' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'gameID' is set
      if (gameID === undefined || gameID === null) {
        throw new Error("Missing the required parameter 'gameID' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashlineupsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashlineupsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'GroupQuantity': groupQuantity,
        'GameID': gameID,
        'SeasonType': seasonType,
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashlineups', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashptpassGet operation.
     * @callback module:api/DefaultApi~teamdashptpassGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashptpassGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashptpassGet(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashptpassGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashptpassGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashptpassGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashptpassGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashptpassGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashptpassGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashptpassGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashptpassGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashptpassGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashptpassGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashptpassGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashptpassGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashptpassGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashptpassGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashptpass', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashptrebGet operation.
     * @callback module:api/DefaultApi~teamdashptrebGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashptrebGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashptrebGet(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashptrebGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashptrebGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashptrebGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashptrebGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashptrebGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashptrebGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashptrebGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashptrebGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashptrebGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashptrebGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashptrebGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashptrebGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashptrebGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashptrebGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashptrebGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashptrebGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashptreb', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamdashptshotsGet operation.
     * @callback module:api/DefaultApi~teamdashptshotsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} perMode 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamdashptshotsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamdashptshotsGet(perMode, season, seasonType, teamID, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamdashptshotsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamdashptshotsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'PerMode': perMode,
        'Season': season,
        'SeasonType': seasonType,
        'TeamID': teamID,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamdashptshots', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamgamelogGet operation.
     * @callback module:api/DefaultApi~teamgamelogGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {module:api/DefaultApi~teamgamelogGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamgamelogGet(teamID, season, seasonType, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamgamelogGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamgamelogGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamgamelogGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'Season': season,
        'SeasonType': seasonType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamgamelog', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teaminfocommonGet operation.
     * @callback module:api/DefaultApi~teaminfocommonGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} season 
     * @param {String} teamID 
     * @param {String} leagueID 
     * @param {String} seasonType 
     * @param {module:api/DefaultApi~teaminfocommonGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teaminfocommonGet(season, teamID, leagueID, seasonType, callback) {
      let postBody = null;
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teaminfocommonGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teaminfocommonGet");
      }
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling teaminfocommonGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teaminfocommonGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'Season': season,
        'TeamID': teamID,
        'LeagueID': leagueID,
        'SeasonType': seasonType
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teaminfocommon', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamplayerdashboardGet operation.
     * @callback module:api/DefaultApi~teamplayerdashboardGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} seasonType 
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamplayerdashboardGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamplayerdashboardGet(seasonType, teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamplayerdashboardGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamplayerdashboardGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'SeasonType': seasonType,
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamplayerdashboard', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamplayeronoffdetailsGet operation.
     * @callback module:api/DefaultApi~teamplayeronoffdetailsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamplayeronoffdetailsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamplayeronoffdetailsGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamplayeronoffdetailsGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamplayeronoffdetailsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamplayeronoffdetails', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamplayeronoffsummaryGet operation.
     * @callback module:api/DefaultApi~teamplayeronoffsummaryGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} seasonType 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamplayeronoffsummaryGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamplayeronoffsummaryGet(teamID, measureType, perMode, plusMinus, paceAdjust, rank, season, seasonType, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamplayeronoffsummaryGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamplayeronoffsummaryGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'SeasonType': seasonType,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamplayeronoffsummary', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamvsplayerGet operation.
     * @callback module:api/DefaultApi~teamvsplayerGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} teamID 
     * @param {String} vsPlayerID 
     * @param {String} seasonType 
     * @param {String} measureType 
     * @param {String} perMode 
     * @param {String} plusMinus 
     * @param {String} paceAdjust 
     * @param {String} rank 
     * @param {String} season 
     * @param {String} outcome 
     * @param {String} location 
     * @param {String} month 
     * @param {String} seasonSegment 
     * @param {String} dateFrom 
     * @param {String} dateTo 
     * @param {String} opponentTeamID 
     * @param {String} vsConference 
     * @param {String} vsDivision 
     * @param {String} gameSegment 
     * @param {String} period 
     * @param {String} lastNGames 
     * @param {module:api/DefaultApi~teamvsplayerGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamvsplayerGet(teamID, vsPlayerID, seasonType, measureType, perMode, plusMinus, paceAdjust, rank, season, outcome, location, month, seasonSegment, dateFrom, dateTo, opponentTeamID, vsConference, vsDivision, gameSegment, period, lastNGames, callback) {
      let postBody = null;
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamvsplayerGet");
      }
      // verify the required parameter 'vsPlayerID' is set
      if (vsPlayerID === undefined || vsPlayerID === null) {
        throw new Error("Missing the required parameter 'vsPlayerID' when calling teamvsplayerGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamvsplayerGet");
      }
      // verify the required parameter 'measureType' is set
      if (measureType === undefined || measureType === null) {
        throw new Error("Missing the required parameter 'measureType' when calling teamvsplayerGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamvsplayerGet");
      }
      // verify the required parameter 'plusMinus' is set
      if (plusMinus === undefined || plusMinus === null) {
        throw new Error("Missing the required parameter 'plusMinus' when calling teamvsplayerGet");
      }
      // verify the required parameter 'paceAdjust' is set
      if (paceAdjust === undefined || paceAdjust === null) {
        throw new Error("Missing the required parameter 'paceAdjust' when calling teamvsplayerGet");
      }
      // verify the required parameter 'rank' is set
      if (rank === undefined || rank === null) {
        throw new Error("Missing the required parameter 'rank' when calling teamvsplayerGet");
      }
      // verify the required parameter 'season' is set
      if (season === undefined || season === null) {
        throw new Error("Missing the required parameter 'season' when calling teamvsplayerGet");
      }
      // verify the required parameter 'outcome' is set
      if (outcome === undefined || outcome === null) {
        throw new Error("Missing the required parameter 'outcome' when calling teamvsplayerGet");
      }
      // verify the required parameter 'location' is set
      if (location === undefined || location === null) {
        throw new Error("Missing the required parameter 'location' when calling teamvsplayerGet");
      }
      // verify the required parameter 'month' is set
      if (month === undefined || month === null) {
        throw new Error("Missing the required parameter 'month' when calling teamvsplayerGet");
      }
      // verify the required parameter 'seasonSegment' is set
      if (seasonSegment === undefined || seasonSegment === null) {
        throw new Error("Missing the required parameter 'seasonSegment' when calling teamvsplayerGet");
      }
      // verify the required parameter 'dateFrom' is set
      if (dateFrom === undefined || dateFrom === null) {
        throw new Error("Missing the required parameter 'dateFrom' when calling teamvsplayerGet");
      }
      // verify the required parameter 'dateTo' is set
      if (dateTo === undefined || dateTo === null) {
        throw new Error("Missing the required parameter 'dateTo' when calling teamvsplayerGet");
      }
      // verify the required parameter 'opponentTeamID' is set
      if (opponentTeamID === undefined || opponentTeamID === null) {
        throw new Error("Missing the required parameter 'opponentTeamID' when calling teamvsplayerGet");
      }
      // verify the required parameter 'vsConference' is set
      if (vsConference === undefined || vsConference === null) {
        throw new Error("Missing the required parameter 'vsConference' when calling teamvsplayerGet");
      }
      // verify the required parameter 'vsDivision' is set
      if (vsDivision === undefined || vsDivision === null) {
        throw new Error("Missing the required parameter 'vsDivision' when calling teamvsplayerGet");
      }
      // verify the required parameter 'gameSegment' is set
      if (gameSegment === undefined || gameSegment === null) {
        throw new Error("Missing the required parameter 'gameSegment' when calling teamvsplayerGet");
      }
      // verify the required parameter 'period' is set
      if (period === undefined || period === null) {
        throw new Error("Missing the required parameter 'period' when calling teamvsplayerGet");
      }
      // verify the required parameter 'lastNGames' is set
      if (lastNGames === undefined || lastNGames === null) {
        throw new Error("Missing the required parameter 'lastNGames' when calling teamvsplayerGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'TeamID': teamID,
        'VsPlayerID': vsPlayerID,
        'SeasonType': seasonType,
        'MeasureType': measureType,
        'PerMode': perMode,
        'PlusMinus': plusMinus,
        'PaceAdjust': paceAdjust,
        'Rank': rank,
        'Season': season,
        'Outcome': outcome,
        'Location': location,
        'Month': month,
        'SeasonSegment': seasonSegment,
        'DateFrom': dateFrom,
        'DateTo': dateTo,
        'OpponentTeamID': opponentTeamID,
        'VsConference': vsConference,
        'VsDivision': vsDivision,
        'GameSegment': gameSegment,
        'Period': period,
        'LastNGames': lastNGames
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamvsplayer', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the teamyearbyyearstatsGet operation.
     * @callback module:api/DefaultApi~teamyearbyyearstatsGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} seasonType 
     * @param {String} perMode 
     * @param {String} teamID 
     * @param {module:api/DefaultApi~teamyearbyyearstatsGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    teamyearbyyearstatsGet(leagueID, seasonType, perMode, teamID, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling teamyearbyyearstatsGet");
      }
      // verify the required parameter 'seasonType' is set
      if (seasonType === undefined || seasonType === null) {
        throw new Error("Missing the required parameter 'seasonType' when calling teamyearbyyearstatsGet");
      }
      // verify the required parameter 'perMode' is set
      if (perMode === undefined || perMode === null) {
        throw new Error("Missing the required parameter 'perMode' when calling teamyearbyyearstatsGet");
      }
      // verify the required parameter 'teamID' is set
      if (teamID === undefined || teamID === null) {
        throw new Error("Missing the required parameter 'teamID' when calling teamyearbyyearstatsGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'SeasonType': seasonType,
        'PerMode': perMode,
        'TeamID': teamID
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/teamyearbyyearstats', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the videoStatusGet operation.
     * @callback module:api/DefaultApi~videoStatusGetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * @param {String} leagueID 
     * @param {String} gameDate 
     * @param {module:api/DefaultApi~videoStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    videoStatusGet(leagueID, gameDate, callback) {
      let postBody = null;
      // verify the required parameter 'leagueID' is set
      if (leagueID === undefined || leagueID === null) {
        throw new Error("Missing the required parameter 'leagueID' when calling videoStatusGet");
      }
      // verify the required parameter 'gameDate' is set
      if (gameDate === undefined || gameDate === null) {
        throw new Error("Missing the required parameter 'gameDate' when calling videoStatusGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'LeagueID': leagueID,
        'GameDate': gameDate
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/videoStatus', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
