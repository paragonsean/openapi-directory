/**
 * NBA Stats API
 * The destination for current and historic NBA statistics.
 *
 * The version of the OpenAPI document: version
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

#ifndef OAI_OAIDefaultApi_H
#define OAI_OAIDefaultApi_H

#include "OAIHelpers.h"
#include "OAIHttpRequest.h"
#include "OAIServerConfiguration.h"
#include "OAIOauth.h"

#include <QString>

#include <QObject>
#include <QByteArray>
#include <QStringList>
#include <QList>
#include <QNetworkAccessManager>

namespace OpenAPI {

class OAIDefaultApi : public QObject {
    Q_OBJECT

public:
    OAIDefaultApi(const int timeOut = 0);
    ~OAIDefaultApi();

    void initializeServerConfigs();
    int setDefaultServerValue(int serverIndex,const QString &operation, const QString &variable,const QString &val);
    void setServerIndex(const QString &operation, int serverIndex);
    void setApiKey(const QString &apiKeyName, const QString &apiKey);
    void setBearerToken(const QString &token);
    void setUsername(const QString &username);
    void setPassword(const QString &password);
    void setTimeOut(const int timeOut);
    void setWorkingDirectory(const QString &path);
    void setNetworkAccessManager(QNetworkAccessManager* manager);
    int addServerConfiguration(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables = QMap<QString, OAIServerVariable>());
    void setNewServerForAllOperations(const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void setNewServer(const QString &operation, const QUrl &url, const QString &description = "", const QMap<QString, OAIServerVariable> &variables =  QMap<QString, OAIServerVariable>());
    void addHeaders(const QString &key, const QString &value);
    void enableRequestCompression();
    void enableResponseCompression();
    void abortRequests();
    QString getParamStylePrefix(const QString &style);
    QString getParamStyleSuffix(const QString &style);
    QString getParamStyleDelimiter(const QString &style, const QString &name, bool isExplode);

    /**
    * @param[in]  west_player1 QString [required]
    * @param[in]  west_player2 QString [required]
    * @param[in]  west_player3 QString [required]
    * @param[in]  west_player4 QString [required]
    * @param[in]  west_player5 QString [required]
    * @param[in]  east_player1 QString [required]
    * @param[in]  east_player2 QString [required]
    * @param[in]  east_player3 QString [required]
    * @param[in]  east_player4 QString [required]
    * @param[in]  east_player5 QString [required]
    * @param[in]  point_cap QString [optional]
    */
    virtual void allstarballotpredictorGet(const QString &west_player1, const QString &west_player2, const QString &west_player3, const QString &west_player4, const QString &west_player5, const QString &east_player1, const QString &east_player2, const QString &east_player3, const QString &east_player4, const QString &east_player5, const ::OpenAPI::OptionalParam<QString> &point_cap = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  start_period QString [optional]
    * @param[in]  end_period QString [optional]
    * @param[in]  start_range QString [optional]
    * @param[in]  end_range QString [optional]
    * @param[in]  range_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void boxscoreGet(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  start_period QString [optional]
    * @param[in]  end_period QString [optional]
    * @param[in]  start_range QString [optional]
    * @param[in]  end_range QString [optional]
    * @param[in]  range_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void boxscoreadvancedGet(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    * @param[in]  start_range QString [required]
    * @param[in]  end_range QString [required]
    * @param[in]  range_type QString [required]
    */
    virtual void boxscoreadvancedv2Get(const QString &game_id, const QString &start_period, const QString &end_period, const QString &start_range, const QString &end_range, const QString &range_type);

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  start_period QString [optional]
    * @param[in]  end_period QString [optional]
    * @param[in]  start_range QString [optional]
    * @param[in]  end_range QString [optional]
    * @param[in]  range_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void boxscorefourfactorsGet(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    * @param[in]  start_range QString [required]
    * @param[in]  end_range QString [required]
    * @param[in]  range_type QString [required]
    */
    virtual void boxscorefourfactorsv2Get(const QString &game_id, const QString &start_period, const QString &end_period, const QString &start_range, const QString &end_range, const QString &range_type);

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  start_period QString [optional]
    * @param[in]  end_period QString [optional]
    * @param[in]  start_range QString [optional]
    * @param[in]  end_range QString [optional]
    * @param[in]  range_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void boxscoremiscGet(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    * @param[in]  start_range QString [required]
    * @param[in]  end_range QString [required]
    * @param[in]  range_type QString [required]
    */
    virtual void boxscoremiscv2Get(const QString &game_id, const QString &start_period, const QString &end_period, const QString &start_range, const QString &end_range, const QString &range_type);

    /**
    * @param[in]  game_id QString [required]
    */
    virtual void boxscoreplayertrackv2Get(const QString &game_id);

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  start_period QString [optional]
    * @param[in]  end_period QString [optional]
    * @param[in]  start_range QString [optional]
    * @param[in]  end_range QString [optional]
    * @param[in]  range_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void boxscorescoringGet(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    * @param[in]  start_range QString [required]
    * @param[in]  end_range QString [required]
    * @param[in]  range_type QString [required]
    */
    virtual void boxscorescoringv2Get(const QString &game_id, const QString &start_period, const QString &end_period, const QString &start_range, const QString &end_range, const QString &range_type);

    /**
    * @param[in]  game_id QString [required]
    */
    virtual void boxscoresummaryv2Get(const QString &game_id);

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    * @param[in]  start_range QString [required]
    * @param[in]  end_range QString [required]
    * @param[in]  range_type QString [required]
    */
    virtual void boxscoretraditionalv2Get(const QString &game_id, const QString &start_period, const QString &end_period, const QString &start_range, const QString &end_range, const QString &range_type);

    /**
    * @param[in]  game_id QString [optional]
    * @param[in]  start_period QString [optional]
    * @param[in]  end_period QString [optional]
    * @param[in]  start_range QString [optional]
    * @param[in]  end_range QString [optional]
    * @param[in]  range_type QString [optional]
    */
    Q_DECL_DEPRECATED virtual void boxscoreusageGet(const ::OpenAPI::OptionalParam<QString> &game_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &start_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &end_range = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &range_type = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    * @param[in]  start_range QString [required]
    * @param[in]  end_range QString [required]
    * @param[in]  range_type QString [required]
    */
    virtual void boxscoreusagev2Get(const QString &game_id, const QString &start_period, const QString &end_period, const QString &start_range, const QString &end_range, const QString &range_type);

    /**
    * @param[in]  league_id QString [required]
    */
    virtual void commonTeamYearsGet(const QString &league_id);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  is_only_current_season QString [required]
    */
    virtual void commonallplayersGet(const QString &league_id, const QString &season, const QString &is_only_current_season);

    /**
    * @param[in]  player_id QString [required]
    */
    virtual void commonplayerinfoGet(const QString &player_id);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    */
    virtual void commonplayoffseriesGet(const QString &league_id, const QString &season);

    /**
    * @param[in]  season QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void commonteamrosterGet(const QString &season, const QString &team_id);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_year QString [required]
    */
    virtual void draftcombinedrillresultsGet(const QString &league_id, const QString &season_year);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_year QString [required]
    */
    virtual void draftcombinenonstationaryshootingGet(const QString &league_id, const QString &season_year);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_year QString [required]
    */
    virtual void draftcombineplayeranthroGet(const QString &league_id, const QString &season_year);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_year QString [required]
    */
    virtual void draftcombinespotshootingGet(const QString &league_id, const QString &season_year);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_year QString [required]
    */
    virtual void draftcombinestatsGet(const QString &league_id, const QString &season_year);

    /**
    * @param[in]  league_id QString [required]
    */
    virtual void drafthistoryGet(const QString &league_id);

    /**
    * @param[in]  league_id QString [required]
    */
    virtual void franchisehistoryGet(const QString &league_id);

    /**
    * @param[in]  stat_category QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_or_team QString [required]
    * @param[in]  player_scope QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  game QString [optional]
    * @param[in]  player QString [optional]
    */
    virtual void homepageleadersGet(const QString &stat_category, const QString &league_id, const QString &season, const QString &season_type, const QString &player_or_team, const QString &player_scope, const QString &game_scope, const ::OpenAPI::OptionalParam<QString> &game = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &player = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stat_type QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_or_team QString [required]
    * @param[in]  player_scope QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  game QString [optional]
    * @param[in]  player QString [optional]
    */
    virtual void homepagev2Get(const QString &stat_type, const QString &league_id, const QString &season, const QString &season_type, const QString &player_or_team, const QString &player_scope, const QString &game_scope, const ::OpenAPI::OptionalParam<QString> &game = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &player = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  stat QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_or_team QString [required]
    * @param[in]  player_scope QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  game QString [optional]
    * @param[in]  player QString [optional]
    */
    virtual void leaderstilesGet(const QString &stat, const QString &league_id, const QString &season, const QString &season_type, const QString &player_or_team, const QString &player_scope, const QString &game_scope, const ::OpenAPI::OptionalParam<QString> &game = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &player = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  group_quantity QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void leaguedashlineupsGet(const QString &group_quantity, const QString &season_type, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    */
    virtual void leaguedashplayerbiostatsGet(const QString &per_mode, const QString &league_id, const QString &season, const QString &season_type);

    /**
    * @param[in]  clutch_time QString [required]
    * @param[in]  ahead_behind QString [required]
    * @param[in]  point_diff QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  player_experience QString [required]
    * @param[in]  player_position QString [required]
    * @param[in]  starter_bench QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void leaguedashplayerclutchGet(const QString &clutch_time, const QString &ahead_behind, const QString &point_diff, const QString &game_scope, const QString &player_experience, const QString &player_position, const QString &starter_bench, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    */
    virtual void leaguedashplayerptshotGet(const QString &league_id, const QString &per_mode, const QString &season, const QString &season_type);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    * @param[in]  distance_range QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  player_experience QString [required]
    * @param[in]  player_position QString [required]
    * @param[in]  starter_bench QString [required]
    */
    virtual void leaguedashplayershotlocationsGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games, const QString &distance_range, const QString &game_scope, const QString &player_experience, const QString &player_position, const QString &starter_bench);

    /**
    * @param[in]  game_scope QString [required]
    * @param[in]  player_experience QString [required]
    * @param[in]  player_position QString [required]
    * @param[in]  starter_bench QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void leaguedashplayerstatsGet(const QString &game_scope, const QString &player_experience, const QString &player_position, const QString &starter_bench, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  defense_category QString [required]
    */
    virtual void leaguedashptdefendGet(const QString &league_id, const QString &per_mode, const QString &season, const QString &season_type, const QString &defense_category);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  defense_category QString [required]
    */
    virtual void leaguedashptteamdefendGet(const QString &league_id, const QString &per_mode, const QString &season, const QString &season_type, const QString &defense_category);

    /**
    * @param[in]  clutch_time QString [required]
    * @param[in]  ahead_behind QString [required]
    * @param[in]  point_diff QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  player_experience QString [required]
    * @param[in]  player_position QString [required]
    * @param[in]  starter_bench QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void leaguedashteamclutchGet(const QString &clutch_time, const QString &ahead_behind, const QString &point_diff, const QString &game_scope, const QString &player_experience, const QString &player_position, const QString &starter_bench, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    */
    virtual void leaguedashteamptshotGet(const QString &league_id, const QString &per_mode, const QString &season, const QString &season_type);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    * @param[in]  distance_range QString [required]
    * @param[in]  game_scope QString [required]
    * @param[in]  player_experience QString [required]
    * @param[in]  player_position QString [required]
    * @param[in]  starter_bench QString [required]
    */
    virtual void leaguedashteamshotlocationsGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games, const QString &distance_range, const QString &game_scope, const QString &player_experience, const QString &player_position, const QString &starter_bench);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void leaguedashteamstatsGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  scope QString [required]
    * @param[in]  stat_category QString [optional]
    */
    virtual void leagueleadersGet(const QString &league_id, const QString &per_mode, const QString &season, const QString &season_type, const QString &scope, const ::OpenAPI::OptionalParam<QString> &stat_category = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    */
    virtual void playbyplayGet(const QString &game_id, const QString &start_period, const QString &end_period);

    /**
    * @param[in]  game_id QString [required]
    * @param[in]  start_period QString [required]
    * @param[in]  end_period QString [required]
    */
    virtual void playbyplayv2Get(const QString &game_id, const QString &start_period, const QString &end_period);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  player_id QString [required]
    */
    virtual void playercareerstatsGet(const QString &per_mode, const QString &player_id);

    /**
    * @param[in]  player_id_list QString [required]
    * @param[in]  vs_player_id_list QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playercompareGet(const QString &player_id_list, const QString &vs_player_id_list, const QString &season_type, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbyclutchGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbygamesplitsGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbygeneralsplitsGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbylastngamesGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbyopponentGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbyshootingsplitsGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbyteamperformanceGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashboardbyyearoveryearGet(const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &player_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashptpassGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &player_id, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &last_n_games);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashptrebGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &player_id, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  season QString [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  player_id QString [optional]
    * @param[in]  team_id QString [optional]
    * @param[in]  outcome QString [optional]
    * @param[in]  location QString [optional]
    * @param[in]  month QString [optional]
    * @param[in]  season_segment QString [optional]
    * @param[in]  date_from QString [optional]
    * @param[in]  date_to QString [optional]
    * @param[in]  opponent_team_id QString [optional]
    * @param[in]  vs_conference QString [optional]
    * @param[in]  vs_division QString [optional]
    * @param[in]  game_segment QString [optional]
    * @param[in]  period QString [optional]
    * @param[in]  last_n_games QString [optional]
    */
    Q_DECL_DEPRECATED virtual void playerdashptreboundlogsGet(const ::OpenAPI::OptionalParam<QString> &season = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &player_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &outcome = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &location = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &month = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &season_segment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_from = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &date_to = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &opponent_team_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vs_conference = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &vs_division = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &game_segment = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &period = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &last_n_games = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashptshotdefendGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &player_id, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [optional]
    * @param[in]  season QString [optional]
    * @param[in]  season_type QString [optional]
    * @param[in]  player_id QString [optional]
    * @param[in]  team_id QString [optional]
    */
    Q_DECL_DEPRECATED virtual void playerdashptshotlogGet(const ::OpenAPI::OptionalParam<QString> &league_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &season = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &season_type = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &player_id = ::OpenAPI::OptionalParam<QString>(), const ::OpenAPI::OptionalParam<QString> &team_id = ::OpenAPI::OptionalParam<QString>());

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playerdashptshotsGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &player_id, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    */
    virtual void playergamelogGet(const QString &player_id, const QString &season, const QString &season_type);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  graph_start_season QString [required]
    * @param[in]  graph_end_season QString [required]
    * @param[in]  graph_stat QString [required]
    */
    virtual void playerprofileGet(const QString &league_id, const QString &player_id, const QString &season, const QString &season_type, const QString &graph_start_season, const QString &graph_end_season, const QString &graph_stat);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  player_id QString [required]
    */
    virtual void playerprofilev2Get(const QString &per_mode, const QString &player_id);

    /**
    * @param[in]  player_team_id QString [required]
    * @param[in]  player_id1 QString [required]
    * @param[in]  player_id2 QString [required]
    * @param[in]  player_id3 QString [required]
    * @param[in]  player_id4 QString [required]
    * @param[in]  player_id5 QString [required]
    * @param[in]  vs_team_id QString [required]
    * @param[in]  vs_player_id1 QString [required]
    * @param[in]  vs_player_id2 QString [required]
    * @param[in]  vs_player_id3 QString [required]
    * @param[in]  vs_player_id4 QString [required]
    * @param[in]  vs_player_id5 QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playersvsplayersGet(const QString &player_team_id, const QString &player_id1, const QString &player_id2, const QString &player_id3, const QString &player_id4, const QString &player_id5, const QString &vs_team_id, const QString &vs_player_id1, const QString &vs_player_id2, const QString &vs_player_id3, const QString &vs_player_id4, const QString &vs_player_id5, const QString &season_type, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  player_id QString [required]
    * @param[in]  vs_player_id QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void playervsplayerGet(const QString &player_id, const QString &vs_player_id, const QString &season_type, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_id QString [required]
    */
    virtual void playoffpictureGet(const QString &league_id, const QString &season_id);

    /**
    * @param[in]  game_date QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  day_offset QString [required]
    */
    virtual void scoreboardGet(const QString &game_date, const QString &league_id, const QString &day_offset);

    /**
    * @param[in]  game_date QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  day_offset QString [required]
    */
    virtual void scoreboardV2Get(const QString &game_date, const QString &league_id, const QString &day_offset);

    /**
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  player_id QString [required]
    * @param[in]  game_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  position QString [required]
    * @param[in]  rookie_year QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    * @param[in]  context_measure QString [required]
    */
    virtual void shotchartdetailGet(const QString &season_type, const QString &team_id, const QString &player_id, const QString &game_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &position, const QString &rookie_year, const QString &game_segment, const QString &period, const QString &last_n_games, const QString &context_measure);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    * @param[in]  game_id QString [required]
    * @param[in]  group_id QString [required]
    * @param[in]  context_measure QString [required]
    * @param[in]  context_filter QString [required]
    */
    virtual void shotchartlineupdetailGet(const QString &league_id, const QString &season, const QString &season_type, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games, const QString &game_id, const QString &group_id, const QString &context_measure, const QString &context_filter);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbyclutchGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbygamesplitsGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbygeneralsplitsGet(const QString &season_type, const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbylastngamesGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbyopponentGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbyshootingsplitsGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbyteamperformanceGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashboardbyyearoveryearGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  group_quantity QString [required]
    * @param[in]  game_id QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashlineupsGet(const QString &group_quantity, const QString &game_id, const QString &season_type, const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashptpassGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &last_n_games);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashptrebGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  per_mode QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamdashptshotsGet(const QString &per_mode, const QString &season, const QString &season_type, const QString &team_id, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    */
    virtual void teamgamelogGet(const QString &team_id, const QString &season, const QString &season_type);

    /**
    * @param[in]  season QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  league_id QString [required]
    * @param[in]  season_type QString [required]
    */
    virtual void teaminfocommonGet(const QString &season, const QString &team_id, const QString &league_id, const QString &season_type);

    /**
    * @param[in]  season_type QString [required]
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamplayerdashboardGet(const QString &season_type, const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamplayeronoffdetailsGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamplayeronoffsummaryGet(const QString &team_id, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &season_type, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  team_id QString [required]
    * @param[in]  vs_player_id QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  measure_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  plus_minus QString [required]
    * @param[in]  pace_adjust QString [required]
    * @param[in]  rank QString [required]
    * @param[in]  season QString [required]
    * @param[in]  outcome QString [required]
    * @param[in]  location QString [required]
    * @param[in]  month QString [required]
    * @param[in]  season_segment QString [required]
    * @param[in]  date_from QString [required]
    * @param[in]  date_to QString [required]
    * @param[in]  opponent_team_id QString [required]
    * @param[in]  vs_conference QString [required]
    * @param[in]  vs_division QString [required]
    * @param[in]  game_segment QString [required]
    * @param[in]  period QString [required]
    * @param[in]  last_n_games QString [required]
    */
    virtual void teamvsplayerGet(const QString &team_id, const QString &vs_player_id, const QString &season_type, const QString &measure_type, const QString &per_mode, const QString &plus_minus, const QString &pace_adjust, const QString &rank, const QString &season, const QString &outcome, const QString &location, const QString &month, const QString &season_segment, const QString &date_from, const QString &date_to, const QString &opponent_team_id, const QString &vs_conference, const QString &vs_division, const QString &game_segment, const QString &period, const QString &last_n_games);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  season_type QString [required]
    * @param[in]  per_mode QString [required]
    * @param[in]  team_id QString [required]
    */
    virtual void teamyearbyyearstatsGet(const QString &league_id, const QString &season_type, const QString &per_mode, const QString &team_id);

    /**
    * @param[in]  league_id QString [required]
    * @param[in]  game_date QString [required]
    */
    virtual void videoStatusGet(const QString &league_id, const QString &game_date);


private:
    QMap<QString,int> _serverIndices;
    QMap<QString,QList<OAIServerConfiguration>> _serverConfigs;
    QMap<QString, QString> _apiKeys;
    QString _bearerToken;
    QString _username;
    QString _password;
    int _timeOut;
    QString _workingDirectory;
    QNetworkAccessManager* _manager;
    QMap<QString, QString> _defaultHeaders;
    bool _isResponseCompressionEnabled;
    bool _isRequestCompressionEnabled;
    OAIHttpRequestInput _latestInput;
    OAIHttpRequestWorker *_latestWorker;
    QStringList _latestScope;
    OauthCode _authFlow;
    OauthImplicit _implicitFlow;
    OauthCredentials _credentialFlow;
    OauthPassword _passwordFlow;
    int _OauthMethod = 0;

    void allstarballotpredictorGetCallback(OAIHttpRequestWorker *worker);
    void boxscoreGetCallback(OAIHttpRequestWorker *worker);
    void boxscoreadvancedGetCallback(OAIHttpRequestWorker *worker);
    void boxscoreadvancedv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscorefourfactorsGetCallback(OAIHttpRequestWorker *worker);
    void boxscorefourfactorsv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscoremiscGetCallback(OAIHttpRequestWorker *worker);
    void boxscoremiscv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscoreplayertrackv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscorescoringGetCallback(OAIHttpRequestWorker *worker);
    void boxscorescoringv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscoresummaryv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscoretraditionalv2GetCallback(OAIHttpRequestWorker *worker);
    void boxscoreusageGetCallback(OAIHttpRequestWorker *worker);
    void boxscoreusagev2GetCallback(OAIHttpRequestWorker *worker);
    void commonTeamYearsGetCallback(OAIHttpRequestWorker *worker);
    void commonallplayersGetCallback(OAIHttpRequestWorker *worker);
    void commonplayerinfoGetCallback(OAIHttpRequestWorker *worker);
    void commonplayoffseriesGetCallback(OAIHttpRequestWorker *worker);
    void commonteamrosterGetCallback(OAIHttpRequestWorker *worker);
    void draftcombinedrillresultsGetCallback(OAIHttpRequestWorker *worker);
    void draftcombinenonstationaryshootingGetCallback(OAIHttpRequestWorker *worker);
    void draftcombineplayeranthroGetCallback(OAIHttpRequestWorker *worker);
    void draftcombinespotshootingGetCallback(OAIHttpRequestWorker *worker);
    void draftcombinestatsGetCallback(OAIHttpRequestWorker *worker);
    void drafthistoryGetCallback(OAIHttpRequestWorker *worker);
    void franchisehistoryGetCallback(OAIHttpRequestWorker *worker);
    void homepageleadersGetCallback(OAIHttpRequestWorker *worker);
    void homepagev2GetCallback(OAIHttpRequestWorker *worker);
    void leaderstilesGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashlineupsGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashplayerbiostatsGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashplayerclutchGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashplayerptshotGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashplayershotlocationsGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashplayerstatsGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashptdefendGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashptteamdefendGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashteamclutchGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashteamptshotGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashteamshotlocationsGetCallback(OAIHttpRequestWorker *worker);
    void leaguedashteamstatsGetCallback(OAIHttpRequestWorker *worker);
    void leagueleadersGetCallback(OAIHttpRequestWorker *worker);
    void playbyplayGetCallback(OAIHttpRequestWorker *worker);
    void playbyplayv2GetCallback(OAIHttpRequestWorker *worker);
    void playercareerstatsGetCallback(OAIHttpRequestWorker *worker);
    void playercompareGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbyclutchGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbygamesplitsGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbygeneralsplitsGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbylastngamesGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbyopponentGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbyshootingsplitsGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbyteamperformanceGetCallback(OAIHttpRequestWorker *worker);
    void playerdashboardbyyearoveryearGetCallback(OAIHttpRequestWorker *worker);
    void playerdashptpassGetCallback(OAIHttpRequestWorker *worker);
    void playerdashptrebGetCallback(OAIHttpRequestWorker *worker);
    void playerdashptreboundlogsGetCallback(OAIHttpRequestWorker *worker);
    void playerdashptshotdefendGetCallback(OAIHttpRequestWorker *worker);
    void playerdashptshotlogGetCallback(OAIHttpRequestWorker *worker);
    void playerdashptshotsGetCallback(OAIHttpRequestWorker *worker);
    void playergamelogGetCallback(OAIHttpRequestWorker *worker);
    void playerprofileGetCallback(OAIHttpRequestWorker *worker);
    void playerprofilev2GetCallback(OAIHttpRequestWorker *worker);
    void playersvsplayersGetCallback(OAIHttpRequestWorker *worker);
    void playervsplayerGetCallback(OAIHttpRequestWorker *worker);
    void playoffpictureGetCallback(OAIHttpRequestWorker *worker);
    void scoreboardGetCallback(OAIHttpRequestWorker *worker);
    void scoreboardV2GetCallback(OAIHttpRequestWorker *worker);
    void shotchartdetailGetCallback(OAIHttpRequestWorker *worker);
    void shotchartlineupdetailGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbyclutchGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbygamesplitsGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbygeneralsplitsGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbylastngamesGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbyopponentGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbyshootingsplitsGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbyteamperformanceGetCallback(OAIHttpRequestWorker *worker);
    void teamdashboardbyyearoveryearGetCallback(OAIHttpRequestWorker *worker);
    void teamdashlineupsGetCallback(OAIHttpRequestWorker *worker);
    void teamdashptpassGetCallback(OAIHttpRequestWorker *worker);
    void teamdashptrebGetCallback(OAIHttpRequestWorker *worker);
    void teamdashptshotsGetCallback(OAIHttpRequestWorker *worker);
    void teamgamelogGetCallback(OAIHttpRequestWorker *worker);
    void teaminfocommonGetCallback(OAIHttpRequestWorker *worker);
    void teamplayerdashboardGetCallback(OAIHttpRequestWorker *worker);
    void teamplayeronoffdetailsGetCallback(OAIHttpRequestWorker *worker);
    void teamplayeronoffsummaryGetCallback(OAIHttpRequestWorker *worker);
    void teamvsplayerGetCallback(OAIHttpRequestWorker *worker);
    void teamyearbyyearstatsGetCallback(OAIHttpRequestWorker *worker);
    void videoStatusGetCallback(OAIHttpRequestWorker *worker);

Q_SIGNALS:

    void allstarballotpredictorGetSignal();
    void boxscoreGetSignal();
    void boxscoreadvancedGetSignal();
    void boxscoreadvancedv2GetSignal();
    void boxscorefourfactorsGetSignal();
    void boxscorefourfactorsv2GetSignal();
    void boxscoremiscGetSignal();
    void boxscoremiscv2GetSignal();
    void boxscoreplayertrackv2GetSignal();
    void boxscorescoringGetSignal();
    void boxscorescoringv2GetSignal();
    void boxscoresummaryv2GetSignal();
    void boxscoretraditionalv2GetSignal();
    void boxscoreusageGetSignal();
    void boxscoreusagev2GetSignal();
    void commonTeamYearsGetSignal();
    void commonallplayersGetSignal();
    void commonplayerinfoGetSignal();
    void commonplayoffseriesGetSignal();
    void commonteamrosterGetSignal();
    void draftcombinedrillresultsGetSignal();
    void draftcombinenonstationaryshootingGetSignal();
    void draftcombineplayeranthroGetSignal();
    void draftcombinespotshootingGetSignal();
    void draftcombinestatsGetSignal();
    void drafthistoryGetSignal();
    void franchisehistoryGetSignal();
    void homepageleadersGetSignal();
    void homepagev2GetSignal();
    void leaderstilesGetSignal();
    void leaguedashlineupsGetSignal();
    void leaguedashplayerbiostatsGetSignal();
    void leaguedashplayerclutchGetSignal();
    void leaguedashplayerptshotGetSignal();
    void leaguedashplayershotlocationsGetSignal();
    void leaguedashplayerstatsGetSignal();
    void leaguedashptdefendGetSignal();
    void leaguedashptteamdefendGetSignal();
    void leaguedashteamclutchGetSignal();
    void leaguedashteamptshotGetSignal();
    void leaguedashteamshotlocationsGetSignal();
    void leaguedashteamstatsGetSignal();
    void leagueleadersGetSignal();
    void playbyplayGetSignal();
    void playbyplayv2GetSignal();
    void playercareerstatsGetSignal();
    void playercompareGetSignal();
    void playerdashboardbyclutchGetSignal();
    void playerdashboardbygamesplitsGetSignal();
    void playerdashboardbygeneralsplitsGetSignal();
    void playerdashboardbylastngamesGetSignal();
    void playerdashboardbyopponentGetSignal();
    void playerdashboardbyshootingsplitsGetSignal();
    void playerdashboardbyteamperformanceGetSignal();
    void playerdashboardbyyearoveryearGetSignal();
    void playerdashptpassGetSignal();
    void playerdashptrebGetSignal();
    void playerdashptreboundlogsGetSignal();
    void playerdashptshotdefendGetSignal();
    void playerdashptshotlogGetSignal();
    void playerdashptshotsGetSignal();
    void playergamelogGetSignal();
    void playerprofileGetSignal();
    void playerprofilev2GetSignal();
    void playersvsplayersGetSignal();
    void playervsplayerGetSignal();
    void playoffpictureGetSignal();
    void scoreboardGetSignal();
    void scoreboardV2GetSignal();
    void shotchartdetailGetSignal();
    void shotchartlineupdetailGetSignal();
    void teamdashboardbyclutchGetSignal();
    void teamdashboardbygamesplitsGetSignal();
    void teamdashboardbygeneralsplitsGetSignal();
    void teamdashboardbylastngamesGetSignal();
    void teamdashboardbyopponentGetSignal();
    void teamdashboardbyshootingsplitsGetSignal();
    void teamdashboardbyteamperformanceGetSignal();
    void teamdashboardbyyearoveryearGetSignal();
    void teamdashlineupsGetSignal();
    void teamdashptpassGetSignal();
    void teamdashptrebGetSignal();
    void teamdashptshotsGetSignal();
    void teamgamelogGetSignal();
    void teaminfocommonGetSignal();
    void teamplayerdashboardGetSignal();
    void teamplayeronoffdetailsGetSignal();
    void teamplayeronoffsummaryGetSignal();
    void teamvsplayerGetSignal();
    void teamyearbyyearstatsGetSignal();
    void videoStatusGetSignal();


    void allstarballotpredictorGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoreGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoreadvancedGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoreadvancedv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscorefourfactorsGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscorefourfactorsv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoremiscGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoremiscv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoreplayertrackv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscorescoringGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscorescoringv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoresummaryv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoretraditionalv2GetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoreusageGetSignalFull(OAIHttpRequestWorker *worker);
    void boxscoreusagev2GetSignalFull(OAIHttpRequestWorker *worker);
    void commonTeamYearsGetSignalFull(OAIHttpRequestWorker *worker);
    void commonallplayersGetSignalFull(OAIHttpRequestWorker *worker);
    void commonplayerinfoGetSignalFull(OAIHttpRequestWorker *worker);
    void commonplayoffseriesGetSignalFull(OAIHttpRequestWorker *worker);
    void commonteamrosterGetSignalFull(OAIHttpRequestWorker *worker);
    void draftcombinedrillresultsGetSignalFull(OAIHttpRequestWorker *worker);
    void draftcombinenonstationaryshootingGetSignalFull(OAIHttpRequestWorker *worker);
    void draftcombineplayeranthroGetSignalFull(OAIHttpRequestWorker *worker);
    void draftcombinespotshootingGetSignalFull(OAIHttpRequestWorker *worker);
    void draftcombinestatsGetSignalFull(OAIHttpRequestWorker *worker);
    void drafthistoryGetSignalFull(OAIHttpRequestWorker *worker);
    void franchisehistoryGetSignalFull(OAIHttpRequestWorker *worker);
    void homepageleadersGetSignalFull(OAIHttpRequestWorker *worker);
    void homepagev2GetSignalFull(OAIHttpRequestWorker *worker);
    void leaderstilesGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashlineupsGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashplayerbiostatsGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashplayerclutchGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashplayerptshotGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashplayershotlocationsGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashplayerstatsGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashptdefendGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashptteamdefendGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashteamclutchGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashteamptshotGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashteamshotlocationsGetSignalFull(OAIHttpRequestWorker *worker);
    void leaguedashteamstatsGetSignalFull(OAIHttpRequestWorker *worker);
    void leagueleadersGetSignalFull(OAIHttpRequestWorker *worker);
    void playbyplayGetSignalFull(OAIHttpRequestWorker *worker);
    void playbyplayv2GetSignalFull(OAIHttpRequestWorker *worker);
    void playercareerstatsGetSignalFull(OAIHttpRequestWorker *worker);
    void playercompareGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbyclutchGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbygamesplitsGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbygeneralsplitsGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbylastngamesGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbyopponentGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbyshootingsplitsGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbyteamperformanceGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashboardbyyearoveryearGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashptpassGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashptrebGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashptreboundlogsGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashptshotdefendGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashptshotlogGetSignalFull(OAIHttpRequestWorker *worker);
    void playerdashptshotsGetSignalFull(OAIHttpRequestWorker *worker);
    void playergamelogGetSignalFull(OAIHttpRequestWorker *worker);
    void playerprofileGetSignalFull(OAIHttpRequestWorker *worker);
    void playerprofilev2GetSignalFull(OAIHttpRequestWorker *worker);
    void playersvsplayersGetSignalFull(OAIHttpRequestWorker *worker);
    void playervsplayerGetSignalFull(OAIHttpRequestWorker *worker);
    void playoffpictureGetSignalFull(OAIHttpRequestWorker *worker);
    void scoreboardGetSignalFull(OAIHttpRequestWorker *worker);
    void scoreboardV2GetSignalFull(OAIHttpRequestWorker *worker);
    void shotchartdetailGetSignalFull(OAIHttpRequestWorker *worker);
    void shotchartlineupdetailGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbyclutchGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbygamesplitsGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbygeneralsplitsGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbylastngamesGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbyopponentGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbyshootingsplitsGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbyteamperformanceGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashboardbyyearoveryearGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashlineupsGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashptpassGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashptrebGetSignalFull(OAIHttpRequestWorker *worker);
    void teamdashptshotsGetSignalFull(OAIHttpRequestWorker *worker);
    void teamgamelogGetSignalFull(OAIHttpRequestWorker *worker);
    void teaminfocommonGetSignalFull(OAIHttpRequestWorker *worker);
    void teamplayerdashboardGetSignalFull(OAIHttpRequestWorker *worker);
    void teamplayeronoffdetailsGetSignalFull(OAIHttpRequestWorker *worker);
    void teamplayeronoffsummaryGetSignalFull(OAIHttpRequestWorker *worker);
    void teamvsplayerGetSignalFull(OAIHttpRequestWorker *worker);
    void teamyearbyyearstatsGetSignalFull(OAIHttpRequestWorker *worker);
    void videoStatusGetSignalFull(OAIHttpRequestWorker *worker);

    Q_DECL_DEPRECATED_X("Use allstarballotpredictorGetSignalError() instead")
    void allstarballotpredictorGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void allstarballotpredictorGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreGetSignalError() instead")
    void boxscoreGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreadvancedGetSignalError() instead")
    void boxscoreadvancedGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreadvancedGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreadvancedv2GetSignalError() instead")
    void boxscoreadvancedv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreadvancedv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorefourfactorsGetSignalError() instead")
    void boxscorefourfactorsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorefourfactorsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorefourfactorsv2GetSignalError() instead")
    void boxscorefourfactorsv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorefourfactorsv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoremiscGetSignalError() instead")
    void boxscoremiscGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoremiscGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoremiscv2GetSignalError() instead")
    void boxscoremiscv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoremiscv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreplayertrackv2GetSignalError() instead")
    void boxscoreplayertrackv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreplayertrackv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorescoringGetSignalError() instead")
    void boxscorescoringGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorescoringGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorescoringv2GetSignalError() instead")
    void boxscorescoringv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorescoringv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoresummaryv2GetSignalError() instead")
    void boxscoresummaryv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoresummaryv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoretraditionalv2GetSignalError() instead")
    void boxscoretraditionalv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoretraditionalv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreusageGetSignalError() instead")
    void boxscoreusageGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreusageGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreusagev2GetSignalError() instead")
    void boxscoreusagev2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreusagev2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonTeamYearsGetSignalError() instead")
    void commonTeamYearsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commonTeamYearsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonallplayersGetSignalError() instead")
    void commonallplayersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commonallplayersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonplayerinfoGetSignalError() instead")
    void commonplayerinfoGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commonplayerinfoGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonplayoffseriesGetSignalError() instead")
    void commonplayoffseriesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commonplayoffseriesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonteamrosterGetSignalError() instead")
    void commonteamrosterGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void commonteamrosterGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinedrillresultsGetSignalError() instead")
    void draftcombinedrillresultsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinedrillresultsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinenonstationaryshootingGetSignalError() instead")
    void draftcombinenonstationaryshootingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinenonstationaryshootingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombineplayeranthroGetSignalError() instead")
    void draftcombineplayeranthroGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombineplayeranthroGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinespotshootingGetSignalError() instead")
    void draftcombinespotshootingGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinespotshootingGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinestatsGetSignalError() instead")
    void draftcombinestatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinestatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drafthistoryGetSignalError() instead")
    void drafthistoryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void drafthistoryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use franchisehistoryGetSignalError() instead")
    void franchisehistoryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void franchisehistoryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use homepageleadersGetSignalError() instead")
    void homepageleadersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void homepageleadersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use homepagev2GetSignalError() instead")
    void homepagev2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void homepagev2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaderstilesGetSignalError() instead")
    void leaderstilesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaderstilesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashlineupsGetSignalError() instead")
    void leaguedashlineupsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashlineupsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerbiostatsGetSignalError() instead")
    void leaguedashplayerbiostatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerbiostatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerclutchGetSignalError() instead")
    void leaguedashplayerclutchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerclutchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerptshotGetSignalError() instead")
    void leaguedashplayerptshotGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerptshotGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayershotlocationsGetSignalError() instead")
    void leaguedashplayershotlocationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayershotlocationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerstatsGetSignalError() instead")
    void leaguedashplayerstatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerstatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashptdefendGetSignalError() instead")
    void leaguedashptdefendGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashptdefendGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashptteamdefendGetSignalError() instead")
    void leaguedashptteamdefendGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashptteamdefendGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamclutchGetSignalError() instead")
    void leaguedashteamclutchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamclutchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamptshotGetSignalError() instead")
    void leaguedashteamptshotGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamptshotGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamshotlocationsGetSignalError() instead")
    void leaguedashteamshotlocationsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamshotlocationsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamstatsGetSignalError() instead")
    void leaguedashteamstatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamstatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueleadersGetSignalError() instead")
    void leagueleadersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void leagueleadersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playbyplayGetSignalError() instead")
    void playbyplayGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playbyplayGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playbyplayv2GetSignalError() instead")
    void playbyplayv2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playbyplayv2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playercareerstatsGetSignalError() instead")
    void playercareerstatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playercareerstatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playercompareGetSignalError() instead")
    void playercompareGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playercompareGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyclutchGetSignalError() instead")
    void playerdashboardbyclutchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyclutchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbygamesplitsGetSignalError() instead")
    void playerdashboardbygamesplitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbygamesplitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbygeneralsplitsGetSignalError() instead")
    void playerdashboardbygeneralsplitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbygeneralsplitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbylastngamesGetSignalError() instead")
    void playerdashboardbylastngamesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbylastngamesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyopponentGetSignalError() instead")
    void playerdashboardbyopponentGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyopponentGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyshootingsplitsGetSignalError() instead")
    void playerdashboardbyshootingsplitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyshootingsplitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyteamperformanceGetSignalError() instead")
    void playerdashboardbyteamperformanceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyteamperformanceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyyearoveryearGetSignalError() instead")
    void playerdashboardbyyearoveryearGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyyearoveryearGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptpassGetSignalError() instead")
    void playerdashptpassGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptpassGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptrebGetSignalError() instead")
    void playerdashptrebGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptrebGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptreboundlogsGetSignalError() instead")
    void playerdashptreboundlogsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptreboundlogsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptshotdefendGetSignalError() instead")
    void playerdashptshotdefendGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptshotdefendGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptshotlogGetSignalError() instead")
    void playerdashptshotlogGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptshotlogGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptshotsGetSignalError() instead")
    void playerdashptshotsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptshotsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playergamelogGetSignalError() instead")
    void playergamelogGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playergamelogGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerprofileGetSignalError() instead")
    void playerprofileGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerprofileGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerprofilev2GetSignalError() instead")
    void playerprofilev2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playerprofilev2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersvsplayersGetSignalError() instead")
    void playersvsplayersGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playersvsplayersGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playervsplayerGetSignalError() instead")
    void playervsplayerGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playervsplayerGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playoffpictureGetSignalError() instead")
    void playoffpictureGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void playoffpictureGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreboardGetSignalError() instead")
    void scoreboardGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scoreboardGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreboardV2GetSignalError() instead")
    void scoreboardV2GetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void scoreboardV2GetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shotchartdetailGetSignalError() instead")
    void shotchartdetailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shotchartdetailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shotchartlineupdetailGetSignalError() instead")
    void shotchartlineupdetailGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void shotchartlineupdetailGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyclutchGetSignalError() instead")
    void teamdashboardbyclutchGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyclutchGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbygamesplitsGetSignalError() instead")
    void teamdashboardbygamesplitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbygamesplitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbygeneralsplitsGetSignalError() instead")
    void teamdashboardbygeneralsplitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbygeneralsplitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbylastngamesGetSignalError() instead")
    void teamdashboardbylastngamesGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbylastngamesGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyopponentGetSignalError() instead")
    void teamdashboardbyopponentGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyopponentGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyshootingsplitsGetSignalError() instead")
    void teamdashboardbyshootingsplitsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyshootingsplitsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyteamperformanceGetSignalError() instead")
    void teamdashboardbyteamperformanceGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyteamperformanceGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyyearoveryearGetSignalError() instead")
    void teamdashboardbyyearoveryearGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyyearoveryearGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashlineupsGetSignalError() instead")
    void teamdashlineupsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashlineupsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashptpassGetSignalError() instead")
    void teamdashptpassGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashptpassGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashptrebGetSignalError() instead")
    void teamdashptrebGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashptrebGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashptshotsGetSignalError() instead")
    void teamdashptshotsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashptshotsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamgamelogGetSignalError() instead")
    void teamgamelogGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamgamelogGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teaminfocommonGetSignalError() instead")
    void teaminfocommonGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teaminfocommonGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamplayerdashboardGetSignalError() instead")
    void teamplayerdashboardGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamplayerdashboardGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamplayeronoffdetailsGetSignalError() instead")
    void teamplayeronoffdetailsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamplayeronoffdetailsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamplayeronoffsummaryGetSignalError() instead")
    void teamplayeronoffsummaryGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamplayeronoffsummaryGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamvsplayerGetSignalError() instead")
    void teamvsplayerGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamvsplayerGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamyearbyyearstatsGetSignalError() instead")
    void teamyearbyyearstatsGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void teamyearbyyearstatsGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use videoStatusGetSignalError() instead")
    void videoStatusGetSignalE(QNetworkReply::NetworkError error_type, QString error_str);
    void videoStatusGetSignalError(QNetworkReply::NetworkError error_type, const QString &error_str);

    Q_DECL_DEPRECATED_X("Use allstarballotpredictorGetSignalErrorFull() instead")
    void allstarballotpredictorGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void allstarballotpredictorGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreGetSignalErrorFull() instead")
    void boxscoreGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreadvancedGetSignalErrorFull() instead")
    void boxscoreadvancedGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreadvancedGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreadvancedv2GetSignalErrorFull() instead")
    void boxscoreadvancedv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreadvancedv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorefourfactorsGetSignalErrorFull() instead")
    void boxscorefourfactorsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorefourfactorsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorefourfactorsv2GetSignalErrorFull() instead")
    void boxscorefourfactorsv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorefourfactorsv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoremiscGetSignalErrorFull() instead")
    void boxscoremiscGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoremiscGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoremiscv2GetSignalErrorFull() instead")
    void boxscoremiscv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoremiscv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreplayertrackv2GetSignalErrorFull() instead")
    void boxscoreplayertrackv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreplayertrackv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorescoringGetSignalErrorFull() instead")
    void boxscorescoringGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorescoringGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscorescoringv2GetSignalErrorFull() instead")
    void boxscorescoringv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscorescoringv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoresummaryv2GetSignalErrorFull() instead")
    void boxscoresummaryv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoresummaryv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoretraditionalv2GetSignalErrorFull() instead")
    void boxscoretraditionalv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoretraditionalv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreusageGetSignalErrorFull() instead")
    void boxscoreusageGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreusageGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use boxscoreusagev2GetSignalErrorFull() instead")
    void boxscoreusagev2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void boxscoreusagev2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonTeamYearsGetSignalErrorFull() instead")
    void commonTeamYearsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commonTeamYearsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonallplayersGetSignalErrorFull() instead")
    void commonallplayersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commonallplayersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonplayerinfoGetSignalErrorFull() instead")
    void commonplayerinfoGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commonplayerinfoGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonplayoffseriesGetSignalErrorFull() instead")
    void commonplayoffseriesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commonplayoffseriesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use commonteamrosterGetSignalErrorFull() instead")
    void commonteamrosterGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void commonteamrosterGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinedrillresultsGetSignalErrorFull() instead")
    void draftcombinedrillresultsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinedrillresultsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinenonstationaryshootingGetSignalErrorFull() instead")
    void draftcombinenonstationaryshootingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinenonstationaryshootingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombineplayeranthroGetSignalErrorFull() instead")
    void draftcombineplayeranthroGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombineplayeranthroGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinespotshootingGetSignalErrorFull() instead")
    void draftcombinespotshootingGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinespotshootingGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use draftcombinestatsGetSignalErrorFull() instead")
    void draftcombinestatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void draftcombinestatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use drafthistoryGetSignalErrorFull() instead")
    void drafthistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void drafthistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use franchisehistoryGetSignalErrorFull() instead")
    void franchisehistoryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void franchisehistoryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use homepageleadersGetSignalErrorFull() instead")
    void homepageleadersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void homepageleadersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use homepagev2GetSignalErrorFull() instead")
    void homepagev2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void homepagev2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaderstilesGetSignalErrorFull() instead")
    void leaderstilesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaderstilesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashlineupsGetSignalErrorFull() instead")
    void leaguedashlineupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashlineupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerbiostatsGetSignalErrorFull() instead")
    void leaguedashplayerbiostatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerbiostatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerclutchGetSignalErrorFull() instead")
    void leaguedashplayerclutchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerclutchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerptshotGetSignalErrorFull() instead")
    void leaguedashplayerptshotGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerptshotGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayershotlocationsGetSignalErrorFull() instead")
    void leaguedashplayershotlocationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayershotlocationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashplayerstatsGetSignalErrorFull() instead")
    void leaguedashplayerstatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashplayerstatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashptdefendGetSignalErrorFull() instead")
    void leaguedashptdefendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashptdefendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashptteamdefendGetSignalErrorFull() instead")
    void leaguedashptteamdefendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashptteamdefendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamclutchGetSignalErrorFull() instead")
    void leaguedashteamclutchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamclutchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamptshotGetSignalErrorFull() instead")
    void leaguedashteamptshotGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamptshotGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamshotlocationsGetSignalErrorFull() instead")
    void leaguedashteamshotlocationsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamshotlocationsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leaguedashteamstatsGetSignalErrorFull() instead")
    void leaguedashteamstatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leaguedashteamstatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use leagueleadersGetSignalErrorFull() instead")
    void leagueleadersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void leagueleadersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playbyplayGetSignalErrorFull() instead")
    void playbyplayGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playbyplayGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playbyplayv2GetSignalErrorFull() instead")
    void playbyplayv2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playbyplayv2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playercareerstatsGetSignalErrorFull() instead")
    void playercareerstatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playercareerstatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playercompareGetSignalErrorFull() instead")
    void playercompareGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playercompareGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyclutchGetSignalErrorFull() instead")
    void playerdashboardbyclutchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyclutchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbygamesplitsGetSignalErrorFull() instead")
    void playerdashboardbygamesplitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbygamesplitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbygeneralsplitsGetSignalErrorFull() instead")
    void playerdashboardbygeneralsplitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbygeneralsplitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbylastngamesGetSignalErrorFull() instead")
    void playerdashboardbylastngamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbylastngamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyopponentGetSignalErrorFull() instead")
    void playerdashboardbyopponentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyopponentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyshootingsplitsGetSignalErrorFull() instead")
    void playerdashboardbyshootingsplitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyshootingsplitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyteamperformanceGetSignalErrorFull() instead")
    void playerdashboardbyteamperformanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyteamperformanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashboardbyyearoveryearGetSignalErrorFull() instead")
    void playerdashboardbyyearoveryearGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashboardbyyearoveryearGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptpassGetSignalErrorFull() instead")
    void playerdashptpassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptpassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptrebGetSignalErrorFull() instead")
    void playerdashptrebGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptrebGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptreboundlogsGetSignalErrorFull() instead")
    void playerdashptreboundlogsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptreboundlogsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptshotdefendGetSignalErrorFull() instead")
    void playerdashptshotdefendGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptshotdefendGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptshotlogGetSignalErrorFull() instead")
    void playerdashptshotlogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptshotlogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerdashptshotsGetSignalErrorFull() instead")
    void playerdashptshotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerdashptshotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playergamelogGetSignalErrorFull() instead")
    void playergamelogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playergamelogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerprofileGetSignalErrorFull() instead")
    void playerprofileGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerprofileGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playerprofilev2GetSignalErrorFull() instead")
    void playerprofilev2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playerprofilev2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playersvsplayersGetSignalErrorFull() instead")
    void playersvsplayersGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playersvsplayersGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playervsplayerGetSignalErrorFull() instead")
    void playervsplayerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playervsplayerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use playoffpictureGetSignalErrorFull() instead")
    void playoffpictureGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void playoffpictureGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreboardGetSignalErrorFull() instead")
    void scoreboardGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreboardGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use scoreboardV2GetSignalErrorFull() instead")
    void scoreboardV2GetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void scoreboardV2GetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shotchartdetailGetSignalErrorFull() instead")
    void shotchartdetailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shotchartdetailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use shotchartlineupdetailGetSignalErrorFull() instead")
    void shotchartlineupdetailGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void shotchartlineupdetailGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyclutchGetSignalErrorFull() instead")
    void teamdashboardbyclutchGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyclutchGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbygamesplitsGetSignalErrorFull() instead")
    void teamdashboardbygamesplitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbygamesplitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbygeneralsplitsGetSignalErrorFull() instead")
    void teamdashboardbygeneralsplitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbygeneralsplitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbylastngamesGetSignalErrorFull() instead")
    void teamdashboardbylastngamesGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbylastngamesGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyopponentGetSignalErrorFull() instead")
    void teamdashboardbyopponentGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyopponentGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyshootingsplitsGetSignalErrorFull() instead")
    void teamdashboardbyshootingsplitsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyshootingsplitsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyteamperformanceGetSignalErrorFull() instead")
    void teamdashboardbyteamperformanceGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyteamperformanceGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashboardbyyearoveryearGetSignalErrorFull() instead")
    void teamdashboardbyyearoveryearGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashboardbyyearoveryearGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashlineupsGetSignalErrorFull() instead")
    void teamdashlineupsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashlineupsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashptpassGetSignalErrorFull() instead")
    void teamdashptpassGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashptpassGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashptrebGetSignalErrorFull() instead")
    void teamdashptrebGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashptrebGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamdashptshotsGetSignalErrorFull() instead")
    void teamdashptshotsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamdashptshotsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamgamelogGetSignalErrorFull() instead")
    void teamgamelogGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamgamelogGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teaminfocommonGetSignalErrorFull() instead")
    void teaminfocommonGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teaminfocommonGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamplayerdashboardGetSignalErrorFull() instead")
    void teamplayerdashboardGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamplayerdashboardGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamplayeronoffdetailsGetSignalErrorFull() instead")
    void teamplayeronoffdetailsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamplayeronoffdetailsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamplayeronoffsummaryGetSignalErrorFull() instead")
    void teamplayeronoffsummaryGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamplayeronoffsummaryGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamvsplayerGetSignalErrorFull() instead")
    void teamvsplayerGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamvsplayerGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use teamyearbyyearstatsGetSignalErrorFull() instead")
    void teamyearbyyearstatsGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void teamyearbyyearstatsGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);
    Q_DECL_DEPRECATED_X("Use videoStatusGetSignalErrorFull() instead")
    void videoStatusGetSignalEFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, QString error_str);
    void videoStatusGetSignalErrorFull(OAIHttpRequestWorker *worker, QNetworkReply::NetworkError error_type, const QString &error_str);

    void abortRequestsSignal();
    void allPendingRequestsCompleted();

public Q_SLOTS:
    void tokenAvailable();
};

} // namespace OpenAPI
#endif
